/*! For license information please see bundle.js.LICENSE.txt */
(()=>{"use strict";var e={909:(e,t,n)=>{n.d(t,{A:()=>l});var r=n(354),a=n.n(r),o=n(314),i=n.n(o)()(a());i.push([e.id,':root{--primary-color: #3498db;--secondary-color: #2ecc71;--reject-color: #ff4c3c;--background-color: #fafafa;--text-color-secondary: #fff;--text-color-primary: #333;--border-color: #ddd}*{margin:0;padding:0;box-sizing:border-box;font-family:"Helvetica Neue",sans-serif}',"",{version:3,sources:["webpack://./src/app/ui/global.scss"],names:[],mappings:"AAAA,MACE,wBAAA,CACA,0BAAA,CACA,uBAAA,CACA,2BAAA,CACA,4BAAA,CACA,0BAAA,CACA,oBAAA,CAGF,EACE,QAAA,CACA,SAAA,CACA,qBAAA,CACA,uCAAA",sourcesContent:[':root {\n  --primary-color: #3498db;\n  --secondary-color: #2ecc71;\n  --reject-color: #ff4c3c;\n  --background-color: #fafafa;\n  --text-color-secondary: #fff;\n  --text-color-primary: #333;\n  --border-color: #ddd;\n}\n\n* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n  font-family: "Helvetica Neue", sans-serif;\n}\n'],sourceRoot:""}]);const l=i},409:(e,t,n)=>{n.d(t,{Ay:()=>p,NK:()=>f,dV:()=>s,gD:()=>u,tp:()=>c,yN:()=>d,zA:()=>l});var r=n(354),a=n.n(r),o=n(314),i=n.n(o)()(a());i.push([e.id,".src-features-CompaniesTable-ui-CompaniesTable-module__table_container--xwzGP{display:flex;flex-direction:column}.src-features-CompaniesTable-ui-CompaniesTable-module__table_container--xwzGP .src-features-CompaniesTable-ui-CompaniesTable-module__controls_container--e0XCZ{display:flex;justify-content:space-between}.src-features-CompaniesTable-ui-CompaniesTable-module__table_container--xwzGP .src-features-CompaniesTable-ui-CompaniesTable-module__controls_container--e0XCZ .src-features-CompaniesTable-ui-CompaniesTable-module__buttons_container--LkY8C{display:flex;gap:.5rem}.src-features-CompaniesTable-ui-CompaniesTable-module__table_container--xwzGP .src-features-CompaniesTable-ui-CompaniesTable-module__controls_container--e0XCZ .src-features-CompaniesTable-ui-CompaniesTable-module__new_company_form--ieXDO{display:flex;gap:.5rem}.src-features-CompaniesTable-ui-CompaniesTable-module__table_container--xwzGP .src-features-CompaniesTable-ui-CompaniesTable-module__table--K3vLi{border-collapse:collapse;background-color:var(--background-color)}.src-features-CompaniesTable-ui-CompaniesTable-module__table_container--xwzGP .src-features-CompaniesTable-ui-CompaniesTable-module__table--K3vLi .src-features-CompaniesTable-ui-CompaniesTable-module__table_header--YaBW_{display:flex;background-color:var(--primary-color);color:var(--text-color-secondary);font-weight:bold}","",{version:3,sources:["webpack://./src/features/CompaniesTable/ui/CompaniesTable.module.scss"],names:[],mappings:"AAAA,8EACE,YAAA,CACA,qBAAA,CAEA,+JACE,YAAA,CACA,6BAAA,CAEA,+OACE,YAAA,CACA,SAAA,CAGF,8OACE,YAAA,CACA,SAAA,CAIJ,kJACE,wBAAA,CACA,wCAAA,CAEA,6NACE,YAAA,CACA,qCAAA,CACA,iCAAA,CACA,gBAAA",sourcesContent:[".table_container {\n  display: flex;\n  flex-direction: column;\n\n  .controls_container {\n    display: flex;\n    justify-content: space-between;\n\n    .buttons_container {\n      display: flex;\n      gap: 0.5rem;\n    }\n\n    .new_company_form {\n      display: flex;\n      gap: 0.5rem;\n    }\n  }\n\n  .table {\n    border-collapse: collapse;\n    background-color: var(--background-color);\n\n    .table_header {\n      display: flex;\n      background-color: var(--primary-color);\n      color: var(--text-color-secondary);\n      font-weight: bold;\n    }\n  }\n}\n"],sourceRoot:""}]);var l="src-features-CompaniesTable-ui-CompaniesTable-module__table_container--xwzGP",s="src-features-CompaniesTable-ui-CompaniesTable-module__controls_container--e0XCZ",d="src-features-CompaniesTable-ui-CompaniesTable-module__buttons_container--LkY8C",u="src-features-CompaniesTable-ui-CompaniesTable-module__new_company_form--ieXDO",c="src-features-CompaniesTable-ui-CompaniesTable-module__table--K3vLi",f="src-features-CompaniesTable-ui-CompaniesTable-module__table_header--YaBW_";const p=i},393:(e,t,n)=>{n.d(t,{Ay:()=>s,MH:()=>l});var r=n(354),a=n.n(r),o=n(314),i=n.n(o)()(a());i.push([e.id,".src-features-CompaniesTable-ui-CompanyRow-module__table_row--U5J4c{display:flex;width:100%;border-bottom:1px solid var(--border-color)}.src-features-CompaniesTable-ui-CompanyRow-module__table_row--U5J4c:has(input[type=checkbox]:checked){background-color:color-mix(in srgb, var(--secondary-color), transparent 60%)}.src-features-CompaniesTable-ui-CompanyRow-module__table_row--U5J4c:has(input[type=checkbox]:checked) .src-features-CompaniesTable-ui-CompanyRow-module__table_cell--lgkAM{color:color-mix(in srgb, var(--text-color), black 10%)}.src-features-CompaniesTable-ui-CompanyRow-module__table_row--U5J4c>*:first-child{flex:0 0 auto}.src-features-CompaniesTable-ui-CompanyRow-module__table_row--U5J4c>*:not(:first-child){flex:1}.src-features-CompaniesTable-ui-CompanyRow-module__table_row--U5J4c>*{flex:1;padding:.75rem;text-align:left}input[type=checkbox]{cursor:pointer}","",{version:3,sources:["webpack://./src/features/CompaniesTable/ui/CompanyRow.module.scss"],names:[],mappings:"AAAA,oEASE,YAAA,CACA,UAAA,CACA,2CAAA,CAVA,sGACE,4EAAA,CAEA,2KACE,sDAAA,CAQJ,kFACE,aAAA,CAGF,wFACE,MAAA,CAGF,sEACE,MAAA,CACA,cAAA,CACA,eAAA,CAIJ,qBACE,cAAA",sourcesContent:[".table_row {\n  &:has(input[type='checkbox']:checked) {\n    background-color: color-mix(in srgb, var(--secondary-color), transparent 60%);\n\n    .table_cell {\n      color: color-mix(in srgb, var(--text-color), black 10%);\n    }\n  }\n\n  display: flex;\n  width: 100%;\n  border-bottom: 1px solid var(--border-color);\n\n  &>*:first-child {\n    flex: 0 0 auto;\n  }\n\n  &>*:not(:first-child) {\n    flex: 1;\n  }\n\n  &>* {\n    flex: 1;\n    padding: 0.75rem;\n    text-align: left;\n  }\n}\n\ninput[type='checkbox'] {\n  cursor: pointer;\n}\n"],sourceRoot:""}]);var l="src-features-CompaniesTable-ui-CompanyRow-module__table_row--U5J4c";const s=i},233:(e,t,n)=>{n.d(t,{Ay:()=>m,EX:()=>s,OR:()=>p,Rm:()=>f,Y:()=>u,as:()=>d,x6:()=>l,zB:()=>c});var r=n(354),a=n.n(r),o=n(314),i=n.n(o)()(a());i.push([e.id,".src-share-ui-AppButton-AppButton-module__button--eWaRm{color:var(--text-color-secondary);border:none;cursor:pointer;transition:background-color .3s ease}.src-share-ui-AppButton-AppButton-module__button--eWaRm:disabled{opacity:.6;cursor:not-allowed}.src-share-ui-AppButton-AppButton-module__button--eWaRm:hover:not(:disabled){background-color:var(--secondary-color)}.src-share-ui-AppButton-AppButton-module__button--eWaRm.src-share-ui-AppButton-AppButton-module__small--xgvMH{padding:5px 10px;font-size:14px}.src-share-ui-AppButton-AppButton-module__button--eWaRm.src-share-ui-AppButton-AppButton-module__large--KnyhH{padding:15px 20px;font-size:18px}.src-share-ui-AppButton-AppButton-module__button--eWaRm.src-share-ui-AppButton-AppButton-module__medium--_21Gr{padding:10px 15px;font-size:16px}.src-share-ui-AppButton-AppButton-module__button--eWaRm.src-share-ui-AppButton-AppButton-module__primary--PApWQ{background-color:var(--primary-color)}.src-share-ui-AppButton-AppButton-module__button--eWaRm.src-share-ui-AppButton-AppButton-module__secondary--O7w4m{background-color:var(--secondary-color)}.src-share-ui-AppButton-AppButton-module__button--eWaRm.src-share-ui-AppButton-AppButton-module__danger--_Da5s{background-color:color-mix(in srgb, var(--reject-color) 85%, transparent)}.src-share-ui-AppButton-AppButton-module__button--eWaRm.src-share-ui-AppButton-AppButton-module__danger--_Da5s:hover{background-color:var(--reject-color)}","",{version:3,sources:["webpack://./src/share/ui/AppButton/AppButton.module.scss"],names:[],mappings:"AAAA,wDACE,iCAAA,CACA,WAAA,CACA,cAAA,CACA,oCAAA,CAEA,iEACE,UAAA,CACA,kBAAA,CAGF,6EACE,uCAAA,CAGF,8GACE,gBAAA,CACA,cAAA,CAGF,8GACE,iBAAA,CACA,cAAA,CAGF,+GACE,iBAAA,CACA,cAAA,CAGF,gHACE,qCAAA,CAGF,kHACE,uCAAA,CAGF,+GACE,yEAAA,CAEA,qHACE,oCAAA",sourcesContent:[".button {\n  color: var(--text-color-secondary);\n  border: none;\n  cursor: pointer;\n  transition: background-color 0.3s ease;\n\n  &:disabled {\n    opacity: 0.6;\n    cursor: not-allowed;\n  }\n\n  &:hover:not(:disabled) {\n    background-color: var(--secondary-color);\n  }\n\n  &.small {\n    padding: 5px 10px;\n    font-size: 14px;\n  }\n\n  &.large {\n    padding: 15px 20px;\n    font-size: 18px;\n  }\n\n  &.medium {\n    padding: 10px 15px;\n    font-size: 16px;\n  }\n\n  &.primary {\n    background-color: var(--primary-color);\n  }\n\n  &.secondary {\n    background-color: var(--secondary-color);\n  }\n\n  &.danger {\n    background-color: color-mix(in srgb, var(--reject-color) 85%, transparent);\n\n    &:hover {\n      background-color: var(--reject-color);\n    }\n  }\n\n}\n"],sourceRoot:""}]);var l="src-share-ui-AppButton-AppButton-module__button--eWaRm",s="src-share-ui-AppButton-AppButton-module__small--xgvMH",d="src-share-ui-AppButton-AppButton-module__large--KnyhH",u="src-share-ui-AppButton-AppButton-module__medium--_21Gr",c="src-share-ui-AppButton-AppButton-module__primary--PApWQ",f="src-share-ui-AppButton-AppButton-module__secondary--O7w4m",p="src-share-ui-AppButton-AppButton-module__danger--_Da5s";const m=i},275:(e,t,n)=>{n.d(t,{Ay:()=>c,EX:()=>s,Y:()=>u,as:()=>d,hF:()=>l});var r=n(354),a=n.n(r),o=n(314),i=n.n(o)()(a());i.push([e.id,".src-share-ui-AppTextInput-AppTextInput-module__input--wWEyx{width:100%;border:1px solid var(--border-color);border-radius:4px;color:var(--text-color-primary);background-color:var(--background-color);transition:border-color .3s ease}.src-share-ui-AppTextInput-AppTextInput-module__input--wWEyx:focus{border-color:var(--primary-color);outline:none}.src-share-ui-AppTextInput-AppTextInput-module__input--wWEyx::placeholder{color:var(--text-color-secondary)}.src-share-ui-AppTextInput-AppTextInput-module__input--wWEyx.src-share-ui-AppTextInput-AppTextInput-module__small--BkjDx{padding:5px;font-size:14px}.src-share-ui-AppTextInput-AppTextInput-module__input--wWEyx.src-share-ui-AppTextInput-AppTextInput-module__large--pFXzu{padding:15px;font-size:18px}.src-share-ui-AppTextInput-AppTextInput-module__input--wWEyx.src-share-ui-AppTextInput-AppTextInput-module__medium--elaHQ{padding:10px;font-size:16px}","",{version:3,sources:["webpack://./src/share/ui/AppTextInput/AppTextInput.module.scss"],names:[],mappings:"AAAA,6DACE,UAAA,CACA,oCAAA,CACA,iBAAA,CACA,+BAAA,CACA,wCAAA,CACA,gCAAA,CAEA,mEACE,iCAAA,CACA,YAAA,CAGF,0EACE,iCAAA,CAGF,yHACE,WAAA,CACA,cAAA,CAGF,yHACE,YAAA,CACA,cAAA,CAGF,0HACE,YAAA,CACA,cAAA",sourcesContent:[".input {\n  width: 100%;\n  border: 1px solid var(--border-color);\n  border-radius: 4px;\n  color: var(--text-color-primary);\n  background-color: var(--background-color);\n  transition: border-color 0.3s ease;\n\n  &:focus {\n    border-color: var(--primary-color);\n    outline: none;\n  }\n\n  &::placeholder {\n    color: var(--text-color-secondary);\n  }\n\n  &.small {\n    padding: 5px;\n    font-size: 14px;\n  }\n\n  &.large {\n    padding: 15px;\n    font-size: 18px;\n  }\n\n  &.medium {\n    padding: 10px;\n    font-size: 16px;\n  }\n\n}\n"],sourceRoot:""}]);var l="src-share-ui-AppTextInput-AppTextInput-module__input--wWEyx",s="src-share-ui-AppTextInput-AppTextInput-module__small--BkjDx",d="src-share-ui-AppTextInput-AppTextInput-module__large--pFXzu",u="src-share-ui-AppTextInput-AppTextInput-module__medium--elaHQ";const c=i},685:(e,t,n)=>{n.d(t,{Ay:()=>d,iE:()=>l,jf:()=>s});var r=n(354),a=n.n(r),o=n(314),i=n.n(o)()(a());i.push([e.id,".src-widgets-ModifiableField-ui-ModifiableField-module__wrapper--lfao4{display:flex;flex-direction:row;gap:10px}.src-widgets-ModifiableField-ui-ModifiableField-module__wrapper--lfao4 .src-widgets-ModifiableField-ui-ModifiableField-module__child--Ml7cd{margin:0;padding:5px}","",{version:3,sources:["webpack://./src/widgets/ModifiableField/ui/ModifiableField.module.scss"],names:[],mappings:"AAAA,uEACE,YAAA,CACA,kBAAA,CACA,QAAA,CAEA,4IACE,QAAA,CACA,WAAA",sourcesContent:[".wrapper {\n  display: flex;\n  flex-direction: row;\n  gap: 10px;\n\n  .child {\n    margin: 0;\n    padding: 5px;\n  }\n}\n"],sourceRoot:""}]);var l="src-widgets-ModifiableField-ui-ModifiableField-module__wrapper--lfao4",s="src-widgets-ModifiableField-ui-ModifiableField-module__child--Ml7cd";const d=i},314:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,a,o){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(r)for(var l=0;l<this.length;l++){var s=this[l][0];null!=s&&(i[s]=!0)}for(var d=0;d<e.length;d++){var u=[].concat(e[d]);r&&i[u[0]]||(void 0!==o&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=o),n&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=n):u[2]=n),a&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=a):u[4]="".concat(a)),t.push(u))}},t}},354:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(a," */");return[t].concat([o]).join("\n")}return[t].join("\n")}},247:(e,t,n)=>{var r=n(982),a=n(540),o=n(961);function i(e){var t="https://react.dev/errors/"+e;if(1<arguments.length){t+="?args[]="+encodeURIComponent(arguments[1]);for(var n=2;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n])}return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var l=Symbol.for("react.element"),s=Symbol.for("react.transitional.element"),d=Symbol.for("react.portal"),u=Symbol.for("react.fragment"),c=Symbol.for("react.strict_mode"),f=Symbol.for("react.profiler"),p=Symbol.for("react.provider"),m=Symbol.for("react.consumer"),h=Symbol.for("react.context"),g=Symbol.for("react.forward_ref"),y=Symbol.for("react.suspense"),v=Symbol.for("react.suspense_list"),b=Symbol.for("react.memo"),S=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var w=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.tracing_marker");var _=Symbol.for("react.memo_cache_sentinel"),C=Symbol.iterator;function k(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=C&&e[C]||e["@@iterator"])?e:null}var x=Symbol.for("react.client.reference");function T(e){if(null==e)return null;if("function"==typeof e)return e.$$typeof===x?null:e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case u:return"Fragment";case d:return"Portal";case f:return"Profiler";case c:return"StrictMode";case y:return"Suspense";case v:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case h:return(e.displayName||"Context")+".Provider";case m:return(e._context.displayName||"Context")+".Consumer";case g:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case b:return null!==(t=e.displayName||null)?t:T(e.type)||"Memo";case S:t=e._payload,e=e._init;try{return T(e(t))}catch(e){}}return null}var A,P,z=a.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,R=Object.assign;function E(e){if(void 0===A)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);A=t&&t[1]||"",P=-1<e.stack.indexOf("\n    at")?" (<anonymous>)":-1<e.stack.indexOf("@")?"@unknown:0:0":""}return"\n"+A+e+P}var O=!1;function M(e,t){if(!e||O)return"";O=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{var r={DetermineComponentFrameRoot:function(){try{if(t){var n=function(){throw Error()};if(Object.defineProperty(n.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(n,[])}catch(e){var r=e}Reflect.construct(e,[],n)}else{try{n.call()}catch(e){r=e}e.call(n.prototype)}}else{try{throw Error()}catch(e){r=e}(n=e())&&"function"==typeof n.catch&&n.catch((function(){}))}}catch(e){if(e&&r&&"string"==typeof e.stack)return[e.stack,r.stack]}return[null,null]}};r.DetermineComponentFrameRoot.displayName="DetermineComponentFrameRoot";var a=Object.getOwnPropertyDescriptor(r.DetermineComponentFrameRoot,"name");a&&a.configurable&&Object.defineProperty(r.DetermineComponentFrameRoot,"name",{value:"DetermineComponentFrameRoot"});var o=r.DetermineComponentFrameRoot(),i=o[0],l=o[1];if(i&&l){var s=i.split("\n"),d=l.split("\n");for(a=r=0;r<s.length&&!s[r].includes("DetermineComponentFrameRoot");)r++;for(;a<d.length&&!d[a].includes("DetermineComponentFrameRoot");)a++;if(r===s.length||a===d.length)for(r=s.length-1,a=d.length-1;1<=r&&0<=a&&s[r]!==d[a];)a--;for(;1<=r&&0<=a;r--,a--)if(s[r]!==d[a]){if(1!==r||1!==a)do{if(r--,0>--a||s[r]!==d[a]){var u="\n"+s[r].replace(" at new "," at ");return e.displayName&&u.includes("<anonymous>")&&(u=u.replace("<anonymous>",e.displayName)),u}}while(1<=r&&0<=a);break}}}finally{O=!1,Error.prepareStackTrace=n}return(n=e?e.displayName||e.name:"")?E(n):""}function I(e){switch(e.tag){case 26:case 27:case 5:return E(e.type);case 16:return E("Lazy");case 13:return E("Suspense");case 19:return E("SuspenseList");case 0:case 15:return M(e.type,!1);case 11:return M(e.type.render,!1);case 1:return M(e.type,!0);default:return""}}function L(e){try{var t="";do{t+=I(e),e=e.return}while(e);return t}catch(e){return"\nError generating stack: "+e.message+"\n"+e.stack}}function D(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{!!(4098&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function N(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function F(e){if(D(e)!==e)throw Error(i(188))}function B(e){var t=e.tag;if(5===t||26===t||27===t||6===t)return e;for(e=e.child;null!==e;){if(null!==(t=B(e)))return t;e=e.sibling}return null}var W=Array.isArray,H=o.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,j={pending:!1,data:null,method:null,action:null},G=[],U=-1;function V(e){return{current:e}}function K(e){0>U||(e.current=G[U],G[U]=null,U--)}function J(e,t){U++,G[U]=e.current,e.current=t}var $=V(null),Y=V(null),q=V(null),Q=V(null);function X(e,t){switch(J(q,t),J(Y,e),J($,null),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)&&(t=t.namespaceURI)?Yu(t):0;break;default:if(t=(e=8===e?t.parentNode:t).tagName,e=e.namespaceURI)t=qu(e=Yu(e),t);else switch(t){case"svg":t=1;break;case"math":t=2;break;default:t=0}}K($),J($,t)}function Z(){K($),K(Y),K(q)}function ee(e){null!==e.memoizedState&&J(Q,e);var t=$.current,n=qu(t,e.type);t!==n&&(J(Y,e),J($,n))}function te(e){Y.current===e&&(K($),K(Y)),Q.current===e&&(K(Q),Lc._currentValue=j)}var ne=Object.prototype.hasOwnProperty,re=r.unstable_scheduleCallback,ae=r.unstable_cancelCallback,oe=r.unstable_shouldYield,ie=r.unstable_requestPaint,le=r.unstable_now,se=r.unstable_getCurrentPriorityLevel,de=r.unstable_ImmediatePriority,ue=r.unstable_UserBlockingPriority,ce=r.unstable_NormalPriority,fe=r.unstable_LowPriority,pe=r.unstable_IdlePriority,me=r.log,he=r.unstable_setDisableYieldValue,ge=null,ye=null;function ve(e){if("function"==typeof me&&he(e),ye&&"function"==typeof ye.setStrictMode)try{ye.setStrictMode(ge,e)}catch(e){}}var be=Math.clz32?Math.clz32:function(e){return 0==(e>>>=0)?32:31-(Se(e)/we|0)|0},Se=Math.log,we=Math.LN2,_e=128,Ce=4194304;function ke(e){var t=42&e;if(0!==t)return t;switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:return 64;case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194176&e;case 4194304:case 8388608:case 16777216:case 33554432:return 62914560&e;case 67108864:return 67108864;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 0;default:return e}}function xe(e,t){var n=e.pendingLanes;if(0===n)return 0;var r=0,a=e.suspendedLanes,o=e.pingedLanes,i=e.warmLanes;e=0!==e.finishedLanes;var l=134217727&n;return 0!==l?0!=(n=l&~a)?r=ke(n):0!=(o&=l)?r=ke(o):e||0!=(i=l&~i)&&(r=ke(i)):0!=(l=n&~a)?r=ke(l):0!==o?r=ke(o):e||0!=(i=n&~i)&&(r=ke(i)),0===r?0:0===t||t===r||t&a||!((a=r&-r)>=(i=t&-t)||32===a&&4194176&i)?r:t}function Te(e,t){return!(e.pendingLanes&~(e.suspendedLanes&~e.pingedLanes)&t)}function Ae(e,t){switch(e){case 1:case 2:case 4:case 8:return t+250;case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;default:return-1}}function Pe(){var e=_e;return!(4194176&(_e<<=1))&&(_e=128),e}function ze(){var e=Ce;return!(62914560&(Ce<<=1))&&(Ce=4194304),e}function Re(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function Ee(e,t){e.pendingLanes|=t,268435456!==t&&(e.suspendedLanes=0,e.pingedLanes=0,e.warmLanes=0)}function Oe(e,t,n){e.pendingLanes|=t,e.suspendedLanes&=~t;var r=31-be(t);e.entangledLanes|=t,e.entanglements[r]=1073741824|e.entanglements[r]|4194218&n}function Me(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var r=31-be(n),a=1<<r;a&t|e[r]&t&&(e[r]|=t),n&=~a}}function Ie(e){return 2<(e&=-e)?8<e?134217727&e?32:268435456:8:2}function Le(){var e=H.p;return 0!==e?e:void 0===(e=window.event)?32:$c(e.type)}var De=Math.random().toString(36).slice(2),Ne="__reactFiber$"+De,Fe="__reactProps$"+De,Be="__reactContainer$"+De,We="__reactEvents$"+De,He="__reactListeners$"+De,je="__reactHandles$"+De,Ge="__reactResources$"+De,Ue="__reactMarker$"+De;function Ve(e){delete e[Ne],delete e[Fe],delete e[We],delete e[He],delete e[je]}function Ke(e){var t=e[Ne];if(t)return t;for(var n=e.parentNode;n;){if(t=n[Be]||n[Ne]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=lc(e);null!==e;){if(n=e[Ne])return n;e=lc(e)}return t}n=(e=n).parentNode}return null}function Je(e){if(e=e[Ne]||e[Be]){var t=e.tag;if(5===t||6===t||13===t||26===t||27===t||3===t)return e}return null}function $e(e){var t=e.tag;if(5===t||26===t||27===t||6===t)return e.stateNode;throw Error(i(33))}function Ye(e){var t=e[Ge];return t||(t=e[Ge]={hoistableStyles:new Map,hoistableScripts:new Map}),t}function qe(e){e[Ue]=!0}var Qe=new Set,Xe={};function Ze(e,t){et(e,t),et(e+"Capture",t)}function et(e,t){for(Xe[e]=t,e=0;e<t.length;e++)Qe.add(t[e])}var tt=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),nt=RegExp("^[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"),rt={},at={};function ot(e,t,n){if(a=t,ne.call(at,a)||!ne.call(rt,a)&&(nt.test(a)?at[a]=!0:(rt[a]=!0,0)))if(null===n)e.removeAttribute(t);else{switch(typeof n){case"undefined":case"function":case"symbol":return void e.removeAttribute(t);case"boolean":var r=t.toLowerCase().slice(0,5);if("data-"!==r&&"aria-"!==r)return void e.removeAttribute(t)}e.setAttribute(t,""+n)}var a}function it(e,t,n){if(null===n)e.removeAttribute(t);else{switch(typeof n){case"undefined":case"function":case"symbol":case"boolean":return void e.removeAttribute(t)}e.setAttribute(t,""+n)}}function lt(e,t,n,r){if(null===r)e.removeAttribute(n);else{switch(typeof r){case"undefined":case"function":case"symbol":case"boolean":return void e.removeAttribute(n)}e.setAttributeNS(t,n,""+r)}}function st(e){switch(typeof e){case"bigint":case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function dt(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function ut(e){e._valueTracker||(e._valueTracker=function(e){var t=dt(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var a=n.get,o=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return a.call(this)},set:function(e){r=""+e,o.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function ct(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=dt(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function ft(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}var pt=/[\n"\\]/g;function mt(e){return e.replace(pt,(function(e){return"\\"+e.charCodeAt(0).toString(16)+" "}))}function ht(e,t,n,r,a,o,i,l){e.name="",null!=i&&"function"!=typeof i&&"symbol"!=typeof i&&"boolean"!=typeof i?e.type=i:e.removeAttribute("type"),null!=t?"number"===i?(0===t&&""===e.value||e.value!=t)&&(e.value=""+st(t)):e.value!==""+st(t)&&(e.value=""+st(t)):"submit"!==i&&"reset"!==i||e.removeAttribute("value"),null!=t?yt(e,i,st(t)):null!=n?yt(e,i,st(n)):null!=r&&e.removeAttribute("value"),null==a&&null!=o&&(e.defaultChecked=!!o),null!=a&&(e.checked=a&&"function"!=typeof a&&"symbol"!=typeof a),null!=l&&"function"!=typeof l&&"symbol"!=typeof l&&"boolean"!=typeof l?e.name=""+st(l):e.removeAttribute("name")}function gt(e,t,n,r,a,o,i,l){if(null!=o&&"function"!=typeof o&&"symbol"!=typeof o&&"boolean"!=typeof o&&(e.type=o),null!=t||null!=n){if(("submit"===o||"reset"===o)&&null==t)return;n=null!=n?""+st(n):"",t=null!=t?""+st(t):n,l||t===e.value||(e.value=t),e.defaultValue=t}r="function"!=typeof(r=null!=r?r:a)&&"symbol"!=typeof r&&!!r,e.checked=l?e.checked:!!r,e.defaultChecked=!!r,null!=i&&"function"!=typeof i&&"symbol"!=typeof i&&"boolean"!=typeof i&&(e.name=i)}function yt(e,t,n){"number"===t&&ft(e.ownerDocument)===e||e.defaultValue===""+n||(e.defaultValue=""+n)}function vt(e,t,n,r){if(e=e.options,t){t={};for(var a=0;a<n.length;a++)t["$"+n[a]]=!0;for(n=0;n<e.length;n++)a=t.hasOwnProperty("$"+e[n].value),e[n].selected!==a&&(e[n].selected=a),a&&r&&(e[n].defaultSelected=!0)}else{for(n=""+st(n),t=null,a=0;a<e.length;a++){if(e[a].value===n)return e[a].selected=!0,void(r&&(e[a].defaultSelected=!0));null!==t||e[a].disabled||(t=e[a])}null!==t&&(t.selected=!0)}}function bt(e,t,n){null==t||((t=""+st(t))!==e.value&&(e.value=t),null!=n)?e.defaultValue=null!=n?""+st(n):"":e.defaultValue!==t&&(e.defaultValue=t)}function St(e,t,n,r){if(null==t){if(null!=r){if(null!=n)throw Error(i(92));if(W(r)){if(1<r.length)throw Error(i(93));r=r[0]}n=r}null==n&&(n=""),t=n}n=st(t),e.defaultValue=n,(r=e.textContent)===n&&""!==r&&null!==r&&(e.value=r)}function wt(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var _t=new Set("animationIterationCount aspectRatio borderImageOutset borderImageSlice borderImageWidth boxFlex boxFlexGroup boxOrdinalGroup columnCount columns flex flexGrow flexPositive flexShrink flexNegative flexOrder gridArea gridRow gridRowEnd gridRowSpan gridRowStart gridColumn gridColumnEnd gridColumnSpan gridColumnStart fontWeight lineClamp lineHeight opacity order orphans scale tabSize widows zIndex zoom fillOpacity floodOpacity stopOpacity strokeDasharray strokeDashoffset strokeMiterlimit strokeOpacity strokeWidth MozAnimationIterationCount MozBoxFlex MozBoxFlexGroup MozLineClamp msAnimationIterationCount msFlex msZoom msFlexGrow msFlexNegative msFlexOrder msFlexPositive msFlexShrink msGridColumn msGridColumnSpan msGridRow msGridRowSpan WebkitAnimationIterationCount WebkitBoxFlex WebKitBoxFlexGroup WebkitBoxOrdinalGroup WebkitColumnCount WebkitColumns WebkitFlex WebkitFlexGrow WebkitFlexPositive WebkitFlexShrink WebkitLineClamp".split(" "));function Ct(e,t,n){var r=0===t.indexOf("--");null==n||"boolean"==typeof n||""===n?r?e.setProperty(t,""):"float"===t?e.cssFloat="":e[t]="":r?e.setProperty(t,n):"number"!=typeof n||0===n||_t.has(t)?"float"===t?e.cssFloat=n:e[t]=(""+n).trim():e[t]=n+"px"}function kt(e,t,n){if(null!=t&&"object"!=typeof t)throw Error(i(62));if(e=e.style,null!=n){for(var r in n)!n.hasOwnProperty(r)||null!=t&&t.hasOwnProperty(r)||(0===r.indexOf("--")?e.setProperty(r,""):"float"===r?e.cssFloat="":e[r]="");for(var a in t)r=t[a],t.hasOwnProperty(a)&&n[a]!==r&&Ct(e,a,r)}else for(var o in t)t.hasOwnProperty(o)&&Ct(e,o,t[o])}function xt(e){if(-1===e.indexOf("-"))return!1;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var Tt=new Map([["acceptCharset","accept-charset"],["htmlFor","for"],["httpEquiv","http-equiv"],["crossOrigin","crossorigin"],["accentHeight","accent-height"],["alignmentBaseline","alignment-baseline"],["arabicForm","arabic-form"],["baselineShift","baseline-shift"],["capHeight","cap-height"],["clipPath","clip-path"],["clipRule","clip-rule"],["colorInterpolation","color-interpolation"],["colorInterpolationFilters","color-interpolation-filters"],["colorProfile","color-profile"],["colorRendering","color-rendering"],["dominantBaseline","dominant-baseline"],["enableBackground","enable-background"],["fillOpacity","fill-opacity"],["fillRule","fill-rule"],["floodColor","flood-color"],["floodOpacity","flood-opacity"],["fontFamily","font-family"],["fontSize","font-size"],["fontSizeAdjust","font-size-adjust"],["fontStretch","font-stretch"],["fontStyle","font-style"],["fontVariant","font-variant"],["fontWeight","font-weight"],["glyphName","glyph-name"],["glyphOrientationHorizontal","glyph-orientation-horizontal"],["glyphOrientationVertical","glyph-orientation-vertical"],["horizAdvX","horiz-adv-x"],["horizOriginX","horiz-origin-x"],["imageRendering","image-rendering"],["letterSpacing","letter-spacing"],["lightingColor","lighting-color"],["markerEnd","marker-end"],["markerMid","marker-mid"],["markerStart","marker-start"],["overlinePosition","overline-position"],["overlineThickness","overline-thickness"],["paintOrder","paint-order"],["panose-1","panose-1"],["pointerEvents","pointer-events"],["renderingIntent","rendering-intent"],["shapeRendering","shape-rendering"],["stopColor","stop-color"],["stopOpacity","stop-opacity"],["strikethroughPosition","strikethrough-position"],["strikethroughThickness","strikethrough-thickness"],["strokeDasharray","stroke-dasharray"],["strokeDashoffset","stroke-dashoffset"],["strokeLinecap","stroke-linecap"],["strokeLinejoin","stroke-linejoin"],["strokeMiterlimit","stroke-miterlimit"],["strokeOpacity","stroke-opacity"],["strokeWidth","stroke-width"],["textAnchor","text-anchor"],["textDecoration","text-decoration"],["textRendering","text-rendering"],["transformOrigin","transform-origin"],["underlinePosition","underline-position"],["underlineThickness","underline-thickness"],["unicodeBidi","unicode-bidi"],["unicodeRange","unicode-range"],["unitsPerEm","units-per-em"],["vAlphabetic","v-alphabetic"],["vHanging","v-hanging"],["vIdeographic","v-ideographic"],["vMathematical","v-mathematical"],["vectorEffect","vector-effect"],["vertAdvY","vert-adv-y"],["vertOriginX","vert-origin-x"],["vertOriginY","vert-origin-y"],["wordSpacing","word-spacing"],["writingMode","writing-mode"],["xmlnsXlink","xmlns:xlink"],["xHeight","x-height"]]),At=/^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*:/i;function Pt(e){return At.test(""+e)?"javascript:throw new Error('React has blocked a javascript: URL as a security precaution.')":e}var zt=null;function Rt(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Et=null,Ot=null;function Mt(e){var t=Je(e);if(t&&(e=t.stateNode)){var n=e[Fe]||null;e:switch(e=t.stateNode,t.type){case"input":if(ht(e,n.value,n.defaultValue,n.defaultValue,n.checked,n.defaultChecked,n.type,n.name),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll('input[name="'+mt(""+t)+'"][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var a=r[Fe]||null;if(!a)throw Error(i(90));ht(r,a.value,a.defaultValue,a.defaultValue,a.checked,a.defaultChecked,a.type,a.name)}}for(t=0;t<n.length;t++)(r=n[t]).form===e.form&&ct(r)}break e;case"textarea":bt(e,n.value,n.defaultValue);break e;case"select":null!=(t=n.value)&&vt(e,!!n.multiple,t,!1)}}}var It=!1;function Lt(e,t,n){if(It)return e(t,n);It=!0;try{return e(t)}finally{if(It=!1,(null!==Et||null!==Ot)&&(Nd(),Et&&(t=Et,e=Ot,Ot=Et=null,Mt(t),e)))for(t=0;t<e.length;t++)Mt(e[t])}}function Dt(e,t){var n=e.stateNode;if(null===n)return null;var r=n[Fe]||null;if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(i(231,t,typeof n));return n}var Nt=!1;if(tt)try{var Ft={};Object.defineProperty(Ft,"passive",{get:function(){Nt=!0}}),window.addEventListener("test",Ft,Ft),window.removeEventListener("test",Ft,Ft)}catch(e){Nt=!1}var Bt=null,Wt=null,Ht=null;function jt(){if(Ht)return Ht;var e,t,n=Wt,r=n.length,a="value"in Bt?Bt.value:Bt.textContent,o=a.length;for(e=0;e<r&&n[e]===a[e];e++);var i=r-e;for(t=1;t<=i&&n[r-t]===a[o-t];t++);return Ht=a.slice(e,1<t?1-t:void 0)}function Gt(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function Ut(){return!0}function Vt(){return!1}function Kt(e){function t(t,n,r,a,o){for(var i in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=a,this.target=o,this.currentTarget=null,e)e.hasOwnProperty(i)&&(t=e[i],this[i]=t?t(a):a[i]);return this.isDefaultPrevented=(null!=a.defaultPrevented?a.defaultPrevented:!1===a.returnValue)?Ut:Vt,this.isPropagationStopped=Vt,this}return R(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=Ut)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=Ut)},persist:function(){},isPersistent:Ut}),t}var Jt,$t,Yt,qt={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},Qt=Kt(qt),Xt=R({},qt,{view:0,detail:0}),Zt=Kt(Xt),en=R({},Xt,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:fn,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==Yt&&(Yt&&"mousemove"===e.type?(Jt=e.screenX-Yt.screenX,$t=e.screenY-Yt.screenY):$t=Jt=0,Yt=e),Jt)},movementY:function(e){return"movementY"in e?e.movementY:$t}}),tn=Kt(en),nn=Kt(R({},en,{dataTransfer:0})),rn=Kt(R({},Xt,{relatedTarget:0})),an=Kt(R({},qt,{animationName:0,elapsedTime:0,pseudoElement:0})),on=Kt(R({},qt,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}})),ln=Kt(R({},qt,{data:0})),sn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},dn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},un={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function cn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=un[e])&&!!t[e]}function fn(){return cn}var pn=Kt(R({},Xt,{key:function(e){if(e.key){var t=sn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=Gt(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?dn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:fn,charCode:function(e){return"keypress"===e.type?Gt(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?Gt(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}})),mn=Kt(R({},en,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),hn=Kt(R({},Xt,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:fn})),gn=Kt(R({},qt,{propertyName:0,elapsedTime:0,pseudoElement:0})),yn=Kt(R({},en,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0})),vn=Kt(R({},qt,{newState:0,oldState:0})),bn=[9,13,27,32],Sn=tt&&"CompositionEvent"in window,wn=null;tt&&"documentMode"in document&&(wn=document.documentMode);var _n=tt&&"TextEvent"in window&&!wn,Cn=tt&&(!Sn||wn&&8<wn&&11>=wn),kn=String.fromCharCode(32),xn=!1;function Tn(e,t){switch(e){case"keyup":return-1!==bn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function An(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Pn=!1,zn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Rn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!zn[e.type]:"textarea"===t}function En(e,t,n,r){Et?Ot?Ot.push(r):Ot=[r]:Et=r,0<(t=Lu(t,"onChange")).length&&(n=new Qt("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var On=null,Mn=null;function In(e){Au(e,0)}function Ln(e){if(ct($e(e)))return e}function Dn(e,t){if("change"===e)return t}var Nn=!1;if(tt){var Fn;if(tt){var Bn="oninput"in document;if(!Bn){var Wn=document.createElement("div");Wn.setAttribute("oninput","return;"),Bn="function"==typeof Wn.oninput}Fn=Bn}else Fn=!1;Nn=Fn&&(!document.documentMode||9<document.documentMode)}function Hn(){On&&(On.detachEvent("onpropertychange",jn),Mn=On=null)}function jn(e){if("value"===e.propertyName&&Ln(Mn)){var t=[];En(t,Mn,e,Rt(e)),Lt(In,t)}}function Gn(e,t,n){"focusin"===e?(Hn(),Mn=n,(On=t).attachEvent("onpropertychange",jn)):"focusout"===e&&Hn()}function Un(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Ln(Mn)}function Vn(e,t){if("click"===e)return Ln(t)}function Kn(e,t){if("input"===e||"change"===e)return Ln(t)}var Jn="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t};function $n(e,t){if(Jn(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var a=n[r];if(!ne.call(t,a)||!Jn(e[a],t[a]))return!1}return!0}function Yn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function qn(e,t){var n,r=Yn(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=Yn(r)}}function Qn(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?Qn(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function Xn(e){for(var t=ft((e=null!=e&&null!=e.ownerDocument&&null!=e.ownerDocument.defaultView?e.ownerDocument.defaultView:window).document);t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=ft((e=t.contentWindow).document)}return t}function Zn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function er(e,t){var n=Xn(t);t=e.focusedElem;var r=e.selectionRange;if(n!==t&&t&&t.ownerDocument&&Qn(t.ownerDocument.documentElement,t)){if(null!==r&&Zn(t))if(e=r.start,void 0===(n=r.end)&&(n=e),"selectionStart"in t)t.selectionStart=e,t.selectionEnd=Math.min(n,t.value.length);else if((n=(e=t.ownerDocument||document)&&e.defaultView||window).getSelection){n=n.getSelection();var a=t.textContent.length,o=Math.min(r.start,a);r=void 0===r.end?o:Math.min(r.end,a),!n.extend&&o>r&&(a=r,r=o,o=a),a=qn(t,o);var i=qn(t,r);a&&i&&(1!==n.rangeCount||n.anchorNode!==a.node||n.anchorOffset!==a.offset||n.focusNode!==i.node||n.focusOffset!==i.offset)&&((e=e.createRange()).setStart(a.node,a.offset),n.removeAllRanges(),o>r?(n.addRange(e),n.extend(i.node,i.offset)):(e.setEnd(i.node,i.offset),n.addRange(e)))}for(e=[],n=t;n=n.parentNode;)1===n.nodeType&&e.push({element:n,left:n.scrollLeft,top:n.scrollTop});for("function"==typeof t.focus&&t.focus(),t=0;t<e.length;t++)(n=e[t]).element.scrollLeft=n.left,n.element.scrollTop=n.top}}var tr=tt&&"documentMode"in document&&11>=document.documentMode,nr=null,rr=null,ar=null,or=!1;function ir(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;or||null==nr||nr!==ft(r)||(r="selectionStart"in(r=nr)&&Zn(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},ar&&$n(ar,r)||(ar=r,0<(r=Lu(rr,"onSelect")).length&&(t=new Qt("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=nr)))}function lr(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var sr={animationend:lr("Animation","AnimationEnd"),animationiteration:lr("Animation","AnimationIteration"),animationstart:lr("Animation","AnimationStart"),transitionrun:lr("Transition","TransitionRun"),transitionstart:lr("Transition","TransitionStart"),transitioncancel:lr("Transition","TransitionCancel"),transitionend:lr("Transition","TransitionEnd")},dr={},ur={};function cr(e){if(dr[e])return dr[e];if(!sr[e])return e;var t,n=sr[e];for(t in n)if(n.hasOwnProperty(t)&&t in ur)return dr[e]=n[t];return e}tt&&(ur=document.createElement("div").style,"AnimationEvent"in window||(delete sr.animationend.animation,delete sr.animationiteration.animation,delete sr.animationstart.animation),"TransitionEvent"in window||delete sr.transitionend.transition);var fr=cr("animationend"),pr=cr("animationiteration"),mr=cr("animationstart"),hr=cr("transitionrun"),gr=cr("transitionstart"),yr=cr("transitioncancel"),vr=cr("transitionend"),br=new Map,Sr="abort auxClick beforeToggle cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll scrollEnd toggle touchMove waiting wheel".split(" ");function wr(e,t){br.set(e,t),Ze(t,[e])}var _r=[],Cr=0,kr=0;function xr(){for(var e=Cr,t=kr=Cr=0;t<e;){var n=_r[t];_r[t++]=null;var r=_r[t];_r[t++]=null;var a=_r[t];_r[t++]=null;var o=_r[t];if(_r[t++]=null,null!==r&&null!==a){var i=r.pending;null===i?a.next=a:(a.next=i.next,i.next=a),r.pending=a}0!==o&&zr(n,a,o)}}function Tr(e,t,n,r){_r[Cr++]=e,_r[Cr++]=t,_r[Cr++]=n,_r[Cr++]=r,kr|=r,e.lanes|=r,null!==(e=e.alternate)&&(e.lanes|=r)}function Ar(e,t,n,r){return Tr(e,t,n,r),Rr(e)}function Pr(e,t){return Tr(e,null,null,t),Rr(e)}function zr(e,t,n){e.lanes|=n;var r=e.alternate;null!==r&&(r.lanes|=n);for(var a=!1,o=e.return;null!==o;)o.childLanes|=n,null!==(r=o.alternate)&&(r.childLanes|=n),22===o.tag&&(null===(e=o.stateNode)||1&e._visibility||(a=!0)),e=o,o=o.return;a&&null!==t&&3===e.tag&&(o=e.stateNode,a=31-be(n),null===(e=(o=o.hiddenUpdates)[a])?o[a]=[t]:e.push(t),t.lane=536870912|n)}function Rr(e){if(50<Ad)throw Ad=0,Pd=null,Error(i(185));for(var t=e.return;null!==t;)t=(e=t).return;return 3===e.tag?e.stateNode:null}var Er={},Or=new WeakMap;function Mr(e,t){if("object"==typeof e&&null!==e){var n=Or.get(e);return void 0!==n?n:(t={value:e,source:t,stack:L(t)},Or.set(e,t),t)}return{value:e,source:t,stack:L(t)}}var Ir=[],Lr=0,Dr=null,Nr=0,Fr=[],Br=0,Wr=null,Hr=1,jr="";function Gr(e,t){Ir[Lr++]=Nr,Ir[Lr++]=Dr,Dr=e,Nr=t}function Ur(e,t,n){Fr[Br++]=Hr,Fr[Br++]=jr,Fr[Br++]=Wr,Wr=e;var r=Hr;e=jr;var a=32-be(r)-1;r&=~(1<<a),n+=1;var o=32-be(t)+a;if(30<o){var i=a-a%5;o=(r&(1<<i)-1).toString(32),r>>=i,a-=i,Hr=1<<32-be(t)+a|n<<a|r,jr=o+e}else Hr=1<<o|n<<a|r,jr=e}function Vr(e){null!==e.return&&(Gr(e,1),Ur(e,1,0))}function Kr(e){for(;e===Dr;)Dr=Ir[--Lr],Ir[Lr]=null,Nr=Ir[--Lr],Ir[Lr]=null;for(;e===Wr;)Wr=Fr[--Br],Fr[Br]=null,jr=Fr[--Br],Fr[Br]=null,Hr=Fr[--Br],Fr[Br]=null}var Jr=null,$r=null,Yr=!1,qr=null,Qr=!1,Xr=Error(i(519));function Zr(e){throw aa(Mr(Error(i(418,"")),e)),Xr}function ea(e){var t=e.stateNode,n=e.type,r=e.memoizedProps;switch(t[Ne]=e,t[Fe]=r,n){case"dialog":Pu("cancel",t),Pu("close",t);break;case"iframe":case"object":case"embed":Pu("load",t);break;case"video":case"audio":for(n=0;n<xu.length;n++)Pu(xu[n],t);break;case"source":Pu("error",t);break;case"img":case"image":case"link":Pu("error",t),Pu("load",t);break;case"details":Pu("toggle",t);break;case"input":Pu("invalid",t),gt(t,r.value,r.defaultValue,r.checked,r.defaultChecked,r.type,r.name,!0),ut(t);break;case"select":Pu("invalid",t);break;case"textarea":Pu("invalid",t),St(t,r.value,r.defaultValue,r.children),ut(t)}"string"!=typeof(n=r.children)&&"number"!=typeof n&&"bigint"!=typeof n||t.textContent===""+n||!0===r.suppressHydrationWarning||Hu(t.textContent,n)?(null!=r.popover&&(Pu("beforetoggle",t),Pu("toggle",t)),null!=r.onScroll&&Pu("scroll",t),null!=r.onScrollEnd&&Pu("scrollend",t),null!=r.onClick&&(t.onclick=ju),t=!0):t=!1,t||Zr(e)}function ta(e){for(Jr=e.return;Jr;)switch(Jr.tag){case 3:case 27:return void(Qr=!0);case 5:case 13:return void(Qr=!1);default:Jr=Jr.return}}function na(e){if(e!==Jr)return!1;if(!Yr)return ta(e),Yr=!0,!1;var t,n=!1;if((t=3!==e.tag&&27!==e.tag)&&((t=5===e.tag)&&(t=!("form"!==(t=e.type)&&"button"!==t)||Qu(e.type,e.memoizedProps)),t=!t),t&&(n=!0),n&&$r&&Zr(e),ta(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(i(317));e:{for(e=e.nextSibling,n=0;e;){if(8===e.nodeType)if("/$"===(t=e.data)){if(0===n){$r=ic(e.nextSibling);break e}n--}else"$"!==t&&"$!"!==t&&"$?"!==t||n++;e=e.nextSibling}$r=null}}else $r=Jr?ic(e.stateNode.nextSibling):null;return!0}function ra(){$r=Jr=null,Yr=!1}function aa(e){null===qr?qr=[e]:qr.push(e)}var oa=Error(i(460)),ia=Error(i(474)),la={then:function(){}};function sa(e){return"fulfilled"===(e=e.status)||"rejected"===e}function da(){}function ua(e,t,n){switch(void 0===(n=e[n])?e.push(t):n!==t&&(t.then(da,da),t=n),t.status){case"fulfilled":return t.value;case"rejected":if((e=t.reason)===oa)throw Error(i(483));throw e;default:if("string"==typeof t.status)t.then(da,da);else{if(null!==(e=ed)&&100<e.shellSuspendCounter)throw Error(i(482));(e=t).status="pending",e.then((function(e){if("pending"===t.status){var n=t;n.status="fulfilled",n.value=e}}),(function(e){if("pending"===t.status){var n=t;n.status="rejected",n.reason=e}}))}switch(t.status){case"fulfilled":return t.value;case"rejected":if((e=t.reason)===oa)throw Error(i(483));throw e}throw ca=t,oa}}var ca=null;function fa(){if(null===ca)throw Error(i(459));var e=ca;return ca=null,e}var pa=null,ma=0;function ha(e){var t=ma;return ma+=1,null===pa&&(pa=[]),ua(pa,e,t)}function ga(e,t){t=t.props.ref,e.ref=void 0!==t?t:null}function ya(e,t){if(t.$$typeof===l)throw Error(i(525));throw e=Object.prototype.toString.call(t),Error(i(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function va(e){return(0,e._init)(e._payload)}function ba(e){function t(t,n){if(e){var r=t.deletions;null===r?(t.deletions=[n],t.flags|=16):r.push(n)}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e){for(var t=new Map;null!==e;)null!==e.key?t.set(e.key,e):t.set(e.index,e),e=e.sibling;return t}function a(e,t){return(e=Ds(e,t)).index=0,e.sibling=null,e}function o(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags|=33554434,n):r:(t.flags|=33554434,n):(t.flags|=1048576,n)}function l(t){return e&&null===t.alternate&&(t.flags|=33554434),t}function c(e,t,n,r){return null===t||6!==t.tag?((t=Hs(n,e.mode,r)).return=e,t):((t=a(t,n)).return=e,t)}function f(e,t,n,r){var o=n.type;return o===u?m(e,t,n.props.children,r,n.key):null!==t&&(t.elementType===o||"object"==typeof o&&null!==o&&o.$$typeof===S&&va(o)===t.type)?(ga(t=a(t,n.props),n),t.return=e,t):(ga(t=Fs(n.type,n.key,n.props,null,e.mode,r),n),t.return=e,t)}function p(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=js(n,e.mode,r)).return=e,t):((t=a(t,n.children||[])).return=e,t)}function m(e,t,n,r,o){return null===t||7!==t.tag?((t=Bs(n,e.mode,r,o)).return=e,t):((t=a(t,n)).return=e,t)}function g(e,t,n){if("string"==typeof t&&""!==t||"number"==typeof t||"bigint"==typeof t)return(t=Hs(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case s:return ga(n=Fs(t.type,t.key,t.props,null,e.mode,n),t),n.return=e,n;case d:return(t=js(t,e.mode,n)).return=e,t;case S:return g(e,t=(0,t._init)(t._payload),n)}if(W(t)||k(t))return(t=Bs(t,e.mode,n,null)).return=e,t;if("function"==typeof t.then)return g(e,ha(t),n);if(t.$$typeof===h)return g(e,xl(e,t),n);ya(e,t)}return null}function y(e,t,n,r){var a=null!==t?t.key:null;if("string"==typeof n&&""!==n||"number"==typeof n||"bigint"==typeof n)return null!==a?null:c(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case s:return n.key===a?f(e,t,n,r):null;case d:return n.key===a?p(e,t,n,r):null;case S:return y(e,t,n=(a=n._init)(n._payload),r)}if(W(n)||k(n))return null!==a?null:m(e,t,n,r,null);if("function"==typeof n.then)return y(e,t,ha(n),r);if(n.$$typeof===h)return y(e,t,xl(e,n),r);ya(e,n)}return null}function v(e,t,n,r,a){if("string"==typeof r&&""!==r||"number"==typeof r||"bigint"==typeof r)return c(t,e=e.get(n)||null,""+r,a);if("object"==typeof r&&null!==r){switch(r.$$typeof){case s:return f(t,e=e.get(null===r.key?n:r.key)||null,r,a);case d:return p(t,e=e.get(null===r.key?n:r.key)||null,r,a);case S:return v(e,t,n,r=(0,r._init)(r._payload),a)}if(W(r)||k(r))return m(t,e=e.get(n)||null,r,a,null);if("function"==typeof r.then)return v(e,t,n,ha(r),a);if(r.$$typeof===h)return v(e,t,n,xl(t,r),a);ya(t,r)}return null}function b(c,f,p,m){if("object"==typeof p&&null!==p&&p.type===u&&null===p.key&&(p=p.props.children),"object"==typeof p&&null!==p){switch(p.$$typeof){case s:e:{for(var w=p.key;null!==f;){if(f.key===w){if((w=p.type)===u){if(7===f.tag){n(c,f.sibling),(m=a(f,p.props.children)).return=c,c=m;break e}}else if(f.elementType===w||"object"==typeof w&&null!==w&&w.$$typeof===S&&va(w)===f.type){n(c,f.sibling),ga(m=a(f,p.props),p),m.return=c,c=m;break e}n(c,f);break}t(c,f),f=f.sibling}p.type===u?((m=Bs(p.props.children,c.mode,m,p.key)).return=c,c=m):(ga(m=Fs(p.type,p.key,p.props,null,c.mode,m),p),m.return=c,c=m)}return l(c);case d:e:{for(w=p.key;null!==f;){if(f.key===w){if(4===f.tag&&f.stateNode.containerInfo===p.containerInfo&&f.stateNode.implementation===p.implementation){n(c,f.sibling),(m=a(f,p.children||[])).return=c,c=m;break e}n(c,f);break}t(c,f),f=f.sibling}(m=js(p,c.mode,m)).return=c,c=m}return l(c);case S:return b(c,f,p=(w=p._init)(p._payload),m)}if(W(p))return function(a,i,l,s){for(var d=null,u=null,c=i,f=i=0,p=null;null!==c&&f<l.length;f++){c.index>f?(p=c,c=null):p=c.sibling;var m=y(a,c,l[f],s);if(null===m){null===c&&(c=p);break}e&&c&&null===m.alternate&&t(a,c),i=o(m,i,f),null===u?d=m:u.sibling=m,u=m,c=p}if(f===l.length)return n(a,c),Yr&&Gr(a,f),d;if(null===c){for(;f<l.length;f++)null!==(c=g(a,l[f],s))&&(i=o(c,i,f),null===u?d=c:u.sibling=c,u=c);return Yr&&Gr(a,f),d}for(c=r(c);f<l.length;f++)null!==(p=v(c,a,f,l[f],s))&&(e&&null!==p.alternate&&c.delete(null===p.key?f:p.key),i=o(p,i,f),null===u?d=p:u.sibling=p,u=p);return e&&c.forEach((function(e){return t(a,e)})),Yr&&Gr(a,f),d}(c,f,p,m);if(k(p)){if("function"!=typeof(w=k(p)))throw Error(i(150));return function(a,l,s,d){if(null==s)throw Error(i(151));for(var u=null,c=null,f=l,p=l=0,m=null,h=s.next();null!==f&&!h.done;p++,h=s.next()){f.index>p?(m=f,f=null):m=f.sibling;var b=y(a,f,h.value,d);if(null===b){null===f&&(f=m);break}e&&f&&null===b.alternate&&t(a,f),l=o(b,l,p),null===c?u=b:c.sibling=b,c=b,f=m}if(h.done)return n(a,f),Yr&&Gr(a,p),u;if(null===f){for(;!h.done;p++,h=s.next())null!==(h=g(a,h.value,d))&&(l=o(h,l,p),null===c?u=h:c.sibling=h,c=h);return Yr&&Gr(a,p),u}for(f=r(f);!h.done;p++,h=s.next())null!==(h=v(f,a,p,h.value,d))&&(e&&null!==h.alternate&&f.delete(null===h.key?p:h.key),l=o(h,l,p),null===c?u=h:c.sibling=h,c=h);return e&&f.forEach((function(e){return t(a,e)})),Yr&&Gr(a,p),u}(c,f,p=w.call(p),m)}if("function"==typeof p.then)return b(c,f,ha(p),m);if(p.$$typeof===h)return b(c,f,xl(c,p),m);ya(c,p)}return"string"==typeof p&&""!==p||"number"==typeof p||"bigint"==typeof p?(p=""+p,null!==f&&6===f.tag?(n(c,f.sibling),(m=a(f,p)).return=c,c=m):(n(c,f),(m=Hs(p,c.mode,m)).return=c,c=m),l(c)):n(c,f)}return function(e,t,n,r){try{ma=0;var a=b(e,t,n,r);return pa=null,a}catch(t){if(t===oa)throw t;var o=Is(29,t,null,e.mode);return o.lanes=r,o.return=e,o}}}var Sa=ba(!0),wa=ba(!1),_a=V(null),Ca=V(0);function ka(e,t){J(Ca,e=sd),J(_a,t),sd=e|t.baseLanes}function xa(){J(Ca,sd),J(_a,_a.current)}function Ta(){sd=Ca.current,K(_a),K(Ca)}var Aa=V(null),Pa=null;function za(e){var t=e.alternate;J(Ma,1&Ma.current),J(Aa,e),null===Pa&&(null===t||null!==_a.current||null!==t.memoizedState)&&(Pa=e)}function Ra(e){if(22===e.tag){if(J(Ma,Ma.current),J(Aa,e),null===Pa){var t=e.alternate;null!==t&&null!==t.memoizedState&&(Pa=e)}}else Ea()}function Ea(){J(Ma,Ma.current),J(Aa,Aa.current)}function Oa(e){K(Aa),Pa===e&&(Pa=null),K(Ma)}var Ma=V(0);function Ia(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(128&t.flags)return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var La="undefined"!=typeof AbortController?AbortController:function(){var e=[],t=this.signal={aborted:!1,addEventListener:function(t,n){e.push(n)}};this.abort=function(){t.aborted=!0,e.forEach((function(e){return e()}))}},Da=r.unstable_scheduleCallback,Na=r.unstable_NormalPriority,Fa={$$typeof:h,Consumer:null,Provider:null,_currentValue:null,_currentValue2:null,_threadCount:0};function Ba(){return{controller:new La,data:new Map,refCount:0}}function Wa(e){e.refCount--,0===e.refCount&&Da(Na,(function(){e.controller.abort()}))}var Ha=null,ja=0,Ga=0,Ua=null;function Va(){if(0==--ja&&null!==Ha){null!==Ua&&(Ua.status="fulfilled");var e=Ha;Ha=null,Ga=0,Ua=null;for(var t=0;t<e.length;t++)(0,e[t])()}}var Ka=z.S;z.S=function(e,t){"object"==typeof t&&null!==t&&"function"==typeof t.then&&function(e,t){if(null===Ha){var n=Ha=[];ja=0,Ga=Su(),Ua={status:"pending",value:void 0,then:function(e){n.push(e)}}}ja++,t.then(Va,Va)}(0,t),null!==Ka&&Ka(e,t)};var Ja=V(null);function $a(){var e=Ja.current;return null!==e?e:ed.pooledCache}function Ya(e,t){J(Ja,null===t?Ja.current:t.pool)}function qa(){var e=$a();return null===e?null:{parent:Fa._currentValue,pool:e}}var Qa=0,Xa=null,Za=null,eo=null,to=!1,no=!1,ro=!1,ao=0,oo=0,io=null,lo=0;function so(){throw Error(i(321))}function uo(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!Jn(e[n],t[n]))return!1;return!0}function co(e,t,n,r,a,o){return Qa=o,Xa=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,z.H=null===e||null===e.memoizedState?xi:Ti,ro=!1,o=n(r,a),ro=!1,no&&(o=po(t,n,r,a)),fo(e),o}function fo(e){z.H=ki;var t=null!==Za&&null!==Za.next;if(Qa=0,eo=Za=Xa=null,to=!1,oo=0,io=null,t)throw Error(i(300));null===e||Gi||null!==(e=e.dependencies)&&_l(e)&&(Gi=!0)}function po(e,t,n,r){Xa=e;var a=0;do{if(no&&(io=null),oo=0,no=!1,25<=a)throw Error(i(301));if(a+=1,eo=Za=null,null!=e.updateQueue){var o=e.updateQueue;o.lastEffect=null,o.events=null,o.stores=null,null!=o.memoCache&&(o.memoCache.index=0)}z.H=Ai,o=t(n,r)}while(no);return o}function mo(){var e=z.H,t=e.useState()[0];return t="function"==typeof t.then?So(t):t,e=e.useState()[0],(null!==Za?Za.memoizedState:null)!==e&&(Xa.flags|=1024),t}function ho(){var e=0!==ao;return ao=0,e}function go(e,t,n){t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~n}function yo(e){if(to){for(e=e.memoizedState;null!==e;){var t=e.queue;null!==t&&(t.pending=null),e=e.next}to=!1}Qa=0,eo=Za=Xa=null,no=!1,oo=ao=0,io=null}function vo(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===eo?Xa.memoizedState=eo=e:eo=eo.next=e,eo}function bo(){if(null===Za){var e=Xa.alternate;e=null!==e?e.memoizedState:null}else e=Za.next;var t=null===eo?Xa.memoizedState:eo.next;if(null!==t)eo=t,Za=e;else{if(null===e){if(null===Xa.alternate)throw Error(i(467));throw Error(i(310))}e={memoizedState:(Za=e).memoizedState,baseState:Za.baseState,baseQueue:Za.baseQueue,queue:Za.queue,next:null},null===eo?Xa.memoizedState=eo=e:eo=eo.next=e}return eo}function So(e){var t=oo;return oo+=1,null===io&&(io=[]),e=ua(io,e,t),t=Xa,null===(null===eo?t.memoizedState:eo.next)&&(t=t.alternate,z.H=null===t||null===t.memoizedState?xi:Ti),e}function wo(e){if(null!==e&&"object"==typeof e){if("function"==typeof e.then)return So(e);if(e.$$typeof===h)return kl(e)}throw Error(i(438,String(e)))}function _o(e){var t=null,n=Xa.updateQueue;if(null!==n&&(t=n.memoCache),null==t){var r=Xa.alternate;null!==r&&null!==(r=r.updateQueue)&&null!=(r=r.memoCache)&&(t={data:r.data.map((function(e){return e.slice()})),index:0})}if(null==t&&(t={data:[],index:0}),null===n&&(n={lastEffect:null,events:null,stores:null,memoCache:null},Xa.updateQueue=n),n.memoCache=t,void 0===(n=t.data[t.index]))for(n=t.data[t.index]=Array(e),r=0;r<e;r++)n[r]=_;return t.index++,n}function Co(e,t){return"function"==typeof t?t(e):t}function ko(e){return xo(bo(),Za,e)}function xo(e,t,n){var r=e.queue;if(null===r)throw Error(i(311));r.lastRenderedReducer=n;var a=e.baseQueue,o=r.pending;if(null!==o){if(null!==a){var l=a.next;a.next=o.next,o.next=l}t.baseQueue=a=o,r.pending=null}if(o=e.baseState,null===a)e.memoizedState=o;else{var s=l=null,d=null,u=t=a.next,c=!1;do{var f=-536870913&u.lane;if(f!==u.lane?(nd&f)===f:(Qa&f)===f){var p=u.revertLane;if(0===p)null!==d&&(d=d.next={lane:0,revertLane:0,action:u.action,hasEagerState:u.hasEagerState,eagerState:u.eagerState,next:null}),f===Ga&&(c=!0);else{if((Qa&p)===p){u=u.next,p===Ga&&(c=!0);continue}f={lane:0,revertLane:u.revertLane,action:u.action,hasEagerState:u.hasEagerState,eagerState:u.eagerState,next:null},null===d?(s=d=f,l=o):d=d.next=f,Xa.lanes|=p,ud|=p}f=u.action,ro&&n(o,f),o=u.hasEagerState?u.eagerState:n(o,f)}else p={lane:f,revertLane:u.revertLane,action:u.action,hasEagerState:u.hasEagerState,eagerState:u.eagerState,next:null},null===d?(s=d=p,l=o):d=d.next=p,Xa.lanes|=f,ud|=f;u=u.next}while(null!==u&&u!==t);if(null===d?l=o:d.next=s,!Jn(o,e.memoizedState)&&(Gi=!0,c&&null!==(n=Ua)))throw n;e.memoizedState=o,e.baseState=l,e.baseQueue=d,r.lastRenderedState=o}return null===a&&(r.lanes=0),[e.memoizedState,r.dispatch]}function To(e){var t=bo(),n=t.queue;if(null===n)throw Error(i(311));n.lastRenderedReducer=e;var r=n.dispatch,a=n.pending,o=t.memoizedState;if(null!==a){n.pending=null;var l=a=a.next;do{o=e(o,l.action),l=l.next}while(l!==a);Jn(o,t.memoizedState)||(Gi=!0),t.memoizedState=o,null===t.baseQueue&&(t.baseState=o),n.lastRenderedState=o}return[o,r]}function Ao(e,t,n){var r=Xa,a=bo(),o=Yr;if(o){if(void 0===n)throw Error(i(407));n=n()}else n=t();var l=!Jn((Za||a).memoizedState,n);if(l&&(a.memoizedState=n,Gi=!0),a=a.queue,Xo(Ro.bind(null,r,a,e),[e]),a.getSnapshot!==t||l||null!==eo&&1&eo.memoizedState.tag){if(r.flags|=2048,Jo(9,zo.bind(null,r,a,n,t),{destroy:void 0},null),null===ed)throw Error(i(349));o||60&Qa||Po(r,t,n)}return n}function Po(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},null===(t=Xa.updateQueue)?(t={lastEffect:null,events:null,stores:null,memoCache:null},Xa.updateQueue=t,t.stores=[e]):null===(n=t.stores)?t.stores=[e]:n.push(e)}function zo(e,t,n,r){t.value=n,t.getSnapshot=r,Eo(t)&&Oo(e)}function Ro(e,t,n){return n((function(){Eo(t)&&Oo(e)}))}function Eo(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!Jn(e,n)}catch(e){return!0}}function Oo(e){var t=Pr(e,2);null!==t&&Ed(t,0,2)}function Mo(e){var t=vo();if("function"==typeof e){var n=e;if(e=n(),ro){ve(!0);try{n()}finally{ve(!1)}}}return t.memoizedState=t.baseState=e,t.queue={pending:null,lanes:0,dispatch:null,lastRenderedReducer:Co,lastRenderedState:e},t}function Io(e,t,n,r){return e.baseState=n,xo(e,Za,"function"==typeof r?r:Co)}function Lo(e,t,n,r,a){if(wi(e))throw Error(i(485));if(null!==(e=t.action)){var o={payload:a,action:e,next:null,isTransition:!0,status:"pending",value:null,reason:null,listeners:[],then:function(e){o.listeners.push(e)}};null!==z.T?n(!0):o.isTransition=!1,r(o),null===(n=t.pending)?(o.next=t.pending=o,Do(t,o)):(o.next=n.next,t.pending=n.next=o)}}function Do(e,t){var n=t.action,r=t.payload,a=e.state;if(t.isTransition){var o=z.T,i={};z.T=i;try{var l=n(a,r),s=z.S;null!==s&&s(i,l),No(e,t,l)}catch(n){Bo(e,t,n)}finally{z.T=o}}else try{No(e,t,o=n(a,r))}catch(n){Bo(e,t,n)}}function No(e,t,n){null!==n&&"object"==typeof n&&"function"==typeof n.then?n.then((function(n){Fo(e,t,n)}),(function(n){return Bo(e,t,n)})):Fo(e,t,n)}function Fo(e,t,n){t.status="fulfilled",t.value=n,Wo(t),e.state=n,null!==(t=e.pending)&&((n=t.next)===t?e.pending=null:(n=n.next,t.next=n,Do(e,n)))}function Bo(e,t,n){var r=e.pending;if(e.pending=null,null!==r){r=r.next;do{t.status="rejected",t.reason=n,Wo(t),t=t.next}while(t!==r)}e.action=null}function Wo(e){e=e.listeners;for(var t=0;t<e.length;t++)(0,e[t])()}function Ho(e,t){return t}function jo(e,t){if(Yr){var n=ed.formState;if(null!==n){e:{var r=Xa;if(Yr){if($r){t:{for(var a=$r,o=Qr;8!==a.nodeType;){if(!o){a=null;break t}if(null===(a=ic(a.nextSibling))){a=null;break t}}a="F!"===(o=a.data)||"F"===o?a:null}if(a){$r=ic(a.nextSibling),r="F!"===a.data;break e}}Zr(r)}r=!1}r&&(t=n[0])}}return(n=vo()).memoizedState=n.baseState=t,r={pending:null,lanes:0,dispatch:null,lastRenderedReducer:Ho,lastRenderedState:t},n.queue=r,n=vi.bind(null,Xa,r),r.dispatch=n,r=Mo(!1),o=Si.bind(null,Xa,!1,r.queue),a={state:t,dispatch:null,action:e,pending:null},(r=vo()).queue=a,n=Lo.bind(null,Xa,a,o,n),a.dispatch=n,r.memoizedState=e,[t,n,!1]}function Go(e){return Uo(bo(),Za,e)}function Uo(e,t,n){t=xo(e,t,Ho)[0],e=ko(Co)[0],t="object"==typeof t&&null!==t&&"function"==typeof t.then?So(t):t;var r=bo(),a=r.queue,o=a.dispatch;return n!==r.memoizedState&&(Xa.flags|=2048,Jo(9,Vo.bind(null,a,n),{destroy:void 0},null)),[t,o,e]}function Vo(e,t){e.action=t}function Ko(e){var t=bo(),n=Za;if(null!==n)return Uo(t,n,e);bo(),t=t.memoizedState;var r=(n=bo()).queue.dispatch;return n.memoizedState=e,[t,r,!1]}function Jo(e,t,n,r){return e={tag:e,create:t,inst:n,deps:r,next:null},null===(t=Xa.updateQueue)&&(t={lastEffect:null,events:null,stores:null,memoCache:null},Xa.updateQueue=t),null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function $o(){return bo().memoizedState}function Yo(e,t,n,r){var a=vo();Xa.flags|=e,a.memoizedState=Jo(1|t,n,{destroy:void 0},void 0===r?null:r)}function qo(e,t,n,r){var a=bo();r=void 0===r?null:r;var o=a.memoizedState.inst;null!==Za&&null!==r&&uo(r,Za.memoizedState.deps)?a.memoizedState=Jo(t,n,o,r):(Xa.flags|=e,a.memoizedState=Jo(1|t,n,o,r))}function Qo(e,t){Yo(8390656,8,e,t)}function Xo(e,t){qo(2048,8,e,t)}function Zo(e,t){return qo(4,2,e,t)}function ei(e,t){return qo(4,4,e,t)}function ti(e,t){if("function"==typeof t){e=e();var n=t(e);return function(){"function"==typeof n?n():t(null)}}if(null!=t)return e=e(),t.current=e,function(){t.current=null}}function ni(e,t,n){n=null!=n?n.concat([e]):null,qo(4,4,ti.bind(null,t,e),n)}function ri(){}function ai(e,t){var n=bo();t=void 0===t?null:t;var r=n.memoizedState;return null!==t&&uo(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function oi(e,t){var n=bo();t=void 0===t?null:t;var r=n.memoizedState;if(null!==t&&uo(t,r[1]))return r[0];if(r=e(),ro){ve(!0);try{e()}finally{ve(!1)}}return n.memoizedState=[r,t],r}function ii(e,t,n){return void 0===n||1073741824&Qa?e.memoizedState=t:(e.memoizedState=n,e=Rd(),Xa.lanes|=e,ud|=e,n)}function li(e,t,n,r){return Jn(n,t)?n:null!==_a.current?(e=ii(e,n,r),Jn(e,t)||(Gi=!0),e):42&Qa?(e=Rd(),Xa.lanes|=e,ud|=e,t):(Gi=!0,e.memoizedState=n)}function si(e,t,n,r,a){var o=H.p;H.p=0!==o&&8>o?o:8;var i,l,s,d=z.T,u={};z.T=u,Si(e,!1,t,n);try{var c=a(),f=z.S;null!==f&&f(u,c),null!==c&&"object"==typeof c&&"function"==typeof c.then?bi(e,t,(i=r,l=[],s={status:"pending",value:null,reason:null,then:function(e){l.push(e)}},c.then((function(){s.status="fulfilled",s.value=i;for(var e=0;e<l.length;e++)(0,l[e])(i)}),(function(e){for(s.status="rejected",s.reason=e,e=0;e<l.length;e++)(0,l[e])(void 0)})),s),zd()):bi(e,t,r,zd())}catch(n){bi(e,t,{then:function(){},status:"rejected",reason:n},zd())}finally{H.p=o,z.T=d}}function di(){}function ui(e,t,n,r){if(5!==e.tag)throw Error(i(476));var a=ci(e).queue;si(e,a,t,j,null===n?di:function(){return fi(e),n(r)})}function ci(e){var t=e.memoizedState;if(null!==t)return t;var n={};return(t={memoizedState:j,baseState:j,baseQueue:null,queue:{pending:null,lanes:0,dispatch:null,lastRenderedReducer:Co,lastRenderedState:j},next:null}).next={memoizedState:n,baseState:n,baseQueue:null,queue:{pending:null,lanes:0,dispatch:null,lastRenderedReducer:Co,lastRenderedState:n},next:null},e.memoizedState=t,null!==(e=e.alternate)&&(e.memoizedState=t),t}function fi(e){bi(e,ci(e).next.queue,{},zd())}function pi(){return kl(Lc)}function mi(){return bo().memoizedState}function hi(){return bo().memoizedState}function gi(e){for(var t=e.return;null!==t;){switch(t.tag){case 24:case 3:var n=zd(),r=El(t,e=Rl(n),n);return null!==r&&(Ed(r,0,n),Ol(r,t,n)),t={cache:Ba()},void(e.payload=t)}t=t.return}}function yi(e,t,n){var r=zd();n={lane:r,revertLane:0,action:n,hasEagerState:!1,eagerState:null,next:null},wi(e)?_i(t,n):null!==(n=Ar(e,t,n,r))&&(Ed(n,0,r),Ci(n,t,r))}function vi(e,t,n){bi(e,t,n,zd())}function bi(e,t,n,r){var a={lane:r,revertLane:0,action:n,hasEagerState:!1,eagerState:null,next:null};if(wi(e))_i(t,a);else{var o=e.alternate;if(0===e.lanes&&(null===o||0===o.lanes)&&null!==(o=t.lastRenderedReducer))try{var i=t.lastRenderedState,l=o(i,n);if(a.hasEagerState=!0,a.eagerState=l,Jn(l,i))return Tr(e,t,a,0),null===ed&&xr(),!1}catch(e){}if(null!==(n=Ar(e,t,a,r)))return Ed(n,0,r),Ci(n,t,r),!0}return!1}function Si(e,t,n,r){if(r={lane:2,revertLane:Su(),action:r,hasEagerState:!1,eagerState:null,next:null},wi(e)){if(t)throw Error(i(479))}else null!==(t=Ar(e,n,r,2))&&Ed(t,0,2)}function wi(e){var t=e.alternate;return e===Xa||null!==t&&t===Xa}function _i(e,t){no=to=!0;var n=e.pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function Ci(e,t,n){if(4194176&n){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,Me(e,n)}}var ki={readContext:kl,use:wo,useCallback:so,useContext:so,useEffect:so,useImperativeHandle:so,useLayoutEffect:so,useInsertionEffect:so,useMemo:so,useReducer:so,useRef:so,useState:so,useDebugValue:so,useDeferredValue:so,useTransition:so,useSyncExternalStore:so,useId:so};ki.useCacheRefresh=so,ki.useMemoCache=so,ki.useHostTransitionStatus=so,ki.useFormState=so,ki.useActionState=so,ki.useOptimistic=so;var xi={readContext:kl,use:wo,useCallback:function(e,t){return vo().memoizedState=[e,void 0===t?null:t],e},useContext:kl,useEffect:Qo,useImperativeHandle:function(e,t,n){n=null!=n?n.concat([e]):null,Yo(4194308,4,ti.bind(null,t,e),n)},useLayoutEffect:function(e,t){return Yo(4194308,4,e,t)},useInsertionEffect:function(e,t){Yo(4,2,e,t)},useMemo:function(e,t){var n=vo();t=void 0===t?null:t;var r=e();if(ro){ve(!0);try{e()}finally{ve(!1)}}return n.memoizedState=[r,t],r},useReducer:function(e,t,n){var r=vo();if(void 0!==n){var a=n(t);if(ro){ve(!0);try{n(t)}finally{ve(!1)}}}else a=t;return r.memoizedState=r.baseState=a,e={pending:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:a},r.queue=e,e=e.dispatch=yi.bind(null,Xa,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},vo().memoizedState=e},useState:function(e){var t=(e=Mo(e)).queue,n=vi.bind(null,Xa,t);return t.dispatch=n,[e.memoizedState,n]},useDebugValue:ri,useDeferredValue:function(e,t){return ii(vo(),e,t)},useTransition:function(){var e=Mo(!1);return e=si.bind(null,Xa,e.queue,!0,!1),vo().memoizedState=e,[!1,e]},useSyncExternalStore:function(e,t,n){var r=Xa,a=vo();if(Yr){if(void 0===n)throw Error(i(407));n=n()}else{if(n=t(),null===ed)throw Error(i(349));60&nd||Po(r,t,n)}a.memoizedState=n;var o={value:n,getSnapshot:t};return a.queue=o,Qo(Ro.bind(null,r,o,e),[e]),r.flags|=2048,Jo(9,zo.bind(null,r,o,n,t),{destroy:void 0},null),n},useId:function(){var e=vo(),t=ed.identifierPrefix;if(Yr){var n=jr;t=":"+t+"R"+(n=(Hr&~(1<<32-be(Hr)-1)).toString(32)+n),0<(n=ao++)&&(t+="H"+n.toString(32)),t+=":"}else t=":"+t+"r"+(n=lo++).toString(32)+":";return e.memoizedState=t},useCacheRefresh:function(){return vo().memoizedState=gi.bind(null,Xa)}};xi.useMemoCache=_o,xi.useHostTransitionStatus=pi,xi.useFormState=jo,xi.useActionState=jo,xi.useOptimistic=function(e){var t=vo();t.memoizedState=t.baseState=e;var n={pending:null,lanes:0,dispatch:null,lastRenderedReducer:null,lastRenderedState:null};return t.queue=n,t=Si.bind(null,Xa,!0,n),n.dispatch=t,[e,t]};var Ti={readContext:kl,use:wo,useCallback:ai,useContext:kl,useEffect:Xo,useImperativeHandle:ni,useInsertionEffect:Zo,useLayoutEffect:ei,useMemo:oi,useReducer:ko,useRef:$o,useState:function(){return ko(Co)},useDebugValue:ri,useDeferredValue:function(e,t){return li(bo(),Za.memoizedState,e,t)},useTransition:function(){var e=ko(Co)[0],t=bo().memoizedState;return["boolean"==typeof e?e:So(e),t]},useSyncExternalStore:Ao,useId:mi};Ti.useCacheRefresh=hi,Ti.useMemoCache=_o,Ti.useHostTransitionStatus=pi,Ti.useFormState=Go,Ti.useActionState=Go,Ti.useOptimistic=function(e,t){return Io(bo(),0,e,t)};var Ai={readContext:kl,use:wo,useCallback:ai,useContext:kl,useEffect:Xo,useImperativeHandle:ni,useInsertionEffect:Zo,useLayoutEffect:ei,useMemo:oi,useReducer:To,useRef:$o,useState:function(){return To(Co)},useDebugValue:ri,useDeferredValue:function(e,t){var n=bo();return null===Za?ii(n,e,t):li(n,Za.memoizedState,e,t)},useTransition:function(){var e=To(Co)[0],t=bo().memoizedState;return["boolean"==typeof e?e:So(e),t]},useSyncExternalStore:Ao,useId:mi};function Pi(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:R({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}Ai.useCacheRefresh=hi,Ai.useMemoCache=_o,Ai.useHostTransitionStatus=pi,Ai.useFormState=Ko,Ai.useActionState=Ko,Ai.useOptimistic=function(e,t){var n=bo();return null!==Za?Io(n,0,e,t):(n.baseState=e,[e,n.queue.dispatch])};var zi={isMounted:function(e){return!!(e=e._reactInternals)&&D(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=zd(),a=Rl(r);a.payload=t,null!=n&&(a.callback=n),null!==(t=El(e,a,r))&&(Ed(t,0,r),Ol(t,e,r))},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=zd(),a=Rl(r);a.tag=1,a.payload=t,null!=n&&(a.callback=n),null!==(t=El(e,a,r))&&(Ed(t,0,r),Ol(t,e,r))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=zd(),r=Rl(n);r.tag=2,null!=t&&(r.callback=t),null!==(t=El(e,r,n))&&(Ed(t,0,n),Ol(t,e,n))}};function Ri(e,t,n,r,a,o,i){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,o,i):!(t.prototype&&t.prototype.isPureReactComponent&&$n(n,r)&&$n(a,o))}function Ei(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&zi.enqueueReplaceState(t,t.state,null)}function Oi(e,t){var n=t;if("ref"in t)for(var r in n={},t)"ref"!==r&&(n[r]=t[r]);if(e=e.defaultProps)for(var a in n===t&&(n=R({},n)),e)void 0===n[a]&&(n[a]=e[a]);return n}var Mi="function"==typeof reportError?reportError:function(e){if("object"==typeof window&&"function"==typeof window.ErrorEvent){var t=new window.ErrorEvent("error",{bubbles:!0,cancelable:!0,message:"object"==typeof e&&null!==e&&"string"==typeof e.message?String(e.message):String(e),error:e});if(!window.dispatchEvent(t))return}else if("object"==typeof process&&"function"==typeof process.emit)return void process.emit("uncaughtException",e);console.error(e)};function Ii(e){Mi(e)}function Li(e){console.error(e)}function Di(e){Mi(e)}function Ni(e,t){try{(0,e.onUncaughtError)(t.value,{componentStack:t.stack})}catch(e){setTimeout((function(){throw e}))}}function Fi(e,t,n){try{(0,e.onCaughtError)(n.value,{componentStack:n.stack,errorBoundary:1===t.tag?t.stateNode:null})}catch(e){setTimeout((function(){throw e}))}}function Bi(e,t,n){return(n=Rl(n)).tag=3,n.payload={element:null},n.callback=function(){Ni(e,t)},n}function Wi(e){return(e=Rl(e)).tag=3,e}function Hi(e,t,n,r){var a=n.type.getDerivedStateFromError;if("function"==typeof a){var o=r.value;e.payload=function(){return a(o)},e.callback=function(){Fi(t,n,r)}}var i=n.stateNode;null!==i&&"function"==typeof i.componentDidCatch&&(e.callback=function(){Fi(t,n,r),"function"!=typeof a&&(null===wd?wd=new Set([this]):wd.add(this));var e=r.stack;this.componentDidCatch(r.value,{componentStack:null!==e?e:""})})}var ji=Error(i(461)),Gi=!1;function Ui(e,t,n,r){t.child=null===e?wa(t,null,n,r):Sa(t,e.child,n,r)}function Vi(e,t,n,r,a){n=n.render;var o=t.ref;if("ref"in r){var i={};for(var l in r)"ref"!==l&&(i[l]=r[l])}else i=r;return Cl(t),r=co(e,t,n,i,o,a),l=ho(),null===e||Gi?(Yr&&l&&Vr(t),t.flags|=1,Ui(e,t,r,a),t.child):(go(e,t,a),cl(e,t,a))}function Ki(e,t,n,r,a){if(null===e){var o=n.type;return"function"!=typeof o||Ls(o)||void 0!==o.defaultProps||null!==n.compare?((e=Fs(n.type,null,r,t,t.mode,a)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=o,Ji(e,t,o,r,a))}if(o=e.child,!fl(e,a)){var i=o.memoizedProps;if((n=null!==(n=n.compare)?n:$n)(i,r)&&e.ref===t.ref)return cl(e,t,a)}return t.flags|=1,(e=Ds(o,r)).ref=t.ref,e.return=t,t.child=e}function Ji(e,t,n,r,a){if(null!==e){var o=e.memoizedProps;if($n(o,r)&&e.ref===t.ref){if(Gi=!1,t.pendingProps=r=o,!fl(e,a))return t.lanes=e.lanes,cl(e,t,a);131072&e.flags&&(Gi=!0)}}return Qi(e,t,n,r,a)}function $i(e,t,n){var r=t.pendingProps,a=r.children,o=!!(2&t.stateNode._pendingVisibility),i=null!==e?e.memoizedState:null;if(qi(e,t),"hidden"===r.mode||o){if(128&t.flags){if(r=null!==i?i.baseLanes|n:n,null!==e){for(a=t.child=e.child,o=0;null!==a;)o=o|a.lanes|a.childLanes,a=a.sibling;t.childLanes=o&~r}else t.childLanes=0,t.child=null;return Yi(e,t,r,n)}if(!(536870912&n))return t.lanes=t.childLanes=536870912,Yi(e,t,null!==i?i.baseLanes|n:n,n);t.memoizedState={baseLanes:0,cachePool:null},null!==e&&Ya(0,null!==i?i.cachePool:null),null!==i?ka(t,i):xa(),Ra(t)}else null!==i?(Ya(0,i.cachePool),ka(t,i),Ea(),t.memoizedState=null):(null!==e&&Ya(0,null),xa(),Ea());return Ui(e,t,a,n),t.child}function Yi(e,t,n,r){var a=$a();return a=null===a?null:{parent:Fa._currentValue,pool:a},t.memoizedState={baseLanes:n,cachePool:a},null!==e&&Ya(0,null),xa(),Ra(t),null!==e&&wl(e,t,r,!0),null}function qi(e,t){var n=t.ref;if(null===n)null!==e&&null!==e.ref&&(t.flags|=2097664);else{if("function"!=typeof n&&"object"!=typeof n)throw Error(i(284));null!==e&&e.ref===n||(t.flags|=2097664)}}function Qi(e,t,n,r,a){return Cl(t),n=co(e,t,n,r,void 0,a),r=ho(),null===e||Gi?(Yr&&r&&Vr(t),t.flags|=1,Ui(e,t,n,a),t.child):(go(e,t,a),cl(e,t,a))}function Xi(e,t,n,r,a,o){return Cl(t),t.updateQueue=null,n=po(t,r,n,a),fo(e),r=ho(),null===e||Gi?(Yr&&r&&Vr(t),t.flags|=1,Ui(e,t,n,o),t.child):(go(e,t,o),cl(e,t,o))}function Zi(e,t,n,r,a){if(Cl(t),null===t.stateNode){var o=Er,i=n.contextType;"object"==typeof i&&null!==i&&(o=kl(i)),o=new n(r,o),t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,o.updater=zi,t.stateNode=o,o._reactInternals=t,(o=t.stateNode).props=r,o.state=t.memoizedState,o.refs={},Pl(t),i=n.contextType,o.context="object"==typeof i&&null!==i?kl(i):Er,o.state=t.memoizedState,"function"==typeof(i=n.getDerivedStateFromProps)&&(Pi(t,n,i,r),o.state=t.memoizedState),"function"==typeof n.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(i=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),i!==o.state&&zi.enqueueReplaceState(o,o.state,null),Dl(t,r,o,a),Ll(),o.state=t.memoizedState),"function"==typeof o.componentDidMount&&(t.flags|=4194308),r=!0}else if(null===e){o=t.stateNode;var l=t.memoizedProps,s=Oi(n,l);o.props=s;var d=o.context,u=n.contextType;i=Er,"object"==typeof u&&null!==u&&(i=kl(u));var c=n.getDerivedStateFromProps;u="function"==typeof c||"function"==typeof o.getSnapshotBeforeUpdate,l=t.pendingProps!==l,u||"function"!=typeof o.UNSAFE_componentWillReceiveProps&&"function"!=typeof o.componentWillReceiveProps||(l||d!==i)&&Ei(t,o,r,i),Al=!1;var f=t.memoizedState;o.state=f,Dl(t,r,o,a),Ll(),d=t.memoizedState,l||f!==d||Al?("function"==typeof c&&(Pi(t,n,c,r),d=t.memoizedState),(s=Al||Ri(t,n,s,r,f,d,i))?(u||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||("function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount()),"function"==typeof o.componentDidMount&&(t.flags|=4194308)):("function"==typeof o.componentDidMount&&(t.flags|=4194308),t.memoizedProps=r,t.memoizedState=d),o.props=r,o.state=d,o.context=i,r=s):("function"==typeof o.componentDidMount&&(t.flags|=4194308),r=!1)}else{o=t.stateNode,zl(e,t),u=Oi(n,i=t.memoizedProps),o.props=u,c=t.pendingProps,f=o.context,d=n.contextType,s=Er,"object"==typeof d&&null!==d&&(s=kl(d)),(d="function"==typeof(l=n.getDerivedStateFromProps)||"function"==typeof o.getSnapshotBeforeUpdate)||"function"!=typeof o.UNSAFE_componentWillReceiveProps&&"function"!=typeof o.componentWillReceiveProps||(i!==c||f!==s)&&Ei(t,o,r,s),Al=!1,f=t.memoizedState,o.state=f,Dl(t,r,o,a),Ll();var p=t.memoizedState;i!==c||f!==p||Al||null!==e&&null!==e.dependencies&&_l(e.dependencies)?("function"==typeof l&&(Pi(t,n,l,r),p=t.memoizedState),(u=Al||Ri(t,n,u,r,f,p,s)||null!==e&&null!==e.dependencies&&_l(e.dependencies))?(d||"function"!=typeof o.UNSAFE_componentWillUpdate&&"function"!=typeof o.componentWillUpdate||("function"==typeof o.componentWillUpdate&&o.componentWillUpdate(r,p,s),"function"==typeof o.UNSAFE_componentWillUpdate&&o.UNSAFE_componentWillUpdate(r,p,s)),"function"==typeof o.componentDidUpdate&&(t.flags|=4),"function"==typeof o.getSnapshotBeforeUpdate&&(t.flags|=1024)):("function"!=typeof o.componentDidUpdate||i===e.memoizedProps&&f===e.memoizedState||(t.flags|=4),"function"!=typeof o.getSnapshotBeforeUpdate||i===e.memoizedProps&&f===e.memoizedState||(t.flags|=1024),t.memoizedProps=r,t.memoizedState=p),o.props=r,o.state=p,o.context=s,r=u):("function"!=typeof o.componentDidUpdate||i===e.memoizedProps&&f===e.memoizedState||(t.flags|=4),"function"!=typeof o.getSnapshotBeforeUpdate||i===e.memoizedProps&&f===e.memoizedState||(t.flags|=1024),r=!1)}return o=r,qi(e,t),r=!!(128&t.flags),o||r?(o=t.stateNode,n=r&&"function"!=typeof n.getDerivedStateFromError?null:o.render(),t.flags|=1,null!==e&&r?(t.child=Sa(t,e.child,null,a),t.child=Sa(t,null,n,a)):Ui(e,t,n,a),t.memoizedState=o.state,e=t.child):e=cl(e,t,a),e}function el(e,t,n,r){return ra(),t.flags|=256,Ui(e,t,n,r),t.child}var tl={dehydrated:null,treeContext:null,retryLane:0};function nl(e){return{baseLanes:e,cachePool:qa()}}function rl(e,t,n){return e=null!==e?e.childLanes&~n:0,t&&(e|=pd),e}function al(e,t,n){var r,a=t.pendingProps,o=!1,l=!!(128&t.flags);if((r=l)||(r=(null===e||null!==e.memoizedState)&&!!(2&Ma.current)),r&&(o=!0,t.flags&=-129),r=!!(32&t.flags),t.flags&=-33,null===e){if(Yr){if(o?za(t):Ea(),Yr){var s,d=$r;if(s=d){e:{for(s=d,d=Qr;8!==s.nodeType;){if(!d){d=null;break e}if(null===(s=ic(s.nextSibling))){d=null;break e}}d=s}null!==d?(t.memoizedState={dehydrated:d,treeContext:null!==Wr?{id:Hr,overflow:jr}:null,retryLane:536870912},(s=Is(18,null,null,0)).stateNode=d,s.return=t,t.child=s,Jr=t,$r=null,s=!0):s=!1}s||Zr(t)}if(null!==(d=t.memoizedState)&&null!==(d=d.dehydrated))return"$!"===d.data?t.lanes=16:t.lanes=536870912,null;Oa(t)}return d=a.children,a=a.fallback,o?(Ea(),d=il({mode:"hidden",children:d},o=t.mode),a=Bs(a,o,n,null),d.return=t,a.return=t,d.sibling=a,t.child=d,(o=t.child).memoizedState=nl(n),o.childLanes=rl(e,r,n),t.memoizedState=tl,a):(za(t),ol(t,d))}if(null!==(s=e.memoizedState)&&null!==(d=s.dehydrated)){if(l)256&t.flags?(za(t),t.flags&=-257,t=ll(e,t,n)):null!==t.memoizedState?(Ea(),t.child=e.child,t.flags|=128,t=null):(Ea(),o=a.fallback,d=t.mode,a=il({mode:"visible",children:a.children},d),(o=Bs(o,d,n,null)).flags|=2,a.return=t,o.return=t,a.sibling=o,t.child=a,Sa(t,e.child,null,n),(a=t.child).memoizedState=nl(n),a.childLanes=rl(e,r,n),t.memoizedState=tl,t=o);else if(za(t),"$!"===d.data){if(r=d.nextSibling&&d.nextSibling.dataset)var u=r.dgst;r=u,(a=Error(i(419))).stack="",a.digest=r,aa({value:a,source:null,stack:null}),t=ll(e,t,n)}else if(Gi||wl(e,t,n,!1),r=!!(n&e.childLanes),Gi||r){if(null!==(r=ed)){if(42&(a=n&-n))a=1;else switch(a){case 2:a=1;break;case 8:a=4;break;case 32:a=16;break;case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:a=64;break;case 268435456:a=134217728;break;default:a=0}if(0!==(a=a&(r.suspendedLanes|n)?0:a)&&a!==s.retryLane)throw s.retryLane=a,Pr(e,a),Ed(r,0,a),ji}"$?"===d.data||Gd(),t=ll(e,t,n)}else"$?"===d.data?(t.flags|=128,t.child=e.child,t=iu.bind(null,e),d._reactRetry=t,t=null):(e=s.treeContext,$r=ic(d.nextSibling),Jr=t,Yr=!0,qr=null,Qr=!1,null!==e&&(Fr[Br++]=Hr,Fr[Br++]=jr,Fr[Br++]=Wr,Hr=e.id,jr=e.overflow,Wr=t),(t=ol(t,a.children)).flags|=4096);return t}return o?(Ea(),o=a.fallback,d=t.mode,u=(s=e.child).sibling,(a=Ds(s,{mode:"hidden",children:a.children})).subtreeFlags=31457280&s.subtreeFlags,null!==u?o=Ds(u,o):(o=Bs(o,d,n,null)).flags|=2,o.return=t,a.return=t,a.sibling=o,t.child=a,a=o,o=t.child,null===(d=e.child.memoizedState)?d=nl(n):(null!==(s=d.cachePool)?(u=Fa._currentValue,s=s.parent!==u?{parent:u,pool:u}:s):s=qa(),d={baseLanes:d.baseLanes|n,cachePool:s}),o.memoizedState=d,o.childLanes=rl(e,r,n),t.memoizedState=tl,a):(za(t),e=(n=e.child).sibling,(n=Ds(n,{mode:"visible",children:a.children})).return=t,n.sibling=null,null!==e&&(null===(r=t.deletions)?(t.deletions=[e],t.flags|=16):r.push(e)),t.child=n,t.memoizedState=null,n)}function ol(e,t){return(t=il({mode:"visible",children:t},e.mode)).return=e,e.child=t}function il(e,t){return Ws(e,t,0,null)}function ll(e,t,n){return Sa(t,e.child,null,n),(e=ol(t,t.pendingProps.children)).flags|=2,t.memoizedState=null,e}function sl(e,t,n){e.lanes|=t;var r=e.alternate;null!==r&&(r.lanes|=t),bl(e.return,t,n)}function dl(e,t,n,r,a){var o=e.memoizedState;null===o?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:a}:(o.isBackwards=t,o.rendering=null,o.renderingStartTime=0,o.last=r,o.tail=n,o.tailMode=a)}function ul(e,t,n){var r=t.pendingProps,a=r.revealOrder,o=r.tail;if(Ui(e,t,r.children,n),2&(r=Ma.current))r=1&r|2,t.flags|=128;else{if(null!==e&&128&e.flags)e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&sl(e,n,t);else if(19===e.tag)sl(e,n,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}switch(J(Ma,r),a){case"forwards":for(n=t.child,a=null;null!==n;)null!==(e=n.alternate)&&null===Ia(e)&&(a=n),n=n.sibling;null===(n=a)?(a=t.child,t.child=null):(a=n.sibling,n.sibling=null),dl(t,!1,a,n,o);break;case"backwards":for(n=null,a=t.child,t.child=null;null!==a;){if(null!==(e=a.alternate)&&null===Ia(e)){t.child=a;break}e=a.sibling,a.sibling=n,n=a,a=e}dl(t,!0,n,null,o);break;case"together":dl(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function cl(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),ud|=t.lanes,!(n&t.childLanes)){if(null===e)return null;if(wl(e,t,n,!1),!(n&t.childLanes))return null}if(null!==e&&t.child!==e.child)throw Error(i(153));if(null!==t.child){for(n=Ds(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Ds(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function fl(e,t){return!!(e.lanes&t)||!(null===(e=e.dependencies)||!_l(e))}function pl(e,t,n){if(null!==e)if(e.memoizedProps!==t.pendingProps)Gi=!0;else{if(!(fl(e,n)||128&t.flags))return Gi=!1,function(e,t,n){switch(t.tag){case 3:X(t,t.stateNode.containerInfo),yl(0,Fa,e.memoizedState.cache),ra();break;case 27:case 5:ee(t);break;case 4:X(t,t.stateNode.containerInfo);break;case 10:yl(0,t.type,t.memoizedProps.value);break;case 13:var r=t.memoizedState;if(null!==r)return null!==r.dehydrated?(za(t),t.flags|=128,null):n&t.child.childLanes?al(e,t,n):(za(t),null!==(e=cl(e,t,n))?e.sibling:null);za(t);break;case 19:var a=!!(128&e.flags);if((r=!!(n&t.childLanes))||(wl(e,t,n,!1),r=!!(n&t.childLanes)),a){if(r)return ul(e,t,n);t.flags|=128}if(null!==(a=t.memoizedState)&&(a.rendering=null,a.tail=null,a.lastEffect=null),J(Ma,Ma.current),r)break;return null;case 22:case 23:return t.lanes=0,$i(e,t,n);case 24:yl(0,Fa,e.memoizedState.cache)}return cl(e,t,n)}(e,t,n);Gi=!!(131072&e.flags)}else Gi=!1,Yr&&1048576&t.flags&&Ur(t,Nr,t.index);switch(t.lanes=0,t.tag){case 16:e:{e=t.pendingProps;var r=t.elementType,a=r._init;if(r=a(r._payload),t.type=r,"function"!=typeof r){if(null!=r){if((a=r.$$typeof)===g){t.tag=11,t=Vi(null,t,r,e,n);break e}if(a===b){t.tag=14,t=Ki(null,t,r,e,n);break e}}throw t=T(r)||r,Error(i(306,t,""))}Ls(r)?(e=Oi(r,e),t.tag=1,t=Zi(null,t,r,e,n)):(t.tag=0,t=Qi(null,t,r,e,n))}return t;case 0:return Qi(e,t,t.type,t.pendingProps,n);case 1:return Zi(e,t,r=t.type,a=Oi(r,t.pendingProps),n);case 3:e:{if(X(t,t.stateNode.containerInfo),null===e)throw Error(i(387));var o=t.pendingProps;r=(a=t.memoizedState).element,zl(e,t),Dl(t,o,null,n);var l=t.memoizedState;if(o=l.cache,yl(0,Fa,o),o!==a.cache&&Sl(t,[Fa],n,!0),Ll(),o=l.element,a.isDehydrated){if(a={element:o,isDehydrated:!1,cache:l.cache},t.updateQueue.baseState=a,t.memoizedState=a,256&t.flags){t=el(e,t,o,n);break e}if(o!==r){aa(r=Mr(Error(i(424)),t)),t=el(e,t,o,n);break e}for($r=ic(t.stateNode.containerInfo.firstChild),Jr=t,Yr=!0,qr=null,Qr=!0,n=wa(t,null,o,n),t.child=n;n;)n.flags=-3&n.flags|4096,n=n.sibling}else{if(ra(),o===r){t=cl(e,t,n);break e}Ui(e,t,o,n)}t=t.child}return t;case 26:return qi(e,t),null===e?(n=hc(t.type,null,t.pendingProps,null))?t.memoizedState=n:Yr||(n=t.type,e=t.pendingProps,(r=$u(q.current).createElement(n))[Ne]=t,r[Fe]=e,Vu(r,n,e),qe(r),t.stateNode=r):t.memoizedState=hc(t.type,e.memoizedProps,t.pendingProps,e.memoizedState),null;case 27:return ee(t),null===e&&Yr&&(r=t.stateNode=sc(t.type,t.pendingProps,q.current),Jr=t,Qr=!0,$r=ic(r.firstChild)),r=t.pendingProps.children,null!==e||Yr?Ui(e,t,r,n):t.child=Sa(t,null,r,n),qi(e,t),t.child;case 5:return null===e&&Yr&&((a=r=$r)&&(null!==(r=function(e,t,n,r){for(;1===e.nodeType;){var a=n;if(e.nodeName.toLowerCase()!==t.toLowerCase()){if(!r&&("INPUT"!==e.nodeName||"hidden"!==e.type))break}else if(r){if(!e[Ue])switch(t){case"meta":if(!e.hasAttribute("itemprop"))break;return e;case"link":if("stylesheet"===(o=e.getAttribute("rel"))&&e.hasAttribute("data-precedence"))break;if(o!==a.rel||e.getAttribute("href")!==(null==a.href?null:a.href)||e.getAttribute("crossorigin")!==(null==a.crossOrigin?null:a.crossOrigin)||e.getAttribute("title")!==(null==a.title?null:a.title))break;return e;case"style":if(e.hasAttribute("data-precedence"))break;return e;case"script":if(((o=e.getAttribute("src"))!==(null==a.src?null:a.src)||e.getAttribute("type")!==(null==a.type?null:a.type)||e.getAttribute("crossorigin")!==(null==a.crossOrigin?null:a.crossOrigin))&&o&&e.hasAttribute("async")&&!e.hasAttribute("itemprop"))break;return e;default:return e}}else{if("input"!==t||"hidden"!==e.type)return e;var o=null==a.name?null:""+a.name;if("hidden"===a.type&&e.getAttribute("name")===o)return e}if(null===(e=ic(e.nextSibling)))break}return null}(r,t.type,t.pendingProps,Qr))?(t.stateNode=r,Jr=t,$r=ic(r.firstChild),Qr=!1,a=!0):a=!1),a||Zr(t)),ee(t),a=t.type,o=t.pendingProps,l=null!==e?e.memoizedProps:null,r=o.children,Qu(a,o)?r=null:null!==l&&Qu(a,l)&&(t.flags|=32),null!==t.memoizedState&&(a=co(e,t,mo,null,null,n),Lc._currentValue=a),qi(e,t),Ui(e,t,r,n),t.child;case 6:return null===e&&Yr&&((e=n=$r)&&(null!==(n=function(e,t,n){if(""===t)return null;for(;3!==e.nodeType;){if((1!==e.nodeType||"INPUT"!==e.nodeName||"hidden"!==e.type)&&!n)return null;if(null===(e=ic(e.nextSibling)))return null}return e}(n,t.pendingProps,Qr))?(t.stateNode=n,Jr=t,$r=null,e=!0):e=!1),e||Zr(t)),null;case 13:return al(e,t,n);case 4:return X(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Sa(t,null,r,n):Ui(e,t,r,n),t.child;case 11:return Vi(e,t,t.type,t.pendingProps,n);case 7:return Ui(e,t,t.pendingProps,n),t.child;case 8:case 12:return Ui(e,t,t.pendingProps.children,n),t.child;case 10:return r=t.pendingProps,yl(0,t.type,r.value),Ui(e,t,r.children,n),t.child;case 9:return a=t.type._context,r=t.pendingProps.children,Cl(t),r=r(a=kl(a)),t.flags|=1,Ui(e,t,r,n),t.child;case 14:return Ki(e,t,t.type,t.pendingProps,n);case 15:return Ji(e,t,t.type,t.pendingProps,n);case 19:return ul(e,t,n);case 22:return $i(e,t,n);case 24:return Cl(t),r=kl(Fa),null===e?(null===(a=$a())&&(a=ed,o=Ba(),a.pooledCache=o,o.refCount++,null!==o&&(a.pooledCacheLanes|=n),a=o),t.memoizedState={parent:r,cache:a},Pl(t),yl(0,Fa,a)):(!!(e.lanes&n)&&(zl(e,t),Dl(t,null,null,n),Ll()),a=e.memoizedState,o=t.memoizedState,a.parent!==r?(a={parent:r,cache:r},t.memoizedState=a,0===t.lanes&&(t.memoizedState=t.updateQueue.baseState=a),yl(0,Fa,r)):(r=o.cache,yl(0,Fa,r),r!==a.cache&&Sl(t,[Fa],n,!0))),Ui(e,t,t.pendingProps.children,n),t.child;case 29:throw t.pendingProps}throw Error(i(156,t.tag))}var ml=V(null),hl=null,gl=null;function yl(e,t,n){J(ml,t._currentValue),t._currentValue=n}function vl(e){e._currentValue=ml.current,K(ml)}function bl(e,t,n){for(;null!==e;){var r=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,null!==r&&(r.childLanes|=t)):null!==r&&(r.childLanes&t)!==t&&(r.childLanes|=t),e===n)break;e=e.return}}function Sl(e,t,n,r){var a=e.child;for(null!==a&&(a.return=e);null!==a;){var o=a.dependencies;if(null!==o){var l=a.child;o=o.firstContext;e:for(;null!==o;){var s=o;o=a;for(var d=0;d<t.length;d++)if(s.context===t[d]){o.lanes|=n,null!==(s=o.alternate)&&(s.lanes|=n),bl(o.return,n,e),r||(l=null);break e}o=s.next}}else if(18===a.tag){if(null===(l=a.return))throw Error(i(341));l.lanes|=n,null!==(o=l.alternate)&&(o.lanes|=n),bl(l,n,e),l=null}else l=a.child;if(null!==l)l.return=a;else for(l=a;null!==l;){if(l===e){l=null;break}if(null!==(a=l.sibling)){a.return=l.return,l=a;break}l=l.return}a=l}}function wl(e,t,n,r){e=null;for(var a=t,o=!1;null!==a;){if(!o)if(524288&a.flags)o=!0;else if(262144&a.flags)break;if(10===a.tag){var l=a.alternate;if(null===l)throw Error(i(387));if(null!==(l=l.memoizedProps)){var s=a.type;Jn(a.pendingProps.value,l.value)||(null!==e?e.push(s):e=[s])}}else if(a===Q.current){if(null===(l=a.alternate))throw Error(i(387));l.memoizedState.memoizedState!==a.memoizedState.memoizedState&&(null!==e?e.push(Lc):e=[Lc])}a=a.return}null!==e&&Sl(t,e,n,r),t.flags|=262144}function _l(e){for(e=e.firstContext;null!==e;){if(!Jn(e.context._currentValue,e.memoizedValue))return!0;e=e.next}return!1}function Cl(e){hl=e,gl=null,null!==(e=e.dependencies)&&(e.firstContext=null)}function kl(e){return Tl(hl,e)}function xl(e,t){return null===hl&&Cl(e),Tl(e,t)}function Tl(e,t){var n=t._currentValue;if(t={context:t,memoizedValue:n,next:null},null===gl){if(null===e)throw Error(i(308));gl=t,e.dependencies={lanes:0,firstContext:t},e.flags|=524288}else gl=gl.next=t;return n}var Al=!1;function Pl(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,lanes:0,hiddenCallbacks:null},callbacks:null}}function zl(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,callbacks:null})}function Rl(e){return{lane:e,tag:0,payload:null,callback:null,next:null}}function El(e,t,n){var r=e.updateQueue;if(null===r)return null;if(r=r.shared,2&Zs){var a=r.pending;return null===a?t.next=t:(t.next=a.next,a.next=t),r.pending=t,t=Rr(e),zr(e,null,n),t}return Tr(e,r,t,n),Rr(e)}function Ol(e,t,n){if(null!==(t=t.updateQueue)&&(t=t.shared,4194176&n)){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,Me(e,n)}}function Ml(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var a=null,o=null;if(null!==(n=n.firstBaseUpdate)){do{var i={lane:n.lane,tag:n.tag,payload:n.payload,callback:null,next:null};null===o?a=o=i:o=o.next=i,n=n.next}while(null!==n);null===o?a=o=t:o=o.next=t}else a=o=t;return n={baseState:r.baseState,firstBaseUpdate:a,lastBaseUpdate:o,shared:r.shared,callbacks:r.callbacks},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}var Il=!1;function Ll(){if(Il&&null!==Ua)throw Ua}function Dl(e,t,n,r){Il=!1;var a=e.updateQueue;Al=!1;var o=a.firstBaseUpdate,i=a.lastBaseUpdate,l=a.shared.pending;if(null!==l){a.shared.pending=null;var s=l,d=s.next;s.next=null,null===i?o=d:i.next=d,i=s;var u=e.alternate;null!==u&&(l=(u=u.updateQueue).lastBaseUpdate)!==i&&(null===l?u.firstBaseUpdate=d:l.next=d,u.lastBaseUpdate=s)}if(null!==o){var c=a.baseState;for(i=0,u=d=s=null,l=o;;){var f=-536870913&l.lane,p=f!==l.lane;if(p?(nd&f)===f:(r&f)===f){0!==f&&f===Ga&&(Il=!0),null!==u&&(u=u.next={lane:0,tag:l.tag,payload:l.payload,callback:null,next:null});e:{var m=e,h=l;f=t;var g=n;switch(h.tag){case 1:if("function"==typeof(m=h.payload)){c=m.call(g,c,f);break e}c=m;break e;case 3:m.flags=-65537&m.flags|128;case 0:if(null==(f="function"==typeof(m=h.payload)?m.call(g,c,f):m))break e;c=R({},c,f);break e;case 2:Al=!0}}null!==(f=l.callback)&&(e.flags|=64,p&&(e.flags|=8192),null===(p=a.callbacks)?a.callbacks=[f]:p.push(f))}else p={lane:f,tag:l.tag,payload:l.payload,callback:l.callback,next:null},null===u?(d=u=p,s=c):u=u.next=p,i|=f;if(null===(l=l.next)){if(null===(l=a.shared.pending))break;l=(p=l).next,p.next=null,a.lastBaseUpdate=p,a.shared.pending=null}}null===u&&(s=c),a.baseState=s,a.firstBaseUpdate=d,a.lastBaseUpdate=u,null===o&&(a.shared.lanes=0),ud|=i,e.lanes=i,e.memoizedState=c}}function Nl(e,t){if("function"!=typeof e)throw Error(i(191,e));e.call(t)}function Fl(e,t){var n=e.callbacks;if(null!==n)for(e.callbacks=null,e=0;e<n.length;e++)Nl(n[e],t)}function Bl(e,t){try{var n=t.updateQueue,r=null!==n?n.lastEffect:null;if(null!==r){var a=r.next;n=a;do{if((n.tag&e)===e){r=void 0;var o=n.create,i=n.inst;r=o(),i.destroy=r}n=n.next}while(n!==a)}}catch(e){nu(t,t.return,e)}}function Wl(e,t,n){try{var r=t.updateQueue,a=null!==r?r.lastEffect:null;if(null!==a){var o=a.next;r=o;do{if((r.tag&e)===e){var i=r.inst,l=i.destroy;if(void 0!==l){i.destroy=void 0,a=t;var s=n;try{l()}catch(e){nu(a,s,e)}}}r=r.next}while(r!==o)}}catch(e){nu(t,t.return,e)}}function Hl(e){var t=e.updateQueue;if(null!==t){var n=e.stateNode;try{Fl(t,n)}catch(t){nu(e,e.return,t)}}}function jl(e,t,n){n.props=Oi(e.type,e.memoizedProps),n.state=e.memoizedState;try{n.componentWillUnmount()}catch(n){nu(e,t,n)}}function Gl(e,t){try{var n=e.ref;if(null!==n){var r=e.stateNode;switch(e.tag){case 26:case 27:case 5:var a=r;break;default:a=r}"function"==typeof n?e.refCleanup=n(a):n.current=a}}catch(n){nu(e,t,n)}}function Ul(e,t){var n=e.ref,r=e.refCleanup;if(null!==n)if("function"==typeof r)try{r()}catch(n){nu(e,t,n)}finally{e.refCleanup=null,null!=(e=e.alternate)&&(e.refCleanup=null)}else if("function"==typeof n)try{n(null)}catch(n){nu(e,t,n)}else n.current=null}function Vl(e){var t=e.type,n=e.memoizedProps,r=e.stateNode;try{e:switch(t){case"button":case"input":case"select":case"textarea":n.autoFocus&&r.focus();break e;case"img":n.src?r.src=n.src:n.srcSet&&(r.srcset=n.srcSet)}}catch(t){nu(e,e.return,t)}}function Kl(e,t,n){try{var r=e.stateNode;!function(e,t,n,r){switch(t){case"div":case"span":case"svg":case"path":case"a":case"g":case"p":case"li":break;case"input":var a=null,o=null,l=null,s=null,d=null,u=null,c=null;for(m in n){var f=n[m];if(n.hasOwnProperty(m)&&null!=f)switch(m){case"checked":case"value":break;case"defaultValue":d=f;default:r.hasOwnProperty(m)||Gu(e,t,m,null,r,f)}}for(var p in r){var m=r[p];if(f=n[p],r.hasOwnProperty(p)&&(null!=m||null!=f))switch(p){case"type":o=m;break;case"name":a=m;break;case"checked":u=m;break;case"defaultChecked":c=m;break;case"value":l=m;break;case"defaultValue":s=m;break;case"children":case"dangerouslySetInnerHTML":if(null!=m)throw Error(i(137,t));break;default:m!==f&&Gu(e,t,p,m,r,f)}}return void ht(e,l,s,d,u,c,o,a);case"select":for(o in m=l=s=p=null,n)if(d=n[o],n.hasOwnProperty(o)&&null!=d)switch(o){case"value":break;case"multiple":m=d;default:r.hasOwnProperty(o)||Gu(e,t,o,null,r,d)}for(a in r)if(o=r[a],d=n[a],r.hasOwnProperty(a)&&(null!=o||null!=d))switch(a){case"value":p=o;break;case"defaultValue":s=o;break;case"multiple":l=o;default:o!==d&&Gu(e,t,a,o,r,d)}return t=s,n=l,r=m,void(null!=p?vt(e,!!n,p,!1):!!r!=!!n&&(null!=t?vt(e,!!n,t,!0):vt(e,!!n,n?[]:"",!1)));case"textarea":for(s in m=p=null,n)if(a=n[s],n.hasOwnProperty(s)&&null!=a&&!r.hasOwnProperty(s))switch(s){case"value":case"children":break;default:Gu(e,t,s,null,r,a)}for(l in r)if(a=r[l],o=n[l],r.hasOwnProperty(l)&&(null!=a||null!=o))switch(l){case"value":p=a;break;case"defaultValue":m=a;break;case"children":break;case"dangerouslySetInnerHTML":if(null!=a)throw Error(i(91));break;default:a!==o&&Gu(e,t,l,a,r,o)}return void bt(e,p,m);case"option":for(var h in n)p=n[h],n.hasOwnProperty(h)&&null!=p&&!r.hasOwnProperty(h)&&("selected"===h?e.selected=!1:Gu(e,t,h,null,r,p));for(d in r)p=r[d],m=n[d],!r.hasOwnProperty(d)||p===m||null==p&&null==m||("selected"===d?e.selected=p&&"function"!=typeof p&&"symbol"!=typeof p:Gu(e,t,d,p,r,m));return;case"img":case"link":case"area":case"base":case"br":case"col":case"embed":case"hr":case"keygen":case"meta":case"param":case"source":case"track":case"wbr":case"menuitem":for(var g in n)p=n[g],n.hasOwnProperty(g)&&null!=p&&!r.hasOwnProperty(g)&&Gu(e,t,g,null,r,p);for(u in r)if(p=r[u],m=n[u],r.hasOwnProperty(u)&&p!==m&&(null!=p||null!=m))switch(u){case"children":case"dangerouslySetInnerHTML":if(null!=p)throw Error(i(137,t));break;default:Gu(e,t,u,p,r,m)}return;default:if(xt(t)){for(var y in n)p=n[y],n.hasOwnProperty(y)&&void 0!==p&&!r.hasOwnProperty(y)&&Uu(e,t,y,void 0,r,p);for(c in r)p=r[c],m=n[c],!r.hasOwnProperty(c)||p===m||void 0===p&&void 0===m||Uu(e,t,c,p,r,m);return}}for(var v in n)p=n[v],n.hasOwnProperty(v)&&null!=p&&!r.hasOwnProperty(v)&&Gu(e,t,v,null,r,p);for(f in r)p=r[f],m=n[f],!r.hasOwnProperty(f)||p===m||null==p&&null==m||Gu(e,t,f,p,r,m)}(r,e.type,n,t),r[Fe]=t}catch(t){nu(e,e.return,t)}}function Jl(e){return 5===e.tag||3===e.tag||26===e.tag||27===e.tag||4===e.tag}function $l(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||Jl(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&27!==e.tag&&18!==e.tag;){if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function Yl(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=ju));else if(4!==r&&27!==r&&null!==(e=e.child))for(Yl(e,t,n),e=e.sibling;null!==e;)Yl(e,t,n),e=e.sibling}function ql(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&27!==r&&null!==(e=e.child))for(ql(e,t,n),e=e.sibling;null!==e;)ql(e,t,n),e=e.sibling}var Ql=!1,Xl=!1,Zl=!1,es="function"==typeof WeakSet?WeakSet:Set,ts=null,ns=!1;function rs(e,t,n){var r=n.flags;switch(n.tag){case 0:case 11:case 15:gs(e,n),4&r&&Bl(5,n);break;case 1:if(gs(e,n),4&r)if(e=n.stateNode,null===t)try{e.componentDidMount()}catch(e){nu(n,n.return,e)}else{var a=Oi(n.type,t.memoizedProps);t=t.memoizedState;try{e.componentDidUpdate(a,t,e.__reactInternalSnapshotBeforeUpdate)}catch(e){nu(n,n.return,e)}}64&r&&Hl(n),512&r&&Gl(n,n.return);break;case 3:if(gs(e,n),64&r&&null!==(r=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 27:case 5:case 1:e=n.child.stateNode}try{Fl(r,e)}catch(e){nu(n,n.return,e)}}break;case 26:gs(e,n),512&r&&Gl(n,n.return);break;case 27:case 5:gs(e,n),null===t&&4&r&&Vl(n),512&r&&Gl(n,n.return);break;case 12:default:gs(e,n);break;case 13:gs(e,n),4&r&&ds(e,n);break;case 22:if(!(a=null!==n.memoizedState||Ql)){t=null!==t&&null!==t.memoizedState||Xl;var o=Ql,i=Xl;Ql=a,(Xl=t)&&!i?vs(e,n,!!(8772&n.subtreeFlags)):gs(e,n),Ql=o,Xl=i}512&r&&("manual"===n.memoizedProps.mode?Gl(n,n.return):Ul(n,n.return))}}function as(e){var t=e.alternate;null!==t&&(e.alternate=null,as(t)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(t=e.stateNode)&&Ve(t),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}var os=null,is=!1;function ls(e,t,n){for(n=n.child;null!==n;)ss(e,t,n),n=n.sibling}function ss(e,t,n){if(ye&&"function"==typeof ye.onCommitFiberUnmount)try{ye.onCommitFiberUnmount(ge,n)}catch(e){}switch(n.tag){case 26:Xl||Ul(n,t),ls(e,t,n),n.memoizedState?n.memoizedState.count--:n.stateNode&&(n=n.stateNode).parentNode.removeChild(n);break;case 27:Xl||Ul(n,t);var r=os,a=is;for(os=n.stateNode,ls(e,t,n),t=(n=n.stateNode).attributes;t.length;)n.removeAttributeNode(t[0]);Ve(n),os=r,is=a;break;case 5:Xl||Ul(n,t);case 6:a=os;var o=is;if(os=null,ls(e,t,n),is=o,null!==(os=a))if(is)try{e=os,r=n.stateNode,8===e.nodeType?e.parentNode.removeChild(r):e.removeChild(r)}catch(e){nu(n,t,e)}else try{os.removeChild(n.stateNode)}catch(e){nu(n,t,e)}break;case 18:null!==os&&(is?(t=os,n=n.stateNode,8===t.nodeType?ac(t.parentNode,n):1===t.nodeType&&ac(t,n),pf(t)):ac(os,n.stateNode));break;case 4:r=os,a=is,os=n.stateNode.containerInfo,is=!0,ls(e,t,n),os=r,is=a;break;case 0:case 11:case 14:case 15:Xl||Wl(2,n,t),Xl||Wl(4,n,t),ls(e,t,n);break;case 1:Xl||(Ul(n,t),"function"==typeof(r=n.stateNode).componentWillUnmount&&jl(n,t,r)),ls(e,t,n);break;case 21:ls(e,t,n);break;case 22:Xl||Ul(n,t),Xl=(r=Xl)||null!==n.memoizedState,ls(e,t,n),Xl=r;break;default:ls(e,t,n)}}function ds(e,t){if(null===t.memoizedState&&null!==(e=t.alternate)&&null!==(e=e.memoizedState)&&null!==(e=e.dehydrated))try{pf(e)}catch(e){nu(t,t.return,e)}}function us(e,t){var n=function(e){switch(e.tag){case 13:case 19:var t=e.stateNode;return null===t&&(t=e.stateNode=new es),t;case 22:return null===(t=(e=e.stateNode)._retryCache)&&(t=e._retryCache=new es),t;default:throw Error(i(435,e.tag))}}(e);t.forEach((function(t){var r=lu.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}function cs(e,t){var n=t.deletions;if(null!==n)for(var r=0;r<n.length;r++){var a=n[r],o=e,l=t,s=l;e:for(;null!==s;){switch(s.tag){case 27:case 5:os=s.stateNode,is=!1;break e;case 3:case 4:os=s.stateNode.containerInfo,is=!0;break e}s=s.return}if(null===os)throw Error(i(160));ss(o,l,a),os=null,is=!1,null!==(o=a.alternate)&&(o.return=null),a.return=null}if(13878&t.subtreeFlags)for(t=t.child;null!==t;)ps(t,e),t=t.sibling}var fs=null;function ps(e,t){var n=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:cs(t,e),ms(e),4&r&&(Wl(3,e,e.return),Bl(3,e),Wl(5,e,e.return));break;case 1:cs(t,e),ms(e),512&r&&(Xl||null===n||Ul(n,n.return)),64&r&&Ql&&null!==(e=e.updateQueue)&&null!==(r=e.callbacks)&&(n=e.shared.hiddenCallbacks,e.shared.hiddenCallbacks=null===n?r:n.concat(r));break;case 26:var a=fs;if(cs(t,e),ms(e),512&r&&(Xl||null===n||Ul(n,n.return)),4&r){var o=null!==n?n.memoizedState:null;if(r=e.memoizedState,null===n)if(null===r)if(null===e.stateNode){e:{r=e.type,n=e.memoizedProps,a=a.ownerDocument||a;t:switch(r){case"title":(!(o=a.getElementsByTagName("title")[0])||o[Ue]||o[Ne]||"http://www.w3.org/2000/svg"===o.namespaceURI||o.hasAttribute("itemprop"))&&(o=a.createElement(r),a.head.insertBefore(o,a.querySelector("head > title"))),Vu(o,r,n),o[Ne]=e,qe(o),r=o;break e;case"link":var l=Tc("link","href",a).get(r+(n.href||""));if(l)for(var s=0;s<l.length;s++)if((o=l[s]).getAttribute("href")===(null==n.href?null:n.href)&&o.getAttribute("rel")===(null==n.rel?null:n.rel)&&o.getAttribute("title")===(null==n.title?null:n.title)&&o.getAttribute("crossorigin")===(null==n.crossOrigin?null:n.crossOrigin)){l.splice(s,1);break t}Vu(o=a.createElement(r),r,n),a.head.appendChild(o);break;case"meta":if(l=Tc("meta","content",a).get(r+(n.content||"")))for(s=0;s<l.length;s++)if((o=l[s]).getAttribute("content")===(null==n.content?null:""+n.content)&&o.getAttribute("name")===(null==n.name?null:n.name)&&o.getAttribute("property")===(null==n.property?null:n.property)&&o.getAttribute("http-equiv")===(null==n.httpEquiv?null:n.httpEquiv)&&o.getAttribute("charset")===(null==n.charSet?null:n.charSet)){l.splice(s,1);break t}Vu(o=a.createElement(r),r,n),a.head.appendChild(o);break;default:throw Error(i(468,r))}o[Ne]=e,qe(o),r=o}e.stateNode=r}else Ac(a,e.type,e.stateNode);else e.stateNode=wc(a,r,e.memoizedProps);else o!==r?(null===o?null!==n.stateNode&&(n=n.stateNode).parentNode.removeChild(n):o.count--,null===r?Ac(a,e.type,e.stateNode):wc(a,r,e.memoizedProps)):null===r&&null!==e.stateNode&&Kl(e,e.memoizedProps,n.memoizedProps)}break;case 27:if(4&r&&null===e.alternate){a=e.stateNode,o=e.memoizedProps;try{for(var d=a.firstChild;d;){var u=d.nextSibling,c=d.nodeName;d[Ue]||"HEAD"===c||"BODY"===c||"SCRIPT"===c||"STYLE"===c||"LINK"===c&&"stylesheet"===d.rel.toLowerCase()||a.removeChild(d),d=u}for(var f=e.type,p=a.attributes;p.length;)a.removeAttributeNode(p[0]);Vu(a,f,o),a[Ne]=e,a[Fe]=o}catch(t){nu(e,e.return,t)}}case 5:if(cs(t,e),ms(e),512&r&&(Xl||null===n||Ul(n,n.return)),32&e.flags){a=e.stateNode;try{wt(a,"")}catch(t){nu(e,e.return,t)}}4&r&&null!=e.stateNode&&Kl(e,a=e.memoizedProps,null!==n?n.memoizedProps:a),1024&r&&(Zl=!0);break;case 6:if(cs(t,e),ms(e),4&r){if(null===e.stateNode)throw Error(i(162));r=e.memoizedProps,n=e.stateNode;try{n.nodeValue=r}catch(t){nu(e,e.return,t)}}break;case 3:if(xc=null,a=fs,fs=cc(t.containerInfo),cs(t,e),fs=a,ms(e),4&r&&null!==n&&n.memoizedState.isDehydrated)try{pf(t.containerInfo)}catch(t){nu(e,e.return,t)}Zl&&(Zl=!1,hs(e));break;case 4:r=fs,fs=cc(e.stateNode.containerInfo),cs(t,e),ms(e),fs=r;break;case 12:cs(t,e),ms(e);break;case 13:cs(t,e),ms(e),8192&e.child.flags&&null!==e.memoizedState!=(null!==n&&null!==n.memoizedState)&&(vd=le()),4&r&&null!==(r=e.updateQueue)&&(e.updateQueue=null,us(e,r));break;case 22:if(512&r&&(Xl||null===n||Ul(n,n.return)),d=null!==e.memoizedState,u=null!==n&&null!==n.memoizedState,Ql=(c=Ql)||d,Xl=(f=Xl)||u,cs(t,e),Xl=f,Ql=c,ms(e),(t=e.stateNode)._current=e,t._visibility&=-3,t._visibility|=2&t._pendingVisibility,8192&r&&(t._visibility=d?-2&t._visibility:1|t._visibility,d&&(t=Ql||Xl,null===n||u||t||ys(e)),null===e.memoizedProps||"manual"!==e.memoizedProps.mode))e:for(n=null,t=e;;){if(5===t.tag||26===t.tag||27===t.tag){if(null===n){u=n=t;try{if(a=u.stateNode,d)"function"==typeof(o=a.style).setProperty?o.setProperty("display","none","important"):o.display="none";else{l=u.stateNode;var m=null!=(s=u.memoizedProps.style)&&s.hasOwnProperty("display")?s.display:null;l.style.display=null==m||"boolean"==typeof m?"":(""+m).trim()}}catch(e){nu(u,u.return,e)}}}else if(6===t.tag){if(null===n){u=t;try{u.stateNode.nodeValue=d?"":u.memoizedProps}catch(e){nu(u,u.return,e)}}}else if((22!==t.tag&&23!==t.tag||null===t.memoizedState||t===e)&&null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break e;for(;null===t.sibling;){if(null===t.return||t.return===e)break e;n===t&&(n=null),t=t.return}n===t&&(n=null),t.sibling.return=t.return,t=t.sibling}4&r&&null!==(r=e.updateQueue)&&null!==(n=r.retryQueue)&&(r.retryQueue=null,us(e,n));break;case 19:cs(t,e),ms(e),4&r&&null!==(r=e.updateQueue)&&(e.updateQueue=null,us(e,r));break;case 21:break;default:cs(t,e),ms(e)}}function ms(e){var t=e.flags;if(2&t){try{if(27!==e.tag){e:{for(var n=e.return;null!==n;){if(Jl(n)){var r=n;break e}n=n.return}throw Error(i(160))}switch(r.tag){case 27:var a=r.stateNode;ql(e,$l(e),a);break;case 5:var o=r.stateNode;32&r.flags&&(wt(o,""),r.flags&=-33),ql(e,$l(e),o);break;case 3:case 4:var l=r.stateNode.containerInfo;Yl(e,$l(e),l);break;default:throw Error(i(161))}}}catch(t){nu(e,e.return,t)}e.flags&=-3}4096&t&&(e.flags&=-4097)}function hs(e){if(1024&e.subtreeFlags)for(e=e.child;null!==e;){var t=e;hs(t),5===t.tag&&1024&t.flags&&t.stateNode.reset(),e=e.sibling}}function gs(e,t){if(8772&t.subtreeFlags)for(t=t.child;null!==t;)rs(e,t.alternate,t),t=t.sibling}function ys(e){for(e=e.child;null!==e;){var t=e;switch(t.tag){case 0:case 11:case 14:case 15:Wl(4,t,t.return),ys(t);break;case 1:Ul(t,t.return);var n=t.stateNode;"function"==typeof n.componentWillUnmount&&jl(t,t.return,n),ys(t);break;case 26:case 27:case 5:Ul(t,t.return),ys(t);break;case 22:Ul(t,t.return),null===t.memoizedState&&ys(t);break;default:ys(t)}e=e.sibling}}function vs(e,t,n){for(n=n&&!!(8772&t.subtreeFlags),t=t.child;null!==t;){var r=t.alternate,a=e,o=t,i=o.flags;switch(o.tag){case 0:case 11:case 15:vs(a,o,n),Bl(4,o);break;case 1:if(vs(a,o,n),"function"==typeof(a=(r=o).stateNode).componentDidMount)try{a.componentDidMount()}catch(e){nu(r,r.return,e)}if(null!==(a=(r=o).updateQueue)){var l=r.stateNode;try{var s=a.shared.hiddenCallbacks;if(null!==s)for(a.shared.hiddenCallbacks=null,a=0;a<s.length;a++)Nl(s[a],l)}catch(e){nu(r,r.return,e)}}n&&64&i&&Hl(o),Gl(o,o.return);break;case 26:case 27:case 5:vs(a,o,n),n&&null===r&&4&i&&Vl(o),Gl(o,o.return);break;case 12:default:vs(a,o,n);break;case 13:vs(a,o,n),n&&4&i&&ds(a,o);break;case 22:null===o.memoizedState&&vs(a,o,n),Gl(o,o.return)}t=t.sibling}}function bs(e,t){var n=null;null!==e&&null!==e.memoizedState&&null!==e.memoizedState.cachePool&&(n=e.memoizedState.cachePool.pool),e=null,null!==t.memoizedState&&null!==t.memoizedState.cachePool&&(e=t.memoizedState.cachePool.pool),e!==n&&(null!=e&&e.refCount++,null!=n&&Wa(n))}function Ss(e,t){e=null,null!==t.alternate&&(e=t.alternate.memoizedState.cache),(t=t.memoizedState.cache)!==e&&(t.refCount++,null!=e&&Wa(e))}function ws(e,t,n,r){if(10256&t.subtreeFlags)for(t=t.child;null!==t;)_s(e,t,n,r),t=t.sibling}function _s(e,t,n,r){var a=t.flags;switch(t.tag){case 0:case 11:case 15:ws(e,t,n,r),2048&a&&Bl(9,t);break;case 3:ws(e,t,n,r),2048&a&&(e=null,null!==t.alternate&&(e=t.alternate.memoizedState.cache),(t=t.memoizedState.cache)!==e&&(t.refCount++,null!=e&&Wa(e)));break;case 12:if(2048&a){ws(e,t,n,r),e=t.stateNode;try{var o=t.memoizedProps,i=o.id,l=o.onPostCommit;"function"==typeof l&&l(i,null===t.alternate?"mount":"update",e.passiveEffectDuration,-0)}catch(e){nu(t,t.return,e)}}else ws(e,t,n,r);break;case 23:break;case 22:o=t.stateNode,null!==t.memoizedState?4&o._visibility?ws(e,t,n,r):ks(e,t):4&o._visibility?ws(e,t,n,r):(o._visibility|=4,Cs(e,t,n,r,!!(10256&t.subtreeFlags))),2048&a&&bs(t.alternate,t);break;case 24:ws(e,t,n,r),2048&a&&Ss(t.alternate,t);break;default:ws(e,t,n,r)}}function Cs(e,t,n,r,a){for(a=a&&!!(10256&t.subtreeFlags),t=t.child;null!==t;){var o=e,i=t,l=n,s=r,d=i.flags;switch(i.tag){case 0:case 11:case 15:Cs(o,i,l,s,a),Bl(8,i);break;case 23:break;case 22:var u=i.stateNode;null!==i.memoizedState?4&u._visibility?Cs(o,i,l,s,a):ks(o,i):(u._visibility|=4,Cs(o,i,l,s,a)),a&&2048&d&&bs(i.alternate,i);break;case 24:Cs(o,i,l,s,a),a&&2048&d&&Ss(i.alternate,i);break;default:Cs(o,i,l,s,a)}t=t.sibling}}function ks(e,t){if(10256&t.subtreeFlags)for(t=t.child;null!==t;){var n=e,r=t,a=r.flags;switch(r.tag){case 22:ks(n,r),2048&a&&bs(r.alternate,r);break;case 24:ks(n,r),2048&a&&Ss(r.alternate,r);break;default:ks(n,r)}t=t.sibling}}var xs=8192;function Ts(e){if(e.subtreeFlags&xs)for(e=e.child;null!==e;)As(e),e=e.sibling}function As(e){switch(e.tag){case 26:Ts(e),e.flags&xs&&null!==e.memoizedState&&function(e,t,n){if(null===zc)throw Error(i(475));var r=zc;if(!("stylesheet"!==t.type||"string"==typeof n.media&&!1===matchMedia(n.media).matches||4&t.state.loading)){if(null===t.instance){var a=gc(n.href),o=e.querySelector(yc(a));if(o)return null!==(e=o._p)&&"object"==typeof e&&"function"==typeof e.then&&(r.count++,r=Ec.bind(r),e.then(r,r)),t.state.loading|=4,t.instance=o,void qe(o);o=e.ownerDocument||e,n=vc(n),(a=dc.get(a))&&Cc(n,a),qe(o=o.createElement("link"));var l=o;l._p=new Promise((function(e,t){l.onload=e,l.onerror=t})),Vu(o,"link",n),t.instance=o}null===r.stylesheets&&(r.stylesheets=new Map),r.stylesheets.set(t,e),(e=t.state.preload)&&!(3&t.state.loading)&&(r.count++,t=Ec.bind(r),e.addEventListener("load",t),e.addEventListener("error",t))}}(fs,e.memoizedState,e.memoizedProps);break;case 5:default:Ts(e);break;case 3:case 4:var t=fs;fs=cc(e.stateNode.containerInfo),Ts(e),fs=t;break;case 22:null===e.memoizedState&&(null!==(t=e.alternate)&&null!==t.memoizedState?(t=xs,xs=16777216,Ts(e),xs=t):Ts(e))}}function Ps(e){var t=e.alternate;if(null!==t&&null!==(e=t.child)){t.child=null;do{t=e.sibling,e.sibling=null,e=t}while(null!==e)}}function zs(e){var t=e.deletions;if(16&e.flags){if(null!==t)for(var n=0;n<t.length;n++){var r=t[n];ts=r,Os(r,e)}Ps(e)}if(10256&e.subtreeFlags)for(e=e.child;null!==e;)Rs(e),e=e.sibling}function Rs(e){switch(e.tag){case 0:case 11:case 15:zs(e),2048&e.flags&&Wl(9,e,e.return);break;case 3:case 12:default:zs(e);break;case 22:var t=e.stateNode;null!==e.memoizedState&&4&t._visibility&&(null===e.return||13!==e.return.tag)?(t._visibility&=-5,Es(e)):zs(e)}}function Es(e){var t=e.deletions;if(16&e.flags){if(null!==t)for(var n=0;n<t.length;n++){var r=t[n];ts=r,Os(r,e)}Ps(e)}for(e=e.child;null!==e;){switch((t=e).tag){case 0:case 11:case 15:Wl(8,t,t.return),Es(t);break;case 22:4&(n=t.stateNode)._visibility&&(n._visibility&=-5,Es(t));break;default:Es(t)}e=e.sibling}}function Os(e,t){for(;null!==ts;){var n=ts;switch(n.tag){case 0:case 11:case 15:Wl(8,n,t);break;case 23:case 22:if(null!==n.memoizedState&&null!==n.memoizedState.cachePool){var r=n.memoizedState.cachePool.pool;null!=r&&r.refCount++}break;case 24:Wa(n.memoizedState.cache)}if(null!==(r=n.child))r.return=n,ts=r;else e:for(n=e;null!==ts;){var a=(r=ts).sibling,o=r.return;if(as(r),r===n){ts=null;break e}if(null!==a){a.return=o,ts=a;break e}ts=o}}}function Ms(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.refCleanup=this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Is(e,t,n,r){return new Ms(e,t,n,r)}function Ls(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Ds(e,t){var n=e.alternate;return null===n?((n=Is(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=31457280&e.flags,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n.refCleanup=e.refCleanup,n}function Ns(e,t){e.flags&=31457282;var n=e.alternate;return null===n?(e.childLanes=0,e.lanes=t,e.child=null,e.subtreeFlags=0,e.memoizedProps=null,e.memoizedState=null,e.updateQueue=null,e.dependencies=null,e.stateNode=null):(e.childLanes=n.childLanes,e.lanes=n.lanes,e.child=n.child,e.subtreeFlags=0,e.deletions=null,e.memoizedProps=n.memoizedProps,e.memoizedState=n.memoizedState,e.updateQueue=n.updateQueue,e.type=n.type,t=n.dependencies,e.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext}),e}function Fs(e,t,n,r,a,o){var l=0;if(r=e,"function"==typeof e)Ls(e)&&(l=1);else if("string"==typeof e)l=function(e,t,n){if(1===n||null!=t.itemProp)return!1;switch(e){case"meta":case"title":return!0;case"style":if("string"!=typeof t.precedence||"string"!=typeof t.href||""===t.href)break;return!0;case"link":if("string"!=typeof t.rel||"string"!=typeof t.href||""===t.href||t.onLoad||t.onError)break;return"stylesheet"!==t.rel||(e=t.disabled,"string"==typeof t.precedence&&null==e);case"script":if(t.async&&"function"!=typeof t.async&&"symbol"!=typeof t.async&&!t.onLoad&&!t.onError&&t.src&&"string"==typeof t.src)return!0}return!1}(e,n,$.current)?26:"html"===e||"head"===e||"body"===e?27:5;else e:switch(e){case u:return Bs(n.children,a,o,t);case c:l=8,a|=24;break;case f:return(e=Is(12,n,t,2|a)).elementType=f,e.lanes=o,e;case y:return(e=Is(13,n,t,a)).elementType=y,e.lanes=o,e;case v:return(e=Is(19,n,t,a)).elementType=v,e.lanes=o,e;case w:return Ws(n,a,o,t);default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case p:case h:l=10;break e;case m:l=9;break e;case g:l=11;break e;case b:l=14;break e;case S:l=16,r=null;break e}l=29,n=Error(i(130,null===e?"null":typeof e,"")),r=null}return(t=Is(l,n,t,a)).elementType=e,t.type=r,t.lanes=o,t}function Bs(e,t,n,r){return(e=Is(7,e,r,t)).lanes=n,e}function Ws(e,t,n,r){(e=Is(22,e,r,t)).elementType=w,e.lanes=n;var a={_visibility:1,_pendingVisibility:1,_pendingMarkers:null,_retryCache:null,_transitions:null,_current:null,detach:function(){var e=a._current;if(null===e)throw Error(i(456));if(!(2&a._pendingVisibility)){var t=Pr(e,2);null!==t&&(a._pendingVisibility|=2,Ed(t,0,2))}},attach:function(){var e=a._current;if(null===e)throw Error(i(456));if(2&a._pendingVisibility){var t=Pr(e,2);null!==t&&(a._pendingVisibility&=-3,Ed(t,0,2))}}};return e.stateNode=a,e}function Hs(e,t,n){return(e=Is(6,e,null,t)).lanes=n,e}function js(e,t,n){return(t=Is(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Gs(e){e.flags|=4}function Us(e,t){if("stylesheet"!==t.type||4&t.state.loading)e.flags&=-16777217;else if(e.flags|=16777216,!Pc(t)){if(null!==(t=Aa.current)&&((4194176&nd)===nd?null!==Pa:(62914560&nd)!==nd&&!(536870912&nd)||t!==Pa))throw ca=la,ia;e.flags|=8192}}function Vs(e,t){null!==t&&(e.flags|=4),16384&e.flags&&(t=22!==e.tag?ze():536870912,e.lanes|=t,md|=t)}function Ks(e,t){if(!Yr)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function Js(e){var t=null!==e.alternate&&e.alternate.child===e.child,n=0,r=0;if(t)for(var a=e.child;null!==a;)n|=a.lanes|a.childLanes,r|=31457280&a.subtreeFlags,r|=31457280&a.flags,a.return=e,a=a.sibling;else for(a=e.child;null!==a;)n|=a.lanes|a.childLanes,r|=a.subtreeFlags,r|=a.flags,a.return=e,a=a.sibling;return e.subtreeFlags|=r,e.childLanes=n,t}function $s(e,t,n){var r=t.pendingProps;switch(Kr(t),t.tag){case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:case 1:return Js(t),null;case 3:return n=t.stateNode,r=null,null!==e&&(r=e.memoizedState.cache),t.memoizedState.cache!==r&&(t.flags|=2048),vl(Fa),Z(),n.pendingContext&&(n.context=n.pendingContext,n.pendingContext=null),null!==e&&null!==e.child||(na(t)?Gs(t):null===e||e.memoizedState.isDehydrated&&!(256&t.flags)||(t.flags|=1024,null!==qr&&(Md(qr),qr=null))),Js(t),null;case 26:return n=t.memoizedState,null===e?(Gs(t),null!==n?(Js(t),Us(t,n)):(Js(t),t.flags&=-16777217)):n?n!==e.memoizedState?(Gs(t),Js(t),Us(t,n)):(Js(t),t.flags&=-16777217):(e.memoizedProps!==r&&Gs(t),Js(t),t.flags&=-16777217),null;case 27:te(t),n=q.current;var a=t.type;if(null!==e&&null!=t.stateNode)e.memoizedProps!==r&&Gs(t);else{if(!r){if(null===t.stateNode)throw Error(i(166));return Js(t),null}e=$.current,na(t)?ea(t):(e=sc(a,r,n),t.stateNode=e,Gs(t))}return Js(t),null;case 5:if(te(t),n=t.type,null!==e&&null!=t.stateNode)e.memoizedProps!==r&&Gs(t);else{if(!r){if(null===t.stateNode)throw Error(i(166));return Js(t),null}if(e=$.current,na(t))ea(t);else{switch(a=$u(q.current),e){case 1:e=a.createElementNS("http://www.w3.org/2000/svg",n);break;case 2:e=a.createElementNS("http://www.w3.org/1998/Math/MathML",n);break;default:switch(n){case"svg":e=a.createElementNS("http://www.w3.org/2000/svg",n);break;case"math":e=a.createElementNS("http://www.w3.org/1998/Math/MathML",n);break;case"script":(e=a.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild);break;case"select":e="string"==typeof r.is?a.createElement("select",{is:r.is}):a.createElement("select"),r.multiple?e.multiple=!0:r.size&&(e.size=r.size);break;default:e="string"==typeof r.is?a.createElement(n,{is:r.is}):a.createElement(n)}}e[Ne]=t,e[Fe]=r;e:for(a=t.child;null!==a;){if(5===a.tag||6===a.tag)e.appendChild(a.stateNode);else if(4!==a.tag&&27!==a.tag&&null!==a.child){a.child.return=a,a=a.child;continue}if(a===t)break e;for(;null===a.sibling;){if(null===a.return||a.return===t)break e;a=a.return}a.sibling.return=a.return,a=a.sibling}t.stateNode=e;e:switch(Vu(e,n,r),n){case"button":case"input":case"select":case"textarea":e=!!r.autoFocus;break e;case"img":e=!0;break e;default:e=!1}e&&Gs(t)}}return Js(t),t.flags&=-16777217,null;case 6:if(e&&null!=t.stateNode)e.memoizedProps!==r&&Gs(t);else{if("string"!=typeof r&&null===t.stateNode)throw Error(i(166));if(e=q.current,na(t)){if(e=t.stateNode,n=t.memoizedProps,r=null,null!==(a=Jr))switch(a.tag){case 27:case 5:r=a.memoizedProps}e[Ne]=t,(e=!!(e.nodeValue===n||null!==r&&!0===r.suppressHydrationWarning||Hu(e.nodeValue,n)))||Zr(t)}else(e=$u(e).createTextNode(r))[Ne]=t,t.stateNode=e}return Js(t),null;case 13:if(r=t.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(a=na(t),null!==r&&null!==r.dehydrated){if(null===e){if(!a)throw Error(i(318));if(!(a=null!==(a=t.memoizedState)?a.dehydrated:null))throw Error(i(317));a[Ne]=t}else ra(),!(128&t.flags)&&(t.memoizedState=null),t.flags|=4;Js(t),a=!1}else null!==qr&&(Md(qr),qr=null),a=!0;if(!a)return 256&t.flags?(Oa(t),t):(Oa(t),null)}if(Oa(t),128&t.flags)return t.lanes=n,t;if(n=null!==r,e=null!==e&&null!==e.memoizedState,n){a=null,null!==(r=t.child).alternate&&null!==r.alternate.memoizedState&&null!==r.alternate.memoizedState.cachePool&&(a=r.alternate.memoizedState.cachePool.pool);var o=null;null!==r.memoizedState&&null!==r.memoizedState.cachePool&&(o=r.memoizedState.cachePool.pool),o!==a&&(r.flags|=2048)}return n!==e&&n&&(t.child.flags|=8192),Vs(t,t.updateQueue),Js(t),null;case 4:return Z(),null===e&&Eu(t.stateNode.containerInfo),Js(t),null;case 10:return vl(t.type),Js(t),null;case 19:if(K(Ma),null===(a=t.memoizedState))return Js(t),null;if(r=!!(128&t.flags),null===(o=a.rendering))if(r)Ks(a,!1);else{if(0!==dd||null!==e&&128&e.flags)for(e=t.child;null!==e;){if(null!==(o=Ia(e))){for(t.flags|=128,Ks(a,!1),e=o.updateQueue,t.updateQueue=e,Vs(t,e),t.subtreeFlags=0,e=n,n=t.child;null!==n;)Ns(n,e),n=n.sibling;return J(Ma,1&Ma.current|2),t.child}e=e.sibling}null!==a.tail&&le()>bd&&(t.flags|=128,r=!0,Ks(a,!1),t.lanes=4194304)}else{if(!r)if(null!==(e=Ia(o))){if(t.flags|=128,r=!0,e=e.updateQueue,t.updateQueue=e,Vs(t,e),Ks(a,!0),null===a.tail&&"hidden"===a.tailMode&&!o.alternate&&!Yr)return Js(t),null}else 2*le()-a.renderingStartTime>bd&&536870912!==n&&(t.flags|=128,r=!0,Ks(a,!1),t.lanes=4194304);a.isBackwards?(o.sibling=t.child,t.child=o):(null!==(e=a.last)?e.sibling=o:t.child=o,a.last=o)}return null!==a.tail?(t=a.tail,a.rendering=t,a.tail=t.sibling,a.renderingStartTime=le(),t.sibling=null,e=Ma.current,J(Ma,r?1&e|2:1&e),t):(Js(t),null);case 22:case 23:return Oa(t),Ta(),r=null!==t.memoizedState,null!==e?null!==e.memoizedState!==r&&(t.flags|=8192):r&&(t.flags|=8192),r?!!(536870912&n)&&!(128&t.flags)&&(Js(t),6&t.subtreeFlags&&(t.flags|=8192)):Js(t),null!==(n=t.updateQueue)&&Vs(t,n.retryQueue),n=null,null!==e&&null!==e.memoizedState&&null!==e.memoizedState.cachePool&&(n=e.memoizedState.cachePool.pool),r=null,null!==t.memoizedState&&null!==t.memoizedState.cachePool&&(r=t.memoizedState.cachePool.pool),r!==n&&(t.flags|=2048),null!==e&&K(Ja),null;case 24:return n=null,null!==e&&(n=e.memoizedState.cache),t.memoizedState.cache!==n&&(t.flags|=2048),vl(Fa),Js(t),null;case 25:return null}throw Error(i(156,t.tag))}function Ys(e,t){switch(Kr(t),t.tag){case 1:return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 3:return vl(Fa),Z(),65536&(e=t.flags)&&!(128&e)?(t.flags=-65537&e|128,t):null;case 26:case 27:case 5:return te(t),null;case 13:if(Oa(t),null!==(e=t.memoizedState)&&null!==e.dehydrated){if(null===t.alternate)throw Error(i(340));ra()}return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 19:return K(Ma),null;case 4:return Z(),null;case 10:return vl(t.type),null;case 22:case 23:return Oa(t),Ta(),null!==e&&K(Ja),65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 24:return vl(Fa),null;default:return null}}function qs(e,t){switch(Kr(t),t.tag){case 3:vl(Fa),Z();break;case 26:case 27:case 5:te(t);break;case 4:Z();break;case 13:Oa(t);break;case 19:K(Ma);break;case 10:vl(t.type);break;case 22:case 23:Oa(t),Ta(),null!==e&&K(Ja);break;case 24:vl(Fa)}}var Qs={getCacheForType:function(e){var t=kl(Fa),n=t.data.get(e);return void 0===n&&(n=e(),t.data.set(e,n)),n}},Xs="function"==typeof WeakMap?WeakMap:Map,Zs=0,ed=null,td=null,nd=0,rd=0,ad=null,od=!1,id=!1,ld=!1,sd=0,dd=0,ud=0,cd=0,fd=0,pd=0,md=0,hd=null,gd=null,yd=!1,vd=0,bd=1/0,Sd=null,wd=null,_d=!1,Cd=null,kd=0,xd=0,Td=null,Ad=0,Pd=null;function zd(){return 2&Zs&&0!==nd?nd&-nd:null!==z.T?0!==Ga?Ga:Su():Le()}function Rd(){0===pd&&(pd=536870912&nd&&!Yr?536870912:Pe());var e=Aa.current;return null!==e&&(e.flags|=32),pd}function Ed(e,t,n){(e===ed&&2===rd||null!==e.cancelPendingCommit)&&(Bd(e,0),Dd(e,nd,pd,!1)),Ee(e,n),2&Zs&&e===ed||(e===ed&&(!(2&Zs)&&(cd|=n),4===dd&&Dd(e,nd,pd,!1)),mu(e))}function Od(e,t,n){if(6&Zs)throw Error(i(327));for(var r=!n&&!(60&t)&&!(t&e.expiredLanes)||Te(e,t),a=r?function(e,t){var n=Zs;Zs|=2;var r=Hd(),a=jd();ed!==e||nd!==t?(Sd=null,bd=le()+500,Bd(e,t)):id=Te(e,t);e:for(;;)try{if(0!==rd&&null!==td){t=td;var o=ad;t:switch(rd){case 1:rd=0,ad=null,Yd(e,t,o,1);break;case 2:if(sa(o)){rd=0,ad=null,$d(t);break}t=function(){2===rd&&ed===e&&(rd=7),mu(e)},o.then(t,t);break e;case 3:rd=7;break e;case 4:rd=5;break e;case 7:sa(o)?(rd=0,ad=null,$d(t)):(rd=0,ad=null,Yd(e,t,o,7));break;case 5:var l=null;switch(td.tag){case 26:l=td.memoizedState;case 5:case 27:var s=td;if(!l||Pc(l)){rd=0,ad=null;var d=s.sibling;if(null!==d)td=d;else{var u=s.return;null!==u?(td=u,qd(u)):td=null}break t}}rd=0,ad=null,Yd(e,t,o,5);break;case 6:rd=0,ad=null,Yd(e,t,o,6);break;case 8:Fd(),dd=6;break e;default:throw Error(i(462))}}Kd();break}catch(t){Wd(e,t)}return gl=hl=null,z.H=r,z.A=a,Zs=n,null!==td?0:(ed=null,nd=0,xr(),dd)}(e,t):Ud(e,t,!0),o=r;;){if(0===a){id&&!r&&Dd(e,t,0,!1);break}if(6===a)Dd(e,t,0,!od);else{if(n=e.current.alternate,o&&!Ld(n)){a=Ud(e,t,!1),o=!1;continue}if(2===a){if(o=t,e.errorRecoveryDisabledLanes&o)var l=0;else l=0!=(l=-536870913&e.pendingLanes)?l:536870912&l?536870912:0;if(0!==l){t=l;e:{var s=e;a=hd;var d=s.current.memoizedState.isDehydrated;if(d&&(Bd(s,l).flags|=256),2!==(l=Ud(s,l,!1))){if(ld&&!d){s.errorRecoveryDisabledLanes|=o,cd|=o,a=4;break e}o=gd,gd=a,null!==o&&Md(o)}a=l}if(o=!1,2!==a)continue}}if(1===a){Bd(e,0),Dd(e,t,0,!0);break}e:{switch(r=e,a){case 0:case 1:throw Error(i(345));case 4:if((4194176&t)===t){Dd(r,t,pd,!od);break e}break;case 2:gd=null;break;case 3:case 5:break;default:throw Error(i(329))}if(r.finishedWork=n,r.finishedLanes=t,(62914560&t)===t&&10<(o=vd+300-le())){if(Dd(r,t,pd,!od),0!==xe(r,0))break e;r.timeoutHandle=Zu(Id.bind(null,r,n,gd,Sd,yd,t,pd,cd,md,od,2,-0,0),o)}else Id(r,n,gd,Sd,yd,t,pd,cd,md,od,0,-0,0)}}break}mu(e)}function Md(e){null===gd?gd=e:gd.push.apply(gd,e)}function Id(e,t,n,r,a,o,l,s,d,u,c,f,p){var m=t.subtreeFlags;if((8192&m||!(16785408&~m))&&(zc={stylesheets:null,count:0,unsuspend:Rc},As(t),null!==(t=function(){if(null===zc)throw Error(i(475));var e=zc;return e.stylesheets&&0===e.count&&Mc(e,e.stylesheets),0<e.count?function(t){var n=setTimeout((function(){if(e.stylesheets&&Mc(e,e.stylesheets),e.unsuspend){var t=e.unsuspend;e.unsuspend=null,t()}}),6e4);return e.unsuspend=t,function(){e.unsuspend=null,clearTimeout(n)}}:null}())))return e.cancelPendingCommit=t(Xd.bind(null,e,n,r,a,l,s,d,1,f,p)),void Dd(e,o,l,!u);Xd(e,n,r,a,l,s,d)}function Ld(e){for(var t=e;;){var n=t.tag;if((0===n||11===n||15===n)&&16384&t.flags&&null!==(n=t.updateQueue)&&null!==(n=n.stores))for(var r=0;r<n.length;r++){var a=n[r],o=a.getSnapshot;a=a.value;try{if(!Jn(o(),a))return!1}catch(e){return!1}}if(n=t.child,16384&t.subtreeFlags&&null!==n)n.return=t,t=n;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}function Dd(e,t,n,r){t&=~fd,t&=~cd,e.suspendedLanes|=t,e.pingedLanes&=~t,r&&(e.warmLanes|=t),r=e.expirationTimes;for(var a=t;0<a;){var o=31-be(a),i=1<<o;r[o]=-1,a&=~i}0!==n&&Oe(e,n,t)}function Nd(){return!!(6&Zs)||(hu(0,!1),!1)}function Fd(){if(null!==td){if(0===rd)var e=td.return;else gl=hl=null,yo(e=td),pa=null,ma=0,e=td;for(;null!==e;)qs(e.alternate,e),e=e.return;td=null}}function Bd(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;-1!==n&&(e.timeoutHandle=-1,ec(n)),null!==(n=e.cancelPendingCommit)&&(e.cancelPendingCommit=null,n()),Fd(),ed=e,td=n=Ds(e.current,null),nd=t,rd=0,ad=null,od=!1,id=Te(e,t),ld=!1,md=pd=fd=cd=ud=dd=0,gd=hd=null,yd=!1,8&t&&(t|=32&t);var r=e.entangledLanes;if(0!==r)for(e=e.entanglements,r&=t;0<r;){var a=31-be(r),o=1<<a;t|=e[a],r&=~o}return sd=t,xr(),n}function Wd(e,t){Xa=null,z.H=ki,t===oa?(t=fa(),rd=3):t===ia?(t=fa(),rd=4):rd=t===ji?8:null!==t&&"object"==typeof t&&"function"==typeof t.then?6:1,ad=t,null===td&&(dd=1,Ni(e,Mr(t,e.current)))}function Hd(){var e=z.H;return z.H=ki,null===e?ki:e}function jd(){var e=z.A;return z.A=Qs,e}function Gd(){dd=4,od||(4194176&nd)!==nd&&null!==Aa.current||(id=!0),!(134217727&ud)&&!(134217727&cd)||null===ed||Dd(ed,nd,pd,!1)}function Ud(e,t,n){var r=Zs;Zs|=2;var a=Hd(),o=jd();ed===e&&nd===t||(Sd=null,Bd(e,t)),t=!1;var i=dd;e:for(;;)try{if(0!==rd&&null!==td){var l=td,s=ad;switch(rd){case 8:Fd(),i=6;break e;case 3:case 2:case 6:null===Aa.current&&(t=!0);var d=rd;if(rd=0,ad=null,Yd(e,l,s,d),n&&id){i=0;break e}break;default:d=rd,rd=0,ad=null,Yd(e,l,s,d)}}Vd(),i=dd;break}catch(t){Wd(e,t)}return t&&e.shellSuspendCounter++,gl=hl=null,Zs=r,z.H=a,z.A=o,null===td&&(ed=null,nd=0,xr()),i}function Vd(){for(;null!==td;)Jd(td)}function Kd(){for(;null!==td&&!oe();)Jd(td)}function Jd(e){var t=pl(e.alternate,e,sd);e.memoizedProps=e.pendingProps,null===t?qd(e):td=t}function $d(e){var t=e,n=t.alternate;switch(t.tag){case 15:case 0:t=Xi(n,t,t.pendingProps,t.type,void 0,nd);break;case 11:t=Xi(n,t,t.pendingProps,t.type.render,t.ref,nd);break;case 5:yo(t);default:qs(n,t),t=pl(n,t=td=Ns(t,sd),sd)}e.memoizedProps=e.pendingProps,null===t?qd(e):td=t}function Yd(e,t,n,r){gl=hl=null,yo(t),pa=null,ma=0;var a=t.return;try{if(function(e,t,n,r,a){if(n.flags|=32768,null!==r&&"object"==typeof r&&"function"==typeof r.then){if(null!==(t=n.alternate)&&wl(t,n,a,!0),null!==(n=Aa.current)){switch(n.tag){case 13:return null===Pa?Gd():null===n.alternate&&0===dd&&(dd=3),n.flags&=-257,n.flags|=65536,n.lanes=a,r===la?n.flags|=16384:(null===(t=n.updateQueue)?n.updateQueue=new Set([r]):t.add(r),ru(e,r,a)),!1;case 22:return n.flags|=65536,r===la?n.flags|=16384:(null===(t=n.updateQueue)?(t={transitions:null,markerInstances:null,retryQueue:new Set([r])},n.updateQueue=t):null===(n=t.retryQueue)?t.retryQueue=new Set([r]):n.add(r),ru(e,r,a)),!1}throw Error(i(435,n.tag))}return ru(e,r,a),Gd(),!1}if(Yr)return null!==(t=Aa.current)?(!(65536&t.flags)&&(t.flags|=256),t.flags|=65536,t.lanes=a,r!==Xr&&aa(Mr(e=Error(i(422),{cause:r}),n))):(r!==Xr&&aa(Mr(t=Error(i(423),{cause:r}),n)),(e=e.current.alternate).flags|=65536,a&=-a,e.lanes|=a,r=Mr(r,n),Ml(e,a=Bi(e.stateNode,r,a)),4!==dd&&(dd=2)),!1;var o=Error(i(520),{cause:r});if(o=Mr(o,n),null===hd?hd=[o]:hd.push(o),4!==dd&&(dd=2),null===t)return!0;r=Mr(r,n),n=t;do{switch(n.tag){case 3:return n.flags|=65536,e=a&-a,n.lanes|=e,Ml(n,e=Bi(n.stateNode,r,e)),!1;case 1:if(t=n.type,o=n.stateNode,!(128&n.flags||"function"!=typeof t.getDerivedStateFromError&&(null===o||"function"!=typeof o.componentDidCatch||null!==wd&&wd.has(o))))return n.flags|=65536,a&=-a,n.lanes|=a,Hi(a=Wi(a),e,n,r),Ml(n,a),!1}n=n.return}while(null!==n);return!1}(e,a,t,n,nd))return dd=1,Ni(e,Mr(n,e.current)),void(td=null)}catch(t){if(null!==a)throw td=a,t;return dd=1,Ni(e,Mr(n,e.current)),void(td=null)}32768&t.flags?(Yr||1===r?e=!0:id||536870912&nd?e=!1:(od=e=!0,(2===r||3===r||6===r)&&null!==(r=Aa.current)&&13===r.tag&&(r.flags|=16384)),Qd(t,e)):qd(t)}function qd(e){var t=e;do{if(32768&t.flags)return void Qd(t,od);e=t.return;var n=$s(t.alternate,t,sd);if(null!==n)return void(td=n);if(null!==(t=t.sibling))return void(td=t);td=t=e}while(null!==t);0===dd&&(dd=5)}function Qd(e,t){do{var n=Ys(e.alternate,e);if(null!==n)return n.flags&=32767,void(td=n);if(null!==(n=e.return)&&(n.flags|=32768,n.subtreeFlags=0,n.deletions=null),!t&&null!==(e=e.sibling))return void(td=e);td=e=n}while(null!==e);dd=6,td=null}function Xd(e,t,n,r,a,o,l,s,d,u){var c=z.T,f=H.p;try{H.p=2,z.T=null,function(e,t,n,r,a,o,l,s){do{eu()}while(null!==Cd);if(6&Zs)throw Error(i(327));var d=e.finishedWork;if(r=e.finishedLanes,null===d)return null;if(e.finishedWork=null,e.finishedLanes=0,d===e.current)throw Error(i(177));e.callbackNode=null,e.callbackPriority=0,e.cancelPendingCommit=null;var u=d.lanes|d.childLanes;if(function(e,t,n,r,a,o){var i=e.pendingLanes;e.pendingLanes=n,e.suspendedLanes=0,e.pingedLanes=0,e.warmLanes=0,e.expiredLanes&=n,e.entangledLanes&=n,e.errorRecoveryDisabledLanes&=n,e.shellSuspendCounter=0;var l=e.entanglements,s=e.expirationTimes,d=e.hiddenUpdates;for(n=i&~n;0<n;){var u=31-be(n),c=1<<u;l[u]=0,s[u]=-1;var f=d[u];if(null!==f)for(d[u]=null,u=0;u<f.length;u++){var p=f[u];null!==p&&(p.lane&=-536870913)}n&=~c}0!==r&&Oe(e,r,0),0!==o&&0===a&&0!==e.tag&&(e.suspendedLanes|=o&~(i&~t))}(e,r,u|=kr,o,l,s),e===ed&&(td=ed=null,nd=0),!(10256&d.subtreeFlags)&&!(10256&d.flags)||_d||(_d=!0,xd=u,Td=n,re(ce,(function(){return eu(),null}))),n=!!(15990&d.flags),15990&d.subtreeFlags||n?(n=z.T,z.T=null,o=H.p,H.p=2,l=Zs,Zs|=4,function(e,t){if(e=e.containerInfo,Ku=Hc,Zn(e=Xn(e))){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(n=(n=e.ownerDocument)&&n.defaultView||window).getSelection&&n.getSelection();if(r&&0!==r.rangeCount){n=r.anchorNode;var a=r.anchorOffset,o=r.focusNode;r=r.focusOffset;try{n.nodeType,o.nodeType}catch(e){n=null;break e}var l=0,s=-1,d=-1,u=0,c=0,f=e,p=null;t:for(;;){for(var m;f!==n||0!==a&&3!==f.nodeType||(s=l+a),f!==o||0!==r&&3!==f.nodeType||(d=l+r),3===f.nodeType&&(l+=f.nodeValue.length),null!==(m=f.firstChild);)p=f,f=m;for(;;){if(f===e)break t;if(p===n&&++u===a&&(s=l),p===o&&++c===r&&(d=l),null!==(m=f.nextSibling))break;p=(f=p).parentNode}f=m}n=-1===s||-1===d?null:{start:s,end:d}}else n=null}n=n||{start:0,end:0}}else n=null;for(Ju={focusedElem:e,selectionRange:n},Hc=!1,ts=t;null!==ts;)if(e=(t=ts).child,1028&t.subtreeFlags&&null!==e)e.return=t,ts=e;else for(;null!==ts;){switch(o=(t=ts).alternate,e=t.flags,t.tag){case 0:case 11:case 15:case 5:case 26:case 27:case 6:case 4:case 17:break;case 1:if(1024&e&&null!==o){e=void 0,n=t,a=o.memoizedProps,o=o.memoizedState,r=n.stateNode;try{var h=Oi(n.type,a,(n.elementType,n.type));e=r.getSnapshotBeforeUpdate(h,o),r.__reactInternalSnapshotBeforeUpdate=e}catch(e){nu(n,n.return,e)}}break;case 3:if(1024&e)if(9===(n=(e=t.stateNode.containerInfo).nodeType))oc(e);else if(1===n)switch(e.nodeName){case"HEAD":case"HTML":case"BODY":oc(e);break;default:e.textContent=""}break;default:if(1024&e)throw Error(i(163))}if(null!==(e=t.sibling)){e.return=t.return,ts=e;break}ts=t.return}h=ns,ns=!1}(e,d),ps(d,e),er(Ju,e.containerInfo),Hc=!!Ku,Ju=Ku=null,e.current=d,rs(e,d.alternate,d),ie(),Zs=l,H.p=o,z.T=n):e.current=d,_d?(_d=!1,Cd=e,kd=r):Zd(e,u),0===(u=e.pendingLanes)&&(wd=null),function(e){if(ye&&"function"==typeof ye.onCommitFiberRoot)try{ye.onCommitFiberRoot(ge,e,void 0,!(128&~e.current.flags))}catch(e){}}(d.stateNode),mu(e),null!==t)for(a=e.onRecoverableError,d=0;d<t.length;d++)a((u=t[d]).value,{componentStack:u.stack});!!(3&kd)&&eu(),u=e.pendingLanes,4194218&r&&42&u?e===Pd?Ad++:(Ad=0,Pd=e):Ad=0,hu(0,!1)}(e,t,n,r,f,a,o,l)}finally{z.T=c,H.p=f}}function Zd(e,t){0==(e.pooledCacheLanes&=t)&&null!=(t=e.pooledCache)&&(e.pooledCache=null,Wa(t))}function eu(){if(null!==Cd){var e=Cd,t=xd;xd=0;var n=Ie(kd),r=z.T,a=H.p;try{if(H.p=32>n?32:n,z.T=null,null===Cd)var o=!1;else{n=Td,Td=null;var l=Cd,s=kd;if(Cd=null,kd=0,6&Zs)throw Error(i(331));var d=Zs;if(Zs|=4,Rs(l.current),_s(l,l.current,s,n),Zs=d,hu(0,!1),ye&&"function"==typeof ye.onPostCommitFiberRoot)try{ye.onPostCommitFiberRoot(ge,l)}catch(e){}o=!0}return o}finally{H.p=a,z.T=r,Zd(e,t)}}return!1}function tu(e,t,n){t=Mr(n,t),null!==(e=El(e,t=Bi(e.stateNode,t,2),2))&&(Ee(e,2),mu(e))}function nu(e,t,n){if(3===e.tag)tu(e,e,n);else for(;null!==t;){if(3===t.tag){tu(t,e,n);break}if(1===t.tag){var r=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===wd||!wd.has(r))){e=Mr(n,e),null!==(r=El(t,n=Wi(2),2))&&(Hi(n,r,t,e),Ee(r,2),mu(r));break}}t=t.return}}function ru(e,t,n){var r=e.pingCache;if(null===r){r=e.pingCache=new Xs;var a=new Set;r.set(t,a)}else void 0===(a=r.get(t))&&(a=new Set,r.set(t,a));a.has(n)||(ld=!0,a.add(n),e=au.bind(null,e,t,n),t.then(e,e))}function au(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),e.pingedLanes|=e.suspendedLanes&n,e.warmLanes&=~n,ed===e&&(nd&n)===n&&(4===dd||3===dd&&(62914560&nd)===nd&&300>le()-vd?!(2&Zs)&&Bd(e,0):fd|=n,md===nd&&(md=0)),mu(e)}function ou(e,t){0===t&&(t=ze()),null!==(e=Pr(e,t))&&(Ee(e,t),mu(e))}function iu(e){var t=e.memoizedState,n=0;null!==t&&(n=t.retryLane),ou(e,n)}function lu(e,t){var n=0;switch(e.tag){case 13:var r=e.stateNode,a=e.memoizedState;null!==a&&(n=a.retryLane);break;case 19:r=e.stateNode;break;case 22:r=e.stateNode._retryCache;break;default:throw Error(i(314))}null!==r&&r.delete(t),ou(e,n)}var su=null,du=null,uu=!1,cu=!1,fu=!1,pu=0;function mu(e){var t;e!==du&&null===e.next&&(null===du?su=du=e:du=du.next=e),cu=!0,uu||(uu=!0,t=gu,nc((function(){6&Zs?re(de,t):t()})))}function hu(e,t){if(!fu&&cu){fu=!0;do{for(var n=!1,r=su;null!==r;){if(!t)if(0!==e){var a=r.pendingLanes;if(0===a)var o=0;else{var i=r.suspendedLanes,l=r.pingedLanes;o=(1<<31-be(42|e)+1)-1,o=201326677&(o&=a&~(i&~l))?201326677&o|1:o?2|o:0}0!==o&&(n=!0,bu(r,o))}else o=nd,!(3&(o=xe(r,r===ed?o:0)))||Te(r,o)||(n=!0,bu(r,o));r=r.next}}while(n);fu=!1}}function gu(){cu=uu=!1;var e,t=0;0!==pu&&(((e=window.event)&&"popstate"===e.type?e!==Xu&&(Xu=e,!0):(Xu=null,!1))&&(t=pu),pu=0);for(var n=le(),r=null,a=su;null!==a;){var o=a.next,i=yu(a,n);0===i?(a.next=null,null===r?su=o:r.next=o,null===o&&(du=r)):(r=a,(0!==t||3&i)&&(cu=!0)),a=o}hu(t,!1)}function yu(e,t){for(var n=e.suspendedLanes,r=e.pingedLanes,a=e.expirationTimes,o=-62914561&e.pendingLanes;0<o;){var i=31-be(o),l=1<<i,s=a[i];-1===s?l&n&&!(l&r)||(a[i]=Ae(l,t)):s<=t&&(e.expiredLanes|=l),o&=~l}if(n=nd,n=xe(e,e===(t=ed)?n:0),r=e.callbackNode,0===n||e===t&&2===rd||null!==e.cancelPendingCommit)return null!==r&&null!==r&&ae(r),e.callbackNode=null,e.callbackPriority=0;if(!(3&n)||Te(e,n)){if((t=n&-n)===e.callbackPriority)return t;switch(null!==r&&ae(r),Ie(n)){case 2:case 8:n=ue;break;case 32:default:n=ce;break;case 268435456:n=pe}return r=vu.bind(null,e),n=re(n,r),e.callbackPriority=t,e.callbackNode=n,t}return null!==r&&null!==r&&ae(r),e.callbackPriority=2,e.callbackNode=null,2}function vu(e,t){var n=e.callbackNode;if(eu()&&e.callbackNode!==n)return null;var r=nd;return 0===(r=xe(e,e===ed?r:0))?null:(Od(e,r,t),yu(e,le()),null!=e.callbackNode&&e.callbackNode===n?vu.bind(null,e):null)}function bu(e,t){if(eu())return null;Od(e,t,!0)}function Su(){return 0===pu&&(pu=Pe()),pu}function wu(e){return null==e||"symbol"==typeof e||"boolean"==typeof e?null:"function"==typeof e?e:Pt(""+e)}function _u(e,t){var n=t.ownerDocument.createElement("input");return n.name=t.name,n.value=t.value,e.id&&n.setAttribute("form",e.id),t.parentNode.insertBefore(n,t),e=new FormData(e),n.parentNode.removeChild(n),e}for(var Cu=0;Cu<Sr.length;Cu++){var ku=Sr[Cu];wr(ku.toLowerCase(),"on"+(ku[0].toUpperCase()+ku.slice(1)))}wr(fr,"onAnimationEnd"),wr(pr,"onAnimationIteration"),wr(mr,"onAnimationStart"),wr("dblclick","onDoubleClick"),wr("focusin","onFocus"),wr("focusout","onBlur"),wr(hr,"onTransitionRun"),wr(gr,"onTransitionStart"),wr(yr,"onTransitionCancel"),wr(vr,"onTransitionEnd"),et("onMouseEnter",["mouseout","mouseover"]),et("onMouseLeave",["mouseout","mouseover"]),et("onPointerEnter",["pointerout","pointerover"]),et("onPointerLeave",["pointerout","pointerover"]),Ze("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),Ze("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),Ze("onBeforeInput",["compositionend","keypress","textInput","paste"]),Ze("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),Ze("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),Ze("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var xu="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Tu=new Set("beforetoggle cancel close invalid load scroll scrollend toggle".split(" ").concat(xu));function Au(e,t){t=!!(4&t);for(var n=0;n<e.length;n++){var r=e[n],a=r.event;r=r.listeners;e:{var o=void 0;if(t)for(var i=r.length-1;0<=i;i--){var l=r[i],s=l.instance,d=l.currentTarget;if(l=l.listener,s!==o&&a.isPropagationStopped())break e;o=l,a.currentTarget=d;try{o(a)}catch(e){Mi(e)}a.currentTarget=null,o=s}else for(i=0;i<r.length;i++){if(s=(l=r[i]).instance,d=l.currentTarget,l=l.listener,s!==o&&a.isPropagationStopped())break e;o=l,a.currentTarget=d;try{o(a)}catch(e){Mi(e)}a.currentTarget=null,o=s}}}}function Pu(e,t){var n=t[We];void 0===n&&(n=t[We]=new Set);var r=e+"__bubble";n.has(r)||(Ou(t,e,2,!1),n.add(r))}function zu(e,t,n){var r=0;t&&(r|=4),Ou(n,e,r,t)}var Ru="_reactListening"+Math.random().toString(36).slice(2);function Eu(e){if(!e[Ru]){e[Ru]=!0,Qe.forEach((function(t){"selectionchange"!==t&&(Tu.has(t)||zu(t,!1,e),zu(t,!0,e))}));var t=9===e.nodeType?e:e.ownerDocument;null===t||t[Ru]||(t[Ru]=!0,zu("selectionchange",!1,t))}}function Ou(e,t,n,r){switch($c(t)){case 2:var a=jc;break;case 8:a=Gc;break;default:a=Uc}n=a.bind(null,t,n,e),a=void 0,!Nt||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(a=!0),r?void 0!==a?e.addEventListener(t,n,{capture:!0,passive:a}):e.addEventListener(t,n,!0):void 0!==a?e.addEventListener(t,n,{passive:a}):e.addEventListener(t,n,!1)}function Mu(e,t,n,r,a){var o=r;if(!(1&t||2&t||null===r))e:for(;;){if(null===r)return;var i=r.tag;if(3===i||4===i){var l=r.stateNode.containerInfo;if(l===a||8===l.nodeType&&l.parentNode===a)break;if(4===i)for(i=r.return;null!==i;){var s=i.tag;if((3===s||4===s)&&((s=i.stateNode.containerInfo)===a||8===s.nodeType&&s.parentNode===a))return;i=i.return}for(;null!==l;){if(null===(i=Ke(l)))return;if(5===(s=i.tag)||6===s||26===s||27===s){r=o=i;continue e}l=l.parentNode}}r=r.return}Lt((function(){var r=o,a=Rt(n),i=[];e:{var l=br.get(e);if(void 0!==l){var s=Qt,d=e;switch(e){case"keypress":if(0===Gt(n))break e;case"keydown":case"keyup":s=pn;break;case"focusin":d="focus",s=rn;break;case"focusout":d="blur",s=rn;break;case"beforeblur":case"afterblur":s=rn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":s=tn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":s=nn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":s=hn;break;case fr:case pr:case mr:s=an;break;case vr:s=gn;break;case"scroll":case"scrollend":s=Zt;break;case"wheel":s=yn;break;case"copy":case"cut":case"paste":s=on;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":s=mn;break;case"toggle":case"beforetoggle":s=vn}var u=!!(4&t),c=!u&&("scroll"===e||"scrollend"===e),f=u?null!==l?l+"Capture":null:l;u=[];for(var p,m=r;null!==m;){var h=m;if(p=h.stateNode,5!==(h=h.tag)&&26!==h&&27!==h||null===p||null===f||null!=(h=Dt(m,f))&&u.push(Iu(m,h,p)),c)break;m=m.return}0<u.length&&(l=new s(l,d,null,n,a),i.push({event:l,listeners:u}))}}if(!(7&t)){if(s="mouseout"===e||"pointerout"===e,(!(l="mouseover"===e||"pointerover"===e)||n===zt||!(d=n.relatedTarget||n.fromElement)||!Ke(d)&&!d[Be])&&(s||l)&&(l=a.window===a?a:(l=a.ownerDocument)?l.defaultView||l.parentWindow:window,s?(s=r,null!==(d=(d=n.relatedTarget||n.toElement)?Ke(d):null)&&(c=D(d),u=d.tag,d!==c||5!==u&&27!==u&&6!==u)&&(d=null)):(s=null,d=r),s!==d)){if(u=tn,h="onMouseLeave",f="onMouseEnter",m="mouse","pointerout"!==e&&"pointerover"!==e||(u=mn,h="onPointerLeave",f="onPointerEnter",m="pointer"),c=null==s?l:$e(s),p=null==d?l:$e(d),(l=new u(h,m+"leave",s,n,a)).target=c,l.relatedTarget=p,h=null,Ke(a)===r&&((u=new u(f,m+"enter",d,n,a)).target=p,u.relatedTarget=c,h=u),c=h,s&&d)e:{for(f=d,m=0,p=u=s;p;p=Du(p))m++;for(p=0,h=f;h;h=Du(h))p++;for(;0<m-p;)u=Du(u),m--;for(;0<p-m;)f=Du(f),p--;for(;m--;){if(u===f||null!==f&&u===f.alternate)break e;u=Du(u),f=Du(f)}u=null}else u=null;null!==s&&Nu(i,l,s,u,!1),null!==d&&null!==c&&Nu(i,c,d,u,!0)}if("select"===(s=(l=r?$e(r):window).nodeName&&l.nodeName.toLowerCase())||"input"===s&&"file"===l.type)var g=Dn;else if(Rn(l))if(Nn)g=Kn;else{g=Un;var y=Gn}else!(s=l.nodeName)||"input"!==s.toLowerCase()||"checkbox"!==l.type&&"radio"!==l.type?r&&xt(r.elementType)&&(g=Dn):g=Vn;switch(g&&(g=g(e,r))?En(i,g,n,a):(y&&y(e,l,r),"focusout"===e&&r&&"number"===l.type&&null!=r.memoizedProps.value&&yt(l,"number",l.value)),y=r?$e(r):window,e){case"focusin":(Rn(y)||"true"===y.contentEditable)&&(nr=y,rr=r,ar=null);break;case"focusout":ar=rr=nr=null;break;case"mousedown":or=!0;break;case"contextmenu":case"mouseup":case"dragend":or=!1,ir(i,n,a);break;case"selectionchange":if(tr)break;case"keydown":case"keyup":ir(i,n,a)}var v;if(Sn)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else Pn?Tn(e,n)&&(b="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(b="onCompositionStart");b&&(Cn&&"ko"!==n.locale&&(Pn||"onCompositionStart"!==b?"onCompositionEnd"===b&&Pn&&(v=jt()):(Wt="value"in(Bt=a)?Bt.value:Bt.textContent,Pn=!0)),0<(y=Lu(r,b)).length&&(b=new ln(b,e,null,n,a),i.push({event:b,listeners:y}),(v||null!==(v=An(n)))&&(b.data=v))),(v=_n?function(e,t){switch(e){case"compositionend":return An(t);case"keypress":return 32!==t.which?null:(xn=!0,kn);case"textInput":return(e=t.data)===kn&&xn?null:e;default:return null}}(e,n):function(e,t){if(Pn)return"compositionend"===e||!Sn&&Tn(e,t)?(e=jt(),Ht=Wt=Bt=null,Pn=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Cn&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(b=Lu(r,"onBeforeInput")).length&&(y=new ln("onBeforeInput","beforeinput",null,n,a),i.push({event:y,listeners:b}),y.data=v),function(e,t,n,r,a){if("submit"===t&&n&&n.stateNode===a){var o=wu((a[Fe]||null).action),i=r.submitter;i&&null!==(t=(t=i[Fe]||null)?wu(t.formAction):i.getAttribute("formAction"))&&(o=t,i=null);var l=new Qt("action","action",null,r,a);e.push({event:l,listeners:[{instance:null,listener:function(){if(r.defaultPrevented){if(0!==pu){var e=i?_u(a,i):new FormData(a);ui(n,{pending:!0,data:e,method:a.method,action:o},null,e)}}else"function"==typeof o&&(l.preventDefault(),e=i?_u(a,i):new FormData(a),ui(n,{pending:!0,data:e,method:a.method,action:o},o,e))},currentTarget:a}]})}}(i,e,r,n,a)}Au(i,t)}))}function Iu(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Lu(e,t){for(var n=t+"Capture",r=[];null!==e;){var a=e,o=a.stateNode;5!==(a=a.tag)&&26!==a&&27!==a||null===o||(null!=(a=Dt(e,n))&&r.unshift(Iu(e,a,o)),null!=(a=Dt(e,t))&&r.push(Iu(e,a,o))),e=e.return}return r}function Du(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag&&27!==e.tag);return e||null}function Nu(e,t,n,r,a){for(var o=t._reactName,i=[];null!==n&&n!==r;){var l=n,s=l.alternate,d=l.stateNode;if(l=l.tag,null!==s&&s===r)break;5!==l&&26!==l&&27!==l||null===d||(s=d,a?null!=(d=Dt(n,o))&&i.unshift(Iu(n,d,s)):a||null!=(d=Dt(n,o))&&i.push(Iu(n,d,s))),n=n.return}0!==i.length&&e.push({event:t,listeners:i})}var Fu=/\r\n?/g,Bu=/\u0000|\uFFFD/g;function Wu(e){return("string"==typeof e?e:""+e).replace(Fu,"\n").replace(Bu,"")}function Hu(e,t){return t=Wu(t),Wu(e)===t}function ju(){}function Gu(e,t,n,r,a,o){switch(n){case"children":"string"==typeof r?"body"===t||"textarea"===t&&""===r||wt(e,r):("number"==typeof r||"bigint"==typeof r)&&"body"!==t&&wt(e,""+r);break;case"className":it(e,"class",r);break;case"tabIndex":it(e,"tabindex",r);break;case"dir":case"role":case"viewBox":case"width":case"height":it(e,n,r);break;case"style":kt(e,r,o);break;case"data":if("object"!==t){it(e,"data",r);break}case"src":case"href":if(""===r&&("a"!==t||"href"!==n)){e.removeAttribute(n);break}if(null==r||"function"==typeof r||"symbol"==typeof r||"boolean"==typeof r){e.removeAttribute(n);break}r=Pt(""+r),e.setAttribute(n,r);break;case"action":case"formAction":if("function"==typeof r){e.setAttribute(n,"javascript:throw new Error('A React form was unexpectedly submitted. If you called form.submit() manually, consider using form.requestSubmit() instead. If you\\'re trying to use event.stopPropagation() in a submit event handler, consider also calling event.preventDefault().')");break}if("function"==typeof o&&("formAction"===n?("input"!==t&&Gu(e,t,"name",a.name,a,null),Gu(e,t,"formEncType",a.formEncType,a,null),Gu(e,t,"formMethod",a.formMethod,a,null),Gu(e,t,"formTarget",a.formTarget,a,null)):(Gu(e,t,"encType",a.encType,a,null),Gu(e,t,"method",a.method,a,null),Gu(e,t,"target",a.target,a,null))),null==r||"symbol"==typeof r||"boolean"==typeof r){e.removeAttribute(n);break}r=Pt(""+r),e.setAttribute(n,r);break;case"onClick":null!=r&&(e.onclick=ju);break;case"onScroll":null!=r&&Pu("scroll",e);break;case"onScrollEnd":null!=r&&Pu("scrollend",e);break;case"dangerouslySetInnerHTML":if(null!=r){if("object"!=typeof r||!("__html"in r))throw Error(i(61));if(null!=(n=r.__html)){if(null!=a.children)throw Error(i(60));e.innerHTML=n}}break;case"multiple":e.multiple=r&&"function"!=typeof r&&"symbol"!=typeof r;break;case"muted":e.muted=r&&"function"!=typeof r&&"symbol"!=typeof r;break;case"suppressContentEditableWarning":case"suppressHydrationWarning":case"defaultValue":case"defaultChecked":case"innerHTML":case"ref":case"autoFocus":break;case"xlinkHref":if(null==r||"function"==typeof r||"boolean"==typeof r||"symbol"==typeof r){e.removeAttribute("xlink:href");break}n=Pt(""+r),e.setAttributeNS("http://www.w3.org/1999/xlink","xlink:href",n);break;case"contentEditable":case"spellCheck":case"draggable":case"value":case"autoReverse":case"externalResourcesRequired":case"focusable":case"preserveAlpha":null!=r&&"function"!=typeof r&&"symbol"!=typeof r?e.setAttribute(n,""+r):e.removeAttribute(n);break;case"inert":case"allowFullScreen":case"async":case"autoPlay":case"controls":case"default":case"defer":case"disabled":case"disablePictureInPicture":case"disableRemotePlayback":case"formNoValidate":case"hidden":case"loop":case"noModule":case"noValidate":case"open":case"playsInline":case"readOnly":case"required":case"reversed":case"scoped":case"seamless":case"itemScope":r&&"function"!=typeof r&&"symbol"!=typeof r?e.setAttribute(n,""):e.removeAttribute(n);break;case"capture":case"download":!0===r?e.setAttribute(n,""):!1!==r&&null!=r&&"function"!=typeof r&&"symbol"!=typeof r?e.setAttribute(n,r):e.removeAttribute(n);break;case"cols":case"rows":case"size":case"span":null!=r&&"function"!=typeof r&&"symbol"!=typeof r&&!isNaN(r)&&1<=r?e.setAttribute(n,r):e.removeAttribute(n);break;case"rowSpan":case"start":null==r||"function"==typeof r||"symbol"==typeof r||isNaN(r)?e.removeAttribute(n):e.setAttribute(n,r);break;case"popover":Pu("beforetoggle",e),Pu("toggle",e),ot(e,"popover",r);break;case"xlinkActuate":lt(e,"http://www.w3.org/1999/xlink","xlink:actuate",r);break;case"xlinkArcrole":lt(e,"http://www.w3.org/1999/xlink","xlink:arcrole",r);break;case"xlinkRole":lt(e,"http://www.w3.org/1999/xlink","xlink:role",r);break;case"xlinkShow":lt(e,"http://www.w3.org/1999/xlink","xlink:show",r);break;case"xlinkTitle":lt(e,"http://www.w3.org/1999/xlink","xlink:title",r);break;case"xlinkType":lt(e,"http://www.w3.org/1999/xlink","xlink:type",r);break;case"xmlBase":lt(e,"http://www.w3.org/XML/1998/namespace","xml:base",r);break;case"xmlLang":lt(e,"http://www.w3.org/XML/1998/namespace","xml:lang",r);break;case"xmlSpace":lt(e,"http://www.w3.org/XML/1998/namespace","xml:space",r);break;case"is":ot(e,"is",r);break;case"innerText":case"textContent":break;default:(!(2<n.length)||"o"!==n[0]&&"O"!==n[0]||"n"!==n[1]&&"N"!==n[1])&&ot(e,n=Tt.get(n)||n,r)}}function Uu(e,t,n,r,a,o){switch(n){case"style":kt(e,r,o);break;case"dangerouslySetInnerHTML":if(null!=r){if("object"!=typeof r||!("__html"in r))throw Error(i(61));if(null!=(n=r.__html)){if(null!=a.children)throw Error(i(60));e.innerHTML=n}}break;case"children":"string"==typeof r?wt(e,r):("number"==typeof r||"bigint"==typeof r)&&wt(e,""+r);break;case"onScroll":null!=r&&Pu("scroll",e);break;case"onScrollEnd":null!=r&&Pu("scrollend",e);break;case"onClick":null!=r&&(e.onclick=ju);break;case"suppressContentEditableWarning":case"suppressHydrationWarning":case"innerHTML":case"ref":case"innerText":case"textContent":break;default:Xe.hasOwnProperty(n)||("o"!==n[0]||"n"!==n[1]||(a=n.endsWith("Capture"),t=n.slice(2,a?n.length-7:void 0),"function"==typeof(o=null!=(o=e[Fe]||null)?o[n]:null)&&e.removeEventListener(t,o,a),"function"!=typeof r)?n in e?e[n]=r:!0===r?e.setAttribute(n,""):ot(e,n,r):("function"!=typeof o&&null!==o&&(n in e?e[n]=null:e.hasAttribute(n)&&e.removeAttribute(n)),e.addEventListener(t,r,a)))}}function Vu(e,t,n){switch(t){case"div":case"span":case"svg":case"path":case"a":case"g":case"p":case"li":break;case"img":Pu("error",e),Pu("load",e);var r,a=!1,o=!1;for(r in n)if(n.hasOwnProperty(r)){var l=n[r];if(null!=l)switch(r){case"src":a=!0;break;case"srcSet":o=!0;break;case"children":case"dangerouslySetInnerHTML":throw Error(i(137,t));default:Gu(e,t,r,l,n,null)}}return o&&Gu(e,t,"srcSet",n.srcSet,n,null),void(a&&Gu(e,t,"src",n.src,n,null));case"input":Pu("invalid",e);var s=r=l=o=null,d=null,u=null;for(a in n)if(n.hasOwnProperty(a)){var c=n[a];if(null!=c)switch(a){case"name":o=c;break;case"type":l=c;break;case"checked":d=c;break;case"defaultChecked":u=c;break;case"value":r=c;break;case"defaultValue":s=c;break;case"children":case"dangerouslySetInnerHTML":if(null!=c)throw Error(i(137,t));break;default:Gu(e,t,a,c,n,null)}}return gt(e,r,s,d,u,l,o,!1),void ut(e);case"select":for(o in Pu("invalid",e),a=l=r=null,n)if(n.hasOwnProperty(o)&&null!=(s=n[o]))switch(o){case"value":r=s;break;case"defaultValue":l=s;break;case"multiple":a=s;default:Gu(e,t,o,s,n,null)}return t=r,n=l,e.multiple=!!a,void(null!=t?vt(e,!!a,t,!1):null!=n&&vt(e,!!a,n,!0));case"textarea":for(l in Pu("invalid",e),r=o=a=null,n)if(n.hasOwnProperty(l)&&null!=(s=n[l]))switch(l){case"value":a=s;break;case"defaultValue":o=s;break;case"children":r=s;break;case"dangerouslySetInnerHTML":if(null!=s)throw Error(i(91));break;default:Gu(e,t,l,s,n,null)}return St(e,a,o,r),void ut(e);case"option":for(d in n)n.hasOwnProperty(d)&&null!=(a=n[d])&&("selected"===d?e.selected=a&&"function"!=typeof a&&"symbol"!=typeof a:Gu(e,t,d,a,n,null));return;case"dialog":Pu("cancel",e),Pu("close",e);break;case"iframe":case"object":Pu("load",e);break;case"video":case"audio":for(a=0;a<xu.length;a++)Pu(xu[a],e);break;case"image":Pu("error",e),Pu("load",e);break;case"details":Pu("toggle",e);break;case"embed":case"source":case"link":Pu("error",e),Pu("load",e);case"area":case"base":case"br":case"col":case"hr":case"keygen":case"meta":case"param":case"track":case"wbr":case"menuitem":for(u in n)if(n.hasOwnProperty(u)&&null!=(a=n[u]))switch(u){case"children":case"dangerouslySetInnerHTML":throw Error(i(137,t));default:Gu(e,t,u,a,n,null)}return;default:if(xt(t)){for(c in n)n.hasOwnProperty(c)&&void 0!==(a=n[c])&&Uu(e,t,c,a,n,void 0);return}}for(s in n)n.hasOwnProperty(s)&&null!=(a=n[s])&&Gu(e,t,s,a,n,null)}var Ku=null,Ju=null;function $u(e){return 9===e.nodeType?e:e.ownerDocument}function Yu(e){switch(e){case"http://www.w3.org/2000/svg":return 1;case"http://www.w3.org/1998/Math/MathML":return 2;default:return 0}}function qu(e,t){if(0===e)switch(t){case"svg":return 1;case"math":return 2;default:return 0}return 1===e&&"foreignObject"===t?0:e}function Qu(e,t){return"textarea"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"bigint"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var Xu=null,Zu="function"==typeof setTimeout?setTimeout:void 0,ec="function"==typeof clearTimeout?clearTimeout:void 0,tc="function"==typeof Promise?Promise:void 0,nc="function"==typeof queueMicrotask?queueMicrotask:void 0!==tc?function(e){return tc.resolve(null).then(e).catch(rc)}:Zu;function rc(e){setTimeout((function(){throw e}))}function ac(e,t){var n=t,r=0;do{var a=n.nextSibling;if(e.removeChild(n),a&&8===a.nodeType)if("/$"===(n=a.data)){if(0===r)return e.removeChild(a),void pf(t);r--}else"$"!==n&&"$?"!==n&&"$!"!==n||r++;n=a}while(n);pf(t)}function oc(e){var t=e.firstChild;for(t&&10===t.nodeType&&(t=t.nextSibling);t;){var n=t;switch(t=t.nextSibling,n.nodeName){case"HTML":case"HEAD":case"BODY":oc(n),Ve(n);continue;case"SCRIPT":case"STYLE":continue;case"LINK":if("stylesheet"===n.rel.toLowerCase())continue}e.removeChild(n)}}function ic(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break;if(8===t){if("$"===(t=e.data)||"$!"===t||"$?"===t||"F!"===t||"F"===t)break;if("/$"===t)return null}}return e}function lc(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}function sc(e,t,n){switch(t=$u(n),e){case"html":if(!(e=t.documentElement))throw Error(i(452));return e;case"head":if(!(e=t.head))throw Error(i(453));return e;case"body":if(!(e=t.body))throw Error(i(454));return e;default:throw Error(i(451))}}var dc=new Map,uc=new Set;function cc(e){return"function"==typeof e.getRootNode?e.getRootNode():e.ownerDocument}var fc=H.d;H.d={f:function(){var e=fc.f(),t=Nd();return e||t},r:function(e){var t=Je(e);null!==t&&5===t.tag&&"form"===t.type?fi(t):fc.r(e)},D:function(e){fc.D(e),mc("dns-prefetch",e,null)},C:function(e,t){fc.C(e,t),mc("preconnect",e,t)},L:function(e,t,n){fc.L(e,t,n);var r=pc;if(r&&e&&t){var a='link[rel="preload"][as="'+mt(t)+'"]';"image"===t&&n&&n.imageSrcSet?(a+='[imagesrcset="'+mt(n.imageSrcSet)+'"]',"string"==typeof n.imageSizes&&(a+='[imagesizes="'+mt(n.imageSizes)+'"]')):a+='[href="'+mt(e)+'"]';var o=a;switch(t){case"style":o=gc(e);break;case"script":o=bc(e)}dc.has(o)||(e=R({rel:"preload",href:"image"===t&&n&&n.imageSrcSet?void 0:e,as:t},n),dc.set(o,e),null!==r.querySelector(a)||"style"===t&&r.querySelector(yc(o))||"script"===t&&r.querySelector(Sc(o))||(Vu(t=r.createElement("link"),"link",e),qe(t),r.head.appendChild(t)))}},m:function(e,t){fc.m(e,t);var n=pc;if(n&&e){var r=t&&"string"==typeof t.as?t.as:"script",a='link[rel="modulepreload"][as="'+mt(r)+'"][href="'+mt(e)+'"]',o=a;switch(r){case"audioworklet":case"paintworklet":case"serviceworker":case"sharedworker":case"worker":case"script":o=bc(e)}if(!dc.has(o)&&(e=R({rel:"modulepreload",href:e},t),dc.set(o,e),null===n.querySelector(a))){switch(r){case"audioworklet":case"paintworklet":case"serviceworker":case"sharedworker":case"worker":case"script":if(n.querySelector(Sc(o)))return}Vu(r=n.createElement("link"),"link",e),qe(r),n.head.appendChild(r)}}},X:function(e,t){fc.X(e,t);var n=pc;if(n&&e){var r=Ye(n).hoistableScripts,a=bc(e),o=r.get(a);o||((o=n.querySelector(Sc(a)))||(e=R({src:e,async:!0},t),(t=dc.get(a))&&kc(e,t),qe(o=n.createElement("script")),Vu(o,"link",e),n.head.appendChild(o)),o={type:"script",instance:o,count:1,state:null},r.set(a,o))}},S:function(e,t,n){fc.S(e,t,n);var r=pc;if(r&&e){var a=Ye(r).hoistableStyles,o=gc(e);t=t||"default";var i=a.get(o);if(!i){var l={loading:0,preload:null};if(i=r.querySelector(yc(o)))l.loading=5;else{e=R({rel:"stylesheet",href:e,"data-precedence":t},n),(n=dc.get(o))&&Cc(e,n);var s=i=r.createElement("link");qe(s),Vu(s,"link",e),s._p=new Promise((function(e,t){s.onload=e,s.onerror=t})),s.addEventListener("load",(function(){l.loading|=1})),s.addEventListener("error",(function(){l.loading|=2})),l.loading|=4,_c(i,t,r)}i={type:"stylesheet",instance:i,count:1,state:l},a.set(o,i)}}},M:function(e,t){fc.M(e,t);var n=pc;if(n&&e){var r=Ye(n).hoistableScripts,a=bc(e),o=r.get(a);o||((o=n.querySelector(Sc(a)))||(e=R({src:e,async:!0,type:"module"},t),(t=dc.get(a))&&kc(e,t),qe(o=n.createElement("script")),Vu(o,"link",e),n.head.appendChild(o)),o={type:"script",instance:o,count:1,state:null},r.set(a,o))}}};var pc="undefined"==typeof document?null:document;function mc(e,t,n){var r=pc;if(r&&"string"==typeof t&&t){var a=mt(t);a='link[rel="'+e+'"][href="'+a+'"]',"string"==typeof n&&(a+='[crossorigin="'+n+'"]'),uc.has(a)||(uc.add(a),e={rel:e,crossOrigin:n,href:t},null===r.querySelector(a)&&(Vu(t=r.createElement("link"),"link",e),qe(t),r.head.appendChild(t)))}}function hc(e,t,n,r){var a,o,l,s,d=(d=q.current)?cc(d):null;if(!d)throw Error(i(446));switch(e){case"meta":case"title":return null;case"style":return"string"==typeof n.precedence&&"string"==typeof n.href?(t=gc(n.href),(r=(n=Ye(d).hoistableStyles).get(t))||(r={type:"style",instance:null,count:0,state:null},n.set(t,r)),r):{type:"void",instance:null,count:0,state:null};case"link":if("stylesheet"===n.rel&&"string"==typeof n.href&&"string"==typeof n.precedence){e=gc(n.href);var u=Ye(d).hoistableStyles,c=u.get(e);if(c||(d=d.ownerDocument||d,c={type:"stylesheet",instance:null,count:0,state:{loading:0,preload:null}},u.set(e,c),(u=d.querySelector(yc(e)))&&!u._p&&(c.instance=u,c.state.loading=5),dc.has(e)||(n={rel:"preload",as:"style",href:n.href,crossOrigin:n.crossOrigin,integrity:n.integrity,media:n.media,hrefLang:n.hrefLang,referrerPolicy:n.referrerPolicy},dc.set(e,n),u||(a=d,o=e,l=n,s=c.state,a.querySelector('link[rel="preload"][as="style"]['+o+"]")?s.loading=1:(o=a.createElement("link"),s.preload=o,o.addEventListener("load",(function(){return s.loading|=1})),o.addEventListener("error",(function(){return s.loading|=2})),Vu(o,"link",l),qe(o),a.head.appendChild(o))))),t&&null===r)throw Error(i(528,""));return c}if(t&&null!==r)throw Error(i(529,""));return null;case"script":return t=n.async,"string"==typeof(n=n.src)&&t&&"function"!=typeof t&&"symbol"!=typeof t?(t=bc(n),(r=(n=Ye(d).hoistableScripts).get(t))||(r={type:"script",instance:null,count:0,state:null},n.set(t,r)),r):{type:"void",instance:null,count:0,state:null};default:throw Error(i(444,e))}}function gc(e){return'href="'+mt(e)+'"'}function yc(e){return'link[rel="stylesheet"]['+e+"]"}function vc(e){return R({},e,{"data-precedence":e.precedence,precedence:null})}function bc(e){return'[src="'+mt(e)+'"]'}function Sc(e){return"script[async]"+e}function wc(e,t,n){if(t.count++,null===t.instance)switch(t.type){case"style":var r=e.querySelector('style[data-href~="'+mt(n.href)+'"]');if(r)return t.instance=r,qe(r),r;var a=R({},n,{"data-href":n.href,"data-precedence":n.precedence,href:null,precedence:null});return qe(r=(e.ownerDocument||e).createElement("style")),Vu(r,"style",a),_c(r,n.precedence,e),t.instance=r;case"stylesheet":a=gc(n.href);var o=e.querySelector(yc(a));if(o)return t.state.loading|=4,t.instance=o,qe(o),o;r=vc(n),(a=dc.get(a))&&Cc(r,a),qe(o=(e.ownerDocument||e).createElement("link"));var l=o;return l._p=new Promise((function(e,t){l.onload=e,l.onerror=t})),Vu(o,"link",r),t.state.loading|=4,_c(o,n.precedence,e),t.instance=o;case"script":return o=bc(n.src),(a=e.querySelector(Sc(o)))?(t.instance=a,qe(a),a):(r=n,(a=dc.get(o))&&kc(r=R({},n),a),qe(a=(e=e.ownerDocument||e).createElement("script")),Vu(a,"link",r),e.head.appendChild(a),t.instance=a);case"void":return null;default:throw Error(i(443,t.type))}else"stylesheet"===t.type&&!(4&t.state.loading)&&(r=t.instance,t.state.loading|=4,_c(r,n.precedence,e));return t.instance}function _c(e,t,n){for(var r=n.querySelectorAll('link[rel="stylesheet"][data-precedence],style[data-precedence]'),a=r.length?r[r.length-1]:null,o=a,i=0;i<r.length;i++){var l=r[i];if(l.dataset.precedence===t)o=l;else if(o!==a)break}o?o.parentNode.insertBefore(e,o.nextSibling):(t=9===n.nodeType?n.head:n).insertBefore(e,t.firstChild)}function Cc(e,t){null==e.crossOrigin&&(e.crossOrigin=t.crossOrigin),null==e.referrerPolicy&&(e.referrerPolicy=t.referrerPolicy),null==e.title&&(e.title=t.title)}function kc(e,t){null==e.crossOrigin&&(e.crossOrigin=t.crossOrigin),null==e.referrerPolicy&&(e.referrerPolicy=t.referrerPolicy),null==e.integrity&&(e.integrity=t.integrity)}var xc=null;function Tc(e,t,n){if(null===xc){var r=new Map,a=xc=new Map;a.set(n,r)}else(r=(a=xc).get(n))||(r=new Map,a.set(n,r));if(r.has(e))return r;for(r.set(e,null),n=n.getElementsByTagName(e),a=0;a<n.length;a++){var o=n[a];if(!(o[Ue]||o[Ne]||"link"===e&&"stylesheet"===o.getAttribute("rel"))&&"http://www.w3.org/2000/svg"!==o.namespaceURI){var i=o.getAttribute(t)||"";i=e+i;var l=r.get(i);l?l.push(o):r.set(i,[o])}}return r}function Ac(e,t,n){(e=e.ownerDocument||e).head.insertBefore(n,"title"===t?e.querySelector("head > title"):null)}function Pc(e){return!!("stylesheet"!==e.type||3&e.state.loading)}var zc=null;function Rc(){}function Ec(){if(this.count--,0===this.count)if(this.stylesheets)Mc(this,this.stylesheets);else if(this.unsuspend){var e=this.unsuspend;this.unsuspend=null,e()}}var Oc=null;function Mc(e,t){e.stylesheets=null,null!==e.unsuspend&&(e.count++,Oc=new Map,t.forEach(Ic,e),Oc=null,Ec.call(e))}function Ic(e,t){if(!(4&t.state.loading)){var n=Oc.get(e);if(n)var r=n.get(null);else{n=new Map,Oc.set(e,n);for(var a=e.querySelectorAll("link[data-precedence],style[data-precedence]"),o=0;o<a.length;o++){var i=a[o];"LINK"!==i.nodeName&&"not all"===i.getAttribute("media")||(n.set(i.dataset.precedence,i),r=i)}r&&n.set(null,r)}i=(a=t.instance).getAttribute("data-precedence"),(o=n.get(i)||r)===r&&n.set(null,a),n.set(i,a),this.count++,r=Ec.bind(this),a.addEventListener("load",r),a.addEventListener("error",r),o?o.parentNode.insertBefore(a,o.nextSibling):(e=9===e.nodeType?e.head:e).insertBefore(a,e.firstChild),t.state.loading|=4}}var Lc={$$typeof:h,Provider:null,Consumer:null,_currentValue:j,_currentValue2:j,_threadCount:0};function Dc(e,t,n,r,a,o,i,l){this.tag=1,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.next=this.pendingContext=this.context=this.cancelPendingCommit=null,this.callbackPriority=0,this.expirationTimes=Re(-1),this.entangledLanes=this.shellSuspendCounter=this.errorRecoveryDisabledLanes=this.finishedLanes=this.expiredLanes=this.warmLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=Re(0),this.hiddenUpdates=Re(null),this.identifierPrefix=r,this.onUncaughtError=a,this.onCaughtError=o,this.onRecoverableError=i,this.pooledCache=null,this.pooledCacheLanes=0,this.formState=l,this.incompleteTransitions=new Map}function Nc(e,t,n,r,a,o){a=function(e){return e?e=Er:Er}(a),null===r.context?r.context=a:r.pendingContext=a,(r=Rl(t)).payload={element:n},null!==(o=void 0===o?null:o)&&(r.callback=o),null!==(n=El(e,r,t))&&(Ed(n,0,t),Ol(n,e,t))}function Fc(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Bc(e,t){Fc(e,t),(e=e.alternate)&&Fc(e,t)}function Wc(e){if(13===e.tag){var t=Pr(e,67108864);null!==t&&Ed(t,0,67108864),Bc(e,67108864)}}var Hc=!0;function jc(e,t,n,r){var a=z.T;z.T=null;var o=H.p;try{H.p=2,Uc(e,t,n,r)}finally{H.p=o,z.T=a}}function Gc(e,t,n,r){var a=z.T;z.T=null;var o=H.p;try{H.p=8,Uc(e,t,n,r)}finally{H.p=o,z.T=a}}function Uc(e,t,n,r){if(Hc){var a=Vc(r);if(null===a)Mu(e,t,r,Kc,n),rf(e,r);else if(function(e,t,n,r,a){switch(t){case"focusin":return qc=af(qc,e,t,n,r,a),!0;case"dragenter":return Qc=af(Qc,e,t,n,r,a),!0;case"mouseover":return Xc=af(Xc,e,t,n,r,a),!0;case"pointerover":var o=a.pointerId;return Zc.set(o,af(Zc.get(o)||null,e,t,n,r,a)),!0;case"gotpointercapture":return o=a.pointerId,ef.set(o,af(ef.get(o)||null,e,t,n,r,a)),!0}return!1}(a,e,t,n,r))r.stopPropagation();else if(rf(e,r),4&t&&-1<nf.indexOf(e)){for(;null!==a;){var o=Je(a);if(null!==o)switch(o.tag){case 3:if((o=o.stateNode).current.memoizedState.isDehydrated){var i=ke(o.pendingLanes);if(0!==i){var l=o;for(l.pendingLanes|=2,l.entangledLanes|=2;i;){var s=1<<31-be(i);l.entanglements[1]|=s,i&=~s}mu(o),!(6&Zs)&&(bd=le()+500,hu(0,!1))}}break;case 13:null!==(l=Pr(o,2))&&Ed(l,0,2),Nd(),Bc(o,2)}if(null===(o=Vc(r))&&Mu(e,t,r,Kc,n),o===a)break;a=o}null!==a&&r.stopPropagation()}else Mu(e,t,r,null,n)}}function Vc(e){return Jc(e=Rt(e))}var Kc=null;function Jc(e){if(Kc=null,null!==(e=Ke(e))){var t=D(e);if(null===t)e=null;else{var n=t.tag;if(13===n){if(null!==(e=N(t)))return e;e=null}else if(3===n){if(t.stateNode.current.memoizedState.isDehydrated)return 3===t.tag?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null)}}return Kc=e,null}function $c(e){switch(e){case"beforetoggle":case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"toggle":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 2;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 8;case"message":switch(se()){case de:return 2;case ue:return 8;case ce:case fe:return 32;case pe:return 268435456;default:return 32}default:return 32}}var Yc=!1,qc=null,Qc=null,Xc=null,Zc=new Map,ef=new Map,tf=[],nf="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset".split(" ");function rf(e,t){switch(e){case"focusin":case"focusout":qc=null;break;case"dragenter":case"dragleave":Qc=null;break;case"mouseover":case"mouseout":Xc=null;break;case"pointerover":case"pointerout":Zc.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":ef.delete(t.pointerId)}}function af(e,t,n,r,a,o){return null===e||e.nativeEvent!==o?(e={blockedOn:t,domEventName:n,eventSystemFlags:r,nativeEvent:o,targetContainers:[a]},null!==t&&null!==(t=Je(t))&&Wc(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==a&&-1===t.indexOf(a)&&t.push(a),e)}function of(e){var t=Ke(e.target);if(null!==t){var n=D(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=N(n)))return e.blockedOn=t,void function(e){var t=H.p;try{return H.p=e,function(){if(13===n.tag){var e=zd(),t=Pr(n,e);null!==t&&Ed(t,0,e),Bc(n,e)}}()}finally{H.p=t}}(e.priority)}else if(3===t&&n.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function lf(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Vc(e.nativeEvent);if(null!==n)return null!==(t=Je(n))&&Wc(t),e.blockedOn=n,!1;var r=new(n=e.nativeEvent).constructor(n.type,n);zt=r,n.target.dispatchEvent(r),zt=null,t.shift()}return!0}function sf(e,t,n){lf(e)&&n.delete(t)}function df(){Yc=!1,null!==qc&&lf(qc)&&(qc=null),null!==Qc&&lf(Qc)&&(Qc=null),null!==Xc&&lf(Xc)&&(Xc=null),Zc.forEach(sf),ef.forEach(sf)}function uf(e,t){e.blockedOn===t&&(e.blockedOn=null,Yc||(Yc=!0,r.unstable_scheduleCallback(r.unstable_NormalPriority,df)))}var cf=null;function ff(e){cf!==e&&(cf=e,r.unstable_scheduleCallback(r.unstable_NormalPriority,(function(){cf===e&&(cf=null);for(var t=0;t<e.length;t+=3){var n=e[t],r=e[t+1],a=e[t+2];if("function"!=typeof r){if(null===Jc(r||n))continue;break}var o=Je(n);null!==o&&(e.splice(t,3),t-=3,ui(o,{pending:!0,data:a,method:n.method,action:r},r,a))}})))}function pf(e){function t(t){return uf(t,e)}null!==qc&&uf(qc,e),null!==Qc&&uf(Qc,e),null!==Xc&&uf(Xc,e),Zc.forEach(t),ef.forEach(t);for(var n=0;n<tf.length;n++){var r=tf[n];r.blockedOn===e&&(r.blockedOn=null)}for(;0<tf.length&&null===(n=tf[0]).blockedOn;)of(n),null===n.blockedOn&&tf.shift();if(null!=(n=(e.ownerDocument||e).$$reactFormReplay))for(r=0;r<n.length;r+=3){var a=n[r],o=n[r+1],i=a[Fe]||null;if("function"==typeof o)i||ff(n);else if(i){var l=null;if(o&&o.hasAttribute("formAction")){if(a=o,i=o[Fe]||null)l=i.formAction;else if(null!==Jc(a))continue}else l=i.action;"function"==typeof l?n[r+1]=l:(n.splice(r,3),r-=3),ff(n)}}}function mf(e){this._internalRoot=e}function hf(e){this._internalRoot=e}hf.prototype.render=mf.prototype.render=function(e){var t=this._internalRoot;if(null===t)throw Error(i(409));Nc(t.current,zd(),e,t,null,null)},hf.prototype.unmount=mf.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var t=e.containerInfo;0===e.tag&&eu(),Nc(e.current,2,null,e,null,null),Nd(),t[Be]=null}},hf.prototype.unstable_scheduleHydration=function(e){if(e){var t=Le();e={blockedOn:null,target:e,priority:t};for(var n=0;n<tf.length&&0!==t&&t<tf[n].priority;n++);tf.splice(n,0,e),0===n&&of(e)}};var gf=a.version;if("19.0.0"!==gf)throw Error(i(527,gf,"19.0.0"));H.findDOMNode=function(e){var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(i(188));throw e=Object.keys(e).join(","),Error(i(268,e))}return e=function(e){var t=e.alternate;if(!t){if(null===(t=D(e)))throw Error(i(188));return t!==e?null:e}for(var n=e,r=t;;){var a=n.return;if(null===a)break;var o=a.alternate;if(null===o){if(null!==(r=a.return)){n=r;continue}break}if(a.child===o.child){for(o=a.child;o;){if(o===n)return F(a),e;if(o===r)return F(a),t;o=o.sibling}throw Error(i(188))}if(n.return!==r.return)n=a,r=o;else{for(var l=!1,s=a.child;s;){if(s===n){l=!0,n=a,r=o;break}if(s===r){l=!0,r=a,n=o;break}s=s.sibling}if(!l){for(s=o.child;s;){if(s===n){l=!0,n=o,r=a;break}if(s===r){l=!0,r=o,n=a;break}s=s.sibling}if(!l)throw Error(i(189))}}if(n.alternate!==r)throw Error(i(190))}if(3!==n.tag)throw Error(i(188));return n.stateNode.current===n?e:t}(t),null===(e=null!==e?B(e):null)?null:e.stateNode};var yf={bundleType:0,version:"19.0.0",rendererPackageName:"react-dom",currentDispatcherRef:z,findFiberByHostInstance:Ke,reconcilerVersion:"19.0.0"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var vf=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!vf.isDisabled&&vf.supportsFiber)try{ge=vf.inject(yf),ye=vf}catch(e){}}t.createRoot=function(e,t){if(!(n=e)||1!==n.nodeType&&9!==n.nodeType&&11!==n.nodeType)throw Error(i(299));var n,r=!1,a="",o=Ii,l=Li,s=Di;return null!=t&&(!0===t.unstable_strictMode&&(r=!0),void 0!==t.identifierPrefix&&(a=t.identifierPrefix),void 0!==t.onUncaughtError&&(o=t.onUncaughtError),void 0!==t.onCaughtError&&(l=t.onCaughtError),void 0!==t.onRecoverableError&&(s=t.onRecoverableError),void 0!==t.unstable_transitionCallbacks&&t.unstable_transitionCallbacks),t=function(e,t,n,r,a,o,i,l,s,d,u,c){return e=new Dc(e,t,n,i,l,s,d,c),t=1,!0===o&&(t|=24),o=Is(3,null,null,t),e.current=o,o.stateNode=e,(t=Ba()).refCount++,e.pooledCache=t,t.refCount++,o.memoizedState={element:r,isDehydrated:n,cache:t},Pl(o),e}(e,1,!1,null,0,r,a,o,l,s,0,null),e[Be]=t.current,Eu(8===e.nodeType?e.parentNode:e),new mf(t)}},221:(e,t,n)=>{var r=n(540);function a(e){var t="https://react.dev/errors/"+e;if(1<arguments.length){t+="?args[]="+encodeURIComponent(arguments[1]);for(var n=2;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n])}return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}function o(){}var i={d:{f:o,r:function(){throw Error(a(522))},D:o,C:o,L:o,m:o,X:o,S:o,M:o},p:0,findDOMNode:null},l=Symbol.for("react.portal"),s=r.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE;function d(e,t){return"font"===e?"":"string"==typeof t?"use-credentials"===t?t:"":void 0}t.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE=i,t.createPortal=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!t||1!==t.nodeType&&9!==t.nodeType&&11!==t.nodeType)throw Error(a(299));return function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:l,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)},t.flushSync=function(e){var t=s.T,n=i.p;try{if(s.T=null,i.p=2,e)return e()}finally{s.T=t,i.p=n,i.d.f()}},t.preconnect=function(e,t){"string"==typeof e&&(t=t?"string"==typeof(t=t.crossOrigin)?"use-credentials"===t?t:"":void 0:null,i.d.C(e,t))},t.prefetchDNS=function(e){"string"==typeof e&&i.d.D(e)},t.preinit=function(e,t){if("string"==typeof e&&t&&"string"==typeof t.as){var n=t.as,r=d(n,t.crossOrigin),a="string"==typeof t.integrity?t.integrity:void 0,o="string"==typeof t.fetchPriority?t.fetchPriority:void 0;"style"===n?i.d.S(e,"string"==typeof t.precedence?t.precedence:void 0,{crossOrigin:r,integrity:a,fetchPriority:o}):"script"===n&&i.d.X(e,{crossOrigin:r,integrity:a,fetchPriority:o,nonce:"string"==typeof t.nonce?t.nonce:void 0})}},t.preinitModule=function(e,t){if("string"==typeof e)if("object"==typeof t&&null!==t){if(null==t.as||"script"===t.as){var n=d(t.as,t.crossOrigin);i.d.M(e,{crossOrigin:n,integrity:"string"==typeof t.integrity?t.integrity:void 0,nonce:"string"==typeof t.nonce?t.nonce:void 0})}}else null==t&&i.d.M(e)},t.preload=function(e,t){if("string"==typeof e&&"object"==typeof t&&null!==t&&"string"==typeof t.as){var n=t.as,r=d(n,t.crossOrigin);i.d.L(e,n,{crossOrigin:r,integrity:"string"==typeof t.integrity?t.integrity:void 0,nonce:"string"==typeof t.nonce?t.nonce:void 0,type:"string"==typeof t.type?t.type:void 0,fetchPriority:"string"==typeof t.fetchPriority?t.fetchPriority:void 0,referrerPolicy:"string"==typeof t.referrerPolicy?t.referrerPolicy:void 0,imageSrcSet:"string"==typeof t.imageSrcSet?t.imageSrcSet:void 0,imageSizes:"string"==typeof t.imageSizes?t.imageSizes:void 0,media:"string"==typeof t.media?t.media:void 0})}},t.preloadModule=function(e,t){if("string"==typeof e)if(t){var n=d(t.as,t.crossOrigin);i.d.m(e,{as:"string"==typeof t.as&&"script"!==t.as?t.as:void 0,crossOrigin:n,integrity:"string"==typeof t.integrity?t.integrity:void 0})}else i.d.m(e)},t.requestFormReset=function(e){i.d.r(e)},t.unstable_batchedUpdates=function(e,t){return e(t)},t.useFormState=function(e,t,n){return s.H.useFormState(e,t,n)},t.useFormStatus=function(){return s.H.useHostTransitionStatus()},t.version="19.0.0"},338:(e,t,n)=>{!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(247)},961:(e,t,n)=>{!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(221)},869:(e,t)=>{var n=Symbol.for("react.transitional.element"),r=Symbol.for("react.portal"),a=Symbol.for("react.fragment"),o=Symbol.for("react.strict_mode"),i=Symbol.for("react.profiler"),l=Symbol.for("react.consumer"),s=Symbol.for("react.context"),d=Symbol.for("react.forward_ref"),u=Symbol.for("react.suspense"),c=Symbol.for("react.memo"),f=Symbol.for("react.lazy"),p=Symbol.iterator,m={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},h=Object.assign,g={};function y(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||m}function v(){}function b(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||m}y.prototype.isReactComponent={},y.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},y.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},v.prototype=y.prototype;var S=b.prototype=new v;S.constructor=b,h(S,y.prototype),S.isPureReactComponent=!0;var w=Array.isArray,_={H:null,A:null,T:null,S:null},C=Object.prototype.hasOwnProperty;function k(e,t,r,a,o,i){return r=i.ref,{$$typeof:n,type:e,key:t,ref:void 0!==r?r:null,props:i}}function x(e){return"object"==typeof e&&null!==e&&e.$$typeof===n}var T=/\/+/g;function A(e,t){return"object"==typeof e&&null!==e&&null!=e.key?(n=""+e.key,r={"=":"=0",":":"=2"},"$"+n.replace(/[=:]/g,(function(e){return r[e]}))):t.toString(36);var n,r}function P(){}function z(e,t,a,o,i){var l=typeof e;"undefined"!==l&&"boolean"!==l||(e=null);var s,d,u=!1;if(null===e)u=!0;else switch(l){case"bigint":case"string":case"number":u=!0;break;case"object":switch(e.$$typeof){case n:case r:u=!0;break;case f:return z((u=e._init)(e._payload),t,a,o,i)}}if(u)return i=i(e),u=""===o?"."+A(e,0):o,w(i)?(a="",null!=u&&(a=u.replace(T,"$&/")+"/"),z(i,t,a,"",(function(e){return e}))):null!=i&&(x(i)&&(s=i,d=a+(null==i.key||e&&e.key===i.key?"":(""+i.key).replace(T,"$&/")+"/")+u,i=k(s.type,d,void 0,0,0,s.props)),t.push(i)),1;u=0;var c,m=""===o?".":o+":";if(w(e))for(var h=0;h<e.length;h++)u+=z(o=e[h],t,a,l=m+A(o,h),i);else if("function"==typeof(h=null===(c=e)||"object"!=typeof c?null:"function"==typeof(c=p&&c[p]||c["@@iterator"])?c:null))for(e=h.call(e),h=0;!(o=e.next()).done;)u+=z(o=o.value,t,a,l=m+A(o,h++),i);else if("object"===l){if("function"==typeof e.then)return z(function(e){switch(e.status){case"fulfilled":return e.value;case"rejected":throw e.reason;default:switch("string"==typeof e.status?e.then(P,P):(e.status="pending",e.then((function(t){"pending"===e.status&&(e.status="fulfilled",e.value=t)}),(function(t){"pending"===e.status&&(e.status="rejected",e.reason=t)}))),e.status){case"fulfilled":return e.value;case"rejected":throw e.reason}}throw e}(e),t,a,o,i);throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.")}return u}function R(e,t,n){if(null==e)return e;var r=[],a=0;return z(e,r,"","",(function(e){return t.call(n,e,a++)})),r}function E(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var O="function"==typeof reportError?reportError:function(e){if("object"==typeof window&&"function"==typeof window.ErrorEvent){var t=new window.ErrorEvent("error",{bubbles:!0,cancelable:!0,message:"object"==typeof e&&null!==e&&"string"==typeof e.message?String(e.message):String(e),error:e});if(!window.dispatchEvent(t))return}else if("object"==typeof process&&"function"==typeof process.emit)return void process.emit("uncaughtException",e);console.error(e)};function M(){}t.Children={map:R,forEach:function(e,t,n){R(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return R(e,(function(){t++})),t},toArray:function(e){return R(e,(function(e){return e}))||[]},only:function(e){if(!x(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=y,t.Fragment=a,t.Profiler=i,t.PureComponent=b,t.StrictMode=o,t.Suspense=u,t.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE=_,t.act=function(){throw Error("act(...) is not supported in production builds of React.")},t.cache=function(e){return function(){return e.apply(null,arguments)}},t.cloneElement=function(e,t,n){if(null==e)throw Error("The argument must be a React element, but you passed "+e+".");var r=h({},e.props),a=e.key;if(null!=t)for(o in t.ref,void 0!==t.key&&(a=""+t.key),t)!C.call(t,o)||"key"===o||"__self"===o||"__source"===o||"ref"===o&&void 0===t.ref||(r[o]=t[o]);var o=arguments.length-2;if(1===o)r.children=n;else if(1<o){for(var i=Array(o),l=0;l<o;l++)i[l]=arguments[l+2];r.children=i}return k(e.type,a,void 0,0,0,r)},t.createContext=function(e){return(e={$$typeof:s,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider=e,e.Consumer={$$typeof:l,_context:e},e},t.createElement=function(e,t,n){var r,a={},o=null;if(null!=t)for(r in void 0!==t.key&&(o=""+t.key),t)C.call(t,r)&&"key"!==r&&"__self"!==r&&"__source"!==r&&(a[r]=t[r]);var i=arguments.length-2;if(1===i)a.children=n;else if(1<i){for(var l=Array(i),s=0;s<i;s++)l[s]=arguments[s+2];a.children=l}if(e&&e.defaultProps)for(r in i=e.defaultProps)void 0===a[r]&&(a[r]=i[r]);return k(e,o,void 0,0,0,a)},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:d,render:e}},t.isValidElement=x,t.lazy=function(e){return{$$typeof:f,_payload:{_status:-1,_result:e},_init:E}},t.memo=function(e,t){return{$$typeof:c,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=_.T,n={};_.T=n;try{var r=e(),a=_.S;null!==a&&a(n,r),"object"==typeof r&&null!==r&&"function"==typeof r.then&&r.then(M,O)}catch(e){O(e)}finally{_.T=t}},t.unstable_useCacheRefresh=function(){return _.H.useCacheRefresh()},t.use=function(e){return _.H.use(e)},t.useActionState=function(e,t,n){return _.H.useActionState(e,t,n)},t.useCallback=function(e,t){return _.H.useCallback(e,t)},t.useContext=function(e){return _.H.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e,t){return _.H.useDeferredValue(e,t)},t.useEffect=function(e,t){return _.H.useEffect(e,t)},t.useId=function(){return _.H.useId()},t.useImperativeHandle=function(e,t,n){return _.H.useImperativeHandle(e,t,n)},t.useInsertionEffect=function(e,t){return _.H.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return _.H.useLayoutEffect(e,t)},t.useMemo=function(e,t){return _.H.useMemo(e,t)},t.useOptimistic=function(e,t){return _.H.useOptimistic(e,t)},t.useReducer=function(e,t,n){return _.H.useReducer(e,t,n)},t.useRef=function(e){return _.H.useRef(e)},t.useState=function(e){return _.H.useState(e)},t.useSyncExternalStore=function(e,t,n){return _.H.useSyncExternalStore(e,t,n)},t.useTransition=function(){return _.H.useTransition()},t.version="19.0.0"},540:(e,t,n)=>{e.exports=n(869)},477:(e,t)=>{function n(e,t){var n=e.length;e.push(t);e:for(;0<n;){var r=n-1>>>1,a=e[r];if(!(0<o(a,t)))break e;e[r]=t,e[n]=a,n=r}}function r(e){return 0===e.length?null:e[0]}function a(e){if(0===e.length)return null;var t=e[0],n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,a=e.length,i=a>>>1;r<i;){var l=2*(r+1)-1,s=e[l],d=l+1,u=e[d];if(0>o(s,n))d<a&&0>o(u,s)?(e[r]=u,e[d]=n,r=d):(e[r]=s,e[l]=n,r=l);else{if(!(d<a&&0>o(u,n)))break e;e[r]=u,e[d]=n,r=d}}}return t}function o(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}if(t.unstable_now=void 0,"object"==typeof performance&&"function"==typeof performance.now){var i=performance;t.unstable_now=function(){return i.now()}}else{var l=Date,s=l.now();t.unstable_now=function(){return l.now()-s}}var d=[],u=[],c=1,f=null,p=3,m=!1,h=!1,g=!1,y="function"==typeof setTimeout?setTimeout:null,v="function"==typeof clearTimeout?clearTimeout:null,b="undefined"!=typeof setImmediate?setImmediate:null;function S(e){for(var t=r(u);null!==t;){if(null===t.callback)a(u);else{if(!(t.startTime<=e))break;a(u),t.sortIndex=t.expirationTime,n(d,t)}t=r(u)}}function w(e){if(g=!1,S(e),!h)if(null!==r(d))h=!0,E();else{var t=r(u);null!==t&&O(w,t.startTime-e)}}var _,C=!1,k=-1,x=5,T=-1;function A(){return!(t.unstable_now()-T<x)}function P(){if(C){var e=t.unstable_now();T=e;var n=!0;try{e:{h=!1,g&&(g=!1,v(k),k=-1),m=!0;var o=p;try{t:{for(S(e),f=r(d);null!==f&&!(f.expirationTime>e&&A());){var i=f.callback;if("function"==typeof i){f.callback=null,p=f.priorityLevel;var l=i(f.expirationTime<=e);if(e=t.unstable_now(),"function"==typeof l){f.callback=l,S(e),n=!0;break t}f===r(d)&&a(d),S(e)}else a(d);f=r(d)}if(null!==f)n=!0;else{var s=r(u);null!==s&&O(w,s.startTime-e),n=!1}}break e}finally{f=null,p=o,m=!1}n=void 0}}finally{n?_():C=!1}}}if("function"==typeof b)_=function(){b(P)};else if("undefined"!=typeof MessageChannel){var z=new MessageChannel,R=z.port2;z.port1.onmessage=P,_=function(){R.postMessage(null)}}else _=function(){y(P,0)};function E(){C||(C=!0,_())}function O(e,n){k=y((function(){e(t.unstable_now())}),n)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){h||m||(h=!0,E())},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):x=0<e?Math.floor(1e3/e):5},t.unstable_getCurrentPriorityLevel=function(){return p},t.unstable_getFirstCallbackNode=function(){return r(d)},t.unstable_next=function(e){switch(p){case 1:case 2:case 3:var t=3;break;default:t=p}var n=p;p=t;try{return e()}finally{p=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=function(){},t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=p;p=e;try{return t()}finally{p=n}},t.unstable_scheduleCallback=function(e,a,o){var i=t.unstable_now();switch(o="object"==typeof o&&null!==o&&"number"==typeof(o=o.delay)&&0<o?i+o:i,e){case 1:var l=-1;break;case 2:l=250;break;case 5:l=1073741823;break;case 4:l=1e4;break;default:l=5e3}return e={id:c++,callback:a,priorityLevel:e,startTime:o,expirationTime:l=o+l,sortIndex:-1},o>i?(e.sortIndex=o,n(u,e),null===r(d)&&e===r(u)&&(g?(v(k),k=-1):g=!0,O(w,o-i))):(e.sortIndex=l,n(d,e),h||m||(h=!0,E())),e},t.unstable_shouldYield=A,t.unstable_wrapCallback=function(e){var t=p;return function(){var n=p;p=t;try{return e.apply(this,arguments)}finally{p=n}}}},982:(e,t,n)=>{e.exports=n(477)},72:e=>{var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var o={},i=[],l=0;l<e.length;l++){var s=e[l],d=r.base?s[0]+r.base:s[0],u=o[d]||0,c="".concat(d," ").concat(u);o[d]=u+1;var f=n(c),p={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==f)t[f].references++,t[f].updater(p);else{var m=a(p,r);r.byIndex=l,t.splice(l,0,{identifier:c,updater:m,references:1})}i.push(c)}return i}function a(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,a){var o=r(e=e||[],a=a||{});return function(e){e=e||[];for(var i=0;i<o.length;i++){var l=n(o[i]);t[l].references--}for(var s=r(e,a),d=0;d<o.length;d++){var u=n(o[d]);0===t[u].references&&(t[u].updater(),t.splice(u,1))}o=s}}},659:e=>{var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},159:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},56:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},825:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var a=void 0!==n.layer;a&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,a&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var o=n.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},113:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},160:(e,t,n)=>{var r=n(540),a="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},o=r.useSyncExternalStore,i=r.useRef,l=r.useEffect,s=r.useMemo,d=r.useDebugValue;t.useSyncExternalStoreWithSelector=function(e,t,n,r,u){var c=i(null);if(null===c.current){var f={hasValue:!1,value:null};c.current=f}else f=c.current;c=s((function(){function e(e){if(!l){if(l=!0,o=e,e=r(e),void 0!==u&&f.hasValue){var t=f.value;if(u(t,e))return i=t}return i=e}if(t=i,a(o,e))return t;var n=r(e);return void 0!==u&&u(t,n)?(o=e,t):(o=e,i=n)}var o,i,l=!1,s=void 0===n?null:n;return[function(){return e(t())},null===s?void 0:function(){return e(s())}]}),[t,n,r,u]);var p=o(e,c[0],c[1]);return l((function(){f.hasValue=!0,f.value=p}),[p]),d(p),p}},418:(e,t,n)=>{e.exports=n(160)}},t={};function n(r){var a=t[r];if(void 0!==a)return a.exports;var o=t[r]={id:r,exports:{}};return e[r](o,o.exports,n),o.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.nc=void 0;var r=n(540),a=n(338),o=n(418);var i={notify(){},get:()=>[]};var l=(()=>!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement))(),s=(()=>"undefined"!=typeof navigator&&"ReactNative"===navigator.product)(),d=(()=>l||s?r.useLayoutEffect:r.useEffect)();Object.defineProperty,Object.getOwnPropertyNames,Object.getOwnPropertySymbols,Object.getOwnPropertyDescriptor,Object.getPrototypeOf,Object.prototype;var u=Symbol.for("react-redux-context"),c="undefined"!=typeof globalThis?globalThis:{};function f(){if(!r.createContext)return{};const e=c[u]??=new Map;let t=e.get(r.createContext);return t||(t=r.createContext(null),e.set(r.createContext,t)),t}var p=f(),m=function(e){const{children:t,context:n,serverState:a,store:o}=e,l=r.useMemo((()=>{const e=function(e,t){let n,r=i,a=0,o=!1;function l(){u.onStateChange&&u.onStateChange()}function s(){a++,n||(n=t?t.addNestedSub(l):e.subscribe(l),r=function(){let e=null,t=null;return{clear(){e=null,t=null},notify(){(()=>{let t=e;for(;t;)t.callback(),t=t.next})()},get(){const t=[];let n=e;for(;n;)t.push(n),n=n.next;return t},subscribe(n){let r=!0;const a=t={callback:n,next:null,prev:t};return a.prev?a.prev.next=a:e=a,function(){r&&null!==e&&(r=!1,a.next?a.next.prev=a.prev:t=a.prev,a.prev?a.prev.next=a.next:e=a.next)}}}}())}function d(){a--,n&&0===a&&(n(),n=void 0,r.clear(),r=i)}const u={addNestedSub:function(e){s();const t=r.subscribe(e);let n=!1;return()=>{n||(n=!0,t(),d())}},notifyNestedSubs:function(){r.notify()},handleChangeWrapper:l,isSubscribed:function(){return o},trySubscribe:function(){o||(o=!0,s())},tryUnsubscribe:function(){o&&(o=!1,d())},getListeners:()=>r};return u}(o);return{store:o,subscription:e,getServerState:a?()=>a:void 0}}),[o,a]),s=r.useMemo((()=>o.getState()),[o]);d((()=>{const{subscription:e}=l;return e.onStateChange=e.notifyNestedSubs,e.trySubscribe(),s!==o.getState()&&e.notifyNestedSubs(),()=>{e.tryUnsubscribe(),e.onStateChange=void 0}}),[l,s]);const u=n||p;return r.createElement(u.Provider,{value:l},t)};function h(e=p){return function(){return r.useContext(e)}}var g=h();function y(e=p){const t=e===p?g:h(e),n=()=>{const{store:e}=t();return e};return Object.assign(n,{withTypes:()=>n}),n}var v=y();function b(e=p){const t=e===p?v:y(e),n=()=>t().dispatch;return Object.assign(n,{withTypes:()=>n}),n}var S=b(),w=(e,t)=>e===t;function _(e=p){const t=e===p?g:h(e),n=(e,n={})=>{const{equalityFn:a=w}="function"==typeof n?{equalityFn:n}:n,i=t(),{store:l,subscription:s,getServerState:d}=i,u=(r.useRef(!0),r.useCallback({[e.name]:t=>e(t)}[e.name],[e])),c=(0,o.useSyncExternalStoreWithSelector)(s.addNestedSub,l.getState,d||l.getState,u,a);return r.useDebugValue(c),c};return Object.assign(n,{withTypes:()=>n}),n}var C=_();function k(e){return`Minified Redux error #${e}; visit https://redux.js.org/Errors?code=${e} for the full message or use the non-minified dev environment for full errors. `}var x=(()=>"function"==typeof Symbol&&Symbol.observable||"@@observable")(),T=()=>Math.random().toString(36).substring(7).split("").join("."),A={INIT:`@@redux/INIT${T()}`,REPLACE:`@@redux/REPLACE${T()}`,PROBE_UNKNOWN_ACTION:()=>`@@redux/PROBE_UNKNOWN_ACTION${T()}`};function P(e){if("object"!=typeof e||null===e)return!1;let t=e;for(;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t||null===Object.getPrototypeOf(e)}function z(e,t,n){if("function"!=typeof e)throw new Error(k(2));if("function"==typeof t&&"function"==typeof n||"function"==typeof n&&"function"==typeof arguments[3])throw new Error(k(0));if("function"==typeof t&&void 0===n&&(n=t,t=void 0),void 0!==n){if("function"!=typeof n)throw new Error(k(1));return n(z)(e,t)}let r=e,a=t,o=new Map,i=o,l=0,s=!1;function d(){i===o&&(i=new Map,o.forEach(((e,t)=>{i.set(t,e)})))}function u(){if(s)throw new Error(k(3));return a}function c(e){if("function"!=typeof e)throw new Error(k(4));if(s)throw new Error(k(5));let t=!0;d();const n=l++;return i.set(n,e),function(){if(t){if(s)throw new Error(k(6));t=!1,d(),i.delete(n),o=null}}}function f(e){if(!P(e))throw new Error(k(7));if(void 0===e.type)throw new Error(k(8));if("string"!=typeof e.type)throw new Error(k(17));if(s)throw new Error(k(9));try{s=!0,a=r(a,e)}finally{s=!1}return(o=i).forEach((e=>{e()})),e}return f({type:A.INIT}),{dispatch:f,subscribe:c,getState:u,replaceReducer:function(e){if("function"!=typeof e)throw new Error(k(10));r=e,f({type:A.REPLACE})},[x]:function(){const e=c;return{subscribe(t){if("object"!=typeof t||null===t)throw new Error(k(11));function n(){const e=t;e.next&&e.next(u())}return n(),{unsubscribe:e(n)}},[x](){return this}}}}}function R(...e){return 0===e.length?e=>e:1===e.length?e[0]:e.reduce(((e,t)=>(...n)=>e(t(...n))))}function E(e){return({dispatch:t,getState:n})=>r=>a=>"function"==typeof a?a(t,n,e):r(a)}var O=E(),M=E,I=Symbol.for("immer-nothing"),L=Symbol.for("immer-draftable"),D=Symbol.for("immer-state");function N(e,...t){throw new Error(`[Immer] minified error nr: ${e}. Full error at: https://bit.ly/3cXEKWf`)}var F=Object.getPrototypeOf;function B(e){return!!e&&!!e[D]}function W(e){return!!e&&(j(e)||Array.isArray(e)||!!e[L]||!!e.constructor?.[L]||J(e)||$(e))}var H=Object.prototype.constructor.toString();function j(e){if(!e||"object"!=typeof e)return!1;const t=F(e);if(null===t)return!0;const n=Object.hasOwnProperty.call(t,"constructor")&&t.constructor;return n===Object||"function"==typeof n&&Function.toString.call(n)===H}function G(e,t){0===U(e)?Reflect.ownKeys(e).forEach((n=>{t(n,e[n],e)})):e.forEach(((n,r)=>t(r,n,e)))}function U(e){const t=e[D];return t?t.type_:Array.isArray(e)?1:J(e)?2:$(e)?3:0}function V(e,t){return 2===U(e)?e.has(t):Object.prototype.hasOwnProperty.call(e,t)}function K(e,t,n){const r=U(e);2===r?e.set(t,n):3===r?e.add(n):e[t]=n}function J(e){return e instanceof Map}function $(e){return e instanceof Set}function Y(e){return e.copy_||e.base_}function q(e,t){if(J(e))return new Map(e);if($(e))return new Set(e);if(Array.isArray(e))return Array.prototype.slice.call(e);const n=j(e);if(!0===t||"class_only"===t&&!n){const t=Object.getOwnPropertyDescriptors(e);delete t[D];let n=Reflect.ownKeys(t);for(let r=0;r<n.length;r++){const a=n[r],o=t[a];!1===o.writable&&(o.writable=!0,o.configurable=!0),(o.get||o.set)&&(t[a]={configurable:!0,writable:!0,enumerable:o.enumerable,value:e[a]})}return Object.create(F(e),t)}{const t=F(e);if(null!==t&&n)return{...e};const r=Object.create(t);return Object.assign(r,e)}}function Q(e,t=!1){return Z(e)||B(e)||!W(e)||(U(e)>1&&(e.set=e.add=e.clear=e.delete=X),Object.freeze(e),t&&Object.entries(e).forEach((([e,t])=>Q(t,!0)))),e}function X(){N(2)}function Z(e){return Object.isFrozen(e)}var ee,te={};function ne(e){const t=te[e];return t||N(0),t}function re(){return ee}function ae(e,t){t&&(ne("Patches"),e.patches_=[],e.inversePatches_=[],e.patchListener_=t)}function oe(e){ie(e),e.drafts_.forEach(se),e.drafts_=null}function ie(e){e===ee&&(ee=e.parent_)}function le(e){return ee={drafts_:[],parent_:ee,immer_:e,canAutoFreeze_:!0,unfinalizedDrafts_:0}}function se(e){const t=e[D];0===t.type_||1===t.type_?t.revoke_():t.revoked_=!0}function de(e,t){t.unfinalizedDrafts_=t.drafts_.length;const n=t.drafts_[0];return void 0!==e&&e!==n?(n[D].modified_&&(oe(t),N(4)),W(e)&&(e=ue(t,e),t.parent_||fe(t,e)),t.patches_&&ne("Patches").generateReplacementPatches_(n[D].base_,e,t.patches_,t.inversePatches_)):e=ue(t,n,[]),oe(t),t.patches_&&t.patchListener_(t.patches_,t.inversePatches_),e!==I?e:void 0}function ue(e,t,n){if(Z(t))return t;const r=t[D];if(!r)return G(t,((a,o)=>ce(e,r,t,a,o,n))),t;if(r.scope_!==e)return t;if(!r.modified_)return fe(e,r.base_,!0),r.base_;if(!r.finalized_){r.finalized_=!0,r.scope_.unfinalizedDrafts_--;const t=r.copy_;let a=t,o=!1;3===r.type_&&(a=new Set(t),t.clear(),o=!0),G(a,((a,i)=>ce(e,r,t,a,i,n,o))),fe(e,t,!1),n&&e.patches_&&ne("Patches").generatePatches_(r,n,e.patches_,e.inversePatches_)}return r.copy_}function ce(e,t,n,r,a,o,i){if(B(a)){const i=ue(e,a,o&&t&&3!==t.type_&&!V(t.assigned_,r)?o.concat(r):void 0);if(K(n,r,i),!B(i))return;e.canAutoFreeze_=!1}else i&&n.add(a);if(W(a)&&!Z(a)){if(!e.immer_.autoFreeze_&&e.unfinalizedDrafts_<1)return;ue(e,a),t&&t.scope_.parent_||"symbol"==typeof r||!Object.prototype.propertyIsEnumerable.call(n,r)||fe(e,a)}}function fe(e,t,n=!1){!e.parent_&&e.immer_.autoFreeze_&&e.canAutoFreeze_&&Q(t,n)}var pe={get(e,t){if(t===D)return e;const n=Y(e);if(!V(n,t))return function(e,t,n){const r=ge(t,n);return r?"value"in r?r.value:r.get?.call(e.draft_):void 0}(e,n,t);const r=n[t];return e.finalized_||!W(r)?r:r===he(e.base_,t)?(ve(e),e.copy_[t]=be(r,e)):r},has:(e,t)=>t in Y(e),ownKeys:e=>Reflect.ownKeys(Y(e)),set(e,t,n){const r=ge(Y(e),t);if(r?.set)return r.set.call(e.draft_,n),!0;if(!e.modified_){const r=he(Y(e),t),i=r?.[D];if(i&&i.base_===n)return e.copy_[t]=n,e.assigned_[t]=!1,!0;if(((a=n)===(o=r)?0!==a||1/a==1/o:a!=a&&o!=o)&&(void 0!==n||V(e.base_,t)))return!0;ve(e),ye(e)}var a,o;return e.copy_[t]===n&&(void 0!==n||t in e.copy_)||Number.isNaN(n)&&Number.isNaN(e.copy_[t])||(e.copy_[t]=n,e.assigned_[t]=!0),!0},deleteProperty:(e,t)=>(void 0!==he(e.base_,t)||t in e.base_?(e.assigned_[t]=!1,ve(e),ye(e)):delete e.assigned_[t],e.copy_&&delete e.copy_[t],!0),getOwnPropertyDescriptor(e,t){const n=Y(e),r=Reflect.getOwnPropertyDescriptor(n,t);return r?{writable:!0,configurable:1!==e.type_||"length"!==t,enumerable:r.enumerable,value:n[t]}:r},defineProperty(){N(11)},getPrototypeOf:e=>F(e.base_),setPrototypeOf(){N(12)}},me={};function he(e,t){const n=e[D];return(n?Y(n):e)[t]}function ge(e,t){if(!(t in e))return;let n=F(e);for(;n;){const e=Object.getOwnPropertyDescriptor(n,t);if(e)return e;n=F(n)}}function ye(e){e.modified_||(e.modified_=!0,e.parent_&&ye(e.parent_))}function ve(e){e.copy_||(e.copy_=q(e.base_,e.scope_.immer_.useStrictShallowCopy_))}function be(e,t){const n=J(e)?ne("MapSet").proxyMap_(e,t):$(e)?ne("MapSet").proxySet_(e,t):function(e,t){const n=Array.isArray(e),r={type_:n?1:0,scope_:t?t.scope_:re(),modified_:!1,finalized_:!1,assigned_:{},parent_:t,base_:e,draft_:null,copy_:null,revoke_:null,isManual_:!1};let a=r,o=pe;n&&(a=[r],o=me);const{revoke:i,proxy:l}=Proxy.revocable(a,o);return r.draft_=l,r.revoke_=i,l}(e,t);return(t?t.scope_:re()).drafts_.push(n),n}function Se(e){if(!W(e)||Z(e))return e;const t=e[D];let n;if(t){if(!t.modified_)return t.base_;t.finalized_=!0,n=q(e,t.scope_.immer_.useStrictShallowCopy_)}else n=q(e,!0);return G(n,((e,t)=>{K(n,e,Se(t))})),t&&(t.finalized_=!1),n}G(pe,((e,t)=>{me[e]=function(){return arguments[0]=arguments[0][0],t.apply(this,arguments)}})),me.deleteProperty=function(e,t){return me.set.call(this,e,t,void 0)},me.set=function(e,t,n){return pe.set.call(this,e[0],t,n,e[0])};var we=new class{constructor(e){this.autoFreeze_=!0,this.useStrictShallowCopy_=!1,this.produce=(e,t,n)=>{if("function"==typeof e&&"function"!=typeof t){const n=t;t=e;const r=this;return function(e=n,...a){return r.produce(e,(e=>t.call(this,e,...a)))}}let r;if("function"!=typeof t&&N(6),void 0!==n&&"function"!=typeof n&&N(7),W(e)){const a=le(this),o=be(e,void 0);let i=!0;try{r=t(o),i=!1}finally{i?oe(a):ie(a)}return ae(a,n),de(r,a)}if(!e||"object"!=typeof e){if(r=t(e),void 0===r&&(r=e),r===I&&(r=void 0),this.autoFreeze_&&Q(r,!0),n){const t=[],a=[];ne("Patches").generateReplacementPatches_(e,r,t,a),n(t,a)}return r}N(1)},this.produceWithPatches=(e,t)=>{if("function"==typeof e)return(t,...n)=>this.produceWithPatches(t,(t=>e(t,...n)));let n,r;return[this.produce(e,t,((e,t)=>{n=e,r=t})),n,r]},"boolean"==typeof e?.autoFreeze&&this.setAutoFreeze(e.autoFreeze),"boolean"==typeof e?.useStrictShallowCopy&&this.setUseStrictShallowCopy(e.useStrictShallowCopy)}createDraft(e){var t;W(e)||N(8),B(e)&&(B(t=e)||N(10),e=Se(t));const n=le(this),r=be(e,void 0);return r[D].isManual_=!0,ie(n),r}finishDraft(e,t){const n=e&&e[D];n&&n.isManual_||N(9);const{scope_:r}=n;return ae(r,t),de(void 0,r)}setAutoFreeze(e){this.autoFreeze_=e}setUseStrictShallowCopy(e){this.useStrictShallowCopy_=e}applyPatches(e,t){let n;for(n=t.length-1;n>=0;n--){const r=t[n];if(0===r.path.length&&"replace"===r.op){e=r.value;break}}n>-1&&(t=t.slice(n+1));const r=ne("Patches").applyPatches_;return B(e)?r(e,t):this.produce(e,(e=>r(e,t)))}},_e=we.produce;we.produceWithPatches.bind(we),we.setAutoFreeze.bind(we),we.setUseStrictShallowCopy.bind(we),we.applyPatches.bind(we),we.createDraft.bind(we),we.finishDraft.bind(we);var Ce="undefined"!=typeof window&&window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__?window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__:function(){if(0!==arguments.length)return"object"==typeof arguments[0]?R:R.apply(null,arguments)};function ke(e,t){function n(...n){if(t){let r=t(...n);if(!r)throw new Error(Ne(0));return{type:e,payload:r.payload,..."meta"in r&&{meta:r.meta},..."error"in r&&{error:r.error}}}return{type:e,payload:n[0]}}return n.toString=()=>`${e}`,n.type=e,n.match=t=>function(e){return P(e)&&"type"in e&&"string"==typeof e.type}(t)&&t.type===e,n}"undefined"!=typeof window&&window.__REDUX_DEVTOOLS_EXTENSION__&&window.__REDUX_DEVTOOLS_EXTENSION__;var xe=class e extends Array{constructor(...t){super(...t),Object.setPrototypeOf(this,e.prototype)}static get[Symbol.species](){return e}concat(...e){return super.concat.apply(this,e)}prepend(...t){return 1===t.length&&Array.isArray(t[0])?new e(...t[0].concat(this)):new e(...t.concat(this))}};function Te(e){return W(e)?_e(e,(()=>{})):e}function Ae(e,t,n){return e.has(t)?e.get(t):e.set(t,n(t)).get(t)}var Pe=e=>t=>{setTimeout(t,e)};function ze(e){const t={},n=[];let r;const a={addCase(e,n){const r="string"==typeof e?e:e.type;if(!r)throw new Error(Ne(28));if(r in t)throw new Error(Ne(29));return t[r]=n,a},addMatcher:(e,t)=>(n.push({matcher:e,reducer:t}),a),addDefaultCase:e=>(r=e,a)};return e(a),[t,n,r]}var Re=Symbol.for("rtk-slice-createasyncthunk");function Ee(e,t){return`${e}/${t}`}function Oe({creators:e}={}){const t=e?.asyncThunk?.[Re];return function(e){const{name:n,reducerPath:r=n}=e;if(!n)throw new Error(Ne(11));const a=("function"==typeof e.reducers?e.reducers(function(){function e(e,t){return{_reducerDefinitionType:"asyncThunk",payloadCreator:e,...t}}return e.withTypes=()=>e,{reducer:e=>Object.assign({[e.name]:(...t)=>e(...t)}[e.name],{_reducerDefinitionType:"reducer"}),preparedReducer:(e,t)=>({_reducerDefinitionType:"reducerWithPrepare",prepare:e,reducer:t}),asyncThunk:e}}()):e.reducers)||{},o=Object.keys(a),i={sliceCaseReducersByName:{},sliceCaseReducersByType:{},actionCreators:{},sliceMatchers:[]},l={addCase(e,t){const n="string"==typeof e?e:e.type;if(!n)throw new Error(Ne(12));if(n in i.sliceCaseReducersByType)throw new Error(Ne(13));return i.sliceCaseReducersByType[n]=t,l},addMatcher:(e,t)=>(i.sliceMatchers.push({matcher:e,reducer:t}),l),exposeAction:(e,t)=>(i.actionCreators[e]=t,l),exposeCaseReducer:(e,t)=>(i.sliceCaseReducersByName[e]=t,l)};function s(){const[t={},n=[],r]="function"==typeof e.extraReducers?ze(e.extraReducers):[e.extraReducers],a={...t,...i.sliceCaseReducersByType};return function(e){let t,[o,l,s]=ze((e=>{for(let t in a)e.addCase(t,a[t]);for(let t of i.sliceMatchers)e.addMatcher(t.matcher,t.reducer);for(let t of n)e.addMatcher(t.matcher,t.reducer);r&&e.addDefaultCase(r)}));if("function"==typeof e)t=()=>Te(e());else{const n=Te(e);t=()=>n}function d(e=t(),n){let r=[o[n.type],...l.filter((({matcher:e})=>e(n))).map((({reducer:e})=>e))];return 0===r.filter((e=>!!e)).length&&(r=[s]),r.reduce(((e,t)=>{if(t){if(B(e)){const r=t(e,n);return void 0===r?e:r}if(W(e))return _e(e,(e=>t(e,n)));{const r=t(e,n);if(void 0===r){if(null===e)return e;throw Error("A case reducer on a non-draftable value must not return undefined")}return r}}return e}),e)}return d.getInitialState=t,d}(e.initialState)}o.forEach((r=>{const o=a[r],i={reducerName:r,type:Ee(n,r),createNotation:"function"==typeof e.reducers};!function(e){return"asyncThunk"===e._reducerDefinitionType}(o)?function({type:e,reducerName:t,createNotation:n},r,a){let o,i;if("reducer"in r){if(n&&!function(e){return"reducerWithPrepare"===e._reducerDefinitionType}(r))throw new Error(Ne(17));o=r.reducer,i=r.prepare}else o=r;a.addCase(e,o).exposeCaseReducer(t,o).exposeAction(t,i?ke(e,i):ke(e))}(i,o,l):function({type:e,reducerName:t},n,r,a){if(!a)throw new Error(Ne(18));const{payloadCreator:o,fulfilled:i,pending:l,rejected:s,settled:d,options:u}=n,c=a(e,o,u);r.exposeAction(t,c),i&&r.addCase(c.fulfilled,i),l&&r.addCase(c.pending,l),s&&r.addCase(c.rejected,s),d&&r.addMatcher(c.settled,d),r.exposeCaseReducer(t,{fulfilled:i||Le,pending:l||Le,rejected:s||Le,settled:d||Le})}(i,o,l,t)}));const d=e=>e,u=new Map;let c;function f(e,t){return c||(c=s()),c(e,t)}function p(){return c||(c=s()),c.getInitialState()}function m(t,n=!1){function r(e){let r=e[t];return void 0===r&&n&&(r=p()),r}function a(t=d){const r=Ae(u,n,(()=>new WeakMap));return Ae(r,t,(()=>{const r={};for(const[a,o]of Object.entries(e.selectors??{}))r[a]=Me(o,t,p,n);return r}))}return{reducerPath:t,getSelectors:a,get selectors(){return a(r)},selectSlice:r}}const h={name:n,reducer:f,actions:i.actionCreators,caseReducers:i.sliceCaseReducersByName,getInitialState:p,...m(r),injectInto(e,{reducerPath:t,...n}={}){const a=t??r;return e.inject({reducerPath:a,reducer:f},n),{...h,...m(a,!0)}}};return h}}function Me(e,t,n,r){function a(a,...o){let i=t(a);return void 0===i&&r&&(i=n()),e(i,...o)}return a.unwrapped=e,a}var Ie=Oe();function Le(){}var{assign:De}=Object;function Ne(e){return`Minified Redux Toolkit error #${e}; visit https://redux-toolkit.js.org/Errors?code=${e} for the full message or use the non-minified dev environment for full errors. `}function Fe(e){return Fe="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Fe(e)}function Be(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function We(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Be(Object(n),!0).forEach((function(t){He(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Be(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function He(e,t,n){return(t=function(e){var t=function(e){if("object"!=Fe(e)||!e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var n=t.call(e,"string");if("object"!=Fe(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==Fe(t)?t:t+""}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}Symbol.for("rtk-state-proxy-original");var je=Ie({name:"table",initialState:{items:JSON.parse('[{"id":"1","name":"Gabtune","address":"8043 Huxley Avenue"},{"id":"2","name":"Bubbletube","address":"95395 Charing Cross Crossing"},{"id":"3","name":"Zooxo","address":"47 Pepper Wood Terrace"},{"id":"4","name":"Brainlounge","address":"946 Nobel Plaza"},{"id":"5","name":"Bubblemix","address":"3 Del Sol Road"},{"id":"6","name":"Tavu","address":"74 Kennedy Park"},{"id":"7","name":"Oodoo","address":"100 Schurz Pass"},{"id":"8","name":"Devshare","address":"26 Birchwood Plaza"},{"id":"9","name":"Dynabox","address":"7935 Dunning Crossing"},{"id":"10","name":"Trupe","address":"40615 Westend Trail"},{"id":"11","name":"Twinder","address":"225 Troy Drive"},{"id":"12","name":"Dynabox","address":"47308 Crowley Point"},{"id":"13","name":"Jaxworks","address":"95 Twin Pines Trail"},{"id":"14","name":"Flipopia","address":"9316 Buena Vista Pass"},{"id":"15","name":"Thoughtstorm","address":"80 Almo Circle"},{"id":"16","name":"Fiveclub","address":"41 Eagle Crest Court"},{"id":"17","name":"Yodo","address":"57224 Mifflin Crossing"},{"id":"18","name":"Skibox","address":"5 Truax Park"},{"id":"19","name":"Flashdog","address":"531 Jenna Avenue"},{"id":"20","name":"Fiveclub","address":"700 Badeau Terrace"},{"id":"21","name":"Nlounge","address":"0247 Schlimgen Trail"},{"id":"22","name":"Twitterworks","address":"0046 Di Loreto Center"},{"id":"23","name":"Dabfeed","address":"7 Kim Place"},{"id":"24","name":"Midel","address":"93 Clyde Gallagher Lane"},{"id":"25","name":"Bubblemix","address":"683 Sutteridge Park"},{"id":"26","name":"Oozz","address":"58 Michigan Alley"},{"id":"27","name":"Tambee","address":"349 Stang Way"},{"id":"28","name":"Skinix","address":"573 Vernon Point"},{"id":"29","name":"Eare","address":"09 Nova Plaza"},{"id":"30","name":"Bluejam","address":"0 Schmedeman Center"},{"id":"31","name":"Quimba","address":"2 Randy Park"},{"id":"32","name":"Kwilith","address":"43 Annamark Point"},{"id":"33","name":"Zoomzone","address":"281 Old Shore Lane"},{"id":"34","name":"Digitube","address":"2 Linden Crossing"},{"id":"35","name":"Tekfly","address":"669 Holy Cross Way"},{"id":"36","name":"Oyoloo","address":"3293 Morning Crossing"},{"id":"37","name":"Oyoba","address":"97 Nancy Trail"},{"id":"38","name":"Browsecat","address":"92481 Towne Park"},{"id":"39","name":"Jabbersphere","address":"7906 Haas Place"},{"id":"40","name":"Skajo","address":"27 Dorton Way"},{"id":"41","name":"Vidoo","address":"76 Nova Avenue"},{"id":"42","name":"Skyvu","address":"28464 Myrtle Lane"},{"id":"43","name":"Voonix","address":"7 Kenwood Crossing"},{"id":"44","name":"Quimba","address":"9 Rutledge Pass"},{"id":"45","name":"Yakitri","address":"741 Loeprich Alley"},{"id":"46","name":"Jazzy","address":"98424 Crownhardt Avenue"},{"id":"47","name":"Vinte","address":"282 Birchwood Road"},{"id":"48","name":"Eare","address":"4 Johnson Court"},{"id":"49","name":"Voomm","address":"17 Pleasure Street"},{"id":"50","name":"Janyx","address":"47 School Alley"},{"id":"51","name":"Kazu","address":"986 Reinke Trail"},{"id":"52","name":"Dabtype","address":"86313 Anderson Place"},{"id":"53","name":"Feedbug","address":"52 Mallard Trail"},{"id":"54","name":"Aibox","address":"6 Armistice Plaza"},{"id":"55","name":"Dynabox","address":"8 Esker Avenue"},{"id":"56","name":"Jabberbean","address":"54006 Lien Point"},{"id":"57","name":"Trudoo","address":"893 Canary Junction"},{"id":"58","name":"Eimbee","address":"506 Dawn Point"},{"id":"59","name":"Devify","address":"0 Novick Center"},{"id":"60","name":"Edgeblab","address":"239 Larry Plaza"},{"id":"61","name":"Nlounge","address":"8 Troy Place"},{"id":"62","name":"Chatterpoint","address":"9 Kingsford Court"},{"id":"63","name":"Avavee","address":"56183 Sage Alley"},{"id":"64","name":"Livefish","address":"0 Vera Street"},{"id":"65","name":"Abatz","address":"34 Anniversary Point"},{"id":"66","name":"Meevee","address":"27080 Hauk Drive"},{"id":"67","name":"Oyondu","address":"2000 Sutteridge Hill"},{"id":"68","name":"Flipopia","address":"40617 Reindahl Hill"},{"id":"69","name":"Twimm","address":"71681 Forest Dale Street"},{"id":"70","name":"Eire","address":"8082 Mandrake Alley"},{"id":"71","name":"Eire","address":"1 Linden Circle"},{"id":"72","name":"Livefish","address":"35035 Oak Valley Crossing"},{"id":"73","name":"Gevee","address":"376 Bayside Point"},{"id":"74","name":"Yodo","address":"148 Wayridge Hill"},{"id":"75","name":"Thoughtstorm","address":"873 Bluestem Park"},{"id":"76","name":"Trudeo","address":"4070 Mallard Street"},{"id":"77","name":"Photobean","address":"92604 Badeau Court"},{"id":"78","name":"Quimba","address":"644 Paget Crossing"},{"id":"79","name":"Vimbo","address":"67 Ridge Oak Way"},{"id":"80","name":"Voomm","address":"6149 Hoard Drive"},{"id":"81","name":"Skibox","address":"10860 Becker Park"},{"id":"82","name":"Innotype","address":"012 Artisan Way"},{"id":"83","name":"Fadeo","address":"0139 Barby Crossing"},{"id":"84","name":"Skidoo","address":"29884 Sunbrook Drive"},{"id":"85","name":"Gigazoom","address":"5 Hoepker Terrace"},{"id":"86","name":"Flipstorm","address":"5 Fordem Place"},{"id":"87","name":"Livetube","address":"0180 Dapin Terrace"},{"id":"88","name":"Brainbox","address":"09644 Lunder Park"},{"id":"89","name":"Wikivu","address":"49 East Pass"},{"id":"90","name":"Zoomcast","address":"384 Lakewood Plaza"},{"id":"91","name":"Buzzbean","address":"4498 Badeau Parkway"},{"id":"92","name":"Jabbercube","address":"97 Wayridge Road"},{"id":"93","name":"Centizu","address":"41 Canary Court"},{"id":"94","name":"Dynabox","address":"40396 Blue Bill Park Drive"},{"id":"95","name":"Roombo","address":"62246 Glendale Avenue"},{"id":"96","name":"Jabberbean","address":"76 Sunbrook Crossing"},{"id":"97","name":"Feedfish","address":"45138 Mcguire Trail"},{"id":"98","name":"Twitterbeat","address":"1 Elka Place"},{"id":"99","name":"Pixope","address":"12438 Manley Way"},{"id":"100","name":"Tambee","address":"1479 Prairieview Hill"},{"id":"101","name":"Skidoo","address":"2104 Hallows Center"},{"id":"102","name":"Devcast","address":"97 Kingsford Crossing"},{"id":"103","name":"Jamia","address":"611 Texas Alley"},{"id":"104","name":"Meetz","address":"3 Becker Drive"},{"id":"105","name":"Feedspan","address":"0336 Ronald Regan Parkway"},{"id":"106","name":"Zoomdog","address":"69 Vidon Alley"},{"id":"107","name":"Roodel","address":"63687 Pierstorff Place"},{"id":"108","name":"Oyondu","address":"1 Packers Avenue"},{"id":"109","name":"Yodo","address":"57 Truax Court"},{"id":"110","name":"Cogidoo","address":"6245 Main Drive"},{"id":"111","name":"Gabspot","address":"2755 Sullivan Court"},{"id":"112","name":"Vinte","address":"8 Lunder Terrace"},{"id":"113","name":"Topicshots","address":"333 Artisan Junction"},{"id":"114","name":"Twitterbridge","address":"030 Tennessee Drive"},{"id":"115","name":"Aimbo","address":"477 Clyde Gallagher Terrace"},{"id":"116","name":"Zoomzone","address":"06 Sycamore Terrace"},{"id":"117","name":"Zoombox","address":"4 Derek Junction"},{"id":"118","name":"Rhybox","address":"6037 Ruskin Circle"},{"id":"119","name":"Quatz","address":"3731 Elka Hill"},{"id":"120","name":"Oyondu","address":"01885 Sauthoff Center"},{"id":"121","name":"Flipstorm","address":"476 Waubesa Court"},{"id":"122","name":"Jaloo","address":"36 Spenser Crossing"},{"id":"123","name":"Twitternation","address":"692 Arrowood Trail"},{"id":"124","name":"Pixope","address":"742 Clyde Gallagher Lane"},{"id":"125","name":"Jabbercube","address":"46 Raven Alley"},{"id":"126","name":"Rhybox","address":"4 International Place"},{"id":"127","name":"Divanoodle","address":"0 Reindahl Drive"},{"id":"128","name":"Browsetype","address":"75 Boyd Center"},{"id":"129","name":"Chatterbridge","address":"56266 Brickson Park Court"},{"id":"130","name":"Babbleblab","address":"7313 8th Drive"},{"id":"131","name":"Katz","address":"7 Sutteridge Way"},{"id":"132","name":"Quinu","address":"41322 Maywood Court"},{"id":"133","name":"Kamba","address":"56 Pine View Place"},{"id":"134","name":"Flipstorm","address":"07211 Kedzie Junction"},{"id":"135","name":"Skyble","address":"24363 Mallory Drive"},{"id":"136","name":"Ailane","address":"12 Walton Crossing"},{"id":"137","name":"Aimbo","address":"37 Karstens Court"},{"id":"138","name":"Dynabox","address":"008 Pond Way"},{"id":"139","name":"Shuffledrive","address":"5 Nobel Place"},{"id":"140","name":"Yakidoo","address":"7634 Luster Hill"},{"id":"141","name":"Blognation","address":"332 Prentice Place"},{"id":"142","name":"Browsetype","address":"3899 Ilene Road"},{"id":"143","name":"Voonder","address":"8744 Sloan Alley"},{"id":"144","name":"Gigabox","address":"004 Sundown Junction"},{"id":"145","name":"Mydeo","address":"8 Hoard Place"},{"id":"146","name":"Topicblab","address":"6 Artisan Street"},{"id":"147","name":"Zoonoodle","address":"7 Judy Plaza"},{"id":"148","name":"Blogtags","address":"0912 Eastwood Plaza"},{"id":"149","name":"Abatz","address":"04860 Hanover Terrace"},{"id":"150","name":"Trudoo","address":"43537 Mccormick Junction"},{"id":"151","name":"LiveZ","address":"81 Swallow Road"},{"id":"152","name":"Vitz","address":"144 Jenifer Road"},{"id":"153","name":"Katz","address":"3002 Lawn Point"},{"id":"154","name":"Tavu","address":"559 Graedel Terrace"},{"id":"155","name":"Abatz","address":"51657 Glendale Terrace"},{"id":"156","name":"Jaloo","address":"973 Fulton Trail"},{"id":"157","name":"Bluejam","address":"6 Schiller Lane"},{"id":"158","name":"Quaxo","address":"1915 Rusk Trail"},{"id":"159","name":"Jabberstorm","address":"66 Mandrake Street"},{"id":"160","name":"Meejo","address":"5 Acker Road"},{"id":"161","name":"Centizu","address":"2630 Lyons Junction"},{"id":"162","name":"Tekfly","address":"0 Artisan Hill"},{"id":"163","name":"Pixoboo","address":"148 American Place"},{"id":"164","name":"Einti","address":"454 Delaware Crossing"},{"id":"165","name":"Browsedrive","address":"96581 Delladonna Junction"},{"id":"166","name":"BlogXS","address":"4598 Dorton Parkway"},{"id":"167","name":"Avamm","address":"9344 Sheridan Avenue"},{"id":"168","name":"Wikido","address":"20446 Eastlawn Drive"},{"id":"169","name":"Feedbug","address":"809 Mccormick Way"},{"id":"170","name":"Photospace","address":"31 Ridgeway Pass"},{"id":"171","name":"Flashset","address":"02693 Nova Way"},{"id":"172","name":"Latz","address":"3 Continental Road"},{"id":"173","name":"Trilia","address":"5 Comanche Terrace"},{"id":"174","name":"Viva","address":"4 Valley Edge Lane"},{"id":"175","name":"Leexo","address":"603 Florence Hill"},{"id":"176","name":"Aibox","address":"339 Moose Court"},{"id":"177","name":"Voomm","address":"485 Bowman Pass"},{"id":"178","name":"Tagpad","address":"492 Vernon Avenue"},{"id":"179","name":"Bubblemix","address":"71 Holy Cross Plaza"},{"id":"180","name":"Mynte","address":"5 Little Fleur Court"},{"id":"181","name":"Ntag","address":"4 Gerald Terrace"},{"id":"182","name":"Zoomzone","address":"7 Eliot Circle"},{"id":"183","name":"Twitterlist","address":"3745 John Wall Circle"},{"id":"184","name":"Avaveo","address":"5 Dottie Road"},{"id":"185","name":"Aibox","address":"8921 Sullivan Drive"},{"id":"186","name":"Blogtags","address":"2292 Mcguire Court"},{"id":"187","name":"Aimbu","address":"56 Bay Avenue"},{"id":"188","name":"Yambee","address":"879 Arrowood Center"},{"id":"189","name":"Voonte","address":"17649 Hermina Hill"},{"id":"190","name":"Photofeed","address":"59 Kinsman Lane"},{"id":"191","name":"Edgetag","address":"70 Lien Parkway"},{"id":"192","name":"Feedfire","address":"7 Mesta Pass"},{"id":"193","name":"Voonix","address":"57450 Johnson Lane"},{"id":"194","name":"Babbleblab","address":"95 Muir Crossing"},{"id":"195","name":"Fatz","address":"0486 Sunfield Place"},{"id":"196","name":"Izio","address":"7445 Milwaukee Alley"},{"id":"197","name":"Einti","address":"303 Sherman Street"},{"id":"198","name":"Innojam","address":"305 Muir Junction"},{"id":"199","name":"Oyondu","address":"1 Coolidge Junction"},{"id":"200","name":"Vipe","address":"7237 Corry Crossing"},{"id":"201","name":"Dynava","address":"497 Armistice Place"},{"id":"202","name":"Chatterpoint","address":"0627 Porter Plaza"},{"id":"203","name":"Kwimbee","address":"20825 Mayfield Way"},{"id":"204","name":"Babbleopia","address":"797 Maryland Way"},{"id":"205","name":"Tagopia","address":"64 Dexter Crossing"},{"id":"206","name":"Kazio","address":"2 Oriole Parkway"},{"id":"207","name":"Gevee","address":"9011 Glendale Alley"},{"id":"208","name":"Edgewire","address":"288 Lien Junction"},{"id":"209","name":"Centidel","address":"1 Debs Alley"},{"id":"210","name":"Quinu","address":"08252 Autumn Leaf Street"},{"id":"211","name":"Yotz","address":"060 Carioca Crossing"},{"id":"212","name":"Meedoo","address":"798 Dahle Hill"},{"id":"213","name":"Tambee","address":"8117 Troy Hill"},{"id":"214","name":"Voonte","address":"89 Garrison Center"},{"id":"215","name":"Minyx","address":"611 Weeping Birch Point"},{"id":"216","name":"Snaptags","address":"11 Lerdahl Hill"},{"id":"217","name":"Aivee","address":"3874 Esker Court"},{"id":"218","name":"Bubbletube","address":"80 Vermont Hill"},{"id":"219","name":"Pixoboo","address":"180 Annamark Lane"},{"id":"220","name":"Centidel","address":"985 Melby Hill"},{"id":"221","name":"Viva","address":"8 Kennedy Lane"},{"id":"222","name":"Yakijo","address":"497 Cambridge Drive"},{"id":"223","name":"Avavee","address":"78682 Surrey Trail"},{"id":"224","name":"Realblab","address":"1377 Harbort Center"},{"id":"225","name":"Kwinu","address":"10 Elmside Terrace"},{"id":"226","name":"Zoomzone","address":"22716 Bartelt Alley"},{"id":"227","name":"Gabspot","address":"8234 Butternut Crossing"},{"id":"228","name":"Tagtune","address":"5 Sauthoff Lane"},{"id":"229","name":"Innojam","address":"1 Arkansas Point"},{"id":"230","name":"Skyndu","address":"3 Emmet Road"},{"id":"231","name":"Quimba","address":"3 Amoth Street"},{"id":"232","name":"Eabox","address":"99189 Havey Court"},{"id":"233","name":"Voolia","address":"5 Mcbride Lane"},{"id":"234","name":"Quatz","address":"12 Bowman Plaza"},{"id":"235","name":"Photojam","address":"2082 Stephen Junction"},{"id":"236","name":"Thoughtsphere","address":"69 Cherokee Center"},{"id":"237","name":"Blogtags","address":"23 Autumn Leaf Drive"},{"id":"238","name":"Jaloo","address":"485 Crest Line Park"},{"id":"239","name":"Wordware","address":"73 Kensington Parkway"},{"id":"240","name":"Topicware","address":"4508 Fuller Pass"},{"id":"241","name":"Yozio","address":"1 Basil Crossing"},{"id":"242","name":"Mynte","address":"74702 Ridge Oak Trail"},{"id":"243","name":"Babbleset","address":"549 Mccormick Parkway"},{"id":"244","name":"Gevee","address":"4601 Randy Avenue"},{"id":"245","name":"Riffpath","address":"77 Dovetail Court"},{"id":"246","name":"Geba","address":"4861 Barnett Hill"},{"id":"247","name":"Dablist","address":"489 Schiller Road"},{"id":"248","name":"Voomm","address":"160 Memorial Road"},{"id":"249","name":"Trudeo","address":"58 Lake View Place"},{"id":"250","name":"Gigashots","address":"37 Summit Trail"},{"id":"251","name":"Linkbuzz","address":"6 Kinsman Street"},{"id":"252","name":"Gigazoom","address":"109 Nobel Street"},{"id":"253","name":"Gabcube","address":"17 Heath Circle"},{"id":"254","name":"Aibox","address":"97 Sheridan Crossing"},{"id":"255","name":"Realcube","address":"5 Lukken Plaza"},{"id":"256","name":"Layo","address":"0 6th Pass"},{"id":"257","name":"Edgeify","address":"3 Fairfield Pass"},{"id":"258","name":"Vitz","address":"749 Main Avenue"},{"id":"259","name":"Leenti","address":"64 Roth Place"},{"id":"260","name":"Realcube","address":"1 Twin Pines Crossing"},{"id":"261","name":"Vimbo","address":"4 Coleman Pass"},{"id":"262","name":"Linklinks","address":"430 Morrow Alley"},{"id":"263","name":"Jabbersphere","address":"957 Mallory Road"},{"id":"264","name":"Skimia","address":"064 3rd Trail"},{"id":"265","name":"Centimia","address":"05460 Merrick Pass"},{"id":"266","name":"Demizz","address":"700 Dahle Way"},{"id":"267","name":"Layo","address":"932 Lunder Avenue"},{"id":"268","name":"Photojam","address":"91475 Vahlen Alley"},{"id":"269","name":"Wikizz","address":"56424 Elka Avenue"},{"id":"270","name":"Twitternation","address":"16729 Texas Terrace"},{"id":"271","name":"Tagpad","address":"27 Calypso Way"},{"id":"272","name":"Blogtag","address":"5 Pearson Place"},{"id":"273","name":"Meembee","address":"16 Schiller Way"},{"id":"274","name":"Blognation","address":"11 West Parkway"},{"id":"275","name":"Mybuzz","address":"2909 Fairview Alley"},{"id":"276","name":"Chatterpoint","address":"3 Ludington Point"},{"id":"277","name":"Ainyx","address":"544 Sommers Junction"},{"id":"278","name":"Kwideo","address":"76 Main Alley"},{"id":"279","name":"Topicshots","address":"134 Haas Crossing"},{"id":"280","name":"Dabjam","address":"72199 Hudson Lane"},{"id":"281","name":"Riffwire","address":"82 David Plaza"},{"id":"282","name":"Thoughtbridge","address":"5 Buena Vista Court"},{"id":"283","name":"Dabvine","address":"1 Moulton Place"},{"id":"284","name":"Muxo","address":"220 Jenna Way"},{"id":"285","name":"Skippad","address":"0 Truax Place"},{"id":"286","name":"Jatri","address":"709 Valley Edge Way"},{"id":"287","name":"Brainlounge","address":"86 Rutledge Point"},{"id":"288","name":"Vitz","address":"0 Lukken Alley"},{"id":"289","name":"Edgeblab","address":"2973 Mesta Alley"},{"id":"290","name":"Trudoo","address":"67 Knutson Plaza"},{"id":"291","name":"Youspan","address":"72 Glendale Crossing"},{"id":"292","name":"Skaboo","address":"805 Burning Wood Pass"},{"id":"293","name":"Kamba","address":"748 American Point"},{"id":"294","name":"Trunyx","address":"1779 Cordelia Junction"},{"id":"295","name":"Zoomlounge","address":"46193 Brickson Park Circle"},{"id":"296","name":"Lajo","address":"356 Basil Terrace"},{"id":"297","name":"Feedfire","address":"599 Ruskin Parkway"},{"id":"298","name":"Lazzy","address":"334 Tony Alley"},{"id":"299","name":"Tagfeed","address":"83 South Terrace"},{"id":"300","name":"Kanoodle","address":"0776 Springview Park"},{"id":"301","name":"Blogtag","address":"86 Memorial Plaza"},{"id":"302","name":"Agimba","address":"65632 Gerald Junction"},{"id":"303","name":"Centimia","address":"08185 Raven Crossing"},{"id":"304","name":"Aimbu","address":"35910 Crowley Terrace"},{"id":"305","name":"Brightbean","address":"31 Maryland Hill"},{"id":"306","name":"Vimbo","address":"205 Mcguire Place"},{"id":"307","name":"Dynabox","address":"2 Birchwood Circle"},{"id":"308","name":"Skalith","address":"6241 Havey Circle"},{"id":"309","name":"Voonder","address":"0 Farwell Center"},{"id":"310","name":"Fiveclub","address":"7813 2nd Pass"},{"id":"311","name":"Tagcat","address":"6 Summit Lane"},{"id":"312","name":"Gabtype","address":"45 Delaware Alley"},{"id":"313","name":"Wikibox","address":"1259 Dayton Junction"},{"id":"314","name":"Topicware","address":"878 Basil Alley"},{"id":"315","name":"Eire","address":"79 Killdeer Alley"},{"id":"316","name":"Edgeblab","address":"92826 Summerview Lane"},{"id":"317","name":"Bluezoom","address":"251 Anzinger Street"},{"id":"318","name":"Fliptune","address":"513 Jackson Circle"},{"id":"319","name":"Skyvu","address":"8511 Milwaukee Lane"},{"id":"320","name":"Trilith","address":"91 Kensington Avenue"},{"id":"321","name":"Zoombox","address":"72 Pleasure Junction"},{"id":"322","name":"Yozio","address":"1498 Nelson Plaza"},{"id":"323","name":"Youbridge","address":"89 Bonner Drive"},{"id":"324","name":"Yadel","address":"186 Morningstar Trail"},{"id":"325","name":"Chatterbridge","address":"095 Butternut Hill"},{"id":"326","name":"Photospace","address":"72 Kenwood Avenue"},{"id":"327","name":"Skipfire","address":"58 Cascade Road"},{"id":"328","name":"Meevee","address":"0989 Stuart Drive"},{"id":"329","name":"Skajo","address":"6 Coolidge Crossing"},{"id":"330","name":"Jetpulse","address":"65 Sheridan Way"},{"id":"331","name":"Shuffletag","address":"06109 Kinsman Terrace"},{"id":"332","name":"Jabbersphere","address":"683 Fordem Terrace"},{"id":"333","name":"Photofeed","address":"1442 Badeau Lane"},{"id":"334","name":"Brightbean","address":"805 Rusk Alley"},{"id":"335","name":"Skynoodle","address":"5327 Transport Crossing"},{"id":"336","name":"Devbug","address":"15 Oneill Place"},{"id":"337","name":"Wikibox","address":"2 Iowa Plaza"},{"id":"338","name":"Flipstorm","address":"720 Green Ridge Drive"},{"id":"339","name":"Realmix","address":"17569 Maple Wood Alley"},{"id":"340","name":"Quire","address":"716 Bay Parkway"},{"id":"341","name":"Trilia","address":"8 Gerald Road"},{"id":"342","name":"Dynabox","address":"2243 Stuart Parkway"},{"id":"343","name":"Yodel","address":"05987 Westend Parkway"},{"id":"344","name":"Plambee","address":"7 Hooker Park"},{"id":"345","name":"Eire","address":"179 Maywood Hill"},{"id":"346","name":"Babblestorm","address":"91 Barby Park"},{"id":"347","name":"Rhynyx","address":"83 Crest Line Drive"},{"id":"348","name":"Brainverse","address":"6 Fordem Trail"},{"id":"349","name":"Dynabox","address":"0378 Weeping Birch Alley"},{"id":"350","name":"Dabshots","address":"4 Butterfield Drive"},{"id":"351","name":"Rooxo","address":"8 Northfield Junction"},{"id":"352","name":"Tambee","address":"0976 Melvin Court"},{"id":"353","name":"Tagopia","address":"15848 Lotheville Junction"},{"id":"354","name":"Roodel","address":"18496 Londonderry Pass"},{"id":"355","name":"Thoughtstorm","address":"40091 Mayfield Court"},{"id":"356","name":"Edgewire","address":"97 Eastwood Lane"},{"id":"357","name":"Jetwire","address":"2458 Kensington Parkway"},{"id":"358","name":"Blognation","address":"6177 Sutteridge Pass"},{"id":"359","name":"Agimba","address":"2089 Trailsway Parkway"},{"id":"360","name":"Thoughtstorm","address":"278 Bartillon Alley"},{"id":"361","name":"Wordware","address":"08900 Ridge Oak Center"},{"id":"362","name":"Blogtags","address":"71305 Parkside Trail"},{"id":"363","name":"Fiveclub","address":"773 Glacier Hill Junction"},{"id":"364","name":"Minyx","address":"5518 Norway Maple Hill"},{"id":"365","name":"Mudo","address":"12655 Helena Trail"},{"id":"366","name":"Feednation","address":"5 Merchant Center"},{"id":"367","name":"Chatterpoint","address":"0 Holy Cross Point"},{"id":"368","name":"Livepath","address":"08238 Wayridge Court"},{"id":"369","name":"Dynava","address":"766 Golden Leaf Court"},{"id":"370","name":"Myworks","address":"5 Pennsylvania Lane"},{"id":"371","name":"Gigazoom","address":"0799 Tennyson Junction"},{"id":"372","name":"Buzzshare","address":"9 Waxwing Court"},{"id":"373","name":"Tazzy","address":"67 Wayridge Circle"},{"id":"374","name":"Photojam","address":"984 Shelley Circle"},{"id":"375","name":"Zoomlounge","address":"02548 Forest Center"},{"id":"376","name":"Geba","address":"7 Washington Terrace"},{"id":"377","name":"Avaveo","address":"67423 Sheridan Circle"},{"id":"378","name":"Eimbee","address":"18 Namekagon Road"},{"id":"379","name":"Meevee","address":"66 Redwing Street"},{"id":"380","name":"Divavu","address":"31 Gulseth Trail"},{"id":"381","name":"Teklist","address":"375 Charing Cross Alley"},{"id":"382","name":"Avaveo","address":"397 Tony Plaza"},{"id":"383","name":"Thoughtbridge","address":"814 Arkansas Place"},{"id":"384","name":"Thoughtsphere","address":"87 Dayton Trail"},{"id":"385","name":"Plambee","address":"84955 Haas Point"},{"id":"386","name":"Youopia","address":"58379 Spohn Point"},{"id":"387","name":"Flashspan","address":"34089 Alpine Lane"},{"id":"388","name":"Ooba","address":"29545 Old Shore Hill"},{"id":"389","name":"Leenti","address":"78425 Parkside Lane"},{"id":"390","name":"Meemm","address":"47153 Loomis Street"},{"id":"391","name":"Skyba","address":"8 Calypso Avenue"},{"id":"392","name":"Skivee","address":"10 Northwestern Park"},{"id":"393","name":"Avavee","address":"64 Jackson Parkway"},{"id":"394","name":"Brainbox","address":"8082 Brentwood Crossing"},{"id":"395","name":"Eabox","address":"28 Pennsylvania Drive"},{"id":"396","name":"Twitterlist","address":"4 Kings Point"},{"id":"397","name":"Pixoboo","address":"6 Transport Hill"},{"id":"398","name":"Eidel","address":"534 David Center"},{"id":"399","name":"Meembee","address":"4767 Cambridge Junction"},{"id":"400","name":"Rhybox","address":"878 Lakewood Center"},{"id":"401","name":"Blognation","address":"28180 Sundown Circle"},{"id":"402","name":"Feedspan","address":"4897 Cambridge Street"},{"id":"403","name":"Katz","address":"965 Ridgeview Place"},{"id":"404","name":"Flashdog","address":"8227 High Crossing Drive"},{"id":"405","name":"Meetz","address":"7214 Summerview Alley"},{"id":"406","name":"Dazzlesphere","address":"74 Tony Terrace"},{"id":"407","name":"Brainverse","address":"45211 Lakeland Street"},{"id":"408","name":"Jayo","address":"9143 Mitchell Trail"},{"id":"409","name":"Fatz","address":"5381 Anderson Trail"},{"id":"410","name":"Shufflester","address":"44 Kropf Pass"},{"id":"411","name":"Dabtype","address":"160 Messerschmidt Way"},{"id":"412","name":"Yadel","address":"2447 Eagan Place"},{"id":"413","name":"Innojam","address":"7 Hauk Alley"},{"id":"414","name":"Voonyx","address":"6 Sauthoff Place"},{"id":"415","name":"Riffwire","address":"9287 Knutson Place"},{"id":"416","name":"Devpoint","address":"477 South Center"},{"id":"417","name":"Oyoyo","address":"0859 Schmedeman Center"},{"id":"418","name":"Jabberstorm","address":"2320 Karstens Way"},{"id":"419","name":"Zazio","address":"219 Hayes Alley"},{"id":"420","name":"Skaboo","address":"10909 Lunder Parkway"},{"id":"421","name":"Divanoodle","address":"5 Kropf Place"},{"id":"422","name":"Livepath","address":"7396 Canary Park"},{"id":"423","name":"Wordpedia","address":"62106 Sunnyside Center"},{"id":"424","name":"Quinu","address":"62 Pond Way"},{"id":"425","name":"Mynte","address":"5 School Terrace"},{"id":"426","name":"Tagchat","address":"2955 Cherokee Point"},{"id":"427","name":"Browsedrive","address":"67783 Barby Pass"},{"id":"428","name":"Dabjam","address":"07576 Raven Avenue"},{"id":"429","name":"Skaboo","address":"77 Stuart Center"},{"id":"430","name":"Flipstorm","address":"46 Chive Park"},{"id":"431","name":"Kazu","address":"65 Brentwood Street"},{"id":"432","name":"Yata","address":"098 Graceland Crossing"},{"id":"433","name":"Skilith","address":"1 Farmco Drive"},{"id":"434","name":"Miboo","address":"7 Helena Alley"},{"id":"435","name":"Teklist","address":"0 Ryan Street"},{"id":"436","name":"Zoomlounge","address":"1 Westridge Plaza"},{"id":"437","name":"Fanoodle","address":"77394 Homewood Avenue"},{"id":"438","name":"Edgetag","address":"499 Portage Parkway"},{"id":"439","name":"Twitterworks","address":"804 Melvin Road"},{"id":"440","name":"Wordify","address":"87501 Rigney Crossing"},{"id":"441","name":"Kanoodle","address":"34 Schiller Pass"},{"id":"442","name":"Twitterlist","address":"8576 Garrison Circle"},{"id":"443","name":"Babbleset","address":"63 Northport Way"},{"id":"444","name":"Meeveo","address":"36 Starling Plaza"},{"id":"445","name":"Edgetag","address":"5 Veith Avenue"},{"id":"446","name":"Avavee","address":"2421 Clemons Hill"},{"id":"447","name":"Skinder","address":"46557 Laurel Alley"},{"id":"448","name":"Voolith","address":"997 Superior Place"},{"id":"449","name":"Eayo","address":"6 Waxwing Junction"},{"id":"450","name":"Jaxbean","address":"69 Mallard Point"},{"id":"451","name":"Gabcube","address":"24080 Cordelia Park"},{"id":"452","name":"Devpoint","address":"37363 Cascade Street"},{"id":"453","name":"Youbridge","address":"7 Fairfield Lane"},{"id":"454","name":"Zoonoodle","address":"028 Utah Street"},{"id":"455","name":"Brainbox","address":"66 Straubel Lane"},{"id":"456","name":"Blogtag","address":"479 Pine View Pass"},{"id":"457","name":"Topicstorm","address":"25 Grim Road"},{"id":"458","name":"Brainlounge","address":"42 Springview Terrace"},{"id":"459","name":"Trudeo","address":"28 Ramsey Lane"},{"id":"460","name":"Riffpedia","address":"340 Bellgrove Point"},{"id":"461","name":"Shuffledrive","address":"61653 Jackson Center"},{"id":"462","name":"Rhynoodle","address":"45 Sutteridge Court"},{"id":"463","name":"Innotype","address":"8594 Charing Cross Place"},{"id":"464","name":"Jaxbean","address":"90 Shelley Trail"},{"id":"465","name":"Meeveo","address":"68362 Fulton Point"},{"id":"466","name":"Yotz","address":"119 Straubel Plaza"},{"id":"467","name":"Riffwire","address":"39922 Union Crossing"},{"id":"468","name":"Zava","address":"22 Burning Wood Parkway"},{"id":"469","name":"Oodoo","address":"51 Basil Plaza"},{"id":"470","name":"Zoonoodle","address":"312 Grover Way"},{"id":"471","name":"Topicshots","address":"728 Carey Trail"},{"id":"472","name":"Edgetag","address":"5266 American Ash Junction"},{"id":"473","name":"Trudoo","address":"4980 Laurel Park"},{"id":"474","name":"Quatz","address":"654 Mayer Court"},{"id":"475","name":"Mudo","address":"53 Riverside Place"},{"id":"476","name":"Blogpad","address":"678 Homewood Trail"},{"id":"477","name":"Jabbertype","address":"1 Welch Street"},{"id":"478","name":"Plambee","address":"7 Karstens Street"},{"id":"479","name":"Babblestorm","address":"1457 Calypso Crossing"},{"id":"480","name":"Meezzy","address":"30 Eagan Terrace"},{"id":"481","name":"Voomm","address":"8 Beilfuss Point"},{"id":"482","name":"Vitz","address":"2 Veith Trail"},{"id":"483","name":"Minyx","address":"2 Bartelt Court"},{"id":"484","name":"Latz","address":"1060 Oxford Avenue"},{"id":"485","name":"Realfire","address":"289 High Crossing Street"},{"id":"486","name":"Voolia","address":"75 Dennis Center"},{"id":"487","name":"Kazu","address":"54833 Lukken Lane"},{"id":"488","name":"Topdrive","address":"966 Sycamore Hill"},{"id":"489","name":"Jaxspan","address":"25 Lerdahl Road"},{"id":"490","name":"Tambee","address":"6 Caliangt Court"},{"id":"491","name":"Ntags","address":"8 Crest Line Plaza"},{"id":"492","name":"Jaxnation","address":"3375 Grasskamp Avenue"},{"id":"493","name":"Thoughtworks","address":"32434 Farwell Road"},{"id":"494","name":"Realpoint","address":"69 Rutledge Point"},{"id":"495","name":"Skipfire","address":"61261 Ryan Trail"},{"id":"496","name":"Bubblemix","address":"01607 Moulton Lane"},{"id":"497","name":"Zazio","address":"31 Ridge Oak Terrace"},{"id":"498","name":"Jaxbean","address":"59626 Burrows Road"},{"id":"499","name":"Realcube","address":"02 Petterle Court"},{"id":"500","name":"Shufflebeat","address":"10 Summer Ridge Alley"},{"id":"501","name":"Rooxo","address":"67792 Service Crossing"},{"id":"502","name":"Brightbean","address":"371 Meadow Vale Junction"},{"id":"503","name":"Plajo","address":"0 Paget Point"},{"id":"504","name":"Mybuzz","address":"98826 Crest Line Way"},{"id":"505","name":"Podcat","address":"4804 Ramsey Park"},{"id":"506","name":"Centidel","address":"2912 Hanover Park"},{"id":"507","name":"Cogidoo","address":"4659 Vera Point"},{"id":"508","name":"Devpoint","address":"26446 Scott Hill"},{"id":"509","name":"Dablist","address":"94 Hintze Lane"},{"id":"510","name":"Innojam","address":"6668 Carpenter Hill"},{"id":"511","name":"Wordify","address":"4103 Sloan Street"},{"id":"512","name":"Roomm","address":"05 Elmside Place"},{"id":"513","name":"Kwinu","address":"27048 Hintze Junction"},{"id":"514","name":"Digitube","address":"23450 Chive Alley"},{"id":"515","name":"Shuffledrive","address":"22301 Carberry Drive"},{"id":"516","name":"Voonder","address":"8 Mendota Drive"},{"id":"517","name":"Quinu","address":"12 Tennyson Drive"},{"id":"518","name":"Fatz","address":"65 Bluestem Circle"},{"id":"519","name":"Kaymbo","address":"49971 Union Plaza"},{"id":"520","name":"Fivespan","address":"093 Petterle Parkway"},{"id":"521","name":"Livetube","address":"50 Northland Street"},{"id":"522","name":"Avamba","address":"18 Petterle Road"},{"id":"523","name":"Twitterlist","address":"0 Hintze Hill"},{"id":"524","name":"Eimbee","address":"09266 Carpenter Place"},{"id":"525","name":"Oyoba","address":"69 Grim Hill"},{"id":"526","name":"Topiclounge","address":"77839 Dayton Junction"},{"id":"527","name":"Skyble","address":"483 Fair Oaks Way"},{"id":"528","name":"Rooxo","address":"460 Mallard Way"},{"id":"529","name":"Jamia","address":"1734 Roxbury Plaza"},{"id":"530","name":"Gabtype","address":"658 Oak Pass"},{"id":"531","name":"Pixoboo","address":"1714 Center Alley"},{"id":"532","name":"Innotype","address":"279 Forest Way"},{"id":"533","name":"Riffwire","address":"05 Holy Cross Circle"},{"id":"534","name":"Oyonder","address":"71550 Mccormick Lane"},{"id":"535","name":"Thoughtstorm","address":"3 Upham Parkway"},{"id":"536","name":"Babbleopia","address":"17 Rockefeller Crossing"},{"id":"537","name":"Oba","address":"00 Commercial Pass"},{"id":"538","name":"Twitterwire","address":"8 Summerview Street"},{"id":"539","name":"Livetube","address":"5617 Pepper Wood Junction"},{"id":"540","name":"Fadeo","address":"54 Nobel Trail"},{"id":"541","name":"Demivee","address":"74 Dwight Alley"},{"id":"542","name":"Zoonder","address":"809 Scofield Parkway"},{"id":"543","name":"Oyonder","address":"99976 Melvin Way"},{"id":"544","name":"Dabjam","address":"4322 Lighthouse Bay Parkway"},{"id":"545","name":"Dabjam","address":"21771 Harper Trail"},{"id":"546","name":"Realblab","address":"2 Florence Pass"},{"id":"547","name":"Yodoo","address":"734 La Follette Alley"},{"id":"548","name":"Camimbo","address":"13 John Wall Pass"},{"id":"549","name":"Tanoodle","address":"1892 Clemons Parkway"},{"id":"550","name":"Blogpad","address":"36 Cordelia Trail"},{"id":"551","name":"Topicstorm","address":"52097 Dottie Circle"},{"id":"552","name":"Devcast","address":"50 Basil Lane"},{"id":"553","name":"Skippad","address":"095 Melrose Place"},{"id":"554","name":"Wikizz","address":"35 Duke Lane"},{"id":"555","name":"Kwimbee","address":"9 Sachtjen Circle"},{"id":"556","name":"Yodoo","address":"1 Bellgrove Park"},{"id":"557","name":"Yakitri","address":"47253 La Follette Alley"},{"id":"558","name":"Zoonder","address":"2746 Calypso Way"},{"id":"559","name":"JumpXS","address":"4376 Clyde Gallagher Plaza"},{"id":"560","name":"Realpoint","address":"4 Meadow Ridge Lane"},{"id":"561","name":"Fivespan","address":"4326 Kipling Junction"},{"id":"562","name":"Devshare","address":"6 Oriole Center"},{"id":"563","name":"Dynazzy","address":"874 Maple Plaza"},{"id":"564","name":"Bubblemix","address":"30 6th Alley"},{"id":"565","name":"Eire","address":"8092 Clemons Circle"},{"id":"566","name":"Edgetag","address":"28059 Garrison Street"},{"id":"567","name":"Mydo","address":"43 New Castle Junction"},{"id":"568","name":"Quamba","address":"3902 Butternut Plaza"},{"id":"569","name":"Wikido","address":"44841 Randy Terrace"},{"id":"570","name":"Skyba","address":"50667 Hintze Street"},{"id":"571","name":"BlogXS","address":"484 Maple Parkway"},{"id":"572","name":"Buzzster","address":"38106 Cordelia Place"},{"id":"573","name":"Myworks","address":"9 Little Fleur Trail"},{"id":"574","name":"Browsedrive","address":"0 Jackson Court"},{"id":"575","name":"Youbridge","address":"1 Crescent Oaks Road"},{"id":"576","name":"Camimbo","address":"34048 Nevada Junction"},{"id":"577","name":"Wordify","address":"73431 Cascade Drive"},{"id":"578","name":"Babblestorm","address":"998 Granby Trail"},{"id":"579","name":"Cogibox","address":"112 Helena Avenue"},{"id":"580","name":"Edgeify","address":"804 Grasskamp Way"},{"id":"581","name":"Realbuzz","address":"81945 Ridgeway Drive"},{"id":"582","name":"Bluejam","address":"2 Lake View Lane"},{"id":"583","name":"Thoughtstorm","address":"9 Loftsgordon Place"},{"id":"584","name":"Blognation","address":"0962 Cordelia Way"},{"id":"585","name":"Shuffletag","address":"071 Katie Street"},{"id":"586","name":"Chatterpoint","address":"0005 Basil Point"},{"id":"587","name":"Topicware","address":"85 7th Trail"},{"id":"588","name":"Skajo","address":"74 Manufacturers Place"},{"id":"589","name":"Youfeed","address":"584 John Wall Lane"},{"id":"590","name":"Youfeed","address":"646 Waywood Terrace"},{"id":"591","name":"Cogilith","address":"27632 Donald Crossing"},{"id":"592","name":"Zoombox","address":"381 Harper Center"},{"id":"593","name":"Roodel","address":"04279 Di Loreto Junction"},{"id":"594","name":"Quimba","address":"383 Waxwing Place"},{"id":"595","name":"Bubblebox","address":"1120 Aberg Parkway"},{"id":"596","name":"Skivee","address":"7098 Havey Trail"},{"id":"597","name":"Meemm","address":"76 Maple Pass"},{"id":"598","name":"Shuffledrive","address":"5776 Park Meadow Lane"},{"id":"599","name":"Ntag","address":"7180 Dexter Pass"},{"id":"600","name":"Blogpad","address":"8 Ridgeview Trail"},{"id":"601","name":"Buzzshare","address":"0956 International Crossing"},{"id":"602","name":"Jayo","address":"80 Petterle Terrace"},{"id":"603","name":"Flipstorm","address":"18 5th Street"},{"id":"604","name":"Zoovu","address":"88 Red Cloud Pass"},{"id":"605","name":"Realcube","address":"263 Oakridge Drive"},{"id":"606","name":"Skyndu","address":"5 Heffernan Plaza"},{"id":"607","name":"Edgeclub","address":"9 Morrow Street"},{"id":"608","name":"Youspan","address":"743 Sheridan Place"},{"id":"609","name":"Oyoba","address":"671 Meadow Vale Drive"},{"id":"610","name":"Topiczoom","address":"826 West Avenue"},{"id":"611","name":"Ozu","address":"12 Sutherland Trail"},{"id":"612","name":"Bubblebox","address":"18161 Eagle Crest Way"},{"id":"613","name":"Fivechat","address":"55825 Coleman Terrace"},{"id":"614","name":"Twitterwire","address":"13 Del Mar Lane"},{"id":"615","name":"Kamba","address":"70235 Becker Park"},{"id":"616","name":"Blogtags","address":"16798 Hoffman Center"},{"id":"617","name":"Skinder","address":"54 Columbus Hill"},{"id":"618","name":"Mynte","address":"1350 Canary Drive"},{"id":"619","name":"Tagfeed","address":"69657 Sachtjen Pass"},{"id":"620","name":"Yakijo","address":"8 Rieder Way"},{"id":"621","name":"Flashspan","address":"1865 Brentwood Crossing"},{"id":"622","name":"Babbleblab","address":"22303 Gale Way"},{"id":"623","name":"Camimbo","address":"138 Haas Hill"},{"id":"624","name":"Vipe","address":"0412 Schiller Hill"},{"id":"625","name":"Trudeo","address":"7695 Tomscot Center"},{"id":"626","name":"Wikizz","address":"8511 Duke Parkway"},{"id":"627","name":"Oyoyo","address":"726 Caliangt Way"},{"id":"628","name":"Thoughtworks","address":"6 Scott Parkway"},{"id":"629","name":"Vinder","address":"2 Brickson Park Junction"},{"id":"630","name":"Wikizz","address":"146 Lakewood Alley"},{"id":"631","name":"Kimia","address":"34 Schmedeman Street"},{"id":"632","name":"Gigashots","address":"251 Algoma Place"},{"id":"633","name":"Zoomdog","address":"4 Ridgeview Place"},{"id":"634","name":"Skiptube","address":"578 Summerview Circle"},{"id":"635","name":"Meejo","address":"1 Fairfield Pass"},{"id":"636","name":"Flipbug","address":"6283 Manitowish Place"},{"id":"637","name":"Twimm","address":"2 Mariners Cove Drive"},{"id":"638","name":"Thoughtstorm","address":"164 Macpherson Parkway"},{"id":"639","name":"Skipstorm","address":"7343 Muir Plaza"},{"id":"640","name":"Feednation","address":"5 Elka Avenue"},{"id":"641","name":"Feedbug","address":"5 Lien Parkway"},{"id":"642","name":"Katz","address":"49206 Schiller Drive"},{"id":"643","name":"Dabtype","address":"71857 Stoughton Place"},{"id":"644","name":"Centizu","address":"12 Moland Road"},{"id":"645","name":"Chatterbridge","address":"48953 Bunting Street"},{"id":"646","name":"Centidel","address":"77650 Annamark Road"},{"id":"647","name":"Yodel","address":"21852 Elmside Court"},{"id":"648","name":"Feedfire","address":"83854 Porter Crossing"},{"id":"649","name":"Kimia","address":"3411 Florence Street"},{"id":"650","name":"Mymm","address":"4 Ryan Junction"},{"id":"651","name":"Mynte","address":"55 Hovde Point"},{"id":"652","name":"Vidoo","address":"97 Holy Cross Point"},{"id":"653","name":"Photofeed","address":"50 Westport Alley"},{"id":"654","name":"Aibox","address":"34 Melvin Crossing"},{"id":"655","name":"Oba","address":"9 Cardinal Hill"},{"id":"656","name":"Divavu","address":"43581 Stang Park"},{"id":"657","name":"Zava","address":"24683 Doe Crossing Pass"},{"id":"658","name":"Oozz","address":"23794 Waubesa Crossing"},{"id":"659","name":"Voonder","address":"1 Northridge Crossing"},{"id":"660","name":"Flashdog","address":"39126 Thierer Trail"},{"id":"661","name":"Viva","address":"377 Duke Drive"},{"id":"662","name":"Meevee","address":"2088 Kinsman Lane"},{"id":"663","name":"Babbleopia","address":"2095 Hintze Hill"},{"id":"664","name":"Feedmix","address":"2 Melrose Street"},{"id":"665","name":"Skyndu","address":"44 Manley Trail"},{"id":"666","name":"Aivee","address":"80 Forest Run Park"},{"id":"667","name":"Fliptune","address":"329 Dixon Circle"},{"id":"668","name":"Devcast","address":"3 Sachtjen Park"},{"id":"669","name":"Ainyx","address":"41 Meadow Ridge Crossing"},{"id":"670","name":"Flashspan","address":"77976 Jay Terrace"},{"id":"671","name":"Zoonoodle","address":"82739 Jenna Pass"},{"id":"672","name":"Flashset","address":"91 Nevada Hill"},{"id":"673","name":"Roodel","address":"16 Dahle Plaza"},{"id":"674","name":"Zooxo","address":"29060 Shoshone Terrace"},{"id":"675","name":"Skyba","address":"1 Express Crossing"},{"id":"676","name":"Zoozzy","address":"5 Melody Hill"},{"id":"677","name":"Jaxbean","address":"458 Browning Plaza"},{"id":"678","name":"Livepath","address":"137 Eagle Crest Center"},{"id":"679","name":"Babblestorm","address":"4 Valley Edge Avenue"},{"id":"680","name":"Vipe","address":"9 Anderson Crossing"},{"id":"681","name":"Jazzy","address":"55130 Russell Drive"},{"id":"682","name":"Dabfeed","address":"2 Mosinee Avenue"},{"id":"683","name":"Wikivu","address":"5149 Leroy Avenue"},{"id":"684","name":"Meezzy","address":"8758 Sauthoff Avenue"},{"id":"685","name":"Skyble","address":"6640 Oakridge Court"},{"id":"686","name":"Agimba","address":"95 Lawn Terrace"},{"id":"687","name":"Brainbox","address":"2 Dayton Place"},{"id":"688","name":"Mudo","address":"83 Dorton Hill"},{"id":"689","name":"Brainbox","address":"5346 Meadow Vale Junction"},{"id":"690","name":"Zoonder","address":"7696 Graedel Alley"},{"id":"691","name":"Kamba","address":"7353 Stang Trail"},{"id":"692","name":"Jabbersphere","address":"6818 Farragut Avenue"},{"id":"693","name":"Skimia","address":"7364 Coolidge Terrace"},{"id":"694","name":"Quimm","address":"9 Hollow Ridge Alley"},{"id":"695","name":"Realblab","address":"7 Kingsford Drive"},{"id":"696","name":"Browsezoom","address":"747 Rusk Park"},{"id":"697","name":"Fatz","address":"5980 Banding Parkway"},{"id":"698","name":"Twitterwire","address":"13802 Ohio Crossing"},{"id":"699","name":"Pixope","address":"0 Barby Center"},{"id":"700","name":"Photospace","address":"67465 Forest Run Way"},{"id":"701","name":"Myworks","address":"5 Melby Pass"},{"id":"702","name":"Aimbu","address":"7 Brickson Park Drive"},{"id":"703","name":"Trilith","address":"89 Di Loreto Crossing"},{"id":"704","name":"Abata","address":"59870 Jenifer Way"},{"id":"705","name":"Meetz","address":"847 5th Point"},{"id":"706","name":"Dabvine","address":"43 Petterle Circle"},{"id":"707","name":"Photobean","address":"890 Lakeland Road"},{"id":"708","name":"Dabtype","address":"77096 Magdeline Plaza"},{"id":"709","name":"Jabbertype","address":"1 Gateway Alley"},{"id":"710","name":"Dynabox","address":"72968 Riverside Alley"},{"id":"711","name":"Divavu","address":"72 Kensington Road"},{"id":"712","name":"Layo","address":"31 Randy Place"},{"id":"713","name":"Yata","address":"33 Service Plaza"},{"id":"714","name":"Rhycero","address":"2199 Melrose Lane"},{"id":"715","name":"Youspan","address":"6 Melby Center"},{"id":"716","name":"Yambee","address":"50 Banding Junction"},{"id":"717","name":"Tekfly","address":"150 Mendota Hill"},{"id":"718","name":"Flipopia","address":"82 Main Crossing"},{"id":"719","name":"Browsezoom","address":"73793 Fuller Circle"},{"id":"720","name":"Aimbu","address":"0 Sullivan Court"},{"id":"721","name":"Demivee","address":"8216 Bellgrove Avenue"},{"id":"722","name":"Edgeclub","address":"900 Hovde Drive"},{"id":"723","name":"Chatterpoint","address":"8 Shasta Alley"},{"id":"724","name":"Zoovu","address":"8 Blackbird Crossing"},{"id":"725","name":"Topiczoom","address":"73433 Canary Road"},{"id":"726","name":"Oyoyo","address":"0544 Hazelcrest Trail"},{"id":"727","name":"Meejo","address":"8 Burrows Circle"},{"id":"728","name":"Trunyx","address":"239 Meadow Valley Court"},{"id":"729","name":"Realblab","address":"81 Redwing Crossing"},{"id":"730","name":"Tekfly","address":"68020 Fremont Place"},{"id":"731","name":"Buzzster","address":"694 Lake View Junction"},{"id":"732","name":"Voomm","address":"36405 Marquette Plaza"},{"id":"733","name":"Avavee","address":"95 Grover Street"},{"id":"734","name":"Jaxworks","address":"7534 Rockefeller Junction"},{"id":"735","name":"Podcat","address":"315 Crest Line Road"},{"id":"736","name":"Linktype","address":"900 Hauk Place"},{"id":"737","name":"Skinte","address":"11701 Walton Street"},{"id":"738","name":"LiveZ","address":"4 Dayton Drive"},{"id":"739","name":"Skinder","address":"93345 Meadow Valley Pass"},{"id":"740","name":"Camido","address":"7 Kropf Road"},{"id":"741","name":"Midel","address":"4281 Crest Line Point"},{"id":"742","name":"Youbridge","address":"829 Mesta Park"},{"id":"743","name":"Skaboo","address":"47391 Knutson Lane"},{"id":"744","name":"Bubbletube","address":"02 Burrows Crossing"},{"id":"745","name":"Yombu","address":"45011 Dahle Park"},{"id":"746","name":"Eare","address":"018 Gale Hill"},{"id":"747","name":"Fadeo","address":"82 Graedel Alley"},{"id":"748","name":"Quinu","address":"8 Pennsylvania Avenue"},{"id":"749","name":"Thoughtblab","address":"7747 Katie Trail"},{"id":"750","name":"Dabshots","address":"35 Pennsylvania Alley"},{"id":"751","name":"Skiba","address":"0742 Bartelt Plaza"},{"id":"752","name":"Skidoo","address":"44 Summer Ridge Pass"},{"id":"753","name":"Yozio","address":"869 Lien Place"},{"id":"754","name":"Gigashots","address":"589 Manufacturers Street"},{"id":"755","name":"Devbug","address":"69 Bartelt Place"},{"id":"756","name":"Gabcube","address":"94139 Holy Cross Circle"},{"id":"757","name":"Edgetag","address":"60 Kingsford Park"},{"id":"758","name":"Skibox","address":"42 Talisman Terrace"},{"id":"759","name":"Viva","address":"30256 Mitchell Place"},{"id":"760","name":"Skiba","address":"291 Alpine Drive"},{"id":"761","name":"Twimm","address":"6996 Sycamore Lane"},{"id":"762","name":"DabZ","address":"654 Monica Drive"},{"id":"763","name":"Skimia","address":"33 Montana Place"},{"id":"764","name":"Zoonoodle","address":"06184 Stang Way"},{"id":"765","name":"Kamba","address":"08 Anzinger Point"},{"id":"766","name":"Zoombox","address":"1 Dunning Alley"},{"id":"767","name":"Tagpad","address":"44115 Sycamore Road"},{"id":"768","name":"Wikivu","address":"8 Hallows Court"},{"id":"769","name":"Oodoo","address":"90 Division Lane"},{"id":"770","name":"Twimm","address":"6483 Toban Pass"},{"id":"771","name":"Feedspan","address":"75119 Pawling Trail"},{"id":"772","name":"Tagchat","address":"55392 Brentwood Place"},{"id":"773","name":"Yata","address":"0 Carpenter Center"},{"id":"774","name":"Yombu","address":"539 Carioca Alley"},{"id":"775","name":"Skimia","address":"48061 Fallview Circle"},{"id":"776","name":"Abata","address":"52486 Summerview Circle"},{"id":"777","name":"Twitterlist","address":"3072 Rigney Way"},{"id":"778","name":"Yambee","address":"521 Elka Point"},{"id":"779","name":"Zooxo","address":"3 Oak Valley Center"},{"id":"780","name":"Thoughtbridge","address":"5 Farragut Trail"},{"id":"781","name":"Browsetype","address":"9 Birchwood Parkway"},{"id":"782","name":"Zoonder","address":"4 Fulton Hill"},{"id":"783","name":"Zoozzy","address":"32 Westridge Plaza"},{"id":"784","name":"Yakitri","address":"5 Mockingbird Terrace"},{"id":"785","name":"Yacero","address":"21 Elka Street"},{"id":"786","name":"Zoomdog","address":"4042 Pleasure Circle"},{"id":"787","name":"Meeveo","address":"841 Lillian Way"},{"id":"788","name":"Thoughtblab","address":"1 Anderson Park"},{"id":"789","name":"Vimbo","address":"6 Brown Drive"},{"id":"790","name":"Thoughtbridge","address":"738 Sunnyside Avenue"},{"id":"791","name":"Gevee","address":"4969 Dryden Alley"},{"id":"792","name":"Nlounge","address":"15 Lighthouse Bay Pass"},{"id":"793","name":"Skynoodle","address":"93959 Welch Plaza"},{"id":"794","name":"Realfire","address":"2 Hanover Center"},{"id":"795","name":"Avamba","address":"2 John Wall Circle"},{"id":"796","name":"Yodel","address":"1875 Buell Center"},{"id":"797","name":"Topicshots","address":"7 Buena Vista Terrace"},{"id":"798","name":"Jabbertype","address":"8264 Maple Wood Parkway"},{"id":"799","name":"Thoughtblab","address":"48 Starling Place"},{"id":"800","name":"Topiclounge","address":"3 Merchant Street"},{"id":"801","name":"Aivee","address":"474 Sommers Lane"},{"id":"802","name":"Wikizz","address":"3954 Havey Center"},{"id":"803","name":"Youspan","address":"8 Ridgeway Way"},{"id":"804","name":"Skibox","address":"2072 Hintze Avenue"},{"id":"805","name":"Lazz","address":"508 Bellgrove Crossing"},{"id":"806","name":"Brainsphere","address":"7 Northport Point"},{"id":"807","name":"Browsebug","address":"5 Warner Street"},{"id":"808","name":"Thoughtmix","address":"897 Jenna Drive"},{"id":"809","name":"Eidel","address":"66971 Dexter Center"},{"id":"810","name":"Mymm","address":"32631 Maple Wood Point"},{"id":"811","name":"Babblestorm","address":"6 Havey Parkway"},{"id":"812","name":"Skimia","address":"780 Orin Place"},{"id":"813","name":"Yakijo","address":"3 Sage Avenue"},{"id":"814","name":"Twitterlist","address":"7357 Lyons Lane"},{"id":"815","name":"Geba","address":"6125 Cardinal Plaza"},{"id":"816","name":"Twimbo","address":"6979 Corben Point"},{"id":"817","name":"Talane","address":"8153 Grayhawk Court"},{"id":"818","name":"Skidoo","address":"68515 Del Sol Avenue"},{"id":"819","name":"Edgetag","address":"90 Lake View Lane"},{"id":"820","name":"Cogibox","address":"411 Emmet Alley"},{"id":"821","name":"Quire","address":"552 Randy Terrace"},{"id":"822","name":"Zooveo","address":"46938 Hauk Pass"},{"id":"823","name":"Roombo","address":"57222 Banding Street"},{"id":"824","name":"Cogidoo","address":"6 Prentice Park"},{"id":"825","name":"Dabtype","address":"87 Mosinee Court"},{"id":"826","name":"Wikibox","address":"682 Esch Terrace"},{"id":"827","name":"Divavu","address":"41 Hovde Place"},{"id":"828","name":"Quatz","address":"3 Valley Edge Avenue"},{"id":"829","name":"Eayo","address":"0512 Utah Parkway"},{"id":"830","name":"Pixope","address":"059 Westport Terrace"},{"id":"831","name":"Rooxo","address":"42670 Westport Lane"},{"id":"832","name":"Layo","address":"0421 Killdeer Street"},{"id":"833","name":"Janyx","address":"3914 Little Fleur Trail"},{"id":"834","name":"Oyonder","address":"50 Helena Pass"},{"id":"835","name":"Skilith","address":"15993 Cherokee Lane"},{"id":"836","name":"Quire","address":"3720 Knutson Alley"},{"id":"837","name":"Linkbuzz","address":"1 Lindbergh Drive"},{"id":"838","name":"Podcat","address":"2 Rieder Trail"},{"id":"839","name":"Roomm","address":"5667 Reindahl Point"},{"id":"840","name":"Oozz","address":"76 Tomscot Center"},{"id":"841","name":"Layo","address":"79 Vidon Junction"},{"id":"842","name":"Rhynyx","address":"36934 Russell Street"},{"id":"843","name":"Browsedrive","address":"4098 Clarendon Avenue"},{"id":"844","name":"Skipfire","address":"9 Eggendart Point"},{"id":"845","name":"Divavu","address":"3083 Hoard Junction"},{"id":"846","name":"Flipopia","address":"1 Daystar Crossing"},{"id":"847","name":"Katz","address":"08 Lawn Avenue"},{"id":"848","name":"Abata","address":"0776 Mayfield Alley"},{"id":"849","name":"Twinte","address":"5 Valley Edge Court"},{"id":"850","name":"Trupe","address":"7 Fordem Drive"},{"id":"851","name":"Feedspan","address":"180 Harbort Way"},{"id":"852","name":"Jayo","address":"72 Oak Valley Hill"},{"id":"853","name":"Myworks","address":"73 Loftsgordon Alley"},{"id":"854","name":"Rhynoodle","address":"5 Schmedeman Circle"},{"id":"855","name":"Shuffledrive","address":"70997 Erie Junction"},{"id":"856","name":"Lazzy","address":"8225 Sutherland Trail"},{"id":"857","name":"Yabox","address":"84 Main Junction"},{"id":"858","name":"Snaptags","address":"88747 Donald Park"},{"id":"859","name":"Yodel","address":"5048 Briar Crest Lane"},{"id":"860","name":"Zoozzy","address":"4067 Union Place"},{"id":"861","name":"Midel","address":"7200 Hayes Alley"},{"id":"862","name":"Brightbean","address":"07599 Rusk Street"},{"id":"863","name":"Skinder","address":"058 Badeau Center"},{"id":"864","name":"Aivee","address":"0 Oxford Terrace"},{"id":"865","name":"Gabtune","address":"77 Browning Way"},{"id":"866","name":"Buzzbean","address":"498 Norway Maple Road"},{"id":"867","name":"Yodel","address":"442 Bultman Trail"},{"id":"868","name":"Wikibox","address":"1414 Washington Center"},{"id":"869","name":"Zazio","address":"46 Debs Junction"},{"id":"870","name":"Skinte","address":"3 Crowley Lane"},{"id":"871","name":"Kimia","address":"42431 Maryland Park"},{"id":"872","name":"Eazzy","address":"4 Tony Junction"},{"id":"873","name":"Gabvine","address":"31773 Nova Street"},{"id":"874","name":"Meezzy","address":"3191 Hoffman Road"},{"id":"875","name":"Rhynyx","address":"185 Duke Park"},{"id":"876","name":"Mycat","address":"8547 Forest Run Circle"},{"id":"877","name":"Oyoyo","address":"99 Buell Way"},{"id":"878","name":"Shuffletag","address":"51 Logan Road"},{"id":"879","name":"Skibox","address":"49340 Oakridge Drive"},{"id":"880","name":"Tazzy","address":"0572 Caliangt Drive"},{"id":"881","name":"Eadel","address":"4 Logan Court"},{"id":"882","name":"Thoughtsphere","address":"2965 Heath Lane"},{"id":"883","name":"Dynabox","address":"81088 Dwight Way"},{"id":"884","name":"Dynabox","address":"3584 Messerschmidt Pass"},{"id":"885","name":"Zoozzy","address":"173 Bashford Center"},{"id":"886","name":"Jabberstorm","address":"2 Manitowish Hill"},{"id":"887","name":"Realblab","address":"131 Riverside Lane"},{"id":"888","name":"Quinu","address":"7185 Stephen Street"},{"id":"889","name":"Oba","address":"28 Duke Pass"},{"id":"890","name":"Twiyo","address":"5 Karstens Avenue"},{"id":"891","name":"Dynava","address":"64938 Killdeer Crossing"},{"id":"892","name":"Yata","address":"6 New Castle Crossing"},{"id":"893","name":"Meevee","address":"55 Pankratz Lane"},{"id":"894","name":"Eire","address":"3810 Raven Circle"},{"id":"895","name":"Yacero","address":"3 Sommers Crossing"},{"id":"896","name":"Eamia","address":"47 Welch Pass"},{"id":"897","name":"Zooxo","address":"796 Crescent Oaks Avenue"},{"id":"898","name":"Layo","address":"92421 Lien Plaza"},{"id":"899","name":"Devshare","address":"5 Southridge Circle"},{"id":"900","name":"Yodel","address":"1735 Truax Lane"},{"id":"901","name":"Babbleset","address":"72581 Sutherland Terrace"},{"id":"902","name":"Zooxo","address":"0 North Road"},{"id":"903","name":"Innojam","address":"241 South Circle"},{"id":"904","name":"Demizz","address":"215 Rigney Point"},{"id":"905","name":"Wikido","address":"542 Twin Pines Point"},{"id":"906","name":"Zoomcast","address":"5297 Westend Road"},{"id":"907","name":"Rhyzio","address":"09 Packers Crossing"},{"id":"908","name":"Jazzy","address":"614 Buhler Pass"},{"id":"909","name":"Realbridge","address":"342 Artisan Center"},{"id":"910","name":"Agimba","address":"48843 Maple Road"},{"id":"911","name":"Skyba","address":"9685 Blue Bill Park Road"},{"id":"912","name":"Edgeclub","address":"9568 Milwaukee Crossing"},{"id":"913","name":"Teklist","address":"45420 Norway Maple Alley"},{"id":"914","name":"Tekfly","address":"112 Scofield Trail"},{"id":"915","name":"Flipbug","address":"9 Gulseth Avenue"},{"id":"916","name":"Kamba","address":"43 Buena Vista Pass"},{"id":"917","name":"Kwideo","address":"29 Gina Street"},{"id":"918","name":"Yamia","address":"78259 Sycamore Pass"},{"id":"919","name":"Mydo","address":"6535 Mccormick Pass"},{"id":"920","name":"Feedfish","address":"63610 Delaware Hill"},{"id":"921","name":"Abatz","address":"9767 Rutledge Center"},{"id":"922","name":"Miboo","address":"115 Kropf Alley"},{"id":"923","name":"Dabshots","address":"0076 Sunbrook Crossing"},{"id":"924","name":"Devbug","address":"61 Norway Maple Parkway"},{"id":"925","name":"Brainverse","address":"18 Oak Valley Way"},{"id":"926","name":"Vinder","address":"5 Oneill Pass"},{"id":"927","name":"Edgeblab","address":"1 Vernon Drive"},{"id":"928","name":"Livefish","address":"2636 Dorton Road"},{"id":"929","name":"Eabox","address":"911 Independence Hill"},{"id":"930","name":"Thoughtbeat","address":"68677 Anniversary Point"},{"id":"931","name":"Tagchat","address":"5 Dahle Place"},{"id":"932","name":"Avamm","address":"83 Paget Place"},{"id":"933","name":"Edgeblab","address":"332 Valley Edge Pass"},{"id":"934","name":"Skimia","address":"0588 Mcbride Terrace"},{"id":"935","name":"Meemm","address":"4 Stoughton Circle"},{"id":"936","name":"Brainverse","address":"55 2nd Junction"},{"id":"937","name":"Zoonoodle","address":"75987 Golf Street"},{"id":"938","name":"Kamba","address":"95255 Schurz Terrace"},{"id":"939","name":"Trudeo","address":"354 Harbort Lane"},{"id":"940","name":"Dynabox","address":"083 Mandrake Circle"},{"id":"941","name":"Oloo","address":"9206 Hayes Park"},{"id":"942","name":"Zooxo","address":"279 Mariners Cove Drive"},{"id":"943","name":"Blognation","address":"711 Novick Park"},{"id":"944","name":"Ozu","address":"05 Novick Point"},{"id":"945","name":"Tekfly","address":"339 Magdeline Street"},{"id":"946","name":"Skiptube","address":"545 Lawn Point"},{"id":"947","name":"Geba","address":"705 Maryland Crossing"},{"id":"948","name":"Aivee","address":"41 Briar Crest Lane"},{"id":"949","name":"Snaptags","address":"731 Autumn Leaf Pass"},{"id":"950","name":"Riffpedia","address":"7345 Corscot Crossing"},{"id":"951","name":"Lazzy","address":"068 Birchwood Parkway"},{"id":"952","name":"Camimbo","address":"5223 Anzinger Lane"},{"id":"953","name":"Jabberbean","address":"510 Crescent Oaks Parkway"},{"id":"954","name":"Flashset","address":"10050 Saint Paul Avenue"},{"id":"955","name":"Buzzbean","address":"21 Eagle Crest Lane"},{"id":"956","name":"Realmix","address":"3 Eastlawn Circle"},{"id":"957","name":"Kwimbee","address":"55 Pawling Trail"},{"id":"958","name":"Janyx","address":"176 Marquette Drive"},{"id":"959","name":"Rooxo","address":"5 Union Lane"},{"id":"960","name":"Voomm","address":"021 Browning Way"},{"id":"961","name":"Vidoo","address":"6432 Corry Street"},{"id":"962","name":"Skivee","address":"07 Dixon Center"},{"id":"963","name":"Edgeify","address":"229 Brickson Park Drive"},{"id":"964","name":"Trudeo","address":"12 Meadow Valley Alley"},{"id":"965","name":"Eimbee","address":"5 Troy Street"},{"id":"966","name":"Twitterworks","address":"4 Golden Leaf Point"},{"id":"967","name":"Skaboo","address":"9353 Londonderry Place"},{"id":"968","name":"Pixonyx","address":"8753 Welch Lane"},{"id":"969","name":"Meejo","address":"695 David Way"},{"id":"970","name":"Tazzy","address":"99402 Gateway Trail"},{"id":"971","name":"Wordpedia","address":"4 Derek Center"},{"id":"972","name":"Photobean","address":"9 Walton Crossing"},{"id":"973","name":"Agivu","address":"5670 Valley Edge Terrace"},{"id":"974","name":"Eabox","address":"518 Linden Road"},{"id":"975","name":"Flipopia","address":"0507 Lighthouse Bay Street"},{"id":"976","name":"Photofeed","address":"2375 Stephen Place"},{"id":"977","name":"Eayo","address":"2761 Kingsford Plaza"},{"id":"978","name":"Meeveo","address":"9 Bunting Alley"},{"id":"979","name":"Browsezoom","address":"4004 Canary Junction"},{"id":"980","name":"Trupe","address":"00552 Mesta Place"},{"id":"981","name":"Fanoodle","address":"42 Butterfield Lane"},{"id":"982","name":"Centidel","address":"72122 Judy Park"},{"id":"983","name":"Skipfire","address":"079 Jana Road"},{"id":"984","name":"Vimbo","address":"00288 Tomscot Lane"},{"id":"985","name":"Rhycero","address":"681 Amoth Alley"},{"id":"986","name":"Zoomdog","address":"2 3rd Way"},{"id":"987","name":"Twitterbridge","address":"9572 Vernon Drive"},{"id":"988","name":"Dabshots","address":"58824 Maple Street"},{"id":"989","name":"Trilith","address":"84672 Calypso Center"},{"id":"990","name":"Pixope","address":"5595 Mallard Junction"},{"id":"991","name":"Edgetag","address":"57 Erie Alley"},{"id":"992","name":"Twitterwire","address":"2598 Bashford Hill"},{"id":"993","name":"Wordpedia","address":"2 Moulton Lane"},{"id":"994","name":"Divavu","address":"080 Gina Plaza"},{"id":"995","name":"Cogilith","address":"52 Waywood Trail"},{"id":"996","name":"Skaboo","address":"6 Bay Street"},{"id":"997","name":"Cogidoo","address":"22487 Redwing Trail"},{"id":"998","name":"Reallinks","address":"2034 Hoard Plaza"},{"id":"999","name":"Dynabox","address":"5470 Dawn Junction"},{"id":"1000","name":"Topicstorm","address":"9 Glacier Hill Pass"}]').map((function(e){return We(We({},e),{},{checked:!1})}))},reducers:{addItem:function(e,t){e.items.push(We(We({},t.payload),{},{id:Date.now().toString(),checked:!1}))},removeItem:function(e,t){e.items=e.items.filter((function(e){return e.id!==t.payload}))},toggleChecked:function(e,t){e.items=e.items.map((function(e){return e.id===t.payload?We(We({},e),{},{checked:!e.checked}):e}))},setCheckedById:function(e,t){e.items=e.items.map((function(e){return e.id===t.payload.id?We(We({},e),{},{checked:t.payload.checked}):e}))},selectAll:function(e){e.items=e.items.map((function(e){return We(We({},e),{},{checked:!0})}))},unselectAll:function(e){e.items=e.items.map((function(e){return We(We({},e),{},{checked:!1})}))},removeSelected:function(e){e.items=e.items.filter((function(e){return!e.checked}))},setData:function(e,t){e.items=e.items.map((function(e){return e.id===t.payload.id?We(We({},e),t.payload):e}))}}}),Ge=je.actions,Ue=Ge.addItem,Ve=(Ge.toggleChecked,Ge.removeItem,Ge.selectAll),Ke=Ge.unselectAll,Je=Ge.removeSelected,$e=Ge.setCheckedById,Ye=Ge.setData,qe=n(72),Qe=n.n(qe),Xe=n(825),Ze=n.n(Xe),et=n(659),tt=n.n(et),nt=n(56),rt=n.n(nt),at=n(159),ot=n.n(at),it=n(113),lt=n.n(it),st=n(409),dt={};dt.styleTagTransform=lt(),dt.setAttributes=rt(),dt.insert=tt().bind(null,"head"),dt.domAPI=Ze(),dt.insertStyleElement=ot(),Qe()(st.Ay,dt),st.Ay&&st.Ay.locals&&st.Ay.locals;var ut=function(){return S()},ct=C,ft=function(e){return e.table.items},pt=function(e){return e.table.items.length&&e.table.items.every((function(e){return e.checked}))},mt=function(e){return e.table.items.length&&e.table.items.some((function(e){return e.checked}))},ht=n(233),gt={};gt.styleTagTransform=lt(),gt.setAttributes=rt(),gt.insert=tt().bind(null,"head"),gt.domAPI=Ze(),gt.insertStyleElement=ot(),Qe()(ht.Ay,gt),ht.Ay&&ht.Ay.locals&&ht.Ay.locals;var yt=["children","className","size","variant"];function vt(){return vt=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)({}).hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},vt.apply(null,arguments)}var bt=function(e){var t=e.children,n=e.className,a=e.size,o=void 0===a?"medium":a,i=e.variant,l=void 0===i?"primary":i,s=function(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n={};for(var r in e)if({}.hasOwnProperty.call(e,r)){if(-1!==t.indexOf(r))continue;n[r]=e[r]}return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],-1===t.indexOf(n)&&{}.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}(e,yt);return r.createElement("button",vt({className:ht.x6+" "+n+" "+function(){switch(o){case"small":return ht.EX;case"medium":return ht.Y;case"large":return ht.as;default:return""}}()+" "+function(){switch(l){case"primary":return ht.zB;case"secondary":return ht.Rm;case"danger":return ht.OR;default:return""}}()},s),t)},St=n(275),wt={};wt.styleTagTransform=lt(),wt.setAttributes=rt(),wt.insert=tt().bind(null,"head"),wt.domAPI=Ze(),wt.insertStyleElement=ot(),Qe()(St.Ay,wt),St.Ay&&St.Ay.locals&&St.Ay.locals;var _t=["children","className","size"];function Ct(){return Ct=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)({}).hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Ct.apply(null,arguments)}var kt=function(e){var t=e.children,n=e.className,a=e.size,o=void 0===a?"medium":a,i=function(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n={};for(var r in e)if({}.hasOwnProperty.call(e,r)){if(-1!==t.indexOf(r))continue;n[r]=e[r]}return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],-1===t.indexOf(n)&&{}.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}(e,_t);return r.createElement("input",Ct({type:"text",className:St.hF+" "+n+" "+function(){switch(o){case"small":return St.EX;case"medium":return St.Y;case"large":return St.as;default:return""}}()},i),t)},xt=n(685),Tt={};function At(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,o,i,l=[],s=!0,d=!1;try{if(o=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;s=!1}else for(;!(s=(r=o.call(n)).done)&&(l.push(r.value),l.length!==t);s=!0);}catch(e){d=!0,a=e}finally{try{if(!s&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(d)throw a}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Pt(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Pt(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Pt(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}Tt.styleTagTransform=lt(),Tt.setAttributes=rt(),Tt.insert=tt().bind(null,"head"),Tt.domAPI=Ze(),Tt.insertStyleElement=ot(),Qe()(xt.Ay,Tt),xt.Ay&&xt.Ay.locals&&xt.Ay.locals;var zt=function(e){var t=e.text,n=e.onChange,a=At((0,r.useState)(!1),2),o=a[0],i=a[1],l=At((0,r.useState)(t),2),s=l[0],d=l[1];return(0,r.useEffect)((function(){i(!1),d(t)}),[t]),o?r.createElement("div",{className:xt.iE},r.createElement(kt,{className:xt.jf,size:"small",value:s,onChange:function(e){d(e.target.value)}}),r.createElement(bt,{size:"small",className:xt.jf,onClick:function(){n(s),i(!1)}},"Save"),r.createElement(bt,{size:"small",variant:"danger",className:xt.jf,onClick:function(){i(!1),d(t)}},"Cancel")):r.createElement("div",{onClick:function(){i(!0)}},t)},Rt=n(393),Et={};Et.styleTagTransform=lt(),Et.setAttributes=rt(),Et.insert=tt().bind(null,"head"),Et.domAPI=Ze(),Et.insertStyleElement=ot(),Qe()(Rt.Ay,Et),Rt.Ay&&Rt.Ay.locals&&Rt.Ay.locals;var Ot=(0,r.memo)((function(e){var t,n=e.companyId,a=S(),o=ct((t=n,function(e){return e.table.items.find((function(e){return e.id===t}))}));if(!o)throw new Error("Company with id ".concat(n," not found"));var i=(0,r.useCallback)((function(){a($e({id:o.id,checked:!o.checked}))}),[o]),l=(0,r.useCallback)((function(e){a(Ye({id:o.id,name:e}))}),[o]),s=(0,r.useCallback)((function(e){a(Ye({id:o.id,address:e}))}),[o]),d=(0,r.useRef)(null);return r.createElement(Mt,null,r.createElement("div",{onClick:function(){var e;return null===(e=d.current)||void 0===e?void 0:e.click()}},r.createElement("input",{ref:d,type:"checkbox",checked:o.checked,onChange:i})),r.createElement(zt,{text:o.name,onChange:l}),r.createElement(zt,{text:o.address,onChange:s}))})),Mt=function(e){var t=e.children;return r.createElement("div",{className:Rt.MH},t)};function It(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function Lt(e){return Lt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Lt(e)}function Dt(e){var t=function(e){if("object"!=Lt(e)||!e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var n=t.call(e,"string");if("object"!=Lt(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==Lt(t)?t:t+""}function Nt(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,Dt(r.key),r)}}function Ft(e,t,n){return t&&Nt(e.prototype,t),n&&Nt(e,n),Object.defineProperty(e,"prototype",{writable:!1}),e}function Bt(e,t){if(t&&("object"==Lt(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function Wt(e){return Wt=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},Wt(e)}function Ht(e,t){return Ht=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},Ht(e,t)}function jt(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&Ht(e,t)}function Gt(e,t,n){return(t=Dt(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Ut(){var e=this.constructor.getDerivedStateFromProps(this.props,this.state);null!=e&&this.setState(e)}function Vt(e){this.setState(function(t){var n=this.constructor.getDerivedStateFromProps(e,t);return null!=n?n:null}.bind(this))}function Kt(e,t){try{var n=this.props,r=this.state;this.props=e,this.state=t,this.__reactInternalSnapshotFlag=!0,this.__reactInternalSnapshot=this.getSnapshotBeforeUpdate(n,r)}finally{this.props=n,this.state=r}}function Jt(e){var t=e.prototype;if(!t||!t.isReactComponent)throw new Error("Can only polyfill class components");if("function"!=typeof e.getDerivedStateFromProps&&"function"!=typeof t.getSnapshotBeforeUpdate)return e;var n=null,r=null,a=null;if("function"==typeof t.componentWillMount?n="componentWillMount":"function"==typeof t.UNSAFE_componentWillMount&&(n="UNSAFE_componentWillMount"),"function"==typeof t.componentWillReceiveProps?r="componentWillReceiveProps":"function"==typeof t.UNSAFE_componentWillReceiveProps&&(r="UNSAFE_componentWillReceiveProps"),"function"==typeof t.componentWillUpdate?a="componentWillUpdate":"function"==typeof t.UNSAFE_componentWillUpdate&&(a="UNSAFE_componentWillUpdate"),null!==n||null!==r||null!==a){var o=e.displayName||e.name,i="function"==typeof e.getDerivedStateFromProps?"getDerivedStateFromProps()":"getSnapshotBeforeUpdate()";throw Error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n"+o+" uses "+i+" but also contains the following legacy lifecycles:"+(null!==n?"\n  "+n:"")+(null!==r?"\n  "+r:"")+(null!==a?"\n  "+a:"")+"\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://fb.me/react-async-component-lifecycle-hooks")}if("function"==typeof e.getDerivedStateFromProps&&(t.componentWillMount=Ut,t.componentWillReceiveProps=Vt),"function"==typeof t.getSnapshotBeforeUpdate){if("function"!=typeof t.componentDidUpdate)throw new Error("Cannot polyfill getSnapshotBeforeUpdate() for components that do not define componentDidUpdate() on the prototype");t.componentWillUpdate=Kt;var l=t.componentDidUpdate;t.componentDidUpdate=function(e,t,n){var r=this.__reactInternalSnapshotFlag?this.__reactInternalSnapshot:n;l.call(this,e,t,r)}}return e}function $t(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Yt(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?$t(Object(n),!0).forEach((function(t){Gt(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):$t(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function qt(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(e){}return(qt=function(){return!!e})()}Ut.__suppressDeprecationWarning=!0,Vt.__suppressDeprecationWarning=!0,Kt.__suppressDeprecationWarning=!0;var Qt=function(e){function t(){var e,n,r,a;It(this,t);for(var o=arguments.length,i=new Array(o),l=0;l<o;l++)i[l]=arguments[l];return n=this,r=t,a=[].concat(i),r=Wt(r),Gt(e=Bt(n,qt()?Reflect.construct(r,a||[],Wt(n).constructor):r.apply(n,a)),"state",{scrollToColumn:0,scrollToRow:0,instanceProps:{prevScrollToColumn:0,prevScrollToRow:0}}),Gt(e,"_columnStartIndex",0),Gt(e,"_columnStopIndex",0),Gt(e,"_rowStartIndex",0),Gt(e,"_rowStopIndex",0),Gt(e,"_onKeyDown",(function(t){var n=e.props,r=n.columnCount,a=n.disabled,o=n.mode,i=n.rowCount;if(!a){var l=e._getScrollState(),s=l.scrollToColumn,d=l.scrollToRow,u=e._getScrollState(),c=u.scrollToColumn,f=u.scrollToRow;switch(t.key){case"ArrowDown":f="cells"===o?Math.min(f+1,i-1):Math.min(e._rowStopIndex+1,i-1);break;case"ArrowLeft":c="cells"===o?Math.max(c-1,0):Math.max(e._columnStartIndex-1,0);break;case"ArrowRight":c="cells"===o?Math.min(c+1,r-1):Math.min(e._columnStopIndex+1,r-1);break;case"ArrowUp":f="cells"===o?Math.max(f-1,0):Math.max(e._rowStartIndex-1,0)}c===s&&f===d||(t.preventDefault(),e._updateScrollState({scrollToColumn:c,scrollToRow:f}))}})),Gt(e,"_onSectionRendered",(function(t){var n=t.columnStartIndex,r=t.columnStopIndex,a=t.rowStartIndex,o=t.rowStopIndex;e._columnStartIndex=n,e._columnStopIndex=r,e._rowStartIndex=a,e._rowStopIndex=o})),e}return jt(t,e),Ft(t,[{key:"setScrollIndexes",value:function(e){var t=e.scrollToColumn,n=e.scrollToRow;this.setState({scrollToRow:n,scrollToColumn:t})}},{key:"render",value:function(){var e=this.props,t=e.className,n=e.children,a=this._getScrollState(),o=a.scrollToColumn,i=a.scrollToRow;return r.createElement("div",{className:t,onKeyDown:this._onKeyDown},n({onSectionRendered:this._onSectionRendered,scrollToColumn:o,scrollToRow:i}))}},{key:"_getScrollState",value:function(){return this.props.isControlled?this.props:this.state}},{key:"_updateScrollState",value:function(e){var t=e.scrollToColumn,n=e.scrollToRow,r=this.props,a=r.isControlled,o=r.onScrollToChange;"function"==typeof o&&o({scrollToColumn:t,scrollToRow:n}),a||this.setState({scrollToColumn:t,scrollToRow:n})}}],[{key:"getDerivedStateFromProps",value:function(e,t){return e.isControlled?{}:e.scrollToColumn!==t.instanceProps.prevScrollToColumn||e.scrollToRow!==t.instanceProps.prevScrollToRow?Yt(Yt({},t),{},{scrollToColumn:e.scrollToColumn,scrollToRow:e.scrollToRow,instanceProps:{prevScrollToColumn:e.scrollToColumn,prevScrollToRow:e.scrollToRow}}):{}}}])}(r.PureComponent);function Xt(e,t){var r,a=void 0!==(r=void 0!==t?t:"undefined"!=typeof window?window:"undefined"!=typeof self?self:n.g).document&&r.document.attachEvent;if(!a){var o=function(){var e=r.requestAnimationFrame||r.mozRequestAnimationFrame||r.webkitRequestAnimationFrame||function(e){return r.setTimeout(e,20)};return function(t){return e(t)}}(),i=function(){var e=r.cancelAnimationFrame||r.mozCancelAnimationFrame||r.webkitCancelAnimationFrame||r.clearTimeout;return function(t){return e(t)}}(),l=function(e){var t=e.__resizeTriggers__,n=t.firstElementChild,r=t.lastElementChild,a=n.firstElementChild;r.scrollLeft=r.scrollWidth,r.scrollTop=r.scrollHeight,a.style.width=n.offsetWidth+1+"px",a.style.height=n.offsetHeight+1+"px",n.scrollLeft=n.scrollWidth,n.scrollTop=n.scrollHeight},s=function(e){if(!(e.target.className&&"function"==typeof e.target.className.indexOf&&e.target.className.indexOf("contract-trigger")<0&&e.target.className.indexOf("expand-trigger")<0)){var t=this;l(this),this.__resizeRAF__&&i(this.__resizeRAF__),this.__resizeRAF__=o((function(){(function(e){return e.offsetWidth!=e.__resizeLast__.width||e.offsetHeight!=e.__resizeLast__.height})(t)&&(t.__resizeLast__.width=t.offsetWidth,t.__resizeLast__.height=t.offsetHeight,t.__resizeListeners__.forEach((function(n){n.call(t,e)})))}))}},d=!1,u="",c="animationstart",f="Webkit Moz O ms".split(" "),p="webkitAnimationStart animationstart oAnimationStart MSAnimationStart".split(" "),m=r.document.createElement("fakeelement");if(void 0!==m.style.animationName&&(d=!0),!1===d)for(var h=0;h<f.length;h++)if(void 0!==m.style[f[h]+"AnimationName"]){u="-"+f[h].toLowerCase()+"-",c=p[h],d=!0;break}var g="resizeanim",y="@"+u+"keyframes "+g+" { from { opacity: 0; } to { opacity: 0; } } ",v=u+"animation: 1ms "+g+"; "}return{addResizeListener:function(t,n){if(a)t.attachEvent("onresize",n);else{if(!t.__resizeTriggers__){var o=t.ownerDocument,i=r.getComputedStyle(t);i&&"static"==i.position&&(t.style.position="relative"),function(t){if(!t.getElementById("detectElementResize")){var n=(y||"")+".resize-triggers { "+(v||"")+'visibility: hidden; opacity: 0; } .resize-triggers, .resize-triggers > div, .contract-trigger:before { content: " "; display: block; position: absolute; top: 0; left: 0; height: 100%; width: 100%; overflow: hidden; z-index: -1; } .resize-triggers > div { background: #eee; overflow: auto; } .contract-trigger:before { width: 200%; height: 200%; }',r=t.head||t.getElementsByTagName("head")[0],a=t.createElement("style");a.id="detectElementResize",a.type="text/css",null!=e&&a.setAttribute("nonce",e),a.styleSheet?a.styleSheet.cssText=n:a.appendChild(t.createTextNode(n)),r.appendChild(a)}}(o),t.__resizeLast__={},t.__resizeListeners__=[],(t.__resizeTriggers__=o.createElement("div")).className="resize-triggers";var d=o.createElement("div");d.className="expand-trigger",d.appendChild(o.createElement("div"));var u=o.createElement("div");u.className="contract-trigger",t.__resizeTriggers__.appendChild(d),t.__resizeTriggers__.appendChild(u),t.appendChild(t.__resizeTriggers__),l(t),t.addEventListener("scroll",s,!0),c&&(t.__resizeTriggers__.__animationListener__=function(e){e.animationName==g&&l(t)},t.__resizeTriggers__.addEventListener(c,t.__resizeTriggers__.__animationListener__))}t.__resizeListeners__.push(n)}},removeResizeListener:function(e,t){if(a)e.detachEvent("onresize",t);else if(e.__resizeListeners__.splice(e.__resizeListeners__.indexOf(t),1),!e.__resizeListeners__.length){e.removeEventListener("scroll",s,!0),e.__resizeTriggers__.__animationListener__&&(e.__resizeTriggers__.removeEventListener(c,e.__resizeTriggers__.__animationListener__),e.__resizeTriggers__.__animationListener__=null);try{e.__resizeTriggers__=!e.removeChild(e.__resizeTriggers__)}catch(e){}}}}}function Zt(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function en(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Zt(Object(n),!0).forEach((function(t){Gt(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Zt(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function tn(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(e){}return(tn=function(){return!!e})()}Gt(Qt,"defaultProps",{disabled:!1,isControlled:!1,mode:"edges",scrollToColumn:0,scrollToRow:0}),Jt(Qt);var nn=function(e){function t(){var e,n,r,a;It(this,t);for(var o=arguments.length,i=new Array(o),l=0;l<o;l++)i[l]=arguments[l];return n=this,r=t,a=[].concat(i),r=Wt(r),Gt(e=Bt(n,tn()?Reflect.construct(r,a||[],Wt(n).constructor):r.apply(n,a)),"state",{height:e.props.defaultHeight||0,width:e.props.defaultWidth||0}),Gt(e,"_parentNode",void 0),Gt(e,"_autoSizer",void 0),Gt(e,"_window",void 0),Gt(e,"_detectElementResize",void 0),Gt(e,"_onResize",(function(){var t=e.props,n=t.disableHeight,r=t.disableWidth,a=t.onResize;if(e._parentNode){var o=e._parentNode.offsetHeight||0,i=e._parentNode.offsetWidth||0,l=(e._window||window).getComputedStyle(e._parentNode)||{},s=parseInt(l.paddingLeft,10)||0,d=parseInt(l.paddingRight,10)||0,u=parseInt(l.paddingTop,10)||0,c=parseInt(l.paddingBottom,10)||0,f=o-u-c,p=i-s-d;(!n&&e.state.height!==f||!r&&e.state.width!==p)&&(e.setState({height:o-u-c,width:i-s-d}),a({height:o,width:i}))}})),Gt(e,"_setRef",(function(t){e._autoSizer=t})),e}return jt(t,e),Ft(t,[{key:"componentDidMount",value:function(){var e=this.props.nonce;this._autoSizer&&this._autoSizer.parentNode&&this._autoSizer.parentNode.ownerDocument&&this._autoSizer.parentNode.ownerDocument.defaultView&&this._autoSizer.parentNode instanceof this._autoSizer.parentNode.ownerDocument.defaultView.HTMLElement&&(this._parentNode=this._autoSizer.parentNode,this._window=this._autoSizer.parentNode.ownerDocument.defaultView,this._detectElementResize=Xt(e,this._window),this._detectElementResize.addResizeListener(this._parentNode,this._onResize),this._onResize())}},{key:"componentWillUnmount",value:function(){this._detectElementResize&&this._parentNode&&this._detectElementResize.removeResizeListener(this._parentNode,this._onResize)}},{key:"render",value:function(){var e=this.props,t=e.children,n=e.className,a=e.disableHeight,o=e.disableWidth,i=e.style,l=this.state,s=l.height,d=l.width,u={overflow:"visible"},c={};return a||(u.height=0,c.height=s),o||(u.width=0,c.width=d),r.createElement("div",{className:n,ref:this._setRef,style:en(en({},u),i)},t(c))}}])}(r.Component);function rn(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(e){}return(rn=function(){return!!e})()}Gt(nn,"defaultProps",{onResize:function(){},disableHeight:!1,disableWidth:!1,style:{}});var an=function(e){function t(){var e,n,a,o;It(this,t);for(var i=arguments.length,l=new Array(i),s=0;s<i;s++)l[s]=arguments[s];return n=this,a=t,o=[].concat(l),a=Wt(a),Gt(e=Bt(n,rn()?Reflect.construct(a,o||[],Wt(n).constructor):a.apply(n,o)),"_child",r.createRef()),Gt(e,"_measure",(function(){var t=e.props,n=t.cache,r=t.columnIndex,a=void 0===r?0:r,o=t.parent,i=t.rowIndex,l=void 0===i?e.props.index||0:i,s=e._getCellMeasurements(),d=s.height,u=s.width;d===n.getHeight(l,a)&&u===n.getWidth(l,a)||(n.set(l,a,u,d),o&&"function"==typeof o.recomputeGridSize&&o.recomputeGridSize({columnIndex:a,rowIndex:l}))})),Gt(e,"_registerChild",(function(t){!t||t instanceof Element||console.warn("CellMeasurer registerChild expects to be passed Element or null"),e._child.current=t,t&&e._maybeMeasureCell()})),e}return jt(t,e),Ft(t,[{key:"componentDidMount",value:function(){this._maybeMeasureCell()}},{key:"componentDidUpdate",value:function(){this._maybeMeasureCell()}},{key:"render",value:function(){var e=this,t=this.props.children,n="function"==typeof t?t({measure:this._measure,registerChild:this._registerChild}):t;return null===n?n:(0,r.cloneElement)(n,{ref:function(t){"function"==typeof n.ref?n.ref(t):n.ref&&(n.ref.current=t),e._child.current=t}})}},{key:"_getCellMeasurements",value:function(){var e=this.props.cache,t=this._child.current;if(t&&t.ownerDocument&&t.ownerDocument.defaultView&&t instanceof t.ownerDocument.defaultView.HTMLElement){var n=t.style.width,r=t.style.height;e.hasFixedWidth()||(t.style.width="auto"),e.hasFixedHeight()||(t.style.height="auto");var a=Math.ceil(t.offsetHeight),o=Math.ceil(t.offsetWidth);return n&&(t.style.width=n),r&&(t.style.height=r),{height:a,width:o}}return{height:0,width:0}}},{key:"_maybeMeasureCell",value:function(){var e=this.props,t=e.cache,n=e.columnIndex,r=void 0===n?0:n,a=e.parent,o=e.rowIndex,i=void 0===o?this.props.index||0:o;if(!t.has(i,r)){var l=this._getCellMeasurements(),s=l.height,d=l.width;t.set(i,r,d,s),a&&"function"==typeof a.invalidateCellSizeAfterRender&&a.invalidateCellSizeAfterRender({columnIndex:r,rowIndex:i})}}}])}(r.PureComponent);function on(){return on=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)({}).hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},on.apply(null,arguments)}function ln(e){var t,n,r="";if("string"==typeof e||"number"==typeof e)r+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=ln(e[t]))&&(r&&(r+=" "),r+=n);else for(t in e)e[t]&&(r&&(r+=" "),r+=t);return r}Gt(an,"__internalCellMeasurerFlag",!1);const sn=function(){for(var e,t,n=0,r="";n<arguments.length;)(e=arguments[n++])&&(t=ln(e))&&(r&&(r+=" "),r+=t);return r};function dn(){var e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0],t={};return function(n){var r=n.callback,a=n.indices,o=Object.keys(a),i=!e||o.every((function(e){var t=a[e];return Array.isArray(t)?t.length>0:t>=0})),l=o.length!==Object.keys(t).length||o.some((function(e){var n=t[e],r=a[e];return Array.isArray(r)?n.join(",")!==r.join(","):n!==r}));t=a,i&&l&&r(a)}}const un=!("undefined"==typeof window||!window.document||!window.document.createElement);var cn;function fn(e){if((!cn&&0!==cn||e)&&un){var t=document.createElement("div");t.style.position="absolute",t.style.top="-9999px",t.style.width="50px",t.style.height="50px",t.style.overflow="scroll",document.body.appendChild(t),cn=t.offsetWidth-t.clientWidth,document.body.removeChild(t)}return cn}function pn(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function mn(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?pn(Object(n),!0).forEach((function(t){Gt(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):pn(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function hn(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(e){}return(hn=function(){return!!e})()}var gn="requested",yn=function(e){function t(){var e,n,r,a;It(this,t);for(var o=arguments.length,i=new Array(o),l=0;l<o;l++)i[l]=arguments[l];return n=this,r=t,a=[].concat(i),r=Wt(r),Gt(e=Bt(n,hn()?Reflect.construct(r,a||[],Wt(n).constructor):r.apply(n,a)),"state",{isScrolling:!1,scrollLeft:0,scrollTop:0}),Gt(e,"_calculateSizeAndPositionDataOnNextUpdate",!1),Gt(e,"_onSectionRenderedMemoizer",dn()),Gt(e,"_onScrollMemoizer",dn(!1)),Gt(e,"_invokeOnSectionRenderedHelper",(function(){var t=e.props,n=t.cellLayoutManager,r=t.onSectionRendered;e._onSectionRenderedMemoizer({callback:r,indices:{indices:n.getLastRenderedIndices()}})})),Gt(e,"_setScrollingContainerRef",(function(t){e._scrollingContainer=t})),Gt(e,"_updateScrollPositionForScrollToCell",(function(){var t=e.props,n=t.cellLayoutManager,r=t.height,a=t.scrollToAlignment,o=t.scrollToCell,i=t.width,l=e.state,s=l.scrollLeft,d=l.scrollTop;if(o>=0){var u=n.getScrollPositionForCell({align:a,cellIndex:o,height:r,scrollLeft:s,scrollTop:d,width:i});u.scrollLeft===s&&u.scrollTop===d||e._setScrollPosition(u)}})),Gt(e,"_onScroll",(function(t){if(t.target===e._scrollingContainer){e._enablePointerEventsAfterDelay();var n=e.props,r=n.cellLayoutManager,a=n.height,o=n.isScrollingChange,i=n.width,l=e._scrollbarSize,s=r.getTotalSize(),d=s.height,u=s.width,c=Math.max(0,Math.min(u-i+l,t.target.scrollLeft)),f=Math.max(0,Math.min(d-a+l,t.target.scrollTop));if(e.state.scrollLeft!==c||e.state.scrollTop!==f){var p=t.cancelable?"observed":gn;e.state.isScrolling||o(!0),e.setState({isScrolling:!0,scrollLeft:c,scrollPositionChangeReason:p,scrollTop:f})}e._invokeOnScrollMemoizer({scrollLeft:c,scrollTop:f,totalWidth:u,totalHeight:d})}})),e._scrollbarSize=fn(),void 0===e._scrollbarSize?(e._scrollbarSizeMeasured=!1,e._scrollbarSize=0):e._scrollbarSizeMeasured=!0,e}return jt(t,e),Ft(t,[{key:"recomputeCellSizesAndPositions",value:function(){this._calculateSizeAndPositionDataOnNextUpdate=!0,this.forceUpdate()}},{key:"componentDidMount",value:function(){var e=this.props,t=e.cellLayoutManager,n=e.scrollLeft,r=e.scrollToCell,a=e.scrollTop;this._scrollbarSizeMeasured||(this._scrollbarSize=fn(),this._scrollbarSizeMeasured=!0,this.setState({})),r>=0?this._updateScrollPositionForScrollToCell():(n>=0||a>=0)&&this._setScrollPosition({scrollLeft:n,scrollTop:a}),this._invokeOnSectionRenderedHelper();var o=t.getTotalSize(),i=o.height,l=o.width;this._invokeOnScrollMemoizer({scrollLeft:n||0,scrollTop:a||0,totalHeight:i,totalWidth:l})}},{key:"componentDidUpdate",value:function(e,t){var n=this.props,r=n.height,a=n.scrollToAlignment,o=n.scrollToCell,i=n.width,l=this.state,s=l.scrollLeft,d=l.scrollPositionChangeReason,u=l.scrollTop;d===gn&&(s>=0&&s!==t.scrollLeft&&s!==this._scrollingContainer.scrollLeft&&(this._scrollingContainer.scrollLeft=s),u>=0&&u!==t.scrollTop&&u!==this._scrollingContainer.scrollTop&&(this._scrollingContainer.scrollTop=u)),r===e.height&&a===e.scrollToAlignment&&o===e.scrollToCell&&i===e.width||this._updateScrollPositionForScrollToCell(),this._invokeOnSectionRenderedHelper()}},{key:"componentWillUnmount",value:function(){this._disablePointerEventsTimeoutId&&clearTimeout(this._disablePointerEventsTimeoutId)}},{key:"render",value:function(){var e=this.props,t=e.autoHeight,n=e.cellCount,a=e.cellLayoutManager,o=e.className,i=e.height,l=e.horizontalOverscanSize,s=e.id,d=e.noContentRenderer,u=e.style,c=e.verticalOverscanSize,f=e.width,p=this.state,m=p.isScrolling,h=p.scrollLeft,g=p.scrollTop;(this._lastRenderedCellCount!==n||this._lastRenderedCellLayoutManager!==a||this._calculateSizeAndPositionDataOnNextUpdate)&&(this._lastRenderedCellCount=n,this._lastRenderedCellLayoutManager=a,this._calculateSizeAndPositionDataOnNextUpdate=!1,a.calculateSizeAndPositionData());var y=a.getTotalSize(),v=y.height,b=y.width,S=Math.max(0,h-l),w=Math.max(0,g-c),_=Math.min(b,h+f+l),C=Math.min(v,g+i+c),k=i>0&&f>0?a.cellRenderers({height:C-w,isScrolling:m,width:_-S,x:S,y:w}):[],x={boxSizing:"border-box",direction:"ltr",height:t?"auto":i,position:"relative",WebkitOverflowScrolling:"touch",width:f,willChange:"transform"},T=v>i?this._scrollbarSize:0,A=b>f?this._scrollbarSize:0;return x.overflowX=b+T<=f?"hidden":"auto",x.overflowY=v+A<=i?"hidden":"auto",r.createElement("div",{ref:this._setScrollingContainerRef,"aria-label":this.props["aria-label"],className:sn("ReactVirtualized__Collection",o),id:s,onScroll:this._onScroll,role:"grid",style:mn(mn({},x),u),tabIndex:0},n>0&&r.createElement("div",{className:"ReactVirtualized__Collection__innerScrollContainer",style:{height:v,maxHeight:v,maxWidth:b,overflow:"hidden",pointerEvents:m?"none":"",width:b}},k),0===n&&d())}},{key:"_enablePointerEventsAfterDelay",value:function(){var e=this;this._disablePointerEventsTimeoutId&&clearTimeout(this._disablePointerEventsTimeoutId),this._disablePointerEventsTimeoutId=setTimeout((function(){(0,e.props.isScrollingChange)(!1),e._disablePointerEventsTimeoutId=null,e.setState({isScrolling:!1})}),150)}},{key:"_invokeOnScrollMemoizer",value:function(e){var t=this,n=e.scrollLeft,r=e.scrollTop,a=e.totalHeight,o=e.totalWidth;this._onScrollMemoizer({callback:function(e){var n=e.scrollLeft,r=e.scrollTop,i=t.props,l=i.height;(0,i.onScroll)({clientHeight:l,clientWidth:i.width,scrollHeight:a,scrollLeft:n,scrollTop:r,scrollWidth:o})},indices:{scrollLeft:n,scrollTop:r}})}},{key:"_setScrollPosition",value:function(e){var t=e.scrollLeft,n=e.scrollTop,r={scrollPositionChangeReason:gn};t>=0&&(r.scrollLeft=t),n>=0&&(r.scrollTop=n),(t>=0&&t!==this.state.scrollLeft||n>=0&&n!==this.state.scrollTop)&&this.setState(r)}}],[{key:"getDerivedStateFromProps",value:function(e,t){return 0!==e.cellCount||0===t.scrollLeft&&0===t.scrollTop?e.scrollLeft!==t.scrollLeft||e.scrollTop!==t.scrollTop?{scrollLeft:null!=e.scrollLeft?e.scrollLeft:t.scrollLeft,scrollTop:null!=e.scrollTop?e.scrollTop:t.scrollTop,scrollPositionChangeReason:gn}:null:{scrollLeft:0,scrollTop:0,scrollPositionChangeReason:gn}}}])}(r.PureComponent);Gt(yn,"defaultProps",{"aria-label":"grid",horizontalOverscanSize:0,noContentRenderer:function(){return null},onScroll:function(){return null},onSectionRendered:function(){return null},scrollToAlignment:"auto",scrollToCell:-1,style:{},verticalOverscanSize:0}),yn.propTypes={},Jt(yn);const vn=yn;var bn=function(){return Ft((function e(t){var n=t.height,r=t.width,a=t.x,o=t.y;It(this,e),this.height=n,this.width=r,this.x=a,this.y=o,this._indexMap={},this._indices=[]}),[{key:"addCellIndex",value:function(e){var t=e.index;this._indexMap[t]||(this._indexMap[t]=!0,this._indices.push(t))}},{key:"getCellIndices",value:function(){return this._indices}},{key:"toString",value:function(){return"".concat(this.x,",").concat(this.y," ").concat(this.width,"x").concat(this.height)}}])}(),Sn=function(){return Ft((function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:100;It(this,e),this._sectionSize=t,this._cellMetadata=[],this._sections={}}),[{key:"getCellIndices",value:function(e){var t=e.height,n=e.width,r=e.x,a=e.y,o={};return this.getSections({height:t,width:n,x:r,y:a}).forEach((function(e){return e.getCellIndices().forEach((function(e){o[e]=e}))})),Object.keys(o).map((function(e){return o[e]}))}},{key:"getCellMetadata",value:function(e){var t=e.index;return this._cellMetadata[t]}},{key:"getSections",value:function(e){for(var t=e.height,n=e.width,r=e.x,a=e.y,o=Math.floor(r/this._sectionSize),i=Math.floor((r+n-1)/this._sectionSize),l=Math.floor(a/this._sectionSize),s=Math.floor((a+t-1)/this._sectionSize),d=[],u=o;u<=i;u++)for(var c=l;c<=s;c++){var f="".concat(u,".").concat(c);this._sections[f]||(this._sections[f]=new bn({height:this._sectionSize,width:this._sectionSize,x:u*this._sectionSize,y:c*this._sectionSize})),d.push(this._sections[f])}return d}},{key:"getTotalSectionCount",value:function(){return Object.keys(this._sections).length}},{key:"toString",value:function(){var e=this;return Object.keys(this._sections).map((function(t){return e._sections[t].toString()}))}},{key:"registerCell",value:function(e){var t=e.cellMetadatum,n=e.index;this._cellMetadata[n]=t,this.getSections(t).forEach((function(e){return e.addCellIndex({index:n})}))}}])}();function wn(e){var t=e.align,n=void 0===t?"auto":t,r=e.cellOffset,a=e.cellSize,o=e.containerSize,i=e.currentOffset,l=r,s=l-o+a;switch(n){case"start":return l;case"end":return s;case"center":return l-(o-a)/2;default:return Math.max(s,Math.min(l,i))}}function _n(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(e){}return(_n=function(){return!!e})()}var Cn=function(e){function t(e,n){var r,a,o,i;return It(this,t),a=this,i=[e,n],o=Wt(o=t),(r=Bt(a,_n()?Reflect.construct(o,i||[],Wt(a).constructor):o.apply(a,i)))._cellMetadata=[],r._lastRenderedCellIndices=[],r._cellCache=[],r._isScrollingChange=r._isScrollingChange.bind(r),r._setCollectionViewRef=r._setCollectionViewRef.bind(r),r}return jt(t,e),Ft(t,[{key:"forceUpdate",value:function(){void 0!==this._collectionView&&this._collectionView.forceUpdate()}},{key:"recomputeCellSizesAndPositions",value:function(){this._cellCache=[],this._collectionView.recomputeCellSizesAndPositions()}},{key:"render",value:function(){var e=on({},(function(e){if(null==e)throw new TypeError("Cannot destructure "+e)}(this.props),this.props));return r.createElement(vn,on({cellLayoutManager:this,isScrollingChange:this._isScrollingChange,ref:this._setCollectionViewRef},e))}},{key:"calculateSizeAndPositionData",value:function(){var e=this.props,t=function(e){for(var t=e.cellCount,n=e.cellSizeAndPositionGetter,r=[],a=new Sn(e.sectionSize),o=0,i=0,l=0;l<t;l++){var s=n({index:l});if(null==s.height||isNaN(s.height)||null==s.width||isNaN(s.width)||null==s.x||isNaN(s.x)||null==s.y||isNaN(s.y))throw Error("Invalid metadata returned for cell ".concat(l,":\n        x:").concat(s.x,", y:").concat(s.y,", width:").concat(s.width,", height:").concat(s.height));o=Math.max(o,s.y+s.height),i=Math.max(i,s.x+s.width),r[l]=s,a.registerCell({cellMetadatum:s,index:l})}return{cellMetadata:r,height:o,sectionManager:a,width:i}}({cellCount:e.cellCount,cellSizeAndPositionGetter:e.cellSizeAndPositionGetter,sectionSize:e.sectionSize});this._cellMetadata=t.cellMetadata,this._sectionManager=t.sectionManager,this._height=t.height,this._width=t.width}},{key:"getLastRenderedIndices",value:function(){return this._lastRenderedCellIndices}},{key:"getScrollPositionForCell",value:function(e){var t=e.align,n=e.cellIndex,r=e.height,a=e.scrollLeft,o=e.scrollTop,i=e.width,l=this.props.cellCount;if(n>=0&&n<l){var s=this._cellMetadata[n];a=wn({align:t,cellOffset:s.x,cellSize:s.width,containerSize:i,currentOffset:a,targetIndex:n}),o=wn({align:t,cellOffset:s.y,cellSize:s.height,containerSize:r,currentOffset:o,targetIndex:n})}return{scrollLeft:a,scrollTop:o}}},{key:"getTotalSize",value:function(){return{height:this._height,width:this._width}}},{key:"cellRenderers",value:function(e){var t=this,n=e.height,r=e.isScrolling,a=e.width,o=e.x,i=e.y,l=this.props,s=l.cellGroupRenderer,d=l.cellRenderer;return this._lastRenderedCellIndices=this._sectionManager.getCellIndices({height:n,width:a,x:o,y:i}),s({cellCache:this._cellCache,cellRenderer:d,cellSizeAndPositionGetter:function(e){var n=e.index;return t._sectionManager.getCellMetadata({index:n})},indices:this._lastRenderedCellIndices,isScrolling:r})}},{key:"_isScrollingChange",value:function(e){e||(this._cellCache=[])}},{key:"_setCollectionViewRef",value:function(e){this._collectionView=e}}])}(r.PureComponent);function kn(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(e){}return(kn=function(){return!!e})()}function xn(e){var t=e.cellCount,n=e.cellSize,r=e.computeMetadataCallback,a=e.computeMetadataCallbackProps,o=e.nextCellsCount,i=e.nextCellSize,l=e.nextScrollToIndex,s=e.scrollToIndex,d=e.updateScrollOffsetForScrollToIndex;t===o&&("number"!=typeof n&&"number"!=typeof i||n===i)||(r(a),s>=0&&s===l&&d())}function Tn(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n={};for(var r in e)if({}.hasOwnProperty.call(e,r)){if(-1!==t.indexOf(r))continue;n[r]=e[r]}return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],-1===t.indexOf(n)&&{}.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}Gt(Cn,"defaultProps",{"aria-label":"grid",cellGroupRenderer:function(e){var t=e.cellCache,n=e.cellRenderer,r=e.cellSizeAndPositionGetter,a=e.indices,o=e.isScrolling;return a.map((function(e){var a=r({index:e}),i={index:e,isScrolling:o,key:e,style:{height:a.height,left:a.x,position:"absolute",top:a.y,width:a.width}};return o?(e in t||(t[e]=n(i)),t[e]):n(i)})).filter((function(e){return!!e}))}}),Cn.propTypes={},(function(e){function t(e,n){var r,a,o,i;return It(this,t),a=this,i=[e,n],o=Wt(o=t),(r=Bt(a,kn()?Reflect.construct(o,i||[],Wt(a).constructor):o.apply(a,i)))._registerChild=r._registerChild.bind(r),r}return jt(t,e),Ft(t,[{key:"componentDidUpdate",value:function(e){var t=this.props,n=t.columnMaxWidth,r=t.columnMinWidth,a=t.columnCount,o=t.width;n===e.columnMaxWidth&&r===e.columnMinWidth&&a===e.columnCount&&o===e.width||this._registeredChild&&this._registeredChild.recomputeGridSize()}},{key:"render",value:function(){var e=this.props,t=e.children,n=e.columnMaxWidth,r=e.columnMinWidth,a=e.columnCount,o=e.width,i=r||1,l=n?Math.min(n,o):o,s=o/a;return s=Math.max(i,s),s=Math.min(l,s),s=Math.floor(s),t({adjustedWidth:Math.min(o,s*a),columnWidth:s,getColumnWidth:function(){return s},registerChild:this._registerChild})}},{key:"_registerChild",value:function(e){if(e&&"function"!=typeof e.recomputeGridSize)throw Error("Unexpected child type registered; only Grid/MultiGrid children are supported.");this._registeredChild=e,this._registeredChild&&this._registeredChild.recomputeGridSize()}}])}(r.PureComponent)).propTypes={};var An,Pn=function(){return Ft((function e(t){var n=t.cellCount,r=t.cellSizeGetter,a=t.estimatedCellSize;It(this,e),Gt(this,"_cellSizeAndPositionData",{}),Gt(this,"_lastMeasuredIndex",-1),Gt(this,"_lastBatchedIndex",-1),Gt(this,"_cellCount",void 0),Gt(this,"_cellSizeGetter",void 0),Gt(this,"_estimatedCellSize",void 0),this._cellSizeGetter=r,this._cellCount=n,this._estimatedCellSize=a}),[{key:"areOffsetsAdjusted",value:function(){return!1}},{key:"configure",value:function(e){var t=e.cellCount,n=e.estimatedCellSize,r=e.cellSizeGetter;this._cellCount=t,this._estimatedCellSize=n,this._cellSizeGetter=r}},{key:"getCellCount",value:function(){return this._cellCount}},{key:"getEstimatedCellSize",value:function(){return this._estimatedCellSize}},{key:"getLastMeasuredIndex",value:function(){return this._lastMeasuredIndex}},{key:"getOffsetAdjustment",value:function(){return 0}},{key:"getSizeAndPositionOfCell",value:function(e){if(e<0||e>=this._cellCount)throw Error("Requested index ".concat(e," is outside of range 0..").concat(this._cellCount));if(e>this._lastMeasuredIndex)for(var t=this.getSizeAndPositionOfLastMeasuredCell(),n=t.offset+t.size,r=this._lastMeasuredIndex+1;r<=e;r++){var a=this._cellSizeGetter({index:r});if(void 0===a||isNaN(a))throw Error("Invalid size returned for cell ".concat(r," of value ").concat(a));null===a?(this._cellSizeAndPositionData[r]={offset:n,size:0},this._lastBatchedIndex=e):(this._cellSizeAndPositionData[r]={offset:n,size:a},n+=a,this._lastMeasuredIndex=e)}return this._cellSizeAndPositionData[e]}},{key:"getSizeAndPositionOfLastMeasuredCell",value:function(){return this._lastMeasuredIndex>=0?this._cellSizeAndPositionData[this._lastMeasuredIndex]:{offset:0,size:0}}},{key:"getTotalSize",value:function(){var e=this.getSizeAndPositionOfLastMeasuredCell();return e.offset+e.size+(this._cellCount-this._lastMeasuredIndex-1)*this._estimatedCellSize}},{key:"getUpdatedOffsetForIndex",value:function(e){var t=e.align,n=void 0===t?"auto":t,r=e.containerSize,a=e.currentOffset,o=e.targetIndex;if(r<=0)return 0;var i,l=this.getSizeAndPositionOfCell(o),s=l.offset,d=s-r+l.size;switch(n){case"start":i=s;break;case"end":i=d;break;case"center":i=s-(r-l.size)/2;break;default:i=Math.max(d,Math.min(s,a))}var u=this.getTotalSize();return Math.max(0,Math.min(u-r,i))}},{key:"getVisibleCellRange",value:function(e){var t=e.containerSize,n=e.offset;if(0===this.getTotalSize())return{};var r=n+t,a=this._findNearestCell(n),o=this.getSizeAndPositionOfCell(a);n=o.offset+o.size;for(var i=a;n<r&&i<this._cellCount-1;)i++,n+=this.getSizeAndPositionOfCell(i).size;return{start:a,stop:i}}},{key:"resetCell",value:function(e){this._lastMeasuredIndex=Math.min(this._lastMeasuredIndex,e-1)}},{key:"_binarySearch",value:function(e,t,n){for(;t<=e;){var r=t+Math.floor((e-t)/2),a=this.getSizeAndPositionOfCell(r).offset;if(a===n)return r;a<n?t=r+1:a>n&&(e=r-1)}return t>0?t-1:0}},{key:"_exponentialSearch",value:function(e,t){for(var n=1;e<this._cellCount&&this.getSizeAndPositionOfCell(e).offset<t;)e+=n,n*=2;return this._binarySearch(Math.min(e,this._cellCount-1),Math.floor(e/2),t)}},{key:"_findNearestCell",value:function(e){if(isNaN(e))throw Error("Invalid offset ".concat(e," specified"));e=Math.max(0,e);var t=this.getSizeAndPositionOfLastMeasuredCell(),n=Math.max(0,this._lastMeasuredIndex);return t.offset>=e?this._binarySearch(n,0,e):this._exponentialSearch(n,e)}}])}(),zn=["maxScrollSize"],Rn=function(){return Ft((function e(t){var n=t.maxScrollSize,r=void 0===n?"undefined"!=typeof window&&window.chrome?16777100:15e5:n,a=Tn(t,zn);It(this,e),Gt(this,"_cellSizeAndPositionManager",void 0),Gt(this,"_maxScrollSize",void 0),this._cellSizeAndPositionManager=new Pn(a),this._maxScrollSize=r}),[{key:"areOffsetsAdjusted",value:function(){return this._cellSizeAndPositionManager.getTotalSize()>this._maxScrollSize}},{key:"configure",value:function(e){this._cellSizeAndPositionManager.configure(e)}},{key:"getCellCount",value:function(){return this._cellSizeAndPositionManager.getCellCount()}},{key:"getEstimatedCellSize",value:function(){return this._cellSizeAndPositionManager.getEstimatedCellSize()}},{key:"getLastMeasuredIndex",value:function(){return this._cellSizeAndPositionManager.getLastMeasuredIndex()}},{key:"getOffsetAdjustment",value:function(e){var t=e.containerSize,n=e.offset,r=this._cellSizeAndPositionManager.getTotalSize(),a=this.getTotalSize(),o=this._getOffsetPercentage({containerSize:t,offset:n,totalSize:a});return Math.round(o*(a-r))}},{key:"getSizeAndPositionOfCell",value:function(e){return this._cellSizeAndPositionManager.getSizeAndPositionOfCell(e)}},{key:"getSizeAndPositionOfLastMeasuredCell",value:function(){return this._cellSizeAndPositionManager.getSizeAndPositionOfLastMeasuredCell()}},{key:"getTotalSize",value:function(){return Math.min(this._maxScrollSize,this._cellSizeAndPositionManager.getTotalSize())}},{key:"getUpdatedOffsetForIndex",value:function(e){var t=e.align,n=void 0===t?"auto":t,r=e.containerSize,a=e.currentOffset,o=e.targetIndex;a=this._safeOffsetToOffset({containerSize:r,offset:a});var i=this._cellSizeAndPositionManager.getUpdatedOffsetForIndex({align:n,containerSize:r,currentOffset:a,targetIndex:o});return this._offsetToSafeOffset({containerSize:r,offset:i})}},{key:"getVisibleCellRange",value:function(e){var t=e.containerSize,n=e.offset;return n=this._safeOffsetToOffset({containerSize:t,offset:n}),this._cellSizeAndPositionManager.getVisibleCellRange({containerSize:t,offset:n})}},{key:"resetCell",value:function(e){this._cellSizeAndPositionManager.resetCell(e)}},{key:"_getOffsetPercentage",value:function(e){var t=e.containerSize,n=e.offset,r=e.totalSize;return r<=t?0:n/(r-t)}},{key:"_offsetToSafeOffset",value:function(e){var t=e.containerSize,n=e.offset,r=this._cellSizeAndPositionManager.getTotalSize(),a=this.getTotalSize();if(r===a)return n;var o=this._getOffsetPercentage({containerSize:t,offset:n,totalSize:r});return Math.round(o*(a-t))}},{key:"_safeOffsetToOffset",value:function(e){var t=e.containerSize,n=e.offset,r=this._cellSizeAndPositionManager.getTotalSize(),a=this.getTotalSize();if(r===a)return n;var o=this._getOffsetPercentage({containerSize:t,offset:n,totalSize:a});return Math.round(o*(r-t))}}])}();function En(e){var t=e.cellSize,n=e.cellSizeAndPositionManager,r=e.previousCellsCount,a=e.previousCellSize,o=e.previousScrollToAlignment,i=e.previousScrollToIndex,l=e.previousSize,s=e.scrollOffset,d=e.scrollToAlignment,u=e.scrollToIndex,c=e.size,f=e.sizeJustIncreasedFromZero,p=e.updateScrollIndexCallback,m=n.getCellCount(),h=u>=0&&u<m;h&&(c!==l||f||!a||"number"==typeof t&&t!==a||d!==o||u!==i)?p(u):!h&&m>0&&(c<l||m<r)&&s>n.getTotalSize()-c&&p(m-1)}var On=(An="undefined"!=typeof window?window:"undefined"!=typeof self?self:{}).requestAnimationFrame||An.webkitRequestAnimationFrame||An.mozRequestAnimationFrame||An.oRequestAnimationFrame||An.msRequestAnimationFrame||function(e){return An.setTimeout(e,1e3/60)},Mn=An.cancelAnimationFrame||An.webkitCancelAnimationFrame||An.mozCancelAnimationFrame||An.oCancelAnimationFrame||An.msCancelAnimationFrame||function(e){An.clearTimeout(e)},In=On,Ln=Mn,Dn=function(e){return Ln(e.id)},Nn=function(e,t){var n;Promise.resolve().then((function(){n=Date.now()}));var r=function(){Date.now()-n>=t?e.call():a.id=In(r)},a={id:In(r)};return a};function Fn(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Bn(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Fn(Object(n),!0).forEach((function(t){Gt(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Fn(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Wn(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(e){}return(Wn=function(){return!!e})()}var Hn="requested",jn=function(e){function t(e){var n,r,a,o;It(this,t),r=this,o=[e],a=Wt(a=t),Gt(n=Bt(r,Wn()?Reflect.construct(a,o||[],Wt(r).constructor):a.apply(r,o)),"_onGridRenderedMemoizer",dn()),Gt(n,"_onScrollMemoizer",dn(!1)),Gt(n,"_deferredInvalidateColumnIndex",null),Gt(n,"_deferredInvalidateRowIndex",null),Gt(n,"_recomputeScrollLeftFlag",!1),Gt(n,"_recomputeScrollTopFlag",!1),Gt(n,"_horizontalScrollBarSize",0),Gt(n,"_verticalScrollBarSize",0),Gt(n,"_scrollbarPresenceChanged",!1),Gt(n,"_scrollingContainer",void 0),Gt(n,"_childrenToDisplay",void 0),Gt(n,"_columnStartIndex",void 0),Gt(n,"_columnStopIndex",void 0),Gt(n,"_rowStartIndex",void 0),Gt(n,"_rowStopIndex",void 0),Gt(n,"_renderedColumnStartIndex",0),Gt(n,"_renderedColumnStopIndex",0),Gt(n,"_renderedRowStartIndex",0),Gt(n,"_renderedRowStopIndex",0),Gt(n,"_initialScrollTop",void 0),Gt(n,"_initialScrollLeft",void 0),Gt(n,"_disablePointerEventsTimeoutId",void 0),Gt(n,"_styleCache",{}),Gt(n,"_cellCache",{}),Gt(n,"_debounceScrollEndedCallback",(function(){n._disablePointerEventsTimeoutId=null,n.setState({isScrolling:!1,needToResetStyleCache:!1})})),Gt(n,"_invokeOnGridRenderedHelper",(function(){var e=n.props.onSectionRendered;n._onGridRenderedMemoizer({callback:e,indices:{columnOverscanStartIndex:n._columnStartIndex,columnOverscanStopIndex:n._columnStopIndex,columnStartIndex:n._renderedColumnStartIndex,columnStopIndex:n._renderedColumnStopIndex,rowOverscanStartIndex:n._rowStartIndex,rowOverscanStopIndex:n._rowStopIndex,rowStartIndex:n._renderedRowStartIndex,rowStopIndex:n._renderedRowStopIndex}})})),Gt(n,"_setScrollingContainerRef",(function(e){n._scrollingContainer=e,"function"==typeof n.props.elementRef?n.props.elementRef(e):"object"===Lt(n.props.elementRef)&&(n.props.elementRef.current=e)})),Gt(n,"_onScroll",(function(e){e.target===n._scrollingContainer&&n.handleScrollEvent(e.target)}));var i=new Rn({cellCount:e.columnCount,cellSizeGetter:function(n){return t._wrapSizeGetter(e.columnWidth)(n)},estimatedCellSize:t._getEstimatedColumnSize(e)}),l=new Rn({cellCount:e.rowCount,cellSizeGetter:function(n){return t._wrapSizeGetter(e.rowHeight)(n)},estimatedCellSize:t._getEstimatedRowSize(e)});return n.state={instanceProps:{columnSizeAndPositionManager:i,rowSizeAndPositionManager:l,prevColumnWidth:e.columnWidth,prevRowHeight:e.rowHeight,prevColumnCount:e.columnCount,prevRowCount:e.rowCount,prevIsScrolling:!0===e.isScrolling,prevScrollToColumn:e.scrollToColumn,prevScrollToRow:e.scrollToRow,scrollbarSize:0,scrollbarSizeMeasured:!1},isScrolling:!1,scrollDirectionHorizontal:1,scrollDirectionVertical:1,scrollLeft:0,scrollTop:0,scrollPositionChangeReason:null,needToResetStyleCache:!1},e.scrollToRow>0&&(n._initialScrollTop=n._getCalculatedScrollTop(e,n.state)),e.scrollToColumn>0&&(n._initialScrollLeft=n._getCalculatedScrollLeft(e,n.state)),n}return jt(t,e),Ft(t,[{key:"getOffsetForCell",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.alignment,n=void 0===t?this.props.scrollToAlignment:t,r=e.columnIndex,a=void 0===r?this.props.scrollToColumn:r,o=e.rowIndex,i=void 0===o?this.props.scrollToRow:o,l=Bn(Bn({},this.props),{},{scrollToAlignment:n,scrollToColumn:a,scrollToRow:i});return{scrollLeft:this._getCalculatedScrollLeft(l),scrollTop:this._getCalculatedScrollTop(l)}}},{key:"getTotalRowsHeight",value:function(){return this.state.instanceProps.rowSizeAndPositionManager.getTotalSize()}},{key:"getTotalColumnsWidth",value:function(){return this.state.instanceProps.columnSizeAndPositionManager.getTotalSize()}},{key:"handleScrollEvent",value:function(e){var t=e.scrollLeft,n=void 0===t?0:t,r=e.scrollTop,a=void 0===r?0:r;if(!(a<0)){this._debounceScrollEnded();var o=this.props,i=o.autoHeight,l=o.autoWidth,s=o.height,d=o.width,u=this.state.instanceProps,c=u.scrollbarSize,f=u.rowSizeAndPositionManager.getTotalSize(),p=u.columnSizeAndPositionManager.getTotalSize(),m=Math.min(Math.max(0,p-d+c),n),h=Math.min(Math.max(0,f-s+c),a);if(this.state.scrollLeft!==m||this.state.scrollTop!==h){var g={isScrolling:!0,scrollDirectionHorizontal:m!==this.state.scrollLeft?m>this.state.scrollLeft?1:-1:this.state.scrollDirectionHorizontal,scrollDirectionVertical:h!==this.state.scrollTop?h>this.state.scrollTop?1:-1:this.state.scrollDirectionVertical,scrollPositionChangeReason:"observed"};i||(g.scrollTop=h),l||(g.scrollLeft=m),g.needToResetStyleCache=!1,this.setState(g)}this._invokeOnScrollMemoizer({scrollLeft:m,scrollTop:h,totalColumnsWidth:p,totalRowsHeight:f})}}},{key:"invalidateCellSizeAfterRender",value:function(e){var t=e.columnIndex,n=e.rowIndex;this._deferredInvalidateColumnIndex="number"==typeof this._deferredInvalidateColumnIndex?Math.min(this._deferredInvalidateColumnIndex,t):t,this._deferredInvalidateRowIndex="number"==typeof this._deferredInvalidateRowIndex?Math.min(this._deferredInvalidateRowIndex,n):n}},{key:"measureAllCells",value:function(){var e=this.props,t=e.columnCount,n=e.rowCount,r=this.state.instanceProps;r.columnSizeAndPositionManager.getSizeAndPositionOfCell(t-1),r.rowSizeAndPositionManager.getSizeAndPositionOfCell(n-1)}},{key:"recomputeGridSize",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.columnIndex,n=void 0===t?0:t,r=e.rowIndex,a=void 0===r?0:r,o=this.props,i=o.scrollToColumn,l=o.scrollToRow,s=this.state.instanceProps;s.columnSizeAndPositionManager.resetCell(n),s.rowSizeAndPositionManager.resetCell(a),this._recomputeScrollLeftFlag=i>=0&&(1===this.state.scrollDirectionHorizontal?n<=i:n>=i),this._recomputeScrollTopFlag=l>=0&&(1===this.state.scrollDirectionVertical?a<=l:a>=l),this._styleCache={},this._cellCache={},this.forceUpdate()}},{key:"scrollToCell",value:function(e){var t=e.columnIndex,n=e.rowIndex,r=this.props.columnCount,a=this.props;r>1&&void 0!==t&&this._updateScrollLeftForScrollToColumn(Bn(Bn({},a),{},{scrollToColumn:t})),void 0!==n&&this._updateScrollTopForScrollToRow(Bn(Bn({},a),{},{scrollToRow:n}))}},{key:"componentDidMount",value:function(){var e=this.props,n=e.getScrollbarSize,r=e.height,a=e.scrollLeft,o=e.scrollToColumn,i=e.scrollTop,l=e.scrollToRow,s=e.width,d=this.state.instanceProps;if(this._initialScrollTop=0,this._initialScrollLeft=0,this._handleInvalidatedGridSize(),d.scrollbarSizeMeasured||this.setState((function(e){var t=Bn(Bn({},e),{},{needToResetStyleCache:!1});return t.instanceProps.scrollbarSize=n(),t.instanceProps.scrollbarSizeMeasured=!0,t})),"number"==typeof a&&a>=0||"number"==typeof i&&i>=0){var u=t._getScrollToPositionStateUpdate({prevState:this.state,scrollLeft:a,scrollTop:i});u&&(u.needToResetStyleCache=!1,this.setState(u))}this._scrollingContainer&&(this._scrollingContainer.scrollLeft!==this.state.scrollLeft&&(this._scrollingContainer.scrollLeft=this.state.scrollLeft),this._scrollingContainer.scrollTop!==this.state.scrollTop&&(this._scrollingContainer.scrollTop=this.state.scrollTop));var c=r>0&&s>0;o>=0&&c&&this._updateScrollLeftForScrollToColumn(),l>=0&&c&&this._updateScrollTopForScrollToRow(),this._invokeOnGridRenderedHelper(),this._invokeOnScrollMemoizer({scrollLeft:a||0,scrollTop:i||0,totalColumnsWidth:d.columnSizeAndPositionManager.getTotalSize(),totalRowsHeight:d.rowSizeAndPositionManager.getTotalSize()}),this._maybeCallOnScrollbarPresenceChange()}},{key:"componentDidUpdate",value:function(e,t){var n=this,r=this.props,a=r.autoHeight,o=r.autoWidth,i=r.columnCount,l=r.height,s=r.rowCount,d=r.scrollToAlignment,u=r.scrollToColumn,c=r.scrollToRow,f=r.width,p=this.state,m=p.scrollLeft,h=p.scrollPositionChangeReason,g=p.scrollTop,y=p.instanceProps;this._handleInvalidatedGridSize();var v=i>0&&0===e.columnCount||s>0&&0===e.rowCount;h===Hn&&(!o&&m>=0&&(m!==this._scrollingContainer.scrollLeft||v)&&(this._scrollingContainer.scrollLeft=m),!a&&g>=0&&(g!==this._scrollingContainer.scrollTop||v)&&(this._scrollingContainer.scrollTop=g));var b=(0===e.width||0===e.height)&&l>0&&f>0;if(this._recomputeScrollLeftFlag?(this._recomputeScrollLeftFlag=!1,this._updateScrollLeftForScrollToColumn(this.props)):En({cellSizeAndPositionManager:y.columnSizeAndPositionManager,previousCellsCount:e.columnCount,previousCellSize:e.columnWidth,previousScrollToAlignment:e.scrollToAlignment,previousScrollToIndex:e.scrollToColumn,previousSize:e.width,scrollOffset:m,scrollToAlignment:d,scrollToIndex:u,size:f,sizeJustIncreasedFromZero:b,updateScrollIndexCallback:function(){return n._updateScrollLeftForScrollToColumn(n.props)}}),this._recomputeScrollTopFlag?(this._recomputeScrollTopFlag=!1,this._updateScrollTopForScrollToRow(this.props)):En({cellSizeAndPositionManager:y.rowSizeAndPositionManager,previousCellsCount:e.rowCount,previousCellSize:e.rowHeight,previousScrollToAlignment:e.scrollToAlignment,previousScrollToIndex:e.scrollToRow,previousSize:e.height,scrollOffset:g,scrollToAlignment:d,scrollToIndex:c,size:l,sizeJustIncreasedFromZero:b,updateScrollIndexCallback:function(){return n._updateScrollTopForScrollToRow(n.props)}}),this._invokeOnGridRenderedHelper(),m!==t.scrollLeft||g!==t.scrollTop){var S=y.rowSizeAndPositionManager.getTotalSize(),w=y.columnSizeAndPositionManager.getTotalSize();this._invokeOnScrollMemoizer({scrollLeft:m,scrollTop:g,totalColumnsWidth:w,totalRowsHeight:S})}this._maybeCallOnScrollbarPresenceChange()}},{key:"componentWillUnmount",value:function(){this._disablePointerEventsTimeoutId&&Dn(this._disablePointerEventsTimeoutId)}},{key:"render",value:function(){var e=this.props,t=e.autoContainerWidth,n=e.autoHeight,a=e.autoWidth,o=e.className,i=e.containerProps,l=e.containerRole,s=e.containerStyle,d=e.height,u=e.id,c=e.noContentRenderer,f=e.role,p=e.style,m=e.tabIndex,h=e.width,g=this.state,y=g.instanceProps,v=g.needToResetStyleCache,b=this._isScrolling(),S={boxSizing:"border-box",direction:"ltr",height:n?"auto":d,position:"relative",width:a?"auto":h,WebkitOverflowScrolling:"touch",willChange:"transform"};v&&(this._styleCache={}),this.state.isScrolling||this._resetStyleCache(),this._calculateChildrenToRender(this.props,this.state);var w=y.columnSizeAndPositionManager.getTotalSize(),_=y.rowSizeAndPositionManager.getTotalSize(),C=_>d?y.scrollbarSize:0,k=w>h?y.scrollbarSize:0;k===this._horizontalScrollBarSize&&C===this._verticalScrollBarSize||(this._horizontalScrollBarSize=k,this._verticalScrollBarSize=C,this._scrollbarPresenceChanged=!0),S.overflowX=w+C<=h?"hidden":"auto",S.overflowY=_+k<=d?"hidden":"auto";var x=this._childrenToDisplay,T=0===x.length&&d>0&&h>0;return r.createElement("div",on({ref:this._setScrollingContainerRef},i,{"aria-label":this.props["aria-label"],"aria-readonly":this.props["aria-readonly"],className:sn("ReactVirtualized__Grid",o),id:u,onScroll:this._onScroll,role:f,style:Bn(Bn({},S),p),tabIndex:m}),x.length>0&&r.createElement("div",{className:"ReactVirtualized__Grid__innerScrollContainer",role:l,style:Bn({width:t?"auto":w,height:_,maxWidth:w,maxHeight:_,overflow:"hidden",pointerEvents:b?"none":"",position:"relative"},s)},x),T&&c())}},{key:"_calculateChildrenToRender",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.props,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.state,n=e.cellRenderer,r=e.cellRangeRenderer,a=e.columnCount,o=e.deferredMeasurementCache,i=e.height,l=e.overscanColumnCount,s=e.overscanIndicesGetter,d=e.overscanRowCount,u=e.rowCount,c=e.width,f=e.isScrollingOptOut,p=t.scrollDirectionHorizontal,m=t.scrollDirectionVertical,h=t.instanceProps,g=this._initialScrollTop>0?this._initialScrollTop:t.scrollTop,y=this._initialScrollLeft>0?this._initialScrollLeft:t.scrollLeft,v=this._isScrolling(e,t);if(this._childrenToDisplay=[],i>0&&c>0){var b=h.columnSizeAndPositionManager.getVisibleCellRange({containerSize:c,offset:y}),S=h.rowSizeAndPositionManager.getVisibleCellRange({containerSize:i,offset:g}),w=h.columnSizeAndPositionManager.getOffsetAdjustment({containerSize:c,offset:y}),_=h.rowSizeAndPositionManager.getOffsetAdjustment({containerSize:i,offset:g});this._renderedColumnStartIndex=b.start,this._renderedColumnStopIndex=b.stop,this._renderedRowStartIndex=S.start,this._renderedRowStopIndex=S.stop;var C=s({direction:"horizontal",cellCount:a,overscanCellsCount:l,scrollDirection:p,startIndex:"number"==typeof b.start?b.start:0,stopIndex:"number"==typeof b.stop?b.stop:-1}),k=s({direction:"vertical",cellCount:u,overscanCellsCount:d,scrollDirection:m,startIndex:"number"==typeof S.start?S.start:0,stopIndex:"number"==typeof S.stop?S.stop:-1}),x=C.overscanStartIndex,T=C.overscanStopIndex,A=k.overscanStartIndex,P=k.overscanStopIndex;if(o){if(!o.hasFixedHeight())for(var z=A;z<=P;z++)if(!o.has(z,0)){x=0,T=a-1;break}if(!o.hasFixedWidth())for(var R=x;R<=T;R++)if(!o.has(0,R)){A=0,P=u-1;break}}this._childrenToDisplay=r({cellCache:this._cellCache,cellRenderer:n,columnSizeAndPositionManager:h.columnSizeAndPositionManager,columnStartIndex:x,columnStopIndex:T,deferredMeasurementCache:o,horizontalOffsetAdjustment:w,isScrolling:v,isScrollingOptOut:f,parent:this,rowSizeAndPositionManager:h.rowSizeAndPositionManager,rowStartIndex:A,rowStopIndex:P,scrollLeft:y,scrollTop:g,styleCache:this._styleCache,verticalOffsetAdjustment:_,visibleColumnIndices:b,visibleRowIndices:S}),this._columnStartIndex=x,this._columnStopIndex=T,this._rowStartIndex=A,this._rowStopIndex=P}}},{key:"_debounceScrollEnded",value:function(){var e=this.props.scrollingResetTimeInterval;this._disablePointerEventsTimeoutId&&Dn(this._disablePointerEventsTimeoutId),this._disablePointerEventsTimeoutId=Nn(this._debounceScrollEndedCallback,e)}},{key:"_handleInvalidatedGridSize",value:function(){if("number"==typeof this._deferredInvalidateColumnIndex&&"number"==typeof this._deferredInvalidateRowIndex){var e=this._deferredInvalidateColumnIndex,t=this._deferredInvalidateRowIndex;this._deferredInvalidateColumnIndex=null,this._deferredInvalidateRowIndex=null,this.recomputeGridSize({columnIndex:e,rowIndex:t})}}},{key:"_invokeOnScrollMemoizer",value:function(e){var t=this,n=e.scrollLeft,r=e.scrollTop,a=e.totalColumnsWidth,o=e.totalRowsHeight;this._onScrollMemoizer({callback:function(e){var n=e.scrollLeft,r=e.scrollTop,i=t.props,l=i.height;(0,i.onScroll)({clientHeight:l,clientWidth:i.width,scrollHeight:o,scrollLeft:n,scrollTop:r,scrollWidth:a})},indices:{scrollLeft:n,scrollTop:r}})}},{key:"_isScrolling",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.props,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.state;return Object.hasOwnProperty.call(e,"isScrolling")?Boolean(e.isScrolling):Boolean(t.isScrolling)}},{key:"_maybeCallOnScrollbarPresenceChange",value:function(){if(this._scrollbarPresenceChanged){var e=this.props.onScrollbarPresenceChange;this._scrollbarPresenceChanged=!1,e({horizontal:this._horizontalScrollBarSize>0,size:this.state.instanceProps.scrollbarSize,vertical:this._verticalScrollBarSize>0})}}},{key:"scrollToPosition",value:function(e){var n=e.scrollLeft,r=e.scrollTop,a=t._getScrollToPositionStateUpdate({prevState:this.state,scrollLeft:n,scrollTop:r});a&&(a.needToResetStyleCache=!1,this.setState(a))}},{key:"_getCalculatedScrollLeft",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.props,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.state;return t._getCalculatedScrollLeft(e,n)}},{key:"_updateScrollLeftForScrollToColumn",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.props,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.state,r=t._getScrollLeftForScrollToColumnStateUpdate(e,n);r&&(r.needToResetStyleCache=!1,this.setState(r))}},{key:"_getCalculatedScrollTop",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.props,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.state;return t._getCalculatedScrollTop(e,n)}},{key:"_resetStyleCache",value:function(){var e=this._styleCache,t=this._cellCache,n=this.props.isScrollingOptOut;this._cellCache={},this._styleCache={};for(var r=this._rowStartIndex;r<=this._rowStopIndex;r++)for(var a=this._columnStartIndex;a<=this._columnStopIndex;a++){var o="".concat(r,"-").concat(a);this._styleCache[o]=e[o],n&&(this._cellCache[o]=t[o])}}},{key:"_updateScrollTopForScrollToRow",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.props,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.state,r=t._getScrollTopForScrollToRowStateUpdate(e,n);r&&(r.needToResetStyleCache=!1,this.setState(r))}}],[{key:"getDerivedStateFromProps",value:function(e,n){var r={};0===e.columnCount&&0!==n.scrollLeft||0===e.rowCount&&0!==n.scrollTop?(r.scrollLeft=0,r.scrollTop=0):(e.scrollLeft!==n.scrollLeft&&e.scrollToColumn<0||e.scrollTop!==n.scrollTop&&e.scrollToRow<0)&&Object.assign(r,t._getScrollToPositionStateUpdate({prevState:n,scrollLeft:e.scrollLeft,scrollTop:e.scrollTop}));var a,o,i=n.instanceProps;return r.needToResetStyleCache=!1,e.columnWidth===i.prevColumnWidth&&e.rowHeight===i.prevRowHeight||(r.needToResetStyleCache=!0),i.columnSizeAndPositionManager.configure({cellCount:e.columnCount,estimatedCellSize:t._getEstimatedColumnSize(e),cellSizeGetter:t._wrapSizeGetter(e.columnWidth)}),i.rowSizeAndPositionManager.configure({cellCount:e.rowCount,estimatedCellSize:t._getEstimatedRowSize(e),cellSizeGetter:t._wrapSizeGetter(e.rowHeight)}),0!==i.prevColumnCount&&0!==i.prevRowCount||(i.prevColumnCount=0,i.prevRowCount=0),e.autoHeight&&!1===e.isScrolling&&!0===i.prevIsScrolling&&Object.assign(r,{isScrolling:!1}),xn({cellCount:i.prevColumnCount,cellSize:"number"==typeof i.prevColumnWidth?i.prevColumnWidth:null,computeMetadataCallback:function(){return i.columnSizeAndPositionManager.resetCell(0)},computeMetadataCallbackProps:e,nextCellsCount:e.columnCount,nextCellSize:"number"==typeof e.columnWidth?e.columnWidth:null,nextScrollToIndex:e.scrollToColumn,scrollToIndex:i.prevScrollToColumn,updateScrollOffsetForScrollToIndex:function(){a=t._getScrollLeftForScrollToColumnStateUpdate(e,n)}}),xn({cellCount:i.prevRowCount,cellSize:"number"==typeof i.prevRowHeight?i.prevRowHeight:null,computeMetadataCallback:function(){return i.rowSizeAndPositionManager.resetCell(0)},computeMetadataCallbackProps:e,nextCellsCount:e.rowCount,nextCellSize:"number"==typeof e.rowHeight?e.rowHeight:null,nextScrollToIndex:e.scrollToRow,scrollToIndex:i.prevScrollToRow,updateScrollOffsetForScrollToIndex:function(){o=t._getScrollTopForScrollToRowStateUpdate(e,n)}}),i.prevColumnCount=e.columnCount,i.prevColumnWidth=e.columnWidth,i.prevIsScrolling=!0===e.isScrolling,i.prevRowCount=e.rowCount,i.prevRowHeight=e.rowHeight,i.prevScrollToColumn=e.scrollToColumn,i.prevScrollToRow=e.scrollToRow,i.scrollbarSize=e.getScrollbarSize(),void 0===i.scrollbarSize?(i.scrollbarSizeMeasured=!1,i.scrollbarSize=0):i.scrollbarSizeMeasured=!0,r.instanceProps=i,Bn(Bn(Bn({},r),a),o)}},{key:"_getEstimatedColumnSize",value:function(e){return"number"==typeof e.columnWidth?e.columnWidth:e.estimatedColumnSize}},{key:"_getEstimatedRowSize",value:function(e){return"number"==typeof e.rowHeight?e.rowHeight:e.estimatedRowSize}},{key:"_getScrollToPositionStateUpdate",value:function(e){var t=e.prevState,n=e.scrollLeft,r=e.scrollTop,a={scrollPositionChangeReason:Hn};return"number"==typeof n&&n>=0&&(a.scrollDirectionHorizontal=n>t.scrollLeft?1:-1,a.scrollLeft=n),"number"==typeof r&&r>=0&&(a.scrollDirectionVertical=r>t.scrollTop?1:-1,a.scrollTop=r),"number"==typeof n&&n>=0&&n!==t.scrollLeft||"number"==typeof r&&r>=0&&r!==t.scrollTop?a:{}}},{key:"_wrapSizeGetter",value:function(e){return"function"==typeof e?e:function(){return e}}},{key:"_getCalculatedScrollLeft",value:function(e,t){var n=e.columnCount,r=e.height,a=e.scrollToAlignment,o=e.scrollToColumn,i=e.width,l=t.scrollLeft,s=t.instanceProps;if(n>0){var d=n-1,u=o<0?d:Math.min(d,o),c=s.rowSizeAndPositionManager.getTotalSize(),f=s.scrollbarSizeMeasured&&c>r?s.scrollbarSize:0;return s.columnSizeAndPositionManager.getUpdatedOffsetForIndex({align:a,containerSize:i-f,currentOffset:l,targetIndex:u})}return 0}},{key:"_getScrollLeftForScrollToColumnStateUpdate",value:function(e,n){var r=n.scrollLeft,a=t._getCalculatedScrollLeft(e,n);return"number"==typeof a&&a>=0&&r!==a?t._getScrollToPositionStateUpdate({prevState:n,scrollLeft:a,scrollTop:-1}):{}}},{key:"_getCalculatedScrollTop",value:function(e,t){var n=e.height,r=e.rowCount,a=e.scrollToAlignment,o=e.scrollToRow,i=e.width,l=t.scrollTop,s=t.instanceProps;if(r>0){var d=r-1,u=o<0?d:Math.min(d,o),c=s.columnSizeAndPositionManager.getTotalSize(),f=s.scrollbarSizeMeasured&&c>i?s.scrollbarSize:0;return s.rowSizeAndPositionManager.getUpdatedOffsetForIndex({align:a,containerSize:n-f,currentOffset:l,targetIndex:u})}return 0}},{key:"_getScrollTopForScrollToRowStateUpdate",value:function(e,n){var r=n.scrollTop,a=t._getCalculatedScrollTop(e,n);return"number"==typeof a&&a>=0&&r!==a?t._getScrollToPositionStateUpdate({prevState:n,scrollLeft:-1,scrollTop:a}):{}}}])}(r.PureComponent);Gt(jn,"defaultProps",{"aria-label":"grid","aria-readonly":!0,autoContainerWidth:!1,autoHeight:!1,autoWidth:!1,cellRangeRenderer:function(e){for(var t=e.cellCache,n=e.cellRenderer,a=e.columnSizeAndPositionManager,o=e.columnStartIndex,i=e.columnStopIndex,l=e.deferredMeasurementCache,s=e.horizontalOffsetAdjustment,d=e.isScrolling,u=e.isScrollingOptOut,c=e.parent,f=e.rowSizeAndPositionManager,p=e.rowStartIndex,m=e.rowStopIndex,h=e.styleCache,g=e.verticalOffsetAdjustment,y=e.visibleColumnIndices,v=e.visibleRowIndices,b=[],S=a.areOffsetsAdjusted()||f.areOffsetsAdjusted(),w=!d&&!S,_=p;_<=m;_++)for(var C=f.getSizeAndPositionOfCell(_),k=o;k<=i;k++){var x=a.getSizeAndPositionOfCell(k),T=k>=y.start&&k<=y.stop&&_>=v.start&&_<=v.stop,A="".concat(_,"-").concat(k),P=void 0;w&&h[A]?P=h[A]:l&&!l.has(_,k)?P={height:"auto",left:0,position:"absolute",top:0,width:"auto"}:(P={height:C.size,left:x.offset+s,position:"absolute",top:C.offset+g,width:x.size},h[A]=P);var z={columnIndex:k,isScrolling:d,isVisible:T,key:A,parent:c,rowIndex:_,style:P},R=void 0;!u&&!d||s||g?R=n(z):(t[A]||(t[A]=n(z)),R=t[A]),null!=R&&!1!==R&&(R.props.role||(R=r.cloneElement(R,{role:"gridcell"})),b.push(R))}return b},containerRole:"row",containerStyle:{},estimatedColumnSize:100,estimatedRowSize:30,getScrollbarSize:fn,noContentRenderer:function(){return null},onScroll:function(){},onScrollbarPresenceChange:function(){},onSectionRendered:function(){},overscanColumnCount:0,overscanIndicesGetter:function(e){var t=e.cellCount,n=e.overscanCellsCount,r=e.scrollDirection,a=e.startIndex,o=e.stopIndex;return 1===r?{overscanStartIndex:Math.max(0,a),overscanStopIndex:Math.min(t-1,o+n)}:{overscanStartIndex:Math.max(0,a-n),overscanStopIndex:Math.min(t-1,o)}},overscanRowCount:10,role:"grid",scrollingResetTimeInterval:150,scrollToAlignment:"auto",scrollToColumn:-1,scrollToRow:-1,style:{},tabIndex:0,isScrollingOptOut:!1}),Jt(jn);const Gn=jn;function Un(e){var t=e.cellCount,n=e.overscanCellsCount,r=e.scrollDirection,a=e.startIndex,o=e.stopIndex;return n=Math.max(1,n),1===r?{overscanStartIndex:Math.max(0,a-1),overscanStopIndex:Math.min(t-1,o+n)}:{overscanStartIndex:Math.max(0,a-n),overscanStopIndex:Math.min(t-1,o+1)}}function Vn(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}function Kn(e,t){if(e){if("string"==typeof e)return Vn(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Vn(e,t):void 0}}function Jn(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(e){}return(Jn=function(){return!!e})()}var $n=function(e){function t(e,n){var r,a,o,i;return It(this,t),a=this,i=[e,n],o=Wt(o=t),(r=Bt(a,Jn()?Reflect.construct(o,i||[],Wt(a).constructor):o.apply(a,i)))._loadMoreRowsMemoizer=dn(),r._onRowsRendered=r._onRowsRendered.bind(r),r._registerChild=r._registerChild.bind(r),r}return jt(t,e),Ft(t,[{key:"resetLoadMoreRowsCache",value:function(e){this._loadMoreRowsMemoizer=dn(),e&&this._doStuff(this._lastRenderedStartIndex,this._lastRenderedStopIndex)}},{key:"render",value:function(){return(0,this.props.children)({onRowsRendered:this._onRowsRendered,registerChild:this._registerChild})}},{key:"_loadUnloadedRanges",value:function(e){var t=this,n=this.props.loadMoreRows;e.forEach((function(e){var r=n(e);r&&r.then((function(){var n;(n={lastRenderedStartIndex:t._lastRenderedStartIndex,lastRenderedStopIndex:t._lastRenderedStopIndex,startIndex:e.startIndex,stopIndex:e.stopIndex}).startIndex>n.lastRenderedStopIndex||n.stopIndex<n.lastRenderedStartIndex||t._registeredChild&&function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n="function"==typeof e.recomputeGridSize?e.recomputeGridSize:e.recomputeRowHeights;n?n.call(e,t):e.forceUpdate()}(t._registeredChild,t._lastRenderedStartIndex)}))}))}},{key:"_onRowsRendered",value:function(e){var t=e.startIndex,n=e.stopIndex;this._lastRenderedStartIndex=t,this._lastRenderedStopIndex=n,this._doStuff(t,n)}},{key:"_doStuff",value:function(e,t){var n,r=this,a=this.props,o=a.isRowLoaded,i=a.minimumBatchSize,l=a.rowCount,s=a.threshold,d=function(e){for(var t=e.isRowLoaded,n=e.minimumBatchSize,r=e.rowCount,a=e.stopIndex,o=[],i=null,l=null,s=e.startIndex;s<=a;s++)t({index:s})?null!==l&&(o.push({startIndex:i,stopIndex:l}),i=l=null):(l=s,null===i&&(i=s));if(null!==l){for(var d=Math.min(Math.max(l,i+n-1),r-1),u=l+1;u<=d&&!t({index:u});u++)l=u;o.push({startIndex:i,stopIndex:l})}if(o.length)for(var c=o[0];c.stopIndex-c.startIndex+1<n&&c.startIndex>0;){var f=c.startIndex-1;if(t({index:f}))break;c.startIndex=f}return o}({isRowLoaded:o,minimumBatchSize:i,rowCount:l,startIndex:Math.max(0,e-s),stopIndex:Math.min(l-1,t+s)}),u=(n=[]).concat.apply(n,function(e){return function(e){if(Array.isArray(e))return Vn(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||Kn(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}(d.map((function(e){return[e.startIndex,e.stopIndex]}))));this._loadMoreRowsMemoizer({callback:function(){r._loadUnloadedRanges(d)},indices:{squashedUnloadedRanges:u}})}},{key:"_registerChild",value:function(e){this._registeredChild=e}}])}(r.PureComponent);function Yn(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(e){}return(Yn=function(){return!!e})()}Gt($n,"defaultProps",{minimumBatchSize:10,rowCount:0,threshold:15}),$n.propTypes={};var qn=function(e){function t(){var e,n,r,a;It(this,t);for(var o=arguments.length,i=new Array(o),l=0;l<o;l++)i[l]=arguments[l];return n=this,r=t,a=[].concat(i),r=Wt(r),Gt(e=Bt(n,Yn()?Reflect.construct(r,a||[],Wt(n).constructor):r.apply(n,a)),"Grid",void 0),Gt(e,"_cellRenderer",(function(t){var n=t.parent,r=t.rowIndex,a=t.style,o=t.isScrolling,i=t.isVisible,l=t.key,s=e.props.rowRenderer,d=Object.getOwnPropertyDescriptor(a,"width");return d&&d.writable&&(a.width="100%"),s({index:r,style:a,isScrolling:o,isVisible:i,key:l,parent:n})})),Gt(e,"_setRef",(function(t){e.Grid=t})),Gt(e,"_onScroll",(function(t){var n=t.clientHeight,r=t.scrollHeight,a=t.scrollTop;(0,e.props.onScroll)({clientHeight:n,scrollHeight:r,scrollTop:a})})),Gt(e,"_onSectionRendered",(function(t){var n=t.rowOverscanStartIndex,r=t.rowOverscanStopIndex,a=t.rowStartIndex,o=t.rowStopIndex;(0,e.props.onRowsRendered)({overscanStartIndex:n,overscanStopIndex:r,startIndex:a,stopIndex:o})})),e}return jt(t,e),Ft(t,[{key:"forceUpdateGrid",value:function(){this.Grid&&this.Grid.forceUpdate()}},{key:"getOffsetForRow",value:function(e){var t=e.alignment,n=e.index;return this.Grid?this.Grid.getOffsetForCell({alignment:t,rowIndex:n,columnIndex:0}).scrollTop:0}},{key:"invalidateCellSizeAfterRender",value:function(e){var t=e.columnIndex,n=e.rowIndex;this.Grid&&this.Grid.invalidateCellSizeAfterRender({rowIndex:n,columnIndex:t})}},{key:"measureAllRows",value:function(){this.Grid&&this.Grid.measureAllCells()}},{key:"recomputeGridSize",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.columnIndex,n=void 0===t?0:t,r=e.rowIndex,a=void 0===r?0:r;this.Grid&&this.Grid.recomputeGridSize({rowIndex:a,columnIndex:n})}},{key:"recomputeRowHeights",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;this.Grid&&this.Grid.recomputeGridSize({rowIndex:e,columnIndex:0})}},{key:"scrollToPosition",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;this.Grid&&this.Grid.scrollToPosition({scrollTop:e})}},{key:"scrollToRow",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;this.Grid&&this.Grid.scrollToCell({columnIndex:0,rowIndex:e})}},{key:"render",value:function(){var e=this.props,t=e.className,n=e.noRowsRenderer,a=e.scrollToIndex,o=e.width,i=sn("ReactVirtualized__List",t);return r.createElement(Gn,on({},this.props,{autoContainerWidth:!0,cellRenderer:this._cellRenderer,className:i,columnWidth:o,columnCount:1,noContentRenderer:n,onScroll:this._onScroll,onSectionRendered:this._onSectionRendered,ref:this._setRef,scrollToRow:a}))}}])}(r.PureComponent);Gt(qn,"defaultProps",{autoHeight:!1,estimatedRowSize:30,onScroll:function(){},noRowsRenderer:function(){return null},onRowsRendered:function(){},overscanIndicesGetter:Un,overscanRowCount:10,scrollToAlignment:"auto",scrollToIndex:-1,style:{}});const Qn=function(e,t,n,r,a){return"function"==typeof n?function(e,t,n,r,a){for(var o=n+1;t<=n;){var i=t+n>>>1;a(e[i],r)>=0?(o=i,n=i-1):t=i+1}return o}(e,void 0===r?0:0|r,void 0===a?e.length-1:0|a,t,n):function(e,t,n,r){for(var a=n+1;t<=n;){var o=t+n>>>1;e[o]>=r?(a=o,n=o-1):t=o+1}return a}(e,void 0===n?0:0|n,void 0===r?e.length-1:0|r,t)};function Xn(e,t,n,r,a){this.mid=e,this.left=t,this.right=n,this.leftPoints=r,this.rightPoints=a,this.count=(t?t.count:0)+(n?n.count:0)+r.length}var Zn=Xn.prototype;function er(e,t){e.mid=t.mid,e.left=t.left,e.right=t.right,e.leftPoints=t.leftPoints,e.rightPoints=t.rightPoints,e.count=t.count}function tr(e,t){var n=ur(t);e.mid=n.mid,e.left=n.left,e.right=n.right,e.leftPoints=n.leftPoints,e.rightPoints=n.rightPoints,e.count=n.count}function nr(e,t){var n=e.intervals([]);n.push(t),tr(e,n)}function rr(e,t){var n=e.intervals([]),r=n.indexOf(t);return r<0?0:(n.splice(r,1),tr(e,n),1)}function ar(e,t,n){for(var r=0;r<e.length&&e[r][0]<=t;++r){var a=n(e[r]);if(a)return a}}function or(e,t,n){for(var r=e.length-1;r>=0&&e[r][1]>=t;--r){var a=n(e[r]);if(a)return a}}function ir(e,t){for(var n=0;n<e.length;++n){var r=t(e[n]);if(r)return r}}function lr(e,t){return e-t}function sr(e,t){return e[0]-t[0]||e[1]-t[1]}function dr(e,t){return e[1]-t[1]||e[0]-t[0]}function ur(e){if(0===e.length)return null;for(var t=[],n=0;n<e.length;++n)t.push(e[n][0],e[n][1]);t.sort(lr);var r=t[t.length>>1],a=[],o=[],i=[];for(n=0;n<e.length;++n){var l=e[n];l[1]<r?a.push(l):r<l[0]?o.push(l):i.push(l)}var s=i,d=i.slice();return s.sort(sr),d.sort(dr),new Xn(r,ur(a),ur(o),s,d)}function cr(e){this.root=e}Zn.intervals=function(e){return e.push.apply(e,this.leftPoints),this.left&&this.left.intervals(e),this.right&&this.right.intervals(e),e},Zn.insert=function(e){var t=this.count-this.leftPoints.length;if(this.count+=1,e[1]<this.mid)this.left?4*(this.left.count+1)>3*(t+1)?nr(this,e):this.left.insert(e):this.left=ur([e]);else if(e[0]>this.mid)this.right?4*(this.right.count+1)>3*(t+1)?nr(this,e):this.right.insert(e):this.right=ur([e]);else{var n=Qn(this.leftPoints,e,sr),r=Qn(this.rightPoints,e,dr);this.leftPoints.splice(n,0,e),this.rightPoints.splice(r,0,e)}},Zn.remove=function(e){var t=this.count-this.leftPoints;if(e[1]<this.mid)return this.left?4*(this.right?this.right.count:0)>3*(t-1)?rr(this,e):2===(o=this.left.remove(e))?(this.left=null,this.count-=1,1):(1===o&&(this.count-=1),o):0;if(e[0]>this.mid)return this.right?4*(this.left?this.left.count:0)>3*(t-1)?rr(this,e):2===(o=this.right.remove(e))?(this.right=null,this.count-=1,1):(1===o&&(this.count-=1),o):0;if(1===this.count)return this.leftPoints[0]===e?2:0;if(1===this.leftPoints.length&&this.leftPoints[0]===e){if(this.left&&this.right){for(var n=this,r=this.left;r.right;)n=r,r=r.right;if(n===this)r.right=this.right;else{var a=this.left,o=this.right;n.count-=r.count,n.right=r.left,r.left=a,r.right=o}er(this,r),this.count=(this.left?this.left.count:0)+(this.right?this.right.count:0)+this.leftPoints.length}else this.left?er(this,this.left):er(this,this.right);return 1}for(a=Qn(this.leftPoints,e,sr);a<this.leftPoints.length&&this.leftPoints[a][0]===e[0];++a)if(this.leftPoints[a]===e)for(this.count-=1,this.leftPoints.splice(a,1),o=Qn(this.rightPoints,e,dr);o<this.rightPoints.length&&this.rightPoints[o][1]===e[1];++o)if(this.rightPoints[o]===e)return this.rightPoints.splice(o,1),1;return 0},Zn.queryPoint=function(e,t){return e<this.mid?this.left&&(n=this.left.queryPoint(e,t))?n:ar(this.leftPoints,e,t):e>this.mid?this.right&&(n=this.right.queryPoint(e,t))?n:or(this.rightPoints,e,t):ir(this.leftPoints,t);var n},Zn.queryInterval=function(e,t,n){var r;return e<this.mid&&this.left&&(r=this.left.queryInterval(e,t,n))||t>this.mid&&this.right&&(r=this.right.queryInterval(e,t,n))?r:t<this.mid?ar(this.leftPoints,t,n):e>this.mid?or(this.rightPoints,e,n):ir(this.leftPoints,n)};var fr=cr.prototype;fr.insert=function(e){this.root?this.root.insert(e):this.root=new Xn(e[0],null,null,[e],[e])},fr.remove=function(e){if(this.root){var t=this.root.remove(e);return 2===t&&(this.root=null),0!==t}return!1},fr.queryPoint=function(e,t){if(this.root)return this.root.queryPoint(e,t)},fr.queryInterval=function(e,t,n){if(e<=t&&this.root)return this.root.queryInterval(e,t,n)},Object.defineProperty(fr,"count",{get:function(){return this.root?this.root.count:0}}),Object.defineProperty(fr,"intervals",{get:function(){return this.root?this.root.intervals([]):[]}});var pr=function(){return Ft((function e(){It(this,e),Gt(this,"_columnSizeMap",{}),Gt(this,"_intervalTree",new cr(null)),Gt(this,"_leftMap",{})}),[{key:"estimateTotalHeight",value:function(e,t,n){var r=e-this.count;return this.tallestColumnSize+Math.ceil(r/t)*n}},{key:"range",value:function(e,t,n){var r=this;this._intervalTree.queryInterval(e,e+t,(function(e){var t=function(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,o,i,l=[],s=!0,d=!1;try{if(o=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;s=!1}else for(;!(s=(r=o.call(n)).done)&&(l.push(r.value),l.length!==t);s=!0);}catch(e){d=!0,a=e}finally{try{if(!s&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(d)throw a}}return l}}(e,t)||Kn(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}(e,3),a=t[0],o=(t[1],t[2]);return n(o,r._leftMap[o],a)}))}},{key:"setPosition",value:function(e,t,n,r){this._intervalTree.insert([n,n+r,e]),this._leftMap[e]=t;var a=this._columnSizeMap,o=a[t];a[t]=void 0===o?n+r:Math.max(o,n+r)}},{key:"count",get:function(){return this._intervalTree.count}},{key:"shortestColumnSize",get:function(){var e=this._columnSizeMap,t=0;for(var n in e){var r=e[n];t=0===t?r:Math.min(t,r)}return t}},{key:"tallestColumnSize",get:function(){var e=this._columnSizeMap,t=0;for(var n in e){var r=e[n];t=Math.max(t,r)}return t}}])}();function mr(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function hr(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?mr(Object(n),!0).forEach((function(t){Gt(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):mr(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function gr(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(e){}return(gr=function(){return!!e})()}var yr=function(e){function t(){var e,n,r,a;It(this,t);for(var o=arguments.length,i=new Array(o),l=0;l<o;l++)i[l]=arguments[l];return n=this,r=t,a=[].concat(i),r=Wt(r),Gt(e=Bt(n,gr()?Reflect.construct(r,a||[],Wt(n).constructor):r.apply(n,a)),"state",{isScrolling:!1,scrollTop:0}),Gt(e,"_debounceResetIsScrollingId",void 0),Gt(e,"_invalidateOnUpdateStartIndex",null),Gt(e,"_invalidateOnUpdateStopIndex",null),Gt(e,"_positionCache",new pr),Gt(e,"_startIndex",null),Gt(e,"_startIndexMemoized",null),Gt(e,"_stopIndex",null),Gt(e,"_stopIndexMemoized",null),Gt(e,"_debounceResetIsScrollingCallback",(function(){e.setState({isScrolling:!1})})),Gt(e,"_setScrollingContainerRef",(function(t){e._scrollingContainer=t})),Gt(e,"_onScroll",(function(t){var n=e.props.height,r=t.currentTarget.scrollTop,a=Math.min(Math.max(0,e._getEstimatedTotalHeight()-n),r);r===a&&(e._debounceResetIsScrolling(),e.state.scrollTop!==a&&e.setState({isScrolling:!0,scrollTop:a}))})),e}return jt(t,e),Ft(t,[{key:"clearCellPositions",value:function(){this._positionCache=new pr,this.forceUpdate()}},{key:"invalidateCellSizeAfterRender",value:function(e){var t=e.rowIndex;null===this._invalidateOnUpdateStartIndex?(this._invalidateOnUpdateStartIndex=t,this._invalidateOnUpdateStopIndex=t):(this._invalidateOnUpdateStartIndex=Math.min(this._invalidateOnUpdateStartIndex,t),this._invalidateOnUpdateStopIndex=Math.max(this._invalidateOnUpdateStopIndex,t))}},{key:"recomputeCellPositions",value:function(){var e=this._positionCache.count-1;this._positionCache=new pr,this._populatePositionCache(0,e),this.forceUpdate()}},{key:"componentDidMount",value:function(){this._checkInvalidateOnUpdate(),this._invokeOnScrollCallback(),this._invokeOnCellsRenderedCallback()}},{key:"componentDidUpdate",value:function(e,t){this._checkInvalidateOnUpdate(),this._invokeOnScrollCallback(),this._invokeOnCellsRenderedCallback(),this.props.scrollTop!==e.scrollTop&&this._debounceResetIsScrolling()}},{key:"componentWillUnmount",value:function(){this._debounceResetIsScrollingId&&Dn(this._debounceResetIsScrollingId)}},{key:"render",value:function(){var e,t=this,n=this.props,a=n.autoHeight,o=n.cellCount,i=n.cellMeasurerCache,l=n.cellRenderer,s=n.className,d=n.height,u=n.id,c=n.keyMapper,f=n.overscanByPixels,p=n.role,m=n.style,h=n.tabIndex,g=n.width,y=n.rowDirection,v=this.state,b=v.isScrolling,S=v.scrollTop,w=[],_=this._getEstimatedTotalHeight(),C=this._positionCache.shortestColumnSize,k=this._positionCache.count,x=0;if(this._positionCache.range(Math.max(0,S-f),d+2*f,(function(n,r,a){void 0===e?(x=n,e=n):(x=Math.min(x,n),e=Math.max(e,n)),w.push(l({index:n,isScrolling:b,key:c(n),parent:t,style:Gt(Gt(Gt(Gt({height:i.getHeight(n)},"ltr"===y?"left":"right",r),"position","absolute"),"top",a),"width",i.getWidth(n))}))})),C<S+d+f&&k<o)for(var T=Math.min(o-k,Math.ceil((S+d+f-C)/i.defaultHeight*g/i.defaultWidth)),A=k;A<k+T;A++)e=A,w.push(l({index:A,isScrolling:b,key:c(A),parent:this,style:{width:i.getWidth(A)}}));return this._startIndex=x,this._stopIndex=e,r.createElement("div",{ref:this._setScrollingContainerRef,"aria-label":this.props["aria-label"],className:sn("ReactVirtualized__Masonry",s),id:u,onScroll:this._onScroll,role:p,style:hr({boxSizing:"border-box",direction:"ltr",height:a?"auto":d,overflowX:"hidden",overflowY:_<d?"hidden":"auto",position:"relative",width:g,WebkitOverflowScrolling:"touch",willChange:"transform"},m),tabIndex:h},r.createElement("div",{className:"ReactVirtualized__Masonry__innerScrollContainer",style:{width:"100%",height:_,maxWidth:"100%",maxHeight:_,overflow:"hidden",pointerEvents:b?"none":"",position:"relative"}},w))}},{key:"_checkInvalidateOnUpdate",value:function(){if("number"==typeof this._invalidateOnUpdateStartIndex){var e=this._invalidateOnUpdateStartIndex,t=this._invalidateOnUpdateStopIndex;this._invalidateOnUpdateStartIndex=null,this._invalidateOnUpdateStopIndex=null,this._populatePositionCache(e,t),this.forceUpdate()}}},{key:"_debounceResetIsScrolling",value:function(){var e=this.props.scrollingResetTimeInterval;this._debounceResetIsScrollingId&&Dn(this._debounceResetIsScrollingId),this._debounceResetIsScrollingId=Nn(this._debounceResetIsScrollingCallback,e)}},{key:"_getEstimatedTotalHeight",value:function(){var e=this.props,t=e.cellCount,n=e.cellMeasurerCache,r=e.width,a=Math.max(1,Math.floor(r/n.defaultWidth));return this._positionCache.estimateTotalHeight(t,a,n.defaultHeight)}},{key:"_invokeOnScrollCallback",value:function(){var e=this.props,t=e.height,n=e.onScroll,r=this.state.scrollTop;this._onScrollMemoized!==r&&(n({clientHeight:t,scrollHeight:this._getEstimatedTotalHeight(),scrollTop:r}),this._onScrollMemoized=r)}},{key:"_invokeOnCellsRenderedCallback",value:function(){this._startIndexMemoized===this._startIndex&&this._stopIndexMemoized===this._stopIndex||((0,this.props.onCellsRendered)({startIndex:this._startIndex,stopIndex:this._stopIndex}),this._startIndexMemoized=this._startIndex,this._stopIndexMemoized=this._stopIndex)}},{key:"_populatePositionCache",value:function(e,t){for(var n=this.props,r=n.cellMeasurerCache,a=n.cellPositioner,o=e;o<=t;o++){var i=a(o),l=i.left,s=i.top;this._positionCache.setPosition(o,l,s,r.getHeight(o))}}}],[{key:"getDerivedStateFromProps",value:function(e,t){return void 0!==e.scrollTop&&t.scrollTop!==e.scrollTop?{isScrolling:!0,scrollTop:e.scrollTop}:null}}])}(r.PureComponent);function vr(){}Gt(yr,"defaultProps",{autoHeight:!1,keyMapper:function(e){return e},onCellsRendered:vr,onScroll:vr,overscanByPixels:20,role:"grid",scrollingResetTimeInterval:150,style:{},tabIndex:0,rowDirection:"ltr"}),Jt(yr);var br=function(){return Ft((function e(){var t=this,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};It(this,e),Gt(this,"_cellMeasurerCache",void 0),Gt(this,"_columnIndexOffset",void 0),Gt(this,"_rowIndexOffset",void 0),Gt(this,"columnWidth",(function(e){var n=e.index;t._cellMeasurerCache.columnWidth({index:n+t._columnIndexOffset})})),Gt(this,"rowHeight",(function(e){var n=e.index;t._cellMeasurerCache.rowHeight({index:n+t._rowIndexOffset})}));var r=n.cellMeasurerCache,a=n.columnIndexOffset,o=void 0===a?0:a,i=n.rowIndexOffset,l=void 0===i?0:i;this._cellMeasurerCache=r,this._columnIndexOffset=o,this._rowIndexOffset=l}),[{key:"clear",value:function(e,t){this._cellMeasurerCache.clear(e+this._rowIndexOffset,t+this._columnIndexOffset)}},{key:"clearAll",value:function(){this._cellMeasurerCache.clearAll()}},{key:"defaultHeight",get:function(){return this._cellMeasurerCache.defaultHeight}},{key:"defaultWidth",get:function(){return this._cellMeasurerCache.defaultWidth}},{key:"hasFixedHeight",value:function(){return this._cellMeasurerCache.hasFixedHeight()}},{key:"hasFixedWidth",value:function(){return this._cellMeasurerCache.hasFixedWidth()}},{key:"getHeight",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;return this._cellMeasurerCache.getHeight(e+this._rowIndexOffset,t+this._columnIndexOffset)}},{key:"getWidth",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;return this._cellMeasurerCache.getWidth(e+this._rowIndexOffset,t+this._columnIndexOffset)}},{key:"has",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;return this._cellMeasurerCache.has(e+this._rowIndexOffset,t+this._columnIndexOffset)}},{key:"set",value:function(e,t,n,r){this._cellMeasurerCache.set(e+this._rowIndexOffset,t+this._columnIndexOffset,n,r)}}])}(),Sr=["rowIndex"],wr=["columnIndex","rowIndex"],_r=["columnIndex"],Cr=["onScroll","onSectionRendered","onScrollbarPresenceChange","scrollLeft","scrollToColumn","scrollTop","scrollToRow"];function kr(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function xr(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?kr(Object(n),!0).forEach((function(t){Gt(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):kr(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Tr(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(e){}return(Tr=function(){return!!e})()}var Ar=function(e){function t(e,n){var a,o,i,l;It(this,t),o=this,l=[e,n],i=Wt(i=t),Gt(a=Bt(o,Tr()?Reflect.construct(i,l||[],Wt(o).constructor):i.apply(o,l)),"state",{scrollLeft:0,scrollTop:0,scrollbarSize:0,showHorizontalScrollbar:!1,showVerticalScrollbar:!1}),Gt(a,"_deferredInvalidateColumnIndex",null),Gt(a,"_deferredInvalidateRowIndex",null),Gt(a,"_bottomLeftGridRef",(function(e){a._bottomLeftGrid=e})),Gt(a,"_bottomRightGridRef",(function(e){a._bottomRightGrid=e})),Gt(a,"_cellRendererBottomLeftGrid",(function(e){var t=e.rowIndex,n=Tn(e,Sr),o=a.props,i=o.cellRenderer,l=o.fixedRowCount;return t===o.rowCount-l?r.createElement("div",{key:n.key,style:xr(xr({},n.style),{},{height:20})}):i(xr(xr({},n),{},{parent:a,rowIndex:t+l}))})),Gt(a,"_cellRendererBottomRightGrid",(function(e){var t=e.columnIndex,n=e.rowIndex,r=Tn(e,wr),o=a.props,i=o.cellRenderer,l=o.fixedColumnCount,s=o.fixedRowCount;return i(xr(xr({},r),{},{columnIndex:t+l,parent:a,rowIndex:n+s}))})),Gt(a,"_cellRendererTopRightGrid",(function(e){var t=e.columnIndex,n=Tn(e,_r),o=a.props,i=o.cellRenderer,l=o.columnCount,s=o.fixedColumnCount;return t===l-s?r.createElement("div",{key:n.key,style:xr(xr({},n.style),{},{width:20})}):i(xr(xr({},n),{},{columnIndex:t+s,parent:a}))})),Gt(a,"_columnWidthRightGrid",(function(e){var t=e.index,n=a.props,r=n.columnCount,o=n.fixedColumnCount,i=n.columnWidth,l=a.state,s=l.scrollbarSize;return l.showHorizontalScrollbar&&t===r-o?s:"function"==typeof i?i({index:t+o}):i})),Gt(a,"_onScroll",(function(e){var t=e.scrollLeft,n=e.scrollTop;a.setState({scrollLeft:t,scrollTop:n});var r=a.props.onScroll;r&&r(e)})),Gt(a,"_onScrollbarPresenceChange",(function(e){var t=e.horizontal,n=e.size,r=e.vertical,o=a.state,i=o.showHorizontalScrollbar,l=o.showVerticalScrollbar;if(t!==i||r!==l){a.setState({scrollbarSize:n,showHorizontalScrollbar:t,showVerticalScrollbar:r});var s=a.props.onScrollbarPresenceChange;"function"==typeof s&&s({horizontal:t,size:n,vertical:r})}})),Gt(a,"_onScrollLeft",(function(e){var t=e.scrollLeft;a._onScroll({scrollLeft:t,scrollTop:a.state.scrollTop})})),Gt(a,"_onScrollTop",(function(e){var t=e.scrollTop;a._onScroll({scrollTop:t,scrollLeft:a.state.scrollLeft})})),Gt(a,"_rowHeightBottomGrid",(function(e){var t=e.index,n=a.props,r=n.fixedRowCount,o=n.rowCount,i=n.rowHeight,l=a.state,s=l.scrollbarSize;return l.showVerticalScrollbar&&t===o-r?s:"function"==typeof i?i({index:t+r}):i})),Gt(a,"_topLeftGridRef",(function(e){a._topLeftGrid=e})),Gt(a,"_topRightGridRef",(function(e){a._topRightGrid=e}));var s=e.deferredMeasurementCache,d=e.fixedColumnCount,u=e.fixedRowCount;return a._maybeCalculateCachedStyles(!0),s&&(a._deferredMeasurementCacheBottomLeftGrid=u>0?new br({cellMeasurerCache:s,columnIndexOffset:0,rowIndexOffset:u}):s,a._deferredMeasurementCacheBottomRightGrid=d>0||u>0?new br({cellMeasurerCache:s,columnIndexOffset:d,rowIndexOffset:u}):s,a._deferredMeasurementCacheTopRightGrid=d>0?new br({cellMeasurerCache:s,columnIndexOffset:d,rowIndexOffset:0}):s),a}return jt(t,e),Ft(t,[{key:"forceUpdateGrids",value:function(){this._bottomLeftGrid&&this._bottomLeftGrid.forceUpdate(),this._bottomRightGrid&&this._bottomRightGrid.forceUpdate(),this._topLeftGrid&&this._topLeftGrid.forceUpdate(),this._topRightGrid&&this._topRightGrid.forceUpdate()}},{key:"invalidateCellSizeAfterRender",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.columnIndex,n=void 0===t?0:t,r=e.rowIndex,a=void 0===r?0:r;this._deferredInvalidateColumnIndex="number"==typeof this._deferredInvalidateColumnIndex?Math.min(this._deferredInvalidateColumnIndex,n):n,this._deferredInvalidateRowIndex="number"==typeof this._deferredInvalidateRowIndex?Math.min(this._deferredInvalidateRowIndex,a):a}},{key:"measureAllCells",value:function(){this._bottomLeftGrid&&this._bottomLeftGrid.measureAllCells(),this._bottomRightGrid&&this._bottomRightGrid.measureAllCells(),this._topLeftGrid&&this._topLeftGrid.measureAllCells(),this._topRightGrid&&this._topRightGrid.measureAllCells()}},{key:"recomputeGridSize",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.columnIndex,n=void 0===t?0:t,r=e.rowIndex,a=void 0===r?0:r,o=this.props,i=o.fixedColumnCount,l=o.fixedRowCount,s=Math.max(0,n-i),d=Math.max(0,a-l);this._bottomLeftGrid&&this._bottomLeftGrid.recomputeGridSize({columnIndex:n,rowIndex:d}),this._bottomRightGrid&&this._bottomRightGrid.recomputeGridSize({columnIndex:s,rowIndex:d}),this._topLeftGrid&&this._topLeftGrid.recomputeGridSize({columnIndex:n,rowIndex:a}),this._topRightGrid&&this._topRightGrid.recomputeGridSize({columnIndex:s,rowIndex:a}),this._leftGridWidth=null,this._topGridHeight=null,this._maybeCalculateCachedStyles(!0)}},{key:"componentDidMount",value:function(){var e=this.props,t=e.scrollLeft,n=e.scrollTop;if(t>0||n>0){var r={};t>0&&(r.scrollLeft=t),n>0&&(r.scrollTop=n),this.setState(r)}this._handleInvalidatedGridSize()}},{key:"componentDidUpdate",value:function(){this._handleInvalidatedGridSize()}},{key:"render",value:function(){var e=this.props,t=e.onScroll,n=e.onSectionRendered,a=(e.onScrollbarPresenceChange,e.scrollLeft,e.scrollToColumn),o=(e.scrollTop,e.scrollToRow),i=Tn(e,Cr);if(this._prepareForRender(),0===this.props.width||0===this.props.height)return null;var l=this.state,s=l.scrollLeft,d=l.scrollTop;return r.createElement("div",{style:this._containerOuterStyle},r.createElement("div",{style:this._containerTopStyle},this._renderTopLeftGrid(i),this._renderTopRightGrid(xr(xr({},i),{},{onScroll:t,scrollLeft:s}))),r.createElement("div",{style:this._containerBottomStyle},this._renderBottomLeftGrid(xr(xr({},i),{},{onScroll:t,scrollTop:d})),this._renderBottomRightGrid(xr(xr({},i),{},{onScroll:t,onSectionRendered:n,scrollLeft:s,scrollToColumn:a,scrollToRow:o,scrollTop:d}))))}},{key:"_getBottomGridHeight",value:function(e){return e.height-this._getTopGridHeight(e)}},{key:"_getLeftGridWidth",value:function(e){var t=e.fixedColumnCount,n=e.columnWidth;if(null==this._leftGridWidth)if("function"==typeof n){for(var r=0,a=0;a<t;a++)r+=n({index:a});this._leftGridWidth=r}else this._leftGridWidth=n*t;return this._leftGridWidth}},{key:"_getRightGridWidth",value:function(e){return e.width-this._getLeftGridWidth(e)}},{key:"_getTopGridHeight",value:function(e){var t=e.fixedRowCount,n=e.rowHeight;if(null==this._topGridHeight)if("function"==typeof n){for(var r=0,a=0;a<t;a++)r+=n({index:a});this._topGridHeight=r}else this._topGridHeight=n*t;return this._topGridHeight}},{key:"_handleInvalidatedGridSize",value:function(){if("number"==typeof this._deferredInvalidateColumnIndex){var e=this._deferredInvalidateColumnIndex,t=this._deferredInvalidateRowIndex;this._deferredInvalidateColumnIndex=null,this._deferredInvalidateRowIndex=null,this.recomputeGridSize({columnIndex:e,rowIndex:t}),this.forceUpdate()}}},{key:"_maybeCalculateCachedStyles",value:function(e){var t=this.props,n=t.columnWidth,r=t.enableFixedColumnScroll,a=t.enableFixedRowScroll,o=t.height,i=t.fixedColumnCount,l=t.fixedRowCount,s=t.rowHeight,d=t.style,u=t.styleBottomLeftGrid,c=t.styleBottomRightGrid,f=t.styleTopLeftGrid,p=t.styleTopRightGrid,m=t.width,h=e||o!==this._lastRenderedHeight||m!==this._lastRenderedWidth,g=e||n!==this._lastRenderedColumnWidth||i!==this._lastRenderedFixedColumnCount,y=e||l!==this._lastRenderedFixedRowCount||s!==this._lastRenderedRowHeight;(e||h||d!==this._lastRenderedStyle)&&(this._containerOuterStyle=xr({height:o,overflow:"visible",width:m},d)),(e||h||y)&&(this._containerTopStyle={height:this._getTopGridHeight(this.props),position:"relative",width:m},this._containerBottomStyle={height:o-this._getTopGridHeight(this.props),overflow:"visible",position:"relative",width:m}),(e||u!==this._lastRenderedStyleBottomLeftGrid)&&(this._bottomLeftGridStyle=xr({left:0,overflowX:"hidden",overflowY:r?"auto":"hidden",position:"absolute"},u)),(e||g||c!==this._lastRenderedStyleBottomRightGrid)&&(this._bottomRightGridStyle=xr({left:this._getLeftGridWidth(this.props),position:"absolute"},c)),(e||f!==this._lastRenderedStyleTopLeftGrid)&&(this._topLeftGridStyle=xr({left:0,overflowX:"hidden",overflowY:"hidden",position:"absolute",top:0},f)),(e||g||p!==this._lastRenderedStyleTopRightGrid)&&(this._topRightGridStyle=xr({left:this._getLeftGridWidth(this.props),overflowX:a?"auto":"hidden",overflowY:"hidden",position:"absolute",top:0},p)),this._lastRenderedColumnWidth=n,this._lastRenderedFixedColumnCount=i,this._lastRenderedFixedRowCount=l,this._lastRenderedHeight=o,this._lastRenderedRowHeight=s,this._lastRenderedStyle=d,this._lastRenderedStyleBottomLeftGrid=u,this._lastRenderedStyleBottomRightGrid=c,this._lastRenderedStyleTopLeftGrid=f,this._lastRenderedStyleTopRightGrid=p,this._lastRenderedWidth=m}},{key:"_prepareForRender",value:function(){this._lastRenderedColumnWidth===this.props.columnWidth&&this._lastRenderedFixedColumnCount===this.props.fixedColumnCount||(this._leftGridWidth=null),this._lastRenderedFixedRowCount===this.props.fixedRowCount&&this._lastRenderedRowHeight===this.props.rowHeight||(this._topGridHeight=null),this._maybeCalculateCachedStyles(),this._lastRenderedColumnWidth=this.props.columnWidth,this._lastRenderedFixedColumnCount=this.props.fixedColumnCount,this._lastRenderedFixedRowCount=this.props.fixedRowCount,this._lastRenderedRowHeight=this.props.rowHeight}},{key:"_renderBottomLeftGrid",value:function(e){var t=e.enableFixedColumnScroll,n=e.fixedColumnCount,a=e.fixedRowCount,o=e.rowCount,i=e.hideBottomLeftGridScrollbar,l=this.state.showVerticalScrollbar;if(!n)return null;var s=l?1:0,d=this._getBottomGridHeight(e),u=this._getLeftGridWidth(e),c=this.state.showVerticalScrollbar?this.state.scrollbarSize:0,f=i?u+c:u,p=r.createElement(Gn,on({},e,{cellRenderer:this._cellRendererBottomLeftGrid,className:this.props.classNameBottomLeftGrid,columnCount:n,deferredMeasurementCache:this._deferredMeasurementCacheBottomLeftGrid,height:d,onScroll:t?this._onScrollTop:void 0,ref:this._bottomLeftGridRef,rowCount:Math.max(0,o-a)+s,rowHeight:this._rowHeightBottomGrid,style:this._bottomLeftGridStyle,tabIndex:null,width:f}));return i?r.createElement("div",{className:"BottomLeftGrid_ScrollWrapper",style:xr(xr({},this._bottomLeftGridStyle),{},{height:d,width:u,overflowY:"hidden"})},p):p}},{key:"_renderBottomRightGrid",value:function(e){var t=e.columnCount,n=e.fixedColumnCount,a=e.fixedRowCount,o=e.rowCount,i=e.scrollToColumn,l=e.scrollToRow;return r.createElement(Gn,on({},e,{cellRenderer:this._cellRendererBottomRightGrid,className:this.props.classNameBottomRightGrid,columnCount:Math.max(0,t-n),columnWidth:this._columnWidthRightGrid,deferredMeasurementCache:this._deferredMeasurementCacheBottomRightGrid,height:this._getBottomGridHeight(e),onScroll:this._onScroll,onScrollbarPresenceChange:this._onScrollbarPresenceChange,ref:this._bottomRightGridRef,rowCount:Math.max(0,o-a),rowHeight:this._rowHeightBottomGrid,scrollToColumn:i-n,scrollToRow:l-a,style:this._bottomRightGridStyle,width:this._getRightGridWidth(e)}))}},{key:"_renderTopLeftGrid",value:function(e){var t=e.fixedColumnCount,n=e.fixedRowCount;return t&&n?r.createElement(Gn,on({},e,{className:this.props.classNameTopLeftGrid,columnCount:t,height:this._getTopGridHeight(e),ref:this._topLeftGridRef,rowCount:n,style:this._topLeftGridStyle,tabIndex:null,width:this._getLeftGridWidth(e)})):null}},{key:"_renderTopRightGrid",value:function(e){var t=e.columnCount,n=e.enableFixedRowScroll,a=e.fixedColumnCount,o=e.fixedRowCount,i=e.scrollLeft,l=e.hideTopRightGridScrollbar,s=this.state,d=s.showHorizontalScrollbar,u=s.scrollbarSize;if(!o)return null;var c=d?1:0,f=this._getTopGridHeight(e),p=this._getRightGridWidth(e),m=d?u:0,h=f,g=this._topRightGridStyle;l&&(h=f+m,g=xr(xr({},this._topRightGridStyle),{},{left:0}));var y=r.createElement(Gn,on({},e,{cellRenderer:this._cellRendererTopRightGrid,className:this.props.classNameTopRightGrid,columnCount:Math.max(0,t-a)+c,columnWidth:this._columnWidthRightGrid,deferredMeasurementCache:this._deferredMeasurementCacheTopRightGrid,height:h,onScroll:n?this._onScrollLeft:void 0,ref:this._topRightGridRef,rowCount:o,scrollLeft:i,style:g,tabIndex:null,width:p}));return l?r.createElement("div",{className:"TopRightGrid_ScrollWrapper",style:xr(xr({},this._topRightGridStyle),{},{height:f,width:p,overflowX:"hidden"})},y):y}}],[{key:"getDerivedStateFromProps",value:function(e,t){return e.scrollLeft!==t.scrollLeft||e.scrollTop!==t.scrollTop?{scrollLeft:null!=e.scrollLeft&&e.scrollLeft>=0?e.scrollLeft:t.scrollLeft,scrollTop:null!=e.scrollTop&&e.scrollTop>=0?e.scrollTop:t.scrollTop}:null}}])}(r.PureComponent);function Pr(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(e){}return(Pr=function(){return!!e})()}Gt(Ar,"defaultProps",{classNameBottomLeftGrid:"",classNameBottomRightGrid:"",classNameTopLeftGrid:"",classNameTopRightGrid:"",enableFixedColumnScroll:!1,enableFixedRowScroll:!1,fixedColumnCount:0,fixedRowCount:0,scrollToColumn:-1,scrollToRow:-1,style:{},styleBottomLeftGrid:{},styleBottomRightGrid:{},styleTopLeftGrid:{},styleTopRightGrid:{},hideTopRightGridScrollbar:!1,hideBottomLeftGridScrollbar:!1}),Ar.propTypes={},Jt(Ar),(function(e){function t(e,n){var r,a,o,i;return It(this,t),a=this,i=[e,n],o=Wt(o=t),(r=Bt(a,Pr()?Reflect.construct(o,i||[],Wt(a).constructor):o.apply(a,i))).state={clientHeight:0,clientWidth:0,scrollHeight:0,scrollLeft:0,scrollTop:0,scrollWidth:0},r._onScroll=r._onScroll.bind(r),r}return jt(t,e),Ft(t,[{key:"render",value:function(){var e=this.props.children,t=this.state,n=t.clientHeight,r=t.clientWidth,a=t.scrollHeight,o=t.scrollLeft,i=t.scrollTop,l=t.scrollWidth;return e({clientHeight:n,clientWidth:r,onScroll:this._onScroll,scrollHeight:a,scrollLeft:o,scrollTop:i,scrollWidth:l})}},{key:"_onScroll",value:function(e){var t=e.clientHeight,n=e.clientWidth,r=e.scrollHeight,a=e.scrollLeft,o=e.scrollTop,i=e.scrollWidth;this.setState({clientHeight:t,clientWidth:n,scrollHeight:r,scrollLeft:a,scrollTop:o,scrollWidth:i})}}])}(r.PureComponent)).propTypes={};const zr="ASC",Rr="DESC";function Er(e){var t=e.sortDirection,n=sn("ReactVirtualized__Table__sortableHeaderIcon",{"ReactVirtualized__Table__sortableHeaderIcon--ASC":t===zr,"ReactVirtualized__Table__sortableHeaderIcon--DESC":t===Rr});return r.createElement("svg",{className:n,width:18,height:18,viewBox:"0 0 24 24"},t===zr?r.createElement("path",{d:"M7 14l5-5 5 5z"}):r.createElement("path",{d:"M7 10l5 5 5-5z"}),r.createElement("path",{d:"M0 0h24v24H0z",fill:"none"}))}function Or(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(e){}return(Or=function(){return!!e})()}Er.propTypes={};var Mr=function(e){function t(){return It(this,t),e=this,r=arguments,n=Wt(n=t),Bt(e,Or()?Reflect.construct(n,r||[],Wt(e).constructor):n.apply(e,r));var e,n,r}return jt(t,e),Ft(t)}(r.Component);function Ir(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Lr(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Ir(Object(n),!0).forEach((function(t){Gt(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Ir(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Dr(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(e){}return(Dr=function(){return!!e})()}Gt(Mr,"defaultProps",{cellDataGetter:function(e){var t=e.dataKey,n=e.rowData;return"function"==typeof n.get?n.get(t):n[t]},cellRenderer:function(e){var t=e.cellData;return null==t?"":String(t)},defaultSortDirection:zr,flexGrow:0,flexShrink:1,headerRenderer:function(e){var t=e.dataKey,n=e.label,a=e.sortBy,o=e.sortDirection,i=a===t,l=[r.createElement("span",{className:"ReactVirtualized__Table__headerTruncatedText",key:"label",title:"string"==typeof n?n:null},n)];return i&&l.push(r.createElement(Er,{key:"SortIndicator",sortDirection:o})),l},style:{}}),Mr.propTypes={};var Nr=function(e){function t(e){var n,r,a,o;return It(this,t),r=this,o=[e],a=Wt(a=t),(n=Bt(r,Dr()?Reflect.construct(a,o||[],Wt(r).constructor):a.apply(r,o))).state={scrollbarWidth:0},n._createColumn=n._createColumn.bind(n),n._createRow=n._createRow.bind(n),n._onScroll=n._onScroll.bind(n),n._onSectionRendered=n._onSectionRendered.bind(n),n._setRef=n._setRef.bind(n),n._setGridElementRef=n._setGridElementRef.bind(n),n}return jt(t,e),Ft(t,[{key:"forceUpdateGrid",value:function(){this.Grid&&this.Grid.forceUpdate()}},{key:"getOffsetForRow",value:function(e){var t=e.alignment,n=e.index;return this.Grid?this.Grid.getOffsetForCell({alignment:t,rowIndex:n}).scrollTop:0}},{key:"invalidateCellSizeAfterRender",value:function(e){var t=e.columnIndex,n=e.rowIndex;this.Grid&&this.Grid.invalidateCellSizeAfterRender({rowIndex:n,columnIndex:t})}},{key:"measureAllRows",value:function(){this.Grid&&this.Grid.measureAllCells()}},{key:"recomputeGridSize",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.columnIndex,n=void 0===t?0:t,r=e.rowIndex,a=void 0===r?0:r;this.Grid&&this.Grid.recomputeGridSize({rowIndex:a,columnIndex:n})}},{key:"recomputeRowHeights",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;this.Grid&&this.Grid.recomputeGridSize({rowIndex:e})}},{key:"scrollToPosition",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;this.Grid&&this.Grid.scrollToPosition({scrollTop:e})}},{key:"scrollToRow",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;this.Grid&&this.Grid.scrollToCell({columnIndex:0,rowIndex:e})}},{key:"getScrollbarWidth",value:function(){if(this.GridElement){var e=this.GridElement,t=e.clientWidth||0;return(e.offsetWidth||0)-t}return 0}},{key:"componentDidMount",value:function(){this._setScrollbarWidth()}},{key:"componentDidUpdate",value:function(){this._setScrollbarWidth()}},{key:"render",value:function(){var e=this,t=this.props,n=t.children,a=t.className,o=t.disableHeader,i=t.gridClassName,l=t.gridStyle,s=t.headerHeight,d=t.headerRowRenderer,u=t.height,c=t.id,f=t.noRowsRenderer,p=t.rowClassName,m=t.rowStyle,h=t.scrollToIndex,g=t.style,y=t.width,v=this.state.scrollbarWidth,b=o?u:u-s,S="function"==typeof p?p({index:-1}):p,w="function"==typeof m?m({index:-1}):m;return this._cachedColumnStyles=[],r.Children.toArray(n).forEach((function(t,n){var r=e._getFlexStyleForColumn(t,t.props.style||Mr.defaultProps.style);e._cachedColumnStyles[n]=Lr({overflow:"hidden"},r)})),r.createElement("div",{"aria-label":this.props["aria-label"],"aria-labelledby":this.props["aria-labelledby"],"aria-colcount":r.Children.toArray(n).length,"aria-rowcount":this.props.rowCount,className:sn("ReactVirtualized__Table",a),id:c,role:"grid",style:g},!o&&d({className:sn("ReactVirtualized__Table__headerRow",S),columns:this._getHeaderColumns(),style:Lr({height:s,overflow:"hidden",paddingRight:v,width:y},w)}),r.createElement(Gn,on({},this.props,{elementRef:this._setGridElementRef,"aria-readonly":null,autoContainerWidth:!0,className:sn("ReactVirtualized__Table__Grid",i),cellRenderer:this._createRow,columnWidth:y,columnCount:1,height:b,id:void 0,noContentRenderer:f,onScroll:this._onScroll,onSectionRendered:this._onSectionRendered,ref:this._setRef,role:"rowgroup",scrollbarWidth:v,scrollToRow:h,style:Lr(Lr({},l),{},{overflowX:"hidden"})})))}},{key:"_createColumn",value:function(e){var t=e.column,n=e.columnIndex,a=e.isScrolling,o=e.parent,i=e.rowData,l=e.rowIndex,s=this.props.onColumnClick,d=t.props,u=d.cellDataGetter,c=d.cellRenderer,f=d.className,p=d.columnData,m=d.dataKey,h=d.id,g=c({cellData:u({columnData:p,dataKey:m,rowData:i}),columnData:p,columnIndex:n,dataKey:m,isScrolling:a,parent:o,rowData:i,rowIndex:l}),y=this._cachedColumnStyles[n],v="string"==typeof g?g:null;return r.createElement("div",{"aria-colindex":n+1,"aria-describedby":h,className:sn("ReactVirtualized__Table__rowColumn",f),key:"Row"+l+"-Col"+n,onClick:function(e){s&&s({columnData:p,dataKey:m,event:e})},role:"gridcell",style:y,title:v},g)}},{key:"_createHeader",value:function(e){var t,n,a,o,i,l=e.column,s=e.index,d=this.props,u=d.headerClassName,c=d.headerStyle,f=d.onHeaderClick,p=d.sort,m=d.sortBy,h=d.sortDirection,g=l.props,y=g.columnData,v=g.dataKey,b=g.defaultSortDirection,S=g.disableSort,w=g.headerRenderer,_=g.id,C=g.label,k=!S&&p,x=sn("ReactVirtualized__Table__headerColumn",u,l.props.headerClassName,{ReactVirtualized__Table__sortableHeaderColumn:k}),T=this._getFlexStyleForColumn(l,Lr(Lr({},c),l.props.headerStyle)),A=w({columnData:y,dataKey:v,disableSort:S,label:C,sortBy:m,sortDirection:h});if(k||f){var P=m!==v?b:h===Rr?zr:Rr,z=function(e){k&&p({defaultSortDirection:b,event:e,sortBy:v,sortDirection:P}),f&&f({columnData:y,dataKey:v,event:e})};i=l.props["aria-label"]||C||v,o="none",a=0,t=z,n=function(e){"Enter"!==e.key&&" "!==e.key||z(e)}}return m===v&&(o=h===zr?"ascending":"descending"),r.createElement("div",{"aria-label":i,"aria-sort":o,className:x,id:_,key:"Header-Col"+s,onClick:t,onKeyDown:n,role:"columnheader",style:T,tabIndex:a},A)}},{key:"_createRow",value:function(e){var t=this,n=e.rowIndex,a=e.isScrolling,o=e.key,i=e.parent,l=e.style,s=this.props,d=s.children,u=s.onRowClick,c=s.onRowDoubleClick,f=s.onRowRightClick,p=s.onRowMouseOver,m=s.onRowMouseOut,h=s.rowClassName,g=s.rowGetter,y=s.rowRenderer,v=s.rowStyle,b=this.state.scrollbarWidth,S="function"==typeof h?h({index:n}):h,w="function"==typeof v?v({index:n}):v,_=g({index:n}),C=r.Children.toArray(d).map((function(e,r){return t._createColumn({column:e,columnIndex:r,isScrolling:a,parent:i,rowData:_,rowIndex:n,scrollbarWidth:b})})),k=sn("ReactVirtualized__Table__row",S),x=Lr(Lr({},l),{},{height:this._getRowHeight(n),overflow:"hidden",paddingRight:b},w);return y({className:k,columns:C,index:n,isScrolling:a,key:o,onRowClick:u,onRowDoubleClick:c,onRowRightClick:f,onRowMouseOver:p,onRowMouseOut:m,rowData:_,style:x})}},{key:"_getFlexStyleForColumn",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n="".concat(e.props.flexGrow," ").concat(e.props.flexShrink," ").concat(e.props.width,"px"),r=Lr(Lr({},t),{},{flex:n,msFlex:n,WebkitFlex:n});return e.props.maxWidth&&(r.maxWidth=e.props.maxWidth),e.props.minWidth&&(r.minWidth=e.props.minWidth),r}},{key:"_getHeaderColumns",value:function(){var e=this,t=this.props,n=t.children;return(t.disableHeader?[]:r.Children.toArray(n)).map((function(t,n){return e._createHeader({column:t,index:n})}))}},{key:"_getRowHeight",value:function(e){var t=this.props.rowHeight;return"function"==typeof t?t({index:e}):t}},{key:"_onScroll",value:function(e){var t=e.clientHeight,n=e.scrollHeight,r=e.scrollTop;(0,this.props.onScroll)({clientHeight:t,scrollHeight:n,scrollTop:r})}},{key:"_onSectionRendered",value:function(e){var t=e.rowOverscanStartIndex,n=e.rowOverscanStopIndex,r=e.rowStartIndex,a=e.rowStopIndex;(0,this.props.onRowsRendered)({overscanStartIndex:t,overscanStopIndex:n,startIndex:r,stopIndex:a})}},{key:"_setRef",value:function(e){this.Grid=e}},{key:"_setGridElementRef",value:function(e){this.GridElement=e}},{key:"_setScrollbarWidth",value:function(){var e=this.getScrollbarWidth();this.setState({scrollbarWidth:e})}}])}(r.PureComponent);Gt(Nr,"defaultProps",{disableHeader:!1,estimatedRowSize:30,headerHeight:0,headerStyle:{},noRowsRenderer:function(){return null},onRowsRendered:function(){return null},onScroll:function(){return null},overscanIndicesGetter:Un,overscanRowCount:10,rowRenderer:function(e){var t=e.className,n=e.columns,a=e.index,o=e.key,i=e.onRowClick,l=e.onRowDoubleClick,s=e.onRowMouseOut,d=e.onRowMouseOver,u=e.onRowRightClick,c=e.rowData,f=e.style,p={"aria-rowindex":a+1};return(i||l||s||d||u)&&(p["aria-label"]="row",p.tabIndex=0,i&&(p.onClick=function(e){return i({event:e,index:a,rowData:c})}),l&&(p.onDoubleClick=function(e){return l({event:e,index:a,rowData:c})}),s&&(p.onMouseOut=function(e){return s({event:e,index:a,rowData:c})}),d&&(p.onMouseOver=function(e){return d({event:e,index:a,rowData:c})}),u&&(p.onContextMenu=function(e){return u({event:e,index:a,rowData:c})})),r.createElement("div",on({},p,{className:t,key:o,role:"row",style:f}),n)},headerRowRenderer:function(e){var t=e.className,n=e.columns,a=e.style;return r.createElement("div",{className:t,role:"row",style:a},n)},rowStyle:{},scrollToAlignment:"auto",scrollToIndex:-1,style:{}}),Nr.propTypes={};var Fr=[],Br=null,Wr=null;function Hr(){Wr&&(Wr=null,document.body&&null!=Br&&(document.body.style.pointerEvents=Br),Br=null)}function jr(){Hr(),Fr.forEach((function(e){return e.__resetIsScrolling()}))}function Gr(e){e.currentTarget===window&&null==Br&&document.body&&(Br=document.body.style.pointerEvents,document.body.style.pointerEvents="none"),function(){Wr&&Dn(Wr);var e=0;Fr.forEach((function(t){e=Math.max(e,t.props.scrollingResetTimeInterval)})),Wr=Nn(jr,e)}(),Fr.forEach((function(t){t.props.scrollElement===e.currentTarget&&t.__handleWindowScrollEvent()}))}function Ur(e,t){Fr.some((function(e){return e.props.scrollElement===t}))||t.addEventListener("scroll",Gr),Fr.push(e)}function Vr(e,t){(Fr=Fr.filter((function(t){return t!==e}))).length||(t.removeEventListener("scroll",Gr),Wr&&(Dn(Wr),Hr()))}var Kr=function(e){return e===window},Jr=function(e){return e.getBoundingClientRect()};function $r(e,t){if(e){if(Kr(e)){var n=window,r=n.innerHeight,a=n.innerWidth;return{height:"number"==typeof r?r:0,width:"number"==typeof a?a:0}}return Jr(e)}return{height:t.serverHeight,width:t.serverWidth}}function Yr(e){return Kr(e)&&document.documentElement?{top:"scrollY"in window?window.scrollY:document.documentElement.scrollTop,left:"scrollX"in window?window.scrollX:document.documentElement.scrollLeft}:{top:e.scrollTop,left:e.scrollLeft}}function qr(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Qr(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?qr(Object(n),!0).forEach((function(t){Gt(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):qr(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Xr(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(e){}return(Xr=function(){return!!e})()}var Zr=function(){return"undefined"!=typeof window?window:void 0},ea=function(e){function t(){var e,n,a,o;It(this,t);for(var i=arguments.length,l=new Array(i),s=0;s<i;s++)l[s]=arguments[s];return n=this,a=t,o=[].concat(l),a=Wt(a),Gt(e=Bt(n,Xr()?Reflect.construct(a,o||[],Wt(n).constructor):a.apply(n,o)),"_window",Zr()),Gt(e,"_isMounted",!1),Gt(e,"_positionFromTop",0),Gt(e,"_positionFromLeft",0),Gt(e,"_detectElementResize",void 0),Gt(e,"_child",void 0),Gt(e,"_windowScrollerRef",r.createRef()),Gt(e,"state",Qr(Qr({},$r(e.props.scrollElement,e.props)),{},{isScrolling:!1,scrollLeft:0,scrollTop:0})),Gt(e,"_registerChild",(function(t){!t||t instanceof Element||console.warn("WindowScroller registerChild expects to be passed Element or null"),e._child=t,e.updatePosition()})),Gt(e,"_onChildScroll",(function(t){var n=t.scrollTop;if(e.state.scrollTop!==n){var r=e.props.scrollElement;r&&("function"==typeof r.scrollTo?r.scrollTo(0,n+e._positionFromTop):r.scrollTop=n+e._positionFromTop)}})),Gt(e,"_registerResizeListener",(function(t){t===window?window.addEventListener("resize",e._onResize,!1):e._detectElementResize.addResizeListener(t,e._onResize)})),Gt(e,"_unregisterResizeListener",(function(t){t===window?window.removeEventListener("resize",e._onResize,!1):t&&e._detectElementResize.removeResizeListener(t,e._onResize)})),Gt(e,"_onResize",(function(){e.updatePosition()})),Gt(e,"__handleWindowScrollEvent",(function(){if(e._isMounted){var t=e.props.onScroll,n=e.props.scrollElement;if(n){var r=Yr(n),a=Math.max(0,r.left-e._positionFromLeft),o=Math.max(0,r.top-e._positionFromTop);e.setState({isScrolling:!0,scrollLeft:a,scrollTop:o}),t({scrollLeft:a,scrollTop:o})}}})),Gt(e,"__resetIsScrolling",(function(){e.setState({isScrolling:!1})})),e}return jt(t,e),Ft(t,[{key:"updatePosition",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.props.scrollElement,t=this.props.onResize,n=this.state,r=n.height,a=n.width,o=this._child||this._windowScrollerRef.current;if(o instanceof Element&&e){var i=function(e,t){if(Kr(t)&&document.documentElement){var n=document.documentElement,r=Jr(e),a=Jr(n);return{top:r.top-a.top,left:r.left-a.left}}var o=Yr(t),i=Jr(e),l=Jr(t);return{top:i.top+o.top-l.top,left:i.left+o.left-l.left}}(o,e);this._positionFromTop=i.top,this._positionFromLeft=i.left}var l=$r(e,this.props);r===l.height&&a===l.width||(this.setState({height:l.height,width:l.width}),t({height:l.height,width:l.width})),!0===this.props.updateScrollTopOnUpdatePosition&&(this.__handleWindowScrollEvent(),this.__resetIsScrolling())}},{key:"componentDidMount",value:function(){var e=this.props.scrollElement;this._detectElementResize=Xt(),this.updatePosition(e),e&&(Ur(this,e),this._registerResizeListener(e)),this._isMounted=!0}},{key:"componentDidUpdate",value:function(e,t){var n=this.props.scrollElement,r=e.scrollElement;r!==n&&null!=r&&null!=n&&(this.updatePosition(n),Vr(this,r),Ur(this,n),this._unregisterResizeListener(r),this._registerResizeListener(n))}},{key:"componentWillUnmount",value:function(){var e=this.props.scrollElement;e&&(Vr(this,e),this._unregisterResizeListener(e)),this._isMounted=!1}},{key:"render",value:function(){var e=this.props.children,t=this.state,n=t.isScrolling,a=t.scrollTop,o=t.scrollLeft,i=t.height,l=t.width;return r.createElement("div",{ref:this._windowScrollerRef},e({onChildScroll:this._onChildScroll,registerChild:this._registerChild,height:i,isScrolling:n,scrollLeft:o,scrollTop:a,width:l}))}}])}(r.PureComponent);Gt(ea,"defaultProps",{onResize:function(){},onScroll:function(){},scrollingResetTimeInterval:150,scrollElement:Zr(),serverHeight:0,serverWidth:0});var ta=function(e){var t=e.rowHeight,n=ct(ft),a=n.length,o=function(e){var t=e.index,a=e.key,o=e.style,i=n[t];return r.createElement("div",{key:a,style:o},r.createElement(Ot,{companyId:i.id}))};return r.createElement("div",null,r.createElement(ea,null,(function(e){var n=e.height,i=e.isScrolling,l=e.onChildScroll,s=e.scrollTop;return r.createElement(nn,{disableHeight:!0},(function(e){var d=e.width;return r.createElement(qn,{autoHeight:!0,isScrolling:i,onScroll:l,scrollTop:s,rowRenderer:o,height:n,rowCount:a,rowHeight:t,width:d})}))})))};function na(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,o,i,l=[],s=!0,d=!1;try{if(o=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;s=!1}else for(;!(s=(r=o.call(n)).done)&&(l.push(r.value),l.length!==t);s=!0);}catch(e){d=!0,a=e}finally{try{if(!s&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(d)throw a}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return ra(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?ra(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ra(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}var aa=function(){return r.createElement("div",{className:st.zA},r.createElement("div",{className:st.dV},r.createElement(oa,null),r.createElement(ia,null)),r.createElement("div",{className:st.tp},r.createElement("div",{className:st.NK},r.createElement(Mt,null,r.createElement("div",null),r.createElement("div",null,"Название"),r.createElement("div",null,"Адрес"))),r.createElement(ta,{rowHeight:50})))},oa=function(){var e=ut(),t=ct(pt),n=ct(mt),a=na((0,r.useState)("Выделить все"),2),o=a[0],i=a[1];return(0,r.useEffect)((function(){i(t?"Отменить выделение":"Выделить все")}),[t]),r.createElement("div",{className:st.yN},r.createElement(bt,{onClick:function(){e(t?Ke():Ve())}},o),r.createElement(bt,{disabled:!n,onClick:function(){e(Je())}},"Удалить выбранные"))},ia=function(){var e=na((0,r.useState)(""),2),t=e[0],n=e[1],a=na((0,r.useState)(""),2),o=a[0],i=a[1],l=ut();return r.createElement("div",{className:st.gD},r.createElement(kt,{placeholder:"Название компании",value:t,onChange:function(e){return n(e.target.value)}}),r.createElement(kt,{placeholder:"Адрес компании",value:o,onChange:function(e){return i(e.target.value)}}),r.createElement(bt,{onClick:function(){t&&o&&(l(Ue({name:t,address:o})),n(""),i(""))}},"Добавить"))},la=function(e){const t=function(e){const{thunk:t=!0,immutableCheck:n=!0,serializableCheck:r=!0,actionCreatorCheck:a=!0}=e??{};let o=new xe;return t&&("boolean"==typeof t?o.push(O):o.push(M(t.extraArgument))),o},{reducer:n,middleware:r,devTools:a=!0,preloadedState:o,enhancers:i}=e||{};let l,s;if("function"==typeof n)l=n;else{if(!P(n))throw new Error(Ne(1));l=function(e){const t=Object.keys(e),n={};for(let r=0;r<t.length;r++){const a=t[r];"function"==typeof e[a]&&(n[a]=e[a])}const r=Object.keys(n);let a;try{!function(e){Object.keys(e).forEach((t=>{const n=e[t];if(void 0===n(void 0,{type:A.INIT}))throw new Error(k(12));if(void 0===n(void 0,{type:A.PROBE_UNKNOWN_ACTION()}))throw new Error(k(13))}))}(n)}catch(e){a=e}return function(e={},t){if(a)throw a;let o=!1;const i={};for(let a=0;a<r.length;a++){const l=r[a],s=n[l],d=e[l],u=s(d,t);if(void 0===u)throw t&&t.type,new Error(k(14));i[l]=u,o=o||u!==d}return o=o||r.length!==Object.keys(e).length,o?i:e}}(n)}s="function"==typeof r?r(t):t();let d=R;a&&(d=Ce({trace:!1,..."object"==typeof a&&a}));const u=function(...e){return t=>(n,r)=>{const a=t(n,r);let o=()=>{throw new Error(k(15))};const i={getState:a.getState,dispatch:(e,...t)=>o(e,...t)},l=e.map((e=>e(i)));return o=R(...l)(a.dispatch),{...a,dispatch:o}}}(...s),c=(e=>function(t){const{autoBatch:n=!0}=t??{};let r=new xe(e);return n&&r.push(((e={type:"raf"})=>t=>(...n)=>{const r=t(...n);let a=!0,o=!1,i=!1;const l=new Set,s="tick"===e.type?queueMicrotask:"raf"===e.type?"undefined"!=typeof window&&window.requestAnimationFrame?window.requestAnimationFrame:Pe(10):"callback"===e.type?e.queueNotification:Pe(e.timeout),d=()=>{i=!1,o&&(o=!1,l.forEach((e=>e())))};return Object.assign({},r,{subscribe(e){const t=r.subscribe((()=>a&&e()));return l.add(e),()=>{t(),l.delete(e)}},dispatch(e){try{return a=!e?.meta?.RTK_autoBatch,o=!a,o&&(i||(i=!0,s(d))),r.dispatch(e)}finally{a=!0}}})})("object"==typeof n?n:void 0)),r})(u);return z(l,o,d(..."function"==typeof i?i(c):c()))}({reducer:{table:je.reducer}}),sa=n(909),da={};da.styleTagTransform=lt(),da.setAttributes=rt(),da.insert=tt().bind(null,"head"),da.domAPI=Ze(),da.insertStyleElement=ot(),Qe()(sa.A,da),sa.A&&sa.A.locals&&sa.A.locals;var ua=function(){return r.createElement("div",null,r.createElement(aa,null))};(0,a.createRoot)(document.getElementById("root")).render(r.createElement(r.StrictMode,null,r.createElement(m,{store:la},r.createElement(ua,null))))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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UThqQyxrQkFBb0IsS0FDNUIsR0FBUUgsY0FBZ0IsS0FDeEIsR0FBUUosT0FBUyxVQUFjLEtBQU0sUUFDckMsR0FBUVIsT0FBUyxLQUNqQixHQUFRYyxtQkFBcUIsS0FFaEIsS0FBSSxLQUFTLElBS0osTUFBVyxLQUFROFcsUUFBUyxLQUFRQSxPQ3JCbkQsSUFBTWs3QixHQUFNLFdBQ2pCLE9BQ0VudUcsRUFBQUEsY0FBQSxXQUNFQSxFQUFBQSxjQUFDK3FHLEdBQWMsTUFHckIsR0NGYTE1QyxFQUFBQSxFQUFBQSxZQUFXemhELFNBQVN5c0UsZUFBZSxTQUMzQ2o2RSxPQUNIcEMsRUFBQUEsY0FBQ3ExRCxFQUFBQSxXQUFVLEtBQ1RyMUQsRUFBQUEsY0FBQ2d6QixFQUFRLENBQUN1c0MsTUFBT0EsSUFDZnYvRCxFQUFBQSxjQUFDbXVHLEdBQUciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90ZXN0LXRhYmxlLy4vc3JjL2FwcC91aS9nbG9iYWwuc2NzcyIsIndlYnBhY2s6Ly90ZXN0LXRhYmxlLy4vc3JjL2ZlYXR1cmVzL0NvbXBhbmllc1RhYmxlL3VpL0NvbXBhbmllc1RhYmxlLm1vZHVsZS5zY3NzIiwid2VicGFjazovL3Rlc3QtdGFibGUvLi9zcmMvZmVhdHVyZXMvQ29tcGFuaWVzVGFibGUvdWkvQ29tcGFueVJvdy5tb2R1bGUuc2NzcyIsIndlYnBhY2s6Ly90ZXN0LXRhYmxlLy4vc3JjL3NoYXJlL3VpL0FwcEJ1dHRvbi9BcHBCdXR0b24ubW9kdWxlLnNjc3MiLCJ3ZWJwYWNrOi8vdGVzdC10YWJsZS8uL3NyYy9zaGFyZS91aS9BcHBUZXh0SW5wdXQvQXBwVGV4dElucHV0Lm1vZHVsZS5zY3NzIiwid2VicGFjazovL3Rlc3QtdGFibGUvLi9zcmMvd2lkZ2V0cy9Nb2RpZmlhYmxlRmllbGQvdWkvTW9kaWZpYWJsZUZpZWxkLm1vZHVsZS5zY3NzIiwid2VicGFjazovL3Rlc3QtdGFibGUvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwid2VicGFjazovL3Rlc3QtdGFibGUvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qcyIsIndlYnBhY2s6Ly90ZXN0LXRhYmxlLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9janMvcmVhY3QtZG9tLWNsaWVudC5wcm9kdWN0aW9uLmpzIiwid2VicGFjazovL3Rlc3QtdGFibGUvLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5qcyIsIndlYnBhY2s6Ly90ZXN0LXRhYmxlLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9jbGllbnQuanMiLCJ3ZWJwYWNrOi8vdGVzdC10YWJsZS8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vaW5kZXguanMiLCJ3ZWJwYWNrOi8vdGVzdC10YWJsZS8uL25vZGVfbW9kdWxlcy9yZWFjdC9janMvcmVhY3QucHJvZHVjdGlvbi5qcyIsIndlYnBhY2s6Ly90ZXN0LXRhYmxlLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzIiwid2VicGFjazovL3Rlc3QtdGFibGUvLi9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5qcyIsIndlYnBhY2s6Ly90ZXN0LXRhYmxlLy4vbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9pbmRleC5qcyIsIndlYnBhY2s6Ly90ZXN0LXRhYmxlLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzIiwid2VicGFjazovL3Rlc3QtdGFibGUvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzIiwid2VicGFjazovL3Rlc3QtdGFibGUvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vdGVzdC10YWJsZS8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qcyIsIndlYnBhY2s6Ly90ZXN0LXRhYmxlLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanMiLCJ3ZWJwYWNrOi8vdGVzdC10YWJsZS8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzIiwid2VicGFjazovL3Rlc3QtdGFibGUvLi9ub2RlX21vZHVsZXMvdXNlLXN5bmMtZXh0ZXJuYWwtc3RvcmUvY2pzL3VzZS1zeW5jLWV4dGVybmFsLXN0b3JlLXdpdGgtc2VsZWN0b3IucHJvZHVjdGlvbi5qcyIsIndlYnBhY2s6Ly90ZXN0LXRhYmxlLy4vbm9kZV9tb2R1bGVzL3VzZS1zeW5jLWV4dGVybmFsLXN0b3JlL3dpdGgtc2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vdGVzdC10YWJsZS93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly90ZXN0LXRhYmxlL3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL3Rlc3QtdGFibGUvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL3Rlc3QtdGFibGUvd2VicGFjay9ydW50aW1lL2dsb2JhbCIsIndlYnBhY2s6Ly90ZXN0LXRhYmxlL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vdGVzdC10YWJsZS93ZWJwYWNrL3J1bnRpbWUvbm9uY2UiLCJ3ZWJwYWNrOi8vdGVzdC10YWJsZS8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9kaXN0L3JlYWN0LXJlZHV4Lm1qcyIsIndlYnBhY2s6Ly90ZXN0LXRhYmxlLy4vbm9kZV9tb2R1bGVzL3JlZHV4L2Rpc3QvcmVkdXgubWpzIiwid2VicGFjazovL3Rlc3QtdGFibGUvLi9ub2RlX21vZHVsZXMvcmVkdXgtdGh1bmsvZGlzdC9yZWR1eC10aHVuay5tanMiLCJ3ZWJwYWNrOi8vdGVzdC10YWJsZS8uL25vZGVfbW9kdWxlcy9pbW1lci9kaXN0L2ltbWVyLm1qcyIsIndlYnBhY2s6Ly90ZXN0LXRhYmxlLy4vbm9kZV9tb2R1bGVzL0ByZWR1eGpzL3Rvb2xraXQvZGlzdC9yZWR1eC10b29sa2l0Lm1vZGVybi5tanMiLCJ3ZWJwYWNrOi8vdGVzdC10YWJsZS8uL3NyYy9mZWF0dXJlcy9Db21wYW5pZXNUYWJsZS9tb2RlbC9zbGljZS50cyIsIndlYnBhY2s6Ly90ZXN0LXRhYmxlLy4vc3JjL2ZlYXR1cmVzL0NvbXBhbmllc1RhYmxlL3VpL0NvbXBhbmllc1RhYmxlLm1vZHVsZS5zY3NzPzA1YTEiLCJ3ZWJwYWNrOi8vdGVzdC10YWJsZS8uL3NyYy9zdG9yZS9ob29rcy50cyIsIndlYnBhY2s6Ly90ZXN0LXRhYmxlLy4vc3JjL2ZlYXR1cmVzL0NvbXBhbmllc1RhYmxlL21vZGVsL3NlbGVjdG9ycy50cyIsIndlYnBhY2s6Ly90ZXN0LXRhYmxlLy4vc3JjL3NoYXJlL3VpL0FwcEJ1dHRvbi9BcHBCdXR0b24ubW9kdWxlLnNjc3M/MWQwZiIsIndlYnBhY2s6Ly90ZXN0LXRhYmxlLy4vc3JjL3NoYXJlL3VpL0FwcEJ1dHRvbi9pbmRleC50c3giLCJ3ZWJwYWNrOi8vdGVzdC10YWJsZS8uL3NyYy9zaGFyZS91aS9BcHBUZXh0SW5wdXQvQXBwVGV4dElucHV0Lm1vZHVsZS5zY3NzPzkxZWYiLCJ3ZWJwYWNrOi8vdGVzdC10YWJsZS8uL3NyYy9zaGFyZS91aS9BcHBUZXh0SW5wdXQvaW5kZXgudHN4Iiwid2VicGFjazovL3Rlc3QtdGFibGUvLi9zcmMvd2lkZ2V0cy9Nb2RpZmlhYmxlRmllbGQvdWkvTW9kaWZpYWJsZUZpZWxkLm1vZHVsZS5zY3NzPzUwOWMiLCJ3ZWJwYWNrOi8vdGVzdC10YWJsZS8uL3NyYy93aWRnZXRzL01vZGlmaWFibGVGaWVsZC91aS9Nb2RpZmlhYmxlRmllbGQudHN4Iiwid2VicGFjazovL3Rlc3QtdGFibGUvLi9zcmMvZmVhdHVyZXMvQ29tcGFuaWVzVGFibGUvdWkvQ29tcGFueVJvdy5tb2R1bGUuc2Nzcz81ZWM1Iiwid2VicGFjazovL3Rlc3QtdGFibGUvLi9zcmMvZmVhdHVyZXMvQ29tcGFuaWVzVGFibGUvdWkvQ29tcGFueVJvdy50c3giLCJ3ZWJwYWNrOi8vdGVzdC10YWJsZS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jbGFzc0NhbGxDaGVjay5qcyIsIndlYnBhY2s6Ly90ZXN0LXRhYmxlLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3R5cGVvZi5qcyIsIndlYnBhY2s6Ly90ZXN0LXRhYmxlLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3RvUHJvcGVydHlLZXkuanMiLCJ3ZWJwYWNrOi8vdGVzdC10YWJsZS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90b1ByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly90ZXN0LXRhYmxlLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUNsYXNzLmpzIiwid2VicGFjazovL3Rlc3QtdGFibGUvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vcG9zc2libGVDb25zdHJ1Y3RvclJldHVybi5qcyIsIndlYnBhY2s6Ly90ZXN0LXRhYmxlLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2Fzc2VydFRoaXNJbml0aWFsaXplZC5qcyIsIndlYnBhY2s6Ly90ZXN0LXRhYmxlLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2dldFByb3RvdHlwZU9mLmpzIiwid2VicGFjazovL3Rlc3QtdGFibGUvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vc2V0UHJvdG90eXBlT2YuanMiLCJ3ZWJwYWNrOi8vdGVzdC10YWJsZS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0cy5qcyIsIndlYnBhY2s6Ly90ZXN0LXRhYmxlLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2RlZmluZVByb3BlcnR5LmpzIiwid2VicGFjazovL3Rlc3QtdGFibGUvLi9ub2RlX21vZHVsZXMvcmVhY3QtbGlmZWN5Y2xlcy1jb21wYXQvcmVhY3QtbGlmZWN5Y2xlcy1jb21wYXQuZXMuanMiLCJ3ZWJwYWNrOi8vdGVzdC10YWJsZS8uL25vZGVfbW9kdWxlcy9yZWFjdC12aXJ0dWFsaXplZC9kaXN0L2VzL0Fycm93S2V5U3RlcHBlci9BcnJvd0tleVN0ZXBwZXIuanMiLCJ3ZWJwYWNrOi8vdGVzdC10YWJsZS8uL25vZGVfbW9kdWxlcy9yZWFjdC12aXJ0dWFsaXplZC9kaXN0L2VzL3ZlbmRvci9kZXRlY3RFbGVtZW50UmVzaXplLmpzIiwid2VicGFjazovL3Rlc3QtdGFibGUvLi9ub2RlX21vZHVsZXMvcmVhY3QtdmlydHVhbGl6ZWQvZGlzdC9lcy9BdXRvU2l6ZXIvQXV0b1NpemVyLmpzIiwid2VicGFjazovL3Rlc3QtdGFibGUvLi9ub2RlX21vZHVsZXMvcmVhY3QtdmlydHVhbGl6ZWQvZGlzdC9lcy9DZWxsTWVhc3VyZXIvQ2VsbE1lYXN1cmVyLmpzIiwid2VicGFjazovL3Rlc3QtdGFibGUvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcy5qcyIsIndlYnBhY2s6Ly90ZXN0LXRhYmxlLy4vbm9kZV9tb2R1bGVzL2Nsc3gvZGlzdC9jbHN4Lm0uanMiLCJ3ZWJwYWNrOi8vdGVzdC10YWJsZS8uL25vZGVfbW9kdWxlcy9yZWFjdC12aXJ0dWFsaXplZC9kaXN0L2VzL3V0aWxzL2NyZWF0ZUNhbGxiYWNrTWVtb2l6ZXIuanMiLCJ3ZWJwYWNrOi8vdGVzdC10YWJsZS8uL25vZGVfbW9kdWxlcy9kb20taGVscGVycy9lc20vY2FuVXNlRE9NLmpzIiwid2VicGFjazovL3Rlc3QtdGFibGUvLi9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvZXNtL3Njcm9sbGJhclNpemUuanMiLCJ3ZWJwYWNrOi8vdGVzdC10YWJsZS8uL25vZGVfbW9kdWxlcy9yZWFjdC12aXJ0dWFsaXplZC9kaXN0L2VzL0NvbGxlY3Rpb24vQ29sbGVjdGlvblZpZXcuanMiLCJ3ZWJwYWNrOi8vdGVzdC10YWJsZS8uL25vZGVfbW9kdWxlcy9yZWFjdC12aXJ0dWFsaXplZC9kaXN0L2VzL0NvbGxlY3Rpb24vU2VjdGlvbi5qcyIsIndlYnBhY2s6Ly90ZXN0LXRhYmxlLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXZpcnR1YWxpemVkL2Rpc3QvZXMvQ29sbGVjdGlvbi9TZWN0aW9uTWFuYWdlci5qcyIsIndlYnBhY2s6Ly90ZXN0LXRhYmxlLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXZpcnR1YWxpemVkL2Rpc3QvZXMvdXRpbHMvZ2V0VXBkYXRlZE9mZnNldEZvckluZGV4LmpzIiwid2VicGFjazovL3Rlc3QtdGFibGUvLi9ub2RlX21vZHVsZXMvcmVhY3QtdmlydHVhbGl6ZWQvZGlzdC9lcy9Db2xsZWN0aW9uL0NvbGxlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vdGVzdC10YWJsZS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3REZXN0cnVjdHVyaW5nRW1wdHkuanMiLCJ3ZWJwYWNrOi8vdGVzdC10YWJsZS8uL25vZGVfbW9kdWxlcy9yZWFjdC12aXJ0dWFsaXplZC9kaXN0L2VzL0NvbGxlY3Rpb24vdXRpbHMvY2FsY3VsYXRlU2l6ZUFuZFBvc2l0aW9uRGF0YS5qcyIsIndlYnBhY2s6Ly90ZXN0LXRhYmxlLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXZpcnR1YWxpemVkL2Rpc3QvZXMvQ29sdW1uU2l6ZXIvQ29sdW1uU2l6ZXIuanMiLCJ3ZWJwYWNrOi8vdGVzdC10YWJsZS8uL25vZGVfbW9kdWxlcy9yZWFjdC12aXJ0dWFsaXplZC9kaXN0L2VzL0dyaWQvdXRpbHMvY2FsY3VsYXRlU2l6ZUFuZFBvc2l0aW9uRGF0YUFuZFVwZGF0ZVNjcm9sbE9mZnNldC5qcyIsIndlYnBhY2s6Ly90ZXN0LXRhYmxlLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzLmpzIiwid2VicGFjazovL3Rlc3QtdGFibGUvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZS5qcyIsIndlYnBhY2s6Ly90ZXN0LXRhYmxlLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXZpcnR1YWxpemVkL2Rpc3QvZXMvR3JpZC91dGlscy9DZWxsU2l6ZUFuZFBvc2l0aW9uTWFuYWdlci5qcyIsIndlYnBhY2s6Ly90ZXN0LXRhYmxlLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXZpcnR1YWxpemVkL2Rpc3QvZXMvdXRpbHMvYW5pbWF0aW9uRnJhbWUuanMiLCJ3ZWJwYWNrOi8vdGVzdC10YWJsZS8uL25vZGVfbW9kdWxlcy9yZWFjdC12aXJ0dWFsaXplZC9kaXN0L2VzL0dyaWQvdXRpbHMvU2NhbGluZ0NlbGxTaXplQW5kUG9zaXRpb25NYW5hZ2VyLmpzIiwid2VicGFjazovL3Rlc3QtdGFibGUvLi9ub2RlX21vZHVsZXMvcmVhY3QtdmlydHVhbGl6ZWQvZGlzdC9lcy9HcmlkL3V0aWxzL21heEVsZW1lbnRTaXplLmpzIiwid2VicGFjazovL3Rlc3QtdGFibGUvLi9ub2RlX21vZHVsZXMvcmVhY3QtdmlydHVhbGl6ZWQvZGlzdC9lcy9HcmlkL3V0aWxzL3VwZGF0ZVNjcm9sbEluZGV4SGVscGVyLmpzIiwid2VicGFjazovL3Rlc3QtdGFibGUvLi9ub2RlX21vZHVsZXMvcmVhY3QtdmlydHVhbGl6ZWQvZGlzdC9lcy91dGlscy9yZXF1ZXN0QW5pbWF0aW9uVGltZW91dC5qcyIsIndlYnBhY2s6Ly90ZXN0LXRhYmxlLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXZpcnR1YWxpemVkL2Rpc3QvZXMvR3JpZC9HcmlkLmpzIiwid2VicGFjazovL3Rlc3QtdGFibGUvLi9ub2RlX21vZHVsZXMvcmVhY3QtdmlydHVhbGl6ZWQvZGlzdC9lcy9HcmlkL2RlZmF1bHRPdmVyc2NhbkluZGljZXNHZXR0ZXIuanMiLCJ3ZWJwYWNrOi8vdGVzdC10YWJsZS8uL25vZGVfbW9kdWxlcy9yZWFjdC12aXJ0dWFsaXplZC9kaXN0L2VzL0dyaWQvZGVmYXVsdENlbGxSYW5nZVJlbmRlcmVyLmpzIiwid2VicGFjazovL3Rlc3QtdGFibGUvLi9ub2RlX21vZHVsZXMvcmVhY3QtdmlydHVhbGl6ZWQvZGlzdC9lcy9HcmlkL2FjY2Vzc2liaWxpdHlPdmVyc2NhbkluZGljZXNHZXR0ZXIuanMiLCJ3ZWJwYWNrOi8vdGVzdC10YWJsZS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hcnJheUxpa2VUb0FycmF5LmpzIiwid2VicGFjazovL3Rlc3QtdGFibGUvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vdGVzdC10YWJsZS8uL25vZGVfbW9kdWxlcy9yZWFjdC12aXJ0dWFsaXplZC9kaXN0L2VzL0luZmluaXRlTG9hZGVyL0luZmluaXRlTG9hZGVyLmpzIiwid2VicGFjazovL3Rlc3QtdGFibGUvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdG9Db25zdW1hYmxlQXJyYXkuanMiLCJ3ZWJwYWNrOi8vdGVzdC10YWJsZS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hcnJheVdpdGhvdXRIb2xlcy5qcyIsIndlYnBhY2s6Ly90ZXN0LXRhYmxlLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2l0ZXJhYmxlVG9BcnJheS5qcyIsIndlYnBhY2s6Ly90ZXN0LXRhYmxlLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL25vbkl0ZXJhYmxlU3ByZWFkLmpzIiwid2VicGFjazovL3Rlc3QtdGFibGUvLi9ub2RlX21vZHVsZXMvcmVhY3QtdmlydHVhbGl6ZWQvZGlzdC9lcy9MaXN0L0xpc3QuanMiLCJ3ZWJwYWNrOi8vdGVzdC10YWJsZS8uL25vZGVfbW9kdWxlcy9yZWFjdC12aXJ0dWFsaXplZC9kaXN0L2VzL3ZlbmRvci9iaW5hcnlTZWFyY2hCb3VuZHMuanMiLCJ3ZWJwYWNrOi8vdGVzdC10YWJsZS8uL25vZGVfbW9kdWxlcy9yZWFjdC12aXJ0dWFsaXplZC9kaXN0L2VzL3ZlbmRvci9pbnRlcnZhbFRyZWUuanMiLCJ3ZWJwYWNrOi8vdGVzdC10YWJsZS8uL25vZGVfbW9kdWxlcy9yZWFjdC12aXJ0dWFsaXplZC9kaXN0L2VzL01hc29ucnkvUG9zaXRpb25DYWNoZS5qcyIsIndlYnBhY2s6Ly90ZXN0LXRhYmxlLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3NsaWNlZFRvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vdGVzdC10YWJsZS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hcnJheVdpdGhIb2xlcy5qcyIsIndlYnBhY2s6Ly90ZXN0LXRhYmxlLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2l0ZXJhYmxlVG9BcnJheUxpbWl0LmpzIiwid2VicGFjazovL3Rlc3QtdGFibGUvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vbm9uSXRlcmFibGVSZXN0LmpzIiwid2VicGFjazovL3Rlc3QtdGFibGUvLi9ub2RlX21vZHVsZXMvcmVhY3QtdmlydHVhbGl6ZWQvZGlzdC9lcy9NYXNvbnJ5L01hc29ucnkuanMiLCJ3ZWJwYWNrOi8vdGVzdC10YWJsZS8uL25vZGVfbW9kdWxlcy9yZWFjdC12aXJ0dWFsaXplZC9kaXN0L2VzL011bHRpR3JpZC9DZWxsTWVhc3VyZXJDYWNoZURlY29yYXRvci5qcyIsIndlYnBhY2s6Ly90ZXN0LXRhYmxlLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXZpcnR1YWxpemVkL2Rpc3QvZXMvTXVsdGlHcmlkL011bHRpR3JpZC5qcyIsIndlYnBhY2s6Ly90ZXN0LXRhYmxlLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXZpcnR1YWxpemVkL2Rpc3QvZXMvU2Nyb2xsU3luYy9TY3JvbGxTeW5jLmpzIiwid2VicGFjazovL3Rlc3QtdGFibGUvLi9ub2RlX21vZHVsZXMvcmVhY3QtdmlydHVhbGl6ZWQvZGlzdC9lcy9UYWJsZS9Tb3J0RGlyZWN0aW9uLmpzIiwid2VicGFjazovL3Rlc3QtdGFibGUvLi9ub2RlX21vZHVsZXMvcmVhY3QtdmlydHVhbGl6ZWQvZGlzdC9lcy9UYWJsZS9Tb3J0SW5kaWNhdG9yLmpzIiwid2VicGFjazovL3Rlc3QtdGFibGUvLi9ub2RlX21vZHVsZXMvcmVhY3QtdmlydHVhbGl6ZWQvZGlzdC9lcy9UYWJsZS9Db2x1bW4uanMiLCJ3ZWJwYWNrOi8vdGVzdC10YWJsZS8uL25vZGVfbW9kdWxlcy9yZWFjdC12aXJ0dWFsaXplZC9kaXN0L2VzL1RhYmxlL1RhYmxlLmpzIiwid2VicGFjazovL3Rlc3QtdGFibGUvLi9ub2RlX21vZHVsZXMvcmVhY3QtdmlydHVhbGl6ZWQvZGlzdC9lcy9UYWJsZS9kZWZhdWx0Q2VsbERhdGFHZXR0ZXIuanMiLCJ3ZWJwYWNrOi8vdGVzdC10YWJsZS8uL25vZGVfbW9kdWxlcy9yZWFjdC12aXJ0dWFsaXplZC9kaXN0L2VzL1RhYmxlL2RlZmF1bHRDZWxsUmVuZGVyZXIuanMiLCJ3ZWJwYWNrOi8vdGVzdC10YWJsZS8uL25vZGVfbW9kdWxlcy9yZWFjdC12aXJ0dWFsaXplZC9kaXN0L2VzL1RhYmxlL2RlZmF1bHRIZWFkZXJSZW5kZXJlci5qcyIsIndlYnBhY2s6Ly90ZXN0LXRhYmxlLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXZpcnR1YWxpemVkL2Rpc3QvZXMvVGFibGUvZGVmYXVsdFJvd1JlbmRlcmVyLmpzIiwid2VicGFjazovL3Rlc3QtdGFibGUvLi9ub2RlX21vZHVsZXMvcmVhY3QtdmlydHVhbGl6ZWQvZGlzdC9lcy9UYWJsZS9kZWZhdWx0SGVhZGVyUm93UmVuZGVyZXIuanMiLCJ3ZWJwYWNrOi8vdGVzdC10YWJsZS8uL25vZGVfbW9kdWxlcy9yZWFjdC12aXJ0dWFsaXplZC9kaXN0L2VzL1dpbmRvd1Njcm9sbGVyL3V0aWxzL29uU2Nyb2xsLmpzIiwid2VicGFjazovL3Rlc3QtdGFibGUvLi9ub2RlX21vZHVsZXMvcmVhY3QtdmlydHVhbGl6ZWQvZGlzdC9lcy9XaW5kb3dTY3JvbGxlci91dGlscy9kaW1lbnNpb25zLmpzIiwid2VicGFjazovL3Rlc3QtdGFibGUvLi9ub2RlX21vZHVsZXMvcmVhY3QtdmlydHVhbGl6ZWQvZGlzdC9lcy9XaW5kb3dTY3JvbGxlci9XaW5kb3dTY3JvbGxlci5qcyIsIndlYnBhY2s6Ly90ZXN0LXRhYmxlLy4vc3JjL2ZlYXR1cmVzL0NvbXBhbmllc1RhYmxlL3VpL1ZpcnR1YWxpemVkVGFibGUudHN4Iiwid2VicGFjazovL3Rlc3QtdGFibGUvLi9zcmMvZmVhdHVyZXMvQ29tcGFuaWVzVGFibGUvdWkvQ29tcGFuaWVzVGFibGUudHN4Iiwid2VicGFjazovL3Rlc3QtdGFibGUvLi9zcmMvc3RvcmUvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vdGVzdC10YWJsZS8uL3NyYy9hcHAvdWkvZ2xvYmFsLnNjc3M/NDIzYyIsIndlYnBhY2s6Ly90ZXN0LXRhYmxlLy4vc3JjL2FwcC91aS9BcHAudHN4Iiwid2VicGFjazovL3Rlc3QtdGFibGUvLi9zcmMvaW5kZXgudHN4Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGA6cm9vdHstLXByaW1hcnktY29sb3I6ICMzNDk4ZGI7LS1zZWNvbmRhcnktY29sb3I6ICMyZWNjNzE7LS1yZWplY3QtY29sb3I6ICNmZjRjM2M7LS1iYWNrZ3JvdW5kLWNvbG9yOiAjZmFmYWZhOy0tdGV4dC1jb2xvci1zZWNvbmRhcnk6ICNmZmY7LS10ZXh0LWNvbG9yLXByaW1hcnk6ICMzMzM7LS1ib3JkZXItY29sb3I6ICNkZGR9KnttYXJnaW46MDtwYWRkaW5nOjA7Ym94LXNpemluZzpib3JkZXItYm94O2ZvbnQtZmFtaWx5OlwiSGVsdmV0aWNhIE5ldWVcIixzYW5zLXNlcmlmfWAsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2FwcC91aS9nbG9iYWwuc2Nzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQSxNQUNFLHdCQUFBLENBQ0EsMEJBQUEsQ0FDQSx1QkFBQSxDQUNBLDJCQUFBLENBQ0EsNEJBQUEsQ0FDQSwwQkFBQSxDQUNBLG9CQUFBLENBR0YsRUFDRSxRQUFBLENBQ0EsU0FBQSxDQUNBLHFCQUFBLENBQ0EsdUNBQUFcIixcInNvdXJjZXNDb250ZW50XCI6W1wiOnJvb3Qge1xcbiAgLS1wcmltYXJ5LWNvbG9yOiAjMzQ5OGRiO1xcbiAgLS1zZWNvbmRhcnktY29sb3I6ICMyZWNjNzE7XFxuICAtLXJlamVjdC1jb2xvcjogI2ZmNGMzYztcXG4gIC0tYmFja2dyb3VuZC1jb2xvcjogI2ZhZmFmYTtcXG4gIC0tdGV4dC1jb2xvci1zZWNvbmRhcnk6ICNmZmY7XFxuICAtLXRleHQtY29sb3ItcHJpbWFyeTogIzMzMztcXG4gIC0tYm9yZGVyLWNvbG9yOiAjZGRkO1xcbn1cXG5cXG4qIHtcXG4gIG1hcmdpbjogMDtcXG4gIHBhZGRpbmc6IDA7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgZm9udC1mYW1pbHk6IFxcXCJIZWx2ZXRpY2EgTmV1ZVxcXCIsIHNhbnMtc2VyaWY7XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBgLnNyYy1mZWF0dXJlcy1Db21wYW5pZXNUYWJsZS11aS1Db21wYW5pZXNUYWJsZS1tb2R1bGVfX3RhYmxlX2NvbnRhaW5lci0teHd6R1B7ZGlzcGxheTpmbGV4O2ZsZXgtZGlyZWN0aW9uOmNvbHVtbn0uc3JjLWZlYXR1cmVzLUNvbXBhbmllc1RhYmxlLXVpLUNvbXBhbmllc1RhYmxlLW1vZHVsZV9fdGFibGVfY29udGFpbmVyLS14d3pHUCAuc3JjLWZlYXR1cmVzLUNvbXBhbmllc1RhYmxlLXVpLUNvbXBhbmllc1RhYmxlLW1vZHVsZV9fY29udHJvbHNfY29udGFpbmVyLS1lMFhDWntkaXNwbGF5OmZsZXg7anVzdGlmeS1jb250ZW50OnNwYWNlLWJldHdlZW59LnNyYy1mZWF0dXJlcy1Db21wYW5pZXNUYWJsZS11aS1Db21wYW5pZXNUYWJsZS1tb2R1bGVfX3RhYmxlX2NvbnRhaW5lci0teHd6R1AgLnNyYy1mZWF0dXJlcy1Db21wYW5pZXNUYWJsZS11aS1Db21wYW5pZXNUYWJsZS1tb2R1bGVfX2NvbnRyb2xzX2NvbnRhaW5lci0tZTBYQ1ogLnNyYy1mZWF0dXJlcy1Db21wYW5pZXNUYWJsZS11aS1Db21wYW5pZXNUYWJsZS1tb2R1bGVfX2J1dHRvbnNfY29udGFpbmVyLS1Ma1k4Q3tkaXNwbGF5OmZsZXg7Z2FwOi41cmVtfS5zcmMtZmVhdHVyZXMtQ29tcGFuaWVzVGFibGUtdWktQ29tcGFuaWVzVGFibGUtbW9kdWxlX190YWJsZV9jb250YWluZXItLXh3ekdQIC5zcmMtZmVhdHVyZXMtQ29tcGFuaWVzVGFibGUtdWktQ29tcGFuaWVzVGFibGUtbW9kdWxlX19jb250cm9sc19jb250YWluZXItLWUwWENaIC5zcmMtZmVhdHVyZXMtQ29tcGFuaWVzVGFibGUtdWktQ29tcGFuaWVzVGFibGUtbW9kdWxlX19uZXdfY29tcGFueV9mb3JtLS1pZVhET3tkaXNwbGF5OmZsZXg7Z2FwOi41cmVtfS5zcmMtZmVhdHVyZXMtQ29tcGFuaWVzVGFibGUtdWktQ29tcGFuaWVzVGFibGUtbW9kdWxlX190YWJsZV9jb250YWluZXItLXh3ekdQIC5zcmMtZmVhdHVyZXMtQ29tcGFuaWVzVGFibGUtdWktQ29tcGFuaWVzVGFibGUtbW9kdWxlX190YWJsZS0tSzN2TGl7Ym9yZGVyLWNvbGxhcHNlOmNvbGxhcHNlO2JhY2tncm91bmQtY29sb3I6dmFyKC0tYmFja2dyb3VuZC1jb2xvcil9LnNyYy1mZWF0dXJlcy1Db21wYW5pZXNUYWJsZS11aS1Db21wYW5pZXNUYWJsZS1tb2R1bGVfX3RhYmxlX2NvbnRhaW5lci0teHd6R1AgLnNyYy1mZWF0dXJlcy1Db21wYW5pZXNUYWJsZS11aS1Db21wYW5pZXNUYWJsZS1tb2R1bGVfX3RhYmxlLS1LM3ZMaSAuc3JjLWZlYXR1cmVzLUNvbXBhbmllc1RhYmxlLXVpLUNvbXBhbmllc1RhYmxlLW1vZHVsZV9fdGFibGVfaGVhZGVyLS1ZYUJXX3tkaXNwbGF5OmZsZXg7YmFja2dyb3VuZC1jb2xvcjp2YXIoLS1wcmltYXJ5LWNvbG9yKTtjb2xvcjp2YXIoLS10ZXh0LWNvbG9yLXNlY29uZGFyeSk7Zm9udC13ZWlnaHQ6Ym9sZH1gLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9mZWF0dXJlcy9Db21wYW5pZXNUYWJsZS91aS9Db21wYW5pZXNUYWJsZS5tb2R1bGUuc2Nzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQSw4RUFDRSxZQUFBLENBQ0EscUJBQUEsQ0FFQSwrSkFDRSxZQUFBLENBQ0EsNkJBQUEsQ0FFQSwrT0FDRSxZQUFBLENBQ0EsU0FBQSxDQUdGLDhPQUNFLFlBQUEsQ0FDQSxTQUFBLENBSUosa0pBQ0Usd0JBQUEsQ0FDQSx3Q0FBQSxDQUVBLDZOQUNFLFlBQUEsQ0FDQSxxQ0FBQSxDQUNBLGlDQUFBLENBQ0EsZ0JBQUFcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLnRhYmxlX2NvbnRhaW5lciB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG5cXG4gIC5jb250cm9sc19jb250YWluZXIge1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxuXFxuICAgIC5idXR0b25zX2NvbnRhaW5lciB7XFxuICAgICAgZGlzcGxheTogZmxleDtcXG4gICAgICBnYXA6IDAuNXJlbTtcXG4gICAgfVxcblxcbiAgICAubmV3X2NvbXBhbnlfZm9ybSB7XFxuICAgICAgZGlzcGxheTogZmxleDtcXG4gICAgICBnYXA6IDAuNXJlbTtcXG4gICAgfVxcbiAgfVxcblxcbiAgLnRhYmxlIHtcXG4gICAgYm9yZGVyLWNvbGxhcHNlOiBjb2xsYXBzZTtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tYmFja2dyb3VuZC1jb2xvcik7XFxuXFxuICAgIC50YWJsZV9oZWFkZXIge1xcbiAgICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tcHJpbWFyeS1jb2xvcik7XFxuICAgICAgY29sb3I6IHZhcigtLXRleHQtY29sb3Itc2Vjb25kYXJ5KTtcXG4gICAgICBmb250LXdlaWdodDogYm9sZDtcXG4gICAgfVxcbiAgfVxcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCB2YXIgdGFibGVfY29udGFpbmVyID0gYHNyYy1mZWF0dXJlcy1Db21wYW5pZXNUYWJsZS11aS1Db21wYW5pZXNUYWJsZS1tb2R1bGVfX3RhYmxlX2NvbnRhaW5lci0teHd6R1BgO1xuZXhwb3J0IHZhciBjb250cm9sc19jb250YWluZXIgPSBgc3JjLWZlYXR1cmVzLUNvbXBhbmllc1RhYmxlLXVpLUNvbXBhbmllc1RhYmxlLW1vZHVsZV9fY29udHJvbHNfY29udGFpbmVyLS1lMFhDWmA7XG5leHBvcnQgdmFyIGJ1dHRvbnNfY29udGFpbmVyID0gYHNyYy1mZWF0dXJlcy1Db21wYW5pZXNUYWJsZS11aS1Db21wYW5pZXNUYWJsZS1tb2R1bGVfX2J1dHRvbnNfY29udGFpbmVyLS1Ma1k4Q2A7XG5leHBvcnQgdmFyIG5ld19jb21wYW55X2Zvcm0gPSBgc3JjLWZlYXR1cmVzLUNvbXBhbmllc1RhYmxlLXVpLUNvbXBhbmllc1RhYmxlLW1vZHVsZV9fbmV3X2NvbXBhbnlfZm9ybS0taWVYRE9gO1xuZXhwb3J0IHZhciB0YWJsZSA9IGBzcmMtZmVhdHVyZXMtQ29tcGFuaWVzVGFibGUtdWktQ29tcGFuaWVzVGFibGUtbW9kdWxlX190YWJsZS0tSzN2TGlgO1xuZXhwb3J0IHZhciB0YWJsZV9oZWFkZXIgPSBgc3JjLWZlYXR1cmVzLUNvbXBhbmllc1RhYmxlLXVpLUNvbXBhbmllc1RhYmxlLW1vZHVsZV9fdGFibGVfaGVhZGVyLS1ZYUJXX2A7XG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGAuc3JjLWZlYXR1cmVzLUNvbXBhbmllc1RhYmxlLXVpLUNvbXBhbnlSb3ctbW9kdWxlX190YWJsZV9yb3ctLVU1SjRje2Rpc3BsYXk6ZmxleDt3aWR0aDoxMDAlO2JvcmRlci1ib3R0b206MXB4IHNvbGlkIHZhcigtLWJvcmRlci1jb2xvcil9LnNyYy1mZWF0dXJlcy1Db21wYW5pZXNUYWJsZS11aS1Db21wYW55Um93LW1vZHVsZV9fdGFibGVfcm93LS1VNUo0YzpoYXMoaW5wdXRbdHlwZT1jaGVja2JveF06Y2hlY2tlZCl7YmFja2dyb3VuZC1jb2xvcjpjb2xvci1taXgoaW4gc3JnYiwgdmFyKC0tc2Vjb25kYXJ5LWNvbG9yKSwgdHJhbnNwYXJlbnQgNjAlKX0uc3JjLWZlYXR1cmVzLUNvbXBhbmllc1RhYmxlLXVpLUNvbXBhbnlSb3ctbW9kdWxlX190YWJsZV9yb3ctLVU1SjRjOmhhcyhpbnB1dFt0eXBlPWNoZWNrYm94XTpjaGVja2VkKSAuc3JjLWZlYXR1cmVzLUNvbXBhbmllc1RhYmxlLXVpLUNvbXBhbnlSb3ctbW9kdWxlX190YWJsZV9jZWxsLS1sZ2tBTXtjb2xvcjpjb2xvci1taXgoaW4gc3JnYiwgdmFyKC0tdGV4dC1jb2xvciksIGJsYWNrIDEwJSl9LnNyYy1mZWF0dXJlcy1Db21wYW5pZXNUYWJsZS11aS1Db21wYW55Um93LW1vZHVsZV9fdGFibGVfcm93LS1VNUo0Yz4qOmZpcnN0LWNoaWxke2ZsZXg6MCAwIGF1dG99LnNyYy1mZWF0dXJlcy1Db21wYW5pZXNUYWJsZS11aS1Db21wYW55Um93LW1vZHVsZV9fdGFibGVfcm93LS1VNUo0Yz4qOm5vdCg6Zmlyc3QtY2hpbGQpe2ZsZXg6MX0uc3JjLWZlYXR1cmVzLUNvbXBhbmllc1RhYmxlLXVpLUNvbXBhbnlSb3ctbW9kdWxlX190YWJsZV9yb3ctLVU1SjRjPip7ZmxleDoxO3BhZGRpbmc6Ljc1cmVtO3RleHQtYWxpZ246bGVmdH1pbnB1dFt0eXBlPWNoZWNrYm94XXtjdXJzb3I6cG9pbnRlcn1gLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9mZWF0dXJlcy9Db21wYW5pZXNUYWJsZS91aS9Db21wYW55Um93Lm1vZHVsZS5zY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBLG9FQVNFLFlBQUEsQ0FDQSxVQUFBLENBQ0EsMkNBQUEsQ0FWQSxzR0FDRSw0RUFBQSxDQUVBLDJLQUNFLHNEQUFBLENBUUosa0ZBQ0UsYUFBQSxDQUdGLHdGQUNFLE1BQUEsQ0FHRixzRUFDRSxNQUFBLENBQ0EsY0FBQSxDQUNBLGVBQUEsQ0FJSixxQkFDRSxjQUFBXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi50YWJsZV9yb3cge1xcbiAgJjpoYXMoaW5wdXRbdHlwZT0nY2hlY2tib3gnXTpjaGVja2VkKSB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IGNvbG9yLW1peChpbiBzcmdiLCB2YXIoLS1zZWNvbmRhcnktY29sb3IpLCB0cmFuc3BhcmVudCA2MCUpO1xcblxcbiAgICAudGFibGVfY2VsbCB7XFxuICAgICAgY29sb3I6IGNvbG9yLW1peChpbiBzcmdiLCB2YXIoLS10ZXh0LWNvbG9yKSwgYmxhY2sgMTAlKTtcXG4gICAgfVxcbiAgfVxcblxcbiAgZGlzcGxheTogZmxleDtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkIHZhcigtLWJvcmRlci1jb2xvcik7XFxuXFxuICAmPio6Zmlyc3QtY2hpbGQge1xcbiAgICBmbGV4OiAwIDAgYXV0bztcXG4gIH1cXG5cXG4gICY+Kjpub3QoOmZpcnN0LWNoaWxkKSB7XFxuICAgIGZsZXg6IDE7XFxuICB9XFxuXFxuICAmPioge1xcbiAgICBmbGV4OiAxO1xcbiAgICBwYWRkaW5nOiAwLjc1cmVtO1xcbiAgICB0ZXh0LWFsaWduOiBsZWZ0O1xcbiAgfVxcbn1cXG5cXG5pbnB1dFt0eXBlPSdjaGVja2JveCddIHtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgdmFyIHRhYmxlX3JvdyA9IGBzcmMtZmVhdHVyZXMtQ29tcGFuaWVzVGFibGUtdWktQ29tcGFueVJvdy1tb2R1bGVfX3RhYmxlX3Jvdy0tVTVKNGNgO1xuZXhwb3J0IHZhciB0YWJsZV9jZWxsID0gYHNyYy1mZWF0dXJlcy1Db21wYW5pZXNUYWJsZS11aS1Db21wYW55Um93LW1vZHVsZV9fdGFibGVfY2VsbC0tbGdrQU1gO1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBgLnNyYy1zaGFyZS11aS1BcHBCdXR0b24tQXBwQnV0dG9uLW1vZHVsZV9fYnV0dG9uLS1lV2FSbXtjb2xvcjp2YXIoLS10ZXh0LWNvbG9yLXNlY29uZGFyeSk7Ym9yZGVyOm5vbmU7Y3Vyc29yOnBvaW50ZXI7dHJhbnNpdGlvbjpiYWNrZ3JvdW5kLWNvbG9yIC4zcyBlYXNlfS5zcmMtc2hhcmUtdWktQXBwQnV0dG9uLUFwcEJ1dHRvbi1tb2R1bGVfX2J1dHRvbi0tZVdhUm06ZGlzYWJsZWR7b3BhY2l0eTouNjtjdXJzb3I6bm90LWFsbG93ZWR9LnNyYy1zaGFyZS11aS1BcHBCdXR0b24tQXBwQnV0dG9uLW1vZHVsZV9fYnV0dG9uLS1lV2FSbTpob3Zlcjpub3QoOmRpc2FibGVkKXtiYWNrZ3JvdW5kLWNvbG9yOnZhcigtLXNlY29uZGFyeS1jb2xvcil9LnNyYy1zaGFyZS11aS1BcHBCdXR0b24tQXBwQnV0dG9uLW1vZHVsZV9fYnV0dG9uLS1lV2FSbS5zcmMtc2hhcmUtdWktQXBwQnV0dG9uLUFwcEJ1dHRvbi1tb2R1bGVfX3NtYWxsLS14Z3ZNSHtwYWRkaW5nOjVweCAxMHB4O2ZvbnQtc2l6ZToxNHB4fS5zcmMtc2hhcmUtdWktQXBwQnV0dG9uLUFwcEJ1dHRvbi1tb2R1bGVfX2J1dHRvbi0tZVdhUm0uc3JjLXNoYXJlLXVpLUFwcEJ1dHRvbi1BcHBCdXR0b24tbW9kdWxlX19sYXJnZS0tS255aEh7cGFkZGluZzoxNXB4IDIwcHg7Zm9udC1zaXplOjE4cHh9LnNyYy1zaGFyZS11aS1BcHBCdXR0b24tQXBwQnV0dG9uLW1vZHVsZV9fYnV0dG9uLS1lV2FSbS5zcmMtc2hhcmUtdWktQXBwQnV0dG9uLUFwcEJ1dHRvbi1tb2R1bGVfX21lZGl1bS0tXzIxR3J7cGFkZGluZzoxMHB4IDE1cHg7Zm9udC1zaXplOjE2cHh9LnNyYy1zaGFyZS11aS1BcHBCdXR0b24tQXBwQnV0dG9uLW1vZHVsZV9fYnV0dG9uLS1lV2FSbS5zcmMtc2hhcmUtdWktQXBwQnV0dG9uLUFwcEJ1dHRvbi1tb2R1bGVfX3ByaW1hcnktLVBBcFdRe2JhY2tncm91bmQtY29sb3I6dmFyKC0tcHJpbWFyeS1jb2xvcil9LnNyYy1zaGFyZS11aS1BcHBCdXR0b24tQXBwQnV0dG9uLW1vZHVsZV9fYnV0dG9uLS1lV2FSbS5zcmMtc2hhcmUtdWktQXBwQnV0dG9uLUFwcEJ1dHRvbi1tb2R1bGVfX3NlY29uZGFyeS0tTzd3NG17YmFja2dyb3VuZC1jb2xvcjp2YXIoLS1zZWNvbmRhcnktY29sb3IpfS5zcmMtc2hhcmUtdWktQXBwQnV0dG9uLUFwcEJ1dHRvbi1tb2R1bGVfX2J1dHRvbi0tZVdhUm0uc3JjLXNoYXJlLXVpLUFwcEJ1dHRvbi1BcHBCdXR0b24tbW9kdWxlX19kYW5nZXItLV9EYTVze2JhY2tncm91bmQtY29sb3I6Y29sb3ItbWl4KGluIHNyZ2IsIHZhcigtLXJlamVjdC1jb2xvcikgODUlLCB0cmFuc3BhcmVudCl9LnNyYy1zaGFyZS11aS1BcHBCdXR0b24tQXBwQnV0dG9uLW1vZHVsZV9fYnV0dG9uLS1lV2FSbS5zcmMtc2hhcmUtdWktQXBwQnV0dG9uLUFwcEJ1dHRvbi1tb2R1bGVfX2Rhbmdlci0tX0RhNXM6aG92ZXJ7YmFja2dyb3VuZC1jb2xvcjp2YXIoLS1yZWplY3QtY29sb3IpfWAsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL3NoYXJlL3VpL0FwcEJ1dHRvbi9BcHBCdXR0b24ubW9kdWxlLnNjc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUEsd0RBQ0UsaUNBQUEsQ0FDQSxXQUFBLENBQ0EsY0FBQSxDQUNBLG9DQUFBLENBRUEsaUVBQ0UsVUFBQSxDQUNBLGtCQUFBLENBR0YsNkVBQ0UsdUNBQUEsQ0FHRiw4R0FDRSxnQkFBQSxDQUNBLGNBQUEsQ0FHRiw4R0FDRSxpQkFBQSxDQUNBLGNBQUEsQ0FHRiwrR0FDRSxpQkFBQSxDQUNBLGNBQUEsQ0FHRixnSEFDRSxxQ0FBQSxDQUdGLGtIQUNFLHVDQUFBLENBR0YsK0dBQ0UseUVBQUEsQ0FFQSxxSEFDRSxvQ0FBQVwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIuYnV0dG9uIHtcXG4gIGNvbG9yOiB2YXIoLS10ZXh0LWNvbG9yLXNlY29uZGFyeSk7XFxuICBib3JkZXI6IG5vbmU7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICB0cmFuc2l0aW9uOiBiYWNrZ3JvdW5kLWNvbG9yIDAuM3MgZWFzZTtcXG5cXG4gICY6ZGlzYWJsZWQge1xcbiAgICBvcGFjaXR5OiAwLjY7XFxuICAgIGN1cnNvcjogbm90LWFsbG93ZWQ7XFxuICB9XFxuXFxuICAmOmhvdmVyOm5vdCg6ZGlzYWJsZWQpIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tc2Vjb25kYXJ5LWNvbG9yKTtcXG4gIH1cXG5cXG4gICYuc21hbGwge1xcbiAgICBwYWRkaW5nOiA1cHggMTBweDtcXG4gICAgZm9udC1zaXplOiAxNHB4O1xcbiAgfVxcblxcbiAgJi5sYXJnZSB7XFxuICAgIHBhZGRpbmc6IDE1cHggMjBweDtcXG4gICAgZm9udC1zaXplOiAxOHB4O1xcbiAgfVxcblxcbiAgJi5tZWRpdW0ge1xcbiAgICBwYWRkaW5nOiAxMHB4IDE1cHg7XFxuICAgIGZvbnQtc2l6ZTogMTZweDtcXG4gIH1cXG5cXG4gICYucHJpbWFyeSB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXByaW1hcnktY29sb3IpO1xcbiAgfVxcblxcbiAgJi5zZWNvbmRhcnkge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1zZWNvbmRhcnktY29sb3IpO1xcbiAgfVxcblxcbiAgJi5kYW5nZXIge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBjb2xvci1taXgoaW4gc3JnYiwgdmFyKC0tcmVqZWN0LWNvbG9yKSA4NSUsIHRyYW5zcGFyZW50KTtcXG5cXG4gICAgJjpob3ZlciB7XFxuICAgICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tcmVqZWN0LWNvbG9yKTtcXG4gICAgfVxcbiAgfVxcblxcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCB2YXIgYnV0dG9uID0gYHNyYy1zaGFyZS11aS1BcHBCdXR0b24tQXBwQnV0dG9uLW1vZHVsZV9fYnV0dG9uLS1lV2FSbWA7XG5leHBvcnQgdmFyIHNtYWxsID0gYHNyYy1zaGFyZS11aS1BcHBCdXR0b24tQXBwQnV0dG9uLW1vZHVsZV9fc21hbGwtLXhndk1IYDtcbmV4cG9ydCB2YXIgbGFyZ2UgPSBgc3JjLXNoYXJlLXVpLUFwcEJ1dHRvbi1BcHBCdXR0b24tbW9kdWxlX19sYXJnZS0tS255aEhgO1xuZXhwb3J0IHZhciBtZWRpdW0gPSBgc3JjLXNoYXJlLXVpLUFwcEJ1dHRvbi1BcHBCdXR0b24tbW9kdWxlX19tZWRpdW0tLV8yMUdyYDtcbmV4cG9ydCB2YXIgcHJpbWFyeSA9IGBzcmMtc2hhcmUtdWktQXBwQnV0dG9uLUFwcEJ1dHRvbi1tb2R1bGVfX3ByaW1hcnktLVBBcFdRYDtcbmV4cG9ydCB2YXIgc2Vjb25kYXJ5ID0gYHNyYy1zaGFyZS11aS1BcHBCdXR0b24tQXBwQnV0dG9uLW1vZHVsZV9fc2Vjb25kYXJ5LS1PN3c0bWA7XG5leHBvcnQgdmFyIGRhbmdlciA9IGBzcmMtc2hhcmUtdWktQXBwQnV0dG9uLUFwcEJ1dHRvbi1tb2R1bGVfX2Rhbmdlci0tX0RhNXNgO1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBgLnNyYy1zaGFyZS11aS1BcHBUZXh0SW5wdXQtQXBwVGV4dElucHV0LW1vZHVsZV9faW5wdXQtLXdXRXl4e3dpZHRoOjEwMCU7Ym9yZGVyOjFweCBzb2xpZCB2YXIoLS1ib3JkZXItY29sb3IpO2JvcmRlci1yYWRpdXM6NHB4O2NvbG9yOnZhcigtLXRleHQtY29sb3ItcHJpbWFyeSk7YmFja2dyb3VuZC1jb2xvcjp2YXIoLS1iYWNrZ3JvdW5kLWNvbG9yKTt0cmFuc2l0aW9uOmJvcmRlci1jb2xvciAuM3MgZWFzZX0uc3JjLXNoYXJlLXVpLUFwcFRleHRJbnB1dC1BcHBUZXh0SW5wdXQtbW9kdWxlX19pbnB1dC0td1dFeXg6Zm9jdXN7Ym9yZGVyLWNvbG9yOnZhcigtLXByaW1hcnktY29sb3IpO291dGxpbmU6bm9uZX0uc3JjLXNoYXJlLXVpLUFwcFRleHRJbnB1dC1BcHBUZXh0SW5wdXQtbW9kdWxlX19pbnB1dC0td1dFeXg6OnBsYWNlaG9sZGVye2NvbG9yOnZhcigtLXRleHQtY29sb3Itc2Vjb25kYXJ5KX0uc3JjLXNoYXJlLXVpLUFwcFRleHRJbnB1dC1BcHBUZXh0SW5wdXQtbW9kdWxlX19pbnB1dC0td1dFeXguc3JjLXNoYXJlLXVpLUFwcFRleHRJbnB1dC1BcHBUZXh0SW5wdXQtbW9kdWxlX19zbWFsbC0tQmtqRHh7cGFkZGluZzo1cHg7Zm9udC1zaXplOjE0cHh9LnNyYy1zaGFyZS11aS1BcHBUZXh0SW5wdXQtQXBwVGV4dElucHV0LW1vZHVsZV9faW5wdXQtLXdXRXl4LnNyYy1zaGFyZS11aS1BcHBUZXh0SW5wdXQtQXBwVGV4dElucHV0LW1vZHVsZV9fbGFyZ2UtLXBGWHp1e3BhZGRpbmc6MTVweDtmb250LXNpemU6MThweH0uc3JjLXNoYXJlLXVpLUFwcFRleHRJbnB1dC1BcHBUZXh0SW5wdXQtbW9kdWxlX19pbnB1dC0td1dFeXguc3JjLXNoYXJlLXVpLUFwcFRleHRJbnB1dC1BcHBUZXh0SW5wdXQtbW9kdWxlX19tZWRpdW0tLWVsYUhRe3BhZGRpbmc6MTBweDtmb250LXNpemU6MTZweH1gLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9zaGFyZS91aS9BcHBUZXh0SW5wdXQvQXBwVGV4dElucHV0Lm1vZHVsZS5zY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBLDZEQUNFLFVBQUEsQ0FDQSxvQ0FBQSxDQUNBLGlCQUFBLENBQ0EsK0JBQUEsQ0FDQSx3Q0FBQSxDQUNBLGdDQUFBLENBRUEsbUVBQ0UsaUNBQUEsQ0FDQSxZQUFBLENBR0YsMEVBQ0UsaUNBQUEsQ0FHRix5SEFDRSxXQUFBLENBQ0EsY0FBQSxDQUdGLHlIQUNFLFlBQUEsQ0FDQSxjQUFBLENBR0YsMEhBQ0UsWUFBQSxDQUNBLGNBQUFcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLmlucHV0IHtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgYm9yZGVyOiAxcHggc29saWQgdmFyKC0tYm9yZGVyLWNvbG9yKTtcXG4gIGJvcmRlci1yYWRpdXM6IDRweDtcXG4gIGNvbG9yOiB2YXIoLS10ZXh0LWNvbG9yLXByaW1hcnkpO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tYmFja2dyb3VuZC1jb2xvcik7XFxuICB0cmFuc2l0aW9uOiBib3JkZXItY29sb3IgMC4zcyBlYXNlO1xcblxcbiAgJjpmb2N1cyB7XFxuICAgIGJvcmRlci1jb2xvcjogdmFyKC0tcHJpbWFyeS1jb2xvcik7XFxuICAgIG91dGxpbmU6IG5vbmU7XFxuICB9XFxuXFxuICAmOjpwbGFjZWhvbGRlciB7XFxuICAgIGNvbG9yOiB2YXIoLS10ZXh0LWNvbG9yLXNlY29uZGFyeSk7XFxuICB9XFxuXFxuICAmLnNtYWxsIHtcXG4gICAgcGFkZGluZzogNXB4O1xcbiAgICBmb250LXNpemU6IDE0cHg7XFxuICB9XFxuXFxuICAmLmxhcmdlIHtcXG4gICAgcGFkZGluZzogMTVweDtcXG4gICAgZm9udC1zaXplOiAxOHB4O1xcbiAgfVxcblxcbiAgJi5tZWRpdW0ge1xcbiAgICBwYWRkaW5nOiAxMHB4O1xcbiAgICBmb250LXNpemU6IDE2cHg7XFxuICB9XFxuXFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IHZhciBpbnB1dCA9IGBzcmMtc2hhcmUtdWktQXBwVGV4dElucHV0LUFwcFRleHRJbnB1dC1tb2R1bGVfX2lucHV0LS13V0V5eGA7XG5leHBvcnQgdmFyIHNtYWxsID0gYHNyYy1zaGFyZS11aS1BcHBUZXh0SW5wdXQtQXBwVGV4dElucHV0LW1vZHVsZV9fc21hbGwtLUJrakR4YDtcbmV4cG9ydCB2YXIgbGFyZ2UgPSBgc3JjLXNoYXJlLXVpLUFwcFRleHRJbnB1dC1BcHBUZXh0SW5wdXQtbW9kdWxlX19sYXJnZS0tcEZYenVgO1xuZXhwb3J0IHZhciBtZWRpdW0gPSBgc3JjLXNoYXJlLXVpLUFwcFRleHRJbnB1dC1BcHBUZXh0SW5wdXQtbW9kdWxlX19tZWRpdW0tLWVsYUhRYDtcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgYC5zcmMtd2lkZ2V0cy1Nb2RpZmlhYmxlRmllbGQtdWktTW9kaWZpYWJsZUZpZWxkLW1vZHVsZV9fd3JhcHBlci0tbGZhbzR7ZGlzcGxheTpmbGV4O2ZsZXgtZGlyZWN0aW9uOnJvdztnYXA6MTBweH0uc3JjLXdpZGdldHMtTW9kaWZpYWJsZUZpZWxkLXVpLU1vZGlmaWFibGVGaWVsZC1tb2R1bGVfX3dyYXBwZXItLWxmYW80IC5zcmMtd2lkZ2V0cy1Nb2RpZmlhYmxlRmllbGQtdWktTW9kaWZpYWJsZUZpZWxkLW1vZHVsZV9fY2hpbGQtLU1sN2Nke21hcmdpbjowO3BhZGRpbmc6NXB4fWAsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL3dpZGdldHMvTW9kaWZpYWJsZUZpZWxkL3VpL01vZGlmaWFibGVGaWVsZC5tb2R1bGUuc2Nzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQSx1RUFDRSxZQUFBLENBQ0Esa0JBQUEsQ0FDQSxRQUFBLENBRUEsNElBQ0UsUUFBQSxDQUNBLFdBQUFcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLndyYXBwZXIge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtZGlyZWN0aW9uOiByb3c7XFxuICBnYXA6IDEwcHg7XFxuXFxuICAuY2hpbGQge1xcbiAgICBtYXJnaW46IDA7XFxuICAgIHBhZGRpbmc6IDVweDtcXG4gIH1cXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgdmFyIHdyYXBwZXIgPSBgc3JjLXdpZGdldHMtTW9kaWZpYWJsZUZpZWxkLXVpLU1vZGlmaWFibGVGaWVsZC1tb2R1bGVfX3dyYXBwZXItLWxmYW80YDtcbmV4cG9ydCB2YXIgY2hpbGQgPSBgc3JjLXdpZGdldHMtTW9kaWZpYWJsZUZpZWxkLXVpLU1vZGlmaWFibGVGaWVsZC1tb2R1bGVfX2NoaWxkLS1NbDdjZGA7XG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzV2l0aE1hcHBpbmdUb1N0cmluZykge1xuICB2YXIgbGlzdCA9IFtdO1xuXG4gIC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBcIlwiO1xuICAgICAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBpdGVtWzVdICE9PSBcInVuZGVmaW5lZFwiO1xuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKTtcbiAgICAgIH1cbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpO1xuICAgICAgfVxuICAgICAgY29udGVudCArPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0pO1xuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKFwiXCIpO1xuICB9O1xuXG4gIC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG4gIGxpc3QuaSA9IGZ1bmN0aW9uIGkobW9kdWxlcywgbWVkaWEsIGRlZHVwZSwgc3VwcG9ydHMsIGxheWVyKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCB1bmRlZmluZWRdXTtcbiAgICB9XG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcbiAgICBpZiAoZGVkdXBlKSB7XG4gICAgICBmb3IgKHZhciBrID0gMDsgayA8IHRoaXMubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgdmFyIGlkID0gdGhpc1trXVswXTtcbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgZm9yICh2YXIgX2sgPSAwOyBfayA8IG1vZHVsZXMubGVuZ3RoOyBfaysrKSB7XG4gICAgICB2YXIgaXRlbSA9IFtdLmNvbmNhdChtb2R1bGVzW19rXSk7XG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIGxheWVyICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaXRlbVs1XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKG1lZGlhKSB7XG4gICAgICAgIGlmICghaXRlbVsyXSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChzdXBwb3J0cykge1xuICAgICAgICBpZiAoIWl0ZW1bNF0pIHtcbiAgICAgICAgICBpdGVtWzRdID0gXCJcIi5jb25jYXQoc3VwcG9ydHMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs0XSA9IHN1cHBvcnRzO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gbGlzdDtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZW0pIHtcbiAgdmFyIGNvbnRlbnQgPSBpdGVtWzFdO1xuICB2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG4gIGlmICghY3NzTWFwcGluZykge1xuICAgIHJldHVybiBjb250ZW50O1xuICB9XG4gIGlmICh0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGNzc01hcHBpbmcpKSkpO1xuICAgIHZhciBkYXRhID0gXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQoYmFzZTY0KTtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IFwiLyojIFwiLmNvbmNhdChkYXRhLCBcIiAqL1wiKTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oXCJcXG5cIik7XG4gIH1cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKFwiXFxuXCIpO1xufTsiLCIvKipcbiAqIEBsaWNlbnNlIFJlYWN0XG4gKiByZWFjdC1kb20tY2xpZW50LnByb2R1Y3Rpb24uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbi8qXG4gTW9kZXJuaXpyIDMuMC4wcHJlIChDdXN0b20gQnVpbGQpIHwgTUlUXG4qL1xuXCJ1c2Ugc3RyaWN0XCI7XG52YXIgU2NoZWR1bGVyID0gcmVxdWlyZShcInNjaGVkdWxlclwiKSxcbiAgUmVhY3QgPSByZXF1aXJlKFwicmVhY3RcIiksXG4gIFJlYWN0RE9NID0gcmVxdWlyZShcInJlYWN0LWRvbVwiKTtcbmZ1bmN0aW9uIGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoY29kZSkge1xuICB2YXIgdXJsID0gXCJodHRwczovL3JlYWN0LmRldi9lcnJvcnMvXCIgKyBjb2RlO1xuICBpZiAoMSA8IGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICB1cmwgKz0gXCI/YXJnc1tdPVwiICsgZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1sxXSk7XG4gICAgZm9yICh2YXIgaSA9IDI7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspXG4gICAgICB1cmwgKz0gXCImYXJnc1tdPVwiICsgZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tpXSk7XG4gIH1cbiAgcmV0dXJuIChcbiAgICBcIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIiArXG4gICAgY29kZSArXG4gICAgXCI7IHZpc2l0IFwiICtcbiAgICB1cmwgK1xuICAgIFwiIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy5cIlxuICApO1xufVxuZnVuY3Rpb24gaXNWYWxpZENvbnRhaW5lcihub2RlKSB7XG4gIHJldHVybiAhKFxuICAgICFub2RlIHx8XG4gICAgKDEgIT09IG5vZGUubm9kZVR5cGUgJiYgOSAhPT0gbm9kZS5ub2RlVHlwZSAmJiAxMSAhPT0gbm9kZS5ub2RlVHlwZSlcbiAgKTtcbn1cbnZhciBSRUFDVF9MRUdBQ1lfRUxFTUVOVF9UWVBFID0gU3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIiksXG4gIFJFQUNUX0VMRU1FTlRfVFlQRSA9IFN5bWJvbC5mb3IoXCJyZWFjdC50cmFuc2l0aW9uYWwuZWxlbWVudFwiKSxcbiAgUkVBQ1RfUE9SVEFMX1RZUEUgPSBTeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpLFxuICBSRUFDVF9GUkFHTUVOVF9UWVBFID0gU3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpLFxuICBSRUFDVF9TVFJJQ1RfTU9ERV9UWVBFID0gU3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpLFxuICBSRUFDVF9QUk9GSUxFUl9UWVBFID0gU3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpLFxuICBSRUFDVF9QUk9WSURFUl9UWVBFID0gU3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpLFxuICBSRUFDVF9DT05TVU1FUl9UWVBFID0gU3ltYm9sLmZvcihcInJlYWN0LmNvbnN1bWVyXCIpLFxuICBSRUFDVF9DT05URVhUX1RZUEUgPSBTeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKSxcbiAgUkVBQ1RfRk9SV0FSRF9SRUZfVFlQRSA9IFN5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKSxcbiAgUkVBQ1RfU1VTUEVOU0VfVFlQRSA9IFN5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKSxcbiAgUkVBQ1RfU1VTUEVOU0VfTElTVF9UWVBFID0gU3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlX2xpc3RcIiksXG4gIFJFQUNUX01FTU9fVFlQRSA9IFN5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpLFxuICBSRUFDVF9MQVpZX1RZUEUgPSBTeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKTtcblN5bWJvbC5mb3IoXCJyZWFjdC5zY29wZVwiKTtcblN5bWJvbC5mb3IoXCJyZWFjdC5kZWJ1Z190cmFjZV9tb2RlXCIpO1xudmFyIFJFQUNUX09GRlNDUkVFTl9UWVBFID0gU3ltYm9sLmZvcihcInJlYWN0Lm9mZnNjcmVlblwiKTtcblN5bWJvbC5mb3IoXCJyZWFjdC5sZWdhY3lfaGlkZGVuXCIpO1xuU3ltYm9sLmZvcihcInJlYWN0LnRyYWNpbmdfbWFya2VyXCIpO1xudmFyIFJFQUNUX01FTU9fQ0FDSEVfU0VOVElORUwgPSBTeW1ib2wuZm9yKFwicmVhY3QubWVtb19jYWNoZV9zZW50aW5lbFwiKSxcbiAgTUFZQkVfSVRFUkFUT1JfU1lNQk9MID0gU3ltYm9sLml0ZXJhdG9yO1xuZnVuY3Rpb24gZ2V0SXRlcmF0b3JGbihtYXliZUl0ZXJhYmxlKSB7XG4gIGlmIChudWxsID09PSBtYXliZUl0ZXJhYmxlIHx8IFwib2JqZWN0XCIgIT09IHR5cGVvZiBtYXliZUl0ZXJhYmxlKSByZXR1cm4gbnVsbDtcbiAgbWF5YmVJdGVyYWJsZSA9XG4gICAgKE1BWUJFX0lURVJBVE9SX1NZTUJPTCAmJiBtYXliZUl0ZXJhYmxlW01BWUJFX0lURVJBVE9SX1NZTUJPTF0pIHx8XG4gICAgbWF5YmVJdGVyYWJsZVtcIkBAaXRlcmF0b3JcIl07XG4gIHJldHVybiBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBtYXliZUl0ZXJhYmxlID8gbWF5YmVJdGVyYWJsZSA6IG51bGw7XG59XG52YXIgUkVBQ1RfQ0xJRU5UX1JFRkVSRU5DRSA9IFN5bWJvbC5mb3IoXCJyZWFjdC5jbGllbnQucmVmZXJlbmNlXCIpO1xuZnVuY3Rpb24gZ2V0Q29tcG9uZW50TmFtZUZyb21UeXBlKHR5cGUpIHtcbiAgaWYgKG51bGwgPT0gdHlwZSkgcmV0dXJuIG51bGw7XG4gIGlmIChcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiB0eXBlKVxuICAgIHJldHVybiB0eXBlLiQkdHlwZW9mID09PSBSRUFDVF9DTElFTlRfUkVGRVJFTkNFXG4gICAgICA/IG51bGxcbiAgICAgIDogdHlwZS5kaXNwbGF5TmFtZSB8fCB0eXBlLm5hbWUgfHwgbnVsbDtcbiAgaWYgKFwic3RyaW5nXCIgPT09IHR5cGVvZiB0eXBlKSByZXR1cm4gdHlwZTtcbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSBSRUFDVF9GUkFHTUVOVF9UWVBFOlxuICAgICAgcmV0dXJuIFwiRnJhZ21lbnRcIjtcbiAgICBjYXNlIFJFQUNUX1BPUlRBTF9UWVBFOlxuICAgICAgcmV0dXJuIFwiUG9ydGFsXCI7XG4gICAgY2FzZSBSRUFDVF9QUk9GSUxFUl9UWVBFOlxuICAgICAgcmV0dXJuIFwiUHJvZmlsZXJcIjtcbiAgICBjYXNlIFJFQUNUX1NUUklDVF9NT0RFX1RZUEU6XG4gICAgICByZXR1cm4gXCJTdHJpY3RNb2RlXCI7XG4gICAgY2FzZSBSRUFDVF9TVVNQRU5TRV9UWVBFOlxuICAgICAgcmV0dXJuIFwiU3VzcGVuc2VcIjtcbiAgICBjYXNlIFJFQUNUX1NVU1BFTlNFX0xJU1RfVFlQRTpcbiAgICAgIHJldHVybiBcIlN1c3BlbnNlTGlzdFwiO1xuICB9XG4gIGlmIChcIm9iamVjdFwiID09PSB0eXBlb2YgdHlwZSlcbiAgICBzd2l0Y2ggKHR5cGUuJCR0eXBlb2YpIHtcbiAgICAgIGNhc2UgUkVBQ1RfQ09OVEVYVF9UWVBFOlxuICAgICAgICByZXR1cm4gKHR5cGUuZGlzcGxheU5hbWUgfHwgXCJDb250ZXh0XCIpICsgXCIuUHJvdmlkZXJcIjtcbiAgICAgIGNhc2UgUkVBQ1RfQ09OU1VNRVJfVFlQRTpcbiAgICAgICAgcmV0dXJuICh0eXBlLl9jb250ZXh0LmRpc3BsYXlOYW1lIHx8IFwiQ29udGV4dFwiKSArIFwiLkNvbnN1bWVyXCI7XG4gICAgICBjYXNlIFJFQUNUX0ZPUldBUkRfUkVGX1RZUEU6XG4gICAgICAgIHZhciBpbm5lclR5cGUgPSB0eXBlLnJlbmRlcjtcbiAgICAgICAgdHlwZSA9IHR5cGUuZGlzcGxheU5hbWU7XG4gICAgICAgIHR5cGUgfHxcbiAgICAgICAgICAoKHR5cGUgPSBpbm5lclR5cGUuZGlzcGxheU5hbWUgfHwgaW5uZXJUeXBlLm5hbWUgfHwgXCJcIiksXG4gICAgICAgICAgKHR5cGUgPSBcIlwiICE9PSB0eXBlID8gXCJGb3J3YXJkUmVmKFwiICsgdHlwZSArIFwiKVwiIDogXCJGb3J3YXJkUmVmXCIpKTtcbiAgICAgICAgcmV0dXJuIHR5cGU7XG4gICAgICBjYXNlIFJFQUNUX01FTU9fVFlQRTpcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAoaW5uZXJUeXBlID0gdHlwZS5kaXNwbGF5TmFtZSB8fCBudWxsKSxcbiAgICAgICAgICBudWxsICE9PSBpbm5lclR5cGVcbiAgICAgICAgICAgID8gaW5uZXJUeXBlXG4gICAgICAgICAgICA6IGdldENvbXBvbmVudE5hbWVGcm9tVHlwZSh0eXBlLnR5cGUpIHx8IFwiTWVtb1wiXG4gICAgICAgICk7XG4gICAgICBjYXNlIFJFQUNUX0xBWllfVFlQRTpcbiAgICAgICAgaW5uZXJUeXBlID0gdHlwZS5fcGF5bG9hZDtcbiAgICAgICAgdHlwZSA9IHR5cGUuX2luaXQ7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcmV0dXJuIGdldENvbXBvbmVudE5hbWVGcm9tVHlwZSh0eXBlKGlubmVyVHlwZSkpO1xuICAgICAgICB9IGNhdGNoICh4KSB7fVxuICAgIH1cbiAgcmV0dXJuIG51bGw7XG59XG52YXIgUmVhY3RTaGFyZWRJbnRlcm5hbHMgPVxuICAgIFJlYWN0Ll9fQ0xJRU5UX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1dBUk5fVVNFUlNfVEhFWV9DQU5OT1RfVVBHUkFERSxcbiAgYXNzaWduID0gT2JqZWN0LmFzc2lnbixcbiAgcHJlZml4LFxuICBzdWZmaXg7XG5mdW5jdGlvbiBkZXNjcmliZUJ1aWx0SW5Db21wb25lbnRGcmFtZShuYW1lKSB7XG4gIGlmICh2b2lkIDAgPT09IHByZWZpeClcbiAgICB0cnkge1xuICAgICAgdGhyb3cgRXJyb3IoKTtcbiAgICB9IGNhdGNoICh4KSB7XG4gICAgICB2YXIgbWF0Y2ggPSB4LnN0YWNrLnRyaW0oKS5tYXRjaCgvXFxuKCAqKGF0ICk/KS8pO1xuICAgICAgcHJlZml4ID0gKG1hdGNoICYmIG1hdGNoWzFdKSB8fCBcIlwiO1xuICAgICAgc3VmZml4ID1cbiAgICAgICAgLTEgPCB4LnN0YWNrLmluZGV4T2YoXCJcXG4gICAgYXRcIilcbiAgICAgICAgICA/IFwiICg8YW5vbnltb3VzPilcIlxuICAgICAgICAgIDogLTEgPCB4LnN0YWNrLmluZGV4T2YoXCJAXCIpXG4gICAgICAgICAgICA/IFwiQHVua25vd246MDowXCJcbiAgICAgICAgICAgIDogXCJcIjtcbiAgICB9XG4gIHJldHVybiBcIlxcblwiICsgcHJlZml4ICsgbmFtZSArIHN1ZmZpeDtcbn1cbnZhciByZWVudHJ5ID0gITE7XG5mdW5jdGlvbiBkZXNjcmliZU5hdGl2ZUNvbXBvbmVudEZyYW1lKGZuLCBjb25zdHJ1Y3QpIHtcbiAgaWYgKCFmbiB8fCByZWVudHJ5KSByZXR1cm4gXCJcIjtcbiAgcmVlbnRyeSA9ICEwO1xuICB2YXIgcHJldmlvdXNQcmVwYXJlU3RhY2tUcmFjZSA9IEVycm9yLnByZXBhcmVTdGFja1RyYWNlO1xuICBFcnJvci5wcmVwYXJlU3RhY2tUcmFjZSA9IHZvaWQgMDtcbiAgdHJ5IHtcbiAgICB2YXIgUnVuSW5Sb290RnJhbWUgPSB7XG4gICAgICBEZXRlcm1pbmVDb21wb25lbnRGcmFtZVJvb3Q6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBpZiAoY29uc3RydWN0KSB7XG4gICAgICAgICAgICB2YXIgRmFrZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRmFrZS5wcm90b3R5cGUsIFwicHJvcHNcIiwge1xuICAgICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcigpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmIChcIm9iamVjdFwiID09PSB0eXBlb2YgUmVmbGVjdCAmJiBSZWZsZWN0LmNvbnN0cnVjdCkge1xuICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIFJlZmxlY3QuY29uc3RydWN0KEZha2UsIFtdKTtcbiAgICAgICAgICAgICAgfSBjYXRjaCAoeCkge1xuICAgICAgICAgICAgICAgIHZhciBjb250cm9sID0geDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBSZWZsZWN0LmNvbnN0cnVjdChmbiwgW10sIEZha2UpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBGYWtlLmNhbGwoKTtcbiAgICAgICAgICAgICAgfSBjYXRjaCAoeCQwKSB7XG4gICAgICAgICAgICAgICAgY29udHJvbCA9IHgkMDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBmbi5jYWxsKEZha2UucHJvdG90eXBlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKHgkMSkge1xuICAgICAgICAgICAgICBjb250cm9sID0geCQxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgKEZha2UgPSBmbigpKSAmJlxuICAgICAgICAgICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBGYWtlLmNhdGNoICYmXG4gICAgICAgICAgICAgIEZha2UuY2F0Y2goZnVuY3Rpb24gKCkge30pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoc2FtcGxlKSB7XG4gICAgICAgICAgaWYgKHNhbXBsZSAmJiBjb250cm9sICYmIFwic3RyaW5nXCIgPT09IHR5cGVvZiBzYW1wbGUuc3RhY2spXG4gICAgICAgICAgICByZXR1cm4gW3NhbXBsZS5zdGFjaywgY29udHJvbC5zdGFja107XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFtudWxsLCBudWxsXTtcbiAgICAgIH1cbiAgICB9O1xuICAgIFJ1bkluUm9vdEZyYW1lLkRldGVybWluZUNvbXBvbmVudEZyYW1lUm9vdC5kaXNwbGF5TmFtZSA9XG4gICAgICBcIkRldGVybWluZUNvbXBvbmVudEZyYW1lUm9vdFwiO1xuICAgIHZhciBuYW1lUHJvcERlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKFxuICAgICAgUnVuSW5Sb290RnJhbWUuRGV0ZXJtaW5lQ29tcG9uZW50RnJhbWVSb290LFxuICAgICAgXCJuYW1lXCJcbiAgICApO1xuICAgIG5hbWVQcm9wRGVzY3JpcHRvciAmJlxuICAgICAgbmFtZVByb3BEZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSAmJlxuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFxuICAgICAgICBSdW5JblJvb3RGcmFtZS5EZXRlcm1pbmVDb21wb25lbnRGcmFtZVJvb3QsXG4gICAgICAgIFwibmFtZVwiLFxuICAgICAgICB7IHZhbHVlOiBcIkRldGVybWluZUNvbXBvbmVudEZyYW1lUm9vdFwiIH1cbiAgICAgICk7XG4gICAgdmFyIF9SdW5JblJvb3RGcmFtZSREZXRlciA9IFJ1bkluUm9vdEZyYW1lLkRldGVybWluZUNvbXBvbmVudEZyYW1lUm9vdCgpLFxuICAgICAgc2FtcGxlU3RhY2sgPSBfUnVuSW5Sb290RnJhbWUkRGV0ZXJbMF0sXG4gICAgICBjb250cm9sU3RhY2sgPSBfUnVuSW5Sb290RnJhbWUkRGV0ZXJbMV07XG4gICAgaWYgKHNhbXBsZVN0YWNrICYmIGNvbnRyb2xTdGFjaykge1xuICAgICAgdmFyIHNhbXBsZUxpbmVzID0gc2FtcGxlU3RhY2suc3BsaXQoXCJcXG5cIiksXG4gICAgICAgIGNvbnRyb2xMaW5lcyA9IGNvbnRyb2xTdGFjay5zcGxpdChcIlxcblwiKTtcbiAgICAgIGZvciAoXG4gICAgICAgIG5hbWVQcm9wRGVzY3JpcHRvciA9IFJ1bkluUm9vdEZyYW1lID0gMDtcbiAgICAgICAgUnVuSW5Sb290RnJhbWUgPCBzYW1wbGVMaW5lcy5sZW5ndGggJiZcbiAgICAgICAgIXNhbXBsZUxpbmVzW1J1bkluUm9vdEZyYW1lXS5pbmNsdWRlcyhcIkRldGVybWluZUNvbXBvbmVudEZyYW1lUm9vdFwiKTtcblxuICAgICAgKVxuICAgICAgICBSdW5JblJvb3RGcmFtZSsrO1xuICAgICAgZm9yIChcbiAgICAgICAgO1xuICAgICAgICBuYW1lUHJvcERlc2NyaXB0b3IgPCBjb250cm9sTGluZXMubGVuZ3RoICYmXG4gICAgICAgICFjb250cm9sTGluZXNbbmFtZVByb3BEZXNjcmlwdG9yXS5pbmNsdWRlcyhcbiAgICAgICAgICBcIkRldGVybWluZUNvbXBvbmVudEZyYW1lUm9vdFwiXG4gICAgICAgICk7XG5cbiAgICAgIClcbiAgICAgICAgbmFtZVByb3BEZXNjcmlwdG9yKys7XG4gICAgICBpZiAoXG4gICAgICAgIFJ1bkluUm9vdEZyYW1lID09PSBzYW1wbGVMaW5lcy5sZW5ndGggfHxcbiAgICAgICAgbmFtZVByb3BEZXNjcmlwdG9yID09PSBjb250cm9sTGluZXMubGVuZ3RoXG4gICAgICApXG4gICAgICAgIGZvciAoXG4gICAgICAgICAgUnVuSW5Sb290RnJhbWUgPSBzYW1wbGVMaW5lcy5sZW5ndGggLSAxLFxuICAgICAgICAgICAgbmFtZVByb3BEZXNjcmlwdG9yID0gY29udHJvbExpbmVzLmxlbmd0aCAtIDE7XG4gICAgICAgICAgMSA8PSBSdW5JblJvb3RGcmFtZSAmJlxuICAgICAgICAgIDAgPD0gbmFtZVByb3BEZXNjcmlwdG9yICYmXG4gICAgICAgICAgc2FtcGxlTGluZXNbUnVuSW5Sb290RnJhbWVdICE9PSBjb250cm9sTGluZXNbbmFtZVByb3BEZXNjcmlwdG9yXTtcblxuICAgICAgICApXG4gICAgICAgICAgbmFtZVByb3BEZXNjcmlwdG9yLS07XG4gICAgICBmb3IgKFxuICAgICAgICA7XG4gICAgICAgIDEgPD0gUnVuSW5Sb290RnJhbWUgJiYgMCA8PSBuYW1lUHJvcERlc2NyaXB0b3I7XG4gICAgICAgIFJ1bkluUm9vdEZyYW1lLS0sIG5hbWVQcm9wRGVzY3JpcHRvci0tXG4gICAgICApXG4gICAgICAgIGlmIChzYW1wbGVMaW5lc1tSdW5JblJvb3RGcmFtZV0gIT09IGNvbnRyb2xMaW5lc1tuYW1lUHJvcERlc2NyaXB0b3JdKSB7XG4gICAgICAgICAgaWYgKDEgIT09IFJ1bkluUm9vdEZyYW1lIHx8IDEgIT09IG5hbWVQcm9wRGVzY3JpcHRvcikge1xuICAgICAgICAgICAgZG9cbiAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIChSdW5JblJvb3RGcmFtZS0tLFxuICAgICAgICAgICAgICAgIG5hbWVQcm9wRGVzY3JpcHRvci0tLFxuICAgICAgICAgICAgICAgIDAgPiBuYW1lUHJvcERlc2NyaXB0b3IgfHxcbiAgICAgICAgICAgICAgICAgIHNhbXBsZUxpbmVzW1J1bkluUm9vdEZyYW1lXSAhPT1cbiAgICAgICAgICAgICAgICAgICAgY29udHJvbExpbmVzW25hbWVQcm9wRGVzY3JpcHRvcl0pXG4gICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIHZhciBmcmFtZSA9XG4gICAgICAgICAgICAgICAgICBcIlxcblwiICtcbiAgICAgICAgICAgICAgICAgIHNhbXBsZUxpbmVzW1J1bkluUm9vdEZyYW1lXS5yZXBsYWNlKFwiIGF0IG5ldyBcIiwgXCIgYXQgXCIpO1xuICAgICAgICAgICAgICAgIGZuLmRpc3BsYXlOYW1lICYmXG4gICAgICAgICAgICAgICAgICBmcmFtZS5pbmNsdWRlcyhcIjxhbm9ueW1vdXM+XCIpICYmXG4gICAgICAgICAgICAgICAgICAoZnJhbWUgPSBmcmFtZS5yZXBsYWNlKFwiPGFub255bW91cz5cIiwgZm4uZGlzcGxheU5hbWUpKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZnJhbWU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHdoaWxlICgxIDw9IFJ1bkluUm9vdEZyYW1lICYmIDAgPD0gbmFtZVByb3BEZXNjcmlwdG9yKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG4gIH0gZmluYWxseSB7XG4gICAgKHJlZW50cnkgPSAhMSksIChFcnJvci5wcmVwYXJlU3RhY2tUcmFjZSA9IHByZXZpb3VzUHJlcGFyZVN0YWNrVHJhY2UpO1xuICB9XG4gIHJldHVybiAocHJldmlvdXNQcmVwYXJlU3RhY2tUcmFjZSA9IGZuID8gZm4uZGlzcGxheU5hbWUgfHwgZm4ubmFtZSA6IFwiXCIpXG4gICAgPyBkZXNjcmliZUJ1aWx0SW5Db21wb25lbnRGcmFtZShwcmV2aW91c1ByZXBhcmVTdGFja1RyYWNlKVxuICAgIDogXCJcIjtcbn1cbmZ1bmN0aW9uIGRlc2NyaWJlRmliZXIoZmliZXIpIHtcbiAgc3dpdGNoIChmaWJlci50YWcpIHtcbiAgICBjYXNlIDI2OlxuICAgIGNhc2UgMjc6XG4gICAgY2FzZSA1OlxuICAgICAgcmV0dXJuIGRlc2NyaWJlQnVpbHRJbkNvbXBvbmVudEZyYW1lKGZpYmVyLnR5cGUpO1xuICAgIGNhc2UgMTY6XG4gICAgICByZXR1cm4gZGVzY3JpYmVCdWlsdEluQ29tcG9uZW50RnJhbWUoXCJMYXp5XCIpO1xuICAgIGNhc2UgMTM6XG4gICAgICByZXR1cm4gZGVzY3JpYmVCdWlsdEluQ29tcG9uZW50RnJhbWUoXCJTdXNwZW5zZVwiKTtcbiAgICBjYXNlIDE5OlxuICAgICAgcmV0dXJuIGRlc2NyaWJlQnVpbHRJbkNvbXBvbmVudEZyYW1lKFwiU3VzcGVuc2VMaXN0XCIpO1xuICAgIGNhc2UgMDpcbiAgICBjYXNlIDE1OlxuICAgICAgcmV0dXJuIChmaWJlciA9IGRlc2NyaWJlTmF0aXZlQ29tcG9uZW50RnJhbWUoZmliZXIudHlwZSwgITEpKSwgZmliZXI7XG4gICAgY2FzZSAxMTpcbiAgICAgIHJldHVybiAoXG4gICAgICAgIChmaWJlciA9IGRlc2NyaWJlTmF0aXZlQ29tcG9uZW50RnJhbWUoZmliZXIudHlwZS5yZW5kZXIsICExKSksIGZpYmVyXG4gICAgICApO1xuICAgIGNhc2UgMTpcbiAgICAgIHJldHVybiAoZmliZXIgPSBkZXNjcmliZU5hdGl2ZUNvbXBvbmVudEZyYW1lKGZpYmVyLnR5cGUsICEwKSksIGZpYmVyO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gXCJcIjtcbiAgfVxufVxuZnVuY3Rpb24gZ2V0U3RhY2tCeUZpYmVySW5EZXZBbmRQcm9kKHdvcmtJblByb2dyZXNzKSB7XG4gIHRyeSB7XG4gICAgdmFyIGluZm8gPSBcIlwiO1xuICAgIGRvXG4gICAgICAoaW5mbyArPSBkZXNjcmliZUZpYmVyKHdvcmtJblByb2dyZXNzKSksXG4gICAgICAgICh3b3JrSW5Qcm9ncmVzcyA9IHdvcmtJblByb2dyZXNzLnJldHVybik7XG4gICAgd2hpbGUgKHdvcmtJblByb2dyZXNzKTtcbiAgICByZXR1cm4gaW5mbztcbiAgfSBjYXRjaCAoeCkge1xuICAgIHJldHVybiBcIlxcbkVycm9yIGdlbmVyYXRpbmcgc3RhY2s6IFwiICsgeC5tZXNzYWdlICsgXCJcXG5cIiArIHguc3RhY2s7XG4gIH1cbn1cbmZ1bmN0aW9uIGdldE5lYXJlc3RNb3VudGVkRmliZXIoZmliZXIpIHtcbiAgdmFyIG5vZGUgPSBmaWJlcixcbiAgICBuZWFyZXN0TW91bnRlZCA9IGZpYmVyO1xuICBpZiAoZmliZXIuYWx0ZXJuYXRlKSBmb3IgKDsgbm9kZS5yZXR1cm47ICkgbm9kZSA9IG5vZGUucmV0dXJuO1xuICBlbHNlIHtcbiAgICBmaWJlciA9IG5vZGU7XG4gICAgZG9cbiAgICAgIChub2RlID0gZmliZXIpLFxuICAgICAgICAwICE9PSAobm9kZS5mbGFncyAmIDQwOTgpICYmIChuZWFyZXN0TW91bnRlZCA9IG5vZGUucmV0dXJuKSxcbiAgICAgICAgKGZpYmVyID0gbm9kZS5yZXR1cm4pO1xuICAgIHdoaWxlIChmaWJlcik7XG4gIH1cbiAgcmV0dXJuIDMgPT09IG5vZGUudGFnID8gbmVhcmVzdE1vdW50ZWQgOiBudWxsO1xufVxuZnVuY3Rpb24gZ2V0U3VzcGVuc2VJbnN0YW5jZUZyb21GaWJlcihmaWJlcikge1xuICBpZiAoMTMgPT09IGZpYmVyLnRhZykge1xuICAgIHZhciBzdXNwZW5zZVN0YXRlID0gZmliZXIubWVtb2l6ZWRTdGF0ZTtcbiAgICBudWxsID09PSBzdXNwZW5zZVN0YXRlICYmXG4gICAgICAoKGZpYmVyID0gZmliZXIuYWx0ZXJuYXRlKSxcbiAgICAgIG51bGwgIT09IGZpYmVyICYmIChzdXNwZW5zZVN0YXRlID0gZmliZXIubWVtb2l6ZWRTdGF0ZSkpO1xuICAgIGlmIChudWxsICE9PSBzdXNwZW5zZVN0YXRlKSByZXR1cm4gc3VzcGVuc2VTdGF0ZS5kZWh5ZHJhdGVkO1xuICB9XG4gIHJldHVybiBudWxsO1xufVxuZnVuY3Rpb24gYXNzZXJ0SXNNb3VudGVkKGZpYmVyKSB7XG4gIGlmIChnZXROZWFyZXN0TW91bnRlZEZpYmVyKGZpYmVyKSAhPT0gZmliZXIpXG4gICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxODgpKTtcbn1cbmZ1bmN0aW9uIGZpbmRDdXJyZW50RmliZXJVc2luZ1Nsb3dQYXRoKGZpYmVyKSB7XG4gIHZhciBhbHRlcm5hdGUgPSBmaWJlci5hbHRlcm5hdGU7XG4gIGlmICghYWx0ZXJuYXRlKSB7XG4gICAgYWx0ZXJuYXRlID0gZ2V0TmVhcmVzdE1vdW50ZWRGaWJlcihmaWJlcik7XG4gICAgaWYgKG51bGwgPT09IGFsdGVybmF0ZSkgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxODgpKTtcbiAgICByZXR1cm4gYWx0ZXJuYXRlICE9PSBmaWJlciA/IG51bGwgOiBmaWJlcjtcbiAgfVxuICBmb3IgKHZhciBhID0gZmliZXIsIGIgPSBhbHRlcm5hdGU7IDsgKSB7XG4gICAgdmFyIHBhcmVudEEgPSBhLnJldHVybjtcbiAgICBpZiAobnVsbCA9PT0gcGFyZW50QSkgYnJlYWs7XG4gICAgdmFyIHBhcmVudEIgPSBwYXJlbnRBLmFsdGVybmF0ZTtcbiAgICBpZiAobnVsbCA9PT0gcGFyZW50Qikge1xuICAgICAgYiA9IHBhcmVudEEucmV0dXJuO1xuICAgICAgaWYgKG51bGwgIT09IGIpIHtcbiAgICAgICAgYSA9IGI7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGlmIChwYXJlbnRBLmNoaWxkID09PSBwYXJlbnRCLmNoaWxkKSB7XG4gICAgICBmb3IgKHBhcmVudEIgPSBwYXJlbnRBLmNoaWxkOyBwYXJlbnRCOyApIHtcbiAgICAgICAgaWYgKHBhcmVudEIgPT09IGEpIHJldHVybiBhc3NlcnRJc01vdW50ZWQocGFyZW50QSksIGZpYmVyO1xuICAgICAgICBpZiAocGFyZW50QiA9PT0gYikgcmV0dXJuIGFzc2VydElzTW91bnRlZChwYXJlbnRBKSwgYWx0ZXJuYXRlO1xuICAgICAgICBwYXJlbnRCID0gcGFyZW50Qi5zaWJsaW5nO1xuICAgICAgfVxuICAgICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxODgpKTtcbiAgICB9XG4gICAgaWYgKGEucmV0dXJuICE9PSBiLnJldHVybikgKGEgPSBwYXJlbnRBKSwgKGIgPSBwYXJlbnRCKTtcbiAgICBlbHNlIHtcbiAgICAgIGZvciAodmFyIGRpZEZpbmRDaGlsZCA9ICExLCBjaGlsZCQyID0gcGFyZW50QS5jaGlsZDsgY2hpbGQkMjsgKSB7XG4gICAgICAgIGlmIChjaGlsZCQyID09PSBhKSB7XG4gICAgICAgICAgZGlkRmluZENoaWxkID0gITA7XG4gICAgICAgICAgYSA9IHBhcmVudEE7XG4gICAgICAgICAgYiA9IHBhcmVudEI7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNoaWxkJDIgPT09IGIpIHtcbiAgICAgICAgICBkaWRGaW5kQ2hpbGQgPSAhMDtcbiAgICAgICAgICBiID0gcGFyZW50QTtcbiAgICAgICAgICBhID0gcGFyZW50QjtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjaGlsZCQyID0gY2hpbGQkMi5zaWJsaW5nO1xuICAgICAgfVxuICAgICAgaWYgKCFkaWRGaW5kQ2hpbGQpIHtcbiAgICAgICAgZm9yIChjaGlsZCQyID0gcGFyZW50Qi5jaGlsZDsgY2hpbGQkMjsgKSB7XG4gICAgICAgICAgaWYgKGNoaWxkJDIgPT09IGEpIHtcbiAgICAgICAgICAgIGRpZEZpbmRDaGlsZCA9ICEwO1xuICAgICAgICAgICAgYSA9IHBhcmVudEI7XG4gICAgICAgICAgICBiID0gcGFyZW50QTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoY2hpbGQkMiA9PT0gYikge1xuICAgICAgICAgICAgZGlkRmluZENoaWxkID0gITA7XG4gICAgICAgICAgICBiID0gcGFyZW50QjtcbiAgICAgICAgICAgIGEgPSBwYXJlbnRBO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNoaWxkJDIgPSBjaGlsZCQyLnNpYmxpbmc7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFkaWRGaW5kQ2hpbGQpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTg5KSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChhLmFsdGVybmF0ZSAhPT0gYikgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxOTApKTtcbiAgfVxuICBpZiAoMyAhPT0gYS50YWcpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTg4KSk7XG4gIHJldHVybiBhLnN0YXRlTm9kZS5jdXJyZW50ID09PSBhID8gZmliZXIgOiBhbHRlcm5hdGU7XG59XG5mdW5jdGlvbiBmaW5kQ3VycmVudEhvc3RGaWJlckltcGwobm9kZSkge1xuICB2YXIgdGFnID0gbm9kZS50YWc7XG4gIGlmICg1ID09PSB0YWcgfHwgMjYgPT09IHRhZyB8fCAyNyA9PT0gdGFnIHx8IDYgPT09IHRhZykgcmV0dXJuIG5vZGU7XG4gIGZvciAobm9kZSA9IG5vZGUuY2hpbGQ7IG51bGwgIT09IG5vZGU7ICkge1xuICAgIHRhZyA9IGZpbmRDdXJyZW50SG9zdEZpYmVySW1wbChub2RlKTtcbiAgICBpZiAobnVsbCAhPT0gdGFnKSByZXR1cm4gdGFnO1xuICAgIG5vZGUgPSBub2RlLnNpYmxpbmc7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG52YXIgaXNBcnJheUltcGwgPSBBcnJheS5pc0FycmF5LFxuICBSZWFjdERPTVNoYXJlZEludGVybmFscyA9XG4gICAgUmVhY3RET00uX19ET01fSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfV0FSTl9VU0VSU19USEVZX0NBTk5PVF9VUEdSQURFLFxuICBzaGFyZWROb3RQZW5kaW5nT2JqZWN0ID0ge1xuICAgIHBlbmRpbmc6ICExLFxuICAgIGRhdGE6IG51bGwsXG4gICAgbWV0aG9kOiBudWxsLFxuICAgIGFjdGlvbjogbnVsbFxuICB9LFxuICB2YWx1ZVN0YWNrID0gW10sXG4gIGluZGV4ID0gLTE7XG5mdW5jdGlvbiBjcmVhdGVDdXJzb3IoZGVmYXVsdFZhbHVlKSB7XG4gIHJldHVybiB7IGN1cnJlbnQ6IGRlZmF1bHRWYWx1ZSB9O1xufVxuZnVuY3Rpb24gcG9wKGN1cnNvcikge1xuICAwID4gaW5kZXggfHxcbiAgICAoKGN1cnNvci5jdXJyZW50ID0gdmFsdWVTdGFja1tpbmRleF0pLCAodmFsdWVTdGFja1tpbmRleF0gPSBudWxsKSwgaW5kZXgtLSk7XG59XG5mdW5jdGlvbiBwdXNoKGN1cnNvciwgdmFsdWUpIHtcbiAgaW5kZXgrKztcbiAgdmFsdWVTdGFja1tpbmRleF0gPSBjdXJzb3IuY3VycmVudDtcbiAgY3Vyc29yLmN1cnJlbnQgPSB2YWx1ZTtcbn1cbnZhciBjb250ZXh0U3RhY2tDdXJzb3IgPSBjcmVhdGVDdXJzb3IobnVsbCksXG4gIGNvbnRleHRGaWJlclN0YWNrQ3Vyc29yID0gY3JlYXRlQ3Vyc29yKG51bGwpLFxuICByb290SW5zdGFuY2VTdGFja0N1cnNvciA9IGNyZWF0ZUN1cnNvcihudWxsKSxcbiAgaG9zdFRyYW5zaXRpb25Qcm92aWRlckN1cnNvciA9IGNyZWF0ZUN1cnNvcihudWxsKTtcbmZ1bmN0aW9uIHB1c2hIb3N0Q29udGFpbmVyKGZpYmVyLCBuZXh0Um9vdEluc3RhbmNlKSB7XG4gIHB1c2gocm9vdEluc3RhbmNlU3RhY2tDdXJzb3IsIG5leHRSb290SW5zdGFuY2UpO1xuICBwdXNoKGNvbnRleHRGaWJlclN0YWNrQ3Vyc29yLCBmaWJlcik7XG4gIHB1c2goY29udGV4dFN0YWNrQ3Vyc29yLCBudWxsKTtcbiAgZmliZXIgPSBuZXh0Um9vdEluc3RhbmNlLm5vZGVUeXBlO1xuICBzd2l0Y2ggKGZpYmVyKSB7XG4gICAgY2FzZSA5OlxuICAgIGNhc2UgMTE6XG4gICAgICBuZXh0Um9vdEluc3RhbmNlID0gKG5leHRSb290SW5zdGFuY2UgPSBuZXh0Um9vdEluc3RhbmNlLmRvY3VtZW50RWxlbWVudClcbiAgICAgICAgPyAobmV4dFJvb3RJbnN0YW5jZSA9IG5leHRSb290SW5zdGFuY2UubmFtZXNwYWNlVVJJKVxuICAgICAgICAgID8gZ2V0T3duSG9zdENvbnRleHQobmV4dFJvb3RJbnN0YW5jZSlcbiAgICAgICAgICA6IDBcbiAgICAgICAgOiAwO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIGlmIChcbiAgICAgICAgKChmaWJlciA9IDggPT09IGZpYmVyID8gbmV4dFJvb3RJbnN0YW5jZS5wYXJlbnROb2RlIDogbmV4dFJvb3RJbnN0YW5jZSksXG4gICAgICAgIChuZXh0Um9vdEluc3RhbmNlID0gZmliZXIudGFnTmFtZSksXG4gICAgICAgIChmaWJlciA9IGZpYmVyLm5hbWVzcGFjZVVSSSkpXG4gICAgICApXG4gICAgICAgIChmaWJlciA9IGdldE93bkhvc3RDb250ZXh0KGZpYmVyKSksXG4gICAgICAgICAgKG5leHRSb290SW5zdGFuY2UgPSBnZXRDaGlsZEhvc3RDb250ZXh0UHJvZChmaWJlciwgbmV4dFJvb3RJbnN0YW5jZSkpO1xuICAgICAgZWxzZVxuICAgICAgICBzd2l0Y2ggKG5leHRSb290SW5zdGFuY2UpIHtcbiAgICAgICAgICBjYXNlIFwic3ZnXCI6XG4gICAgICAgICAgICBuZXh0Um9vdEluc3RhbmNlID0gMTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgXCJtYXRoXCI6XG4gICAgICAgICAgICBuZXh0Um9vdEluc3RhbmNlID0gMjtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBuZXh0Um9vdEluc3RhbmNlID0gMDtcbiAgICAgICAgfVxuICB9XG4gIHBvcChjb250ZXh0U3RhY2tDdXJzb3IpO1xuICBwdXNoKGNvbnRleHRTdGFja0N1cnNvciwgbmV4dFJvb3RJbnN0YW5jZSk7XG59XG5mdW5jdGlvbiBwb3BIb3N0Q29udGFpbmVyKCkge1xuICBwb3AoY29udGV4dFN0YWNrQ3Vyc29yKTtcbiAgcG9wKGNvbnRleHRGaWJlclN0YWNrQ3Vyc29yKTtcbiAgcG9wKHJvb3RJbnN0YW5jZVN0YWNrQ3Vyc29yKTtcbn1cbmZ1bmN0aW9uIHB1c2hIb3N0Q29udGV4dChmaWJlcikge1xuICBudWxsICE9PSBmaWJlci5tZW1vaXplZFN0YXRlICYmIHB1c2goaG9zdFRyYW5zaXRpb25Qcm92aWRlckN1cnNvciwgZmliZXIpO1xuICB2YXIgY29udGV4dCA9IGNvbnRleHRTdGFja0N1cnNvci5jdXJyZW50O1xuICB2YXIgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0ID0gZ2V0Q2hpbGRIb3N0Q29udGV4dFByb2QoY29udGV4dCwgZmliZXIudHlwZSk7XG4gIGNvbnRleHQgIT09IEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCAmJlxuICAgIChwdXNoKGNvbnRleHRGaWJlclN0YWNrQ3Vyc29yLCBmaWJlciksXG4gICAgcHVzaChjb250ZXh0U3RhY2tDdXJzb3IsIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCkpO1xufVxuZnVuY3Rpb24gcG9wSG9zdENvbnRleHQoZmliZXIpIHtcbiAgY29udGV4dEZpYmVyU3RhY2tDdXJzb3IuY3VycmVudCA9PT0gZmliZXIgJiZcbiAgICAocG9wKGNvbnRleHRTdGFja0N1cnNvciksIHBvcChjb250ZXh0RmliZXJTdGFja0N1cnNvcikpO1xuICBob3N0VHJhbnNpdGlvblByb3ZpZGVyQ3Vyc29yLmN1cnJlbnQgPT09IGZpYmVyICYmXG4gICAgKHBvcChob3N0VHJhbnNpdGlvblByb3ZpZGVyQ3Vyc29yKSxcbiAgICAoSG9zdFRyYW5zaXRpb25Db250ZXh0Ll9jdXJyZW50VmFsdWUgPSBzaGFyZWROb3RQZW5kaW5nT2JqZWN0KSk7XG59XG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LFxuICBzY2hlZHVsZUNhbGxiYWNrJDMgPSBTY2hlZHVsZXIudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayxcbiAgY2FuY2VsQ2FsbGJhY2skMSA9IFNjaGVkdWxlci51bnN0YWJsZV9jYW5jZWxDYWxsYmFjayxcbiAgc2hvdWxkWWllbGQgPSBTY2hlZHVsZXIudW5zdGFibGVfc2hvdWxkWWllbGQsXG4gIHJlcXVlc3RQYWludCA9IFNjaGVkdWxlci51bnN0YWJsZV9yZXF1ZXN0UGFpbnQsXG4gIG5vdyA9IFNjaGVkdWxlci51bnN0YWJsZV9ub3csXG4gIGdldEN1cnJlbnRQcmlvcml0eUxldmVsID0gU2NoZWR1bGVyLnVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsLFxuICBJbW1lZGlhdGVQcmlvcml0eSA9IFNjaGVkdWxlci51bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eSxcbiAgVXNlckJsb2NraW5nUHJpb3JpdHkgPSBTY2hlZHVsZXIudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHksXG4gIE5vcm1hbFByaW9yaXR5JDEgPSBTY2hlZHVsZXIudW5zdGFibGVfTm9ybWFsUHJpb3JpdHksXG4gIExvd1ByaW9yaXR5ID0gU2NoZWR1bGVyLnVuc3RhYmxlX0xvd1ByaW9yaXR5LFxuICBJZGxlUHJpb3JpdHkgPSBTY2hlZHVsZXIudW5zdGFibGVfSWRsZVByaW9yaXR5LFxuICBsb2ckMSA9IFNjaGVkdWxlci5sb2csXG4gIHVuc3RhYmxlX3NldERpc2FibGVZaWVsZFZhbHVlID0gU2NoZWR1bGVyLnVuc3RhYmxlX3NldERpc2FibGVZaWVsZFZhbHVlLFxuICByZW5kZXJlcklEID0gbnVsbCxcbiAgaW5qZWN0ZWRIb29rID0gbnVsbDtcbmZ1bmN0aW9uIG9uQ29tbWl0Um9vdChyb290KSB7XG4gIGlmIChpbmplY3RlZEhvb2sgJiYgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgaW5qZWN0ZWRIb29rLm9uQ29tbWl0RmliZXJSb290KVxuICAgIHRyeSB7XG4gICAgICBpbmplY3RlZEhvb2sub25Db21taXRGaWJlclJvb3QoXG4gICAgICAgIHJlbmRlcmVySUQsXG4gICAgICAgIHJvb3QsXG4gICAgICAgIHZvaWQgMCxcbiAgICAgICAgMTI4ID09PSAocm9vdC5jdXJyZW50LmZsYWdzICYgMTI4KVxuICAgICAgKTtcbiAgICB9IGNhdGNoIChlcnIpIHt9XG59XG5mdW5jdGlvbiBzZXRJc1N0cmljdE1vZGVGb3JEZXZ0b29scyhuZXdJc1N0cmljdE1vZGUpIHtcbiAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgbG9nJDEgJiYgdW5zdGFibGVfc2V0RGlzYWJsZVlpZWxkVmFsdWUobmV3SXNTdHJpY3RNb2RlKTtcbiAgaWYgKGluamVjdGVkSG9vayAmJiBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBpbmplY3RlZEhvb2suc2V0U3RyaWN0TW9kZSlcbiAgICB0cnkge1xuICAgICAgaW5qZWN0ZWRIb29rLnNldFN0cmljdE1vZGUocmVuZGVyZXJJRCwgbmV3SXNTdHJpY3RNb2RlKTtcbiAgICB9IGNhdGNoIChlcnIpIHt9XG59XG52YXIgY2x6MzIgPSBNYXRoLmNsejMyID8gTWF0aC5jbHozMiA6IGNsejMyRmFsbGJhY2ssXG4gIGxvZyA9IE1hdGgubG9nLFxuICBMTjIgPSBNYXRoLkxOMjtcbmZ1bmN0aW9uIGNsejMyRmFsbGJhY2soeCkge1xuICB4ID4+Pj0gMDtcbiAgcmV0dXJuIDAgPT09IHggPyAzMiA6ICgzMSAtICgobG9nKHgpIC8gTE4yKSB8IDApKSB8IDA7XG59XG52YXIgbmV4dFRyYW5zaXRpb25MYW5lID0gMTI4LFxuICBuZXh0UmV0cnlMYW5lID0gNDE5NDMwNDtcbmZ1bmN0aW9uIGdldEhpZ2hlc3RQcmlvcml0eUxhbmVzKGxhbmVzKSB7XG4gIHZhciBwZW5kaW5nU3luY0xhbmVzID0gbGFuZXMgJiA0MjtcbiAgaWYgKDAgIT09IHBlbmRpbmdTeW5jTGFuZXMpIHJldHVybiBwZW5kaW5nU3luY0xhbmVzO1xuICBzd2l0Y2ggKGxhbmVzICYgLWxhbmVzKSB7XG4gICAgY2FzZSAxOlxuICAgICAgcmV0dXJuIDE7XG4gICAgY2FzZSAyOlxuICAgICAgcmV0dXJuIDI7XG4gICAgY2FzZSA0OlxuICAgICAgcmV0dXJuIDQ7XG4gICAgY2FzZSA4OlxuICAgICAgcmV0dXJuIDg7XG4gICAgY2FzZSAxNjpcbiAgICAgIHJldHVybiAxNjtcbiAgICBjYXNlIDMyOlxuICAgICAgcmV0dXJuIDMyO1xuICAgIGNhc2UgNjQ6XG4gICAgICByZXR1cm4gNjQ7XG4gICAgY2FzZSAxMjg6XG4gICAgY2FzZSAyNTY6XG4gICAgY2FzZSA1MTI6XG4gICAgY2FzZSAxMDI0OlxuICAgIGNhc2UgMjA0ODpcbiAgICBjYXNlIDQwOTY6XG4gICAgY2FzZSA4MTkyOlxuICAgIGNhc2UgMTYzODQ6XG4gICAgY2FzZSAzMjc2ODpcbiAgICBjYXNlIDY1NTM2OlxuICAgIGNhc2UgMTMxMDcyOlxuICAgIGNhc2UgMjYyMTQ0OlxuICAgIGNhc2UgNTI0Mjg4OlxuICAgIGNhc2UgMTA0ODU3NjpcbiAgICBjYXNlIDIwOTcxNTI6XG4gICAgICByZXR1cm4gbGFuZXMgJiA0MTk0MTc2O1xuICAgIGNhc2UgNDE5NDMwNDpcbiAgICBjYXNlIDgzODg2MDg6XG4gICAgY2FzZSAxNjc3NzIxNjpcbiAgICBjYXNlIDMzNTU0NDMyOlxuICAgICAgcmV0dXJuIGxhbmVzICYgNjI5MTQ1NjA7XG4gICAgY2FzZSA2NzEwODg2NDpcbiAgICAgIHJldHVybiA2NzEwODg2NDtcbiAgICBjYXNlIDEzNDIxNzcyODpcbiAgICAgIHJldHVybiAxMzQyMTc3Mjg7XG4gICAgY2FzZSAyNjg0MzU0NTY6XG4gICAgICByZXR1cm4gMjY4NDM1NDU2O1xuICAgIGNhc2UgNTM2ODcwOTEyOlxuICAgICAgcmV0dXJuIDUzNjg3MDkxMjtcbiAgICBjYXNlIDEwNzM3NDE4MjQ6XG4gICAgICByZXR1cm4gMDtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGxhbmVzO1xuICB9XG59XG5mdW5jdGlvbiBnZXROZXh0TGFuZXMocm9vdCwgd2lwTGFuZXMpIHtcbiAgdmFyIHBlbmRpbmdMYW5lcyA9IHJvb3QucGVuZGluZ0xhbmVzO1xuICBpZiAoMCA9PT0gcGVuZGluZ0xhbmVzKSByZXR1cm4gMDtcbiAgdmFyIG5leHRMYW5lcyA9IDAsXG4gICAgc3VzcGVuZGVkTGFuZXMgPSByb290LnN1c3BlbmRlZExhbmVzLFxuICAgIHBpbmdlZExhbmVzID0gcm9vdC5waW5nZWRMYW5lcyxcbiAgICB3YXJtTGFuZXMgPSByb290Lndhcm1MYW5lcztcbiAgcm9vdCA9IDAgIT09IHJvb3QuZmluaXNoZWRMYW5lcztcbiAgdmFyIG5vbklkbGVQZW5kaW5nTGFuZXMgPSBwZW5kaW5nTGFuZXMgJiAxMzQyMTc3Mjc7XG4gIDAgIT09IG5vbklkbGVQZW5kaW5nTGFuZXNcbiAgICA/ICgocGVuZGluZ0xhbmVzID0gbm9uSWRsZVBlbmRpbmdMYW5lcyAmIH5zdXNwZW5kZWRMYW5lcyksXG4gICAgICAwICE9PSBwZW5kaW5nTGFuZXNcbiAgICAgICAgPyAobmV4dExhbmVzID0gZ2V0SGlnaGVzdFByaW9yaXR5TGFuZXMocGVuZGluZ0xhbmVzKSlcbiAgICAgICAgOiAoKHBpbmdlZExhbmVzICY9IG5vbklkbGVQZW5kaW5nTGFuZXMpLFxuICAgICAgICAgIDAgIT09IHBpbmdlZExhbmVzXG4gICAgICAgICAgICA/IChuZXh0TGFuZXMgPSBnZXRIaWdoZXN0UHJpb3JpdHlMYW5lcyhwaW5nZWRMYW5lcykpXG4gICAgICAgICAgICA6IHJvb3QgfHxcbiAgICAgICAgICAgICAgKCh3YXJtTGFuZXMgPSBub25JZGxlUGVuZGluZ0xhbmVzICYgfndhcm1MYW5lcyksXG4gICAgICAgICAgICAgIDAgIT09IHdhcm1MYW5lcyAmJlxuICAgICAgICAgICAgICAgIChuZXh0TGFuZXMgPSBnZXRIaWdoZXN0UHJpb3JpdHlMYW5lcyh3YXJtTGFuZXMpKSkpKVxuICAgIDogKChub25JZGxlUGVuZGluZ0xhbmVzID0gcGVuZGluZ0xhbmVzICYgfnN1c3BlbmRlZExhbmVzKSxcbiAgICAgIDAgIT09IG5vbklkbGVQZW5kaW5nTGFuZXNcbiAgICAgICAgPyAobmV4dExhbmVzID0gZ2V0SGlnaGVzdFByaW9yaXR5TGFuZXMobm9uSWRsZVBlbmRpbmdMYW5lcykpXG4gICAgICAgIDogMCAhPT0gcGluZ2VkTGFuZXNcbiAgICAgICAgICA/IChuZXh0TGFuZXMgPSBnZXRIaWdoZXN0UHJpb3JpdHlMYW5lcyhwaW5nZWRMYW5lcykpXG4gICAgICAgICAgOiByb290IHx8XG4gICAgICAgICAgICAoKHdhcm1MYW5lcyA9IHBlbmRpbmdMYW5lcyAmIH53YXJtTGFuZXMpLFxuICAgICAgICAgICAgMCAhPT0gd2FybUxhbmVzICYmXG4gICAgICAgICAgICAgIChuZXh0TGFuZXMgPSBnZXRIaWdoZXN0UHJpb3JpdHlMYW5lcyh3YXJtTGFuZXMpKSkpO1xuICByZXR1cm4gMCA9PT0gbmV4dExhbmVzXG4gICAgPyAwXG4gICAgOiAwICE9PSB3aXBMYW5lcyAmJlxuICAgICAgICB3aXBMYW5lcyAhPT0gbmV4dExhbmVzICYmXG4gICAgICAgIDAgPT09ICh3aXBMYW5lcyAmIHN1c3BlbmRlZExhbmVzKSAmJlxuICAgICAgICAoKHN1c3BlbmRlZExhbmVzID0gbmV4dExhbmVzICYgLW5leHRMYW5lcyksXG4gICAgICAgICh3YXJtTGFuZXMgPSB3aXBMYW5lcyAmIC13aXBMYW5lcyksXG4gICAgICAgIHN1c3BlbmRlZExhbmVzID49IHdhcm1MYW5lcyB8fFxuICAgICAgICAgICgzMiA9PT0gc3VzcGVuZGVkTGFuZXMgJiYgMCAhPT0gKHdhcm1MYW5lcyAmIDQxOTQxNzYpKSlcbiAgICAgID8gd2lwTGFuZXNcbiAgICAgIDogbmV4dExhbmVzO1xufVxuZnVuY3Rpb24gY2hlY2tJZlJvb3RJc1ByZXJlbmRlcmluZyhyb290LCByZW5kZXJMYW5lcykge1xuICByZXR1cm4gKFxuICAgIDAgPT09XG4gICAgKHJvb3QucGVuZGluZ0xhbmVzICZcbiAgICAgIH4ocm9vdC5zdXNwZW5kZWRMYW5lcyAmIH5yb290LnBpbmdlZExhbmVzKSAmXG4gICAgICByZW5kZXJMYW5lcylcbiAgKTtcbn1cbmZ1bmN0aW9uIGNvbXB1dGVFeHBpcmF0aW9uVGltZShsYW5lLCBjdXJyZW50VGltZSkge1xuICBzd2l0Y2ggKGxhbmUpIHtcbiAgICBjYXNlIDE6XG4gICAgY2FzZSAyOlxuICAgIGNhc2UgNDpcbiAgICBjYXNlIDg6XG4gICAgICByZXR1cm4gY3VycmVudFRpbWUgKyAyNTA7XG4gICAgY2FzZSAxNjpcbiAgICBjYXNlIDMyOlxuICAgIGNhc2UgNjQ6XG4gICAgY2FzZSAxMjg6XG4gICAgY2FzZSAyNTY6XG4gICAgY2FzZSA1MTI6XG4gICAgY2FzZSAxMDI0OlxuICAgIGNhc2UgMjA0ODpcbiAgICBjYXNlIDQwOTY6XG4gICAgY2FzZSA4MTkyOlxuICAgIGNhc2UgMTYzODQ6XG4gICAgY2FzZSAzMjc2ODpcbiAgICBjYXNlIDY1NTM2OlxuICAgIGNhc2UgMTMxMDcyOlxuICAgIGNhc2UgMjYyMTQ0OlxuICAgIGNhc2UgNTI0Mjg4OlxuICAgIGNhc2UgMTA0ODU3NjpcbiAgICBjYXNlIDIwOTcxNTI6XG4gICAgICByZXR1cm4gY3VycmVudFRpbWUgKyA1ZTM7XG4gICAgY2FzZSA0MTk0MzA0OlxuICAgIGNhc2UgODM4ODYwODpcbiAgICBjYXNlIDE2Nzc3MjE2OlxuICAgIGNhc2UgMzM1NTQ0MzI6XG4gICAgICByZXR1cm4gLTE7XG4gICAgY2FzZSA2NzEwODg2NDpcbiAgICBjYXNlIDEzNDIxNzcyODpcbiAgICBjYXNlIDI2ODQzNTQ1NjpcbiAgICBjYXNlIDUzNjg3MDkxMjpcbiAgICBjYXNlIDEwNzM3NDE4MjQ6XG4gICAgICByZXR1cm4gLTE7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiAtMTtcbiAgfVxufVxuZnVuY3Rpb24gY2xhaW1OZXh0VHJhbnNpdGlvbkxhbmUoKSB7XG4gIHZhciBsYW5lID0gbmV4dFRyYW5zaXRpb25MYW5lO1xuICBuZXh0VHJhbnNpdGlvbkxhbmUgPDw9IDE7XG4gIDAgPT09IChuZXh0VHJhbnNpdGlvbkxhbmUgJiA0MTk0MTc2KSAmJiAobmV4dFRyYW5zaXRpb25MYW5lID0gMTI4KTtcbiAgcmV0dXJuIGxhbmU7XG59XG5mdW5jdGlvbiBjbGFpbU5leHRSZXRyeUxhbmUoKSB7XG4gIHZhciBsYW5lID0gbmV4dFJldHJ5TGFuZTtcbiAgbmV4dFJldHJ5TGFuZSA8PD0gMTtcbiAgMCA9PT0gKG5leHRSZXRyeUxhbmUgJiA2MjkxNDU2MCkgJiYgKG5leHRSZXRyeUxhbmUgPSA0MTk0MzA0KTtcbiAgcmV0dXJuIGxhbmU7XG59XG5mdW5jdGlvbiBjcmVhdGVMYW5lTWFwKGluaXRpYWwpIHtcbiAgZm9yICh2YXIgbGFuZU1hcCA9IFtdLCBpID0gMDsgMzEgPiBpOyBpKyspIGxhbmVNYXAucHVzaChpbml0aWFsKTtcbiAgcmV0dXJuIGxhbmVNYXA7XG59XG5mdW5jdGlvbiBtYXJrUm9vdFVwZGF0ZWQkMShyb290LCB1cGRhdGVMYW5lKSB7XG4gIHJvb3QucGVuZGluZ0xhbmVzIHw9IHVwZGF0ZUxhbmU7XG4gIDI2ODQzNTQ1NiAhPT0gdXBkYXRlTGFuZSAmJlxuICAgICgocm9vdC5zdXNwZW5kZWRMYW5lcyA9IDApLCAocm9vdC5waW5nZWRMYW5lcyA9IDApLCAocm9vdC53YXJtTGFuZXMgPSAwKSk7XG59XG5mdW5jdGlvbiBtYXJrUm9vdEZpbmlzaGVkKFxuICByb290LFxuICBmaW5pc2hlZExhbmVzLFxuICByZW1haW5pbmdMYW5lcyxcbiAgc3Bhd25lZExhbmUsXG4gIHVwZGF0ZWRMYW5lcyxcbiAgc3VzcGVuZGVkUmV0cnlMYW5lc1xuKSB7XG4gIHZhciBwcmV2aW91c2x5UGVuZGluZ0xhbmVzID0gcm9vdC5wZW5kaW5nTGFuZXM7XG4gIHJvb3QucGVuZGluZ0xhbmVzID0gcmVtYWluaW5nTGFuZXM7XG4gIHJvb3Quc3VzcGVuZGVkTGFuZXMgPSAwO1xuICByb290LnBpbmdlZExhbmVzID0gMDtcbiAgcm9vdC53YXJtTGFuZXMgPSAwO1xuICByb290LmV4cGlyZWRMYW5lcyAmPSByZW1haW5pbmdMYW5lcztcbiAgcm9vdC5lbnRhbmdsZWRMYW5lcyAmPSByZW1haW5pbmdMYW5lcztcbiAgcm9vdC5lcnJvclJlY292ZXJ5RGlzYWJsZWRMYW5lcyAmPSByZW1haW5pbmdMYW5lcztcbiAgcm9vdC5zaGVsbFN1c3BlbmRDb3VudGVyID0gMDtcbiAgdmFyIGVudGFuZ2xlbWVudHMgPSByb290LmVudGFuZ2xlbWVudHMsXG4gICAgZXhwaXJhdGlvblRpbWVzID0gcm9vdC5leHBpcmF0aW9uVGltZXMsXG4gICAgaGlkZGVuVXBkYXRlcyA9IHJvb3QuaGlkZGVuVXBkYXRlcztcbiAgZm9yIChcbiAgICByZW1haW5pbmdMYW5lcyA9IHByZXZpb3VzbHlQZW5kaW5nTGFuZXMgJiB+cmVtYWluaW5nTGFuZXM7XG4gICAgMCA8IHJlbWFpbmluZ0xhbmVzO1xuXG4gICkge1xuICAgIHZhciBpbmRleCQ3ID0gMzEgLSBjbHozMihyZW1haW5pbmdMYW5lcyksXG4gICAgICBsYW5lID0gMSA8PCBpbmRleCQ3O1xuICAgIGVudGFuZ2xlbWVudHNbaW5kZXgkN10gPSAwO1xuICAgIGV4cGlyYXRpb25UaW1lc1tpbmRleCQ3XSA9IC0xO1xuICAgIHZhciBoaWRkZW5VcGRhdGVzRm9yTGFuZSA9IGhpZGRlblVwZGF0ZXNbaW5kZXgkN107XG4gICAgaWYgKG51bGwgIT09IGhpZGRlblVwZGF0ZXNGb3JMYW5lKVxuICAgICAgZm9yIChcbiAgICAgICAgaGlkZGVuVXBkYXRlc1tpbmRleCQ3XSA9IG51bGwsIGluZGV4JDcgPSAwO1xuICAgICAgICBpbmRleCQ3IDwgaGlkZGVuVXBkYXRlc0ZvckxhbmUubGVuZ3RoO1xuICAgICAgICBpbmRleCQ3KytcbiAgICAgICkge1xuICAgICAgICB2YXIgdXBkYXRlID0gaGlkZGVuVXBkYXRlc0ZvckxhbmVbaW5kZXgkN107XG4gICAgICAgIG51bGwgIT09IHVwZGF0ZSAmJiAodXBkYXRlLmxhbmUgJj0gLTUzNjg3MDkxMyk7XG4gICAgICB9XG4gICAgcmVtYWluaW5nTGFuZXMgJj0gfmxhbmU7XG4gIH1cbiAgMCAhPT0gc3Bhd25lZExhbmUgJiYgbWFya1NwYXduZWREZWZlcnJlZExhbmUocm9vdCwgc3Bhd25lZExhbmUsIDApO1xuICAwICE9PSBzdXNwZW5kZWRSZXRyeUxhbmVzICYmXG4gICAgMCA9PT0gdXBkYXRlZExhbmVzICYmXG4gICAgMCAhPT0gcm9vdC50YWcgJiZcbiAgICAocm9vdC5zdXNwZW5kZWRMYW5lcyB8PVxuICAgICAgc3VzcGVuZGVkUmV0cnlMYW5lcyAmIH4ocHJldmlvdXNseVBlbmRpbmdMYW5lcyAmIH5maW5pc2hlZExhbmVzKSk7XG59XG5mdW5jdGlvbiBtYXJrU3Bhd25lZERlZmVycmVkTGFuZShyb290LCBzcGF3bmVkTGFuZSwgZW50YW5nbGVkTGFuZXMpIHtcbiAgcm9vdC5wZW5kaW5nTGFuZXMgfD0gc3Bhd25lZExhbmU7XG4gIHJvb3Quc3VzcGVuZGVkTGFuZXMgJj0gfnNwYXduZWRMYW5lO1xuICB2YXIgc3Bhd25lZExhbmVJbmRleCA9IDMxIC0gY2x6MzIoc3Bhd25lZExhbmUpO1xuICByb290LmVudGFuZ2xlZExhbmVzIHw9IHNwYXduZWRMYW5lO1xuICByb290LmVudGFuZ2xlbWVudHNbc3Bhd25lZExhbmVJbmRleF0gPVxuICAgIHJvb3QuZW50YW5nbGVtZW50c1tzcGF3bmVkTGFuZUluZGV4XSB8XG4gICAgMTA3Mzc0MTgyNCB8XG4gICAgKGVudGFuZ2xlZExhbmVzICYgNDE5NDIxOCk7XG59XG5mdW5jdGlvbiBtYXJrUm9vdEVudGFuZ2xlZChyb290LCBlbnRhbmdsZWRMYW5lcykge1xuICB2YXIgcm9vdEVudGFuZ2xlZExhbmVzID0gKHJvb3QuZW50YW5nbGVkTGFuZXMgfD0gZW50YW5nbGVkTGFuZXMpO1xuICBmb3IgKHJvb3QgPSByb290LmVudGFuZ2xlbWVudHM7IHJvb3RFbnRhbmdsZWRMYW5lczsgKSB7XG4gICAgdmFyIGluZGV4JDggPSAzMSAtIGNsejMyKHJvb3RFbnRhbmdsZWRMYW5lcyksXG4gICAgICBsYW5lID0gMSA8PCBpbmRleCQ4O1xuICAgIChsYW5lICYgZW50YW5nbGVkTGFuZXMpIHwgKHJvb3RbaW5kZXgkOF0gJiBlbnRhbmdsZWRMYW5lcykgJiZcbiAgICAgIChyb290W2luZGV4JDhdIHw9IGVudGFuZ2xlZExhbmVzKTtcbiAgICByb290RW50YW5nbGVkTGFuZXMgJj0gfmxhbmU7XG4gIH1cbn1cbmZ1bmN0aW9uIGxhbmVzVG9FdmVudFByaW9yaXR5KGxhbmVzKSB7XG4gIGxhbmVzICY9IC1sYW5lcztcbiAgcmV0dXJuIDIgPCBsYW5lc1xuICAgID8gOCA8IGxhbmVzXG4gICAgICA/IDAgIT09IChsYW5lcyAmIDEzNDIxNzcyNylcbiAgICAgICAgPyAzMlxuICAgICAgICA6IDI2ODQzNTQ1NlxuICAgICAgOiA4XG4gICAgOiAyO1xufVxuZnVuY3Rpb24gcmVzb2x2ZVVwZGF0ZVByaW9yaXR5KCkge1xuICB2YXIgdXBkYXRlUHJpb3JpdHkgPSBSZWFjdERPTVNoYXJlZEludGVybmFscy5wO1xuICBpZiAoMCAhPT0gdXBkYXRlUHJpb3JpdHkpIHJldHVybiB1cGRhdGVQcmlvcml0eTtcbiAgdXBkYXRlUHJpb3JpdHkgPSB3aW5kb3cuZXZlbnQ7XG4gIHJldHVybiB2b2lkIDAgPT09IHVwZGF0ZVByaW9yaXR5ID8gMzIgOiBnZXRFdmVudFByaW9yaXR5KHVwZGF0ZVByaW9yaXR5LnR5cGUpO1xufVxuZnVuY3Rpb24gcnVuV2l0aFByaW9yaXR5KHByaW9yaXR5LCBmbikge1xuICB2YXIgcHJldmlvdXNQcmlvcml0eSA9IFJlYWN0RE9NU2hhcmVkSW50ZXJuYWxzLnA7XG4gIHRyeSB7XG4gICAgcmV0dXJuIChSZWFjdERPTVNoYXJlZEludGVybmFscy5wID0gcHJpb3JpdHkpLCBmbigpO1xuICB9IGZpbmFsbHkge1xuICAgIFJlYWN0RE9NU2hhcmVkSW50ZXJuYWxzLnAgPSBwcmV2aW91c1ByaW9yaXR5O1xuICB9XG59XG52YXIgcmFuZG9tS2V5ID0gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMiksXG4gIGludGVybmFsSW5zdGFuY2VLZXkgPSBcIl9fcmVhY3RGaWJlciRcIiArIHJhbmRvbUtleSxcbiAgaW50ZXJuYWxQcm9wc0tleSA9IFwiX19yZWFjdFByb3BzJFwiICsgcmFuZG9tS2V5LFxuICBpbnRlcm5hbENvbnRhaW5lckluc3RhbmNlS2V5ID0gXCJfX3JlYWN0Q29udGFpbmVyJFwiICsgcmFuZG9tS2V5LFxuICBpbnRlcm5hbEV2ZW50SGFuZGxlcnNLZXkgPSBcIl9fcmVhY3RFdmVudHMkXCIgKyByYW5kb21LZXksXG4gIGludGVybmFsRXZlbnRIYW5kbGVyTGlzdGVuZXJzS2V5ID0gXCJfX3JlYWN0TGlzdGVuZXJzJFwiICsgcmFuZG9tS2V5LFxuICBpbnRlcm5hbEV2ZW50SGFuZGxlc1NldEtleSA9IFwiX19yZWFjdEhhbmRsZXMkXCIgKyByYW5kb21LZXksXG4gIGludGVybmFsUm9vdE5vZGVSZXNvdXJjZXNLZXkgPSBcIl9fcmVhY3RSZXNvdXJjZXMkXCIgKyByYW5kb21LZXksXG4gIGludGVybmFsSG9pc3RhYmxlTWFya2VyID0gXCJfX3JlYWN0TWFya2VyJFwiICsgcmFuZG9tS2V5O1xuZnVuY3Rpb24gZGV0YWNoRGVsZXRlZEluc3RhbmNlKG5vZGUpIHtcbiAgZGVsZXRlIG5vZGVbaW50ZXJuYWxJbnN0YW5jZUtleV07XG4gIGRlbGV0ZSBub2RlW2ludGVybmFsUHJvcHNLZXldO1xuICBkZWxldGUgbm9kZVtpbnRlcm5hbEV2ZW50SGFuZGxlcnNLZXldO1xuICBkZWxldGUgbm9kZVtpbnRlcm5hbEV2ZW50SGFuZGxlckxpc3RlbmVyc0tleV07XG4gIGRlbGV0ZSBub2RlW2ludGVybmFsRXZlbnRIYW5kbGVzU2V0S2V5XTtcbn1cbmZ1bmN0aW9uIGdldENsb3Nlc3RJbnN0YW5jZUZyb21Ob2RlKHRhcmdldE5vZGUpIHtcbiAgdmFyIHRhcmdldEluc3QgPSB0YXJnZXROb2RlW2ludGVybmFsSW5zdGFuY2VLZXldO1xuICBpZiAodGFyZ2V0SW5zdCkgcmV0dXJuIHRhcmdldEluc3Q7XG4gIGZvciAodmFyIHBhcmVudE5vZGUgPSB0YXJnZXROb2RlLnBhcmVudE5vZGU7IHBhcmVudE5vZGU7ICkge1xuICAgIGlmIChcbiAgICAgICh0YXJnZXRJbnN0ID1cbiAgICAgICAgcGFyZW50Tm9kZVtpbnRlcm5hbENvbnRhaW5lckluc3RhbmNlS2V5XSB8fFxuICAgICAgICBwYXJlbnROb2RlW2ludGVybmFsSW5zdGFuY2VLZXldKVxuICAgICkge1xuICAgICAgcGFyZW50Tm9kZSA9IHRhcmdldEluc3QuYWx0ZXJuYXRlO1xuICAgICAgaWYgKFxuICAgICAgICBudWxsICE9PSB0YXJnZXRJbnN0LmNoaWxkIHx8XG4gICAgICAgIChudWxsICE9PSBwYXJlbnROb2RlICYmIG51bGwgIT09IHBhcmVudE5vZGUuY2hpbGQpXG4gICAgICApXG4gICAgICAgIGZvciAoXG4gICAgICAgICAgdGFyZ2V0Tm9kZSA9IGdldFBhcmVudFN1c3BlbnNlSW5zdGFuY2UodGFyZ2V0Tm9kZSk7XG4gICAgICAgICAgbnVsbCAhPT0gdGFyZ2V0Tm9kZTtcblxuICAgICAgICApIHtcbiAgICAgICAgICBpZiAoKHBhcmVudE5vZGUgPSB0YXJnZXROb2RlW2ludGVybmFsSW5zdGFuY2VLZXldKSkgcmV0dXJuIHBhcmVudE5vZGU7XG4gICAgICAgICAgdGFyZ2V0Tm9kZSA9IGdldFBhcmVudFN1c3BlbnNlSW5zdGFuY2UodGFyZ2V0Tm9kZSk7XG4gICAgICAgIH1cbiAgICAgIHJldHVybiB0YXJnZXRJbnN0O1xuICAgIH1cbiAgICB0YXJnZXROb2RlID0gcGFyZW50Tm9kZTtcbiAgICBwYXJlbnROb2RlID0gdGFyZ2V0Tm9kZS5wYXJlbnROb2RlO1xuICB9XG4gIHJldHVybiBudWxsO1xufVxuZnVuY3Rpb24gZ2V0SW5zdGFuY2VGcm9tTm9kZShub2RlKSB7XG4gIGlmIChcbiAgICAobm9kZSA9IG5vZGVbaW50ZXJuYWxJbnN0YW5jZUtleV0gfHwgbm9kZVtpbnRlcm5hbENvbnRhaW5lckluc3RhbmNlS2V5XSlcbiAgKSB7XG4gICAgdmFyIHRhZyA9IG5vZGUudGFnO1xuICAgIGlmIChcbiAgICAgIDUgPT09IHRhZyB8fFxuICAgICAgNiA9PT0gdGFnIHx8XG4gICAgICAxMyA9PT0gdGFnIHx8XG4gICAgICAyNiA9PT0gdGFnIHx8XG4gICAgICAyNyA9PT0gdGFnIHx8XG4gICAgICAzID09PSB0YWdcbiAgICApXG4gICAgICByZXR1cm4gbm9kZTtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cbmZ1bmN0aW9uIGdldE5vZGVGcm9tSW5zdGFuY2UoaW5zdCkge1xuICB2YXIgdGFnID0gaW5zdC50YWc7XG4gIGlmICg1ID09PSB0YWcgfHwgMjYgPT09IHRhZyB8fCAyNyA9PT0gdGFnIHx8IDYgPT09IHRhZykgcmV0dXJuIGluc3Quc3RhdGVOb2RlO1xuICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDMzKSk7XG59XG5mdW5jdGlvbiBnZXRSZXNvdXJjZXNGcm9tUm9vdChyb290KSB7XG4gIHZhciByZXNvdXJjZXMgPSByb290W2ludGVybmFsUm9vdE5vZGVSZXNvdXJjZXNLZXldO1xuICByZXNvdXJjZXMgfHxcbiAgICAocmVzb3VyY2VzID0gcm9vdFtpbnRlcm5hbFJvb3ROb2RlUmVzb3VyY2VzS2V5XSA9XG4gICAgICB7IGhvaXN0YWJsZVN0eWxlczogbmV3IE1hcCgpLCBob2lzdGFibGVTY3JpcHRzOiBuZXcgTWFwKCkgfSk7XG4gIHJldHVybiByZXNvdXJjZXM7XG59XG5mdW5jdGlvbiBtYXJrTm9kZUFzSG9pc3RhYmxlKG5vZGUpIHtcbiAgbm9kZVtpbnRlcm5hbEhvaXN0YWJsZU1hcmtlcl0gPSAhMDtcbn1cbnZhciBhbGxOYXRpdmVFdmVudHMgPSBuZXcgU2V0KCksXG4gIHJlZ2lzdHJhdGlvbk5hbWVEZXBlbmRlbmNpZXMgPSB7fTtcbmZ1bmN0aW9uIHJlZ2lzdGVyVHdvUGhhc2VFdmVudChyZWdpc3RyYXRpb25OYW1lLCBkZXBlbmRlbmNpZXMpIHtcbiAgcmVnaXN0ZXJEaXJlY3RFdmVudChyZWdpc3RyYXRpb25OYW1lLCBkZXBlbmRlbmNpZXMpO1xuICByZWdpc3RlckRpcmVjdEV2ZW50KHJlZ2lzdHJhdGlvbk5hbWUgKyBcIkNhcHR1cmVcIiwgZGVwZW5kZW5jaWVzKTtcbn1cbmZ1bmN0aW9uIHJlZ2lzdGVyRGlyZWN0RXZlbnQocmVnaXN0cmF0aW9uTmFtZSwgZGVwZW5kZW5jaWVzKSB7XG4gIHJlZ2lzdHJhdGlvbk5hbWVEZXBlbmRlbmNpZXNbcmVnaXN0cmF0aW9uTmFtZV0gPSBkZXBlbmRlbmNpZXM7XG4gIGZvciAoXG4gICAgcmVnaXN0cmF0aW9uTmFtZSA9IDA7XG4gICAgcmVnaXN0cmF0aW9uTmFtZSA8IGRlcGVuZGVuY2llcy5sZW5ndGg7XG4gICAgcmVnaXN0cmF0aW9uTmFtZSsrXG4gIClcbiAgICBhbGxOYXRpdmVFdmVudHMuYWRkKGRlcGVuZGVuY2llc1tyZWdpc3RyYXRpb25OYW1lXSk7XG59XG52YXIgY2FuVXNlRE9NID0gIShcbiAgICBcInVuZGVmaW5lZFwiID09PSB0eXBlb2Ygd2luZG93IHx8XG4gICAgXCJ1bmRlZmluZWRcIiA9PT0gdHlwZW9mIHdpbmRvdy5kb2N1bWVudCB8fFxuICAgIFwidW5kZWZpbmVkXCIgPT09IHR5cGVvZiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudFxuICApLFxuICBWQUxJRF9BVFRSSUJVVEVfTkFNRV9SRUdFWCA9IFJlZ0V4cChcbiAgICBcIl5bOkEtWl9hLXpcXFxcdTAwQzAtXFxcXHUwMEQ2XFxcXHUwMEQ4LVxcXFx1MDBGNlxcXFx1MDBGOC1cXFxcdTAyRkZcXFxcdTAzNzAtXFxcXHUwMzdEXFxcXHUwMzdGLVxcXFx1MUZGRlxcXFx1MjAwQy1cXFxcdTIwMERcXFxcdTIwNzAtXFxcXHUyMThGXFxcXHUyQzAwLVxcXFx1MkZFRlxcXFx1MzAwMS1cXFxcdUQ3RkZcXFxcdUY5MDAtXFxcXHVGRENGXFxcXHVGREYwLVxcXFx1RkZGRF1bOkEtWl9hLXpcXFxcdTAwQzAtXFxcXHUwMEQ2XFxcXHUwMEQ4LVxcXFx1MDBGNlxcXFx1MDBGOC1cXFxcdTAyRkZcXFxcdTAzNzAtXFxcXHUwMzdEXFxcXHUwMzdGLVxcXFx1MUZGRlxcXFx1MjAwQy1cXFxcdTIwMERcXFxcdTIwNzAtXFxcXHUyMThGXFxcXHUyQzAwLVxcXFx1MkZFRlxcXFx1MzAwMS1cXFxcdUQ3RkZcXFxcdUY5MDAtXFxcXHVGRENGXFxcXHVGREYwLVxcXFx1RkZGRFxcXFwtLjAtOVxcXFx1MDBCN1xcXFx1MDMwMC1cXFxcdTAzNkZcXFxcdTIwM0YtXFxcXHUyMDQwXSokXCJcbiAgKSxcbiAgaWxsZWdhbEF0dHJpYnV0ZU5hbWVDYWNoZSA9IHt9LFxuICB2YWxpZGF0ZWRBdHRyaWJ1dGVOYW1lQ2FjaGUgPSB7fTtcbmZ1bmN0aW9uIGlzQXR0cmlidXRlTmFtZVNhZmUoYXR0cmlidXRlTmFtZSkge1xuICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbCh2YWxpZGF0ZWRBdHRyaWJ1dGVOYW1lQ2FjaGUsIGF0dHJpYnV0ZU5hbWUpKVxuICAgIHJldHVybiAhMDtcbiAgaWYgKGhhc093blByb3BlcnR5LmNhbGwoaWxsZWdhbEF0dHJpYnV0ZU5hbWVDYWNoZSwgYXR0cmlidXRlTmFtZSkpIHJldHVybiAhMTtcbiAgaWYgKFZBTElEX0FUVFJJQlVURV9OQU1FX1JFR0VYLnRlc3QoYXR0cmlidXRlTmFtZSkpXG4gICAgcmV0dXJuICh2YWxpZGF0ZWRBdHRyaWJ1dGVOYW1lQ2FjaGVbYXR0cmlidXRlTmFtZV0gPSAhMCk7XG4gIGlsbGVnYWxBdHRyaWJ1dGVOYW1lQ2FjaGVbYXR0cmlidXRlTmFtZV0gPSAhMDtcbiAgcmV0dXJuICExO1xufVxuZnVuY3Rpb24gc2V0VmFsdWVGb3JBdHRyaWJ1dGUobm9kZSwgbmFtZSwgdmFsdWUpIHtcbiAgaWYgKGlzQXR0cmlidXRlTmFtZVNhZmUobmFtZSkpXG4gICAgaWYgKG51bGwgPT09IHZhbHVlKSBub2RlLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgICBlbHNlIHtcbiAgICAgIHN3aXRjaCAodHlwZW9mIHZhbHVlKSB7XG4gICAgICAgIGNhc2UgXCJ1bmRlZmluZWRcIjpcbiAgICAgICAgY2FzZSBcImZ1bmN0aW9uXCI6XG4gICAgICAgIGNhc2UgXCJzeW1ib2xcIjpcbiAgICAgICAgICBub2RlLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIGNhc2UgXCJib29sZWFuXCI6XG4gICAgICAgICAgdmFyIHByZWZpeCQxMCA9IG5hbWUudG9Mb3dlckNhc2UoKS5zbGljZSgwLCA1KTtcbiAgICAgICAgICBpZiAoXCJkYXRhLVwiICE9PSBwcmVmaXgkMTAgJiYgXCJhcmlhLVwiICE9PSBwcmVmaXgkMTApIHtcbiAgICAgICAgICAgIG5vZGUucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgIH1cbiAgICAgIG5vZGUuc2V0QXR0cmlidXRlKG5hbWUsIFwiXCIgKyB2YWx1ZSk7XG4gICAgfVxufVxuZnVuY3Rpb24gc2V0VmFsdWVGb3JLbm93bkF0dHJpYnV0ZShub2RlLCBuYW1lLCB2YWx1ZSkge1xuICBpZiAobnVsbCA9PT0gdmFsdWUpIG5vZGUucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICBlbHNlIHtcbiAgICBzd2l0Y2ggKHR5cGVvZiB2YWx1ZSkge1xuICAgICAgY2FzZSBcInVuZGVmaW5lZFwiOlxuICAgICAgY2FzZSBcImZ1bmN0aW9uXCI6XG4gICAgICBjYXNlIFwic3ltYm9sXCI6XG4gICAgICBjYXNlIFwiYm9vbGVhblwiOlxuICAgICAgICBub2RlLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBub2RlLnNldEF0dHJpYnV0ZShuYW1lLCBcIlwiICsgdmFsdWUpO1xuICB9XG59XG5mdW5jdGlvbiBzZXRWYWx1ZUZvck5hbWVzcGFjZWRBdHRyaWJ1dGUobm9kZSwgbmFtZXNwYWNlLCBuYW1lLCB2YWx1ZSkge1xuICBpZiAobnVsbCA9PT0gdmFsdWUpIG5vZGUucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICBlbHNlIHtcbiAgICBzd2l0Y2ggKHR5cGVvZiB2YWx1ZSkge1xuICAgICAgY2FzZSBcInVuZGVmaW5lZFwiOlxuICAgICAgY2FzZSBcImZ1bmN0aW9uXCI6XG4gICAgICBjYXNlIFwic3ltYm9sXCI6XG4gICAgICBjYXNlIFwiYm9vbGVhblwiOlxuICAgICAgICBub2RlLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBub2RlLnNldEF0dHJpYnV0ZU5TKG5hbWVzcGFjZSwgbmFtZSwgXCJcIiArIHZhbHVlKTtcbiAgfVxufVxuZnVuY3Rpb24gZ2V0VG9TdHJpbmdWYWx1ZSh2YWx1ZSkge1xuICBzd2l0Y2ggKHR5cGVvZiB2YWx1ZSkge1xuICAgIGNhc2UgXCJiaWdpbnRcIjpcbiAgICBjYXNlIFwiYm9vbGVhblwiOlxuICAgIGNhc2UgXCJudW1iZXJcIjpcbiAgICBjYXNlIFwic3RyaW5nXCI6XG4gICAgY2FzZSBcInVuZGVmaW5lZFwiOlxuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIGNhc2UgXCJvYmplY3RcIjpcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIFwiXCI7XG4gIH1cbn1cbmZ1bmN0aW9uIGlzQ2hlY2thYmxlKGVsZW0pIHtcbiAgdmFyIHR5cGUgPSBlbGVtLnR5cGU7XG4gIHJldHVybiAoXG4gICAgKGVsZW0gPSBlbGVtLm5vZGVOYW1lKSAmJlxuICAgIFwiaW5wdXRcIiA9PT0gZWxlbS50b0xvd2VyQ2FzZSgpICYmXG4gICAgKFwiY2hlY2tib3hcIiA9PT0gdHlwZSB8fCBcInJhZGlvXCIgPT09IHR5cGUpXG4gICk7XG59XG5mdW5jdGlvbiB0cmFja1ZhbHVlT25Ob2RlKG5vZGUpIHtcbiAgdmFyIHZhbHVlRmllbGQgPSBpc0NoZWNrYWJsZShub2RlKSA/IFwiY2hlY2tlZFwiIDogXCJ2YWx1ZVwiLFxuICAgIGRlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKFxuICAgICAgbm9kZS5jb25zdHJ1Y3Rvci5wcm90b3R5cGUsXG4gICAgICB2YWx1ZUZpZWxkXG4gICAgKSxcbiAgICBjdXJyZW50VmFsdWUgPSBcIlwiICsgbm9kZVt2YWx1ZUZpZWxkXTtcbiAgaWYgKFxuICAgICFub2RlLmhhc093blByb3BlcnR5KHZhbHVlRmllbGQpICYmXG4gICAgXCJ1bmRlZmluZWRcIiAhPT0gdHlwZW9mIGRlc2NyaXB0b3IgJiZcbiAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBkZXNjcmlwdG9yLmdldCAmJlxuICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGRlc2NyaXB0b3Iuc2V0XG4gICkge1xuICAgIHZhciBnZXQgPSBkZXNjcmlwdG9yLmdldCxcbiAgICAgIHNldCA9IGRlc2NyaXB0b3Iuc2V0O1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShub2RlLCB2YWx1ZUZpZWxkLCB7XG4gICAgICBjb25maWd1cmFibGU6ICEwLFxuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBnZXQuY2FsbCh0aGlzKTtcbiAgICAgIH0sXG4gICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBjdXJyZW50VmFsdWUgPSBcIlwiICsgdmFsdWU7XG4gICAgICAgIHNldC5jYWxsKHRoaXMsIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobm9kZSwgdmFsdWVGaWVsZCwge1xuICAgICAgZW51bWVyYWJsZTogZGVzY3JpcHRvci5lbnVtZXJhYmxlXG4gICAgfSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGdldFZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBjdXJyZW50VmFsdWU7XG4gICAgICB9LFxuICAgICAgc2V0VmFsdWU6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBjdXJyZW50VmFsdWUgPSBcIlwiICsgdmFsdWU7XG4gICAgICB9LFxuICAgICAgc3RvcFRyYWNraW5nOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIG5vZGUuX3ZhbHVlVHJhY2tlciA9IG51bGw7XG4gICAgICAgIGRlbGV0ZSBub2RlW3ZhbHVlRmllbGRdO1xuICAgICAgfVxuICAgIH07XG4gIH1cbn1cbmZ1bmN0aW9uIHRyYWNrKG5vZGUpIHtcbiAgbm9kZS5fdmFsdWVUcmFja2VyIHx8IChub2RlLl92YWx1ZVRyYWNrZXIgPSB0cmFja1ZhbHVlT25Ob2RlKG5vZGUpKTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZVZhbHVlSWZDaGFuZ2VkKG5vZGUpIHtcbiAgaWYgKCFub2RlKSByZXR1cm4gITE7XG4gIHZhciB0cmFja2VyID0gbm9kZS5fdmFsdWVUcmFja2VyO1xuICBpZiAoIXRyYWNrZXIpIHJldHVybiAhMDtcbiAgdmFyIGxhc3RWYWx1ZSA9IHRyYWNrZXIuZ2V0VmFsdWUoKTtcbiAgdmFyIHZhbHVlID0gXCJcIjtcbiAgbm9kZSAmJlxuICAgICh2YWx1ZSA9IGlzQ2hlY2thYmxlKG5vZGUpXG4gICAgICA/IG5vZGUuY2hlY2tlZFxuICAgICAgICA/IFwidHJ1ZVwiXG4gICAgICAgIDogXCJmYWxzZVwiXG4gICAgICA6IG5vZGUudmFsdWUpO1xuICBub2RlID0gdmFsdWU7XG4gIHJldHVybiBub2RlICE9PSBsYXN0VmFsdWUgPyAodHJhY2tlci5zZXRWYWx1ZShub2RlKSwgITApIDogITE7XG59XG5mdW5jdGlvbiBnZXRBY3RpdmVFbGVtZW50KGRvYykge1xuICBkb2MgPSBkb2MgfHwgKFwidW5kZWZpbmVkXCIgIT09IHR5cGVvZiBkb2N1bWVudCA/IGRvY3VtZW50IDogdm9pZCAwKTtcbiAgaWYgKFwidW5kZWZpbmVkXCIgPT09IHR5cGVvZiBkb2MpIHJldHVybiBudWxsO1xuICB0cnkge1xuICAgIHJldHVybiBkb2MuYWN0aXZlRWxlbWVudCB8fCBkb2MuYm9keTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBkb2MuYm9keTtcbiAgfVxufVxudmFyIGVzY2FwZVNlbGVjdG9yQXR0cmlidXRlVmFsdWVJbnNpZGVEb3VibGVRdW90ZXNSZWdleCA9IC9bXFxuXCJcXFxcXS9nO1xuZnVuY3Rpb24gZXNjYXBlU2VsZWN0b3JBdHRyaWJ1dGVWYWx1ZUluc2lkZURvdWJsZVF1b3Rlcyh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUucmVwbGFjZShcbiAgICBlc2NhcGVTZWxlY3RvckF0dHJpYnV0ZVZhbHVlSW5zaWRlRG91YmxlUXVvdGVzUmVnZXgsXG4gICAgZnVuY3Rpb24gKGNoKSB7XG4gICAgICByZXR1cm4gXCJcXFxcXCIgKyBjaC5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KSArIFwiIFwiO1xuICAgIH1cbiAgKTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZUlucHV0KFxuICBlbGVtZW50LFxuICB2YWx1ZSxcbiAgZGVmYXVsdFZhbHVlLFxuICBsYXN0RGVmYXVsdFZhbHVlLFxuICBjaGVja2VkLFxuICBkZWZhdWx0Q2hlY2tlZCxcbiAgdHlwZSxcbiAgbmFtZVxuKSB7XG4gIGVsZW1lbnQubmFtZSA9IFwiXCI7XG4gIG51bGwgIT0gdHlwZSAmJlxuICBcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiB0eXBlICYmXG4gIFwic3ltYm9sXCIgIT09IHR5cGVvZiB0eXBlICYmXG4gIFwiYm9vbGVhblwiICE9PSB0eXBlb2YgdHlwZVxuICAgID8gKGVsZW1lbnQudHlwZSA9IHR5cGUpXG4gICAgOiBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShcInR5cGVcIik7XG4gIGlmIChudWxsICE9IHZhbHVlKVxuICAgIGlmIChcIm51bWJlclwiID09PSB0eXBlKSB7XG4gICAgICBpZiAoKDAgPT09IHZhbHVlICYmIFwiXCIgPT09IGVsZW1lbnQudmFsdWUpIHx8IGVsZW1lbnQudmFsdWUgIT0gdmFsdWUpXG4gICAgICAgIGVsZW1lbnQudmFsdWUgPSBcIlwiICsgZ2V0VG9TdHJpbmdWYWx1ZSh2YWx1ZSk7XG4gICAgfSBlbHNlXG4gICAgICBlbGVtZW50LnZhbHVlICE9PSBcIlwiICsgZ2V0VG9TdHJpbmdWYWx1ZSh2YWx1ZSkgJiZcbiAgICAgICAgKGVsZW1lbnQudmFsdWUgPSBcIlwiICsgZ2V0VG9TdHJpbmdWYWx1ZSh2YWx1ZSkpO1xuICBlbHNlXG4gICAgKFwic3VibWl0XCIgIT09IHR5cGUgJiYgXCJyZXNldFwiICE9PSB0eXBlKSB8fCBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShcInZhbHVlXCIpO1xuICBudWxsICE9IHZhbHVlXG4gICAgPyBzZXREZWZhdWx0VmFsdWUoZWxlbWVudCwgdHlwZSwgZ2V0VG9TdHJpbmdWYWx1ZSh2YWx1ZSkpXG4gICAgOiBudWxsICE9IGRlZmF1bHRWYWx1ZVxuICAgICAgPyBzZXREZWZhdWx0VmFsdWUoZWxlbWVudCwgdHlwZSwgZ2V0VG9TdHJpbmdWYWx1ZShkZWZhdWx0VmFsdWUpKVxuICAgICAgOiBudWxsICE9IGxhc3REZWZhdWx0VmFsdWUgJiYgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoXCJ2YWx1ZVwiKTtcbiAgbnVsbCA9PSBjaGVja2VkICYmXG4gICAgbnVsbCAhPSBkZWZhdWx0Q2hlY2tlZCAmJlxuICAgIChlbGVtZW50LmRlZmF1bHRDaGVja2VkID0gISFkZWZhdWx0Q2hlY2tlZCk7XG4gIG51bGwgIT0gY2hlY2tlZCAmJlxuICAgIChlbGVtZW50LmNoZWNrZWQgPVxuICAgICAgY2hlY2tlZCAmJiBcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiBjaGVja2VkICYmIFwic3ltYm9sXCIgIT09IHR5cGVvZiBjaGVja2VkKTtcbiAgbnVsbCAhPSBuYW1lICYmXG4gIFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIG5hbWUgJiZcbiAgXCJzeW1ib2xcIiAhPT0gdHlwZW9mIG5hbWUgJiZcbiAgXCJib29sZWFuXCIgIT09IHR5cGVvZiBuYW1lXG4gICAgPyAoZWxlbWVudC5uYW1lID0gXCJcIiArIGdldFRvU3RyaW5nVmFsdWUobmFtZSkpXG4gICAgOiBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShcIm5hbWVcIik7XG59XG5mdW5jdGlvbiBpbml0SW5wdXQoXG4gIGVsZW1lbnQsXG4gIHZhbHVlLFxuICBkZWZhdWx0VmFsdWUsXG4gIGNoZWNrZWQsXG4gIGRlZmF1bHRDaGVja2VkLFxuICB0eXBlLFxuICBuYW1lLFxuICBpc0h5ZHJhdGluZ1xuKSB7XG4gIG51bGwgIT0gdHlwZSAmJlxuICAgIFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIHR5cGUgJiZcbiAgICBcInN5bWJvbFwiICE9PSB0eXBlb2YgdHlwZSAmJlxuICAgIFwiYm9vbGVhblwiICE9PSB0eXBlb2YgdHlwZSAmJlxuICAgIChlbGVtZW50LnR5cGUgPSB0eXBlKTtcbiAgaWYgKG51bGwgIT0gdmFsdWUgfHwgbnVsbCAhPSBkZWZhdWx0VmFsdWUpIHtcbiAgICBpZiAoXG4gICAgICAhKFxuICAgICAgICAoXCJzdWJtaXRcIiAhPT0gdHlwZSAmJiBcInJlc2V0XCIgIT09IHR5cGUpIHx8XG4gICAgICAgICh2b2lkIDAgIT09IHZhbHVlICYmIG51bGwgIT09IHZhbHVlKVxuICAgICAgKVxuICAgIClcbiAgICAgIHJldHVybjtcbiAgICBkZWZhdWx0VmFsdWUgPVxuICAgICAgbnVsbCAhPSBkZWZhdWx0VmFsdWUgPyBcIlwiICsgZ2V0VG9TdHJpbmdWYWx1ZShkZWZhdWx0VmFsdWUpIDogXCJcIjtcbiAgICB2YWx1ZSA9IG51bGwgIT0gdmFsdWUgPyBcIlwiICsgZ2V0VG9TdHJpbmdWYWx1ZSh2YWx1ZSkgOiBkZWZhdWx0VmFsdWU7XG4gICAgaXNIeWRyYXRpbmcgfHwgdmFsdWUgPT09IGVsZW1lbnQudmFsdWUgfHwgKGVsZW1lbnQudmFsdWUgPSB2YWx1ZSk7XG4gICAgZWxlbWVudC5kZWZhdWx0VmFsdWUgPSB2YWx1ZTtcbiAgfVxuICBjaGVja2VkID0gbnVsbCAhPSBjaGVja2VkID8gY2hlY2tlZCA6IGRlZmF1bHRDaGVja2VkO1xuICBjaGVja2VkID1cbiAgICBcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiBjaGVja2VkICYmIFwic3ltYm9sXCIgIT09IHR5cGVvZiBjaGVja2VkICYmICEhY2hlY2tlZDtcbiAgZWxlbWVudC5jaGVja2VkID0gaXNIeWRyYXRpbmcgPyBlbGVtZW50LmNoZWNrZWQgOiAhIWNoZWNrZWQ7XG4gIGVsZW1lbnQuZGVmYXVsdENoZWNrZWQgPSAhIWNoZWNrZWQ7XG4gIG51bGwgIT0gbmFtZSAmJlxuICAgIFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIG5hbWUgJiZcbiAgICBcInN5bWJvbFwiICE9PSB0eXBlb2YgbmFtZSAmJlxuICAgIFwiYm9vbGVhblwiICE9PSB0eXBlb2YgbmFtZSAmJlxuICAgIChlbGVtZW50Lm5hbWUgPSBuYW1lKTtcbn1cbmZ1bmN0aW9uIHNldERlZmF1bHRWYWx1ZShub2RlLCB0eXBlLCB2YWx1ZSkge1xuICAoXCJudW1iZXJcIiA9PT0gdHlwZSAmJiBnZXRBY3RpdmVFbGVtZW50KG5vZGUub3duZXJEb2N1bWVudCkgPT09IG5vZGUpIHx8XG4gICAgbm9kZS5kZWZhdWx0VmFsdWUgPT09IFwiXCIgKyB2YWx1ZSB8fFxuICAgIChub2RlLmRlZmF1bHRWYWx1ZSA9IFwiXCIgKyB2YWx1ZSk7XG59XG5mdW5jdGlvbiB1cGRhdGVPcHRpb25zKG5vZGUsIG11bHRpcGxlLCBwcm9wVmFsdWUsIHNldERlZmF1bHRTZWxlY3RlZCkge1xuICBub2RlID0gbm9kZS5vcHRpb25zO1xuICBpZiAobXVsdGlwbGUpIHtcbiAgICBtdWx0aXBsZSA9IHt9O1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcFZhbHVlLmxlbmd0aDsgaSsrKVxuICAgICAgbXVsdGlwbGVbXCIkXCIgKyBwcm9wVmFsdWVbaV1dID0gITA7XG4gICAgZm9yIChwcm9wVmFsdWUgPSAwOyBwcm9wVmFsdWUgPCBub2RlLmxlbmd0aDsgcHJvcFZhbHVlKyspXG4gICAgICAoaSA9IG11bHRpcGxlLmhhc093blByb3BlcnR5KFwiJFwiICsgbm9kZVtwcm9wVmFsdWVdLnZhbHVlKSksXG4gICAgICAgIG5vZGVbcHJvcFZhbHVlXS5zZWxlY3RlZCAhPT0gaSAmJiAobm9kZVtwcm9wVmFsdWVdLnNlbGVjdGVkID0gaSksXG4gICAgICAgIGkgJiYgc2V0RGVmYXVsdFNlbGVjdGVkICYmIChub2RlW3Byb3BWYWx1ZV0uZGVmYXVsdFNlbGVjdGVkID0gITApO1xuICB9IGVsc2Uge1xuICAgIHByb3BWYWx1ZSA9IFwiXCIgKyBnZXRUb1N0cmluZ1ZhbHVlKHByb3BWYWx1ZSk7XG4gICAgbXVsdGlwbGUgPSBudWxsO1xuICAgIGZvciAoaSA9IDA7IGkgPCBub2RlLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAobm9kZVtpXS52YWx1ZSA9PT0gcHJvcFZhbHVlKSB7XG4gICAgICAgIG5vZGVbaV0uc2VsZWN0ZWQgPSAhMDtcbiAgICAgICAgc2V0RGVmYXVsdFNlbGVjdGVkICYmIChub2RlW2ldLmRlZmF1bHRTZWxlY3RlZCA9ICEwKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgbnVsbCAhPT0gbXVsdGlwbGUgfHwgbm9kZVtpXS5kaXNhYmxlZCB8fCAobXVsdGlwbGUgPSBub2RlW2ldKTtcbiAgICB9XG4gICAgbnVsbCAhPT0gbXVsdGlwbGUgJiYgKG11bHRpcGxlLnNlbGVjdGVkID0gITApO1xuICB9XG59XG5mdW5jdGlvbiB1cGRhdGVUZXh0YXJlYShlbGVtZW50LCB2YWx1ZSwgZGVmYXVsdFZhbHVlKSB7XG4gIGlmIChcbiAgICBudWxsICE9IHZhbHVlICYmXG4gICAgKCh2YWx1ZSA9IFwiXCIgKyBnZXRUb1N0cmluZ1ZhbHVlKHZhbHVlKSksXG4gICAgdmFsdWUgIT09IGVsZW1lbnQudmFsdWUgJiYgKGVsZW1lbnQudmFsdWUgPSB2YWx1ZSksXG4gICAgbnVsbCA9PSBkZWZhdWx0VmFsdWUpXG4gICkge1xuICAgIGVsZW1lbnQuZGVmYXVsdFZhbHVlICE9PSB2YWx1ZSAmJiAoZWxlbWVudC5kZWZhdWx0VmFsdWUgPSB2YWx1ZSk7XG4gICAgcmV0dXJuO1xuICB9XG4gIGVsZW1lbnQuZGVmYXVsdFZhbHVlID1cbiAgICBudWxsICE9IGRlZmF1bHRWYWx1ZSA/IFwiXCIgKyBnZXRUb1N0cmluZ1ZhbHVlKGRlZmF1bHRWYWx1ZSkgOiBcIlwiO1xufVxuZnVuY3Rpb24gaW5pdFRleHRhcmVhKGVsZW1lbnQsIHZhbHVlLCBkZWZhdWx0VmFsdWUsIGNoaWxkcmVuKSB7XG4gIGlmIChudWxsID09IHZhbHVlKSB7XG4gICAgaWYgKG51bGwgIT0gY2hpbGRyZW4pIHtcbiAgICAgIGlmIChudWxsICE9IGRlZmF1bHRWYWx1ZSkgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg5MikpO1xuICAgICAgaWYgKGlzQXJyYXlJbXBsKGNoaWxkcmVuKSkge1xuICAgICAgICBpZiAoMSA8IGNoaWxkcmVuLmxlbmd0aCkgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg5MykpO1xuICAgICAgICBjaGlsZHJlbiA9IGNoaWxkcmVuWzBdO1xuICAgICAgfVxuICAgICAgZGVmYXVsdFZhbHVlID0gY2hpbGRyZW47XG4gICAgfVxuICAgIG51bGwgPT0gZGVmYXVsdFZhbHVlICYmIChkZWZhdWx0VmFsdWUgPSBcIlwiKTtcbiAgICB2YWx1ZSA9IGRlZmF1bHRWYWx1ZTtcbiAgfVxuICBkZWZhdWx0VmFsdWUgPSBnZXRUb1N0cmluZ1ZhbHVlKHZhbHVlKTtcbiAgZWxlbWVudC5kZWZhdWx0VmFsdWUgPSBkZWZhdWx0VmFsdWU7XG4gIGNoaWxkcmVuID0gZWxlbWVudC50ZXh0Q29udGVudDtcbiAgY2hpbGRyZW4gPT09IGRlZmF1bHRWYWx1ZSAmJlxuICAgIFwiXCIgIT09IGNoaWxkcmVuICYmXG4gICAgbnVsbCAhPT0gY2hpbGRyZW4gJiZcbiAgICAoZWxlbWVudC52YWx1ZSA9IGNoaWxkcmVuKTtcbn1cbmZ1bmN0aW9uIHNldFRleHRDb250ZW50KG5vZGUsIHRleHQpIHtcbiAgaWYgKHRleHQpIHtcbiAgICB2YXIgZmlyc3RDaGlsZCA9IG5vZGUuZmlyc3RDaGlsZDtcbiAgICBpZiAoXG4gICAgICBmaXJzdENoaWxkICYmXG4gICAgICBmaXJzdENoaWxkID09PSBub2RlLmxhc3RDaGlsZCAmJlxuICAgICAgMyA9PT0gZmlyc3RDaGlsZC5ub2RlVHlwZVxuICAgICkge1xuICAgICAgZmlyc3RDaGlsZC5ub2RlVmFsdWUgPSB0ZXh0O1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuICBub2RlLnRleHRDb250ZW50ID0gdGV4dDtcbn1cbnZhciB1bml0bGVzc051bWJlcnMgPSBuZXcgU2V0KFxuICBcImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50IGFzcGVjdFJhdGlvIGJvcmRlckltYWdlT3V0c2V0IGJvcmRlckltYWdlU2xpY2UgYm9yZGVySW1hZ2VXaWR0aCBib3hGbGV4IGJveEZsZXhHcm91cCBib3hPcmRpbmFsR3JvdXAgY29sdW1uQ291bnQgY29sdW1ucyBmbGV4IGZsZXhHcm93IGZsZXhQb3NpdGl2ZSBmbGV4U2hyaW5rIGZsZXhOZWdhdGl2ZSBmbGV4T3JkZXIgZ3JpZEFyZWEgZ3JpZFJvdyBncmlkUm93RW5kIGdyaWRSb3dTcGFuIGdyaWRSb3dTdGFydCBncmlkQ29sdW1uIGdyaWRDb2x1bW5FbmQgZ3JpZENvbHVtblNwYW4gZ3JpZENvbHVtblN0YXJ0IGZvbnRXZWlnaHQgbGluZUNsYW1wIGxpbmVIZWlnaHQgb3BhY2l0eSBvcmRlciBvcnBoYW5zIHNjYWxlIHRhYlNpemUgd2lkb3dzIHpJbmRleCB6b29tIGZpbGxPcGFjaXR5IGZsb29kT3BhY2l0eSBzdG9wT3BhY2l0eSBzdHJva2VEYXNoYXJyYXkgc3Ryb2tlRGFzaG9mZnNldCBzdHJva2VNaXRlcmxpbWl0IHN0cm9rZU9wYWNpdHkgc3Ryb2tlV2lkdGggTW96QW5pbWF0aW9uSXRlcmF0aW9uQ291bnQgTW96Qm94RmxleCBNb3pCb3hGbGV4R3JvdXAgTW96TGluZUNsYW1wIG1zQW5pbWF0aW9uSXRlcmF0aW9uQ291bnQgbXNGbGV4IG1zWm9vbSBtc0ZsZXhHcm93IG1zRmxleE5lZ2F0aXZlIG1zRmxleE9yZGVyIG1zRmxleFBvc2l0aXZlIG1zRmxleFNocmluayBtc0dyaWRDb2x1bW4gbXNHcmlkQ29sdW1uU3BhbiBtc0dyaWRSb3cgbXNHcmlkUm93U3BhbiBXZWJraXRBbmltYXRpb25JdGVyYXRpb25Db3VudCBXZWJraXRCb3hGbGV4IFdlYktpdEJveEZsZXhHcm91cCBXZWJraXRCb3hPcmRpbmFsR3JvdXAgV2Via2l0Q29sdW1uQ291bnQgV2Via2l0Q29sdW1ucyBXZWJraXRGbGV4IFdlYmtpdEZsZXhHcm93IFdlYmtpdEZsZXhQb3NpdGl2ZSBXZWJraXRGbGV4U2hyaW5rIFdlYmtpdExpbmVDbGFtcFwiLnNwbGl0KFxuICAgIFwiIFwiXG4gIClcbik7XG5mdW5jdGlvbiBzZXRWYWx1ZUZvclN0eWxlKHN0eWxlLCBzdHlsZU5hbWUsIHZhbHVlKSB7XG4gIHZhciBpc0N1c3RvbVByb3BlcnR5ID0gMCA9PT0gc3R5bGVOYW1lLmluZGV4T2YoXCItLVwiKTtcbiAgbnVsbCA9PSB2YWx1ZSB8fCBcImJvb2xlYW5cIiA9PT0gdHlwZW9mIHZhbHVlIHx8IFwiXCIgPT09IHZhbHVlXG4gICAgPyBpc0N1c3RvbVByb3BlcnR5XG4gICAgICA/IHN0eWxlLnNldFByb3BlcnR5KHN0eWxlTmFtZSwgXCJcIilcbiAgICAgIDogXCJmbG9hdFwiID09PSBzdHlsZU5hbWVcbiAgICAgICAgPyAoc3R5bGUuY3NzRmxvYXQgPSBcIlwiKVxuICAgICAgICA6IChzdHlsZVtzdHlsZU5hbWVdID0gXCJcIilcbiAgICA6IGlzQ3VzdG9tUHJvcGVydHlcbiAgICAgID8gc3R5bGUuc2V0UHJvcGVydHkoc3R5bGVOYW1lLCB2YWx1ZSlcbiAgICAgIDogXCJudW1iZXJcIiAhPT0gdHlwZW9mIHZhbHVlIHx8XG4gICAgICAgICAgMCA9PT0gdmFsdWUgfHxcbiAgICAgICAgICB1bml0bGVzc051bWJlcnMuaGFzKHN0eWxlTmFtZSlcbiAgICAgICAgPyBcImZsb2F0XCIgPT09IHN0eWxlTmFtZVxuICAgICAgICAgID8gKHN0eWxlLmNzc0Zsb2F0ID0gdmFsdWUpXG4gICAgICAgICAgOiAoc3R5bGVbc3R5bGVOYW1lXSA9IChcIlwiICsgdmFsdWUpLnRyaW0oKSlcbiAgICAgICAgOiAoc3R5bGVbc3R5bGVOYW1lXSA9IHZhbHVlICsgXCJweFwiKTtcbn1cbmZ1bmN0aW9uIHNldFZhbHVlRm9yU3R5bGVzKG5vZGUsIHN0eWxlcywgcHJldlN0eWxlcykge1xuICBpZiAobnVsbCAhPSBzdHlsZXMgJiYgXCJvYmplY3RcIiAhPT0gdHlwZW9mIHN0eWxlcylcbiAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDYyKSk7XG4gIG5vZGUgPSBub2RlLnN0eWxlO1xuICBpZiAobnVsbCAhPSBwcmV2U3R5bGVzKSB7XG4gICAgZm9yICh2YXIgc3R5bGVOYW1lIGluIHByZXZTdHlsZXMpXG4gICAgICAhcHJldlN0eWxlcy5oYXNPd25Qcm9wZXJ0eShzdHlsZU5hbWUpIHx8XG4gICAgICAgIChudWxsICE9IHN0eWxlcyAmJiBzdHlsZXMuaGFzT3duUHJvcGVydHkoc3R5bGVOYW1lKSkgfHxcbiAgICAgICAgKDAgPT09IHN0eWxlTmFtZS5pbmRleE9mKFwiLS1cIilcbiAgICAgICAgICA/IG5vZGUuc2V0UHJvcGVydHkoc3R5bGVOYW1lLCBcIlwiKVxuICAgICAgICAgIDogXCJmbG9hdFwiID09PSBzdHlsZU5hbWVcbiAgICAgICAgICAgID8gKG5vZGUuY3NzRmxvYXQgPSBcIlwiKVxuICAgICAgICAgICAgOiAobm9kZVtzdHlsZU5hbWVdID0gXCJcIikpO1xuICAgIGZvciAodmFyIHN0eWxlTmFtZSQxNiBpbiBzdHlsZXMpXG4gICAgICAoc3R5bGVOYW1lID0gc3R5bGVzW3N0eWxlTmFtZSQxNl0pLFxuICAgICAgICBzdHlsZXMuaGFzT3duUHJvcGVydHkoc3R5bGVOYW1lJDE2KSAmJlxuICAgICAgICAgIHByZXZTdHlsZXNbc3R5bGVOYW1lJDE2XSAhPT0gc3R5bGVOYW1lICYmXG4gICAgICAgICAgc2V0VmFsdWVGb3JTdHlsZShub2RlLCBzdHlsZU5hbWUkMTYsIHN0eWxlTmFtZSk7XG4gIH0gZWxzZVxuICAgIGZvciAodmFyIHN0eWxlTmFtZSQxNyBpbiBzdHlsZXMpXG4gICAgICBzdHlsZXMuaGFzT3duUHJvcGVydHkoc3R5bGVOYW1lJDE3KSAmJlxuICAgICAgICBzZXRWYWx1ZUZvclN0eWxlKG5vZGUsIHN0eWxlTmFtZSQxNywgc3R5bGVzW3N0eWxlTmFtZSQxN10pO1xufVxuZnVuY3Rpb24gaXNDdXN0b21FbGVtZW50KHRhZ05hbWUpIHtcbiAgaWYgKC0xID09PSB0YWdOYW1lLmluZGV4T2YoXCItXCIpKSByZXR1cm4gITE7XG4gIHN3aXRjaCAodGFnTmFtZSkge1xuICAgIGNhc2UgXCJhbm5vdGF0aW9uLXhtbFwiOlxuICAgIGNhc2UgXCJjb2xvci1wcm9maWxlXCI6XG4gICAgY2FzZSBcImZvbnQtZmFjZVwiOlxuICAgIGNhc2UgXCJmb250LWZhY2Utc3JjXCI6XG4gICAgY2FzZSBcImZvbnQtZmFjZS11cmlcIjpcbiAgICBjYXNlIFwiZm9udC1mYWNlLWZvcm1hdFwiOlxuICAgIGNhc2UgXCJmb250LWZhY2UtbmFtZVwiOlxuICAgIGNhc2UgXCJtaXNzaW5nLWdseXBoXCI6XG4gICAgICByZXR1cm4gITE7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiAhMDtcbiAgfVxufVxudmFyIGFsaWFzZXMgPSBuZXcgTWFwKFtcbiAgICBbXCJhY2NlcHRDaGFyc2V0XCIsIFwiYWNjZXB0LWNoYXJzZXRcIl0sXG4gICAgW1wiaHRtbEZvclwiLCBcImZvclwiXSxcbiAgICBbXCJodHRwRXF1aXZcIiwgXCJodHRwLWVxdWl2XCJdLFxuICAgIFtcImNyb3NzT3JpZ2luXCIsIFwiY3Jvc3NvcmlnaW5cIl0sXG4gICAgW1wiYWNjZW50SGVpZ2h0XCIsIFwiYWNjZW50LWhlaWdodFwiXSxcbiAgICBbXCJhbGlnbm1lbnRCYXNlbGluZVwiLCBcImFsaWdubWVudC1iYXNlbGluZVwiXSxcbiAgICBbXCJhcmFiaWNGb3JtXCIsIFwiYXJhYmljLWZvcm1cIl0sXG4gICAgW1wiYmFzZWxpbmVTaGlmdFwiLCBcImJhc2VsaW5lLXNoaWZ0XCJdLFxuICAgIFtcImNhcEhlaWdodFwiLCBcImNhcC1oZWlnaHRcIl0sXG4gICAgW1wiY2xpcFBhdGhcIiwgXCJjbGlwLXBhdGhcIl0sXG4gICAgW1wiY2xpcFJ1bGVcIiwgXCJjbGlwLXJ1bGVcIl0sXG4gICAgW1wiY29sb3JJbnRlcnBvbGF0aW9uXCIsIFwiY29sb3ItaW50ZXJwb2xhdGlvblwiXSxcbiAgICBbXCJjb2xvckludGVycG9sYXRpb25GaWx0ZXJzXCIsIFwiY29sb3ItaW50ZXJwb2xhdGlvbi1maWx0ZXJzXCJdLFxuICAgIFtcImNvbG9yUHJvZmlsZVwiLCBcImNvbG9yLXByb2ZpbGVcIl0sXG4gICAgW1wiY29sb3JSZW5kZXJpbmdcIiwgXCJjb2xvci1yZW5kZXJpbmdcIl0sXG4gICAgW1wiZG9taW5hbnRCYXNlbGluZVwiLCBcImRvbWluYW50LWJhc2VsaW5lXCJdLFxuICAgIFtcImVuYWJsZUJhY2tncm91bmRcIiwgXCJlbmFibGUtYmFja2dyb3VuZFwiXSxcbiAgICBbXCJmaWxsT3BhY2l0eVwiLCBcImZpbGwtb3BhY2l0eVwiXSxcbiAgICBbXCJmaWxsUnVsZVwiLCBcImZpbGwtcnVsZVwiXSxcbiAgICBbXCJmbG9vZENvbG9yXCIsIFwiZmxvb2QtY29sb3JcIl0sXG4gICAgW1wiZmxvb2RPcGFjaXR5XCIsIFwiZmxvb2Qtb3BhY2l0eVwiXSxcbiAgICBbXCJmb250RmFtaWx5XCIsIFwiZm9udC1mYW1pbHlcIl0sXG4gICAgW1wiZm9udFNpemVcIiwgXCJmb250LXNpemVcIl0sXG4gICAgW1wiZm9udFNpemVBZGp1c3RcIiwgXCJmb250LXNpemUtYWRqdXN0XCJdLFxuICAgIFtcImZvbnRTdHJldGNoXCIsIFwiZm9udC1zdHJldGNoXCJdLFxuICAgIFtcImZvbnRTdHlsZVwiLCBcImZvbnQtc3R5bGVcIl0sXG4gICAgW1wiZm9udFZhcmlhbnRcIiwgXCJmb250LXZhcmlhbnRcIl0sXG4gICAgW1wiZm9udFdlaWdodFwiLCBcImZvbnQtd2VpZ2h0XCJdLFxuICAgIFtcImdseXBoTmFtZVwiLCBcImdseXBoLW5hbWVcIl0sXG4gICAgW1wiZ2x5cGhPcmllbnRhdGlvbkhvcml6b250YWxcIiwgXCJnbHlwaC1vcmllbnRhdGlvbi1ob3Jpem9udGFsXCJdLFxuICAgIFtcImdseXBoT3JpZW50YXRpb25WZXJ0aWNhbFwiLCBcImdseXBoLW9yaWVudGF0aW9uLXZlcnRpY2FsXCJdLFxuICAgIFtcImhvcml6QWR2WFwiLCBcImhvcml6LWFkdi14XCJdLFxuICAgIFtcImhvcml6T3JpZ2luWFwiLCBcImhvcml6LW9yaWdpbi14XCJdLFxuICAgIFtcImltYWdlUmVuZGVyaW5nXCIsIFwiaW1hZ2UtcmVuZGVyaW5nXCJdLFxuICAgIFtcImxldHRlclNwYWNpbmdcIiwgXCJsZXR0ZXItc3BhY2luZ1wiXSxcbiAgICBbXCJsaWdodGluZ0NvbG9yXCIsIFwibGlnaHRpbmctY29sb3JcIl0sXG4gICAgW1wibWFya2VyRW5kXCIsIFwibWFya2VyLWVuZFwiXSxcbiAgICBbXCJtYXJrZXJNaWRcIiwgXCJtYXJrZXItbWlkXCJdLFxuICAgIFtcIm1hcmtlclN0YXJ0XCIsIFwibWFya2VyLXN0YXJ0XCJdLFxuICAgIFtcIm92ZXJsaW5lUG9zaXRpb25cIiwgXCJvdmVybGluZS1wb3NpdGlvblwiXSxcbiAgICBbXCJvdmVybGluZVRoaWNrbmVzc1wiLCBcIm92ZXJsaW5lLXRoaWNrbmVzc1wiXSxcbiAgICBbXCJwYWludE9yZGVyXCIsIFwicGFpbnQtb3JkZXJcIl0sXG4gICAgW1wicGFub3NlLTFcIiwgXCJwYW5vc2UtMVwiXSxcbiAgICBbXCJwb2ludGVyRXZlbnRzXCIsIFwicG9pbnRlci1ldmVudHNcIl0sXG4gICAgW1wicmVuZGVyaW5nSW50ZW50XCIsIFwicmVuZGVyaW5nLWludGVudFwiXSxcbiAgICBbXCJzaGFwZVJlbmRlcmluZ1wiLCBcInNoYXBlLXJlbmRlcmluZ1wiXSxcbiAgICBbXCJzdG9wQ29sb3JcIiwgXCJzdG9wLWNvbG9yXCJdLFxuICAgIFtcInN0b3BPcGFjaXR5XCIsIFwic3RvcC1vcGFjaXR5XCJdLFxuICAgIFtcInN0cmlrZXRocm91Z2hQb3NpdGlvblwiLCBcInN0cmlrZXRocm91Z2gtcG9zaXRpb25cIl0sXG4gICAgW1wic3RyaWtldGhyb3VnaFRoaWNrbmVzc1wiLCBcInN0cmlrZXRocm91Z2gtdGhpY2tuZXNzXCJdLFxuICAgIFtcInN0cm9rZURhc2hhcnJheVwiLCBcInN0cm9rZS1kYXNoYXJyYXlcIl0sXG4gICAgW1wic3Ryb2tlRGFzaG9mZnNldFwiLCBcInN0cm9rZS1kYXNob2Zmc2V0XCJdLFxuICAgIFtcInN0cm9rZUxpbmVjYXBcIiwgXCJzdHJva2UtbGluZWNhcFwiXSxcbiAgICBbXCJzdHJva2VMaW5lam9pblwiLCBcInN0cm9rZS1saW5lam9pblwiXSxcbiAgICBbXCJzdHJva2VNaXRlcmxpbWl0XCIsIFwic3Ryb2tlLW1pdGVybGltaXRcIl0sXG4gICAgW1wic3Ryb2tlT3BhY2l0eVwiLCBcInN0cm9rZS1vcGFjaXR5XCJdLFxuICAgIFtcInN0cm9rZVdpZHRoXCIsIFwic3Ryb2tlLXdpZHRoXCJdLFxuICAgIFtcInRleHRBbmNob3JcIiwgXCJ0ZXh0LWFuY2hvclwiXSxcbiAgICBbXCJ0ZXh0RGVjb3JhdGlvblwiLCBcInRleHQtZGVjb3JhdGlvblwiXSxcbiAgICBbXCJ0ZXh0UmVuZGVyaW5nXCIsIFwidGV4dC1yZW5kZXJpbmdcIl0sXG4gICAgW1widHJhbnNmb3JtT3JpZ2luXCIsIFwidHJhbnNmb3JtLW9yaWdpblwiXSxcbiAgICBbXCJ1bmRlcmxpbmVQb3NpdGlvblwiLCBcInVuZGVybGluZS1wb3NpdGlvblwiXSxcbiAgICBbXCJ1bmRlcmxpbmVUaGlja25lc3NcIiwgXCJ1bmRlcmxpbmUtdGhpY2tuZXNzXCJdLFxuICAgIFtcInVuaWNvZGVCaWRpXCIsIFwidW5pY29kZS1iaWRpXCJdLFxuICAgIFtcInVuaWNvZGVSYW5nZVwiLCBcInVuaWNvZGUtcmFuZ2VcIl0sXG4gICAgW1widW5pdHNQZXJFbVwiLCBcInVuaXRzLXBlci1lbVwiXSxcbiAgICBbXCJ2QWxwaGFiZXRpY1wiLCBcInYtYWxwaGFiZXRpY1wiXSxcbiAgICBbXCJ2SGFuZ2luZ1wiLCBcInYtaGFuZ2luZ1wiXSxcbiAgICBbXCJ2SWRlb2dyYXBoaWNcIiwgXCJ2LWlkZW9ncmFwaGljXCJdLFxuICAgIFtcInZNYXRoZW1hdGljYWxcIiwgXCJ2LW1hdGhlbWF0aWNhbFwiXSxcbiAgICBbXCJ2ZWN0b3JFZmZlY3RcIiwgXCJ2ZWN0b3ItZWZmZWN0XCJdLFxuICAgIFtcInZlcnRBZHZZXCIsIFwidmVydC1hZHYteVwiXSxcbiAgICBbXCJ2ZXJ0T3JpZ2luWFwiLCBcInZlcnQtb3JpZ2luLXhcIl0sXG4gICAgW1widmVydE9yaWdpbllcIiwgXCJ2ZXJ0LW9yaWdpbi15XCJdLFxuICAgIFtcIndvcmRTcGFjaW5nXCIsIFwid29yZC1zcGFjaW5nXCJdLFxuICAgIFtcIndyaXRpbmdNb2RlXCIsIFwid3JpdGluZy1tb2RlXCJdLFxuICAgIFtcInhtbG5zWGxpbmtcIiwgXCJ4bWxuczp4bGlua1wiXSxcbiAgICBbXCJ4SGVpZ2h0XCIsIFwieC1oZWlnaHRcIl1cbiAgXSksXG4gIGlzSmF2YVNjcmlwdFByb3RvY29sID1cbiAgICAvXltcXHUwMDAwLVxcdTAwMUYgXSpqW1xcclxcblxcdF0qYVtcXHJcXG5cXHRdKnZbXFxyXFxuXFx0XSphW1xcclxcblxcdF0qc1tcXHJcXG5cXHRdKmNbXFxyXFxuXFx0XSpyW1xcclxcblxcdF0qaVtcXHJcXG5cXHRdKnBbXFxyXFxuXFx0XSp0W1xcclxcblxcdF0qOi9pO1xuZnVuY3Rpb24gc2FuaXRpemVVUkwodXJsKSB7XG4gIHJldHVybiBpc0phdmFTY3JpcHRQcm90b2NvbC50ZXN0KFwiXCIgKyB1cmwpXG4gICAgPyBcImphdmFzY3JpcHQ6dGhyb3cgbmV3IEVycm9yKCdSZWFjdCBoYXMgYmxvY2tlZCBhIGphdmFzY3JpcHQ6IFVSTCBhcyBhIHNlY3VyaXR5IHByZWNhdXRpb24uJylcIlxuICAgIDogdXJsO1xufVxudmFyIGN1cnJlbnRSZXBsYXlpbmdFdmVudCA9IG51bGw7XG5mdW5jdGlvbiBnZXRFdmVudFRhcmdldChuYXRpdmVFdmVudCkge1xuICBuYXRpdmVFdmVudCA9IG5hdGl2ZUV2ZW50LnRhcmdldCB8fCBuYXRpdmVFdmVudC5zcmNFbGVtZW50IHx8IHdpbmRvdztcbiAgbmF0aXZlRXZlbnQuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQgJiZcbiAgICAobmF0aXZlRXZlbnQgPSBuYXRpdmVFdmVudC5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCk7XG4gIHJldHVybiAzID09PSBuYXRpdmVFdmVudC5ub2RlVHlwZSA/IG5hdGl2ZUV2ZW50LnBhcmVudE5vZGUgOiBuYXRpdmVFdmVudDtcbn1cbnZhciByZXN0b3JlVGFyZ2V0ID0gbnVsbCxcbiAgcmVzdG9yZVF1ZXVlID0gbnVsbDtcbmZ1bmN0aW9uIHJlc3RvcmVTdGF0ZU9mVGFyZ2V0KHRhcmdldCkge1xuICB2YXIgaW50ZXJuYWxJbnN0YW5jZSA9IGdldEluc3RhbmNlRnJvbU5vZGUodGFyZ2V0KTtcbiAgaWYgKGludGVybmFsSW5zdGFuY2UgJiYgKHRhcmdldCA9IGludGVybmFsSW5zdGFuY2Uuc3RhdGVOb2RlKSkge1xuICAgIHZhciBwcm9wcyA9IHRhcmdldFtpbnRlcm5hbFByb3BzS2V5XSB8fCBudWxsO1xuICAgIGE6IHN3aXRjaCAoKCh0YXJnZXQgPSBpbnRlcm5hbEluc3RhbmNlLnN0YXRlTm9kZSksIGludGVybmFsSW5zdGFuY2UudHlwZSkpIHtcbiAgICAgIGNhc2UgXCJpbnB1dFwiOlxuICAgICAgICB1cGRhdGVJbnB1dChcbiAgICAgICAgICB0YXJnZXQsXG4gICAgICAgICAgcHJvcHMudmFsdWUsXG4gICAgICAgICAgcHJvcHMuZGVmYXVsdFZhbHVlLFxuICAgICAgICAgIHByb3BzLmRlZmF1bHRWYWx1ZSxcbiAgICAgICAgICBwcm9wcy5jaGVja2VkLFxuICAgICAgICAgIHByb3BzLmRlZmF1bHRDaGVja2VkLFxuICAgICAgICAgIHByb3BzLnR5cGUsXG4gICAgICAgICAgcHJvcHMubmFtZVxuICAgICAgICApO1xuICAgICAgICBpbnRlcm5hbEluc3RhbmNlID0gcHJvcHMubmFtZTtcbiAgICAgICAgaWYgKFwicmFkaW9cIiA9PT0gcHJvcHMudHlwZSAmJiBudWxsICE9IGludGVybmFsSW5zdGFuY2UpIHtcbiAgICAgICAgICBmb3IgKHByb3BzID0gdGFyZ2V0OyBwcm9wcy5wYXJlbnROb2RlOyApIHByb3BzID0gcHJvcHMucGFyZW50Tm9kZTtcbiAgICAgICAgICBwcm9wcyA9IHByb3BzLnF1ZXJ5U2VsZWN0b3JBbGwoXG4gICAgICAgICAgICAnaW5wdXRbbmFtZT1cIicgK1xuICAgICAgICAgICAgICBlc2NhcGVTZWxlY3RvckF0dHJpYnV0ZVZhbHVlSW5zaWRlRG91YmxlUXVvdGVzKFxuICAgICAgICAgICAgICAgIFwiXCIgKyBpbnRlcm5hbEluc3RhbmNlXG4gICAgICAgICAgICAgICkgK1xuICAgICAgICAgICAgICAnXCJdW3R5cGU9XCJyYWRpb1wiXSdcbiAgICAgICAgICApO1xuICAgICAgICAgIGZvciAoXG4gICAgICAgICAgICBpbnRlcm5hbEluc3RhbmNlID0gMDtcbiAgICAgICAgICAgIGludGVybmFsSW5zdGFuY2UgPCBwcm9wcy5sZW5ndGg7XG4gICAgICAgICAgICBpbnRlcm5hbEluc3RhbmNlKytcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIHZhciBvdGhlck5vZGUgPSBwcm9wc1tpbnRlcm5hbEluc3RhbmNlXTtcbiAgICAgICAgICAgIGlmIChvdGhlck5vZGUgIT09IHRhcmdldCAmJiBvdGhlck5vZGUuZm9ybSA9PT0gdGFyZ2V0LmZvcm0pIHtcbiAgICAgICAgICAgICAgdmFyIG90aGVyUHJvcHMgPSBvdGhlck5vZGVbaW50ZXJuYWxQcm9wc0tleV0gfHwgbnVsbDtcbiAgICAgICAgICAgICAgaWYgKCFvdGhlclByb3BzKSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDkwKSk7XG4gICAgICAgICAgICAgIHVwZGF0ZUlucHV0KFxuICAgICAgICAgICAgICAgIG90aGVyTm9kZSxcbiAgICAgICAgICAgICAgICBvdGhlclByb3BzLnZhbHVlLFxuICAgICAgICAgICAgICAgIG90aGVyUHJvcHMuZGVmYXVsdFZhbHVlLFxuICAgICAgICAgICAgICAgIG90aGVyUHJvcHMuZGVmYXVsdFZhbHVlLFxuICAgICAgICAgICAgICAgIG90aGVyUHJvcHMuY2hlY2tlZCxcbiAgICAgICAgICAgICAgICBvdGhlclByb3BzLmRlZmF1bHRDaGVja2VkLFxuICAgICAgICAgICAgICAgIG90aGVyUHJvcHMudHlwZSxcbiAgICAgICAgICAgICAgICBvdGhlclByb3BzLm5hbWVcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgZm9yIChcbiAgICAgICAgICAgIGludGVybmFsSW5zdGFuY2UgPSAwO1xuICAgICAgICAgICAgaW50ZXJuYWxJbnN0YW5jZSA8IHByb3BzLmxlbmd0aDtcbiAgICAgICAgICAgIGludGVybmFsSW5zdGFuY2UrK1xuICAgICAgICAgIClcbiAgICAgICAgICAgIChvdGhlck5vZGUgPSBwcm9wc1tpbnRlcm5hbEluc3RhbmNlXSksXG4gICAgICAgICAgICAgIG90aGVyTm9kZS5mb3JtID09PSB0YXJnZXQuZm9ybSAmJiB1cGRhdGVWYWx1ZUlmQ2hhbmdlZChvdGhlck5vZGUpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrIGE7XG4gICAgICBjYXNlIFwidGV4dGFyZWFcIjpcbiAgICAgICAgdXBkYXRlVGV4dGFyZWEodGFyZ2V0LCBwcm9wcy52YWx1ZSwgcHJvcHMuZGVmYXVsdFZhbHVlKTtcbiAgICAgICAgYnJlYWsgYTtcbiAgICAgIGNhc2UgXCJzZWxlY3RcIjpcbiAgICAgICAgKGludGVybmFsSW5zdGFuY2UgPSBwcm9wcy52YWx1ZSksXG4gICAgICAgICAgbnVsbCAhPSBpbnRlcm5hbEluc3RhbmNlICYmXG4gICAgICAgICAgICB1cGRhdGVPcHRpb25zKHRhcmdldCwgISFwcm9wcy5tdWx0aXBsZSwgaW50ZXJuYWxJbnN0YW5jZSwgITEpO1xuICAgIH1cbiAgfVxufVxudmFyIGlzSW5zaWRlRXZlbnRIYW5kbGVyID0gITE7XG5mdW5jdGlvbiBiYXRjaGVkVXBkYXRlcyQxKGZuLCBhLCBiKSB7XG4gIGlmIChpc0luc2lkZUV2ZW50SGFuZGxlcikgcmV0dXJuIGZuKGEsIGIpO1xuICBpc0luc2lkZUV2ZW50SGFuZGxlciA9ICEwO1xuICB0cnkge1xuICAgIHZhciBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgPSBmbihhKTtcbiAgICByZXR1cm4gSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0O1xuICB9IGZpbmFsbHkge1xuICAgIGlmIChcbiAgICAgICgoaXNJbnNpZGVFdmVudEhhbmRsZXIgPSAhMSksXG4gICAgICBudWxsICE9PSByZXN0b3JlVGFyZ2V0IHx8IG51bGwgIT09IHJlc3RvcmVRdWV1ZSlcbiAgICApXG4gICAgICBpZiAoXG4gICAgICAgIChmbHVzaFN5bmNXb3JrJDEoKSxcbiAgICAgICAgcmVzdG9yZVRhcmdldCAmJlxuICAgICAgICAgICgoYSA9IHJlc3RvcmVUYXJnZXQpLFxuICAgICAgICAgIChmbiA9IHJlc3RvcmVRdWV1ZSksXG4gICAgICAgICAgKHJlc3RvcmVRdWV1ZSA9IHJlc3RvcmVUYXJnZXQgPSBudWxsKSxcbiAgICAgICAgICByZXN0b3JlU3RhdGVPZlRhcmdldChhKSxcbiAgICAgICAgICBmbikpXG4gICAgICApXG4gICAgICAgIGZvciAoYSA9IDA7IGEgPCBmbi5sZW5ndGg7IGErKykgcmVzdG9yZVN0YXRlT2ZUYXJnZXQoZm5bYV0pO1xuICB9XG59XG5mdW5jdGlvbiBnZXRMaXN0ZW5lcihpbnN0LCByZWdpc3RyYXRpb25OYW1lKSB7XG4gIHZhciBzdGF0ZU5vZGUgPSBpbnN0LnN0YXRlTm9kZTtcbiAgaWYgKG51bGwgPT09IHN0YXRlTm9kZSkgcmV0dXJuIG51bGw7XG4gIHZhciBwcm9wcyA9IHN0YXRlTm9kZVtpbnRlcm5hbFByb3BzS2V5XSB8fCBudWxsO1xuICBpZiAobnVsbCA9PT0gcHJvcHMpIHJldHVybiBudWxsO1xuICBzdGF0ZU5vZGUgPSBwcm9wc1tyZWdpc3RyYXRpb25OYW1lXTtcbiAgYTogc3dpdGNoIChyZWdpc3RyYXRpb25OYW1lKSB7XG4gICAgY2FzZSBcIm9uQ2xpY2tcIjpcbiAgICBjYXNlIFwib25DbGlja0NhcHR1cmVcIjpcbiAgICBjYXNlIFwib25Eb3VibGVDbGlja1wiOlxuICAgIGNhc2UgXCJvbkRvdWJsZUNsaWNrQ2FwdHVyZVwiOlxuICAgIGNhc2UgXCJvbk1vdXNlRG93blwiOlxuICAgIGNhc2UgXCJvbk1vdXNlRG93bkNhcHR1cmVcIjpcbiAgICBjYXNlIFwib25Nb3VzZU1vdmVcIjpcbiAgICBjYXNlIFwib25Nb3VzZU1vdmVDYXB0dXJlXCI6XG4gICAgY2FzZSBcIm9uTW91c2VVcFwiOlxuICAgIGNhc2UgXCJvbk1vdXNlVXBDYXB0dXJlXCI6XG4gICAgY2FzZSBcIm9uTW91c2VFbnRlclwiOlxuICAgICAgKHByb3BzID0gIXByb3BzLmRpc2FibGVkKSB8fFxuICAgICAgICAoKGluc3QgPSBpbnN0LnR5cGUpLFxuICAgICAgICAocHJvcHMgPSAhKFxuICAgICAgICAgIFwiYnV0dG9uXCIgPT09IGluc3QgfHxcbiAgICAgICAgICBcImlucHV0XCIgPT09IGluc3QgfHxcbiAgICAgICAgICBcInNlbGVjdFwiID09PSBpbnN0IHx8XG4gICAgICAgICAgXCJ0ZXh0YXJlYVwiID09PSBpbnN0XG4gICAgICAgICkpKTtcbiAgICAgIGluc3QgPSAhcHJvcHM7XG4gICAgICBicmVhayBhO1xuICAgIGRlZmF1bHQ6XG4gICAgICBpbnN0ID0gITE7XG4gIH1cbiAgaWYgKGluc3QpIHJldHVybiBudWxsO1xuICBpZiAoc3RhdGVOb2RlICYmIFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIHN0YXRlTm9kZSlcbiAgICB0aHJvdyBFcnJvcihcbiAgICAgIGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMjMxLCByZWdpc3RyYXRpb25OYW1lLCB0eXBlb2Ygc3RhdGVOb2RlKVxuICAgICk7XG4gIHJldHVybiBzdGF0ZU5vZGU7XG59XG52YXIgcGFzc2l2ZUJyb3dzZXJFdmVudHNTdXBwb3J0ZWQgPSAhMTtcbmlmIChjYW5Vc2VET00pXG4gIHRyeSB7XG4gICAgdmFyIG9wdGlvbnMgPSB7fTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob3B0aW9ucywgXCJwYXNzaXZlXCIsIHtcbiAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICBwYXNzaXZlQnJvd3NlckV2ZW50c1N1cHBvcnRlZCA9ICEwO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwidGVzdFwiLCBvcHRpb25zLCBvcHRpb25zKTtcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRlc3RcIiwgb3B0aW9ucywgb3B0aW9ucyk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBwYXNzaXZlQnJvd3NlckV2ZW50c1N1cHBvcnRlZCA9ICExO1xuICB9XG52YXIgcm9vdCA9IG51bGwsXG4gIHN0YXJ0VGV4dCA9IG51bGwsXG4gIGZhbGxiYWNrVGV4dCA9IG51bGw7XG5mdW5jdGlvbiBnZXREYXRhKCkge1xuICBpZiAoZmFsbGJhY2tUZXh0KSByZXR1cm4gZmFsbGJhY2tUZXh0O1xuICB2YXIgc3RhcnQsXG4gICAgc3RhcnRWYWx1ZSA9IHN0YXJ0VGV4dCxcbiAgICBzdGFydExlbmd0aCA9IHN0YXJ0VmFsdWUubGVuZ3RoLFxuICAgIGVuZCxcbiAgICBlbmRWYWx1ZSA9IFwidmFsdWVcIiBpbiByb290ID8gcm9vdC52YWx1ZSA6IHJvb3QudGV4dENvbnRlbnQsXG4gICAgZW5kTGVuZ3RoID0gZW5kVmFsdWUubGVuZ3RoO1xuICBmb3IgKFxuICAgIHN0YXJ0ID0gMDtcbiAgICBzdGFydCA8IHN0YXJ0TGVuZ3RoICYmIHN0YXJ0VmFsdWVbc3RhcnRdID09PSBlbmRWYWx1ZVtzdGFydF07XG4gICAgc3RhcnQrK1xuICApO1xuICB2YXIgbWluRW5kID0gc3RhcnRMZW5ndGggLSBzdGFydDtcbiAgZm9yIChcbiAgICBlbmQgPSAxO1xuICAgIGVuZCA8PSBtaW5FbmQgJiZcbiAgICBzdGFydFZhbHVlW3N0YXJ0TGVuZ3RoIC0gZW5kXSA9PT0gZW5kVmFsdWVbZW5kTGVuZ3RoIC0gZW5kXTtcbiAgICBlbmQrK1xuICApO1xuICByZXR1cm4gKGZhbGxiYWNrVGV4dCA9IGVuZFZhbHVlLnNsaWNlKHN0YXJ0LCAxIDwgZW5kID8gMSAtIGVuZCA6IHZvaWQgMCkpO1xufVxuZnVuY3Rpb24gZ2V0RXZlbnRDaGFyQ29kZShuYXRpdmVFdmVudCkge1xuICB2YXIga2V5Q29kZSA9IG5hdGl2ZUV2ZW50LmtleUNvZGU7XG4gIFwiY2hhckNvZGVcIiBpbiBuYXRpdmVFdmVudFxuICAgID8gKChuYXRpdmVFdmVudCA9IG5hdGl2ZUV2ZW50LmNoYXJDb2RlKSxcbiAgICAgIDAgPT09IG5hdGl2ZUV2ZW50ICYmIDEzID09PSBrZXlDb2RlICYmIChuYXRpdmVFdmVudCA9IDEzKSlcbiAgICA6IChuYXRpdmVFdmVudCA9IGtleUNvZGUpO1xuICAxMCA9PT0gbmF0aXZlRXZlbnQgJiYgKG5hdGl2ZUV2ZW50ID0gMTMpO1xuICByZXR1cm4gMzIgPD0gbmF0aXZlRXZlbnQgfHwgMTMgPT09IG5hdGl2ZUV2ZW50ID8gbmF0aXZlRXZlbnQgOiAwO1xufVxuZnVuY3Rpb24gZnVuY3Rpb25UaGF0UmV0dXJuc1RydWUoKSB7XG4gIHJldHVybiAhMDtcbn1cbmZ1bmN0aW9uIGZ1bmN0aW9uVGhhdFJldHVybnNGYWxzZSgpIHtcbiAgcmV0dXJuICExO1xufVxuZnVuY3Rpb24gY3JlYXRlU3ludGhldGljRXZlbnQoSW50ZXJmYWNlKSB7XG4gIGZ1bmN0aW9uIFN5bnRoZXRpY0Jhc2VFdmVudChcbiAgICByZWFjdE5hbWUsXG4gICAgcmVhY3RFdmVudFR5cGUsXG4gICAgdGFyZ2V0SW5zdCxcbiAgICBuYXRpdmVFdmVudCxcbiAgICBuYXRpdmVFdmVudFRhcmdldFxuICApIHtcbiAgICB0aGlzLl9yZWFjdE5hbWUgPSByZWFjdE5hbWU7XG4gICAgdGhpcy5fdGFyZ2V0SW5zdCA9IHRhcmdldEluc3Q7XG4gICAgdGhpcy50eXBlID0gcmVhY3RFdmVudFR5cGU7XG4gICAgdGhpcy5uYXRpdmVFdmVudCA9IG5hdGl2ZUV2ZW50O1xuICAgIHRoaXMudGFyZ2V0ID0gbmF0aXZlRXZlbnRUYXJnZXQ7XG4gICAgdGhpcy5jdXJyZW50VGFyZ2V0ID0gbnVsbDtcbiAgICBmb3IgKHZhciBwcm9wTmFtZSBpbiBJbnRlcmZhY2UpXG4gICAgICBJbnRlcmZhY2UuaGFzT3duUHJvcGVydHkocHJvcE5hbWUpICYmXG4gICAgICAgICgocmVhY3ROYW1lID0gSW50ZXJmYWNlW3Byb3BOYW1lXSksXG4gICAgICAgICh0aGlzW3Byb3BOYW1lXSA9IHJlYWN0TmFtZVxuICAgICAgICAgID8gcmVhY3ROYW1lKG5hdGl2ZUV2ZW50KVxuICAgICAgICAgIDogbmF0aXZlRXZlbnRbcHJvcE5hbWVdKSk7XG4gICAgdGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSAoXG4gICAgICBudWxsICE9IG5hdGl2ZUV2ZW50LmRlZmF1bHRQcmV2ZW50ZWRcbiAgICAgICAgPyBuYXRpdmVFdmVudC5kZWZhdWx0UHJldmVudGVkXG4gICAgICAgIDogITEgPT09IG5hdGl2ZUV2ZW50LnJldHVyblZhbHVlXG4gICAgKVxuICAgICAgPyBmdW5jdGlvblRoYXRSZXR1cm5zVHJ1ZVxuICAgICAgOiBmdW5jdGlvblRoYXRSZXR1cm5zRmFsc2U7XG4gICAgdGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZCA9IGZ1bmN0aW9uVGhhdFJldHVybnNGYWxzZTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBhc3NpZ24oU3ludGhldGljQmFzZUV2ZW50LnByb3RvdHlwZSwge1xuICAgIHByZXZlbnREZWZhdWx0OiBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLmRlZmF1bHRQcmV2ZW50ZWQgPSAhMDtcbiAgICAgIHZhciBldmVudCA9IHRoaXMubmF0aXZlRXZlbnQ7XG4gICAgICBldmVudCAmJlxuICAgICAgICAoZXZlbnQucHJldmVudERlZmF1bHRcbiAgICAgICAgICA/IGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICAgICAgICA6IFwidW5rbm93blwiICE9PSB0eXBlb2YgZXZlbnQucmV0dXJuVmFsdWUgJiYgKGV2ZW50LnJldHVyblZhbHVlID0gITEpLFxuICAgICAgICAodGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSBmdW5jdGlvblRoYXRSZXR1cm5zVHJ1ZSkpO1xuICAgIH0sXG4gICAgc3RvcFByb3BhZ2F0aW9uOiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgZXZlbnQgPSB0aGlzLm5hdGl2ZUV2ZW50O1xuICAgICAgZXZlbnQgJiZcbiAgICAgICAgKGV2ZW50LnN0b3BQcm9wYWdhdGlvblxuICAgICAgICAgID8gZXZlbnQuc3RvcFByb3BhZ2F0aW9uKClcbiAgICAgICAgICA6IFwidW5rbm93blwiICE9PSB0eXBlb2YgZXZlbnQuY2FuY2VsQnViYmxlICYmXG4gICAgICAgICAgICAoZXZlbnQuY2FuY2VsQnViYmxlID0gITApLFxuICAgICAgICAodGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZCA9IGZ1bmN0aW9uVGhhdFJldHVybnNUcnVlKSk7XG4gICAgfSxcbiAgICBwZXJzaXN0OiBmdW5jdGlvbiAoKSB7fSxcbiAgICBpc1BlcnNpc3RlbnQ6IGZ1bmN0aW9uVGhhdFJldHVybnNUcnVlXG4gIH0pO1xuICByZXR1cm4gU3ludGhldGljQmFzZUV2ZW50O1xufVxudmFyIEV2ZW50SW50ZXJmYWNlID0ge1xuICAgIGV2ZW50UGhhc2U6IDAsXG4gICAgYnViYmxlczogMCxcbiAgICBjYW5jZWxhYmxlOiAwLFxuICAgIHRpbWVTdGFtcDogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICByZXR1cm4gZXZlbnQudGltZVN0YW1wIHx8IERhdGUubm93KCk7XG4gICAgfSxcbiAgICBkZWZhdWx0UHJldmVudGVkOiAwLFxuICAgIGlzVHJ1c3RlZDogMFxuICB9LFxuICBTeW50aGV0aWNFdmVudCA9IGNyZWF0ZVN5bnRoZXRpY0V2ZW50KEV2ZW50SW50ZXJmYWNlKSxcbiAgVUlFdmVudEludGVyZmFjZSA9IGFzc2lnbih7fSwgRXZlbnRJbnRlcmZhY2UsIHsgdmlldzogMCwgZGV0YWlsOiAwIH0pLFxuICBTeW50aGV0aWNVSUV2ZW50ID0gY3JlYXRlU3ludGhldGljRXZlbnQoVUlFdmVudEludGVyZmFjZSksXG4gIGxhc3RNb3ZlbWVudFgsXG4gIGxhc3RNb3ZlbWVudFksXG4gIGxhc3RNb3VzZUV2ZW50LFxuICBNb3VzZUV2ZW50SW50ZXJmYWNlID0gYXNzaWduKHt9LCBVSUV2ZW50SW50ZXJmYWNlLCB7XG4gICAgc2NyZWVuWDogMCxcbiAgICBzY3JlZW5ZOiAwLFxuICAgIGNsaWVudFg6IDAsXG4gICAgY2xpZW50WTogMCxcbiAgICBwYWdlWDogMCxcbiAgICBwYWdlWTogMCxcbiAgICBjdHJsS2V5OiAwLFxuICAgIHNoaWZ0S2V5OiAwLFxuICAgIGFsdEtleTogMCxcbiAgICBtZXRhS2V5OiAwLFxuICAgIGdldE1vZGlmaWVyU3RhdGU6IGdldEV2ZW50TW9kaWZpZXJTdGF0ZSxcbiAgICBidXR0b246IDAsXG4gICAgYnV0dG9uczogMCxcbiAgICByZWxhdGVkVGFyZ2V0OiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIHJldHVybiB2b2lkIDAgPT09IGV2ZW50LnJlbGF0ZWRUYXJnZXRcbiAgICAgICAgPyBldmVudC5mcm9tRWxlbWVudCA9PT0gZXZlbnQuc3JjRWxlbWVudFxuICAgICAgICAgID8gZXZlbnQudG9FbGVtZW50XG4gICAgICAgICAgOiBldmVudC5mcm9tRWxlbWVudFxuICAgICAgICA6IGV2ZW50LnJlbGF0ZWRUYXJnZXQ7XG4gICAgfSxcbiAgICBtb3ZlbWVudFg6IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgaWYgKFwibW92ZW1lbnRYXCIgaW4gZXZlbnQpIHJldHVybiBldmVudC5tb3ZlbWVudFg7XG4gICAgICBldmVudCAhPT0gbGFzdE1vdXNlRXZlbnQgJiZcbiAgICAgICAgKGxhc3RNb3VzZUV2ZW50ICYmIFwibW91c2Vtb3ZlXCIgPT09IGV2ZW50LnR5cGVcbiAgICAgICAgICA/ICgobGFzdE1vdmVtZW50WCA9IGV2ZW50LnNjcmVlblggLSBsYXN0TW91c2VFdmVudC5zY3JlZW5YKSxcbiAgICAgICAgICAgIChsYXN0TW92ZW1lbnRZID0gZXZlbnQuc2NyZWVuWSAtIGxhc3RNb3VzZUV2ZW50LnNjcmVlblkpKVxuICAgICAgICAgIDogKGxhc3RNb3ZlbWVudFkgPSBsYXN0TW92ZW1lbnRYID0gMCksXG4gICAgICAgIChsYXN0TW91c2VFdmVudCA9IGV2ZW50KSk7XG4gICAgICByZXR1cm4gbGFzdE1vdmVtZW50WDtcbiAgICB9LFxuICAgIG1vdmVtZW50WTogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICByZXR1cm4gXCJtb3ZlbWVudFlcIiBpbiBldmVudCA/IGV2ZW50Lm1vdmVtZW50WSA6IGxhc3RNb3ZlbWVudFk7XG4gICAgfVxuICB9KSxcbiAgU3ludGhldGljTW91c2VFdmVudCA9IGNyZWF0ZVN5bnRoZXRpY0V2ZW50KE1vdXNlRXZlbnRJbnRlcmZhY2UpLFxuICBEcmFnRXZlbnRJbnRlcmZhY2UgPSBhc3NpZ24oe30sIE1vdXNlRXZlbnRJbnRlcmZhY2UsIHsgZGF0YVRyYW5zZmVyOiAwIH0pLFxuICBTeW50aGV0aWNEcmFnRXZlbnQgPSBjcmVhdGVTeW50aGV0aWNFdmVudChEcmFnRXZlbnRJbnRlcmZhY2UpLFxuICBGb2N1c0V2ZW50SW50ZXJmYWNlID0gYXNzaWduKHt9LCBVSUV2ZW50SW50ZXJmYWNlLCB7IHJlbGF0ZWRUYXJnZXQ6IDAgfSksXG4gIFN5bnRoZXRpY0ZvY3VzRXZlbnQgPSBjcmVhdGVTeW50aGV0aWNFdmVudChGb2N1c0V2ZW50SW50ZXJmYWNlKSxcbiAgQW5pbWF0aW9uRXZlbnRJbnRlcmZhY2UgPSBhc3NpZ24oe30sIEV2ZW50SW50ZXJmYWNlLCB7XG4gICAgYW5pbWF0aW9uTmFtZTogMCxcbiAgICBlbGFwc2VkVGltZTogMCxcbiAgICBwc2V1ZG9FbGVtZW50OiAwXG4gIH0pLFxuICBTeW50aGV0aWNBbmltYXRpb25FdmVudCA9IGNyZWF0ZVN5bnRoZXRpY0V2ZW50KEFuaW1hdGlvbkV2ZW50SW50ZXJmYWNlKSxcbiAgQ2xpcGJvYXJkRXZlbnRJbnRlcmZhY2UgPSBhc3NpZ24oe30sIEV2ZW50SW50ZXJmYWNlLCB7XG4gICAgY2xpcGJvYXJkRGF0YTogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICByZXR1cm4gXCJjbGlwYm9hcmREYXRhXCIgaW4gZXZlbnRcbiAgICAgICAgPyBldmVudC5jbGlwYm9hcmREYXRhXG4gICAgICAgIDogd2luZG93LmNsaXBib2FyZERhdGE7XG4gICAgfVxuICB9KSxcbiAgU3ludGhldGljQ2xpcGJvYXJkRXZlbnQgPSBjcmVhdGVTeW50aGV0aWNFdmVudChDbGlwYm9hcmRFdmVudEludGVyZmFjZSksXG4gIENvbXBvc2l0aW9uRXZlbnRJbnRlcmZhY2UgPSBhc3NpZ24oe30sIEV2ZW50SW50ZXJmYWNlLCB7IGRhdGE6IDAgfSksXG4gIFN5bnRoZXRpY0NvbXBvc2l0aW9uRXZlbnQgPSBjcmVhdGVTeW50aGV0aWNFdmVudChDb21wb3NpdGlvbkV2ZW50SW50ZXJmYWNlKSxcbiAgbm9ybWFsaXplS2V5ID0ge1xuICAgIEVzYzogXCJFc2NhcGVcIixcbiAgICBTcGFjZWJhcjogXCIgXCIsXG4gICAgTGVmdDogXCJBcnJvd0xlZnRcIixcbiAgICBVcDogXCJBcnJvd1VwXCIsXG4gICAgUmlnaHQ6IFwiQXJyb3dSaWdodFwiLFxuICAgIERvd246IFwiQXJyb3dEb3duXCIsXG4gICAgRGVsOiBcIkRlbGV0ZVwiLFxuICAgIFdpbjogXCJPU1wiLFxuICAgIE1lbnU6IFwiQ29udGV4dE1lbnVcIixcbiAgICBBcHBzOiBcIkNvbnRleHRNZW51XCIsXG4gICAgU2Nyb2xsOiBcIlNjcm9sbExvY2tcIixcbiAgICBNb3pQcmludGFibGVLZXk6IFwiVW5pZGVudGlmaWVkXCJcbiAgfSxcbiAgdHJhbnNsYXRlVG9LZXkgPSB7XG4gICAgODogXCJCYWNrc3BhY2VcIixcbiAgICA5OiBcIlRhYlwiLFxuICAgIDEyOiBcIkNsZWFyXCIsXG4gICAgMTM6IFwiRW50ZXJcIixcbiAgICAxNjogXCJTaGlmdFwiLFxuICAgIDE3OiBcIkNvbnRyb2xcIixcbiAgICAxODogXCJBbHRcIixcbiAgICAxOTogXCJQYXVzZVwiLFxuICAgIDIwOiBcIkNhcHNMb2NrXCIsXG4gICAgMjc6IFwiRXNjYXBlXCIsXG4gICAgMzI6IFwiIFwiLFxuICAgIDMzOiBcIlBhZ2VVcFwiLFxuICAgIDM0OiBcIlBhZ2VEb3duXCIsXG4gICAgMzU6IFwiRW5kXCIsXG4gICAgMzY6IFwiSG9tZVwiLFxuICAgIDM3OiBcIkFycm93TGVmdFwiLFxuICAgIDM4OiBcIkFycm93VXBcIixcbiAgICAzOTogXCJBcnJvd1JpZ2h0XCIsXG4gICAgNDA6IFwiQXJyb3dEb3duXCIsXG4gICAgNDU6IFwiSW5zZXJ0XCIsXG4gICAgNDY6IFwiRGVsZXRlXCIsXG4gICAgMTEyOiBcIkYxXCIsXG4gICAgMTEzOiBcIkYyXCIsXG4gICAgMTE0OiBcIkYzXCIsXG4gICAgMTE1OiBcIkY0XCIsXG4gICAgMTE2OiBcIkY1XCIsXG4gICAgMTE3OiBcIkY2XCIsXG4gICAgMTE4OiBcIkY3XCIsXG4gICAgMTE5OiBcIkY4XCIsXG4gICAgMTIwOiBcIkY5XCIsXG4gICAgMTIxOiBcIkYxMFwiLFxuICAgIDEyMjogXCJGMTFcIixcbiAgICAxMjM6IFwiRjEyXCIsXG4gICAgMTQ0OiBcIk51bUxvY2tcIixcbiAgICAxNDU6IFwiU2Nyb2xsTG9ja1wiLFxuICAgIDIyNDogXCJNZXRhXCJcbiAgfSxcbiAgbW9kaWZpZXJLZXlUb1Byb3AgPSB7XG4gICAgQWx0OiBcImFsdEtleVwiLFxuICAgIENvbnRyb2w6IFwiY3RybEtleVwiLFxuICAgIE1ldGE6IFwibWV0YUtleVwiLFxuICAgIFNoaWZ0OiBcInNoaWZ0S2V5XCJcbiAgfTtcbmZ1bmN0aW9uIG1vZGlmaWVyU3RhdGVHZXR0ZXIoa2V5QXJnKSB7XG4gIHZhciBuYXRpdmVFdmVudCA9IHRoaXMubmF0aXZlRXZlbnQ7XG4gIHJldHVybiBuYXRpdmVFdmVudC5nZXRNb2RpZmllclN0YXRlXG4gICAgPyBuYXRpdmVFdmVudC5nZXRNb2RpZmllclN0YXRlKGtleUFyZylcbiAgICA6IChrZXlBcmcgPSBtb2RpZmllcktleVRvUHJvcFtrZXlBcmddKVxuICAgICAgPyAhIW5hdGl2ZUV2ZW50W2tleUFyZ11cbiAgICAgIDogITE7XG59XG5mdW5jdGlvbiBnZXRFdmVudE1vZGlmaWVyU3RhdGUoKSB7XG4gIHJldHVybiBtb2RpZmllclN0YXRlR2V0dGVyO1xufVxudmFyIEtleWJvYXJkRXZlbnRJbnRlcmZhY2UgPSBhc3NpZ24oe30sIFVJRXZlbnRJbnRlcmZhY2UsIHtcbiAgICBrZXk6IGZ1bmN0aW9uIChuYXRpdmVFdmVudCkge1xuICAgICAgaWYgKG5hdGl2ZUV2ZW50LmtleSkge1xuICAgICAgICB2YXIga2V5ID0gbm9ybWFsaXplS2V5W25hdGl2ZUV2ZW50LmtleV0gfHwgbmF0aXZlRXZlbnQua2V5O1xuICAgICAgICBpZiAoXCJVbmlkZW50aWZpZWRcIiAhPT0ga2V5KSByZXR1cm4ga2V5O1xuICAgICAgfVxuICAgICAgcmV0dXJuIFwia2V5cHJlc3NcIiA9PT0gbmF0aXZlRXZlbnQudHlwZVxuICAgICAgICA/ICgobmF0aXZlRXZlbnQgPSBnZXRFdmVudENoYXJDb2RlKG5hdGl2ZUV2ZW50KSksXG4gICAgICAgICAgMTMgPT09IG5hdGl2ZUV2ZW50ID8gXCJFbnRlclwiIDogU3RyaW5nLmZyb21DaGFyQ29kZShuYXRpdmVFdmVudCkpXG4gICAgICAgIDogXCJrZXlkb3duXCIgPT09IG5hdGl2ZUV2ZW50LnR5cGUgfHwgXCJrZXl1cFwiID09PSBuYXRpdmVFdmVudC50eXBlXG4gICAgICAgICAgPyB0cmFuc2xhdGVUb0tleVtuYXRpdmVFdmVudC5rZXlDb2RlXSB8fCBcIlVuaWRlbnRpZmllZFwiXG4gICAgICAgICAgOiBcIlwiO1xuICAgIH0sXG4gICAgY29kZTogMCxcbiAgICBsb2NhdGlvbjogMCxcbiAgICBjdHJsS2V5OiAwLFxuICAgIHNoaWZ0S2V5OiAwLFxuICAgIGFsdEtleTogMCxcbiAgICBtZXRhS2V5OiAwLFxuICAgIHJlcGVhdDogMCxcbiAgICBsb2NhbGU6IDAsXG4gICAgZ2V0TW9kaWZpZXJTdGF0ZTogZ2V0RXZlbnRNb2RpZmllclN0YXRlLFxuICAgIGNoYXJDb2RlOiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIHJldHVybiBcImtleXByZXNzXCIgPT09IGV2ZW50LnR5cGUgPyBnZXRFdmVudENoYXJDb2RlKGV2ZW50KSA6IDA7XG4gICAgfSxcbiAgICBrZXlDb2RlOiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIHJldHVybiBcImtleWRvd25cIiA9PT0gZXZlbnQudHlwZSB8fCBcImtleXVwXCIgPT09IGV2ZW50LnR5cGVcbiAgICAgICAgPyBldmVudC5rZXlDb2RlXG4gICAgICAgIDogMDtcbiAgICB9LFxuICAgIHdoaWNoOiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIHJldHVybiBcImtleXByZXNzXCIgPT09IGV2ZW50LnR5cGVcbiAgICAgICAgPyBnZXRFdmVudENoYXJDb2RlKGV2ZW50KVxuICAgICAgICA6IFwia2V5ZG93blwiID09PSBldmVudC50eXBlIHx8IFwia2V5dXBcIiA9PT0gZXZlbnQudHlwZVxuICAgICAgICAgID8gZXZlbnQua2V5Q29kZVxuICAgICAgICAgIDogMDtcbiAgICB9XG4gIH0pLFxuICBTeW50aGV0aWNLZXlib2FyZEV2ZW50ID0gY3JlYXRlU3ludGhldGljRXZlbnQoS2V5Ym9hcmRFdmVudEludGVyZmFjZSksXG4gIFBvaW50ZXJFdmVudEludGVyZmFjZSA9IGFzc2lnbih7fSwgTW91c2VFdmVudEludGVyZmFjZSwge1xuICAgIHBvaW50ZXJJZDogMCxcbiAgICB3aWR0aDogMCxcbiAgICBoZWlnaHQ6IDAsXG4gICAgcHJlc3N1cmU6IDAsXG4gICAgdGFuZ2VudGlhbFByZXNzdXJlOiAwLFxuICAgIHRpbHRYOiAwLFxuICAgIHRpbHRZOiAwLFxuICAgIHR3aXN0OiAwLFxuICAgIHBvaW50ZXJUeXBlOiAwLFxuICAgIGlzUHJpbWFyeTogMFxuICB9KSxcbiAgU3ludGhldGljUG9pbnRlckV2ZW50ID0gY3JlYXRlU3ludGhldGljRXZlbnQoUG9pbnRlckV2ZW50SW50ZXJmYWNlKSxcbiAgVG91Y2hFdmVudEludGVyZmFjZSA9IGFzc2lnbih7fSwgVUlFdmVudEludGVyZmFjZSwge1xuICAgIHRvdWNoZXM6IDAsXG4gICAgdGFyZ2V0VG91Y2hlczogMCxcbiAgICBjaGFuZ2VkVG91Y2hlczogMCxcbiAgICBhbHRLZXk6IDAsXG4gICAgbWV0YUtleTogMCxcbiAgICBjdHJsS2V5OiAwLFxuICAgIHNoaWZ0S2V5OiAwLFxuICAgIGdldE1vZGlmaWVyU3RhdGU6IGdldEV2ZW50TW9kaWZpZXJTdGF0ZVxuICB9KSxcbiAgU3ludGhldGljVG91Y2hFdmVudCA9IGNyZWF0ZVN5bnRoZXRpY0V2ZW50KFRvdWNoRXZlbnRJbnRlcmZhY2UpLFxuICBUcmFuc2l0aW9uRXZlbnRJbnRlcmZhY2UgPSBhc3NpZ24oe30sIEV2ZW50SW50ZXJmYWNlLCB7XG4gICAgcHJvcGVydHlOYW1lOiAwLFxuICAgIGVsYXBzZWRUaW1lOiAwLFxuICAgIHBzZXVkb0VsZW1lbnQ6IDBcbiAgfSksXG4gIFN5bnRoZXRpY1RyYW5zaXRpb25FdmVudCA9IGNyZWF0ZVN5bnRoZXRpY0V2ZW50KFRyYW5zaXRpb25FdmVudEludGVyZmFjZSksXG4gIFdoZWVsRXZlbnRJbnRlcmZhY2UgPSBhc3NpZ24oe30sIE1vdXNlRXZlbnRJbnRlcmZhY2UsIHtcbiAgICBkZWx0YVg6IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgcmV0dXJuIFwiZGVsdGFYXCIgaW4gZXZlbnRcbiAgICAgICAgPyBldmVudC5kZWx0YVhcbiAgICAgICAgOiBcIndoZWVsRGVsdGFYXCIgaW4gZXZlbnRcbiAgICAgICAgICA/IC1ldmVudC53aGVlbERlbHRhWFxuICAgICAgICAgIDogMDtcbiAgICB9LFxuICAgIGRlbHRhWTogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICByZXR1cm4gXCJkZWx0YVlcIiBpbiBldmVudFxuICAgICAgICA/IGV2ZW50LmRlbHRhWVxuICAgICAgICA6IFwid2hlZWxEZWx0YVlcIiBpbiBldmVudFxuICAgICAgICAgID8gLWV2ZW50LndoZWVsRGVsdGFZXG4gICAgICAgICAgOiBcIndoZWVsRGVsdGFcIiBpbiBldmVudFxuICAgICAgICAgICAgPyAtZXZlbnQud2hlZWxEZWx0YVxuICAgICAgICAgICAgOiAwO1xuICAgIH0sXG4gICAgZGVsdGFaOiAwLFxuICAgIGRlbHRhTW9kZTogMFxuICB9KSxcbiAgU3ludGhldGljV2hlZWxFdmVudCA9IGNyZWF0ZVN5bnRoZXRpY0V2ZW50KFdoZWVsRXZlbnRJbnRlcmZhY2UpLFxuICBUb2dnbGVFdmVudEludGVyZmFjZSA9IGFzc2lnbih7fSwgRXZlbnRJbnRlcmZhY2UsIHtcbiAgICBuZXdTdGF0ZTogMCxcbiAgICBvbGRTdGF0ZTogMFxuICB9KSxcbiAgU3ludGhldGljVG9nZ2xlRXZlbnQgPSBjcmVhdGVTeW50aGV0aWNFdmVudChUb2dnbGVFdmVudEludGVyZmFjZSksXG4gIEVORF9LRVlDT0RFUyA9IFs5LCAxMywgMjcsIDMyXSxcbiAgY2FuVXNlQ29tcG9zaXRpb25FdmVudCA9IGNhblVzZURPTSAmJiBcIkNvbXBvc2l0aW9uRXZlbnRcIiBpbiB3aW5kb3csXG4gIGRvY3VtZW50TW9kZSA9IG51bGw7XG5jYW5Vc2VET00gJiZcbiAgXCJkb2N1bWVudE1vZGVcIiBpbiBkb2N1bWVudCAmJlxuICAoZG9jdW1lbnRNb2RlID0gZG9jdW1lbnQuZG9jdW1lbnRNb2RlKTtcbnZhciBjYW5Vc2VUZXh0SW5wdXRFdmVudCA9IGNhblVzZURPTSAmJiBcIlRleHRFdmVudFwiIGluIHdpbmRvdyAmJiAhZG9jdW1lbnRNb2RlLFxuICB1c2VGYWxsYmFja0NvbXBvc2l0aW9uRGF0YSA9XG4gICAgY2FuVXNlRE9NICYmXG4gICAgKCFjYW5Vc2VDb21wb3NpdGlvbkV2ZW50IHx8XG4gICAgICAoZG9jdW1lbnRNb2RlICYmIDggPCBkb2N1bWVudE1vZGUgJiYgMTEgPj0gZG9jdW1lbnRNb2RlKSksXG4gIFNQQUNFQkFSX0NIQVIgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKDMyKSxcbiAgaGFzU3BhY2VLZXlwcmVzcyA9ICExO1xuZnVuY3Rpb24gaXNGYWxsYmFja0NvbXBvc2l0aW9uRW5kKGRvbUV2ZW50TmFtZSwgbmF0aXZlRXZlbnQpIHtcbiAgc3dpdGNoIChkb21FdmVudE5hbWUpIHtcbiAgICBjYXNlIFwia2V5dXBcIjpcbiAgICAgIHJldHVybiAtMSAhPT0gRU5EX0tFWUNPREVTLmluZGV4T2YobmF0aXZlRXZlbnQua2V5Q29kZSk7XG4gICAgY2FzZSBcImtleWRvd25cIjpcbiAgICAgIHJldHVybiAyMjkgIT09IG5hdGl2ZUV2ZW50LmtleUNvZGU7XG4gICAgY2FzZSBcImtleXByZXNzXCI6XG4gICAgY2FzZSBcIm1vdXNlZG93blwiOlxuICAgIGNhc2UgXCJmb2N1c291dFwiOlxuICAgICAgcmV0dXJuICEwO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gITE7XG4gIH1cbn1cbmZ1bmN0aW9uIGdldERhdGFGcm9tQ3VzdG9tRXZlbnQobmF0aXZlRXZlbnQpIHtcbiAgbmF0aXZlRXZlbnQgPSBuYXRpdmVFdmVudC5kZXRhaWw7XG4gIHJldHVybiBcIm9iamVjdFwiID09PSB0eXBlb2YgbmF0aXZlRXZlbnQgJiYgXCJkYXRhXCIgaW4gbmF0aXZlRXZlbnRcbiAgICA/IG5hdGl2ZUV2ZW50LmRhdGFcbiAgICA6IG51bGw7XG59XG52YXIgaXNDb21wb3NpbmcgPSAhMTtcbmZ1bmN0aW9uIGdldE5hdGl2ZUJlZm9yZUlucHV0Q2hhcnMoZG9tRXZlbnROYW1lLCBuYXRpdmVFdmVudCkge1xuICBzd2l0Y2ggKGRvbUV2ZW50TmFtZSkge1xuICAgIGNhc2UgXCJjb21wb3NpdGlvbmVuZFwiOlxuICAgICAgcmV0dXJuIGdldERhdGFGcm9tQ3VzdG9tRXZlbnQobmF0aXZlRXZlbnQpO1xuICAgIGNhc2UgXCJrZXlwcmVzc1wiOlxuICAgICAgaWYgKDMyICE9PSBuYXRpdmVFdmVudC53aGljaCkgcmV0dXJuIG51bGw7XG4gICAgICBoYXNTcGFjZUtleXByZXNzID0gITA7XG4gICAgICByZXR1cm4gU1BBQ0VCQVJfQ0hBUjtcbiAgICBjYXNlIFwidGV4dElucHV0XCI6XG4gICAgICByZXR1cm4gKFxuICAgICAgICAoZG9tRXZlbnROYW1lID0gbmF0aXZlRXZlbnQuZGF0YSksXG4gICAgICAgIGRvbUV2ZW50TmFtZSA9PT0gU1BBQ0VCQVJfQ0hBUiAmJiBoYXNTcGFjZUtleXByZXNzID8gbnVsbCA6IGRvbUV2ZW50TmFtZVxuICAgICAgKTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cbmZ1bmN0aW9uIGdldEZhbGxiYWNrQmVmb3JlSW5wdXRDaGFycyhkb21FdmVudE5hbWUsIG5hdGl2ZUV2ZW50KSB7XG4gIGlmIChpc0NvbXBvc2luZylcbiAgICByZXR1cm4gXCJjb21wb3NpdGlvbmVuZFwiID09PSBkb21FdmVudE5hbWUgfHxcbiAgICAgICghY2FuVXNlQ29tcG9zaXRpb25FdmVudCAmJlxuICAgICAgICBpc0ZhbGxiYWNrQ29tcG9zaXRpb25FbmQoZG9tRXZlbnROYW1lLCBuYXRpdmVFdmVudCkpXG4gICAgICA/ICgoZG9tRXZlbnROYW1lID0gZ2V0RGF0YSgpKSxcbiAgICAgICAgKGZhbGxiYWNrVGV4dCA9IHN0YXJ0VGV4dCA9IHJvb3QgPSBudWxsKSxcbiAgICAgICAgKGlzQ29tcG9zaW5nID0gITEpLFxuICAgICAgICBkb21FdmVudE5hbWUpXG4gICAgICA6IG51bGw7XG4gIHN3aXRjaCAoZG9tRXZlbnROYW1lKSB7XG4gICAgY2FzZSBcInBhc3RlXCI6XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICBjYXNlIFwia2V5cHJlc3NcIjpcbiAgICAgIGlmIChcbiAgICAgICAgIShuYXRpdmVFdmVudC5jdHJsS2V5IHx8IG5hdGl2ZUV2ZW50LmFsdEtleSB8fCBuYXRpdmVFdmVudC5tZXRhS2V5KSB8fFxuICAgICAgICAobmF0aXZlRXZlbnQuY3RybEtleSAmJiBuYXRpdmVFdmVudC5hbHRLZXkpXG4gICAgICApIHtcbiAgICAgICAgaWYgKG5hdGl2ZUV2ZW50LmNoYXIgJiYgMSA8IG5hdGl2ZUV2ZW50LmNoYXIubGVuZ3RoKVxuICAgICAgICAgIHJldHVybiBuYXRpdmVFdmVudC5jaGFyO1xuICAgICAgICBpZiAobmF0aXZlRXZlbnQud2hpY2gpIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKG5hdGl2ZUV2ZW50LndoaWNoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsO1xuICAgIGNhc2UgXCJjb21wb3NpdGlvbmVuZFwiOlxuICAgICAgcmV0dXJuIHVzZUZhbGxiYWNrQ29tcG9zaXRpb25EYXRhICYmIFwia29cIiAhPT0gbmF0aXZlRXZlbnQubG9jYWxlXG4gICAgICAgID8gbnVsbFxuICAgICAgICA6IG5hdGl2ZUV2ZW50LmRhdGE7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBudWxsO1xuICB9XG59XG52YXIgc3VwcG9ydGVkSW5wdXRUeXBlcyA9IHtcbiAgY29sb3I6ICEwLFxuICBkYXRlOiAhMCxcbiAgZGF0ZXRpbWU6ICEwLFxuICBcImRhdGV0aW1lLWxvY2FsXCI6ICEwLFxuICBlbWFpbDogITAsXG4gIG1vbnRoOiAhMCxcbiAgbnVtYmVyOiAhMCxcbiAgcGFzc3dvcmQ6ICEwLFxuICByYW5nZTogITAsXG4gIHNlYXJjaDogITAsXG4gIHRlbDogITAsXG4gIHRleHQ6ICEwLFxuICB0aW1lOiAhMCxcbiAgdXJsOiAhMCxcbiAgd2VlazogITBcbn07XG5mdW5jdGlvbiBpc1RleHRJbnB1dEVsZW1lbnQoZWxlbSkge1xuICB2YXIgbm9kZU5hbWUgPSBlbGVtICYmIGVsZW0ubm9kZU5hbWUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuICByZXR1cm4gXCJpbnB1dFwiID09PSBub2RlTmFtZVxuICAgID8gISFzdXBwb3J0ZWRJbnB1dFR5cGVzW2VsZW0udHlwZV1cbiAgICA6IFwidGV4dGFyZWFcIiA9PT0gbm9kZU5hbWVcbiAgICAgID8gITBcbiAgICAgIDogITE7XG59XG5mdW5jdGlvbiBjcmVhdGVBbmRBY2N1bXVsYXRlQ2hhbmdlRXZlbnQoXG4gIGRpc3BhdGNoUXVldWUsXG4gIGluc3QsXG4gIG5hdGl2ZUV2ZW50LFxuICB0YXJnZXRcbikge1xuICByZXN0b3JlVGFyZ2V0XG4gICAgPyByZXN0b3JlUXVldWVcbiAgICAgID8gcmVzdG9yZVF1ZXVlLnB1c2godGFyZ2V0KVxuICAgICAgOiAocmVzdG9yZVF1ZXVlID0gW3RhcmdldF0pXG4gICAgOiAocmVzdG9yZVRhcmdldCA9IHRhcmdldCk7XG4gIGluc3QgPSBhY2N1bXVsYXRlVHdvUGhhc2VMaXN0ZW5lcnMoaW5zdCwgXCJvbkNoYW5nZVwiKTtcbiAgMCA8IGluc3QubGVuZ3RoICYmXG4gICAgKChuYXRpdmVFdmVudCA9IG5ldyBTeW50aGV0aWNFdmVudChcbiAgICAgIFwib25DaGFuZ2VcIixcbiAgICAgIFwiY2hhbmdlXCIsXG4gICAgICBudWxsLFxuICAgICAgbmF0aXZlRXZlbnQsXG4gICAgICB0YXJnZXRcbiAgICApKSxcbiAgICBkaXNwYXRjaFF1ZXVlLnB1c2goeyBldmVudDogbmF0aXZlRXZlbnQsIGxpc3RlbmVyczogaW5zdCB9KSk7XG59XG52YXIgYWN0aXZlRWxlbWVudCQxID0gbnVsbCxcbiAgYWN0aXZlRWxlbWVudEluc3QkMSA9IG51bGw7XG5mdW5jdGlvbiBydW5FdmVudEluQmF0Y2goZGlzcGF0Y2hRdWV1ZSkge1xuICBwcm9jZXNzRGlzcGF0Y2hRdWV1ZShkaXNwYXRjaFF1ZXVlLCAwKTtcbn1cbmZ1bmN0aW9uIGdldEluc3RJZlZhbHVlQ2hhbmdlZCh0YXJnZXRJbnN0KSB7XG4gIHZhciB0YXJnZXROb2RlID0gZ2V0Tm9kZUZyb21JbnN0YW5jZSh0YXJnZXRJbnN0KTtcbiAgaWYgKHVwZGF0ZVZhbHVlSWZDaGFuZ2VkKHRhcmdldE5vZGUpKSByZXR1cm4gdGFyZ2V0SW5zdDtcbn1cbmZ1bmN0aW9uIGdldFRhcmdldEluc3RGb3JDaGFuZ2VFdmVudChkb21FdmVudE5hbWUsIHRhcmdldEluc3QpIHtcbiAgaWYgKFwiY2hhbmdlXCIgPT09IGRvbUV2ZW50TmFtZSkgcmV0dXJuIHRhcmdldEluc3Q7XG59XG52YXIgaXNJbnB1dEV2ZW50U3VwcG9ydGVkID0gITE7XG5pZiAoY2FuVXNlRE9NKSB7XG4gIHZhciBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQkanNjb21wJDI4MztcbiAgaWYgKGNhblVzZURPTSkge1xuICAgIHZhciBpc1N1cHBvcnRlZCRqc2NvbXAkaW5saW5lXzQxOCA9IFwib25pbnB1dFwiIGluIGRvY3VtZW50O1xuICAgIGlmICghaXNTdXBwb3J0ZWQkanNjb21wJGlubGluZV80MTgpIHtcbiAgICAgIHZhciBlbGVtZW50JGpzY29tcCRpbmxpbmVfNDE5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgIGVsZW1lbnQkanNjb21wJGlubGluZV80MTkuc2V0QXR0cmlidXRlKFwib25pbnB1dFwiLCBcInJldHVybjtcIik7XG4gICAgICBpc1N1cHBvcnRlZCRqc2NvbXAkaW5saW5lXzQxOCA9XG4gICAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGVsZW1lbnQkanNjb21wJGlubGluZV80MTkub25pbnB1dDtcbiAgICB9XG4gICAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0JGpzY29tcCQyODMgPSBpc1N1cHBvcnRlZCRqc2NvbXAkaW5saW5lXzQxODtcbiAgfSBlbHNlIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCRqc2NvbXAkMjgzID0gITE7XG4gIGlzSW5wdXRFdmVudFN1cHBvcnRlZCA9XG4gICAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0JGpzY29tcCQyODMgJiZcbiAgICAoIWRvY3VtZW50LmRvY3VtZW50TW9kZSB8fCA5IDwgZG9jdW1lbnQuZG9jdW1lbnRNb2RlKTtcbn1cbmZ1bmN0aW9uIHN0b3BXYXRjaGluZ0ZvclZhbHVlQ2hhbmdlKCkge1xuICBhY3RpdmVFbGVtZW50JDEgJiZcbiAgICAoYWN0aXZlRWxlbWVudCQxLmRldGFjaEV2ZW50KFwib25wcm9wZXJ0eWNoYW5nZVwiLCBoYW5kbGVQcm9wZXJ0eUNoYW5nZSksXG4gICAgKGFjdGl2ZUVsZW1lbnRJbnN0JDEgPSBhY3RpdmVFbGVtZW50JDEgPSBudWxsKSk7XG59XG5mdW5jdGlvbiBoYW5kbGVQcm9wZXJ0eUNoYW5nZShuYXRpdmVFdmVudCkge1xuICBpZiAoXG4gICAgXCJ2YWx1ZVwiID09PSBuYXRpdmVFdmVudC5wcm9wZXJ0eU5hbWUgJiZcbiAgICBnZXRJbnN0SWZWYWx1ZUNoYW5nZWQoYWN0aXZlRWxlbWVudEluc3QkMSlcbiAgKSB7XG4gICAgdmFyIGRpc3BhdGNoUXVldWUgPSBbXTtcbiAgICBjcmVhdGVBbmRBY2N1bXVsYXRlQ2hhbmdlRXZlbnQoXG4gICAgICBkaXNwYXRjaFF1ZXVlLFxuICAgICAgYWN0aXZlRWxlbWVudEluc3QkMSxcbiAgICAgIG5hdGl2ZUV2ZW50LFxuICAgICAgZ2V0RXZlbnRUYXJnZXQobmF0aXZlRXZlbnQpXG4gICAgKTtcbiAgICBiYXRjaGVkVXBkYXRlcyQxKHJ1bkV2ZW50SW5CYXRjaCwgZGlzcGF0Y2hRdWV1ZSk7XG4gIH1cbn1cbmZ1bmN0aW9uIGhhbmRsZUV2ZW50c0ZvcklucHV0RXZlbnRQb2x5ZmlsbChkb21FdmVudE5hbWUsIHRhcmdldCwgdGFyZ2V0SW5zdCkge1xuICBcImZvY3VzaW5cIiA9PT0gZG9tRXZlbnROYW1lXG4gICAgPyAoc3RvcFdhdGNoaW5nRm9yVmFsdWVDaGFuZ2UoKSxcbiAgICAgIChhY3RpdmVFbGVtZW50JDEgPSB0YXJnZXQpLFxuICAgICAgKGFjdGl2ZUVsZW1lbnRJbnN0JDEgPSB0YXJnZXRJbnN0KSxcbiAgICAgIGFjdGl2ZUVsZW1lbnQkMS5hdHRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIiwgaGFuZGxlUHJvcGVydHlDaGFuZ2UpKVxuICAgIDogXCJmb2N1c291dFwiID09PSBkb21FdmVudE5hbWUgJiYgc3RvcFdhdGNoaW5nRm9yVmFsdWVDaGFuZ2UoKTtcbn1cbmZ1bmN0aW9uIGdldFRhcmdldEluc3RGb3JJbnB1dEV2ZW50UG9seWZpbGwoZG9tRXZlbnROYW1lKSB7XG4gIGlmIChcbiAgICBcInNlbGVjdGlvbmNoYW5nZVwiID09PSBkb21FdmVudE5hbWUgfHxcbiAgICBcImtleXVwXCIgPT09IGRvbUV2ZW50TmFtZSB8fFxuICAgIFwia2V5ZG93blwiID09PSBkb21FdmVudE5hbWVcbiAgKVxuICAgIHJldHVybiBnZXRJbnN0SWZWYWx1ZUNoYW5nZWQoYWN0aXZlRWxlbWVudEluc3QkMSk7XG59XG5mdW5jdGlvbiBnZXRUYXJnZXRJbnN0Rm9yQ2xpY2tFdmVudChkb21FdmVudE5hbWUsIHRhcmdldEluc3QpIHtcbiAgaWYgKFwiY2xpY2tcIiA9PT0gZG9tRXZlbnROYW1lKSByZXR1cm4gZ2V0SW5zdElmVmFsdWVDaGFuZ2VkKHRhcmdldEluc3QpO1xufVxuZnVuY3Rpb24gZ2V0VGFyZ2V0SW5zdEZvcklucHV0T3JDaGFuZ2VFdmVudChkb21FdmVudE5hbWUsIHRhcmdldEluc3QpIHtcbiAgaWYgKFwiaW5wdXRcIiA9PT0gZG9tRXZlbnROYW1lIHx8IFwiY2hhbmdlXCIgPT09IGRvbUV2ZW50TmFtZSlcbiAgICByZXR1cm4gZ2V0SW5zdElmVmFsdWVDaGFuZ2VkKHRhcmdldEluc3QpO1xufVxuZnVuY3Rpb24gaXMoeCwgeSkge1xuICByZXR1cm4gKHggPT09IHkgJiYgKDAgIT09IHggfHwgMSAvIHggPT09IDEgLyB5KSkgfHwgKHggIT09IHggJiYgeSAhPT0geSk7XG59XG52YXIgb2JqZWN0SXMgPSBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBPYmplY3QuaXMgPyBPYmplY3QuaXMgOiBpcztcbmZ1bmN0aW9uIHNoYWxsb3dFcXVhbChvYmpBLCBvYmpCKSB7XG4gIGlmIChvYmplY3RJcyhvYmpBLCBvYmpCKSkgcmV0dXJuICEwO1xuICBpZiAoXG4gICAgXCJvYmplY3RcIiAhPT0gdHlwZW9mIG9iakEgfHxcbiAgICBudWxsID09PSBvYmpBIHx8XG4gICAgXCJvYmplY3RcIiAhPT0gdHlwZW9mIG9iakIgfHxcbiAgICBudWxsID09PSBvYmpCXG4gIClcbiAgICByZXR1cm4gITE7XG4gIHZhciBrZXlzQSA9IE9iamVjdC5rZXlzKG9iakEpLFxuICAgIGtleXNCID0gT2JqZWN0LmtleXMob2JqQik7XG4gIGlmIChrZXlzQS5sZW5ndGggIT09IGtleXNCLmxlbmd0aCkgcmV0dXJuICExO1xuICBmb3IgKGtleXNCID0gMDsga2V5c0IgPCBrZXlzQS5sZW5ndGg7IGtleXNCKyspIHtcbiAgICB2YXIgY3VycmVudEtleSA9IGtleXNBW2tleXNCXTtcbiAgICBpZiAoXG4gICAgICAhaGFzT3duUHJvcGVydHkuY2FsbChvYmpCLCBjdXJyZW50S2V5KSB8fFxuICAgICAgIW9iamVjdElzKG9iakFbY3VycmVudEtleV0sIG9iakJbY3VycmVudEtleV0pXG4gICAgKVxuICAgICAgcmV0dXJuICExO1xuICB9XG4gIHJldHVybiAhMDtcbn1cbmZ1bmN0aW9uIGdldExlYWZOb2RlKG5vZGUpIHtcbiAgZm9yICg7IG5vZGUgJiYgbm9kZS5maXJzdENoaWxkOyApIG5vZGUgPSBub2RlLmZpcnN0Q2hpbGQ7XG4gIHJldHVybiBub2RlO1xufVxuZnVuY3Rpb24gZ2V0Tm9kZUZvckNoYXJhY3Rlck9mZnNldChyb290LCBvZmZzZXQpIHtcbiAgdmFyIG5vZGUgPSBnZXRMZWFmTm9kZShyb290KTtcbiAgcm9vdCA9IDA7XG4gIGZvciAodmFyIG5vZGVFbmQ7IG5vZGU7ICkge1xuICAgIGlmICgzID09PSBub2RlLm5vZGVUeXBlKSB7XG4gICAgICBub2RlRW5kID0gcm9vdCArIG5vZGUudGV4dENvbnRlbnQubGVuZ3RoO1xuICAgICAgaWYgKHJvb3QgPD0gb2Zmc2V0ICYmIG5vZGVFbmQgPj0gb2Zmc2V0KVxuICAgICAgICByZXR1cm4geyBub2RlOiBub2RlLCBvZmZzZXQ6IG9mZnNldCAtIHJvb3QgfTtcbiAgICAgIHJvb3QgPSBub2RlRW5kO1xuICAgIH1cbiAgICBhOiB7XG4gICAgICBmb3IgKDsgbm9kZTsgKSB7XG4gICAgICAgIGlmIChub2RlLm5leHRTaWJsaW5nKSB7XG4gICAgICAgICAgbm9kZSA9IG5vZGUubmV4dFNpYmxpbmc7XG4gICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgfVxuICAgICAgICBub2RlID0gbm9kZS5wYXJlbnROb2RlO1xuICAgICAgfVxuICAgICAgbm9kZSA9IHZvaWQgMDtcbiAgICB9XG4gICAgbm9kZSA9IGdldExlYWZOb2RlKG5vZGUpO1xuICB9XG59XG5mdW5jdGlvbiBjb250YWluc05vZGUob3V0ZXJOb2RlLCBpbm5lck5vZGUpIHtcbiAgcmV0dXJuIG91dGVyTm9kZSAmJiBpbm5lck5vZGVcbiAgICA/IG91dGVyTm9kZSA9PT0gaW5uZXJOb2RlXG4gICAgICA/ICEwXG4gICAgICA6IG91dGVyTm9kZSAmJiAzID09PSBvdXRlck5vZGUubm9kZVR5cGVcbiAgICAgICAgPyAhMVxuICAgICAgICA6IGlubmVyTm9kZSAmJiAzID09PSBpbm5lck5vZGUubm9kZVR5cGVcbiAgICAgICAgICA/IGNvbnRhaW5zTm9kZShvdXRlck5vZGUsIGlubmVyTm9kZS5wYXJlbnROb2RlKVxuICAgICAgICAgIDogXCJjb250YWluc1wiIGluIG91dGVyTm9kZVxuICAgICAgICAgICAgPyBvdXRlck5vZGUuY29udGFpbnMoaW5uZXJOb2RlKVxuICAgICAgICAgICAgOiBvdXRlck5vZGUuY29tcGFyZURvY3VtZW50UG9zaXRpb25cbiAgICAgICAgICAgICAgPyAhIShvdXRlck5vZGUuY29tcGFyZURvY3VtZW50UG9zaXRpb24oaW5uZXJOb2RlKSAmIDE2KVxuICAgICAgICAgICAgICA6ICExXG4gICAgOiAhMTtcbn1cbmZ1bmN0aW9uIGdldEFjdGl2ZUVsZW1lbnREZWVwKGNvbnRhaW5lckluZm8pIHtcbiAgY29udGFpbmVySW5mbyA9XG4gICAgbnVsbCAhPSBjb250YWluZXJJbmZvICYmXG4gICAgbnVsbCAhPSBjb250YWluZXJJbmZvLm93bmVyRG9jdW1lbnQgJiZcbiAgICBudWxsICE9IGNvbnRhaW5lckluZm8ub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlld1xuICAgICAgPyBjb250YWluZXJJbmZvLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXdcbiAgICAgIDogd2luZG93O1xuICBmb3IgKFxuICAgIHZhciBlbGVtZW50ID0gZ2V0QWN0aXZlRWxlbWVudChjb250YWluZXJJbmZvLmRvY3VtZW50KTtcbiAgICBlbGVtZW50IGluc3RhbmNlb2YgY29udGFpbmVySW5mby5IVE1MSUZyYW1lRWxlbWVudDtcblxuICApIHtcbiAgICB0cnkge1xuICAgICAgdmFyIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCA9XG4gICAgICAgIFwic3RyaW5nXCIgPT09IHR5cGVvZiBlbGVtZW50LmNvbnRlbnRXaW5kb3cubG9jYXRpb24uaHJlZjtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCA9ICExO1xuICAgIH1cbiAgICBpZiAoSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0KSBjb250YWluZXJJbmZvID0gZWxlbWVudC5jb250ZW50V2luZG93O1xuICAgIGVsc2UgYnJlYWs7XG4gICAgZWxlbWVudCA9IGdldEFjdGl2ZUVsZW1lbnQoY29udGFpbmVySW5mby5kb2N1bWVudCk7XG4gIH1cbiAgcmV0dXJuIGVsZW1lbnQ7XG59XG5mdW5jdGlvbiBoYXNTZWxlY3Rpb25DYXBhYmlsaXRpZXMoZWxlbSkge1xuICB2YXIgbm9kZU5hbWUgPSBlbGVtICYmIGVsZW0ubm9kZU5hbWUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuICByZXR1cm4gKFxuICAgIG5vZGVOYW1lICYmXG4gICAgKChcImlucHV0XCIgPT09IG5vZGVOYW1lICYmXG4gICAgICAoXCJ0ZXh0XCIgPT09IGVsZW0udHlwZSB8fFxuICAgICAgICBcInNlYXJjaFwiID09PSBlbGVtLnR5cGUgfHxcbiAgICAgICAgXCJ0ZWxcIiA9PT0gZWxlbS50eXBlIHx8XG4gICAgICAgIFwidXJsXCIgPT09IGVsZW0udHlwZSB8fFxuICAgICAgICBcInBhc3N3b3JkXCIgPT09IGVsZW0udHlwZSkpIHx8XG4gICAgICBcInRleHRhcmVhXCIgPT09IG5vZGVOYW1lIHx8XG4gICAgICBcInRydWVcIiA9PT0gZWxlbS5jb250ZW50RWRpdGFibGUpXG4gICk7XG59XG5mdW5jdGlvbiByZXN0b3JlU2VsZWN0aW9uKHByaW9yU2VsZWN0aW9uSW5mb3JtYXRpb24sIGNvbnRhaW5lckluZm8pIHtcbiAgdmFyIGN1ckZvY3VzZWRFbGVtID0gZ2V0QWN0aXZlRWxlbWVudERlZXAoY29udGFpbmVySW5mbyk7XG4gIGNvbnRhaW5lckluZm8gPSBwcmlvclNlbGVjdGlvbkluZm9ybWF0aW9uLmZvY3VzZWRFbGVtO1xuICB2YXIgcHJpb3JTZWxlY3Rpb25SYW5nZSA9IHByaW9yU2VsZWN0aW9uSW5mb3JtYXRpb24uc2VsZWN0aW9uUmFuZ2U7XG4gIGlmIChcbiAgICBjdXJGb2N1c2VkRWxlbSAhPT0gY29udGFpbmVySW5mbyAmJlxuICAgIGNvbnRhaW5lckluZm8gJiZcbiAgICBjb250YWluZXJJbmZvLm93bmVyRG9jdW1lbnQgJiZcbiAgICBjb250YWluc05vZGUoY29udGFpbmVySW5mby5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudCwgY29udGFpbmVySW5mbylcbiAgKSB7XG4gICAgaWYgKG51bGwgIT09IHByaW9yU2VsZWN0aW9uUmFuZ2UgJiYgaGFzU2VsZWN0aW9uQ2FwYWJpbGl0aWVzKGNvbnRhaW5lckluZm8pKVxuICAgICAgaWYgKFxuICAgICAgICAoKHByaW9yU2VsZWN0aW9uSW5mb3JtYXRpb24gPSBwcmlvclNlbGVjdGlvblJhbmdlLnN0YXJ0KSxcbiAgICAgICAgKGN1ckZvY3VzZWRFbGVtID0gcHJpb3JTZWxlY3Rpb25SYW5nZS5lbmQpLFxuICAgICAgICB2b2lkIDAgPT09IGN1ckZvY3VzZWRFbGVtICYmXG4gICAgICAgICAgKGN1ckZvY3VzZWRFbGVtID0gcHJpb3JTZWxlY3Rpb25JbmZvcm1hdGlvbiksXG4gICAgICAgIFwic2VsZWN0aW9uU3RhcnRcIiBpbiBjb250YWluZXJJbmZvKVxuICAgICAgKVxuICAgICAgICAoY29udGFpbmVySW5mby5zZWxlY3Rpb25TdGFydCA9IHByaW9yU2VsZWN0aW9uSW5mb3JtYXRpb24pLFxuICAgICAgICAgIChjb250YWluZXJJbmZvLnNlbGVjdGlvbkVuZCA9IE1hdGgubWluKFxuICAgICAgICAgICAgY3VyRm9jdXNlZEVsZW0sXG4gICAgICAgICAgICBjb250YWluZXJJbmZvLnZhbHVlLmxlbmd0aFxuICAgICAgICAgICkpO1xuICAgICAgZWxzZSBpZiAoXG4gICAgICAgICgoY3VyRm9jdXNlZEVsZW0gPVxuICAgICAgICAgICgocHJpb3JTZWxlY3Rpb25JbmZvcm1hdGlvbiA9XG4gICAgICAgICAgICBjb250YWluZXJJbmZvLm93bmVyRG9jdW1lbnQgfHwgZG9jdW1lbnQpICYmXG4gICAgICAgICAgICBwcmlvclNlbGVjdGlvbkluZm9ybWF0aW9uLmRlZmF1bHRWaWV3KSB8fFxuICAgICAgICAgIHdpbmRvdyksXG4gICAgICAgIGN1ckZvY3VzZWRFbGVtLmdldFNlbGVjdGlvbilcbiAgICAgICkge1xuICAgICAgICBjdXJGb2N1c2VkRWxlbSA9IGN1ckZvY3VzZWRFbGVtLmdldFNlbGVjdGlvbigpO1xuICAgICAgICB2YXIgbGVuZ3RoID0gY29udGFpbmVySW5mby50ZXh0Q29udGVudC5sZW5ndGgsXG4gICAgICAgICAgc3RhcnQgPSBNYXRoLm1pbihwcmlvclNlbGVjdGlvblJhbmdlLnN0YXJ0LCBsZW5ndGgpO1xuICAgICAgICBwcmlvclNlbGVjdGlvblJhbmdlID1cbiAgICAgICAgICB2b2lkIDAgPT09IHByaW9yU2VsZWN0aW9uUmFuZ2UuZW5kXG4gICAgICAgICAgICA/IHN0YXJ0XG4gICAgICAgICAgICA6IE1hdGgubWluKHByaW9yU2VsZWN0aW9uUmFuZ2UuZW5kLCBsZW5ndGgpO1xuICAgICAgICAhY3VyRm9jdXNlZEVsZW0uZXh0ZW5kICYmXG4gICAgICAgICAgc3RhcnQgPiBwcmlvclNlbGVjdGlvblJhbmdlICYmXG4gICAgICAgICAgKChsZW5ndGggPSBwcmlvclNlbGVjdGlvblJhbmdlKSxcbiAgICAgICAgICAocHJpb3JTZWxlY3Rpb25SYW5nZSA9IHN0YXJ0KSxcbiAgICAgICAgICAoc3RhcnQgPSBsZW5ndGgpKTtcbiAgICAgICAgbGVuZ3RoID0gZ2V0Tm9kZUZvckNoYXJhY3Rlck9mZnNldChjb250YWluZXJJbmZvLCBzdGFydCk7XG4gICAgICAgIHZhciBlbmRNYXJrZXIgPSBnZXROb2RlRm9yQ2hhcmFjdGVyT2Zmc2V0KFxuICAgICAgICAgIGNvbnRhaW5lckluZm8sXG4gICAgICAgICAgcHJpb3JTZWxlY3Rpb25SYW5nZVxuICAgICAgICApO1xuICAgICAgICBsZW5ndGggJiZcbiAgICAgICAgICBlbmRNYXJrZXIgJiZcbiAgICAgICAgICAoMSAhPT0gY3VyRm9jdXNlZEVsZW0ucmFuZ2VDb3VudCB8fFxuICAgICAgICAgICAgY3VyRm9jdXNlZEVsZW0uYW5jaG9yTm9kZSAhPT0gbGVuZ3RoLm5vZGUgfHxcbiAgICAgICAgICAgIGN1ckZvY3VzZWRFbGVtLmFuY2hvck9mZnNldCAhPT0gbGVuZ3RoLm9mZnNldCB8fFxuICAgICAgICAgICAgY3VyRm9jdXNlZEVsZW0uZm9jdXNOb2RlICE9PSBlbmRNYXJrZXIubm9kZSB8fFxuICAgICAgICAgICAgY3VyRm9jdXNlZEVsZW0uZm9jdXNPZmZzZXQgIT09IGVuZE1hcmtlci5vZmZzZXQpICYmXG4gICAgICAgICAgKChwcmlvclNlbGVjdGlvbkluZm9ybWF0aW9uID1cbiAgICAgICAgICAgIHByaW9yU2VsZWN0aW9uSW5mb3JtYXRpb24uY3JlYXRlUmFuZ2UoKSksXG4gICAgICAgICAgcHJpb3JTZWxlY3Rpb25JbmZvcm1hdGlvbi5zZXRTdGFydChsZW5ndGgubm9kZSwgbGVuZ3RoLm9mZnNldCksXG4gICAgICAgICAgY3VyRm9jdXNlZEVsZW0ucmVtb3ZlQWxsUmFuZ2VzKCksXG4gICAgICAgICAgc3RhcnQgPiBwcmlvclNlbGVjdGlvblJhbmdlXG4gICAgICAgICAgICA/IChjdXJGb2N1c2VkRWxlbS5hZGRSYW5nZShwcmlvclNlbGVjdGlvbkluZm9ybWF0aW9uKSxcbiAgICAgICAgICAgICAgY3VyRm9jdXNlZEVsZW0uZXh0ZW5kKGVuZE1hcmtlci5ub2RlLCBlbmRNYXJrZXIub2Zmc2V0KSlcbiAgICAgICAgICAgIDogKHByaW9yU2VsZWN0aW9uSW5mb3JtYXRpb24uc2V0RW5kKFxuICAgICAgICAgICAgICAgIGVuZE1hcmtlci5ub2RlLFxuICAgICAgICAgICAgICAgIGVuZE1hcmtlci5vZmZzZXRcbiAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgY3VyRm9jdXNlZEVsZW0uYWRkUmFuZ2UocHJpb3JTZWxlY3Rpb25JbmZvcm1hdGlvbikpKTtcbiAgICAgIH1cbiAgICBwcmlvclNlbGVjdGlvbkluZm9ybWF0aW9uID0gW107XG4gICAgZm9yIChcbiAgICAgIGN1ckZvY3VzZWRFbGVtID0gY29udGFpbmVySW5mbztcbiAgICAgIChjdXJGb2N1c2VkRWxlbSA9IGN1ckZvY3VzZWRFbGVtLnBhcmVudE5vZGUpO1xuXG4gICAgKVxuICAgICAgMSA9PT0gY3VyRm9jdXNlZEVsZW0ubm9kZVR5cGUgJiZcbiAgICAgICAgcHJpb3JTZWxlY3Rpb25JbmZvcm1hdGlvbi5wdXNoKHtcbiAgICAgICAgICBlbGVtZW50OiBjdXJGb2N1c2VkRWxlbSxcbiAgICAgICAgICBsZWZ0OiBjdXJGb2N1c2VkRWxlbS5zY3JvbGxMZWZ0LFxuICAgICAgICAgIHRvcDogY3VyRm9jdXNlZEVsZW0uc2Nyb2xsVG9wXG4gICAgICAgIH0pO1xuICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGNvbnRhaW5lckluZm8uZm9jdXMgJiYgY29udGFpbmVySW5mby5mb2N1cygpO1xuICAgIGZvciAoXG4gICAgICBjb250YWluZXJJbmZvID0gMDtcbiAgICAgIGNvbnRhaW5lckluZm8gPCBwcmlvclNlbGVjdGlvbkluZm9ybWF0aW9uLmxlbmd0aDtcbiAgICAgIGNvbnRhaW5lckluZm8rK1xuICAgIClcbiAgICAgIChjdXJGb2N1c2VkRWxlbSA9IHByaW9yU2VsZWN0aW9uSW5mb3JtYXRpb25bY29udGFpbmVySW5mb10pLFxuICAgICAgICAoY3VyRm9jdXNlZEVsZW0uZWxlbWVudC5zY3JvbGxMZWZ0ID0gY3VyRm9jdXNlZEVsZW0ubGVmdCksXG4gICAgICAgIChjdXJGb2N1c2VkRWxlbS5lbGVtZW50LnNjcm9sbFRvcCA9IGN1ckZvY3VzZWRFbGVtLnRvcCk7XG4gIH1cbn1cbnZhciBza2lwU2VsZWN0aW9uQ2hhbmdlRXZlbnQgPVxuICAgIGNhblVzZURPTSAmJiBcImRvY3VtZW50TW9kZVwiIGluIGRvY3VtZW50ICYmIDExID49IGRvY3VtZW50LmRvY3VtZW50TW9kZSxcbiAgYWN0aXZlRWxlbWVudCA9IG51bGwsXG4gIGFjdGl2ZUVsZW1lbnRJbnN0ID0gbnVsbCxcbiAgbGFzdFNlbGVjdGlvbiA9IG51bGwsXG4gIG1vdXNlRG93biA9ICExO1xuZnVuY3Rpb24gY29uc3RydWN0U2VsZWN0RXZlbnQoZGlzcGF0Y2hRdWV1ZSwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KSB7XG4gIHZhciBkb2MgPVxuICAgIG5hdGl2ZUV2ZW50VGFyZ2V0LndpbmRvdyA9PT0gbmF0aXZlRXZlbnRUYXJnZXRcbiAgICAgID8gbmF0aXZlRXZlbnRUYXJnZXQuZG9jdW1lbnRcbiAgICAgIDogOSA9PT0gbmF0aXZlRXZlbnRUYXJnZXQubm9kZVR5cGVcbiAgICAgICAgPyBuYXRpdmVFdmVudFRhcmdldFxuICAgICAgICA6IG5hdGl2ZUV2ZW50VGFyZ2V0Lm93bmVyRG9jdW1lbnQ7XG4gIG1vdXNlRG93biB8fFxuICAgIG51bGwgPT0gYWN0aXZlRWxlbWVudCB8fFxuICAgIGFjdGl2ZUVsZW1lbnQgIT09IGdldEFjdGl2ZUVsZW1lbnQoZG9jKSB8fFxuICAgICgoZG9jID0gYWN0aXZlRWxlbWVudCksXG4gICAgXCJzZWxlY3Rpb25TdGFydFwiIGluIGRvYyAmJiBoYXNTZWxlY3Rpb25DYXBhYmlsaXRpZXMoZG9jKVxuICAgICAgPyAoZG9jID0geyBzdGFydDogZG9jLnNlbGVjdGlvblN0YXJ0LCBlbmQ6IGRvYy5zZWxlY3Rpb25FbmQgfSlcbiAgICAgIDogKChkb2MgPSAoXG4gICAgICAgICAgKGRvYy5vd25lckRvY3VtZW50ICYmIGRvYy5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3KSB8fFxuICAgICAgICAgIHdpbmRvd1xuICAgICAgICApLmdldFNlbGVjdGlvbigpKSxcbiAgICAgICAgKGRvYyA9IHtcbiAgICAgICAgICBhbmNob3JOb2RlOiBkb2MuYW5jaG9yTm9kZSxcbiAgICAgICAgICBhbmNob3JPZmZzZXQ6IGRvYy5hbmNob3JPZmZzZXQsXG4gICAgICAgICAgZm9jdXNOb2RlOiBkb2MuZm9jdXNOb2RlLFxuICAgICAgICAgIGZvY3VzT2Zmc2V0OiBkb2MuZm9jdXNPZmZzZXRcbiAgICAgICAgfSkpLFxuICAgIChsYXN0U2VsZWN0aW9uICYmIHNoYWxsb3dFcXVhbChsYXN0U2VsZWN0aW9uLCBkb2MpKSB8fFxuICAgICAgKChsYXN0U2VsZWN0aW9uID0gZG9jKSxcbiAgICAgIChkb2MgPSBhY2N1bXVsYXRlVHdvUGhhc2VMaXN0ZW5lcnMoYWN0aXZlRWxlbWVudEluc3QsIFwib25TZWxlY3RcIikpLFxuICAgICAgMCA8IGRvYy5sZW5ndGggJiZcbiAgICAgICAgKChuYXRpdmVFdmVudCA9IG5ldyBTeW50aGV0aWNFdmVudChcbiAgICAgICAgICBcIm9uU2VsZWN0XCIsXG4gICAgICAgICAgXCJzZWxlY3RcIixcbiAgICAgICAgICBudWxsLFxuICAgICAgICAgIG5hdGl2ZUV2ZW50LFxuICAgICAgICAgIG5hdGl2ZUV2ZW50VGFyZ2V0XG4gICAgICAgICkpLFxuICAgICAgICBkaXNwYXRjaFF1ZXVlLnB1c2goeyBldmVudDogbmF0aXZlRXZlbnQsIGxpc3RlbmVyczogZG9jIH0pLFxuICAgICAgICAobmF0aXZlRXZlbnQudGFyZ2V0ID0gYWN0aXZlRWxlbWVudCkpKSk7XG59XG5mdW5jdGlvbiBtYWtlUHJlZml4TWFwKHN0eWxlUHJvcCwgZXZlbnROYW1lKSB7XG4gIHZhciBwcmVmaXhlcyA9IHt9O1xuICBwcmVmaXhlc1tzdHlsZVByb3AudG9Mb3dlckNhc2UoKV0gPSBldmVudE5hbWUudG9Mb3dlckNhc2UoKTtcbiAgcHJlZml4ZXNbXCJXZWJraXRcIiArIHN0eWxlUHJvcF0gPSBcIndlYmtpdFwiICsgZXZlbnROYW1lO1xuICBwcmVmaXhlc1tcIk1velwiICsgc3R5bGVQcm9wXSA9IFwibW96XCIgKyBldmVudE5hbWU7XG4gIHJldHVybiBwcmVmaXhlcztcbn1cbnZhciB2ZW5kb3JQcmVmaXhlcyA9IHtcbiAgICBhbmltYXRpb25lbmQ6IG1ha2VQcmVmaXhNYXAoXCJBbmltYXRpb25cIiwgXCJBbmltYXRpb25FbmRcIiksXG4gICAgYW5pbWF0aW9uaXRlcmF0aW9uOiBtYWtlUHJlZml4TWFwKFwiQW5pbWF0aW9uXCIsIFwiQW5pbWF0aW9uSXRlcmF0aW9uXCIpLFxuICAgIGFuaW1hdGlvbnN0YXJ0OiBtYWtlUHJlZml4TWFwKFwiQW5pbWF0aW9uXCIsIFwiQW5pbWF0aW9uU3RhcnRcIiksXG4gICAgdHJhbnNpdGlvbnJ1bjogbWFrZVByZWZpeE1hcChcIlRyYW5zaXRpb25cIiwgXCJUcmFuc2l0aW9uUnVuXCIpLFxuICAgIHRyYW5zaXRpb25zdGFydDogbWFrZVByZWZpeE1hcChcIlRyYW5zaXRpb25cIiwgXCJUcmFuc2l0aW9uU3RhcnRcIiksXG4gICAgdHJhbnNpdGlvbmNhbmNlbDogbWFrZVByZWZpeE1hcChcIlRyYW5zaXRpb25cIiwgXCJUcmFuc2l0aW9uQ2FuY2VsXCIpLFxuICAgIHRyYW5zaXRpb25lbmQ6IG1ha2VQcmVmaXhNYXAoXCJUcmFuc2l0aW9uXCIsIFwiVHJhbnNpdGlvbkVuZFwiKVxuICB9LFxuICBwcmVmaXhlZEV2ZW50TmFtZXMgPSB7fSxcbiAgc3R5bGUgPSB7fTtcbmNhblVzZURPTSAmJlxuICAoKHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKS5zdHlsZSksXG4gIFwiQW5pbWF0aW9uRXZlbnRcIiBpbiB3aW5kb3cgfHxcbiAgICAoZGVsZXRlIHZlbmRvclByZWZpeGVzLmFuaW1hdGlvbmVuZC5hbmltYXRpb24sXG4gICAgZGVsZXRlIHZlbmRvclByZWZpeGVzLmFuaW1hdGlvbml0ZXJhdGlvbi5hbmltYXRpb24sXG4gICAgZGVsZXRlIHZlbmRvclByZWZpeGVzLmFuaW1hdGlvbnN0YXJ0LmFuaW1hdGlvbiksXG4gIFwiVHJhbnNpdGlvbkV2ZW50XCIgaW4gd2luZG93IHx8XG4gICAgZGVsZXRlIHZlbmRvclByZWZpeGVzLnRyYW5zaXRpb25lbmQudHJhbnNpdGlvbik7XG5mdW5jdGlvbiBnZXRWZW5kb3JQcmVmaXhlZEV2ZW50TmFtZShldmVudE5hbWUpIHtcbiAgaWYgKHByZWZpeGVkRXZlbnROYW1lc1tldmVudE5hbWVdKSByZXR1cm4gcHJlZml4ZWRFdmVudE5hbWVzW2V2ZW50TmFtZV07XG4gIGlmICghdmVuZG9yUHJlZml4ZXNbZXZlbnROYW1lXSkgcmV0dXJuIGV2ZW50TmFtZTtcbiAgdmFyIHByZWZpeE1hcCA9IHZlbmRvclByZWZpeGVzW2V2ZW50TmFtZV0sXG4gICAgc3R5bGVQcm9wO1xuICBmb3IgKHN0eWxlUHJvcCBpbiBwcmVmaXhNYXApXG4gICAgaWYgKHByZWZpeE1hcC5oYXNPd25Qcm9wZXJ0eShzdHlsZVByb3ApICYmIHN0eWxlUHJvcCBpbiBzdHlsZSlcbiAgICAgIHJldHVybiAocHJlZml4ZWRFdmVudE5hbWVzW2V2ZW50TmFtZV0gPSBwcmVmaXhNYXBbc3R5bGVQcm9wXSk7XG4gIHJldHVybiBldmVudE5hbWU7XG59XG52YXIgQU5JTUFUSU9OX0VORCA9IGdldFZlbmRvclByZWZpeGVkRXZlbnROYW1lKFwiYW5pbWF0aW9uZW5kXCIpLFxuICBBTklNQVRJT05fSVRFUkFUSU9OID0gZ2V0VmVuZG9yUHJlZml4ZWRFdmVudE5hbWUoXCJhbmltYXRpb25pdGVyYXRpb25cIiksXG4gIEFOSU1BVElPTl9TVEFSVCA9IGdldFZlbmRvclByZWZpeGVkRXZlbnROYW1lKFwiYW5pbWF0aW9uc3RhcnRcIiksXG4gIFRSQU5TSVRJT05fUlVOID0gZ2V0VmVuZG9yUHJlZml4ZWRFdmVudE5hbWUoXCJ0cmFuc2l0aW9ucnVuXCIpLFxuICBUUkFOU0lUSU9OX1NUQVJUID0gZ2V0VmVuZG9yUHJlZml4ZWRFdmVudE5hbWUoXCJ0cmFuc2l0aW9uc3RhcnRcIiksXG4gIFRSQU5TSVRJT05fQ0FOQ0VMID0gZ2V0VmVuZG9yUHJlZml4ZWRFdmVudE5hbWUoXCJ0cmFuc2l0aW9uY2FuY2VsXCIpLFxuICBUUkFOU0lUSU9OX0VORCA9IGdldFZlbmRvclByZWZpeGVkRXZlbnROYW1lKFwidHJhbnNpdGlvbmVuZFwiKSxcbiAgdG9wTGV2ZWxFdmVudHNUb1JlYWN0TmFtZXMgPSBuZXcgTWFwKCksXG4gIHNpbXBsZUV2ZW50UGx1Z2luRXZlbnRzID1cbiAgICBcImFib3J0IGF1eENsaWNrIGJlZm9yZVRvZ2dsZSBjYW5jZWwgY2FuUGxheSBjYW5QbGF5VGhyb3VnaCBjbGljayBjbG9zZSBjb250ZXh0TWVudSBjb3B5IGN1dCBkcmFnIGRyYWdFbmQgZHJhZ0VudGVyIGRyYWdFeGl0IGRyYWdMZWF2ZSBkcmFnT3ZlciBkcmFnU3RhcnQgZHJvcCBkdXJhdGlvbkNoYW5nZSBlbXB0aWVkIGVuY3J5cHRlZCBlbmRlZCBlcnJvciBnb3RQb2ludGVyQ2FwdHVyZSBpbnB1dCBpbnZhbGlkIGtleURvd24ga2V5UHJlc3Mga2V5VXAgbG9hZCBsb2FkZWREYXRhIGxvYWRlZE1ldGFkYXRhIGxvYWRTdGFydCBsb3N0UG9pbnRlckNhcHR1cmUgbW91c2VEb3duIG1vdXNlTW92ZSBtb3VzZU91dCBtb3VzZU92ZXIgbW91c2VVcCBwYXN0ZSBwYXVzZSBwbGF5IHBsYXlpbmcgcG9pbnRlckNhbmNlbCBwb2ludGVyRG93biBwb2ludGVyTW92ZSBwb2ludGVyT3V0IHBvaW50ZXJPdmVyIHBvaW50ZXJVcCBwcm9ncmVzcyByYXRlQ2hhbmdlIHJlc2V0IHJlc2l6ZSBzZWVrZWQgc2Vla2luZyBzdGFsbGVkIHN1Ym1pdCBzdXNwZW5kIHRpbWVVcGRhdGUgdG91Y2hDYW5jZWwgdG91Y2hFbmQgdG91Y2hTdGFydCB2b2x1bWVDaGFuZ2Ugc2Nyb2xsIHNjcm9sbEVuZCB0b2dnbGUgdG91Y2hNb3ZlIHdhaXRpbmcgd2hlZWxcIi5zcGxpdChcbiAgICAgIFwiIFwiXG4gICAgKTtcbmZ1bmN0aW9uIHJlZ2lzdGVyU2ltcGxlRXZlbnQoZG9tRXZlbnROYW1lLCByZWFjdE5hbWUpIHtcbiAgdG9wTGV2ZWxFdmVudHNUb1JlYWN0TmFtZXMuc2V0KGRvbUV2ZW50TmFtZSwgcmVhY3ROYW1lKTtcbiAgcmVnaXN0ZXJUd29QaGFzZUV2ZW50KHJlYWN0TmFtZSwgW2RvbUV2ZW50TmFtZV0pO1xufVxudmFyIGNvbmN1cnJlbnRRdWV1ZXMgPSBbXSxcbiAgY29uY3VycmVudFF1ZXVlc0luZGV4ID0gMCxcbiAgY29uY3VycmVudGx5VXBkYXRlZExhbmVzID0gMDtcbmZ1bmN0aW9uIGZpbmlzaFF1ZXVlaW5nQ29uY3VycmVudFVwZGF0ZXMoKSB7XG4gIGZvciAoXG4gICAgdmFyIGVuZEluZGV4ID0gY29uY3VycmVudFF1ZXVlc0luZGV4LFxuICAgICAgaSA9IChjb25jdXJyZW50bHlVcGRhdGVkTGFuZXMgPSBjb25jdXJyZW50UXVldWVzSW5kZXggPSAwKTtcbiAgICBpIDwgZW5kSW5kZXg7XG5cbiAgKSB7XG4gICAgdmFyIGZpYmVyID0gY29uY3VycmVudFF1ZXVlc1tpXTtcbiAgICBjb25jdXJyZW50UXVldWVzW2krK10gPSBudWxsO1xuICAgIHZhciBxdWV1ZSA9IGNvbmN1cnJlbnRRdWV1ZXNbaV07XG4gICAgY29uY3VycmVudFF1ZXVlc1tpKytdID0gbnVsbDtcbiAgICB2YXIgdXBkYXRlID0gY29uY3VycmVudFF1ZXVlc1tpXTtcbiAgICBjb25jdXJyZW50UXVldWVzW2krK10gPSBudWxsO1xuICAgIHZhciBsYW5lID0gY29uY3VycmVudFF1ZXVlc1tpXTtcbiAgICBjb25jdXJyZW50UXVldWVzW2krK10gPSBudWxsO1xuICAgIGlmIChudWxsICE9PSBxdWV1ZSAmJiBudWxsICE9PSB1cGRhdGUpIHtcbiAgICAgIHZhciBwZW5kaW5nID0gcXVldWUucGVuZGluZztcbiAgICAgIG51bGwgPT09IHBlbmRpbmdcbiAgICAgICAgPyAodXBkYXRlLm5leHQgPSB1cGRhdGUpXG4gICAgICAgIDogKCh1cGRhdGUubmV4dCA9IHBlbmRpbmcubmV4dCksIChwZW5kaW5nLm5leHQgPSB1cGRhdGUpKTtcbiAgICAgIHF1ZXVlLnBlbmRpbmcgPSB1cGRhdGU7XG4gICAgfVxuICAgIDAgIT09IGxhbmUgJiYgbWFya1VwZGF0ZUxhbmVGcm9tRmliZXJUb1Jvb3QoZmliZXIsIHVwZGF0ZSwgbGFuZSk7XG4gIH1cbn1cbmZ1bmN0aW9uIGVucXVldWVVcGRhdGUkMShmaWJlciwgcXVldWUsIHVwZGF0ZSwgbGFuZSkge1xuICBjb25jdXJyZW50UXVldWVzW2NvbmN1cnJlbnRRdWV1ZXNJbmRleCsrXSA9IGZpYmVyO1xuICBjb25jdXJyZW50UXVldWVzW2NvbmN1cnJlbnRRdWV1ZXNJbmRleCsrXSA9IHF1ZXVlO1xuICBjb25jdXJyZW50UXVldWVzW2NvbmN1cnJlbnRRdWV1ZXNJbmRleCsrXSA9IHVwZGF0ZTtcbiAgY29uY3VycmVudFF1ZXVlc1tjb25jdXJyZW50UXVldWVzSW5kZXgrK10gPSBsYW5lO1xuICBjb25jdXJyZW50bHlVcGRhdGVkTGFuZXMgfD0gbGFuZTtcbiAgZmliZXIubGFuZXMgfD0gbGFuZTtcbiAgZmliZXIgPSBmaWJlci5hbHRlcm5hdGU7XG4gIG51bGwgIT09IGZpYmVyICYmIChmaWJlci5sYW5lcyB8PSBsYW5lKTtcbn1cbmZ1bmN0aW9uIGVucXVldWVDb25jdXJyZW50SG9va1VwZGF0ZShmaWJlciwgcXVldWUsIHVwZGF0ZSwgbGFuZSkge1xuICBlbnF1ZXVlVXBkYXRlJDEoZmliZXIsIHF1ZXVlLCB1cGRhdGUsIGxhbmUpO1xuICByZXR1cm4gZ2V0Um9vdEZvclVwZGF0ZWRGaWJlcihmaWJlcik7XG59XG5mdW5jdGlvbiBlbnF1ZXVlQ29uY3VycmVudFJlbmRlckZvckxhbmUoZmliZXIsIGxhbmUpIHtcbiAgZW5xdWV1ZVVwZGF0ZSQxKGZpYmVyLCBudWxsLCBudWxsLCBsYW5lKTtcbiAgcmV0dXJuIGdldFJvb3RGb3JVcGRhdGVkRmliZXIoZmliZXIpO1xufVxuZnVuY3Rpb24gbWFya1VwZGF0ZUxhbmVGcm9tRmliZXJUb1Jvb3Qoc291cmNlRmliZXIsIHVwZGF0ZSwgbGFuZSkge1xuICBzb3VyY2VGaWJlci5sYW5lcyB8PSBsYW5lO1xuICB2YXIgYWx0ZXJuYXRlID0gc291cmNlRmliZXIuYWx0ZXJuYXRlO1xuICBudWxsICE9PSBhbHRlcm5hdGUgJiYgKGFsdGVybmF0ZS5sYW5lcyB8PSBsYW5lKTtcbiAgZm9yICh2YXIgaXNIaWRkZW4gPSAhMSwgcGFyZW50ID0gc291cmNlRmliZXIucmV0dXJuOyBudWxsICE9PSBwYXJlbnQ7IClcbiAgICAocGFyZW50LmNoaWxkTGFuZXMgfD0gbGFuZSksXG4gICAgICAoYWx0ZXJuYXRlID0gcGFyZW50LmFsdGVybmF0ZSksXG4gICAgICBudWxsICE9PSBhbHRlcm5hdGUgJiYgKGFsdGVybmF0ZS5jaGlsZExhbmVzIHw9IGxhbmUpLFxuICAgICAgMjIgPT09IHBhcmVudC50YWcgJiZcbiAgICAgICAgKChzb3VyY2VGaWJlciA9IHBhcmVudC5zdGF0ZU5vZGUpLFxuICAgICAgICBudWxsID09PSBzb3VyY2VGaWJlciB8fCBzb3VyY2VGaWJlci5fdmlzaWJpbGl0eSAmIDEgfHwgKGlzSGlkZGVuID0gITApKSxcbiAgICAgIChzb3VyY2VGaWJlciA9IHBhcmVudCksXG4gICAgICAocGFyZW50ID0gcGFyZW50LnJldHVybik7XG4gIGlzSGlkZGVuICYmXG4gICAgbnVsbCAhPT0gdXBkYXRlICYmXG4gICAgMyA9PT0gc291cmNlRmliZXIudGFnICYmXG4gICAgKChwYXJlbnQgPSBzb3VyY2VGaWJlci5zdGF0ZU5vZGUpLFxuICAgIChpc0hpZGRlbiA9IDMxIC0gY2x6MzIobGFuZSkpLFxuICAgIChwYXJlbnQgPSBwYXJlbnQuaGlkZGVuVXBkYXRlcyksXG4gICAgKHNvdXJjZUZpYmVyID0gcGFyZW50W2lzSGlkZGVuXSksXG4gICAgbnVsbCA9PT0gc291cmNlRmliZXJcbiAgICAgID8gKHBhcmVudFtpc0hpZGRlbl0gPSBbdXBkYXRlXSlcbiAgICAgIDogc291cmNlRmliZXIucHVzaCh1cGRhdGUpLFxuICAgICh1cGRhdGUubGFuZSA9IGxhbmUgfCA1MzY4NzA5MTIpKTtcbn1cbmZ1bmN0aW9uIGdldFJvb3RGb3JVcGRhdGVkRmliZXIoc291cmNlRmliZXIpIHtcbiAgaWYgKDUwIDwgbmVzdGVkVXBkYXRlQ291bnQpXG4gICAgdGhyb3cgKFxuICAgICAgKChuZXN0ZWRVcGRhdGVDb3VudCA9IDApLFxuICAgICAgKHJvb3RXaXRoTmVzdGVkVXBkYXRlcyA9IG51bGwpLFxuICAgICAgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxODUpKSlcbiAgICApO1xuICBmb3IgKHZhciBwYXJlbnQgPSBzb3VyY2VGaWJlci5yZXR1cm47IG51bGwgIT09IHBhcmVudDsgKVxuICAgIChzb3VyY2VGaWJlciA9IHBhcmVudCksIChwYXJlbnQgPSBzb3VyY2VGaWJlci5yZXR1cm4pO1xuICByZXR1cm4gMyA9PT0gc291cmNlRmliZXIudGFnID8gc291cmNlRmliZXIuc3RhdGVOb2RlIDogbnVsbDtcbn1cbnZhciBlbXB0eUNvbnRleHRPYmplY3QgPSB7fSxcbiAgQ2FwdHVyZWRTdGFja3MgPSBuZXcgV2Vha01hcCgpO1xuZnVuY3Rpb24gY3JlYXRlQ2FwdHVyZWRWYWx1ZUF0RmliZXIodmFsdWUsIHNvdXJjZSkge1xuICBpZiAoXCJvYmplY3RcIiA9PT0gdHlwZW9mIHZhbHVlICYmIG51bGwgIT09IHZhbHVlKSB7XG4gICAgdmFyIGV4aXN0aW5nID0gQ2FwdHVyZWRTdGFja3MuZ2V0KHZhbHVlKTtcbiAgICBpZiAodm9pZCAwICE9PSBleGlzdGluZykgcmV0dXJuIGV4aXN0aW5nO1xuICAgIHNvdXJjZSA9IHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIHNvdXJjZTogc291cmNlLFxuICAgICAgc3RhY2s6IGdldFN0YWNrQnlGaWJlckluRGV2QW5kUHJvZChzb3VyY2UpXG4gICAgfTtcbiAgICBDYXB0dXJlZFN0YWNrcy5zZXQodmFsdWUsIHNvdXJjZSk7XG4gICAgcmV0dXJuIHNvdXJjZTtcbiAgfVxuICByZXR1cm4ge1xuICAgIHZhbHVlOiB2YWx1ZSxcbiAgICBzb3VyY2U6IHNvdXJjZSxcbiAgICBzdGFjazogZ2V0U3RhY2tCeUZpYmVySW5EZXZBbmRQcm9kKHNvdXJjZSlcbiAgfTtcbn1cbnZhciBmb3JrU3RhY2sgPSBbXSxcbiAgZm9ya1N0YWNrSW5kZXggPSAwLFxuICB0cmVlRm9ya1Byb3ZpZGVyID0gbnVsbCxcbiAgdHJlZUZvcmtDb3VudCA9IDAsXG4gIGlkU3RhY2sgPSBbXSxcbiAgaWRTdGFja0luZGV4ID0gMCxcbiAgdHJlZUNvbnRleHRQcm92aWRlciA9IG51bGwsXG4gIHRyZWVDb250ZXh0SWQgPSAxLFxuICB0cmVlQ29udGV4dE92ZXJmbG93ID0gXCJcIjtcbmZ1bmN0aW9uIHB1c2hUcmVlRm9yayh3b3JrSW5Qcm9ncmVzcywgdG90YWxDaGlsZHJlbikge1xuICBmb3JrU3RhY2tbZm9ya1N0YWNrSW5kZXgrK10gPSB0cmVlRm9ya0NvdW50O1xuICBmb3JrU3RhY2tbZm9ya1N0YWNrSW5kZXgrK10gPSB0cmVlRm9ya1Byb3ZpZGVyO1xuICB0cmVlRm9ya1Byb3ZpZGVyID0gd29ya0luUHJvZ3Jlc3M7XG4gIHRyZWVGb3JrQ291bnQgPSB0b3RhbENoaWxkcmVuO1xufVxuZnVuY3Rpb24gcHVzaFRyZWVJZCh3b3JrSW5Qcm9ncmVzcywgdG90YWxDaGlsZHJlbiwgaW5kZXgpIHtcbiAgaWRTdGFja1tpZFN0YWNrSW5kZXgrK10gPSB0cmVlQ29udGV4dElkO1xuICBpZFN0YWNrW2lkU3RhY2tJbmRleCsrXSA9IHRyZWVDb250ZXh0T3ZlcmZsb3c7XG4gIGlkU3RhY2tbaWRTdGFja0luZGV4KytdID0gdHJlZUNvbnRleHRQcm92aWRlcjtcbiAgdHJlZUNvbnRleHRQcm92aWRlciA9IHdvcmtJblByb2dyZXNzO1xuICB2YXIgYmFzZUlkV2l0aExlYWRpbmdCaXQgPSB0cmVlQ29udGV4dElkO1xuICB3b3JrSW5Qcm9ncmVzcyA9IHRyZWVDb250ZXh0T3ZlcmZsb3c7XG4gIHZhciBiYXNlTGVuZ3RoID0gMzIgLSBjbHozMihiYXNlSWRXaXRoTGVhZGluZ0JpdCkgLSAxO1xuICBiYXNlSWRXaXRoTGVhZGluZ0JpdCAmPSB+KDEgPDwgYmFzZUxlbmd0aCk7XG4gIGluZGV4ICs9IDE7XG4gIHZhciBsZW5ndGggPSAzMiAtIGNsejMyKHRvdGFsQ2hpbGRyZW4pICsgYmFzZUxlbmd0aDtcbiAgaWYgKDMwIDwgbGVuZ3RoKSB7XG4gICAgdmFyIG51bWJlck9mT3ZlcmZsb3dCaXRzID0gYmFzZUxlbmd0aCAtIChiYXNlTGVuZ3RoICUgNSk7XG4gICAgbGVuZ3RoID0gKFxuICAgICAgYmFzZUlkV2l0aExlYWRpbmdCaXQgJlxuICAgICAgKCgxIDw8IG51bWJlck9mT3ZlcmZsb3dCaXRzKSAtIDEpXG4gICAgKS50b1N0cmluZygzMik7XG4gICAgYmFzZUlkV2l0aExlYWRpbmdCaXQgPj49IG51bWJlck9mT3ZlcmZsb3dCaXRzO1xuICAgIGJhc2VMZW5ndGggLT0gbnVtYmVyT2ZPdmVyZmxvd0JpdHM7XG4gICAgdHJlZUNvbnRleHRJZCA9XG4gICAgICAoMSA8PCAoMzIgLSBjbHozMih0b3RhbENoaWxkcmVuKSArIGJhc2VMZW5ndGgpKSB8XG4gICAgICAoaW5kZXggPDwgYmFzZUxlbmd0aCkgfFxuICAgICAgYmFzZUlkV2l0aExlYWRpbmdCaXQ7XG4gICAgdHJlZUNvbnRleHRPdmVyZmxvdyA9IGxlbmd0aCArIHdvcmtJblByb2dyZXNzO1xuICB9IGVsc2VcbiAgICAodHJlZUNvbnRleHRJZCA9XG4gICAgICAoMSA8PCBsZW5ndGgpIHwgKGluZGV4IDw8IGJhc2VMZW5ndGgpIHwgYmFzZUlkV2l0aExlYWRpbmdCaXQpLFxuICAgICAgKHRyZWVDb250ZXh0T3ZlcmZsb3cgPSB3b3JrSW5Qcm9ncmVzcyk7XG59XG5mdW5jdGlvbiBwdXNoTWF0ZXJpYWxpemVkVHJlZUlkKHdvcmtJblByb2dyZXNzKSB7XG4gIG51bGwgIT09IHdvcmtJblByb2dyZXNzLnJldHVybiAmJlxuICAgIChwdXNoVHJlZUZvcmsod29ya0luUHJvZ3Jlc3MsIDEpLCBwdXNoVHJlZUlkKHdvcmtJblByb2dyZXNzLCAxLCAwKSk7XG59XG5mdW5jdGlvbiBwb3BUcmVlQ29udGV4dCh3b3JrSW5Qcm9ncmVzcykge1xuICBmb3IgKDsgd29ya0luUHJvZ3Jlc3MgPT09IHRyZWVGb3JrUHJvdmlkZXI7IClcbiAgICAodHJlZUZvcmtQcm92aWRlciA9IGZvcmtTdGFja1stLWZvcmtTdGFja0luZGV4XSksXG4gICAgICAoZm9ya1N0YWNrW2ZvcmtTdGFja0luZGV4XSA9IG51bGwpLFxuICAgICAgKHRyZWVGb3JrQ291bnQgPSBmb3JrU3RhY2tbLS1mb3JrU3RhY2tJbmRleF0pLFxuICAgICAgKGZvcmtTdGFja1tmb3JrU3RhY2tJbmRleF0gPSBudWxsKTtcbiAgZm9yICg7IHdvcmtJblByb2dyZXNzID09PSB0cmVlQ29udGV4dFByb3ZpZGVyOyApXG4gICAgKHRyZWVDb250ZXh0UHJvdmlkZXIgPSBpZFN0YWNrWy0taWRTdGFja0luZGV4XSksXG4gICAgICAoaWRTdGFja1tpZFN0YWNrSW5kZXhdID0gbnVsbCksXG4gICAgICAodHJlZUNvbnRleHRPdmVyZmxvdyA9IGlkU3RhY2tbLS1pZFN0YWNrSW5kZXhdKSxcbiAgICAgIChpZFN0YWNrW2lkU3RhY2tJbmRleF0gPSBudWxsKSxcbiAgICAgICh0cmVlQ29udGV4dElkID0gaWRTdGFja1stLWlkU3RhY2tJbmRleF0pLFxuICAgICAgKGlkU3RhY2tbaWRTdGFja0luZGV4XSA9IG51bGwpO1xufVxudmFyIGh5ZHJhdGlvblBhcmVudEZpYmVyID0gbnVsbCxcbiAgbmV4dEh5ZHJhdGFibGVJbnN0YW5jZSA9IG51bGwsXG4gIGlzSHlkcmF0aW5nID0gITEsXG4gIGh5ZHJhdGlvbkVycm9ycyA9IG51bGwsXG4gIHJvb3RPclNpbmdsZXRvbkNvbnRleHQgPSAhMSxcbiAgSHlkcmF0aW9uTWlzbWF0Y2hFeGNlcHRpb24gPSBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDUxOSkpO1xuZnVuY3Rpb24gdGhyb3dPbkh5ZHJhdGlvbk1pc21hdGNoKGZpYmVyKSB7XG4gIHZhciBlcnJvciA9IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNDE4LCBcIlwiKSk7XG4gIHF1ZXVlSHlkcmF0aW9uRXJyb3IoY3JlYXRlQ2FwdHVyZWRWYWx1ZUF0RmliZXIoZXJyb3IsIGZpYmVyKSk7XG4gIHRocm93IEh5ZHJhdGlvbk1pc21hdGNoRXhjZXB0aW9uO1xufVxuZnVuY3Rpb24gcHJlcGFyZVRvSHlkcmF0ZUhvc3RJbnN0YW5jZShmaWJlcikge1xuICB2YXIgaW5zdGFuY2UgPSBmaWJlci5zdGF0ZU5vZGUsXG4gICAgdHlwZSA9IGZpYmVyLnR5cGUsXG4gICAgcHJvcHMgPSBmaWJlci5tZW1vaXplZFByb3BzO1xuICBpbnN0YW5jZVtpbnRlcm5hbEluc3RhbmNlS2V5XSA9IGZpYmVyO1xuICBpbnN0YW5jZVtpbnRlcm5hbFByb3BzS2V5XSA9IHByb3BzO1xuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlIFwiZGlhbG9nXCI6XG4gICAgICBsaXN0ZW5Ub05vbkRlbGVnYXRlZEV2ZW50KFwiY2FuY2VsXCIsIGluc3RhbmNlKTtcbiAgICAgIGxpc3RlblRvTm9uRGVsZWdhdGVkRXZlbnQoXCJjbG9zZVwiLCBpbnN0YW5jZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiaWZyYW1lXCI6XG4gICAgY2FzZSBcIm9iamVjdFwiOlxuICAgIGNhc2UgXCJlbWJlZFwiOlxuICAgICAgbGlzdGVuVG9Ob25EZWxlZ2F0ZWRFdmVudChcImxvYWRcIiwgaW5zdGFuY2UpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcInZpZGVvXCI6XG4gICAgY2FzZSBcImF1ZGlvXCI6XG4gICAgICBmb3IgKHR5cGUgPSAwOyB0eXBlIDwgbWVkaWFFdmVudFR5cGVzLmxlbmd0aDsgdHlwZSsrKVxuICAgICAgICBsaXN0ZW5Ub05vbkRlbGVnYXRlZEV2ZW50KG1lZGlhRXZlbnRUeXBlc1t0eXBlXSwgaW5zdGFuY2UpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcInNvdXJjZVwiOlxuICAgICAgbGlzdGVuVG9Ob25EZWxlZ2F0ZWRFdmVudChcImVycm9yXCIsIGluc3RhbmNlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJpbWdcIjpcbiAgICBjYXNlIFwiaW1hZ2VcIjpcbiAgICBjYXNlIFwibGlua1wiOlxuICAgICAgbGlzdGVuVG9Ob25EZWxlZ2F0ZWRFdmVudChcImVycm9yXCIsIGluc3RhbmNlKTtcbiAgICAgIGxpc3RlblRvTm9uRGVsZWdhdGVkRXZlbnQoXCJsb2FkXCIsIGluc3RhbmNlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJkZXRhaWxzXCI6XG4gICAgICBsaXN0ZW5Ub05vbkRlbGVnYXRlZEV2ZW50KFwidG9nZ2xlXCIsIGluc3RhbmNlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJpbnB1dFwiOlxuICAgICAgbGlzdGVuVG9Ob25EZWxlZ2F0ZWRFdmVudChcImludmFsaWRcIiwgaW5zdGFuY2UpO1xuICAgICAgaW5pdElucHV0KFxuICAgICAgICBpbnN0YW5jZSxcbiAgICAgICAgcHJvcHMudmFsdWUsXG4gICAgICAgIHByb3BzLmRlZmF1bHRWYWx1ZSxcbiAgICAgICAgcHJvcHMuY2hlY2tlZCxcbiAgICAgICAgcHJvcHMuZGVmYXVsdENoZWNrZWQsXG4gICAgICAgIHByb3BzLnR5cGUsXG4gICAgICAgIHByb3BzLm5hbWUsXG4gICAgICAgICEwXG4gICAgICApO1xuICAgICAgdHJhY2soaW5zdGFuY2UpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcInNlbGVjdFwiOlxuICAgICAgbGlzdGVuVG9Ob25EZWxlZ2F0ZWRFdmVudChcImludmFsaWRcIiwgaW5zdGFuY2UpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcInRleHRhcmVhXCI6XG4gICAgICBsaXN0ZW5Ub05vbkRlbGVnYXRlZEV2ZW50KFwiaW52YWxpZFwiLCBpbnN0YW5jZSksXG4gICAgICAgIGluaXRUZXh0YXJlYShpbnN0YW5jZSwgcHJvcHMudmFsdWUsIHByb3BzLmRlZmF1bHRWYWx1ZSwgcHJvcHMuY2hpbGRyZW4pLFxuICAgICAgICB0cmFjayhpbnN0YW5jZSk7XG4gIH1cbiAgdHlwZSA9IHByb3BzLmNoaWxkcmVuO1xuICAoXCJzdHJpbmdcIiAhPT0gdHlwZW9mIHR5cGUgJiZcbiAgICBcIm51bWJlclwiICE9PSB0eXBlb2YgdHlwZSAmJlxuICAgIFwiYmlnaW50XCIgIT09IHR5cGVvZiB0eXBlKSB8fFxuICBpbnN0YW5jZS50ZXh0Q29udGVudCA9PT0gXCJcIiArIHR5cGUgfHxcbiAgITAgPT09IHByb3BzLnN1cHByZXNzSHlkcmF0aW9uV2FybmluZyB8fFxuICBjaGVja0ZvclVubWF0Y2hlZFRleHQoaW5zdGFuY2UudGV4dENvbnRlbnQsIHR5cGUpXG4gICAgPyAobnVsbCAhPSBwcm9wcy5wb3BvdmVyICYmXG4gICAgICAgIChsaXN0ZW5Ub05vbkRlbGVnYXRlZEV2ZW50KFwiYmVmb3JldG9nZ2xlXCIsIGluc3RhbmNlKSxcbiAgICAgICAgbGlzdGVuVG9Ob25EZWxlZ2F0ZWRFdmVudChcInRvZ2dsZVwiLCBpbnN0YW5jZSkpLFxuICAgICAgbnVsbCAhPSBwcm9wcy5vblNjcm9sbCAmJiBsaXN0ZW5Ub05vbkRlbGVnYXRlZEV2ZW50KFwic2Nyb2xsXCIsIGluc3RhbmNlKSxcbiAgICAgIG51bGwgIT0gcHJvcHMub25TY3JvbGxFbmQgJiZcbiAgICAgICAgbGlzdGVuVG9Ob25EZWxlZ2F0ZWRFdmVudChcInNjcm9sbGVuZFwiLCBpbnN0YW5jZSksXG4gICAgICBudWxsICE9IHByb3BzLm9uQ2xpY2sgJiYgKGluc3RhbmNlLm9uY2xpY2sgPSBub29wJDEpLFxuICAgICAgKGluc3RhbmNlID0gITApKVxuICAgIDogKGluc3RhbmNlID0gITEpO1xuICBpbnN0YW5jZSB8fCB0aHJvd09uSHlkcmF0aW9uTWlzbWF0Y2goZmliZXIpO1xufVxuZnVuY3Rpb24gcG9wVG9OZXh0SG9zdFBhcmVudChmaWJlcikge1xuICBmb3IgKGh5ZHJhdGlvblBhcmVudEZpYmVyID0gZmliZXIucmV0dXJuOyBoeWRyYXRpb25QYXJlbnRGaWJlcjsgKVxuICAgIHN3aXRjaCAoaHlkcmF0aW9uUGFyZW50RmliZXIudGFnKSB7XG4gICAgICBjYXNlIDM6XG4gICAgICBjYXNlIDI3OlxuICAgICAgICByb290T3JTaW5nbGV0b25Db250ZXh0ID0gITA7XG4gICAgICAgIHJldHVybjtcbiAgICAgIGNhc2UgNTpcbiAgICAgIGNhc2UgMTM6XG4gICAgICAgIHJvb3RPclNpbmdsZXRvbkNvbnRleHQgPSAhMTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaHlkcmF0aW9uUGFyZW50RmliZXIgPSBoeWRyYXRpb25QYXJlbnRGaWJlci5yZXR1cm47XG4gICAgfVxufVxuZnVuY3Rpb24gcG9wSHlkcmF0aW9uU3RhdGUoZmliZXIpIHtcbiAgaWYgKGZpYmVyICE9PSBoeWRyYXRpb25QYXJlbnRGaWJlcikgcmV0dXJuICExO1xuICBpZiAoIWlzSHlkcmF0aW5nKSByZXR1cm4gcG9wVG9OZXh0SG9zdFBhcmVudChmaWJlciksIChpc0h5ZHJhdGluZyA9ICEwKSwgITE7XG4gIHZhciBzaG91bGRDbGVhciA9ICExLFxuICAgIEpTQ29tcGlsZXJfdGVtcDtcbiAgaWYgKChKU0NvbXBpbGVyX3RlbXAgPSAzICE9PSBmaWJlci50YWcgJiYgMjcgIT09IGZpYmVyLnRhZykpIHtcbiAgICBpZiAoKEpTQ29tcGlsZXJfdGVtcCA9IDUgPT09IGZpYmVyLnRhZykpXG4gICAgICAoSlNDb21waWxlcl90ZW1wID0gZmliZXIudHlwZSksXG4gICAgICAgIChKU0NvbXBpbGVyX3RlbXAgPVxuICAgICAgICAgICEoXCJmb3JtXCIgIT09IEpTQ29tcGlsZXJfdGVtcCAmJiBcImJ1dHRvblwiICE9PSBKU0NvbXBpbGVyX3RlbXApIHx8XG4gICAgICAgICAgc2hvdWxkU2V0VGV4dENvbnRlbnQoZmliZXIudHlwZSwgZmliZXIubWVtb2l6ZWRQcm9wcykpO1xuICAgIEpTQ29tcGlsZXJfdGVtcCA9ICFKU0NvbXBpbGVyX3RlbXA7XG4gIH1cbiAgSlNDb21waWxlcl90ZW1wICYmIChzaG91bGRDbGVhciA9ICEwKTtcbiAgc2hvdWxkQ2xlYXIgJiYgbmV4dEh5ZHJhdGFibGVJbnN0YW5jZSAmJiB0aHJvd09uSHlkcmF0aW9uTWlzbWF0Y2goZmliZXIpO1xuICBwb3BUb05leHRIb3N0UGFyZW50KGZpYmVyKTtcbiAgaWYgKDEzID09PSBmaWJlci50YWcpIHtcbiAgICBmaWJlciA9IGZpYmVyLm1lbW9pemVkU3RhdGU7XG4gICAgZmliZXIgPSBudWxsICE9PSBmaWJlciA/IGZpYmVyLmRlaHlkcmF0ZWQgOiBudWxsO1xuICAgIGlmICghZmliZXIpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMzE3KSk7XG4gICAgYToge1xuICAgICAgZmliZXIgPSBmaWJlci5uZXh0U2libGluZztcbiAgICAgIGZvciAoc2hvdWxkQ2xlYXIgPSAwOyBmaWJlcjsgKSB7XG4gICAgICAgIGlmICg4ID09PSBmaWJlci5ub2RlVHlwZSlcbiAgICAgICAgICBpZiAoKChKU0NvbXBpbGVyX3RlbXAgPSBmaWJlci5kYXRhKSwgXCIvJFwiID09PSBKU0NvbXBpbGVyX3RlbXApKSB7XG4gICAgICAgICAgICBpZiAoMCA9PT0gc2hvdWxkQ2xlYXIpIHtcbiAgICAgICAgICAgICAgbmV4dEh5ZHJhdGFibGVJbnN0YW5jZSA9IGdldE5leHRIeWRyYXRhYmxlKGZpYmVyLm5leHRTaWJsaW5nKTtcbiAgICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNob3VsZENsZWFyLS07XG4gICAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICAoXCIkXCIgIT09IEpTQ29tcGlsZXJfdGVtcCAmJlxuICAgICAgICAgICAgICBcIiQhXCIgIT09IEpTQ29tcGlsZXJfdGVtcCAmJlxuICAgICAgICAgICAgICBcIiQ/XCIgIT09IEpTQ29tcGlsZXJfdGVtcCkgfHxcbiAgICAgICAgICAgICAgc2hvdWxkQ2xlYXIrKztcbiAgICAgICAgZmliZXIgPSBmaWJlci5uZXh0U2libGluZztcbiAgICAgIH1cbiAgICAgIG5leHRIeWRyYXRhYmxlSW5zdGFuY2UgPSBudWxsO1xuICAgIH1cbiAgfSBlbHNlXG4gICAgbmV4dEh5ZHJhdGFibGVJbnN0YW5jZSA9IGh5ZHJhdGlvblBhcmVudEZpYmVyXG4gICAgICA/IGdldE5leHRIeWRyYXRhYmxlKGZpYmVyLnN0YXRlTm9kZS5uZXh0U2libGluZylcbiAgICAgIDogbnVsbDtcbiAgcmV0dXJuICEwO1xufVxuZnVuY3Rpb24gcmVzZXRIeWRyYXRpb25TdGF0ZSgpIHtcbiAgbmV4dEh5ZHJhdGFibGVJbnN0YW5jZSA9IGh5ZHJhdGlvblBhcmVudEZpYmVyID0gbnVsbDtcbiAgaXNIeWRyYXRpbmcgPSAhMTtcbn1cbmZ1bmN0aW9uIHF1ZXVlSHlkcmF0aW9uRXJyb3IoZXJyb3IpIHtcbiAgbnVsbCA9PT0gaHlkcmF0aW9uRXJyb3JzXG4gICAgPyAoaHlkcmF0aW9uRXJyb3JzID0gW2Vycm9yXSlcbiAgICA6IGh5ZHJhdGlvbkVycm9ycy5wdXNoKGVycm9yKTtcbn1cbnZhciBTdXNwZW5zZUV4Y2VwdGlvbiA9IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNDYwKSksXG4gIFN1c3BlbnNleUNvbW1pdEV4Y2VwdGlvbiA9IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNDc0KSksXG4gIG5vb3BTdXNwZW5zZXlDb21taXRUaGVuYWJsZSA9IHsgdGhlbjogZnVuY3Rpb24gKCkge30gfTtcbmZ1bmN0aW9uIGlzVGhlbmFibGVSZXNvbHZlZCh0aGVuYWJsZSkge1xuICB0aGVuYWJsZSA9IHRoZW5hYmxlLnN0YXR1cztcbiAgcmV0dXJuIFwiZnVsZmlsbGVkXCIgPT09IHRoZW5hYmxlIHx8IFwicmVqZWN0ZWRcIiA9PT0gdGhlbmFibGU7XG59XG5mdW5jdGlvbiBub29wJDMoKSB7fVxuZnVuY3Rpb24gdHJhY2tVc2VkVGhlbmFibGUodGhlbmFibGVTdGF0ZSwgdGhlbmFibGUsIGluZGV4KSB7XG4gIGluZGV4ID0gdGhlbmFibGVTdGF0ZVtpbmRleF07XG4gIHZvaWQgMCA9PT0gaW5kZXhcbiAgICA/IHRoZW5hYmxlU3RhdGUucHVzaCh0aGVuYWJsZSlcbiAgICA6IGluZGV4ICE9PSB0aGVuYWJsZSAmJiAodGhlbmFibGUudGhlbihub29wJDMsIG5vb3AkMyksICh0aGVuYWJsZSA9IGluZGV4KSk7XG4gIHN3aXRjaCAodGhlbmFibGUuc3RhdHVzKSB7XG4gICAgY2FzZSBcImZ1bGZpbGxlZFwiOlxuICAgICAgcmV0dXJuIHRoZW5hYmxlLnZhbHVlO1xuICAgIGNhc2UgXCJyZWplY3RlZFwiOlxuICAgICAgdGhlbmFibGVTdGF0ZSA9IHRoZW5hYmxlLnJlYXNvbjtcbiAgICAgIGlmICh0aGVuYWJsZVN0YXRlID09PSBTdXNwZW5zZUV4Y2VwdGlvbilcbiAgICAgICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg0ODMpKTtcbiAgICAgIHRocm93IHRoZW5hYmxlU3RhdGU7XG4gICAgZGVmYXVsdDpcbiAgICAgIGlmIChcInN0cmluZ1wiID09PSB0eXBlb2YgdGhlbmFibGUuc3RhdHVzKSB0aGVuYWJsZS50aGVuKG5vb3AkMywgbm9vcCQzKTtcbiAgICAgIGVsc2Uge1xuICAgICAgICB0aGVuYWJsZVN0YXRlID0gd29ya0luUHJvZ3Jlc3NSb290O1xuICAgICAgICBpZiAobnVsbCAhPT0gdGhlbmFibGVTdGF0ZSAmJiAxMDAgPCB0aGVuYWJsZVN0YXRlLnNoZWxsU3VzcGVuZENvdW50ZXIpXG4gICAgICAgICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg0ODIpKTtcbiAgICAgICAgdGhlbmFibGVTdGF0ZSA9IHRoZW5hYmxlO1xuICAgICAgICB0aGVuYWJsZVN0YXRlLnN0YXR1cyA9IFwicGVuZGluZ1wiO1xuICAgICAgICB0aGVuYWJsZVN0YXRlLnRoZW4oXG4gICAgICAgICAgZnVuY3Rpb24gKGZ1bGZpbGxlZFZhbHVlKSB7XG4gICAgICAgICAgICBpZiAoXCJwZW5kaW5nXCIgPT09IHRoZW5hYmxlLnN0YXR1cykge1xuICAgICAgICAgICAgICB2YXIgZnVsZmlsbGVkVGhlbmFibGUgPSB0aGVuYWJsZTtcbiAgICAgICAgICAgICAgZnVsZmlsbGVkVGhlbmFibGUuc3RhdHVzID0gXCJmdWxmaWxsZWRcIjtcbiAgICAgICAgICAgICAgZnVsZmlsbGVkVGhlbmFibGUudmFsdWUgPSBmdWxmaWxsZWRWYWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgaWYgKFwicGVuZGluZ1wiID09PSB0aGVuYWJsZS5zdGF0dXMpIHtcbiAgICAgICAgICAgICAgdmFyIHJlamVjdGVkVGhlbmFibGUgPSB0aGVuYWJsZTtcbiAgICAgICAgICAgICAgcmVqZWN0ZWRUaGVuYWJsZS5zdGF0dXMgPSBcInJlamVjdGVkXCI7XG4gICAgICAgICAgICAgIHJlamVjdGVkVGhlbmFibGUucmVhc29uID0gZXJyb3I7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgc3dpdGNoICh0aGVuYWJsZS5zdGF0dXMpIHtcbiAgICAgICAgY2FzZSBcImZ1bGZpbGxlZFwiOlxuICAgICAgICAgIHJldHVybiB0aGVuYWJsZS52YWx1ZTtcbiAgICAgICAgY2FzZSBcInJlamVjdGVkXCI6XG4gICAgICAgICAgdGhlbmFibGVTdGF0ZSA9IHRoZW5hYmxlLnJlYXNvbjtcbiAgICAgICAgICBpZiAodGhlbmFibGVTdGF0ZSA9PT0gU3VzcGVuc2VFeGNlcHRpb24pXG4gICAgICAgICAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDQ4MykpO1xuICAgICAgICAgIHRocm93IHRoZW5hYmxlU3RhdGU7XG4gICAgICB9XG4gICAgICBzdXNwZW5kZWRUaGVuYWJsZSA9IHRoZW5hYmxlO1xuICAgICAgdGhyb3cgU3VzcGVuc2VFeGNlcHRpb247XG4gIH1cbn1cbnZhciBzdXNwZW5kZWRUaGVuYWJsZSA9IG51bGw7XG5mdW5jdGlvbiBnZXRTdXNwZW5kZWRUaGVuYWJsZSgpIHtcbiAgaWYgKG51bGwgPT09IHN1c3BlbmRlZFRoZW5hYmxlKSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDQ1OSkpO1xuICB2YXIgdGhlbmFibGUgPSBzdXNwZW5kZWRUaGVuYWJsZTtcbiAgc3VzcGVuZGVkVGhlbmFibGUgPSBudWxsO1xuICByZXR1cm4gdGhlbmFibGU7XG59XG52YXIgdGhlbmFibGVTdGF0ZSQxID0gbnVsbCxcbiAgdGhlbmFibGVJbmRleENvdW50ZXIkMSA9IDA7XG5mdW5jdGlvbiB1bndyYXBUaGVuYWJsZSh0aGVuYWJsZSkge1xuICB2YXIgaW5kZXggPSB0aGVuYWJsZUluZGV4Q291bnRlciQxO1xuICB0aGVuYWJsZUluZGV4Q291bnRlciQxICs9IDE7XG4gIG51bGwgPT09IHRoZW5hYmxlU3RhdGUkMSAmJiAodGhlbmFibGVTdGF0ZSQxID0gW10pO1xuICByZXR1cm4gdHJhY2tVc2VkVGhlbmFibGUodGhlbmFibGVTdGF0ZSQxLCB0aGVuYWJsZSwgaW5kZXgpO1xufVxuZnVuY3Rpb24gY29lcmNlUmVmKHdvcmtJblByb2dyZXNzLCBlbGVtZW50KSB7XG4gIGVsZW1lbnQgPSBlbGVtZW50LnByb3BzLnJlZjtcbiAgd29ya0luUHJvZ3Jlc3MucmVmID0gdm9pZCAwICE9PSBlbGVtZW50ID8gZWxlbWVudCA6IG51bGw7XG59XG5mdW5jdGlvbiB0aHJvd09uSW52YWxpZE9iamVjdFR5cGUocmV0dXJuRmliZXIsIG5ld0NoaWxkKSB7XG4gIGlmIChuZXdDaGlsZC4kJHR5cGVvZiA9PT0gUkVBQ1RfTEVHQUNZX0VMRU1FTlRfVFlQRSlcbiAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDUyNSkpO1xuICByZXR1cm5GaWJlciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChuZXdDaGlsZCk7XG4gIHRocm93IEVycm9yKFxuICAgIGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoXG4gICAgICAzMSxcbiAgICAgIFwiW29iamVjdCBPYmplY3RdXCIgPT09IHJldHVybkZpYmVyXG4gICAgICAgID8gXCJvYmplY3Qgd2l0aCBrZXlzIHtcIiArIE9iamVjdC5rZXlzKG5ld0NoaWxkKS5qb2luKFwiLCBcIikgKyBcIn1cIlxuICAgICAgICA6IHJldHVybkZpYmVyXG4gICAgKVxuICApO1xufVxuZnVuY3Rpb24gcmVzb2x2ZUxhenkobGF6eVR5cGUpIHtcbiAgdmFyIGluaXQgPSBsYXp5VHlwZS5faW5pdDtcbiAgcmV0dXJuIGluaXQobGF6eVR5cGUuX3BheWxvYWQpO1xufVxuZnVuY3Rpb24gY3JlYXRlQ2hpbGRSZWNvbmNpbGVyKHNob3VsZFRyYWNrU2lkZUVmZmVjdHMpIHtcbiAgZnVuY3Rpb24gZGVsZXRlQ2hpbGQocmV0dXJuRmliZXIsIGNoaWxkVG9EZWxldGUpIHtcbiAgICBpZiAoc2hvdWxkVHJhY2tTaWRlRWZmZWN0cykge1xuICAgICAgdmFyIGRlbGV0aW9ucyA9IHJldHVybkZpYmVyLmRlbGV0aW9ucztcbiAgICAgIG51bGwgPT09IGRlbGV0aW9uc1xuICAgICAgICA/ICgocmV0dXJuRmliZXIuZGVsZXRpb25zID0gW2NoaWxkVG9EZWxldGVdKSwgKHJldHVybkZpYmVyLmZsYWdzIHw9IDE2KSlcbiAgICAgICAgOiBkZWxldGlvbnMucHVzaChjaGlsZFRvRGVsZXRlKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gZGVsZXRlUmVtYWluaW5nQ2hpbGRyZW4ocmV0dXJuRmliZXIsIGN1cnJlbnRGaXJzdENoaWxkKSB7XG4gICAgaWYgKCFzaG91bGRUcmFja1NpZGVFZmZlY3RzKSByZXR1cm4gbnVsbDtcbiAgICBmb3IgKDsgbnVsbCAhPT0gY3VycmVudEZpcnN0Q2hpbGQ7IClcbiAgICAgIGRlbGV0ZUNoaWxkKHJldHVybkZpYmVyLCBjdXJyZW50Rmlyc3RDaGlsZCksXG4gICAgICAgIChjdXJyZW50Rmlyc3RDaGlsZCA9IGN1cnJlbnRGaXJzdENoaWxkLnNpYmxpbmcpO1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGZ1bmN0aW9uIG1hcFJlbWFpbmluZ0NoaWxkcmVuKGN1cnJlbnRGaXJzdENoaWxkKSB7XG4gICAgZm9yICh2YXIgZXhpc3RpbmdDaGlsZHJlbiA9IG5ldyBNYXAoKTsgbnVsbCAhPT0gY3VycmVudEZpcnN0Q2hpbGQ7IClcbiAgICAgIG51bGwgIT09IGN1cnJlbnRGaXJzdENoaWxkLmtleVxuICAgICAgICA/IGV4aXN0aW5nQ2hpbGRyZW4uc2V0KGN1cnJlbnRGaXJzdENoaWxkLmtleSwgY3VycmVudEZpcnN0Q2hpbGQpXG4gICAgICAgIDogZXhpc3RpbmdDaGlsZHJlbi5zZXQoY3VycmVudEZpcnN0Q2hpbGQuaW5kZXgsIGN1cnJlbnRGaXJzdENoaWxkKSxcbiAgICAgICAgKGN1cnJlbnRGaXJzdENoaWxkID0gY3VycmVudEZpcnN0Q2hpbGQuc2libGluZyk7XG4gICAgcmV0dXJuIGV4aXN0aW5nQ2hpbGRyZW47XG4gIH1cbiAgZnVuY3Rpb24gdXNlRmliZXIoZmliZXIsIHBlbmRpbmdQcm9wcykge1xuICAgIGZpYmVyID0gY3JlYXRlV29ya0luUHJvZ3Jlc3MoZmliZXIsIHBlbmRpbmdQcm9wcyk7XG4gICAgZmliZXIuaW5kZXggPSAwO1xuICAgIGZpYmVyLnNpYmxpbmcgPSBudWxsO1xuICAgIHJldHVybiBmaWJlcjtcbiAgfVxuICBmdW5jdGlvbiBwbGFjZUNoaWxkKG5ld0ZpYmVyLCBsYXN0UGxhY2VkSW5kZXgsIG5ld0luZGV4KSB7XG4gICAgbmV3RmliZXIuaW5kZXggPSBuZXdJbmRleDtcbiAgICBpZiAoIXNob3VsZFRyYWNrU2lkZUVmZmVjdHMpXG4gICAgICByZXR1cm4gKG5ld0ZpYmVyLmZsYWdzIHw9IDEwNDg1NzYpLCBsYXN0UGxhY2VkSW5kZXg7XG4gICAgbmV3SW5kZXggPSBuZXdGaWJlci5hbHRlcm5hdGU7XG4gICAgaWYgKG51bGwgIT09IG5ld0luZGV4KVxuICAgICAgcmV0dXJuIChcbiAgICAgICAgKG5ld0luZGV4ID0gbmV3SW5kZXguaW5kZXgpLFxuICAgICAgICBuZXdJbmRleCA8IGxhc3RQbGFjZWRJbmRleFxuICAgICAgICAgID8gKChuZXdGaWJlci5mbGFncyB8PSAzMzU1NDQzNCksIGxhc3RQbGFjZWRJbmRleClcbiAgICAgICAgICA6IG5ld0luZGV4XG4gICAgICApO1xuICAgIG5ld0ZpYmVyLmZsYWdzIHw9IDMzNTU0NDM0O1xuICAgIHJldHVybiBsYXN0UGxhY2VkSW5kZXg7XG4gIH1cbiAgZnVuY3Rpb24gcGxhY2VTaW5nbGVDaGlsZChuZXdGaWJlcikge1xuICAgIHNob3VsZFRyYWNrU2lkZUVmZmVjdHMgJiZcbiAgICAgIG51bGwgPT09IG5ld0ZpYmVyLmFsdGVybmF0ZSAmJlxuICAgICAgKG5ld0ZpYmVyLmZsYWdzIHw9IDMzNTU0NDM0KTtcbiAgICByZXR1cm4gbmV3RmliZXI7XG4gIH1cbiAgZnVuY3Rpb24gdXBkYXRlVGV4dE5vZGUocmV0dXJuRmliZXIsIGN1cnJlbnQsIHRleHRDb250ZW50LCBsYW5lcykge1xuICAgIGlmIChudWxsID09PSBjdXJyZW50IHx8IDYgIT09IGN1cnJlbnQudGFnKVxuICAgICAgcmV0dXJuIChcbiAgICAgICAgKGN1cnJlbnQgPSBjcmVhdGVGaWJlckZyb21UZXh0KHRleHRDb250ZW50LCByZXR1cm5GaWJlci5tb2RlLCBsYW5lcykpLFxuICAgICAgICAoY3VycmVudC5yZXR1cm4gPSByZXR1cm5GaWJlciksXG4gICAgICAgIGN1cnJlbnRcbiAgICAgICk7XG4gICAgY3VycmVudCA9IHVzZUZpYmVyKGN1cnJlbnQsIHRleHRDb250ZW50KTtcbiAgICBjdXJyZW50LnJldHVybiA9IHJldHVybkZpYmVyO1xuICAgIHJldHVybiBjdXJyZW50O1xuICB9XG4gIGZ1bmN0aW9uIHVwZGF0ZUVsZW1lbnQocmV0dXJuRmliZXIsIGN1cnJlbnQsIGVsZW1lbnQsIGxhbmVzKSB7XG4gICAgdmFyIGVsZW1lbnRUeXBlID0gZWxlbWVudC50eXBlO1xuICAgIGlmIChlbGVtZW50VHlwZSA9PT0gUkVBQ1RfRlJBR01FTlRfVFlQRSlcbiAgICAgIHJldHVybiB1cGRhdGVGcmFnbWVudChcbiAgICAgICAgcmV0dXJuRmliZXIsXG4gICAgICAgIGN1cnJlbnQsXG4gICAgICAgIGVsZW1lbnQucHJvcHMuY2hpbGRyZW4sXG4gICAgICAgIGxhbmVzLFxuICAgICAgICBlbGVtZW50LmtleVxuICAgICAgKTtcbiAgICBpZiAoXG4gICAgICBudWxsICE9PSBjdXJyZW50ICYmXG4gICAgICAoY3VycmVudC5lbGVtZW50VHlwZSA9PT0gZWxlbWVudFR5cGUgfHxcbiAgICAgICAgKFwib2JqZWN0XCIgPT09IHR5cGVvZiBlbGVtZW50VHlwZSAmJlxuICAgICAgICAgIG51bGwgIT09IGVsZW1lbnRUeXBlICYmXG4gICAgICAgICAgZWxlbWVudFR5cGUuJCR0eXBlb2YgPT09IFJFQUNUX0xBWllfVFlQRSAmJlxuICAgICAgICAgIHJlc29sdmVMYXp5KGVsZW1lbnRUeXBlKSA9PT0gY3VycmVudC50eXBlKSlcbiAgICApXG4gICAgICByZXR1cm4gKFxuICAgICAgICAoY3VycmVudCA9IHVzZUZpYmVyKGN1cnJlbnQsIGVsZW1lbnQucHJvcHMpKSxcbiAgICAgICAgY29lcmNlUmVmKGN1cnJlbnQsIGVsZW1lbnQpLFxuICAgICAgICAoY3VycmVudC5yZXR1cm4gPSByZXR1cm5GaWJlciksXG4gICAgICAgIGN1cnJlbnRcbiAgICAgICk7XG4gICAgY3VycmVudCA9IGNyZWF0ZUZpYmVyRnJvbVR5cGVBbmRQcm9wcyhcbiAgICAgIGVsZW1lbnQudHlwZSxcbiAgICAgIGVsZW1lbnQua2V5LFxuICAgICAgZWxlbWVudC5wcm9wcyxcbiAgICAgIG51bGwsXG4gICAgICByZXR1cm5GaWJlci5tb2RlLFxuICAgICAgbGFuZXNcbiAgICApO1xuICAgIGNvZXJjZVJlZihjdXJyZW50LCBlbGVtZW50KTtcbiAgICBjdXJyZW50LnJldHVybiA9IHJldHVybkZpYmVyO1xuICAgIHJldHVybiBjdXJyZW50O1xuICB9XG4gIGZ1bmN0aW9uIHVwZGF0ZVBvcnRhbChyZXR1cm5GaWJlciwgY3VycmVudCwgcG9ydGFsLCBsYW5lcykge1xuICAgIGlmIChcbiAgICAgIG51bGwgPT09IGN1cnJlbnQgfHxcbiAgICAgIDQgIT09IGN1cnJlbnQudGFnIHx8XG4gICAgICBjdXJyZW50LnN0YXRlTm9kZS5jb250YWluZXJJbmZvICE9PSBwb3J0YWwuY29udGFpbmVySW5mbyB8fFxuICAgICAgY3VycmVudC5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb24gIT09IHBvcnRhbC5pbXBsZW1lbnRhdGlvblxuICAgIClcbiAgICAgIHJldHVybiAoXG4gICAgICAgIChjdXJyZW50ID0gY3JlYXRlRmliZXJGcm9tUG9ydGFsKHBvcnRhbCwgcmV0dXJuRmliZXIubW9kZSwgbGFuZXMpKSxcbiAgICAgICAgKGN1cnJlbnQucmV0dXJuID0gcmV0dXJuRmliZXIpLFxuICAgICAgICBjdXJyZW50XG4gICAgICApO1xuICAgIGN1cnJlbnQgPSB1c2VGaWJlcihjdXJyZW50LCBwb3J0YWwuY2hpbGRyZW4gfHwgW10pO1xuICAgIGN1cnJlbnQucmV0dXJuID0gcmV0dXJuRmliZXI7XG4gICAgcmV0dXJuIGN1cnJlbnQ7XG4gIH1cbiAgZnVuY3Rpb24gdXBkYXRlRnJhZ21lbnQocmV0dXJuRmliZXIsIGN1cnJlbnQsIGZyYWdtZW50LCBsYW5lcywga2V5KSB7XG4gICAgaWYgKG51bGwgPT09IGN1cnJlbnQgfHwgNyAhPT0gY3VycmVudC50YWcpXG4gICAgICByZXR1cm4gKFxuICAgICAgICAoY3VycmVudCA9IGNyZWF0ZUZpYmVyRnJvbUZyYWdtZW50KFxuICAgICAgICAgIGZyYWdtZW50LFxuICAgICAgICAgIHJldHVybkZpYmVyLm1vZGUsXG4gICAgICAgICAgbGFuZXMsXG4gICAgICAgICAga2V5XG4gICAgICAgICkpLFxuICAgICAgICAoY3VycmVudC5yZXR1cm4gPSByZXR1cm5GaWJlciksXG4gICAgICAgIGN1cnJlbnRcbiAgICAgICk7XG4gICAgY3VycmVudCA9IHVzZUZpYmVyKGN1cnJlbnQsIGZyYWdtZW50KTtcbiAgICBjdXJyZW50LnJldHVybiA9IHJldHVybkZpYmVyO1xuICAgIHJldHVybiBjdXJyZW50O1xuICB9XG4gIGZ1bmN0aW9uIGNyZWF0ZUNoaWxkKHJldHVybkZpYmVyLCBuZXdDaGlsZCwgbGFuZXMpIHtcbiAgICBpZiAoXG4gICAgICAoXCJzdHJpbmdcIiA9PT0gdHlwZW9mIG5ld0NoaWxkICYmIFwiXCIgIT09IG5ld0NoaWxkKSB8fFxuICAgICAgXCJudW1iZXJcIiA9PT0gdHlwZW9mIG5ld0NoaWxkIHx8XG4gICAgICBcImJpZ2ludFwiID09PSB0eXBlb2YgbmV3Q2hpbGRcbiAgICApXG4gICAgICByZXR1cm4gKFxuICAgICAgICAobmV3Q2hpbGQgPSBjcmVhdGVGaWJlckZyb21UZXh0KFxuICAgICAgICAgIFwiXCIgKyBuZXdDaGlsZCxcbiAgICAgICAgICByZXR1cm5GaWJlci5tb2RlLFxuICAgICAgICAgIGxhbmVzXG4gICAgICAgICkpLFxuICAgICAgICAobmV3Q2hpbGQucmV0dXJuID0gcmV0dXJuRmliZXIpLFxuICAgICAgICBuZXdDaGlsZFxuICAgICAgKTtcbiAgICBpZiAoXCJvYmplY3RcIiA9PT0gdHlwZW9mIG5ld0NoaWxkICYmIG51bGwgIT09IG5ld0NoaWxkKSB7XG4gICAgICBzd2l0Y2ggKG5ld0NoaWxkLiQkdHlwZW9mKSB7XG4gICAgICAgIGNhc2UgUkVBQ1RfRUxFTUVOVF9UWVBFOlxuICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAobGFuZXMgPSBjcmVhdGVGaWJlckZyb21UeXBlQW5kUHJvcHMoXG4gICAgICAgICAgICAgIG5ld0NoaWxkLnR5cGUsXG4gICAgICAgICAgICAgIG5ld0NoaWxkLmtleSxcbiAgICAgICAgICAgICAgbmV3Q2hpbGQucHJvcHMsXG4gICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgIHJldHVybkZpYmVyLm1vZGUsXG4gICAgICAgICAgICAgIGxhbmVzXG4gICAgICAgICAgICApKSxcbiAgICAgICAgICAgIGNvZXJjZVJlZihsYW5lcywgbmV3Q2hpbGQpLFxuICAgICAgICAgICAgKGxhbmVzLnJldHVybiA9IHJldHVybkZpYmVyKSxcbiAgICAgICAgICAgIGxhbmVzXG4gICAgICAgICAgKTtcbiAgICAgICAgY2FzZSBSRUFDVF9QT1JUQUxfVFlQRTpcbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgKG5ld0NoaWxkID0gY3JlYXRlRmliZXJGcm9tUG9ydGFsKFxuICAgICAgICAgICAgICBuZXdDaGlsZCxcbiAgICAgICAgICAgICAgcmV0dXJuRmliZXIubW9kZSxcbiAgICAgICAgICAgICAgbGFuZXNcbiAgICAgICAgICAgICkpLFxuICAgICAgICAgICAgKG5ld0NoaWxkLnJldHVybiA9IHJldHVybkZpYmVyKSxcbiAgICAgICAgICAgIG5ld0NoaWxkXG4gICAgICAgICAgKTtcbiAgICAgICAgY2FzZSBSRUFDVF9MQVpZX1RZUEU6XG4gICAgICAgICAgdmFyIGluaXQgPSBuZXdDaGlsZC5faW5pdDtcbiAgICAgICAgICBuZXdDaGlsZCA9IGluaXQobmV3Q2hpbGQuX3BheWxvYWQpO1xuICAgICAgICAgIHJldHVybiBjcmVhdGVDaGlsZChyZXR1cm5GaWJlciwgbmV3Q2hpbGQsIGxhbmVzKTtcbiAgICAgIH1cbiAgICAgIGlmIChpc0FycmF5SW1wbChuZXdDaGlsZCkgfHwgZ2V0SXRlcmF0b3JGbihuZXdDaGlsZCkpXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgKG5ld0NoaWxkID0gY3JlYXRlRmliZXJGcm9tRnJhZ21lbnQoXG4gICAgICAgICAgICBuZXdDaGlsZCxcbiAgICAgICAgICAgIHJldHVybkZpYmVyLm1vZGUsXG4gICAgICAgICAgICBsYW5lcyxcbiAgICAgICAgICAgIG51bGxcbiAgICAgICAgICApKSxcbiAgICAgICAgICAobmV3Q2hpbGQucmV0dXJuID0gcmV0dXJuRmliZXIpLFxuICAgICAgICAgIG5ld0NoaWxkXG4gICAgICAgICk7XG4gICAgICBpZiAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgbmV3Q2hpbGQudGhlbilcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUNoaWxkKHJldHVybkZpYmVyLCB1bndyYXBUaGVuYWJsZShuZXdDaGlsZCksIGxhbmVzKTtcbiAgICAgIGlmIChuZXdDaGlsZC4kJHR5cGVvZiA9PT0gUkVBQ1RfQ09OVEVYVF9UWVBFKVxuICAgICAgICByZXR1cm4gY3JlYXRlQ2hpbGQoXG4gICAgICAgICAgcmV0dXJuRmliZXIsXG4gICAgICAgICAgcmVhZENvbnRleHREdXJpbmdSZWNvbmNpbGlhdGlvbihyZXR1cm5GaWJlciwgbmV3Q2hpbGQpLFxuICAgICAgICAgIGxhbmVzXG4gICAgICAgICk7XG4gICAgICB0aHJvd09uSW52YWxpZE9iamVjdFR5cGUocmV0dXJuRmliZXIsIG5ld0NoaWxkKTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgZnVuY3Rpb24gdXBkYXRlU2xvdChyZXR1cm5GaWJlciwgb2xkRmliZXIsIG5ld0NoaWxkLCBsYW5lcykge1xuICAgIHZhciBrZXkgPSBudWxsICE9PSBvbGRGaWJlciA/IG9sZEZpYmVyLmtleSA6IG51bGw7XG4gICAgaWYgKFxuICAgICAgKFwic3RyaW5nXCIgPT09IHR5cGVvZiBuZXdDaGlsZCAmJiBcIlwiICE9PSBuZXdDaGlsZCkgfHxcbiAgICAgIFwibnVtYmVyXCIgPT09IHR5cGVvZiBuZXdDaGlsZCB8fFxuICAgICAgXCJiaWdpbnRcIiA9PT0gdHlwZW9mIG5ld0NoaWxkXG4gICAgKVxuICAgICAgcmV0dXJuIG51bGwgIT09IGtleVxuICAgICAgICA/IG51bGxcbiAgICAgICAgOiB1cGRhdGVUZXh0Tm9kZShyZXR1cm5GaWJlciwgb2xkRmliZXIsIFwiXCIgKyBuZXdDaGlsZCwgbGFuZXMpO1xuICAgIGlmIChcIm9iamVjdFwiID09PSB0eXBlb2YgbmV3Q2hpbGQgJiYgbnVsbCAhPT0gbmV3Q2hpbGQpIHtcbiAgICAgIHN3aXRjaCAobmV3Q2hpbGQuJCR0eXBlb2YpIHtcbiAgICAgICAgY2FzZSBSRUFDVF9FTEVNRU5UX1RZUEU6XG4gICAgICAgICAgcmV0dXJuIG5ld0NoaWxkLmtleSA9PT0ga2V5XG4gICAgICAgICAgICA/IHVwZGF0ZUVsZW1lbnQocmV0dXJuRmliZXIsIG9sZEZpYmVyLCBuZXdDaGlsZCwgbGFuZXMpXG4gICAgICAgICAgICA6IG51bGw7XG4gICAgICAgIGNhc2UgUkVBQ1RfUE9SVEFMX1RZUEU6XG4gICAgICAgICAgcmV0dXJuIG5ld0NoaWxkLmtleSA9PT0ga2V5XG4gICAgICAgICAgICA/IHVwZGF0ZVBvcnRhbChyZXR1cm5GaWJlciwgb2xkRmliZXIsIG5ld0NoaWxkLCBsYW5lcylcbiAgICAgICAgICAgIDogbnVsbDtcbiAgICAgICAgY2FzZSBSRUFDVF9MQVpZX1RZUEU6XG4gICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIChrZXkgPSBuZXdDaGlsZC5faW5pdCksXG4gICAgICAgICAgICAobmV3Q2hpbGQgPSBrZXkobmV3Q2hpbGQuX3BheWxvYWQpKSxcbiAgICAgICAgICAgIHVwZGF0ZVNsb3QocmV0dXJuRmliZXIsIG9sZEZpYmVyLCBuZXdDaGlsZCwgbGFuZXMpXG4gICAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGlmIChpc0FycmF5SW1wbChuZXdDaGlsZCkgfHwgZ2V0SXRlcmF0b3JGbihuZXdDaGlsZCkpXG4gICAgICAgIHJldHVybiBudWxsICE9PSBrZXlcbiAgICAgICAgICA/IG51bGxcbiAgICAgICAgICA6IHVwZGF0ZUZyYWdtZW50KHJldHVybkZpYmVyLCBvbGRGaWJlciwgbmV3Q2hpbGQsIGxhbmVzLCBudWxsKTtcbiAgICAgIGlmIChcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBuZXdDaGlsZC50aGVuKVxuICAgICAgICByZXR1cm4gdXBkYXRlU2xvdChcbiAgICAgICAgICByZXR1cm5GaWJlcixcbiAgICAgICAgICBvbGRGaWJlcixcbiAgICAgICAgICB1bndyYXBUaGVuYWJsZShuZXdDaGlsZCksXG4gICAgICAgICAgbGFuZXNcbiAgICAgICAgKTtcbiAgICAgIGlmIChuZXdDaGlsZC4kJHR5cGVvZiA9PT0gUkVBQ1RfQ09OVEVYVF9UWVBFKVxuICAgICAgICByZXR1cm4gdXBkYXRlU2xvdChcbiAgICAgICAgICByZXR1cm5GaWJlcixcbiAgICAgICAgICBvbGRGaWJlcixcbiAgICAgICAgICByZWFkQ29udGV4dER1cmluZ1JlY29uY2lsaWF0aW9uKHJldHVybkZpYmVyLCBuZXdDaGlsZCksXG4gICAgICAgICAgbGFuZXNcbiAgICAgICAgKTtcbiAgICAgIHRocm93T25JbnZhbGlkT2JqZWN0VHlwZShyZXR1cm5GaWJlciwgbmV3Q2hpbGQpO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBmdW5jdGlvbiB1cGRhdGVGcm9tTWFwKFxuICAgIGV4aXN0aW5nQ2hpbGRyZW4sXG4gICAgcmV0dXJuRmliZXIsXG4gICAgbmV3SWR4LFxuICAgIG5ld0NoaWxkLFxuICAgIGxhbmVzXG4gICkge1xuICAgIGlmIChcbiAgICAgIChcInN0cmluZ1wiID09PSB0eXBlb2YgbmV3Q2hpbGQgJiYgXCJcIiAhPT0gbmV3Q2hpbGQpIHx8XG4gICAgICBcIm51bWJlclwiID09PSB0eXBlb2YgbmV3Q2hpbGQgfHxcbiAgICAgIFwiYmlnaW50XCIgPT09IHR5cGVvZiBuZXdDaGlsZFxuICAgIClcbiAgICAgIHJldHVybiAoXG4gICAgICAgIChleGlzdGluZ0NoaWxkcmVuID0gZXhpc3RpbmdDaGlsZHJlbi5nZXQobmV3SWR4KSB8fCBudWxsKSxcbiAgICAgICAgdXBkYXRlVGV4dE5vZGUocmV0dXJuRmliZXIsIGV4aXN0aW5nQ2hpbGRyZW4sIFwiXCIgKyBuZXdDaGlsZCwgbGFuZXMpXG4gICAgICApO1xuICAgIGlmIChcIm9iamVjdFwiID09PSB0eXBlb2YgbmV3Q2hpbGQgJiYgbnVsbCAhPT0gbmV3Q2hpbGQpIHtcbiAgICAgIHN3aXRjaCAobmV3Q2hpbGQuJCR0eXBlb2YpIHtcbiAgICAgICAgY2FzZSBSRUFDVF9FTEVNRU5UX1RZUEU6XG4gICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIChleGlzdGluZ0NoaWxkcmVuID1cbiAgICAgICAgICAgICAgZXhpc3RpbmdDaGlsZHJlbi5nZXQoXG4gICAgICAgICAgICAgICAgbnVsbCA9PT0gbmV3Q2hpbGQua2V5ID8gbmV3SWR4IDogbmV3Q2hpbGQua2V5XG4gICAgICAgICAgICAgICkgfHwgbnVsbCksXG4gICAgICAgICAgICB1cGRhdGVFbGVtZW50KHJldHVybkZpYmVyLCBleGlzdGluZ0NoaWxkcmVuLCBuZXdDaGlsZCwgbGFuZXMpXG4gICAgICAgICAgKTtcbiAgICAgICAgY2FzZSBSRUFDVF9QT1JUQUxfVFlQRTpcbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgKGV4aXN0aW5nQ2hpbGRyZW4gPVxuICAgICAgICAgICAgICBleGlzdGluZ0NoaWxkcmVuLmdldChcbiAgICAgICAgICAgICAgICBudWxsID09PSBuZXdDaGlsZC5rZXkgPyBuZXdJZHggOiBuZXdDaGlsZC5rZXlcbiAgICAgICAgICAgICAgKSB8fCBudWxsKSxcbiAgICAgICAgICAgIHVwZGF0ZVBvcnRhbChyZXR1cm5GaWJlciwgZXhpc3RpbmdDaGlsZHJlbiwgbmV3Q2hpbGQsIGxhbmVzKVxuICAgICAgICAgICk7XG4gICAgICAgIGNhc2UgUkVBQ1RfTEFaWV9UWVBFOlxuICAgICAgICAgIHZhciBpbml0ID0gbmV3Q2hpbGQuX2luaXQ7XG4gICAgICAgICAgbmV3Q2hpbGQgPSBpbml0KG5ld0NoaWxkLl9wYXlsb2FkKTtcbiAgICAgICAgICByZXR1cm4gdXBkYXRlRnJvbU1hcChcbiAgICAgICAgICAgIGV4aXN0aW5nQ2hpbGRyZW4sXG4gICAgICAgICAgICByZXR1cm5GaWJlcixcbiAgICAgICAgICAgIG5ld0lkeCxcbiAgICAgICAgICAgIG5ld0NoaWxkLFxuICAgICAgICAgICAgbGFuZXNcbiAgICAgICAgICApO1xuICAgICAgfVxuICAgICAgaWYgKGlzQXJyYXlJbXBsKG5ld0NoaWxkKSB8fCBnZXRJdGVyYXRvckZuKG5ld0NoaWxkKSlcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAoZXhpc3RpbmdDaGlsZHJlbiA9IGV4aXN0aW5nQ2hpbGRyZW4uZ2V0KG5ld0lkeCkgfHwgbnVsbCksXG4gICAgICAgICAgdXBkYXRlRnJhZ21lbnQocmV0dXJuRmliZXIsIGV4aXN0aW5nQ2hpbGRyZW4sIG5ld0NoaWxkLCBsYW5lcywgbnVsbClcbiAgICAgICAgKTtcbiAgICAgIGlmIChcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBuZXdDaGlsZC50aGVuKVxuICAgICAgICByZXR1cm4gdXBkYXRlRnJvbU1hcChcbiAgICAgICAgICBleGlzdGluZ0NoaWxkcmVuLFxuICAgICAgICAgIHJldHVybkZpYmVyLFxuICAgICAgICAgIG5ld0lkeCxcbiAgICAgICAgICB1bndyYXBUaGVuYWJsZShuZXdDaGlsZCksXG4gICAgICAgICAgbGFuZXNcbiAgICAgICAgKTtcbiAgICAgIGlmIChuZXdDaGlsZC4kJHR5cGVvZiA9PT0gUkVBQ1RfQ09OVEVYVF9UWVBFKVxuICAgICAgICByZXR1cm4gdXBkYXRlRnJvbU1hcChcbiAgICAgICAgICBleGlzdGluZ0NoaWxkcmVuLFxuICAgICAgICAgIHJldHVybkZpYmVyLFxuICAgICAgICAgIG5ld0lkeCxcbiAgICAgICAgICByZWFkQ29udGV4dER1cmluZ1JlY29uY2lsaWF0aW9uKHJldHVybkZpYmVyLCBuZXdDaGlsZCksXG4gICAgICAgICAgbGFuZXNcbiAgICAgICAgKTtcbiAgICAgIHRocm93T25JbnZhbGlkT2JqZWN0VHlwZShyZXR1cm5GaWJlciwgbmV3Q2hpbGQpO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBmdW5jdGlvbiByZWNvbmNpbGVDaGlsZHJlbkFycmF5KFxuICAgIHJldHVybkZpYmVyLFxuICAgIGN1cnJlbnRGaXJzdENoaWxkLFxuICAgIG5ld0NoaWxkcmVuLFxuICAgIGxhbmVzXG4gICkge1xuICAgIGZvciAoXG4gICAgICB2YXIgcmVzdWx0aW5nRmlyc3RDaGlsZCA9IG51bGwsXG4gICAgICAgIHByZXZpb3VzTmV3RmliZXIgPSBudWxsLFxuICAgICAgICBvbGRGaWJlciA9IGN1cnJlbnRGaXJzdENoaWxkLFxuICAgICAgICBuZXdJZHggPSAoY3VycmVudEZpcnN0Q2hpbGQgPSAwKSxcbiAgICAgICAgbmV4dE9sZEZpYmVyID0gbnVsbDtcbiAgICAgIG51bGwgIT09IG9sZEZpYmVyICYmIG5ld0lkeCA8IG5ld0NoaWxkcmVuLmxlbmd0aDtcbiAgICAgIG5ld0lkeCsrXG4gICAgKSB7XG4gICAgICBvbGRGaWJlci5pbmRleCA+IG5ld0lkeFxuICAgICAgICA/ICgobmV4dE9sZEZpYmVyID0gb2xkRmliZXIpLCAob2xkRmliZXIgPSBudWxsKSlcbiAgICAgICAgOiAobmV4dE9sZEZpYmVyID0gb2xkRmliZXIuc2libGluZyk7XG4gICAgICB2YXIgbmV3RmliZXIgPSB1cGRhdGVTbG90KFxuICAgICAgICByZXR1cm5GaWJlcixcbiAgICAgICAgb2xkRmliZXIsXG4gICAgICAgIG5ld0NoaWxkcmVuW25ld0lkeF0sXG4gICAgICAgIGxhbmVzXG4gICAgICApO1xuICAgICAgaWYgKG51bGwgPT09IG5ld0ZpYmVyKSB7XG4gICAgICAgIG51bGwgPT09IG9sZEZpYmVyICYmIChvbGRGaWJlciA9IG5leHRPbGRGaWJlcik7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgc2hvdWxkVHJhY2tTaWRlRWZmZWN0cyAmJlxuICAgICAgICBvbGRGaWJlciAmJlxuICAgICAgICBudWxsID09PSBuZXdGaWJlci5hbHRlcm5hdGUgJiZcbiAgICAgICAgZGVsZXRlQ2hpbGQocmV0dXJuRmliZXIsIG9sZEZpYmVyKTtcbiAgICAgIGN1cnJlbnRGaXJzdENoaWxkID0gcGxhY2VDaGlsZChuZXdGaWJlciwgY3VycmVudEZpcnN0Q2hpbGQsIG5ld0lkeCk7XG4gICAgICBudWxsID09PSBwcmV2aW91c05ld0ZpYmVyXG4gICAgICAgID8gKHJlc3VsdGluZ0ZpcnN0Q2hpbGQgPSBuZXdGaWJlcilcbiAgICAgICAgOiAocHJldmlvdXNOZXdGaWJlci5zaWJsaW5nID0gbmV3RmliZXIpO1xuICAgICAgcHJldmlvdXNOZXdGaWJlciA9IG5ld0ZpYmVyO1xuICAgICAgb2xkRmliZXIgPSBuZXh0T2xkRmliZXI7XG4gICAgfVxuICAgIGlmIChuZXdJZHggPT09IG5ld0NoaWxkcmVuLmxlbmd0aClcbiAgICAgIHJldHVybiAoXG4gICAgICAgIGRlbGV0ZVJlbWFpbmluZ0NoaWxkcmVuKHJldHVybkZpYmVyLCBvbGRGaWJlciksXG4gICAgICAgIGlzSHlkcmF0aW5nICYmIHB1c2hUcmVlRm9yayhyZXR1cm5GaWJlciwgbmV3SWR4KSxcbiAgICAgICAgcmVzdWx0aW5nRmlyc3RDaGlsZFxuICAgICAgKTtcbiAgICBpZiAobnVsbCA9PT0gb2xkRmliZXIpIHtcbiAgICAgIGZvciAoOyBuZXdJZHggPCBuZXdDaGlsZHJlbi5sZW5ndGg7IG5ld0lkeCsrKVxuICAgICAgICAob2xkRmliZXIgPSBjcmVhdGVDaGlsZChyZXR1cm5GaWJlciwgbmV3Q2hpbGRyZW5bbmV3SWR4XSwgbGFuZXMpKSxcbiAgICAgICAgICBudWxsICE9PSBvbGRGaWJlciAmJlxuICAgICAgICAgICAgKChjdXJyZW50Rmlyc3RDaGlsZCA9IHBsYWNlQ2hpbGQoXG4gICAgICAgICAgICAgIG9sZEZpYmVyLFxuICAgICAgICAgICAgICBjdXJyZW50Rmlyc3RDaGlsZCxcbiAgICAgICAgICAgICAgbmV3SWR4XG4gICAgICAgICAgICApKSxcbiAgICAgICAgICAgIG51bGwgPT09IHByZXZpb3VzTmV3RmliZXJcbiAgICAgICAgICAgICAgPyAocmVzdWx0aW5nRmlyc3RDaGlsZCA9IG9sZEZpYmVyKVxuICAgICAgICAgICAgICA6IChwcmV2aW91c05ld0ZpYmVyLnNpYmxpbmcgPSBvbGRGaWJlciksXG4gICAgICAgICAgICAocHJldmlvdXNOZXdGaWJlciA9IG9sZEZpYmVyKSk7XG4gICAgICBpc0h5ZHJhdGluZyAmJiBwdXNoVHJlZUZvcmsocmV0dXJuRmliZXIsIG5ld0lkeCk7XG4gICAgICByZXR1cm4gcmVzdWx0aW5nRmlyc3RDaGlsZDtcbiAgICB9XG4gICAgZm9yIChcbiAgICAgIG9sZEZpYmVyID0gbWFwUmVtYWluaW5nQ2hpbGRyZW4ob2xkRmliZXIpO1xuICAgICAgbmV3SWR4IDwgbmV3Q2hpbGRyZW4ubGVuZ3RoO1xuICAgICAgbmV3SWR4KytcbiAgICApXG4gICAgICAobmV4dE9sZEZpYmVyID0gdXBkYXRlRnJvbU1hcChcbiAgICAgICAgb2xkRmliZXIsXG4gICAgICAgIHJldHVybkZpYmVyLFxuICAgICAgICBuZXdJZHgsXG4gICAgICAgIG5ld0NoaWxkcmVuW25ld0lkeF0sXG4gICAgICAgIGxhbmVzXG4gICAgICApKSxcbiAgICAgICAgbnVsbCAhPT0gbmV4dE9sZEZpYmVyICYmXG4gICAgICAgICAgKHNob3VsZFRyYWNrU2lkZUVmZmVjdHMgJiZcbiAgICAgICAgICAgIG51bGwgIT09IG5leHRPbGRGaWJlci5hbHRlcm5hdGUgJiZcbiAgICAgICAgICAgIG9sZEZpYmVyLmRlbGV0ZShcbiAgICAgICAgICAgICAgbnVsbCA9PT0gbmV4dE9sZEZpYmVyLmtleSA/IG5ld0lkeCA6IG5leHRPbGRGaWJlci5rZXlcbiAgICAgICAgICAgICksXG4gICAgICAgICAgKGN1cnJlbnRGaXJzdENoaWxkID0gcGxhY2VDaGlsZChcbiAgICAgICAgICAgIG5leHRPbGRGaWJlcixcbiAgICAgICAgICAgIGN1cnJlbnRGaXJzdENoaWxkLFxuICAgICAgICAgICAgbmV3SWR4XG4gICAgICAgICAgKSksXG4gICAgICAgICAgbnVsbCA9PT0gcHJldmlvdXNOZXdGaWJlclxuICAgICAgICAgICAgPyAocmVzdWx0aW5nRmlyc3RDaGlsZCA9IG5leHRPbGRGaWJlcilcbiAgICAgICAgICAgIDogKHByZXZpb3VzTmV3RmliZXIuc2libGluZyA9IG5leHRPbGRGaWJlciksXG4gICAgICAgICAgKHByZXZpb3VzTmV3RmliZXIgPSBuZXh0T2xkRmliZXIpKTtcbiAgICBzaG91bGRUcmFja1NpZGVFZmZlY3RzICYmXG4gICAgICBvbGRGaWJlci5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICByZXR1cm4gZGVsZXRlQ2hpbGQocmV0dXJuRmliZXIsIGNoaWxkKTtcbiAgICAgIH0pO1xuICAgIGlzSHlkcmF0aW5nICYmIHB1c2hUcmVlRm9yayhyZXR1cm5GaWJlciwgbmV3SWR4KTtcbiAgICByZXR1cm4gcmVzdWx0aW5nRmlyc3RDaGlsZDtcbiAgfVxuICBmdW5jdGlvbiByZWNvbmNpbGVDaGlsZHJlbkl0ZXJhdG9yKFxuICAgIHJldHVybkZpYmVyLFxuICAgIGN1cnJlbnRGaXJzdENoaWxkLFxuICAgIG5ld0NoaWxkcmVuLFxuICAgIGxhbmVzXG4gICkge1xuICAgIGlmIChudWxsID09IG5ld0NoaWxkcmVuKSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDE1MSkpO1xuICAgIGZvciAoXG4gICAgICB2YXIgcmVzdWx0aW5nRmlyc3RDaGlsZCA9IG51bGwsXG4gICAgICAgIHByZXZpb3VzTmV3RmliZXIgPSBudWxsLFxuICAgICAgICBvbGRGaWJlciA9IGN1cnJlbnRGaXJzdENoaWxkLFxuICAgICAgICBuZXdJZHggPSAoY3VycmVudEZpcnN0Q2hpbGQgPSAwKSxcbiAgICAgICAgbmV4dE9sZEZpYmVyID0gbnVsbCxcbiAgICAgICAgc3RlcCA9IG5ld0NoaWxkcmVuLm5leHQoKTtcbiAgICAgIG51bGwgIT09IG9sZEZpYmVyICYmICFzdGVwLmRvbmU7XG4gICAgICBuZXdJZHgrKywgc3RlcCA9IG5ld0NoaWxkcmVuLm5leHQoKVxuICAgICkge1xuICAgICAgb2xkRmliZXIuaW5kZXggPiBuZXdJZHhcbiAgICAgICAgPyAoKG5leHRPbGRGaWJlciA9IG9sZEZpYmVyKSwgKG9sZEZpYmVyID0gbnVsbCkpXG4gICAgICAgIDogKG5leHRPbGRGaWJlciA9IG9sZEZpYmVyLnNpYmxpbmcpO1xuICAgICAgdmFyIG5ld0ZpYmVyID0gdXBkYXRlU2xvdChyZXR1cm5GaWJlciwgb2xkRmliZXIsIHN0ZXAudmFsdWUsIGxhbmVzKTtcbiAgICAgIGlmIChudWxsID09PSBuZXdGaWJlcikge1xuICAgICAgICBudWxsID09PSBvbGRGaWJlciAmJiAob2xkRmliZXIgPSBuZXh0T2xkRmliZXIpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIHNob3VsZFRyYWNrU2lkZUVmZmVjdHMgJiZcbiAgICAgICAgb2xkRmliZXIgJiZcbiAgICAgICAgbnVsbCA9PT0gbmV3RmliZXIuYWx0ZXJuYXRlICYmXG4gICAgICAgIGRlbGV0ZUNoaWxkKHJldHVybkZpYmVyLCBvbGRGaWJlcik7XG4gICAgICBjdXJyZW50Rmlyc3RDaGlsZCA9IHBsYWNlQ2hpbGQobmV3RmliZXIsIGN1cnJlbnRGaXJzdENoaWxkLCBuZXdJZHgpO1xuICAgICAgbnVsbCA9PT0gcHJldmlvdXNOZXdGaWJlclxuICAgICAgICA/IChyZXN1bHRpbmdGaXJzdENoaWxkID0gbmV3RmliZXIpXG4gICAgICAgIDogKHByZXZpb3VzTmV3RmliZXIuc2libGluZyA9IG5ld0ZpYmVyKTtcbiAgICAgIHByZXZpb3VzTmV3RmliZXIgPSBuZXdGaWJlcjtcbiAgICAgIG9sZEZpYmVyID0gbmV4dE9sZEZpYmVyO1xuICAgIH1cbiAgICBpZiAoc3RlcC5kb25lKVxuICAgICAgcmV0dXJuIChcbiAgICAgICAgZGVsZXRlUmVtYWluaW5nQ2hpbGRyZW4ocmV0dXJuRmliZXIsIG9sZEZpYmVyKSxcbiAgICAgICAgaXNIeWRyYXRpbmcgJiYgcHVzaFRyZWVGb3JrKHJldHVybkZpYmVyLCBuZXdJZHgpLFxuICAgICAgICByZXN1bHRpbmdGaXJzdENoaWxkXG4gICAgICApO1xuICAgIGlmIChudWxsID09PSBvbGRGaWJlcikge1xuICAgICAgZm9yICg7ICFzdGVwLmRvbmU7IG5ld0lkeCsrLCBzdGVwID0gbmV3Q2hpbGRyZW4ubmV4dCgpKVxuICAgICAgICAoc3RlcCA9IGNyZWF0ZUNoaWxkKHJldHVybkZpYmVyLCBzdGVwLnZhbHVlLCBsYW5lcykpLFxuICAgICAgICAgIG51bGwgIT09IHN0ZXAgJiZcbiAgICAgICAgICAgICgoY3VycmVudEZpcnN0Q2hpbGQgPSBwbGFjZUNoaWxkKHN0ZXAsIGN1cnJlbnRGaXJzdENoaWxkLCBuZXdJZHgpKSxcbiAgICAgICAgICAgIG51bGwgPT09IHByZXZpb3VzTmV3RmliZXJcbiAgICAgICAgICAgICAgPyAocmVzdWx0aW5nRmlyc3RDaGlsZCA9IHN0ZXApXG4gICAgICAgICAgICAgIDogKHByZXZpb3VzTmV3RmliZXIuc2libGluZyA9IHN0ZXApLFxuICAgICAgICAgICAgKHByZXZpb3VzTmV3RmliZXIgPSBzdGVwKSk7XG4gICAgICBpc0h5ZHJhdGluZyAmJiBwdXNoVHJlZUZvcmsocmV0dXJuRmliZXIsIG5ld0lkeCk7XG4gICAgICByZXR1cm4gcmVzdWx0aW5nRmlyc3RDaGlsZDtcbiAgICB9XG4gICAgZm9yIChcbiAgICAgIG9sZEZpYmVyID0gbWFwUmVtYWluaW5nQ2hpbGRyZW4ob2xkRmliZXIpO1xuICAgICAgIXN0ZXAuZG9uZTtcbiAgICAgIG5ld0lkeCsrLCBzdGVwID0gbmV3Q2hpbGRyZW4ubmV4dCgpXG4gICAgKVxuICAgICAgKHN0ZXAgPSB1cGRhdGVGcm9tTWFwKG9sZEZpYmVyLCByZXR1cm5GaWJlciwgbmV3SWR4LCBzdGVwLnZhbHVlLCBsYW5lcykpLFxuICAgICAgICBudWxsICE9PSBzdGVwICYmXG4gICAgICAgICAgKHNob3VsZFRyYWNrU2lkZUVmZmVjdHMgJiZcbiAgICAgICAgICAgIG51bGwgIT09IHN0ZXAuYWx0ZXJuYXRlICYmXG4gICAgICAgICAgICBvbGRGaWJlci5kZWxldGUobnVsbCA9PT0gc3RlcC5rZXkgPyBuZXdJZHggOiBzdGVwLmtleSksXG4gICAgICAgICAgKGN1cnJlbnRGaXJzdENoaWxkID0gcGxhY2VDaGlsZChzdGVwLCBjdXJyZW50Rmlyc3RDaGlsZCwgbmV3SWR4KSksXG4gICAgICAgICAgbnVsbCA9PT0gcHJldmlvdXNOZXdGaWJlclxuICAgICAgICAgICAgPyAocmVzdWx0aW5nRmlyc3RDaGlsZCA9IHN0ZXApXG4gICAgICAgICAgICA6IChwcmV2aW91c05ld0ZpYmVyLnNpYmxpbmcgPSBzdGVwKSxcbiAgICAgICAgICAocHJldmlvdXNOZXdGaWJlciA9IHN0ZXApKTtcbiAgICBzaG91bGRUcmFja1NpZGVFZmZlY3RzICYmXG4gICAgICBvbGRGaWJlci5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICByZXR1cm4gZGVsZXRlQ2hpbGQocmV0dXJuRmliZXIsIGNoaWxkKTtcbiAgICAgIH0pO1xuICAgIGlzSHlkcmF0aW5nICYmIHB1c2hUcmVlRm9yayhyZXR1cm5GaWJlciwgbmV3SWR4KTtcbiAgICByZXR1cm4gcmVzdWx0aW5nRmlyc3RDaGlsZDtcbiAgfVxuICBmdW5jdGlvbiByZWNvbmNpbGVDaGlsZEZpYmVyc0ltcGwoXG4gICAgcmV0dXJuRmliZXIsXG4gICAgY3VycmVudEZpcnN0Q2hpbGQsXG4gICAgbmV3Q2hpbGQsXG4gICAgbGFuZXNcbiAgKSB7XG4gICAgXCJvYmplY3RcIiA9PT0gdHlwZW9mIG5ld0NoaWxkICYmXG4gICAgICBudWxsICE9PSBuZXdDaGlsZCAmJlxuICAgICAgbmV3Q2hpbGQudHlwZSA9PT0gUkVBQ1RfRlJBR01FTlRfVFlQRSAmJlxuICAgICAgbnVsbCA9PT0gbmV3Q2hpbGQua2V5ICYmXG4gICAgICAobmV3Q2hpbGQgPSBuZXdDaGlsZC5wcm9wcy5jaGlsZHJlbik7XG4gICAgaWYgKFwib2JqZWN0XCIgPT09IHR5cGVvZiBuZXdDaGlsZCAmJiBudWxsICE9PSBuZXdDaGlsZCkge1xuICAgICAgc3dpdGNoIChuZXdDaGlsZC4kJHR5cGVvZikge1xuICAgICAgICBjYXNlIFJFQUNUX0VMRU1FTlRfVFlQRTpcbiAgICAgICAgICBhOiB7XG4gICAgICAgICAgICBmb3IgKHZhciBrZXkgPSBuZXdDaGlsZC5rZXk7IG51bGwgIT09IGN1cnJlbnRGaXJzdENoaWxkOyApIHtcbiAgICAgICAgICAgICAgaWYgKGN1cnJlbnRGaXJzdENoaWxkLmtleSA9PT0ga2V5KSB7XG4gICAgICAgICAgICAgICAga2V5ID0gbmV3Q2hpbGQudHlwZTtcbiAgICAgICAgICAgICAgICBpZiAoa2V5ID09PSBSRUFDVF9GUkFHTUVOVF9UWVBFKSB7XG4gICAgICAgICAgICAgICAgICBpZiAoNyA9PT0gY3VycmVudEZpcnN0Q2hpbGQudGFnKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZVJlbWFpbmluZ0NoaWxkcmVuKFxuICAgICAgICAgICAgICAgICAgICAgIHJldHVybkZpYmVyLFxuICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRGaXJzdENoaWxkLnNpYmxpbmdcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgbGFuZXMgPSB1c2VGaWJlcihcbiAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50Rmlyc3RDaGlsZCxcbiAgICAgICAgICAgICAgICAgICAgICBuZXdDaGlsZC5wcm9wcy5jaGlsZHJlblxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICBsYW5lcy5yZXR1cm4gPSByZXR1cm5GaWJlcjtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuRmliZXIgPSBsYW5lcztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgICAgICAgICAgY3VycmVudEZpcnN0Q2hpbGQuZWxlbWVudFR5cGUgPT09IGtleSB8fFxuICAgICAgICAgICAgICAgICAgKFwib2JqZWN0XCIgPT09IHR5cGVvZiBrZXkgJiZcbiAgICAgICAgICAgICAgICAgICAgbnVsbCAhPT0ga2V5ICYmXG4gICAgICAgICAgICAgICAgICAgIGtleS4kJHR5cGVvZiA9PT0gUkVBQ1RfTEFaWV9UWVBFICYmXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmVMYXp5KGtleSkgPT09IGN1cnJlbnRGaXJzdENoaWxkLnR5cGUpXG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICBkZWxldGVSZW1haW5pbmdDaGlsZHJlbihcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuRmliZXIsXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRGaXJzdENoaWxkLnNpYmxpbmdcbiAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICBsYW5lcyA9IHVzZUZpYmVyKGN1cnJlbnRGaXJzdENoaWxkLCBuZXdDaGlsZC5wcm9wcyk7XG4gICAgICAgICAgICAgICAgICBjb2VyY2VSZWYobGFuZXMsIG5ld0NoaWxkKTtcbiAgICAgICAgICAgICAgICAgIGxhbmVzLnJldHVybiA9IHJldHVybkZpYmVyO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuRmliZXIgPSBsYW5lcztcbiAgICAgICAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGRlbGV0ZVJlbWFpbmluZ0NoaWxkcmVuKHJldHVybkZpYmVyLCBjdXJyZW50Rmlyc3RDaGlsZCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH0gZWxzZSBkZWxldGVDaGlsZChyZXR1cm5GaWJlciwgY3VycmVudEZpcnN0Q2hpbGQpO1xuICAgICAgICAgICAgICBjdXJyZW50Rmlyc3RDaGlsZCA9IGN1cnJlbnRGaXJzdENoaWxkLnNpYmxpbmc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBuZXdDaGlsZC50eXBlID09PSBSRUFDVF9GUkFHTUVOVF9UWVBFXG4gICAgICAgICAgICAgID8gKChsYW5lcyA9IGNyZWF0ZUZpYmVyRnJvbUZyYWdtZW50KFxuICAgICAgICAgICAgICAgICAgbmV3Q2hpbGQucHJvcHMuY2hpbGRyZW4sXG4gICAgICAgICAgICAgICAgICByZXR1cm5GaWJlci5tb2RlLFxuICAgICAgICAgICAgICAgICAgbGFuZXMsXG4gICAgICAgICAgICAgICAgICBuZXdDaGlsZC5rZXlcbiAgICAgICAgICAgICAgICApKSxcbiAgICAgICAgICAgICAgICAobGFuZXMucmV0dXJuID0gcmV0dXJuRmliZXIpLFxuICAgICAgICAgICAgICAgIChyZXR1cm5GaWJlciA9IGxhbmVzKSlcbiAgICAgICAgICAgICAgOiAoKGxhbmVzID0gY3JlYXRlRmliZXJGcm9tVHlwZUFuZFByb3BzKFxuICAgICAgICAgICAgICAgICAgbmV3Q2hpbGQudHlwZSxcbiAgICAgICAgICAgICAgICAgIG5ld0NoaWxkLmtleSxcbiAgICAgICAgICAgICAgICAgIG5ld0NoaWxkLnByb3BzLFxuICAgICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICAgIHJldHVybkZpYmVyLm1vZGUsXG4gICAgICAgICAgICAgICAgICBsYW5lc1xuICAgICAgICAgICAgICAgICkpLFxuICAgICAgICAgICAgICAgIGNvZXJjZVJlZihsYW5lcywgbmV3Q2hpbGQpLFxuICAgICAgICAgICAgICAgIChsYW5lcy5yZXR1cm4gPSByZXR1cm5GaWJlciksXG4gICAgICAgICAgICAgICAgKHJldHVybkZpYmVyID0gbGFuZXMpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHBsYWNlU2luZ2xlQ2hpbGQocmV0dXJuRmliZXIpO1xuICAgICAgICBjYXNlIFJFQUNUX1BPUlRBTF9UWVBFOlxuICAgICAgICAgIGE6IHtcbiAgICAgICAgICAgIGZvciAoa2V5ID0gbmV3Q2hpbGQua2V5OyBudWxsICE9PSBjdXJyZW50Rmlyc3RDaGlsZDsgKSB7XG4gICAgICAgICAgICAgIGlmIChjdXJyZW50Rmlyc3RDaGlsZC5rZXkgPT09IGtleSlcbiAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICA0ID09PSBjdXJyZW50Rmlyc3RDaGlsZC50YWcgJiZcbiAgICAgICAgICAgICAgICAgIGN1cnJlbnRGaXJzdENoaWxkLnN0YXRlTm9kZS5jb250YWluZXJJbmZvID09PVxuICAgICAgICAgICAgICAgICAgICBuZXdDaGlsZC5jb250YWluZXJJbmZvICYmXG4gICAgICAgICAgICAgICAgICBjdXJyZW50Rmlyc3RDaGlsZC5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb24gPT09XG4gICAgICAgICAgICAgICAgICAgIG5ld0NoaWxkLmltcGxlbWVudGF0aW9uXG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICBkZWxldGVSZW1haW5pbmdDaGlsZHJlbihcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuRmliZXIsXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRGaXJzdENoaWxkLnNpYmxpbmdcbiAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICBsYW5lcyA9IHVzZUZpYmVyKGN1cnJlbnRGaXJzdENoaWxkLCBuZXdDaGlsZC5jaGlsZHJlbiB8fCBbXSk7XG4gICAgICAgICAgICAgICAgICBsYW5lcy5yZXR1cm4gPSByZXR1cm5GaWJlcjtcbiAgICAgICAgICAgICAgICAgIHJldHVybkZpYmVyID0gbGFuZXM7XG4gICAgICAgICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBkZWxldGVSZW1haW5pbmdDaGlsZHJlbihyZXR1cm5GaWJlciwgY3VycmVudEZpcnN0Q2hpbGQpO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBlbHNlIGRlbGV0ZUNoaWxkKHJldHVybkZpYmVyLCBjdXJyZW50Rmlyc3RDaGlsZCk7XG4gICAgICAgICAgICAgIGN1cnJlbnRGaXJzdENoaWxkID0gY3VycmVudEZpcnN0Q2hpbGQuc2libGluZztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxhbmVzID0gY3JlYXRlRmliZXJGcm9tUG9ydGFsKG5ld0NoaWxkLCByZXR1cm5GaWJlci5tb2RlLCBsYW5lcyk7XG4gICAgICAgICAgICBsYW5lcy5yZXR1cm4gPSByZXR1cm5GaWJlcjtcbiAgICAgICAgICAgIHJldHVybkZpYmVyID0gbGFuZXM7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBwbGFjZVNpbmdsZUNoaWxkKHJldHVybkZpYmVyKTtcbiAgICAgICAgY2FzZSBSRUFDVF9MQVpZX1RZUEU6XG4gICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIChrZXkgPSBuZXdDaGlsZC5faW5pdCksXG4gICAgICAgICAgICAobmV3Q2hpbGQgPSBrZXkobmV3Q2hpbGQuX3BheWxvYWQpKSxcbiAgICAgICAgICAgIHJlY29uY2lsZUNoaWxkRmliZXJzSW1wbChcbiAgICAgICAgICAgICAgcmV0dXJuRmliZXIsXG4gICAgICAgICAgICAgIGN1cnJlbnRGaXJzdENoaWxkLFxuICAgICAgICAgICAgICBuZXdDaGlsZCxcbiAgICAgICAgICAgICAgbGFuZXNcbiAgICAgICAgICAgIClcbiAgICAgICAgICApO1xuICAgICAgfVxuICAgICAgaWYgKGlzQXJyYXlJbXBsKG5ld0NoaWxkKSlcbiAgICAgICAgcmV0dXJuIHJlY29uY2lsZUNoaWxkcmVuQXJyYXkoXG4gICAgICAgICAgcmV0dXJuRmliZXIsXG4gICAgICAgICAgY3VycmVudEZpcnN0Q2hpbGQsXG4gICAgICAgICAgbmV3Q2hpbGQsXG4gICAgICAgICAgbGFuZXNcbiAgICAgICAgKTtcbiAgICAgIGlmIChnZXRJdGVyYXRvckZuKG5ld0NoaWxkKSkge1xuICAgICAgICBrZXkgPSBnZXRJdGVyYXRvckZuKG5ld0NoaWxkKTtcbiAgICAgICAgaWYgKFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIGtleSkgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxNTApKTtcbiAgICAgICAgbmV3Q2hpbGQgPSBrZXkuY2FsbChuZXdDaGlsZCk7XG4gICAgICAgIHJldHVybiByZWNvbmNpbGVDaGlsZHJlbkl0ZXJhdG9yKFxuICAgICAgICAgIHJldHVybkZpYmVyLFxuICAgICAgICAgIGN1cnJlbnRGaXJzdENoaWxkLFxuICAgICAgICAgIG5ld0NoaWxkLFxuICAgICAgICAgIGxhbmVzXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBpZiAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgbmV3Q2hpbGQudGhlbilcbiAgICAgICAgcmV0dXJuIHJlY29uY2lsZUNoaWxkRmliZXJzSW1wbChcbiAgICAgICAgICByZXR1cm5GaWJlcixcbiAgICAgICAgICBjdXJyZW50Rmlyc3RDaGlsZCxcbiAgICAgICAgICB1bndyYXBUaGVuYWJsZShuZXdDaGlsZCksXG4gICAgICAgICAgbGFuZXNcbiAgICAgICAgKTtcbiAgICAgIGlmIChuZXdDaGlsZC4kJHR5cGVvZiA9PT0gUkVBQ1RfQ09OVEVYVF9UWVBFKVxuICAgICAgICByZXR1cm4gcmVjb25jaWxlQ2hpbGRGaWJlcnNJbXBsKFxuICAgICAgICAgIHJldHVybkZpYmVyLFxuICAgICAgICAgIGN1cnJlbnRGaXJzdENoaWxkLFxuICAgICAgICAgIHJlYWRDb250ZXh0RHVyaW5nUmVjb25jaWxpYXRpb24ocmV0dXJuRmliZXIsIG5ld0NoaWxkKSxcbiAgICAgICAgICBsYW5lc1xuICAgICAgICApO1xuICAgICAgdGhyb3dPbkludmFsaWRPYmplY3RUeXBlKHJldHVybkZpYmVyLCBuZXdDaGlsZCk7XG4gICAgfVxuICAgIHJldHVybiAoXCJzdHJpbmdcIiA9PT0gdHlwZW9mIG5ld0NoaWxkICYmIFwiXCIgIT09IG5ld0NoaWxkKSB8fFxuICAgICAgXCJudW1iZXJcIiA9PT0gdHlwZW9mIG5ld0NoaWxkIHx8XG4gICAgICBcImJpZ2ludFwiID09PSB0eXBlb2YgbmV3Q2hpbGRcbiAgICAgID8gKChuZXdDaGlsZCA9IFwiXCIgKyBuZXdDaGlsZCksXG4gICAgICAgIG51bGwgIT09IGN1cnJlbnRGaXJzdENoaWxkICYmIDYgPT09IGN1cnJlbnRGaXJzdENoaWxkLnRhZ1xuICAgICAgICAgID8gKGRlbGV0ZVJlbWFpbmluZ0NoaWxkcmVuKHJldHVybkZpYmVyLCBjdXJyZW50Rmlyc3RDaGlsZC5zaWJsaW5nKSxcbiAgICAgICAgICAgIChsYW5lcyA9IHVzZUZpYmVyKGN1cnJlbnRGaXJzdENoaWxkLCBuZXdDaGlsZCkpLFxuICAgICAgICAgICAgKGxhbmVzLnJldHVybiA9IHJldHVybkZpYmVyKSxcbiAgICAgICAgICAgIChyZXR1cm5GaWJlciA9IGxhbmVzKSlcbiAgICAgICAgICA6IChkZWxldGVSZW1haW5pbmdDaGlsZHJlbihyZXR1cm5GaWJlciwgY3VycmVudEZpcnN0Q2hpbGQpLFxuICAgICAgICAgICAgKGxhbmVzID0gY3JlYXRlRmliZXJGcm9tVGV4dChuZXdDaGlsZCwgcmV0dXJuRmliZXIubW9kZSwgbGFuZXMpKSxcbiAgICAgICAgICAgIChsYW5lcy5yZXR1cm4gPSByZXR1cm5GaWJlciksXG4gICAgICAgICAgICAocmV0dXJuRmliZXIgPSBsYW5lcykpLFxuICAgICAgICBwbGFjZVNpbmdsZUNoaWxkKHJldHVybkZpYmVyKSlcbiAgICAgIDogZGVsZXRlUmVtYWluaW5nQ2hpbGRyZW4ocmV0dXJuRmliZXIsIGN1cnJlbnRGaXJzdENoaWxkKTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24gKHJldHVybkZpYmVyLCBjdXJyZW50Rmlyc3RDaGlsZCwgbmV3Q2hpbGQsIGxhbmVzKSB7XG4gICAgdHJ5IHtcbiAgICAgIHRoZW5hYmxlSW5kZXhDb3VudGVyJDEgPSAwO1xuICAgICAgdmFyIGZpcnN0Q2hpbGRGaWJlciA9IHJlY29uY2lsZUNoaWxkRmliZXJzSW1wbChcbiAgICAgICAgcmV0dXJuRmliZXIsXG4gICAgICAgIGN1cnJlbnRGaXJzdENoaWxkLFxuICAgICAgICBuZXdDaGlsZCxcbiAgICAgICAgbGFuZXNcbiAgICAgICk7XG4gICAgICB0aGVuYWJsZVN0YXRlJDEgPSBudWxsO1xuICAgICAgcmV0dXJuIGZpcnN0Q2hpbGRGaWJlcjtcbiAgICB9IGNhdGNoICh4KSB7XG4gICAgICBpZiAoeCA9PT0gU3VzcGVuc2VFeGNlcHRpb24pIHRocm93IHg7XG4gICAgICB2YXIgZmliZXIgPSBjcmVhdGVGaWJlckltcGxDbGFzcygyOSwgeCwgbnVsbCwgcmV0dXJuRmliZXIubW9kZSk7XG4gICAgICBmaWJlci5sYW5lcyA9IGxhbmVzO1xuICAgICAgZmliZXIucmV0dXJuID0gcmV0dXJuRmliZXI7XG4gICAgICByZXR1cm4gZmliZXI7XG4gICAgfSBmaW5hbGx5IHtcbiAgICB9XG4gIH07XG59XG52YXIgcmVjb25jaWxlQ2hpbGRGaWJlcnMgPSBjcmVhdGVDaGlsZFJlY29uY2lsZXIoITApLFxuICBtb3VudENoaWxkRmliZXJzID0gY3JlYXRlQ2hpbGRSZWNvbmNpbGVyKCExKSxcbiAgY3VycmVudFRyZWVIaWRkZW5TdGFja0N1cnNvciA9IGNyZWF0ZUN1cnNvcihudWxsKSxcbiAgcHJldkVudGFuZ2xlZFJlbmRlckxhbmVzQ3Vyc29yID0gY3JlYXRlQ3Vyc29yKDApO1xuZnVuY3Rpb24gcHVzaEhpZGRlbkNvbnRleHQoZmliZXIsIGNvbnRleHQpIHtcbiAgZmliZXIgPSBlbnRhbmdsZWRSZW5kZXJMYW5lcztcbiAgcHVzaChwcmV2RW50YW5nbGVkUmVuZGVyTGFuZXNDdXJzb3IsIGZpYmVyKTtcbiAgcHVzaChjdXJyZW50VHJlZUhpZGRlblN0YWNrQ3Vyc29yLCBjb250ZXh0KTtcbiAgZW50YW5nbGVkUmVuZGVyTGFuZXMgPSBmaWJlciB8IGNvbnRleHQuYmFzZUxhbmVzO1xufVxuZnVuY3Rpb24gcmV1c2VIaWRkZW5Db250ZXh0T25TdGFjaygpIHtcbiAgcHVzaChwcmV2RW50YW5nbGVkUmVuZGVyTGFuZXNDdXJzb3IsIGVudGFuZ2xlZFJlbmRlckxhbmVzKTtcbiAgcHVzaChjdXJyZW50VHJlZUhpZGRlblN0YWNrQ3Vyc29yLCBjdXJyZW50VHJlZUhpZGRlblN0YWNrQ3Vyc29yLmN1cnJlbnQpO1xufVxuZnVuY3Rpb24gcG9wSGlkZGVuQ29udGV4dCgpIHtcbiAgZW50YW5nbGVkUmVuZGVyTGFuZXMgPSBwcmV2RW50YW5nbGVkUmVuZGVyTGFuZXNDdXJzb3IuY3VycmVudDtcbiAgcG9wKGN1cnJlbnRUcmVlSGlkZGVuU3RhY2tDdXJzb3IpO1xuICBwb3AocHJldkVudGFuZ2xlZFJlbmRlckxhbmVzQ3Vyc29yKTtcbn1cbnZhciBzdXNwZW5zZUhhbmRsZXJTdGFja0N1cnNvciA9IGNyZWF0ZUN1cnNvcihudWxsKSxcbiAgc2hlbGxCb3VuZGFyeSA9IG51bGw7XG5mdW5jdGlvbiBwdXNoUHJpbWFyeVRyZWVTdXNwZW5zZUhhbmRsZXIoaGFuZGxlcikge1xuICB2YXIgY3VycmVudCA9IGhhbmRsZXIuYWx0ZXJuYXRlO1xuICBwdXNoKHN1c3BlbnNlU3RhY2tDdXJzb3IsIHN1c3BlbnNlU3RhY2tDdXJzb3IuY3VycmVudCAmIDEpO1xuICBwdXNoKHN1c3BlbnNlSGFuZGxlclN0YWNrQ3Vyc29yLCBoYW5kbGVyKTtcbiAgbnVsbCA9PT0gc2hlbGxCb3VuZGFyeSAmJlxuICAgIChudWxsID09PSBjdXJyZW50IHx8IG51bGwgIT09IGN1cnJlbnRUcmVlSGlkZGVuU3RhY2tDdXJzb3IuY3VycmVudFxuICAgICAgPyAoc2hlbGxCb3VuZGFyeSA9IGhhbmRsZXIpXG4gICAgICA6IG51bGwgIT09IGN1cnJlbnQubWVtb2l6ZWRTdGF0ZSAmJiAoc2hlbGxCb3VuZGFyeSA9IGhhbmRsZXIpKTtcbn1cbmZ1bmN0aW9uIHB1c2hPZmZzY3JlZW5TdXNwZW5zZUhhbmRsZXIoZmliZXIpIHtcbiAgaWYgKDIyID09PSBmaWJlci50YWcpIHtcbiAgICBpZiAoXG4gICAgICAocHVzaChzdXNwZW5zZVN0YWNrQ3Vyc29yLCBzdXNwZW5zZVN0YWNrQ3Vyc29yLmN1cnJlbnQpLFxuICAgICAgcHVzaChzdXNwZW5zZUhhbmRsZXJTdGFja0N1cnNvciwgZmliZXIpLFxuICAgICAgbnVsbCA9PT0gc2hlbGxCb3VuZGFyeSlcbiAgICApIHtcbiAgICAgIHZhciBjdXJyZW50ID0gZmliZXIuYWx0ZXJuYXRlO1xuICAgICAgbnVsbCAhPT0gY3VycmVudCAmJlxuICAgICAgICBudWxsICE9PSBjdXJyZW50Lm1lbW9pemVkU3RhdGUgJiZcbiAgICAgICAgKHNoZWxsQm91bmRhcnkgPSBmaWJlcik7XG4gICAgfVxuICB9IGVsc2UgcmV1c2VTdXNwZW5zZUhhbmRsZXJPblN0YWNrKGZpYmVyKTtcbn1cbmZ1bmN0aW9uIHJldXNlU3VzcGVuc2VIYW5kbGVyT25TdGFjaygpIHtcbiAgcHVzaChzdXNwZW5zZVN0YWNrQ3Vyc29yLCBzdXNwZW5zZVN0YWNrQ3Vyc29yLmN1cnJlbnQpO1xuICBwdXNoKHN1c3BlbnNlSGFuZGxlclN0YWNrQ3Vyc29yLCBzdXNwZW5zZUhhbmRsZXJTdGFja0N1cnNvci5jdXJyZW50KTtcbn1cbmZ1bmN0aW9uIHBvcFN1c3BlbnNlSGFuZGxlcihmaWJlcikge1xuICBwb3Aoc3VzcGVuc2VIYW5kbGVyU3RhY2tDdXJzb3IpO1xuICBzaGVsbEJvdW5kYXJ5ID09PSBmaWJlciAmJiAoc2hlbGxCb3VuZGFyeSA9IG51bGwpO1xuICBwb3Aoc3VzcGVuc2VTdGFja0N1cnNvcik7XG59XG52YXIgc3VzcGVuc2VTdGFja0N1cnNvciA9IGNyZWF0ZUN1cnNvcigwKTtcbmZ1bmN0aW9uIGZpbmRGaXJzdFN1c3BlbmRlZChyb3cpIHtcbiAgZm9yICh2YXIgbm9kZSA9IHJvdzsgbnVsbCAhPT0gbm9kZTsgKSB7XG4gICAgaWYgKDEzID09PSBub2RlLnRhZykge1xuICAgICAgdmFyIHN0YXRlID0gbm9kZS5tZW1vaXplZFN0YXRlO1xuICAgICAgaWYgKFxuICAgICAgICBudWxsICE9PSBzdGF0ZSAmJlxuICAgICAgICAoKHN0YXRlID0gc3RhdGUuZGVoeWRyYXRlZCksXG4gICAgICAgIG51bGwgPT09IHN0YXRlIHx8IFwiJD9cIiA9PT0gc3RhdGUuZGF0YSB8fCBcIiQhXCIgPT09IHN0YXRlLmRhdGEpXG4gICAgICApXG4gICAgICAgIHJldHVybiBub2RlO1xuICAgIH0gZWxzZSBpZiAoMTkgPT09IG5vZGUudGFnICYmIHZvaWQgMCAhPT0gbm9kZS5tZW1vaXplZFByb3BzLnJldmVhbE9yZGVyKSB7XG4gICAgICBpZiAoMCAhPT0gKG5vZGUuZmxhZ3MgJiAxMjgpKSByZXR1cm4gbm9kZTtcbiAgICB9IGVsc2UgaWYgKG51bGwgIT09IG5vZGUuY2hpbGQpIHtcbiAgICAgIG5vZGUuY2hpbGQucmV0dXJuID0gbm9kZTtcbiAgICAgIG5vZGUgPSBub2RlLmNoaWxkO1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGlmIChub2RlID09PSByb3cpIGJyZWFrO1xuICAgIGZvciAoOyBudWxsID09PSBub2RlLnNpYmxpbmc7ICkge1xuICAgICAgaWYgKG51bGwgPT09IG5vZGUucmV0dXJuIHx8IG5vZGUucmV0dXJuID09PSByb3cpIHJldHVybiBudWxsO1xuICAgICAgbm9kZSA9IG5vZGUucmV0dXJuO1xuICAgIH1cbiAgICBub2RlLnNpYmxpbmcucmV0dXJuID0gbm9kZS5yZXR1cm47XG4gICAgbm9kZSA9IG5vZGUuc2libGluZztcbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cbnZhciBBYm9ydENvbnRyb2xsZXJMb2NhbCA9XG4gICAgXCJ1bmRlZmluZWRcIiAhPT0gdHlwZW9mIEFib3J0Q29udHJvbGxlclxuICAgICAgPyBBYm9ydENvbnRyb2xsZXJcbiAgICAgIDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHZhciBsaXN0ZW5lcnMgPSBbXSxcbiAgICAgICAgICAgIHNpZ25hbCA9ICh0aGlzLnNpZ25hbCA9IHtcbiAgICAgICAgICAgICAgYWJvcnRlZDogITEsXG4gICAgICAgICAgICAgIGFkZEV2ZW50TGlzdGVuZXI6IGZ1bmN0aW9uICh0eXBlLCBsaXN0ZW5lcikge1xuICAgICAgICAgICAgICAgIGxpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgdGhpcy5hYm9ydCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHNpZ25hbC5hYm9ydGVkID0gITA7XG4gICAgICAgICAgICBsaXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbiAobGlzdGVuZXIpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGxpc3RlbmVyKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9O1xuICAgICAgICB9LFxuICBzY2hlZHVsZUNhbGxiYWNrJDIgPSBTY2hlZHVsZXIudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayxcbiAgTm9ybWFsUHJpb3JpdHkgPSBTY2hlZHVsZXIudW5zdGFibGVfTm9ybWFsUHJpb3JpdHksXG4gIENhY2hlQ29udGV4dCA9IHtcbiAgICAkJHR5cGVvZjogUkVBQ1RfQ09OVEVYVF9UWVBFLFxuICAgIENvbnN1bWVyOiBudWxsLFxuICAgIFByb3ZpZGVyOiBudWxsLFxuICAgIF9jdXJyZW50VmFsdWU6IG51bGwsXG4gICAgX2N1cnJlbnRWYWx1ZTI6IG51bGwsXG4gICAgX3RocmVhZENvdW50OiAwXG4gIH07XG5mdW5jdGlvbiBjcmVhdGVDYWNoZSgpIHtcbiAgcmV0dXJuIHtcbiAgICBjb250cm9sbGVyOiBuZXcgQWJvcnRDb250cm9sbGVyTG9jYWwoKSxcbiAgICBkYXRhOiBuZXcgTWFwKCksXG4gICAgcmVmQ291bnQ6IDBcbiAgfTtcbn1cbmZ1bmN0aW9uIHJlbGVhc2VDYWNoZShjYWNoZSkge1xuICBjYWNoZS5yZWZDb3VudC0tO1xuICAwID09PSBjYWNoZS5yZWZDb3VudCAmJlxuICAgIHNjaGVkdWxlQ2FsbGJhY2skMihOb3JtYWxQcmlvcml0eSwgZnVuY3Rpb24gKCkge1xuICAgICAgY2FjaGUuY29udHJvbGxlci5hYm9ydCgpO1xuICAgIH0pO1xufVxudmFyIGN1cnJlbnRFbnRhbmdsZWRMaXN0ZW5lcnMgPSBudWxsLFxuICBjdXJyZW50RW50YW5nbGVkUGVuZGluZ0NvdW50ID0gMCxcbiAgY3VycmVudEVudGFuZ2xlZExhbmUgPSAwLFxuICBjdXJyZW50RW50YW5nbGVkQWN0aW9uVGhlbmFibGUgPSBudWxsO1xuZnVuY3Rpb24gZW50YW5nbGVBc3luY0FjdGlvbih0cmFuc2l0aW9uLCB0aGVuYWJsZSkge1xuICBpZiAobnVsbCA9PT0gY3VycmVudEVudGFuZ2xlZExpc3RlbmVycykge1xuICAgIHZhciBlbnRhbmdsZWRMaXN0ZW5lcnMgPSAoY3VycmVudEVudGFuZ2xlZExpc3RlbmVycyA9IFtdKTtcbiAgICBjdXJyZW50RW50YW5nbGVkUGVuZGluZ0NvdW50ID0gMDtcbiAgICBjdXJyZW50RW50YW5nbGVkTGFuZSA9IHJlcXVlc3RUcmFuc2l0aW9uTGFuZSgpO1xuICAgIGN1cnJlbnRFbnRhbmdsZWRBY3Rpb25UaGVuYWJsZSA9IHtcbiAgICAgIHN0YXR1czogXCJwZW5kaW5nXCIsXG4gICAgICB2YWx1ZTogdm9pZCAwLFxuICAgICAgdGhlbjogZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgICAgZW50YW5nbGVkTGlzdGVuZXJzLnB1c2gocmVzb2x2ZSk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuICBjdXJyZW50RW50YW5nbGVkUGVuZGluZ0NvdW50Kys7XG4gIHRoZW5hYmxlLnRoZW4ocGluZ0VuZ3RhbmdsZWRBY3Rpb25TY29wZSwgcGluZ0VuZ3RhbmdsZWRBY3Rpb25TY29wZSk7XG4gIHJldHVybiB0aGVuYWJsZTtcbn1cbmZ1bmN0aW9uIHBpbmdFbmd0YW5nbGVkQWN0aW9uU2NvcGUoKSB7XG4gIGlmIChcbiAgICAwID09PSAtLWN1cnJlbnRFbnRhbmdsZWRQZW5kaW5nQ291bnQgJiZcbiAgICBudWxsICE9PSBjdXJyZW50RW50YW5nbGVkTGlzdGVuZXJzXG4gICkge1xuICAgIG51bGwgIT09IGN1cnJlbnRFbnRhbmdsZWRBY3Rpb25UaGVuYWJsZSAmJlxuICAgICAgKGN1cnJlbnRFbnRhbmdsZWRBY3Rpb25UaGVuYWJsZS5zdGF0dXMgPSBcImZ1bGZpbGxlZFwiKTtcbiAgICB2YXIgbGlzdGVuZXJzID0gY3VycmVudEVudGFuZ2xlZExpc3RlbmVycztcbiAgICBjdXJyZW50RW50YW5nbGVkTGlzdGVuZXJzID0gbnVsbDtcbiAgICBjdXJyZW50RW50YW5nbGVkTGFuZSA9IDA7XG4gICAgY3VycmVudEVudGFuZ2xlZEFjdGlvblRoZW5hYmxlID0gbnVsbDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3RlbmVycy5sZW5ndGg7IGkrKykgKDAsIGxpc3RlbmVyc1tpXSkoKTtcbiAgfVxufVxuZnVuY3Rpb24gY2hhaW5UaGVuYWJsZVZhbHVlKHRoZW5hYmxlLCByZXN1bHQpIHtcbiAgdmFyIGxpc3RlbmVycyA9IFtdLFxuICAgIHRoZW5hYmxlV2l0aE92ZXJyaWRlID0ge1xuICAgICAgc3RhdHVzOiBcInBlbmRpbmdcIixcbiAgICAgIHZhbHVlOiBudWxsLFxuICAgICAgcmVhc29uOiBudWxsLFxuICAgICAgdGhlbjogZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgICAgbGlzdGVuZXJzLnB1c2gocmVzb2x2ZSk7XG4gICAgICB9XG4gICAgfTtcbiAgdGhlbmFibGUudGhlbihcbiAgICBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGVuYWJsZVdpdGhPdmVycmlkZS5zdGF0dXMgPSBcImZ1bGZpbGxlZFwiO1xuICAgICAgdGhlbmFibGVXaXRoT3ZlcnJpZGUudmFsdWUgPSByZXN1bHQ7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3RlbmVycy5sZW5ndGg7IGkrKykgKDAsIGxpc3RlbmVyc1tpXSkocmVzdWx0KTtcbiAgICB9LFxuICAgIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgdGhlbmFibGVXaXRoT3ZlcnJpZGUuc3RhdHVzID0gXCJyZWplY3RlZFwiO1xuICAgICAgdGhlbmFibGVXaXRoT3ZlcnJpZGUucmVhc29uID0gZXJyb3I7XG4gICAgICBmb3IgKGVycm9yID0gMDsgZXJyb3IgPCBsaXN0ZW5lcnMubGVuZ3RoOyBlcnJvcisrKVxuICAgICAgICAoMCwgbGlzdGVuZXJzW2Vycm9yXSkodm9pZCAwKTtcbiAgICB9XG4gICk7XG4gIHJldHVybiB0aGVuYWJsZVdpdGhPdmVycmlkZTtcbn1cbnZhciBwcmV2T25TdGFydFRyYW5zaXRpb25GaW5pc2ggPSBSZWFjdFNoYXJlZEludGVybmFscy5TO1xuUmVhY3RTaGFyZWRJbnRlcm5hbHMuUyA9IGZ1bmN0aW9uICh0cmFuc2l0aW9uLCByZXR1cm5WYWx1ZSkge1xuICBcIm9iamVjdFwiID09PSB0eXBlb2YgcmV0dXJuVmFsdWUgJiZcbiAgICBudWxsICE9PSByZXR1cm5WYWx1ZSAmJlxuICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHJldHVyblZhbHVlLnRoZW4gJiZcbiAgICBlbnRhbmdsZUFzeW5jQWN0aW9uKHRyYW5zaXRpb24sIHJldHVyblZhbHVlKTtcbiAgbnVsbCAhPT0gcHJldk9uU3RhcnRUcmFuc2l0aW9uRmluaXNoICYmXG4gICAgcHJldk9uU3RhcnRUcmFuc2l0aW9uRmluaXNoKHRyYW5zaXRpb24sIHJldHVyblZhbHVlKTtcbn07XG52YXIgcmVzdW1lZENhY2hlID0gY3JlYXRlQ3Vyc29yKG51bGwpO1xuZnVuY3Rpb24gcGVla0NhY2hlRnJvbVBvb2woKSB7XG4gIHZhciBjYWNoZVJlc3VtZWRGcm9tUHJldmlvdXNSZW5kZXIgPSByZXN1bWVkQ2FjaGUuY3VycmVudDtcbiAgcmV0dXJuIG51bGwgIT09IGNhY2hlUmVzdW1lZEZyb21QcmV2aW91c1JlbmRlclxuICAgID8gY2FjaGVSZXN1bWVkRnJvbVByZXZpb3VzUmVuZGVyXG4gICAgOiB3b3JrSW5Qcm9ncmVzc1Jvb3QucG9vbGVkQ2FjaGU7XG59XG5mdW5jdGlvbiBwdXNoVHJhbnNpdGlvbihvZmZzY3JlZW5Xb3JrSW5Qcm9ncmVzcywgcHJldkNhY2hlUG9vbCkge1xuICBudWxsID09PSBwcmV2Q2FjaGVQb29sXG4gICAgPyBwdXNoKHJlc3VtZWRDYWNoZSwgcmVzdW1lZENhY2hlLmN1cnJlbnQpXG4gICAgOiBwdXNoKHJlc3VtZWRDYWNoZSwgcHJldkNhY2hlUG9vbC5wb29sKTtcbn1cbmZ1bmN0aW9uIGdldFN1c3BlbmRlZENhY2hlKCkge1xuICB2YXIgY2FjaGVGcm9tUG9vbCA9IHBlZWtDYWNoZUZyb21Qb29sKCk7XG4gIHJldHVybiBudWxsID09PSBjYWNoZUZyb21Qb29sXG4gICAgPyBudWxsXG4gICAgOiB7IHBhcmVudDogQ2FjaGVDb250ZXh0Ll9jdXJyZW50VmFsdWUsIHBvb2w6IGNhY2hlRnJvbVBvb2wgfTtcbn1cbnZhciByZW5kZXJMYW5lcyA9IDAsXG4gIGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyJDEgPSBudWxsLFxuICBjdXJyZW50SG9vayA9IG51bGwsXG4gIHdvcmtJblByb2dyZXNzSG9vayA9IG51bGwsXG4gIGRpZFNjaGVkdWxlUmVuZGVyUGhhc2VVcGRhdGUgPSAhMSxcbiAgZGlkU2NoZWR1bGVSZW5kZXJQaGFzZVVwZGF0ZUR1cmluZ1RoaXNQYXNzID0gITEsXG4gIHNob3VsZERvdWJsZUludm9rZVVzZXJGbnNJbkhvb2tzREVWID0gITEsXG4gIGxvY2FsSWRDb3VudGVyID0gMCxcbiAgdGhlbmFibGVJbmRleENvdW50ZXIgPSAwLFxuICB0aGVuYWJsZVN0YXRlID0gbnVsbCxcbiAgZ2xvYmFsQ2xpZW50SWRDb3VudGVyID0gMDtcbmZ1bmN0aW9uIHRocm93SW52YWxpZEhvb2tFcnJvcigpIHtcbiAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgzMjEpKTtcbn1cbmZ1bmN0aW9uIGFyZUhvb2tJbnB1dHNFcXVhbChuZXh0RGVwcywgcHJldkRlcHMpIHtcbiAgaWYgKG51bGwgPT09IHByZXZEZXBzKSByZXR1cm4gITE7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcHJldkRlcHMubGVuZ3RoICYmIGkgPCBuZXh0RGVwcy5sZW5ndGg7IGkrKylcbiAgICBpZiAoIW9iamVjdElzKG5leHREZXBzW2ldLCBwcmV2RGVwc1tpXSkpIHJldHVybiAhMTtcbiAgcmV0dXJuICEwO1xufVxuZnVuY3Rpb24gcmVuZGVyV2l0aEhvb2tzKFxuICBjdXJyZW50LFxuICB3b3JrSW5Qcm9ncmVzcyxcbiAgQ29tcG9uZW50LFxuICBwcm9wcyxcbiAgc2Vjb25kQXJnLFxuICBuZXh0UmVuZGVyTGFuZXNcbikge1xuICByZW5kZXJMYW5lcyA9IG5leHRSZW5kZXJMYW5lcztcbiAgY3VycmVudGx5UmVuZGVyaW5nRmliZXIkMSA9IHdvcmtJblByb2dyZXNzO1xuICB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlID0gbnVsbDtcbiAgd29ya0luUHJvZ3Jlc3MudXBkYXRlUXVldWUgPSBudWxsO1xuICB3b3JrSW5Qcm9ncmVzcy5sYW5lcyA9IDA7XG4gIFJlYWN0U2hhcmVkSW50ZXJuYWxzLkggPVxuICAgIG51bGwgPT09IGN1cnJlbnQgfHwgbnVsbCA9PT0gY3VycmVudC5tZW1vaXplZFN0YXRlXG4gICAgICA/IEhvb2tzRGlzcGF0Y2hlck9uTW91bnRcbiAgICAgIDogSG9va3NEaXNwYXRjaGVyT25VcGRhdGU7XG4gIHNob3VsZERvdWJsZUludm9rZVVzZXJGbnNJbkhvb2tzREVWID0gITE7XG4gIG5leHRSZW5kZXJMYW5lcyA9IENvbXBvbmVudChwcm9wcywgc2Vjb25kQXJnKTtcbiAgc2hvdWxkRG91YmxlSW52b2tlVXNlckZuc0luSG9va3NERVYgPSAhMTtcbiAgZGlkU2NoZWR1bGVSZW5kZXJQaGFzZVVwZGF0ZUR1cmluZ1RoaXNQYXNzICYmXG4gICAgKG5leHRSZW5kZXJMYW5lcyA9IHJlbmRlcldpdGhIb29rc0FnYWluKFxuICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICBDb21wb25lbnQsXG4gICAgICBwcm9wcyxcbiAgICAgIHNlY29uZEFyZ1xuICAgICkpO1xuICBmaW5pc2hSZW5kZXJpbmdIb29rcyhjdXJyZW50KTtcbiAgcmV0dXJuIG5leHRSZW5kZXJMYW5lcztcbn1cbmZ1bmN0aW9uIGZpbmlzaFJlbmRlcmluZ0hvb2tzKGN1cnJlbnQpIHtcbiAgUmVhY3RTaGFyZWRJbnRlcm5hbHMuSCA9IENvbnRleHRPbmx5RGlzcGF0Y2hlcjtcbiAgdmFyIGRpZFJlbmRlclRvb0Zld0hvb2tzID0gbnVsbCAhPT0gY3VycmVudEhvb2sgJiYgbnVsbCAhPT0gY3VycmVudEhvb2submV4dDtcbiAgcmVuZGVyTGFuZXMgPSAwO1xuICB3b3JrSW5Qcm9ncmVzc0hvb2sgPSBjdXJyZW50SG9vayA9IGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyJDEgPSBudWxsO1xuICBkaWRTY2hlZHVsZVJlbmRlclBoYXNlVXBkYXRlID0gITE7XG4gIHRoZW5hYmxlSW5kZXhDb3VudGVyID0gMDtcbiAgdGhlbmFibGVTdGF0ZSA9IG51bGw7XG4gIGlmIChkaWRSZW5kZXJUb29GZXdIb29rcykgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgzMDApKTtcbiAgbnVsbCA9PT0gY3VycmVudCB8fFxuICAgIGRpZFJlY2VpdmVVcGRhdGUgfHxcbiAgICAoKGN1cnJlbnQgPSBjdXJyZW50LmRlcGVuZGVuY2llcyksXG4gICAgbnVsbCAhPT0gY3VycmVudCAmJlxuICAgICAgY2hlY2tJZkNvbnRleHRDaGFuZ2VkKGN1cnJlbnQpICYmXG4gICAgICAoZGlkUmVjZWl2ZVVwZGF0ZSA9ICEwKSk7XG59XG5mdW5jdGlvbiByZW5kZXJXaXRoSG9va3NBZ2Fpbih3b3JrSW5Qcm9ncmVzcywgQ29tcG9uZW50LCBwcm9wcywgc2Vjb25kQXJnKSB7XG4gIGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyJDEgPSB3b3JrSW5Qcm9ncmVzcztcbiAgdmFyIG51bWJlck9mUmVSZW5kZXJzID0gMDtcbiAgZG8ge1xuICAgIGRpZFNjaGVkdWxlUmVuZGVyUGhhc2VVcGRhdGVEdXJpbmdUaGlzUGFzcyAmJiAodGhlbmFibGVTdGF0ZSA9IG51bGwpO1xuICAgIHRoZW5hYmxlSW5kZXhDb3VudGVyID0gMDtcbiAgICBkaWRTY2hlZHVsZVJlbmRlclBoYXNlVXBkYXRlRHVyaW5nVGhpc1Bhc3MgPSAhMTtcbiAgICBpZiAoMjUgPD0gbnVtYmVyT2ZSZVJlbmRlcnMpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMzAxKSk7XG4gICAgbnVtYmVyT2ZSZVJlbmRlcnMgKz0gMTtcbiAgICB3b3JrSW5Qcm9ncmVzc0hvb2sgPSBjdXJyZW50SG9vayA9IG51bGw7XG4gICAgaWYgKG51bGwgIT0gd29ya0luUHJvZ3Jlc3MudXBkYXRlUXVldWUpIHtcbiAgICAgIHZhciBjaGlsZHJlbiA9IHdvcmtJblByb2dyZXNzLnVwZGF0ZVF1ZXVlO1xuICAgICAgY2hpbGRyZW4ubGFzdEVmZmVjdCA9IG51bGw7XG4gICAgICBjaGlsZHJlbi5ldmVudHMgPSBudWxsO1xuICAgICAgY2hpbGRyZW4uc3RvcmVzID0gbnVsbDtcbiAgICAgIG51bGwgIT0gY2hpbGRyZW4ubWVtb0NhY2hlICYmIChjaGlsZHJlbi5tZW1vQ2FjaGUuaW5kZXggPSAwKTtcbiAgICB9XG4gICAgUmVhY3RTaGFyZWRJbnRlcm5hbHMuSCA9IEhvb2tzRGlzcGF0Y2hlck9uUmVyZW5kZXI7XG4gICAgY2hpbGRyZW4gPSBDb21wb25lbnQocHJvcHMsIHNlY29uZEFyZyk7XG4gIH0gd2hpbGUgKGRpZFNjaGVkdWxlUmVuZGVyUGhhc2VVcGRhdGVEdXJpbmdUaGlzUGFzcyk7XG4gIHJldHVybiBjaGlsZHJlbjtcbn1cbmZ1bmN0aW9uIFRyYW5zaXRpb25Bd2FyZUhvc3RDb21wb25lbnQoKSB7XG4gIHZhciBkaXNwYXRjaGVyID0gUmVhY3RTaGFyZWRJbnRlcm5hbHMuSCxcbiAgICBtYXliZVRoZW5hYmxlID0gZGlzcGF0Y2hlci51c2VTdGF0ZSgpWzBdO1xuICBtYXliZVRoZW5hYmxlID1cbiAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBtYXliZVRoZW5hYmxlLnRoZW5cbiAgICAgID8gdXNlVGhlbmFibGUobWF5YmVUaGVuYWJsZSlcbiAgICAgIDogbWF5YmVUaGVuYWJsZTtcbiAgZGlzcGF0Y2hlciA9IGRpc3BhdGNoZXIudXNlU3RhdGUoKVswXTtcbiAgKG51bGwgIT09IGN1cnJlbnRIb29rID8gY3VycmVudEhvb2subWVtb2l6ZWRTdGF0ZSA6IG51bGwpICE9PSBkaXNwYXRjaGVyICYmXG4gICAgKGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyJDEuZmxhZ3MgfD0gMTAyNCk7XG4gIHJldHVybiBtYXliZVRoZW5hYmxlO1xufVxuZnVuY3Rpb24gY2hlY2tEaWRSZW5kZXJJZEhvb2soKSB7XG4gIHZhciBkaWRSZW5kZXJJZEhvb2sgPSAwICE9PSBsb2NhbElkQ291bnRlcjtcbiAgbG9jYWxJZENvdW50ZXIgPSAwO1xuICByZXR1cm4gZGlkUmVuZGVySWRIb29rO1xufVxuZnVuY3Rpb24gYmFpbG91dEhvb2tzKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCBsYW5lcykge1xuICB3b3JrSW5Qcm9ncmVzcy51cGRhdGVRdWV1ZSA9IGN1cnJlbnQudXBkYXRlUXVldWU7XG4gIHdvcmtJblByb2dyZXNzLmZsYWdzICY9IC0yMDUzO1xuICBjdXJyZW50LmxhbmVzICY9IH5sYW5lcztcbn1cbmZ1bmN0aW9uIHJlc2V0SG9va3NPblVud2luZCh3b3JrSW5Qcm9ncmVzcykge1xuICBpZiAoZGlkU2NoZWR1bGVSZW5kZXJQaGFzZVVwZGF0ZSkge1xuICAgIGZvciAoXG4gICAgICB3b3JrSW5Qcm9ncmVzcyA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGU7XG4gICAgICBudWxsICE9PSB3b3JrSW5Qcm9ncmVzcztcblxuICAgICkge1xuICAgICAgdmFyIHF1ZXVlID0gd29ya0luUHJvZ3Jlc3MucXVldWU7XG4gICAgICBudWxsICE9PSBxdWV1ZSAmJiAocXVldWUucGVuZGluZyA9IG51bGwpO1xuICAgICAgd29ya0luUHJvZ3Jlc3MgPSB3b3JrSW5Qcm9ncmVzcy5uZXh0O1xuICAgIH1cbiAgICBkaWRTY2hlZHVsZVJlbmRlclBoYXNlVXBkYXRlID0gITE7XG4gIH1cbiAgcmVuZGVyTGFuZXMgPSAwO1xuICB3b3JrSW5Qcm9ncmVzc0hvb2sgPSBjdXJyZW50SG9vayA9IGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyJDEgPSBudWxsO1xuICBkaWRTY2hlZHVsZVJlbmRlclBoYXNlVXBkYXRlRHVyaW5nVGhpc1Bhc3MgPSAhMTtcbiAgdGhlbmFibGVJbmRleENvdW50ZXIgPSBsb2NhbElkQ291bnRlciA9IDA7XG4gIHRoZW5hYmxlU3RhdGUgPSBudWxsO1xufVxuZnVuY3Rpb24gbW91bnRXb3JrSW5Qcm9ncmVzc0hvb2soKSB7XG4gIHZhciBob29rID0ge1xuICAgIG1lbW9pemVkU3RhdGU6IG51bGwsXG4gICAgYmFzZVN0YXRlOiBudWxsLFxuICAgIGJhc2VRdWV1ZTogbnVsbCxcbiAgICBxdWV1ZTogbnVsbCxcbiAgICBuZXh0OiBudWxsXG4gIH07XG4gIG51bGwgPT09IHdvcmtJblByb2dyZXNzSG9va1xuICAgID8gKGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyJDEubWVtb2l6ZWRTdGF0ZSA9IHdvcmtJblByb2dyZXNzSG9vayA9IGhvb2spXG4gICAgOiAod29ya0luUHJvZ3Jlc3NIb29rID0gd29ya0luUHJvZ3Jlc3NIb29rLm5leHQgPSBob29rKTtcbiAgcmV0dXJuIHdvcmtJblByb2dyZXNzSG9vaztcbn1cbmZ1bmN0aW9uIHVwZGF0ZVdvcmtJblByb2dyZXNzSG9vaygpIHtcbiAgaWYgKG51bGwgPT09IGN1cnJlbnRIb29rKSB7XG4gICAgdmFyIG5leHRDdXJyZW50SG9vayA9IGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyJDEuYWx0ZXJuYXRlO1xuICAgIG5leHRDdXJyZW50SG9vayA9XG4gICAgICBudWxsICE9PSBuZXh0Q3VycmVudEhvb2sgPyBuZXh0Q3VycmVudEhvb2subWVtb2l6ZWRTdGF0ZSA6IG51bGw7XG4gIH0gZWxzZSBuZXh0Q3VycmVudEhvb2sgPSBjdXJyZW50SG9vay5uZXh0O1xuICB2YXIgbmV4dFdvcmtJblByb2dyZXNzSG9vayA9XG4gICAgbnVsbCA9PT0gd29ya0luUHJvZ3Jlc3NIb29rXG4gICAgICA/IGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyJDEubWVtb2l6ZWRTdGF0ZVxuICAgICAgOiB3b3JrSW5Qcm9ncmVzc0hvb2submV4dDtcbiAgaWYgKG51bGwgIT09IG5leHRXb3JrSW5Qcm9ncmVzc0hvb2spXG4gICAgKHdvcmtJblByb2dyZXNzSG9vayA9IG5leHRXb3JrSW5Qcm9ncmVzc0hvb2spLFxuICAgICAgKGN1cnJlbnRIb29rID0gbmV4dEN1cnJlbnRIb29rKTtcbiAgZWxzZSB7XG4gICAgaWYgKG51bGwgPT09IG5leHRDdXJyZW50SG9vaykge1xuICAgICAgaWYgKG51bGwgPT09IGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyJDEuYWx0ZXJuYXRlKVxuICAgICAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDQ2NykpO1xuICAgICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgzMTApKTtcbiAgICB9XG4gICAgY3VycmVudEhvb2sgPSBuZXh0Q3VycmVudEhvb2s7XG4gICAgbmV4dEN1cnJlbnRIb29rID0ge1xuICAgICAgbWVtb2l6ZWRTdGF0ZTogY3VycmVudEhvb2subWVtb2l6ZWRTdGF0ZSxcbiAgICAgIGJhc2VTdGF0ZTogY3VycmVudEhvb2suYmFzZVN0YXRlLFxuICAgICAgYmFzZVF1ZXVlOiBjdXJyZW50SG9vay5iYXNlUXVldWUsXG4gICAgICBxdWV1ZTogY3VycmVudEhvb2sucXVldWUsXG4gICAgICBuZXh0OiBudWxsXG4gICAgfTtcbiAgICBudWxsID09PSB3b3JrSW5Qcm9ncmVzc0hvb2tcbiAgICAgID8gKGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyJDEubWVtb2l6ZWRTdGF0ZSA9IHdvcmtJblByb2dyZXNzSG9vayA9XG4gICAgICAgICAgbmV4dEN1cnJlbnRIb29rKVxuICAgICAgOiAod29ya0luUHJvZ3Jlc3NIb29rID0gd29ya0luUHJvZ3Jlc3NIb29rLm5leHQgPSBuZXh0Q3VycmVudEhvb2spO1xuICB9XG4gIHJldHVybiB3b3JrSW5Qcm9ncmVzc0hvb2s7XG59XG52YXIgY3JlYXRlRnVuY3Rpb25Db21wb25lbnRVcGRhdGVRdWV1ZTtcbmNyZWF0ZUZ1bmN0aW9uQ29tcG9uZW50VXBkYXRlUXVldWUgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB7IGxhc3RFZmZlY3Q6IG51bGwsIGV2ZW50czogbnVsbCwgc3RvcmVzOiBudWxsLCBtZW1vQ2FjaGU6IG51bGwgfTtcbn07XG5mdW5jdGlvbiB1c2VUaGVuYWJsZSh0aGVuYWJsZSkge1xuICB2YXIgaW5kZXggPSB0aGVuYWJsZUluZGV4Q291bnRlcjtcbiAgdGhlbmFibGVJbmRleENvdW50ZXIgKz0gMTtcbiAgbnVsbCA9PT0gdGhlbmFibGVTdGF0ZSAmJiAodGhlbmFibGVTdGF0ZSA9IFtdKTtcbiAgdGhlbmFibGUgPSB0cmFja1VzZWRUaGVuYWJsZSh0aGVuYWJsZVN0YXRlLCB0aGVuYWJsZSwgaW5kZXgpO1xuICBpbmRleCA9IGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyJDE7XG4gIG51bGwgPT09XG4gICAgKG51bGwgPT09IHdvcmtJblByb2dyZXNzSG9va1xuICAgICAgPyBpbmRleC5tZW1vaXplZFN0YXRlXG4gICAgICA6IHdvcmtJblByb2dyZXNzSG9vay5uZXh0KSAmJlxuICAgICgoaW5kZXggPSBpbmRleC5hbHRlcm5hdGUpLFxuICAgIChSZWFjdFNoYXJlZEludGVybmFscy5IID1cbiAgICAgIG51bGwgPT09IGluZGV4IHx8IG51bGwgPT09IGluZGV4Lm1lbW9pemVkU3RhdGVcbiAgICAgICAgPyBIb29rc0Rpc3BhdGNoZXJPbk1vdW50XG4gICAgICAgIDogSG9va3NEaXNwYXRjaGVyT25VcGRhdGUpKTtcbiAgcmV0dXJuIHRoZW5hYmxlO1xufVxuZnVuY3Rpb24gdXNlKHVzYWJsZSkge1xuICBpZiAobnVsbCAhPT0gdXNhYmxlICYmIFwib2JqZWN0XCIgPT09IHR5cGVvZiB1c2FibGUpIHtcbiAgICBpZiAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgdXNhYmxlLnRoZW4pIHJldHVybiB1c2VUaGVuYWJsZSh1c2FibGUpO1xuICAgIGlmICh1c2FibGUuJCR0eXBlb2YgPT09IFJFQUNUX0NPTlRFWFRfVFlQRSkgcmV0dXJuIHJlYWRDb250ZXh0KHVzYWJsZSk7XG4gIH1cbiAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg0MzgsIFN0cmluZyh1c2FibGUpKSk7XG59XG5mdW5jdGlvbiB1c2VNZW1vQ2FjaGUoc2l6ZSkge1xuICB2YXIgbWVtb0NhY2hlID0gbnVsbCxcbiAgICB1cGRhdGVRdWV1ZSA9IGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyJDEudXBkYXRlUXVldWU7XG4gIG51bGwgIT09IHVwZGF0ZVF1ZXVlICYmIChtZW1vQ2FjaGUgPSB1cGRhdGVRdWV1ZS5tZW1vQ2FjaGUpO1xuICBpZiAobnVsbCA9PSBtZW1vQ2FjaGUpIHtcbiAgICB2YXIgY3VycmVudCA9IGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyJDEuYWx0ZXJuYXRlO1xuICAgIG51bGwgIT09IGN1cnJlbnQgJiZcbiAgICAgICgoY3VycmVudCA9IGN1cnJlbnQudXBkYXRlUXVldWUpLFxuICAgICAgbnVsbCAhPT0gY3VycmVudCAmJlxuICAgICAgICAoKGN1cnJlbnQgPSBjdXJyZW50Lm1lbW9DYWNoZSksXG4gICAgICAgIG51bGwgIT0gY3VycmVudCAmJlxuICAgICAgICAgIChtZW1vQ2FjaGUgPSB7XG4gICAgICAgICAgICBkYXRhOiBjdXJyZW50LmRhdGEubWFwKGZ1bmN0aW9uIChhcnJheSkge1xuICAgICAgICAgICAgICByZXR1cm4gYXJyYXkuc2xpY2UoKTtcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgaW5kZXg6IDBcbiAgICAgICAgICB9KSkpO1xuICB9XG4gIG51bGwgPT0gbWVtb0NhY2hlICYmIChtZW1vQ2FjaGUgPSB7IGRhdGE6IFtdLCBpbmRleDogMCB9KTtcbiAgbnVsbCA9PT0gdXBkYXRlUXVldWUgJiZcbiAgICAoKHVwZGF0ZVF1ZXVlID0gY3JlYXRlRnVuY3Rpb25Db21wb25lbnRVcGRhdGVRdWV1ZSgpKSxcbiAgICAoY3VycmVudGx5UmVuZGVyaW5nRmliZXIkMS51cGRhdGVRdWV1ZSA9IHVwZGF0ZVF1ZXVlKSk7XG4gIHVwZGF0ZVF1ZXVlLm1lbW9DYWNoZSA9IG1lbW9DYWNoZTtcbiAgdXBkYXRlUXVldWUgPSBtZW1vQ2FjaGUuZGF0YVttZW1vQ2FjaGUuaW5kZXhdO1xuICBpZiAodm9pZCAwID09PSB1cGRhdGVRdWV1ZSlcbiAgICBmb3IgKFxuICAgICAgdXBkYXRlUXVldWUgPSBtZW1vQ2FjaGUuZGF0YVttZW1vQ2FjaGUuaW5kZXhdID0gQXJyYXkoc2l6ZSksIGN1cnJlbnQgPSAwO1xuICAgICAgY3VycmVudCA8IHNpemU7XG4gICAgICBjdXJyZW50KytcbiAgICApXG4gICAgICB1cGRhdGVRdWV1ZVtjdXJyZW50XSA9IFJFQUNUX01FTU9fQ0FDSEVfU0VOVElORUw7XG4gIG1lbW9DYWNoZS5pbmRleCsrO1xuICByZXR1cm4gdXBkYXRlUXVldWU7XG59XG5mdW5jdGlvbiBiYXNpY1N0YXRlUmVkdWNlcihzdGF0ZSwgYWN0aW9uKSB7XG4gIHJldHVybiBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBhY3Rpb24gPyBhY3Rpb24oc3RhdGUpIDogYWN0aW9uO1xufVxuZnVuY3Rpb24gdXBkYXRlUmVkdWNlcihyZWR1Y2VyKSB7XG4gIHZhciBob29rID0gdXBkYXRlV29ya0luUHJvZ3Jlc3NIb29rKCk7XG4gIHJldHVybiB1cGRhdGVSZWR1Y2VySW1wbChob29rLCBjdXJyZW50SG9vaywgcmVkdWNlcik7XG59XG5mdW5jdGlvbiB1cGRhdGVSZWR1Y2VySW1wbChob29rLCBjdXJyZW50LCByZWR1Y2VyKSB7XG4gIHZhciBxdWV1ZSA9IGhvb2sucXVldWU7XG4gIGlmIChudWxsID09PSBxdWV1ZSkgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgzMTEpKTtcbiAgcXVldWUubGFzdFJlbmRlcmVkUmVkdWNlciA9IHJlZHVjZXI7XG4gIHZhciBiYXNlUXVldWUgPSBob29rLmJhc2VRdWV1ZSxcbiAgICBwZW5kaW5nUXVldWUgPSBxdWV1ZS5wZW5kaW5nO1xuICBpZiAobnVsbCAhPT0gcGVuZGluZ1F1ZXVlKSB7XG4gICAgaWYgKG51bGwgIT09IGJhc2VRdWV1ZSkge1xuICAgICAgdmFyIGJhc2VGaXJzdCA9IGJhc2VRdWV1ZS5uZXh0O1xuICAgICAgYmFzZVF1ZXVlLm5leHQgPSBwZW5kaW5nUXVldWUubmV4dDtcbiAgICAgIHBlbmRpbmdRdWV1ZS5uZXh0ID0gYmFzZUZpcnN0O1xuICAgIH1cbiAgICBjdXJyZW50LmJhc2VRdWV1ZSA9IGJhc2VRdWV1ZSA9IHBlbmRpbmdRdWV1ZTtcbiAgICBxdWV1ZS5wZW5kaW5nID0gbnVsbDtcbiAgfVxuICBwZW5kaW5nUXVldWUgPSBob29rLmJhc2VTdGF0ZTtcbiAgaWYgKG51bGwgPT09IGJhc2VRdWV1ZSkgaG9vay5tZW1vaXplZFN0YXRlID0gcGVuZGluZ1F1ZXVlO1xuICBlbHNlIHtcbiAgICBjdXJyZW50ID0gYmFzZVF1ZXVlLm5leHQ7XG4gICAgdmFyIG5ld0Jhc2VRdWV1ZUZpcnN0ID0gKGJhc2VGaXJzdCA9IG51bGwpLFxuICAgICAgbmV3QmFzZVF1ZXVlTGFzdCA9IG51bGwsXG4gICAgICB1cGRhdGUgPSBjdXJyZW50LFxuICAgICAgZGlkUmVhZEZyb21FbnRhbmdsZWRBc3luY0FjdGlvbiQ1NCA9ICExO1xuICAgIGRvIHtcbiAgICAgIHZhciB1cGRhdGVMYW5lID0gdXBkYXRlLmxhbmUgJiAtNTM2ODcwOTEzO1xuICAgICAgaWYgKFxuICAgICAgICB1cGRhdGVMYW5lICE9PSB1cGRhdGUubGFuZVxuICAgICAgICAgID8gKHdvcmtJblByb2dyZXNzUm9vdFJlbmRlckxhbmVzICYgdXBkYXRlTGFuZSkgPT09IHVwZGF0ZUxhbmVcbiAgICAgICAgICA6IChyZW5kZXJMYW5lcyAmIHVwZGF0ZUxhbmUpID09PSB1cGRhdGVMYW5lXG4gICAgICApIHtcbiAgICAgICAgdmFyIHJldmVydExhbmUgPSB1cGRhdGUucmV2ZXJ0TGFuZTtcbiAgICAgICAgaWYgKDAgPT09IHJldmVydExhbmUpXG4gICAgICAgICAgbnVsbCAhPT0gbmV3QmFzZVF1ZXVlTGFzdCAmJlxuICAgICAgICAgICAgKG5ld0Jhc2VRdWV1ZUxhc3QgPSBuZXdCYXNlUXVldWVMYXN0Lm5leHQgPVxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbGFuZTogMCxcbiAgICAgICAgICAgICAgICByZXZlcnRMYW5lOiAwLFxuICAgICAgICAgICAgICAgIGFjdGlvbjogdXBkYXRlLmFjdGlvbixcbiAgICAgICAgICAgICAgICBoYXNFYWdlclN0YXRlOiB1cGRhdGUuaGFzRWFnZXJTdGF0ZSxcbiAgICAgICAgICAgICAgICBlYWdlclN0YXRlOiB1cGRhdGUuZWFnZXJTdGF0ZSxcbiAgICAgICAgICAgICAgICBuZXh0OiBudWxsXG4gICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgdXBkYXRlTGFuZSA9PT0gY3VycmVudEVudGFuZ2xlZExhbmUgJiZcbiAgICAgICAgICAgICAgKGRpZFJlYWRGcm9tRW50YW5nbGVkQXN5bmNBY3Rpb24kNTQgPSAhMCk7XG4gICAgICAgIGVsc2UgaWYgKChyZW5kZXJMYW5lcyAmIHJldmVydExhbmUpID09PSByZXZlcnRMYW5lKSB7XG4gICAgICAgICAgdXBkYXRlID0gdXBkYXRlLm5leHQ7XG4gICAgICAgICAgcmV2ZXJ0TGFuZSA9PT0gY3VycmVudEVudGFuZ2xlZExhbmUgJiZcbiAgICAgICAgICAgIChkaWRSZWFkRnJvbUVudGFuZ2xlZEFzeW5jQWN0aW9uJDU0ID0gITApO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9IGVsc2VcbiAgICAgICAgICAodXBkYXRlTGFuZSA9IHtcbiAgICAgICAgICAgIGxhbmU6IDAsXG4gICAgICAgICAgICByZXZlcnRMYW5lOiB1cGRhdGUucmV2ZXJ0TGFuZSxcbiAgICAgICAgICAgIGFjdGlvbjogdXBkYXRlLmFjdGlvbixcbiAgICAgICAgICAgIGhhc0VhZ2VyU3RhdGU6IHVwZGF0ZS5oYXNFYWdlclN0YXRlLFxuICAgICAgICAgICAgZWFnZXJTdGF0ZTogdXBkYXRlLmVhZ2VyU3RhdGUsXG4gICAgICAgICAgICBuZXh0OiBudWxsXG4gICAgICAgICAgfSksXG4gICAgICAgICAgICBudWxsID09PSBuZXdCYXNlUXVldWVMYXN0XG4gICAgICAgICAgICAgID8gKChuZXdCYXNlUXVldWVGaXJzdCA9IG5ld0Jhc2VRdWV1ZUxhc3QgPSB1cGRhdGVMYW5lKSxcbiAgICAgICAgICAgICAgICAoYmFzZUZpcnN0ID0gcGVuZGluZ1F1ZXVlKSlcbiAgICAgICAgICAgICAgOiAobmV3QmFzZVF1ZXVlTGFzdCA9IG5ld0Jhc2VRdWV1ZUxhc3QubmV4dCA9IHVwZGF0ZUxhbmUpLFxuICAgICAgICAgICAgKGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyJDEubGFuZXMgfD0gcmV2ZXJ0TGFuZSksXG4gICAgICAgICAgICAod29ya0luUHJvZ3Jlc3NSb290U2tpcHBlZExhbmVzIHw9IHJldmVydExhbmUpO1xuICAgICAgICB1cGRhdGVMYW5lID0gdXBkYXRlLmFjdGlvbjtcbiAgICAgICAgc2hvdWxkRG91YmxlSW52b2tlVXNlckZuc0luSG9va3NERVYgJiZcbiAgICAgICAgICByZWR1Y2VyKHBlbmRpbmdRdWV1ZSwgdXBkYXRlTGFuZSk7XG4gICAgICAgIHBlbmRpbmdRdWV1ZSA9IHVwZGF0ZS5oYXNFYWdlclN0YXRlXG4gICAgICAgICAgPyB1cGRhdGUuZWFnZXJTdGF0ZVxuICAgICAgICAgIDogcmVkdWNlcihwZW5kaW5nUXVldWUsIHVwZGF0ZUxhbmUpO1xuICAgICAgfSBlbHNlXG4gICAgICAgIChyZXZlcnRMYW5lID0ge1xuICAgICAgICAgIGxhbmU6IHVwZGF0ZUxhbmUsXG4gICAgICAgICAgcmV2ZXJ0TGFuZTogdXBkYXRlLnJldmVydExhbmUsXG4gICAgICAgICAgYWN0aW9uOiB1cGRhdGUuYWN0aW9uLFxuICAgICAgICAgIGhhc0VhZ2VyU3RhdGU6IHVwZGF0ZS5oYXNFYWdlclN0YXRlLFxuICAgICAgICAgIGVhZ2VyU3RhdGU6IHVwZGF0ZS5lYWdlclN0YXRlLFxuICAgICAgICAgIG5leHQ6IG51bGxcbiAgICAgICAgfSksXG4gICAgICAgICAgbnVsbCA9PT0gbmV3QmFzZVF1ZXVlTGFzdFxuICAgICAgICAgICAgPyAoKG5ld0Jhc2VRdWV1ZUZpcnN0ID0gbmV3QmFzZVF1ZXVlTGFzdCA9IHJldmVydExhbmUpLFxuICAgICAgICAgICAgICAoYmFzZUZpcnN0ID0gcGVuZGluZ1F1ZXVlKSlcbiAgICAgICAgICAgIDogKG5ld0Jhc2VRdWV1ZUxhc3QgPSBuZXdCYXNlUXVldWVMYXN0Lm5leHQgPSByZXZlcnRMYW5lKSxcbiAgICAgICAgICAoY3VycmVudGx5UmVuZGVyaW5nRmliZXIkMS5sYW5lcyB8PSB1cGRhdGVMYW5lKSxcbiAgICAgICAgICAod29ya0luUHJvZ3Jlc3NSb290U2tpcHBlZExhbmVzIHw9IHVwZGF0ZUxhbmUpO1xuICAgICAgdXBkYXRlID0gdXBkYXRlLm5leHQ7XG4gICAgfSB3aGlsZSAobnVsbCAhPT0gdXBkYXRlICYmIHVwZGF0ZSAhPT0gY3VycmVudCk7XG4gICAgbnVsbCA9PT0gbmV3QmFzZVF1ZXVlTGFzdFxuICAgICAgPyAoYmFzZUZpcnN0ID0gcGVuZGluZ1F1ZXVlKVxuICAgICAgOiAobmV3QmFzZVF1ZXVlTGFzdC5uZXh0ID0gbmV3QmFzZVF1ZXVlRmlyc3QpO1xuICAgIGlmIChcbiAgICAgICFvYmplY3RJcyhwZW5kaW5nUXVldWUsIGhvb2subWVtb2l6ZWRTdGF0ZSkgJiZcbiAgICAgICgoZGlkUmVjZWl2ZVVwZGF0ZSA9ICEwKSxcbiAgICAgIGRpZFJlYWRGcm9tRW50YW5nbGVkQXN5bmNBY3Rpb24kNTQgJiZcbiAgICAgICAgKChyZWR1Y2VyID0gY3VycmVudEVudGFuZ2xlZEFjdGlvblRoZW5hYmxlKSwgbnVsbCAhPT0gcmVkdWNlcikpXG4gICAgKVxuICAgICAgdGhyb3cgcmVkdWNlcjtcbiAgICBob29rLm1lbW9pemVkU3RhdGUgPSBwZW5kaW5nUXVldWU7XG4gICAgaG9vay5iYXNlU3RhdGUgPSBiYXNlRmlyc3Q7XG4gICAgaG9vay5iYXNlUXVldWUgPSBuZXdCYXNlUXVldWVMYXN0O1xuICAgIHF1ZXVlLmxhc3RSZW5kZXJlZFN0YXRlID0gcGVuZGluZ1F1ZXVlO1xuICB9XG4gIG51bGwgPT09IGJhc2VRdWV1ZSAmJiAocXVldWUubGFuZXMgPSAwKTtcbiAgcmV0dXJuIFtob29rLm1lbW9pemVkU3RhdGUsIHF1ZXVlLmRpc3BhdGNoXTtcbn1cbmZ1bmN0aW9uIHJlcmVuZGVyUmVkdWNlcihyZWR1Y2VyKSB7XG4gIHZhciBob29rID0gdXBkYXRlV29ya0luUHJvZ3Jlc3NIb29rKCksXG4gICAgcXVldWUgPSBob29rLnF1ZXVlO1xuICBpZiAobnVsbCA9PT0gcXVldWUpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMzExKSk7XG4gIHF1ZXVlLmxhc3RSZW5kZXJlZFJlZHVjZXIgPSByZWR1Y2VyO1xuICB2YXIgZGlzcGF0Y2ggPSBxdWV1ZS5kaXNwYXRjaCxcbiAgICBsYXN0UmVuZGVyUGhhc2VVcGRhdGUgPSBxdWV1ZS5wZW5kaW5nLFxuICAgIG5ld1N0YXRlID0gaG9vay5tZW1vaXplZFN0YXRlO1xuICBpZiAobnVsbCAhPT0gbGFzdFJlbmRlclBoYXNlVXBkYXRlKSB7XG4gICAgcXVldWUucGVuZGluZyA9IG51bGw7XG4gICAgdmFyIHVwZGF0ZSA9IChsYXN0UmVuZGVyUGhhc2VVcGRhdGUgPSBsYXN0UmVuZGVyUGhhc2VVcGRhdGUubmV4dCk7XG4gICAgZG8gKG5ld1N0YXRlID0gcmVkdWNlcihuZXdTdGF0ZSwgdXBkYXRlLmFjdGlvbikpLCAodXBkYXRlID0gdXBkYXRlLm5leHQpO1xuICAgIHdoaWxlICh1cGRhdGUgIT09IGxhc3RSZW5kZXJQaGFzZVVwZGF0ZSk7XG4gICAgb2JqZWN0SXMobmV3U3RhdGUsIGhvb2subWVtb2l6ZWRTdGF0ZSkgfHwgKGRpZFJlY2VpdmVVcGRhdGUgPSAhMCk7XG4gICAgaG9vay5tZW1vaXplZFN0YXRlID0gbmV3U3RhdGU7XG4gICAgbnVsbCA9PT0gaG9vay5iYXNlUXVldWUgJiYgKGhvb2suYmFzZVN0YXRlID0gbmV3U3RhdGUpO1xuICAgIHF1ZXVlLmxhc3RSZW5kZXJlZFN0YXRlID0gbmV3U3RhdGU7XG4gIH1cbiAgcmV0dXJuIFtuZXdTdGF0ZSwgZGlzcGF0Y2hdO1xufVxuZnVuY3Rpb24gdXBkYXRlU3luY0V4dGVybmFsU3RvcmUoc3Vic2NyaWJlLCBnZXRTbmFwc2hvdCwgZ2V0U2VydmVyU25hcHNob3QpIHtcbiAgdmFyIGZpYmVyID0gY3VycmVudGx5UmVuZGVyaW5nRmliZXIkMSxcbiAgICBob29rID0gdXBkYXRlV29ya0luUHJvZ3Jlc3NIb29rKCksXG4gICAgaXNIeWRyYXRpbmckanNjb21wJDAgPSBpc0h5ZHJhdGluZztcbiAgaWYgKGlzSHlkcmF0aW5nJGpzY29tcCQwKSB7XG4gICAgaWYgKHZvaWQgMCA9PT0gZ2V0U2VydmVyU25hcHNob3QpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNDA3KSk7XG4gICAgZ2V0U2VydmVyU25hcHNob3QgPSBnZXRTZXJ2ZXJTbmFwc2hvdCgpO1xuICB9IGVsc2UgZ2V0U2VydmVyU25hcHNob3QgPSBnZXRTbmFwc2hvdCgpO1xuICB2YXIgc25hcHNob3RDaGFuZ2VkID0gIW9iamVjdElzKFxuICAgIChjdXJyZW50SG9vayB8fCBob29rKS5tZW1vaXplZFN0YXRlLFxuICAgIGdldFNlcnZlclNuYXBzaG90XG4gICk7XG4gIHNuYXBzaG90Q2hhbmdlZCAmJlxuICAgICgoaG9vay5tZW1vaXplZFN0YXRlID0gZ2V0U2VydmVyU25hcHNob3QpLCAoZGlkUmVjZWl2ZVVwZGF0ZSA9ICEwKSk7XG4gIGhvb2sgPSBob29rLnF1ZXVlO1xuICB1cGRhdGVFZmZlY3Qoc3Vic2NyaWJlVG9TdG9yZS5iaW5kKG51bGwsIGZpYmVyLCBob29rLCBzdWJzY3JpYmUpLCBbXG4gICAgc3Vic2NyaWJlXG4gIF0pO1xuICBpZiAoXG4gICAgaG9vay5nZXRTbmFwc2hvdCAhPT0gZ2V0U25hcHNob3QgfHxcbiAgICBzbmFwc2hvdENoYW5nZWQgfHxcbiAgICAobnVsbCAhPT0gd29ya0luUHJvZ3Jlc3NIb29rICYmIHdvcmtJblByb2dyZXNzSG9vay5tZW1vaXplZFN0YXRlLnRhZyAmIDEpXG4gICkge1xuICAgIGZpYmVyLmZsYWdzIHw9IDIwNDg7XG4gICAgcHVzaEVmZmVjdChcbiAgICAgIDksXG4gICAgICB1cGRhdGVTdG9yZUluc3RhbmNlLmJpbmQoXG4gICAgICAgIG51bGwsXG4gICAgICAgIGZpYmVyLFxuICAgICAgICBob29rLFxuICAgICAgICBnZXRTZXJ2ZXJTbmFwc2hvdCxcbiAgICAgICAgZ2V0U25hcHNob3RcbiAgICAgICksXG4gICAgICB7IGRlc3Ryb3k6IHZvaWQgMCB9LFxuICAgICAgbnVsbFxuICAgICk7XG4gICAgaWYgKG51bGwgPT09IHdvcmtJblByb2dyZXNzUm9vdCkgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgzNDkpKTtcbiAgICBpc0h5ZHJhdGluZyRqc2NvbXAkMCB8fFxuICAgICAgMCAhPT0gKHJlbmRlckxhbmVzICYgNjApIHx8XG4gICAgICBwdXNoU3RvcmVDb25zaXN0ZW5jeUNoZWNrKGZpYmVyLCBnZXRTbmFwc2hvdCwgZ2V0U2VydmVyU25hcHNob3QpO1xuICB9XG4gIHJldHVybiBnZXRTZXJ2ZXJTbmFwc2hvdDtcbn1cbmZ1bmN0aW9uIHB1c2hTdG9yZUNvbnNpc3RlbmN5Q2hlY2soZmliZXIsIGdldFNuYXBzaG90LCByZW5kZXJlZFNuYXBzaG90KSB7XG4gIGZpYmVyLmZsYWdzIHw9IDE2Mzg0O1xuICBmaWJlciA9IHsgZ2V0U25hcHNob3Q6IGdldFNuYXBzaG90LCB2YWx1ZTogcmVuZGVyZWRTbmFwc2hvdCB9O1xuICBnZXRTbmFwc2hvdCA9IGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyJDEudXBkYXRlUXVldWU7XG4gIG51bGwgPT09IGdldFNuYXBzaG90XG4gICAgPyAoKGdldFNuYXBzaG90ID0gY3JlYXRlRnVuY3Rpb25Db21wb25lbnRVcGRhdGVRdWV1ZSgpKSxcbiAgICAgIChjdXJyZW50bHlSZW5kZXJpbmdGaWJlciQxLnVwZGF0ZVF1ZXVlID0gZ2V0U25hcHNob3QpLFxuICAgICAgKGdldFNuYXBzaG90LnN0b3JlcyA9IFtmaWJlcl0pKVxuICAgIDogKChyZW5kZXJlZFNuYXBzaG90ID0gZ2V0U25hcHNob3Quc3RvcmVzKSxcbiAgICAgIG51bGwgPT09IHJlbmRlcmVkU25hcHNob3RcbiAgICAgICAgPyAoZ2V0U25hcHNob3Quc3RvcmVzID0gW2ZpYmVyXSlcbiAgICAgICAgOiByZW5kZXJlZFNuYXBzaG90LnB1c2goZmliZXIpKTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZVN0b3JlSW5zdGFuY2UoZmliZXIsIGluc3QsIG5leHRTbmFwc2hvdCwgZ2V0U25hcHNob3QpIHtcbiAgaW5zdC52YWx1ZSA9IG5leHRTbmFwc2hvdDtcbiAgaW5zdC5nZXRTbmFwc2hvdCA9IGdldFNuYXBzaG90O1xuICBjaGVja0lmU25hcHNob3RDaGFuZ2VkKGluc3QpICYmIGZvcmNlU3RvcmVSZXJlbmRlcihmaWJlcik7XG59XG5mdW5jdGlvbiBzdWJzY3JpYmVUb1N0b3JlKGZpYmVyLCBpbnN0LCBzdWJzY3JpYmUpIHtcbiAgcmV0dXJuIHN1YnNjcmliZShmdW5jdGlvbiAoKSB7XG4gICAgY2hlY2tJZlNuYXBzaG90Q2hhbmdlZChpbnN0KSAmJiBmb3JjZVN0b3JlUmVyZW5kZXIoZmliZXIpO1xuICB9KTtcbn1cbmZ1bmN0aW9uIGNoZWNrSWZTbmFwc2hvdENoYW5nZWQoaW5zdCkge1xuICB2YXIgbGF0ZXN0R2V0U25hcHNob3QgPSBpbnN0LmdldFNuYXBzaG90O1xuICBpbnN0ID0gaW5zdC52YWx1ZTtcbiAgdHJ5IHtcbiAgICB2YXIgbmV4dFZhbHVlID0gbGF0ZXN0R2V0U25hcHNob3QoKTtcbiAgICByZXR1cm4gIW9iamVjdElzKGluc3QsIG5leHRWYWx1ZSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuICEwO1xuICB9XG59XG5mdW5jdGlvbiBmb3JjZVN0b3JlUmVyZW5kZXIoZmliZXIpIHtcbiAgdmFyIHJvb3QgPSBlbnF1ZXVlQ29uY3VycmVudFJlbmRlckZvckxhbmUoZmliZXIsIDIpO1xuICBudWxsICE9PSByb290ICYmIHNjaGVkdWxlVXBkYXRlT25GaWJlcihyb290LCBmaWJlciwgMik7XG59XG5mdW5jdGlvbiBtb3VudFN0YXRlSW1wbChpbml0aWFsU3RhdGUpIHtcbiAgdmFyIGhvb2sgPSBtb3VudFdvcmtJblByb2dyZXNzSG9vaygpO1xuICBpZiAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgaW5pdGlhbFN0YXRlKSB7XG4gICAgdmFyIGluaXRpYWxTdGF0ZUluaXRpYWxpemVyID0gaW5pdGlhbFN0YXRlO1xuICAgIGluaXRpYWxTdGF0ZSA9IGluaXRpYWxTdGF0ZUluaXRpYWxpemVyKCk7XG4gICAgaWYgKHNob3VsZERvdWJsZUludm9rZVVzZXJGbnNJbkhvb2tzREVWKSB7XG4gICAgICBzZXRJc1N0cmljdE1vZGVGb3JEZXZ0b29scyghMCk7XG4gICAgICB0cnkge1xuICAgICAgICBpbml0aWFsU3RhdGVJbml0aWFsaXplcigpO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgc2V0SXNTdHJpY3RNb2RlRm9yRGV2dG9vbHMoITEpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBob29rLm1lbW9pemVkU3RhdGUgPSBob29rLmJhc2VTdGF0ZSA9IGluaXRpYWxTdGF0ZTtcbiAgaG9vay5xdWV1ZSA9IHtcbiAgICBwZW5kaW5nOiBudWxsLFxuICAgIGxhbmVzOiAwLFxuICAgIGRpc3BhdGNoOiBudWxsLFxuICAgIGxhc3RSZW5kZXJlZFJlZHVjZXI6IGJhc2ljU3RhdGVSZWR1Y2VyLFxuICAgIGxhc3RSZW5kZXJlZFN0YXRlOiBpbml0aWFsU3RhdGVcbiAgfTtcbiAgcmV0dXJuIGhvb2s7XG59XG5mdW5jdGlvbiB1cGRhdGVPcHRpbWlzdGljSW1wbChob29rLCBjdXJyZW50LCBwYXNzdGhyb3VnaCwgcmVkdWNlcikge1xuICBob29rLmJhc2VTdGF0ZSA9IHBhc3N0aHJvdWdoO1xuICByZXR1cm4gdXBkYXRlUmVkdWNlckltcGwoXG4gICAgaG9vayxcbiAgICBjdXJyZW50SG9vayxcbiAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiByZWR1Y2VyID8gcmVkdWNlciA6IGJhc2ljU3RhdGVSZWR1Y2VyXG4gICk7XG59XG5mdW5jdGlvbiBkaXNwYXRjaEFjdGlvblN0YXRlKFxuICBmaWJlcixcbiAgYWN0aW9uUXVldWUsXG4gIHNldFBlbmRpbmdTdGF0ZSxcbiAgc2V0U3RhdGUsXG4gIHBheWxvYWRcbikge1xuICBpZiAoaXNSZW5kZXJQaGFzZVVwZGF0ZShmaWJlcikpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNDg1KSk7XG4gIGZpYmVyID0gYWN0aW9uUXVldWUuYWN0aW9uO1xuICBpZiAobnVsbCAhPT0gZmliZXIpIHtcbiAgICB2YXIgYWN0aW9uTm9kZSA9IHtcbiAgICAgIHBheWxvYWQ6IHBheWxvYWQsXG4gICAgICBhY3Rpb246IGZpYmVyLFxuICAgICAgbmV4dDogbnVsbCxcbiAgICAgIGlzVHJhbnNpdGlvbjogITAsXG4gICAgICBzdGF0dXM6IFwicGVuZGluZ1wiLFxuICAgICAgdmFsdWU6IG51bGwsXG4gICAgICByZWFzb246IG51bGwsXG4gICAgICBsaXN0ZW5lcnM6IFtdLFxuICAgICAgdGhlbjogZnVuY3Rpb24gKGxpc3RlbmVyKSB7XG4gICAgICAgIGFjdGlvbk5vZGUubGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgICAgfVxuICAgIH07XG4gICAgbnVsbCAhPT0gUmVhY3RTaGFyZWRJbnRlcm5hbHMuVFxuICAgICAgPyBzZXRQZW5kaW5nU3RhdGUoITApXG4gICAgICA6IChhY3Rpb25Ob2RlLmlzVHJhbnNpdGlvbiA9ICExKTtcbiAgICBzZXRTdGF0ZShhY3Rpb25Ob2RlKTtcbiAgICBzZXRQZW5kaW5nU3RhdGUgPSBhY3Rpb25RdWV1ZS5wZW5kaW5nO1xuICAgIG51bGwgPT09IHNldFBlbmRpbmdTdGF0ZVxuICAgICAgPyAoKGFjdGlvbk5vZGUubmV4dCA9IGFjdGlvblF1ZXVlLnBlbmRpbmcgPSBhY3Rpb25Ob2RlKSxcbiAgICAgICAgcnVuQWN0aW9uU3RhdGVBY3Rpb24oYWN0aW9uUXVldWUsIGFjdGlvbk5vZGUpKVxuICAgICAgOiAoKGFjdGlvbk5vZGUubmV4dCA9IHNldFBlbmRpbmdTdGF0ZS5uZXh0KSxcbiAgICAgICAgKGFjdGlvblF1ZXVlLnBlbmRpbmcgPSBzZXRQZW5kaW5nU3RhdGUubmV4dCA9IGFjdGlvbk5vZGUpKTtcbiAgfVxufVxuZnVuY3Rpb24gcnVuQWN0aW9uU3RhdGVBY3Rpb24oYWN0aW9uUXVldWUsIG5vZGUpIHtcbiAgdmFyIGFjdGlvbiA9IG5vZGUuYWN0aW9uLFxuICAgIHBheWxvYWQgPSBub2RlLnBheWxvYWQsXG4gICAgcHJldlN0YXRlID0gYWN0aW9uUXVldWUuc3RhdGU7XG4gIGlmIChub2RlLmlzVHJhbnNpdGlvbikge1xuICAgIHZhciBwcmV2VHJhbnNpdGlvbiA9IFJlYWN0U2hhcmVkSW50ZXJuYWxzLlQsXG4gICAgICBjdXJyZW50VHJhbnNpdGlvbiA9IHt9O1xuICAgIFJlYWN0U2hhcmVkSW50ZXJuYWxzLlQgPSBjdXJyZW50VHJhbnNpdGlvbjtcbiAgICB0cnkge1xuICAgICAgdmFyIHJldHVyblZhbHVlID0gYWN0aW9uKHByZXZTdGF0ZSwgcGF5bG9hZCksXG4gICAgICAgIG9uU3RhcnRUcmFuc2l0aW9uRmluaXNoID0gUmVhY3RTaGFyZWRJbnRlcm5hbHMuUztcbiAgICAgIG51bGwgIT09IG9uU3RhcnRUcmFuc2l0aW9uRmluaXNoICYmXG4gICAgICAgIG9uU3RhcnRUcmFuc2l0aW9uRmluaXNoKGN1cnJlbnRUcmFuc2l0aW9uLCByZXR1cm5WYWx1ZSk7XG4gICAgICBoYW5kbGVBY3Rpb25SZXR1cm5WYWx1ZShhY3Rpb25RdWV1ZSwgbm9kZSwgcmV0dXJuVmFsdWUpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBvbkFjdGlvbkVycm9yKGFjdGlvblF1ZXVlLCBub2RlLCBlcnJvcik7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIFJlYWN0U2hhcmVkSW50ZXJuYWxzLlQgPSBwcmV2VHJhbnNpdGlvbjtcbiAgICB9XG4gIH0gZWxzZVxuICAgIHRyeSB7XG4gICAgICAocHJldlRyYW5zaXRpb24gPSBhY3Rpb24ocHJldlN0YXRlLCBwYXlsb2FkKSksXG4gICAgICAgIGhhbmRsZUFjdGlvblJldHVyblZhbHVlKGFjdGlvblF1ZXVlLCBub2RlLCBwcmV2VHJhbnNpdGlvbik7XG4gICAgfSBjYXRjaCAoZXJyb3IkNjApIHtcbiAgICAgIG9uQWN0aW9uRXJyb3IoYWN0aW9uUXVldWUsIG5vZGUsIGVycm9yJDYwKTtcbiAgICB9XG59XG5mdW5jdGlvbiBoYW5kbGVBY3Rpb25SZXR1cm5WYWx1ZShhY3Rpb25RdWV1ZSwgbm9kZSwgcmV0dXJuVmFsdWUpIHtcbiAgbnVsbCAhPT0gcmV0dXJuVmFsdWUgJiZcbiAgXCJvYmplY3RcIiA9PT0gdHlwZW9mIHJldHVyblZhbHVlICYmXG4gIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHJldHVyblZhbHVlLnRoZW5cbiAgICA/IHJldHVyblZhbHVlLnRoZW4oXG4gICAgICAgIGZ1bmN0aW9uIChuZXh0U3RhdGUpIHtcbiAgICAgICAgICBvbkFjdGlvblN1Y2Nlc3MoYWN0aW9uUXVldWUsIG5vZGUsIG5leHRTdGF0ZSk7XG4gICAgICAgIH0sXG4gICAgICAgIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgIHJldHVybiBvbkFjdGlvbkVycm9yKGFjdGlvblF1ZXVlLCBub2RlLCBlcnJvcik7XG4gICAgICAgIH1cbiAgICAgIClcbiAgICA6IG9uQWN0aW9uU3VjY2VzcyhhY3Rpb25RdWV1ZSwgbm9kZSwgcmV0dXJuVmFsdWUpO1xufVxuZnVuY3Rpb24gb25BY3Rpb25TdWNjZXNzKGFjdGlvblF1ZXVlLCBhY3Rpb25Ob2RlLCBuZXh0U3RhdGUpIHtcbiAgYWN0aW9uTm9kZS5zdGF0dXMgPSBcImZ1bGZpbGxlZFwiO1xuICBhY3Rpb25Ob2RlLnZhbHVlID0gbmV4dFN0YXRlO1xuICBub3RpZnlBY3Rpb25MaXN0ZW5lcnMoYWN0aW9uTm9kZSk7XG4gIGFjdGlvblF1ZXVlLnN0YXRlID0gbmV4dFN0YXRlO1xuICBhY3Rpb25Ob2RlID0gYWN0aW9uUXVldWUucGVuZGluZztcbiAgbnVsbCAhPT0gYWN0aW9uTm9kZSAmJlxuICAgICgobmV4dFN0YXRlID0gYWN0aW9uTm9kZS5uZXh0KSxcbiAgICBuZXh0U3RhdGUgPT09IGFjdGlvbk5vZGVcbiAgICAgID8gKGFjdGlvblF1ZXVlLnBlbmRpbmcgPSBudWxsKVxuICAgICAgOiAoKG5leHRTdGF0ZSA9IG5leHRTdGF0ZS5uZXh0KSxcbiAgICAgICAgKGFjdGlvbk5vZGUubmV4dCA9IG5leHRTdGF0ZSksXG4gICAgICAgIHJ1bkFjdGlvblN0YXRlQWN0aW9uKGFjdGlvblF1ZXVlLCBuZXh0U3RhdGUpKSk7XG59XG5mdW5jdGlvbiBvbkFjdGlvbkVycm9yKGFjdGlvblF1ZXVlLCBhY3Rpb25Ob2RlLCBlcnJvcikge1xuICB2YXIgbGFzdCA9IGFjdGlvblF1ZXVlLnBlbmRpbmc7XG4gIGFjdGlvblF1ZXVlLnBlbmRpbmcgPSBudWxsO1xuICBpZiAobnVsbCAhPT0gbGFzdCkge1xuICAgIGxhc3QgPSBsYXN0Lm5leHQ7XG4gICAgZG9cbiAgICAgIChhY3Rpb25Ob2RlLnN0YXR1cyA9IFwicmVqZWN0ZWRcIiksXG4gICAgICAgIChhY3Rpb25Ob2RlLnJlYXNvbiA9IGVycm9yKSxcbiAgICAgICAgbm90aWZ5QWN0aW9uTGlzdGVuZXJzKGFjdGlvbk5vZGUpLFxuICAgICAgICAoYWN0aW9uTm9kZSA9IGFjdGlvbk5vZGUubmV4dCk7XG4gICAgd2hpbGUgKGFjdGlvbk5vZGUgIT09IGxhc3QpO1xuICB9XG4gIGFjdGlvblF1ZXVlLmFjdGlvbiA9IG51bGw7XG59XG5mdW5jdGlvbiBub3RpZnlBY3Rpb25MaXN0ZW5lcnMoYWN0aW9uTm9kZSkge1xuICBhY3Rpb25Ob2RlID0gYWN0aW9uTm9kZS5saXN0ZW5lcnM7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYWN0aW9uTm9kZS5sZW5ndGg7IGkrKykgKDAsIGFjdGlvbk5vZGVbaV0pKCk7XG59XG5mdW5jdGlvbiBhY3Rpb25TdGF0ZVJlZHVjZXIob2xkU3RhdGUsIG5ld1N0YXRlKSB7XG4gIHJldHVybiBuZXdTdGF0ZTtcbn1cbmZ1bmN0aW9uIG1vdW50QWN0aW9uU3RhdGUoYWN0aW9uLCBpbml0aWFsU3RhdGVQcm9wKSB7XG4gIGlmIChpc0h5ZHJhdGluZykge1xuICAgIHZhciBzc3JGb3JtU3RhdGUgPSB3b3JrSW5Qcm9ncmVzc1Jvb3QuZm9ybVN0YXRlO1xuICAgIGlmIChudWxsICE9PSBzc3JGb3JtU3RhdGUpIHtcbiAgICAgIGE6IHtcbiAgICAgICAgdmFyIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCA9IGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyJDE7XG4gICAgICAgIGlmIChpc0h5ZHJhdGluZykge1xuICAgICAgICAgIGlmIChuZXh0SHlkcmF0YWJsZUluc3RhbmNlKSB7XG4gICAgICAgICAgICBiOiB7XG4gICAgICAgICAgICAgIHZhciBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQkanNjb21wJDAgPSBuZXh0SHlkcmF0YWJsZUluc3RhbmNlO1xuICAgICAgICAgICAgICBmb3IgKFxuICAgICAgICAgICAgICAgIHZhciBpblJvb3RPclNpbmdsZXRvbiA9IHJvb3RPclNpbmdsZXRvbkNvbnRleHQ7XG4gICAgICAgICAgICAgICAgOCAhPT0gSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0JGpzY29tcCQwLm5vZGVUeXBlO1xuXG4gICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIGlmICghaW5Sb290T3JTaW5nbGV0b24pIHtcbiAgICAgICAgICAgICAgICAgIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCRqc2NvbXAkMCA9IG51bGw7XG4gICAgICAgICAgICAgICAgICBicmVhayBiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQkanNjb21wJDAgPSBnZXROZXh0SHlkcmF0YWJsZShcbiAgICAgICAgICAgICAgICAgIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCRqc2NvbXAkMC5uZXh0U2libGluZ1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgaWYgKG51bGwgPT09IEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCRqc2NvbXAkMCkge1xuICAgICAgICAgICAgICAgICAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0JGpzY29tcCQwID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgIGJyZWFrIGI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGluUm9vdE9yU2luZ2xldG9uID0gSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0JGpzY29tcCQwLmRhdGE7XG4gICAgICAgICAgICAgIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCRqc2NvbXAkMCA9XG4gICAgICAgICAgICAgICAgXCJGIVwiID09PSBpblJvb3RPclNpbmdsZXRvbiB8fCBcIkZcIiA9PT0gaW5Sb290T3JTaW5nbGV0b25cbiAgICAgICAgICAgICAgICAgID8gSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0JGpzY29tcCQwXG4gICAgICAgICAgICAgICAgICA6IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0JGpzY29tcCQwKSB7XG4gICAgICAgICAgICAgIG5leHRIeWRyYXRhYmxlSW5zdGFuY2UgPSBnZXROZXh0SHlkcmF0YWJsZShcbiAgICAgICAgICAgICAgICBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQkanNjb21wJDAubmV4dFNpYmxpbmdcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0ID1cbiAgICAgICAgICAgICAgICBcIkYhXCIgPT09IEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCRqc2NvbXAkMC5kYXRhO1xuICAgICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICB0aHJvd09uSHlkcmF0aW9uTWlzbWF0Y2goSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0KTtcbiAgICAgICAgfVxuICAgICAgICBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgPSAhMTtcbiAgICAgIH1cbiAgICAgIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCAmJiAoaW5pdGlhbFN0YXRlUHJvcCA9IHNzckZvcm1TdGF0ZVswXSk7XG4gICAgfVxuICB9XG4gIHNzckZvcm1TdGF0ZSA9IG1vdW50V29ya0luUHJvZ3Jlc3NIb29rKCk7XG4gIHNzckZvcm1TdGF0ZS5tZW1vaXplZFN0YXRlID0gc3NyRm9ybVN0YXRlLmJhc2VTdGF0ZSA9IGluaXRpYWxTdGF0ZVByb3A7XG4gIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCA9IHtcbiAgICBwZW5kaW5nOiBudWxsLFxuICAgIGxhbmVzOiAwLFxuICAgIGRpc3BhdGNoOiBudWxsLFxuICAgIGxhc3RSZW5kZXJlZFJlZHVjZXI6IGFjdGlvblN0YXRlUmVkdWNlcixcbiAgICBsYXN0UmVuZGVyZWRTdGF0ZTogaW5pdGlhbFN0YXRlUHJvcFxuICB9O1xuICBzc3JGb3JtU3RhdGUucXVldWUgPSBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQ7XG4gIHNzckZvcm1TdGF0ZSA9IGRpc3BhdGNoU2V0U3RhdGUuYmluZChcbiAgICBudWxsLFxuICAgIGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyJDEsXG4gICAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0XG4gICk7XG4gIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdC5kaXNwYXRjaCA9IHNzckZvcm1TdGF0ZTtcbiAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0ID0gbW91bnRTdGF0ZUltcGwoITEpO1xuICBpblJvb3RPclNpbmdsZXRvbiA9IGRpc3BhdGNoT3B0aW1pc3RpY1NldFN0YXRlLmJpbmQoXG4gICAgbnVsbCxcbiAgICBjdXJyZW50bHlSZW5kZXJpbmdGaWJlciQxLFxuICAgICExLFxuICAgIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdC5xdWV1ZVxuICApO1xuICBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgPSBtb3VudFdvcmtJblByb2dyZXNzSG9vaygpO1xuICBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQkanNjb21wJDAgPSB7XG4gICAgc3RhdGU6IGluaXRpYWxTdGF0ZVByb3AsXG4gICAgZGlzcGF0Y2g6IG51bGwsXG4gICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgcGVuZGluZzogbnVsbFxuICB9O1xuICBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQucXVldWUgPSBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQkanNjb21wJDA7XG4gIHNzckZvcm1TdGF0ZSA9IGRpc3BhdGNoQWN0aW9uU3RhdGUuYmluZChcbiAgICBudWxsLFxuICAgIGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyJDEsXG4gICAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0JGpzY29tcCQwLFxuICAgIGluUm9vdE9yU2luZ2xldG9uLFxuICAgIHNzckZvcm1TdGF0ZVxuICApO1xuICBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQkanNjb21wJDAuZGlzcGF0Y2ggPSBzc3JGb3JtU3RhdGU7XG4gIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdC5tZW1vaXplZFN0YXRlID0gYWN0aW9uO1xuICByZXR1cm4gW2luaXRpYWxTdGF0ZVByb3AsIHNzckZvcm1TdGF0ZSwgITFdO1xufVxuZnVuY3Rpb24gdXBkYXRlQWN0aW9uU3RhdGUoYWN0aW9uKSB7XG4gIHZhciBzdGF0ZUhvb2sgPSB1cGRhdGVXb3JrSW5Qcm9ncmVzc0hvb2soKTtcbiAgcmV0dXJuIHVwZGF0ZUFjdGlvblN0YXRlSW1wbChzdGF0ZUhvb2ssIGN1cnJlbnRIb29rLCBhY3Rpb24pO1xufVxuZnVuY3Rpb24gdXBkYXRlQWN0aW9uU3RhdGVJbXBsKHN0YXRlSG9vaywgY3VycmVudFN0YXRlSG9vaywgYWN0aW9uKSB7XG4gIGN1cnJlbnRTdGF0ZUhvb2sgPSB1cGRhdGVSZWR1Y2VySW1wbChcbiAgICBzdGF0ZUhvb2ssXG4gICAgY3VycmVudFN0YXRlSG9vayxcbiAgICBhY3Rpb25TdGF0ZVJlZHVjZXJcbiAgKVswXTtcbiAgc3RhdGVIb29rID0gdXBkYXRlUmVkdWNlcihiYXNpY1N0YXRlUmVkdWNlcilbMF07XG4gIGN1cnJlbnRTdGF0ZUhvb2sgPVxuICAgIFwib2JqZWN0XCIgPT09IHR5cGVvZiBjdXJyZW50U3RhdGVIb29rICYmXG4gICAgbnVsbCAhPT0gY3VycmVudFN0YXRlSG9vayAmJlxuICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGN1cnJlbnRTdGF0ZUhvb2sudGhlblxuICAgICAgPyB1c2VUaGVuYWJsZShjdXJyZW50U3RhdGVIb29rKVxuICAgICAgOiBjdXJyZW50U3RhdGVIb29rO1xuICB2YXIgYWN0aW9uUXVldWVIb29rID0gdXBkYXRlV29ya0luUHJvZ3Jlc3NIb29rKCksXG4gICAgYWN0aW9uUXVldWUgPSBhY3Rpb25RdWV1ZUhvb2sucXVldWUsXG4gICAgZGlzcGF0Y2ggPSBhY3Rpb25RdWV1ZS5kaXNwYXRjaDtcbiAgYWN0aW9uICE9PSBhY3Rpb25RdWV1ZUhvb2subWVtb2l6ZWRTdGF0ZSAmJlxuICAgICgoY3VycmVudGx5UmVuZGVyaW5nRmliZXIkMS5mbGFncyB8PSAyMDQ4KSxcbiAgICBwdXNoRWZmZWN0KFxuICAgICAgOSxcbiAgICAgIGFjdGlvblN0YXRlQWN0aW9uRWZmZWN0LmJpbmQobnVsbCwgYWN0aW9uUXVldWUsIGFjdGlvbiksXG4gICAgICB7IGRlc3Ryb3k6IHZvaWQgMCB9LFxuICAgICAgbnVsbFxuICAgICkpO1xuICByZXR1cm4gW2N1cnJlbnRTdGF0ZUhvb2ssIGRpc3BhdGNoLCBzdGF0ZUhvb2tdO1xufVxuZnVuY3Rpb24gYWN0aW9uU3RhdGVBY3Rpb25FZmZlY3QoYWN0aW9uUXVldWUsIGFjdGlvbikge1xuICBhY3Rpb25RdWV1ZS5hY3Rpb24gPSBhY3Rpb247XG59XG5mdW5jdGlvbiByZXJlbmRlckFjdGlvblN0YXRlKGFjdGlvbikge1xuICB2YXIgc3RhdGVIb29rID0gdXBkYXRlV29ya0luUHJvZ3Jlc3NIb29rKCksXG4gICAgY3VycmVudFN0YXRlSG9vayA9IGN1cnJlbnRIb29rO1xuICBpZiAobnVsbCAhPT0gY3VycmVudFN0YXRlSG9vaylcbiAgICByZXR1cm4gdXBkYXRlQWN0aW9uU3RhdGVJbXBsKHN0YXRlSG9vaywgY3VycmVudFN0YXRlSG9vaywgYWN0aW9uKTtcbiAgdXBkYXRlV29ya0luUHJvZ3Jlc3NIb29rKCk7XG4gIHN0YXRlSG9vayA9IHN0YXRlSG9vay5tZW1vaXplZFN0YXRlO1xuICBjdXJyZW50U3RhdGVIb29rID0gdXBkYXRlV29ya0luUHJvZ3Jlc3NIb29rKCk7XG4gIHZhciBkaXNwYXRjaCA9IGN1cnJlbnRTdGF0ZUhvb2sucXVldWUuZGlzcGF0Y2g7XG4gIGN1cnJlbnRTdGF0ZUhvb2subWVtb2l6ZWRTdGF0ZSA9IGFjdGlvbjtcbiAgcmV0dXJuIFtzdGF0ZUhvb2ssIGRpc3BhdGNoLCAhMV07XG59XG5mdW5jdGlvbiBwdXNoRWZmZWN0KHRhZywgY3JlYXRlLCBpbnN0LCBkZXBzKSB7XG4gIHRhZyA9IHsgdGFnOiB0YWcsIGNyZWF0ZTogY3JlYXRlLCBpbnN0OiBpbnN0LCBkZXBzOiBkZXBzLCBuZXh0OiBudWxsIH07XG4gIGNyZWF0ZSA9IGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyJDEudXBkYXRlUXVldWU7XG4gIG51bGwgPT09IGNyZWF0ZSAmJlxuICAgICgoY3JlYXRlID0gY3JlYXRlRnVuY3Rpb25Db21wb25lbnRVcGRhdGVRdWV1ZSgpKSxcbiAgICAoY3VycmVudGx5UmVuZGVyaW5nRmliZXIkMS51cGRhdGVRdWV1ZSA9IGNyZWF0ZSkpO1xuICBpbnN0ID0gY3JlYXRlLmxhc3RFZmZlY3Q7XG4gIG51bGwgPT09IGluc3RcbiAgICA/IChjcmVhdGUubGFzdEVmZmVjdCA9IHRhZy5uZXh0ID0gdGFnKVxuICAgIDogKChkZXBzID0gaW5zdC5uZXh0KSxcbiAgICAgIChpbnN0Lm5leHQgPSB0YWcpLFxuICAgICAgKHRhZy5uZXh0ID0gZGVwcyksXG4gICAgICAoY3JlYXRlLmxhc3RFZmZlY3QgPSB0YWcpKTtcbiAgcmV0dXJuIHRhZztcbn1cbmZ1bmN0aW9uIHVwZGF0ZVJlZigpIHtcbiAgcmV0dXJuIHVwZGF0ZVdvcmtJblByb2dyZXNzSG9vaygpLm1lbW9pemVkU3RhdGU7XG59XG5mdW5jdGlvbiBtb3VudEVmZmVjdEltcGwoZmliZXJGbGFncywgaG9va0ZsYWdzLCBjcmVhdGUsIGRlcHMpIHtcbiAgdmFyIGhvb2sgPSBtb3VudFdvcmtJblByb2dyZXNzSG9vaygpO1xuICBjdXJyZW50bHlSZW5kZXJpbmdGaWJlciQxLmZsYWdzIHw9IGZpYmVyRmxhZ3M7XG4gIGhvb2subWVtb2l6ZWRTdGF0ZSA9IHB1c2hFZmZlY3QoXG4gICAgMSB8IGhvb2tGbGFncyxcbiAgICBjcmVhdGUsXG4gICAgeyBkZXN0cm95OiB2b2lkIDAgfSxcbiAgICB2b2lkIDAgPT09IGRlcHMgPyBudWxsIDogZGVwc1xuICApO1xufVxuZnVuY3Rpb24gdXBkYXRlRWZmZWN0SW1wbChmaWJlckZsYWdzLCBob29rRmxhZ3MsIGNyZWF0ZSwgZGVwcykge1xuICB2YXIgaG9vayA9IHVwZGF0ZVdvcmtJblByb2dyZXNzSG9vaygpO1xuICBkZXBzID0gdm9pZCAwID09PSBkZXBzID8gbnVsbCA6IGRlcHM7XG4gIHZhciBpbnN0ID0gaG9vay5tZW1vaXplZFN0YXRlLmluc3Q7XG4gIG51bGwgIT09IGN1cnJlbnRIb29rICYmXG4gIG51bGwgIT09IGRlcHMgJiZcbiAgYXJlSG9va0lucHV0c0VxdWFsKGRlcHMsIGN1cnJlbnRIb29rLm1lbW9pemVkU3RhdGUuZGVwcylcbiAgICA/IChob29rLm1lbW9pemVkU3RhdGUgPSBwdXNoRWZmZWN0KGhvb2tGbGFncywgY3JlYXRlLCBpbnN0LCBkZXBzKSlcbiAgICA6ICgoY3VycmVudGx5UmVuZGVyaW5nRmliZXIkMS5mbGFncyB8PSBmaWJlckZsYWdzKSxcbiAgICAgIChob29rLm1lbW9pemVkU3RhdGUgPSBwdXNoRWZmZWN0KDEgfCBob29rRmxhZ3MsIGNyZWF0ZSwgaW5zdCwgZGVwcykpKTtcbn1cbmZ1bmN0aW9uIG1vdW50RWZmZWN0KGNyZWF0ZSwgZGVwcykge1xuICBtb3VudEVmZmVjdEltcGwoODM5MDY1NiwgOCwgY3JlYXRlLCBkZXBzKTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZUVmZmVjdChjcmVhdGUsIGRlcHMpIHtcbiAgdXBkYXRlRWZmZWN0SW1wbCgyMDQ4LCA4LCBjcmVhdGUsIGRlcHMpO1xufVxuZnVuY3Rpb24gdXBkYXRlSW5zZXJ0aW9uRWZmZWN0KGNyZWF0ZSwgZGVwcykge1xuICByZXR1cm4gdXBkYXRlRWZmZWN0SW1wbCg0LCAyLCBjcmVhdGUsIGRlcHMpO1xufVxuZnVuY3Rpb24gdXBkYXRlTGF5b3V0RWZmZWN0KGNyZWF0ZSwgZGVwcykge1xuICByZXR1cm4gdXBkYXRlRWZmZWN0SW1wbCg0LCA0LCBjcmVhdGUsIGRlcHMpO1xufVxuZnVuY3Rpb24gaW1wZXJhdGl2ZUhhbmRsZUVmZmVjdChjcmVhdGUsIHJlZikge1xuICBpZiAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgcmVmKSB7XG4gICAgY3JlYXRlID0gY3JlYXRlKCk7XG4gICAgdmFyIHJlZkNsZWFudXAgPSByZWYoY3JlYXRlKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgcmVmQ2xlYW51cCA/IHJlZkNsZWFudXAoKSA6IHJlZihudWxsKTtcbiAgICB9O1xuICB9XG4gIGlmIChudWxsICE9PSByZWYgJiYgdm9pZCAwICE9PSByZWYpXG4gICAgcmV0dXJuIChcbiAgICAgIChjcmVhdGUgPSBjcmVhdGUoKSksXG4gICAgICAocmVmLmN1cnJlbnQgPSBjcmVhdGUpLFxuICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICByZWYuY3VycmVudCA9IG51bGw7XG4gICAgICB9XG4gICAgKTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZUltcGVyYXRpdmVIYW5kbGUocmVmLCBjcmVhdGUsIGRlcHMpIHtcbiAgZGVwcyA9IG51bGwgIT09IGRlcHMgJiYgdm9pZCAwICE9PSBkZXBzID8gZGVwcy5jb25jYXQoW3JlZl0pIDogbnVsbDtcbiAgdXBkYXRlRWZmZWN0SW1wbCg0LCA0LCBpbXBlcmF0aXZlSGFuZGxlRWZmZWN0LmJpbmQobnVsbCwgY3JlYXRlLCByZWYpLCBkZXBzKTtcbn1cbmZ1bmN0aW9uIG1vdW50RGVidWdWYWx1ZSgpIHt9XG5mdW5jdGlvbiB1cGRhdGVDYWxsYmFjayhjYWxsYmFjaywgZGVwcykge1xuICB2YXIgaG9vayA9IHVwZGF0ZVdvcmtJblByb2dyZXNzSG9vaygpO1xuICBkZXBzID0gdm9pZCAwID09PSBkZXBzID8gbnVsbCA6IGRlcHM7XG4gIHZhciBwcmV2U3RhdGUgPSBob29rLm1lbW9pemVkU3RhdGU7XG4gIGlmIChudWxsICE9PSBkZXBzICYmIGFyZUhvb2tJbnB1dHNFcXVhbChkZXBzLCBwcmV2U3RhdGVbMV0pKVxuICAgIHJldHVybiBwcmV2U3RhdGVbMF07XG4gIGhvb2subWVtb2l6ZWRTdGF0ZSA9IFtjYWxsYmFjaywgZGVwc107XG4gIHJldHVybiBjYWxsYmFjaztcbn1cbmZ1bmN0aW9uIHVwZGF0ZU1lbW8obmV4dENyZWF0ZSwgZGVwcykge1xuICB2YXIgaG9vayA9IHVwZGF0ZVdvcmtJblByb2dyZXNzSG9vaygpO1xuICBkZXBzID0gdm9pZCAwID09PSBkZXBzID8gbnVsbCA6IGRlcHM7XG4gIHZhciBwcmV2U3RhdGUgPSBob29rLm1lbW9pemVkU3RhdGU7XG4gIGlmIChudWxsICE9PSBkZXBzICYmIGFyZUhvb2tJbnB1dHNFcXVhbChkZXBzLCBwcmV2U3RhdGVbMV0pKVxuICAgIHJldHVybiBwcmV2U3RhdGVbMF07XG4gIHByZXZTdGF0ZSA9IG5leHRDcmVhdGUoKTtcbiAgaWYgKHNob3VsZERvdWJsZUludm9rZVVzZXJGbnNJbkhvb2tzREVWKSB7XG4gICAgc2V0SXNTdHJpY3RNb2RlRm9yRGV2dG9vbHMoITApO1xuICAgIHRyeSB7XG4gICAgICBuZXh0Q3JlYXRlKCk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHNldElzU3RyaWN0TW9kZUZvckRldnRvb2xzKCExKTtcbiAgICB9XG4gIH1cbiAgaG9vay5tZW1vaXplZFN0YXRlID0gW3ByZXZTdGF0ZSwgZGVwc107XG4gIHJldHVybiBwcmV2U3RhdGU7XG59XG5mdW5jdGlvbiBtb3VudERlZmVycmVkVmFsdWVJbXBsKGhvb2ssIHZhbHVlLCBpbml0aWFsVmFsdWUpIHtcbiAgaWYgKHZvaWQgMCA9PT0gaW5pdGlhbFZhbHVlIHx8IDAgIT09IChyZW5kZXJMYW5lcyAmIDEwNzM3NDE4MjQpKVxuICAgIHJldHVybiAoaG9vay5tZW1vaXplZFN0YXRlID0gdmFsdWUpO1xuICBob29rLm1lbW9pemVkU3RhdGUgPSBpbml0aWFsVmFsdWU7XG4gIGhvb2sgPSByZXF1ZXN0RGVmZXJyZWRMYW5lKCk7XG4gIGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyJDEubGFuZXMgfD0gaG9vaztcbiAgd29ya0luUHJvZ3Jlc3NSb290U2tpcHBlZExhbmVzIHw9IGhvb2s7XG4gIHJldHVybiBpbml0aWFsVmFsdWU7XG59XG5mdW5jdGlvbiB1cGRhdGVEZWZlcnJlZFZhbHVlSW1wbChob29rLCBwcmV2VmFsdWUsIHZhbHVlLCBpbml0aWFsVmFsdWUpIHtcbiAgaWYgKG9iamVjdElzKHZhbHVlLCBwcmV2VmFsdWUpKSByZXR1cm4gdmFsdWU7XG4gIGlmIChudWxsICE9PSBjdXJyZW50VHJlZUhpZGRlblN0YWNrQ3Vyc29yLmN1cnJlbnQpXG4gICAgcmV0dXJuIChcbiAgICAgIChob29rID0gbW91bnREZWZlcnJlZFZhbHVlSW1wbChob29rLCB2YWx1ZSwgaW5pdGlhbFZhbHVlKSksXG4gICAgICBvYmplY3RJcyhob29rLCBwcmV2VmFsdWUpIHx8IChkaWRSZWNlaXZlVXBkYXRlID0gITApLFxuICAgICAgaG9va1xuICAgICk7XG4gIGlmICgwID09PSAocmVuZGVyTGFuZXMgJiA0MikpXG4gICAgcmV0dXJuIChkaWRSZWNlaXZlVXBkYXRlID0gITApLCAoaG9vay5tZW1vaXplZFN0YXRlID0gdmFsdWUpO1xuICBob29rID0gcmVxdWVzdERlZmVycmVkTGFuZSgpO1xuICBjdXJyZW50bHlSZW5kZXJpbmdGaWJlciQxLmxhbmVzIHw9IGhvb2s7XG4gIHdvcmtJblByb2dyZXNzUm9vdFNraXBwZWRMYW5lcyB8PSBob29rO1xuICByZXR1cm4gcHJldlZhbHVlO1xufVxuZnVuY3Rpb24gc3RhcnRUcmFuc2l0aW9uKGZpYmVyLCBxdWV1ZSwgcGVuZGluZ1N0YXRlLCBmaW5pc2hlZFN0YXRlLCBjYWxsYmFjaykge1xuICB2YXIgcHJldmlvdXNQcmlvcml0eSA9IFJlYWN0RE9NU2hhcmVkSW50ZXJuYWxzLnA7XG4gIFJlYWN0RE9NU2hhcmVkSW50ZXJuYWxzLnAgPVxuICAgIDAgIT09IHByZXZpb3VzUHJpb3JpdHkgJiYgOCA+IHByZXZpb3VzUHJpb3JpdHkgPyBwcmV2aW91c1ByaW9yaXR5IDogODtcbiAgdmFyIHByZXZUcmFuc2l0aW9uID0gUmVhY3RTaGFyZWRJbnRlcm5hbHMuVCxcbiAgICBjdXJyZW50VHJhbnNpdGlvbiA9IHt9O1xuICBSZWFjdFNoYXJlZEludGVybmFscy5UID0gY3VycmVudFRyYW5zaXRpb247XG4gIGRpc3BhdGNoT3B0aW1pc3RpY1NldFN0YXRlKGZpYmVyLCAhMSwgcXVldWUsIHBlbmRpbmdTdGF0ZSk7XG4gIHRyeSB7XG4gICAgdmFyIHJldHVyblZhbHVlID0gY2FsbGJhY2soKSxcbiAgICAgIG9uU3RhcnRUcmFuc2l0aW9uRmluaXNoID0gUmVhY3RTaGFyZWRJbnRlcm5hbHMuUztcbiAgICBudWxsICE9PSBvblN0YXJ0VHJhbnNpdGlvbkZpbmlzaCAmJlxuICAgICAgb25TdGFydFRyYW5zaXRpb25GaW5pc2goY3VycmVudFRyYW5zaXRpb24sIHJldHVyblZhbHVlKTtcbiAgICBpZiAoXG4gICAgICBudWxsICE9PSByZXR1cm5WYWx1ZSAmJlxuICAgICAgXCJvYmplY3RcIiA9PT0gdHlwZW9mIHJldHVyblZhbHVlICYmXG4gICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiByZXR1cm5WYWx1ZS50aGVuXG4gICAgKSB7XG4gICAgICB2YXIgdGhlbmFibGVGb3JGaW5pc2hlZFN0YXRlID0gY2hhaW5UaGVuYWJsZVZhbHVlKFxuICAgICAgICByZXR1cm5WYWx1ZSxcbiAgICAgICAgZmluaXNoZWRTdGF0ZVxuICAgICAgKTtcbiAgICAgIGRpc3BhdGNoU2V0U3RhdGVJbnRlcm5hbChcbiAgICAgICAgZmliZXIsXG4gICAgICAgIHF1ZXVlLFxuICAgICAgICB0aGVuYWJsZUZvckZpbmlzaGVkU3RhdGUsXG4gICAgICAgIHJlcXVlc3RVcGRhdGVMYW5lKGZpYmVyKVxuICAgICAgKTtcbiAgICB9IGVsc2VcbiAgICAgIGRpc3BhdGNoU2V0U3RhdGVJbnRlcm5hbChcbiAgICAgICAgZmliZXIsXG4gICAgICAgIHF1ZXVlLFxuICAgICAgICBmaW5pc2hlZFN0YXRlLFxuICAgICAgICByZXF1ZXN0VXBkYXRlTGFuZShmaWJlcilcbiAgICAgICk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgZGlzcGF0Y2hTZXRTdGF0ZUludGVybmFsKFxuICAgICAgZmliZXIsXG4gICAgICBxdWV1ZSxcbiAgICAgIHsgdGhlbjogZnVuY3Rpb24gKCkge30sIHN0YXR1czogXCJyZWplY3RlZFwiLCByZWFzb246IGVycm9yIH0sXG4gICAgICByZXF1ZXN0VXBkYXRlTGFuZSgpXG4gICAgKTtcbiAgfSBmaW5hbGx5IHtcbiAgICAoUmVhY3RET01TaGFyZWRJbnRlcm5hbHMucCA9IHByZXZpb3VzUHJpb3JpdHkpLFxuICAgICAgKFJlYWN0U2hhcmVkSW50ZXJuYWxzLlQgPSBwcmV2VHJhbnNpdGlvbik7XG4gIH1cbn1cbmZ1bmN0aW9uIG5vb3AkMigpIHt9XG5mdW5jdGlvbiBzdGFydEhvc3RUcmFuc2l0aW9uKGZvcm1GaWJlciwgcGVuZGluZ1N0YXRlLCBhY3Rpb24sIGZvcm1EYXRhKSB7XG4gIGlmICg1ICE9PSBmb3JtRmliZXIudGFnKSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDQ3NikpO1xuICB2YXIgcXVldWUgPSBlbnN1cmVGb3JtQ29tcG9uZW50SXNTdGF0ZWZ1bChmb3JtRmliZXIpLnF1ZXVlO1xuICBzdGFydFRyYW5zaXRpb24oXG4gICAgZm9ybUZpYmVyLFxuICAgIHF1ZXVlLFxuICAgIHBlbmRpbmdTdGF0ZSxcbiAgICBzaGFyZWROb3RQZW5kaW5nT2JqZWN0LFxuICAgIG51bGwgPT09IGFjdGlvblxuICAgICAgPyBub29wJDJcbiAgICAgIDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJlcXVlc3RGb3JtUmVzZXQkMShmb3JtRmliZXIpO1xuICAgICAgICAgIHJldHVybiBhY3Rpb24oZm9ybURhdGEpO1xuICAgICAgICB9XG4gICk7XG59XG5mdW5jdGlvbiBlbnN1cmVGb3JtQ29tcG9uZW50SXNTdGF0ZWZ1bChmb3JtRmliZXIpIHtcbiAgdmFyIGV4aXN0aW5nU3RhdGVIb29rID0gZm9ybUZpYmVyLm1lbW9pemVkU3RhdGU7XG4gIGlmIChudWxsICE9PSBleGlzdGluZ1N0YXRlSG9vaykgcmV0dXJuIGV4aXN0aW5nU3RhdGVIb29rO1xuICBleGlzdGluZ1N0YXRlSG9vayA9IHtcbiAgICBtZW1vaXplZFN0YXRlOiBzaGFyZWROb3RQZW5kaW5nT2JqZWN0LFxuICAgIGJhc2VTdGF0ZTogc2hhcmVkTm90UGVuZGluZ09iamVjdCxcbiAgICBiYXNlUXVldWU6IG51bGwsXG4gICAgcXVldWU6IHtcbiAgICAgIHBlbmRpbmc6IG51bGwsXG4gICAgICBsYW5lczogMCxcbiAgICAgIGRpc3BhdGNoOiBudWxsLFxuICAgICAgbGFzdFJlbmRlcmVkUmVkdWNlcjogYmFzaWNTdGF0ZVJlZHVjZXIsXG4gICAgICBsYXN0UmVuZGVyZWRTdGF0ZTogc2hhcmVkTm90UGVuZGluZ09iamVjdFxuICAgIH0sXG4gICAgbmV4dDogbnVsbFxuICB9O1xuICB2YXIgaW5pdGlhbFJlc2V0U3RhdGUgPSB7fTtcbiAgZXhpc3RpbmdTdGF0ZUhvb2submV4dCA9IHtcbiAgICBtZW1vaXplZFN0YXRlOiBpbml0aWFsUmVzZXRTdGF0ZSxcbiAgICBiYXNlU3RhdGU6IGluaXRpYWxSZXNldFN0YXRlLFxuICAgIGJhc2VRdWV1ZTogbnVsbCxcbiAgICBxdWV1ZToge1xuICAgICAgcGVuZGluZzogbnVsbCxcbiAgICAgIGxhbmVzOiAwLFxuICAgICAgZGlzcGF0Y2g6IG51bGwsXG4gICAgICBsYXN0UmVuZGVyZWRSZWR1Y2VyOiBiYXNpY1N0YXRlUmVkdWNlcixcbiAgICAgIGxhc3RSZW5kZXJlZFN0YXRlOiBpbml0aWFsUmVzZXRTdGF0ZVxuICAgIH0sXG4gICAgbmV4dDogbnVsbFxuICB9O1xuICBmb3JtRmliZXIubWVtb2l6ZWRTdGF0ZSA9IGV4aXN0aW5nU3RhdGVIb29rO1xuICBmb3JtRmliZXIgPSBmb3JtRmliZXIuYWx0ZXJuYXRlO1xuICBudWxsICE9PSBmb3JtRmliZXIgJiYgKGZvcm1GaWJlci5tZW1vaXplZFN0YXRlID0gZXhpc3RpbmdTdGF0ZUhvb2spO1xuICByZXR1cm4gZXhpc3RpbmdTdGF0ZUhvb2s7XG59XG5mdW5jdGlvbiByZXF1ZXN0Rm9ybVJlc2V0JDEoZm9ybUZpYmVyKSB7XG4gIHZhciByZXNldFN0YXRlUXVldWUgPSBlbnN1cmVGb3JtQ29tcG9uZW50SXNTdGF0ZWZ1bChmb3JtRmliZXIpLm5leHQucXVldWU7XG4gIGRpc3BhdGNoU2V0U3RhdGVJbnRlcm5hbChmb3JtRmliZXIsIHJlc2V0U3RhdGVRdWV1ZSwge30sIHJlcXVlc3RVcGRhdGVMYW5lKCkpO1xufVxuZnVuY3Rpb24gdXNlSG9zdFRyYW5zaXRpb25TdGF0dXMoKSB7XG4gIHJldHVybiByZWFkQ29udGV4dChIb3N0VHJhbnNpdGlvbkNvbnRleHQpO1xufVxuZnVuY3Rpb24gdXBkYXRlSWQoKSB7XG4gIHJldHVybiB1cGRhdGVXb3JrSW5Qcm9ncmVzc0hvb2soKS5tZW1vaXplZFN0YXRlO1xufVxuZnVuY3Rpb24gdXBkYXRlUmVmcmVzaCgpIHtcbiAgcmV0dXJuIHVwZGF0ZVdvcmtJblByb2dyZXNzSG9vaygpLm1lbW9pemVkU3RhdGU7XG59XG5mdW5jdGlvbiByZWZyZXNoQ2FjaGUoZmliZXIpIHtcbiAgZm9yICh2YXIgcHJvdmlkZXIgPSBmaWJlci5yZXR1cm47IG51bGwgIT09IHByb3ZpZGVyOyApIHtcbiAgICBzd2l0Y2ggKHByb3ZpZGVyLnRhZykge1xuICAgICAgY2FzZSAyNDpcbiAgICAgIGNhc2UgMzpcbiAgICAgICAgdmFyIGxhbmUgPSByZXF1ZXN0VXBkYXRlTGFuZSgpO1xuICAgICAgICBmaWJlciA9IGNyZWF0ZVVwZGF0ZShsYW5lKTtcbiAgICAgICAgdmFyIHJvb3QkNjMgPSBlbnF1ZXVlVXBkYXRlKHByb3ZpZGVyLCBmaWJlciwgbGFuZSk7XG4gICAgICAgIG51bGwgIT09IHJvb3QkNjMgJiZcbiAgICAgICAgICAoc2NoZWR1bGVVcGRhdGVPbkZpYmVyKHJvb3QkNjMsIHByb3ZpZGVyLCBsYW5lKSxcbiAgICAgICAgICBlbnRhbmdsZVRyYW5zaXRpb25zKHJvb3QkNjMsIHByb3ZpZGVyLCBsYW5lKSk7XG4gICAgICAgIHByb3ZpZGVyID0geyBjYWNoZTogY3JlYXRlQ2FjaGUoKSB9O1xuICAgICAgICBmaWJlci5wYXlsb2FkID0gcHJvdmlkZXI7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgcHJvdmlkZXIgPSBwcm92aWRlci5yZXR1cm47XG4gIH1cbn1cbmZ1bmN0aW9uIGRpc3BhdGNoUmVkdWNlckFjdGlvbihmaWJlciwgcXVldWUsIGFjdGlvbikge1xuICB2YXIgbGFuZSA9IHJlcXVlc3RVcGRhdGVMYW5lKCk7XG4gIGFjdGlvbiA9IHtcbiAgICBsYW5lOiBsYW5lLFxuICAgIHJldmVydExhbmU6IDAsXG4gICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgaGFzRWFnZXJTdGF0ZTogITEsXG4gICAgZWFnZXJTdGF0ZTogbnVsbCxcbiAgICBuZXh0OiBudWxsXG4gIH07XG4gIGlzUmVuZGVyUGhhc2VVcGRhdGUoZmliZXIpXG4gICAgPyBlbnF1ZXVlUmVuZGVyUGhhc2VVcGRhdGUocXVldWUsIGFjdGlvbilcbiAgICA6ICgoYWN0aW9uID0gZW5xdWV1ZUNvbmN1cnJlbnRIb29rVXBkYXRlKGZpYmVyLCBxdWV1ZSwgYWN0aW9uLCBsYW5lKSksXG4gICAgICBudWxsICE9PSBhY3Rpb24gJiZcbiAgICAgICAgKHNjaGVkdWxlVXBkYXRlT25GaWJlcihhY3Rpb24sIGZpYmVyLCBsYW5lKSxcbiAgICAgICAgZW50YW5nbGVUcmFuc2l0aW9uVXBkYXRlKGFjdGlvbiwgcXVldWUsIGxhbmUpKSk7XG59XG5mdW5jdGlvbiBkaXNwYXRjaFNldFN0YXRlKGZpYmVyLCBxdWV1ZSwgYWN0aW9uKSB7XG4gIHZhciBsYW5lID0gcmVxdWVzdFVwZGF0ZUxhbmUoKTtcbiAgZGlzcGF0Y2hTZXRTdGF0ZUludGVybmFsKGZpYmVyLCBxdWV1ZSwgYWN0aW9uLCBsYW5lKTtcbn1cbmZ1bmN0aW9uIGRpc3BhdGNoU2V0U3RhdGVJbnRlcm5hbChmaWJlciwgcXVldWUsIGFjdGlvbiwgbGFuZSkge1xuICB2YXIgdXBkYXRlID0ge1xuICAgIGxhbmU6IGxhbmUsXG4gICAgcmV2ZXJ0TGFuZTogMCxcbiAgICBhY3Rpb246IGFjdGlvbixcbiAgICBoYXNFYWdlclN0YXRlOiAhMSxcbiAgICBlYWdlclN0YXRlOiBudWxsLFxuICAgIG5leHQ6IG51bGxcbiAgfTtcbiAgaWYgKGlzUmVuZGVyUGhhc2VVcGRhdGUoZmliZXIpKSBlbnF1ZXVlUmVuZGVyUGhhc2VVcGRhdGUocXVldWUsIHVwZGF0ZSk7XG4gIGVsc2Uge1xuICAgIHZhciBhbHRlcm5hdGUgPSBmaWJlci5hbHRlcm5hdGU7XG4gICAgaWYgKFxuICAgICAgMCA9PT0gZmliZXIubGFuZXMgJiZcbiAgICAgIChudWxsID09PSBhbHRlcm5hdGUgfHwgMCA9PT0gYWx0ZXJuYXRlLmxhbmVzKSAmJlxuICAgICAgKChhbHRlcm5hdGUgPSBxdWV1ZS5sYXN0UmVuZGVyZWRSZWR1Y2VyKSwgbnVsbCAhPT0gYWx0ZXJuYXRlKVxuICAgIClcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciBjdXJyZW50U3RhdGUgPSBxdWV1ZS5sYXN0UmVuZGVyZWRTdGF0ZSxcbiAgICAgICAgICBlYWdlclN0YXRlID0gYWx0ZXJuYXRlKGN1cnJlbnRTdGF0ZSwgYWN0aW9uKTtcbiAgICAgICAgdXBkYXRlLmhhc0VhZ2VyU3RhdGUgPSAhMDtcbiAgICAgICAgdXBkYXRlLmVhZ2VyU3RhdGUgPSBlYWdlclN0YXRlO1xuICAgICAgICBpZiAob2JqZWN0SXMoZWFnZXJTdGF0ZSwgY3VycmVudFN0YXRlKSlcbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgZW5xdWV1ZVVwZGF0ZSQxKGZpYmVyLCBxdWV1ZSwgdXBkYXRlLCAwKSxcbiAgICAgICAgICAgIG51bGwgPT09IHdvcmtJblByb2dyZXNzUm9vdCAmJiBmaW5pc2hRdWV1ZWluZ0NvbmN1cnJlbnRVcGRhdGVzKCksXG4gICAgICAgICAgICAhMVxuICAgICAgICAgICk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgIH1cbiAgICBhY3Rpb24gPSBlbnF1ZXVlQ29uY3VycmVudEhvb2tVcGRhdGUoZmliZXIsIHF1ZXVlLCB1cGRhdGUsIGxhbmUpO1xuICAgIGlmIChudWxsICE9PSBhY3Rpb24pXG4gICAgICByZXR1cm4gKFxuICAgICAgICBzY2hlZHVsZVVwZGF0ZU9uRmliZXIoYWN0aW9uLCBmaWJlciwgbGFuZSksXG4gICAgICAgIGVudGFuZ2xlVHJhbnNpdGlvblVwZGF0ZShhY3Rpb24sIHF1ZXVlLCBsYW5lKSxcbiAgICAgICAgITBcbiAgICAgICk7XG4gIH1cbiAgcmV0dXJuICExO1xufVxuZnVuY3Rpb24gZGlzcGF0Y2hPcHRpbWlzdGljU2V0U3RhdGUoZmliZXIsIHRocm93SWZEdXJpbmdSZW5kZXIsIHF1ZXVlLCBhY3Rpb24pIHtcbiAgYWN0aW9uID0ge1xuICAgIGxhbmU6IDIsXG4gICAgcmV2ZXJ0TGFuZTogcmVxdWVzdFRyYW5zaXRpb25MYW5lKCksXG4gICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgaGFzRWFnZXJTdGF0ZTogITEsXG4gICAgZWFnZXJTdGF0ZTogbnVsbCxcbiAgICBuZXh0OiBudWxsXG4gIH07XG4gIGlmIChpc1JlbmRlclBoYXNlVXBkYXRlKGZpYmVyKSkge1xuICAgIGlmICh0aHJvd0lmRHVyaW5nUmVuZGVyKSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDQ3OSkpO1xuICB9IGVsc2VcbiAgICAodGhyb3dJZkR1cmluZ1JlbmRlciA9IGVucXVldWVDb25jdXJyZW50SG9va1VwZGF0ZShcbiAgICAgIGZpYmVyLFxuICAgICAgcXVldWUsXG4gICAgICBhY3Rpb24sXG4gICAgICAyXG4gICAgKSksXG4gICAgICBudWxsICE9PSB0aHJvd0lmRHVyaW5nUmVuZGVyICYmXG4gICAgICAgIHNjaGVkdWxlVXBkYXRlT25GaWJlcih0aHJvd0lmRHVyaW5nUmVuZGVyLCBmaWJlciwgMik7XG59XG5mdW5jdGlvbiBpc1JlbmRlclBoYXNlVXBkYXRlKGZpYmVyKSB7XG4gIHZhciBhbHRlcm5hdGUgPSBmaWJlci5hbHRlcm5hdGU7XG4gIHJldHVybiAoXG4gICAgZmliZXIgPT09IGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyJDEgfHxcbiAgICAobnVsbCAhPT0gYWx0ZXJuYXRlICYmIGFsdGVybmF0ZSA9PT0gY3VycmVudGx5UmVuZGVyaW5nRmliZXIkMSlcbiAgKTtcbn1cbmZ1bmN0aW9uIGVucXVldWVSZW5kZXJQaGFzZVVwZGF0ZShxdWV1ZSwgdXBkYXRlKSB7XG4gIGRpZFNjaGVkdWxlUmVuZGVyUGhhc2VVcGRhdGVEdXJpbmdUaGlzUGFzcyA9IGRpZFNjaGVkdWxlUmVuZGVyUGhhc2VVcGRhdGUgPVxuICAgICEwO1xuICB2YXIgcGVuZGluZyA9IHF1ZXVlLnBlbmRpbmc7XG4gIG51bGwgPT09IHBlbmRpbmdcbiAgICA/ICh1cGRhdGUubmV4dCA9IHVwZGF0ZSlcbiAgICA6ICgodXBkYXRlLm5leHQgPSBwZW5kaW5nLm5leHQpLCAocGVuZGluZy5uZXh0ID0gdXBkYXRlKSk7XG4gIHF1ZXVlLnBlbmRpbmcgPSB1cGRhdGU7XG59XG5mdW5jdGlvbiBlbnRhbmdsZVRyYW5zaXRpb25VcGRhdGUocm9vdCwgcXVldWUsIGxhbmUpIHtcbiAgaWYgKDAgIT09IChsYW5lICYgNDE5NDE3NikpIHtcbiAgICB2YXIgcXVldWVMYW5lcyA9IHF1ZXVlLmxhbmVzO1xuICAgIHF1ZXVlTGFuZXMgJj0gcm9vdC5wZW5kaW5nTGFuZXM7XG4gICAgbGFuZSB8PSBxdWV1ZUxhbmVzO1xuICAgIHF1ZXVlLmxhbmVzID0gbGFuZTtcbiAgICBtYXJrUm9vdEVudGFuZ2xlZChyb290LCBsYW5lKTtcbiAgfVxufVxudmFyIENvbnRleHRPbmx5RGlzcGF0Y2hlciA9IHtcbiAgcmVhZENvbnRleHQ6IHJlYWRDb250ZXh0LFxuICB1c2U6IHVzZSxcbiAgdXNlQ2FsbGJhY2s6IHRocm93SW52YWxpZEhvb2tFcnJvcixcbiAgdXNlQ29udGV4dDogdGhyb3dJbnZhbGlkSG9va0Vycm9yLFxuICB1c2VFZmZlY3Q6IHRocm93SW52YWxpZEhvb2tFcnJvcixcbiAgdXNlSW1wZXJhdGl2ZUhhbmRsZTogdGhyb3dJbnZhbGlkSG9va0Vycm9yLFxuICB1c2VMYXlvdXRFZmZlY3Q6IHRocm93SW52YWxpZEhvb2tFcnJvcixcbiAgdXNlSW5zZXJ0aW9uRWZmZWN0OiB0aHJvd0ludmFsaWRIb29rRXJyb3IsXG4gIHVzZU1lbW86IHRocm93SW52YWxpZEhvb2tFcnJvcixcbiAgdXNlUmVkdWNlcjogdGhyb3dJbnZhbGlkSG9va0Vycm9yLFxuICB1c2VSZWY6IHRocm93SW52YWxpZEhvb2tFcnJvcixcbiAgdXNlU3RhdGU6IHRocm93SW52YWxpZEhvb2tFcnJvcixcbiAgdXNlRGVidWdWYWx1ZTogdGhyb3dJbnZhbGlkSG9va0Vycm9yLFxuICB1c2VEZWZlcnJlZFZhbHVlOiB0aHJvd0ludmFsaWRIb29rRXJyb3IsXG4gIHVzZVRyYW5zaXRpb246IHRocm93SW52YWxpZEhvb2tFcnJvcixcbiAgdXNlU3luY0V4dGVybmFsU3RvcmU6IHRocm93SW52YWxpZEhvb2tFcnJvcixcbiAgdXNlSWQ6IHRocm93SW52YWxpZEhvb2tFcnJvclxufTtcbkNvbnRleHRPbmx5RGlzcGF0Y2hlci51c2VDYWNoZVJlZnJlc2ggPSB0aHJvd0ludmFsaWRIb29rRXJyb3I7XG5Db250ZXh0T25seURpc3BhdGNoZXIudXNlTWVtb0NhY2hlID0gdGhyb3dJbnZhbGlkSG9va0Vycm9yO1xuQ29udGV4dE9ubHlEaXNwYXRjaGVyLnVzZUhvc3RUcmFuc2l0aW9uU3RhdHVzID0gdGhyb3dJbnZhbGlkSG9va0Vycm9yO1xuQ29udGV4dE9ubHlEaXNwYXRjaGVyLnVzZUZvcm1TdGF0ZSA9IHRocm93SW52YWxpZEhvb2tFcnJvcjtcbkNvbnRleHRPbmx5RGlzcGF0Y2hlci51c2VBY3Rpb25TdGF0ZSA9IHRocm93SW52YWxpZEhvb2tFcnJvcjtcbkNvbnRleHRPbmx5RGlzcGF0Y2hlci51c2VPcHRpbWlzdGljID0gdGhyb3dJbnZhbGlkSG9va0Vycm9yO1xudmFyIEhvb2tzRGlzcGF0Y2hlck9uTW91bnQgPSB7XG4gIHJlYWRDb250ZXh0OiByZWFkQ29udGV4dCxcbiAgdXNlOiB1c2UsXG4gIHVzZUNhbGxiYWNrOiBmdW5jdGlvbiAoY2FsbGJhY2ssIGRlcHMpIHtcbiAgICBtb3VudFdvcmtJblByb2dyZXNzSG9vaygpLm1lbW9pemVkU3RhdGUgPSBbXG4gICAgICBjYWxsYmFjayxcbiAgICAgIHZvaWQgMCA9PT0gZGVwcyA/IG51bGwgOiBkZXBzXG4gICAgXTtcbiAgICByZXR1cm4gY2FsbGJhY2s7XG4gIH0sXG4gIHVzZUNvbnRleHQ6IHJlYWRDb250ZXh0LFxuICB1c2VFZmZlY3Q6IG1vdW50RWZmZWN0LFxuICB1c2VJbXBlcmF0aXZlSGFuZGxlOiBmdW5jdGlvbiAocmVmLCBjcmVhdGUsIGRlcHMpIHtcbiAgICBkZXBzID0gbnVsbCAhPT0gZGVwcyAmJiB2b2lkIDAgIT09IGRlcHMgPyBkZXBzLmNvbmNhdChbcmVmXSkgOiBudWxsO1xuICAgIG1vdW50RWZmZWN0SW1wbChcbiAgICAgIDQxOTQzMDgsXG4gICAgICA0LFxuICAgICAgaW1wZXJhdGl2ZUhhbmRsZUVmZmVjdC5iaW5kKG51bGwsIGNyZWF0ZSwgcmVmKSxcbiAgICAgIGRlcHNcbiAgICApO1xuICB9LFxuICB1c2VMYXlvdXRFZmZlY3Q6IGZ1bmN0aW9uIChjcmVhdGUsIGRlcHMpIHtcbiAgICByZXR1cm4gbW91bnRFZmZlY3RJbXBsKDQxOTQzMDgsIDQsIGNyZWF0ZSwgZGVwcyk7XG4gIH0sXG4gIHVzZUluc2VydGlvbkVmZmVjdDogZnVuY3Rpb24gKGNyZWF0ZSwgZGVwcykge1xuICAgIG1vdW50RWZmZWN0SW1wbCg0LCAyLCBjcmVhdGUsIGRlcHMpO1xuICB9LFxuICB1c2VNZW1vOiBmdW5jdGlvbiAobmV4dENyZWF0ZSwgZGVwcykge1xuICAgIHZhciBob29rID0gbW91bnRXb3JrSW5Qcm9ncmVzc0hvb2soKTtcbiAgICBkZXBzID0gdm9pZCAwID09PSBkZXBzID8gbnVsbCA6IGRlcHM7XG4gICAgdmFyIG5leHRWYWx1ZSA9IG5leHRDcmVhdGUoKTtcbiAgICBpZiAoc2hvdWxkRG91YmxlSW52b2tlVXNlckZuc0luSG9va3NERVYpIHtcbiAgICAgIHNldElzU3RyaWN0TW9kZUZvckRldnRvb2xzKCEwKTtcbiAgICAgIHRyeSB7XG4gICAgICAgIG5leHRDcmVhdGUoKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIHNldElzU3RyaWN0TW9kZUZvckRldnRvb2xzKCExKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaG9vay5tZW1vaXplZFN0YXRlID0gW25leHRWYWx1ZSwgZGVwc107XG4gICAgcmV0dXJuIG5leHRWYWx1ZTtcbiAgfSxcbiAgdXNlUmVkdWNlcjogZnVuY3Rpb24gKHJlZHVjZXIsIGluaXRpYWxBcmcsIGluaXQpIHtcbiAgICB2YXIgaG9vayA9IG1vdW50V29ya0luUHJvZ3Jlc3NIb29rKCk7XG4gICAgaWYgKHZvaWQgMCAhPT0gaW5pdCkge1xuICAgICAgdmFyIGluaXRpYWxTdGF0ZSA9IGluaXQoaW5pdGlhbEFyZyk7XG4gICAgICBpZiAoc2hvdWxkRG91YmxlSW52b2tlVXNlckZuc0luSG9va3NERVYpIHtcbiAgICAgICAgc2V0SXNTdHJpY3RNb2RlRm9yRGV2dG9vbHMoITApO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGluaXQoaW5pdGlhbEFyZyk7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgc2V0SXNTdHJpY3RNb2RlRm9yRGV2dG9vbHMoITEpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGluaXRpYWxTdGF0ZSA9IGluaXRpYWxBcmc7XG4gICAgaG9vay5tZW1vaXplZFN0YXRlID0gaG9vay5iYXNlU3RhdGUgPSBpbml0aWFsU3RhdGU7XG4gICAgcmVkdWNlciA9IHtcbiAgICAgIHBlbmRpbmc6IG51bGwsXG4gICAgICBsYW5lczogMCxcbiAgICAgIGRpc3BhdGNoOiBudWxsLFxuICAgICAgbGFzdFJlbmRlcmVkUmVkdWNlcjogcmVkdWNlcixcbiAgICAgIGxhc3RSZW5kZXJlZFN0YXRlOiBpbml0aWFsU3RhdGVcbiAgICB9O1xuICAgIGhvb2sucXVldWUgPSByZWR1Y2VyO1xuICAgIHJlZHVjZXIgPSByZWR1Y2VyLmRpc3BhdGNoID0gZGlzcGF0Y2hSZWR1Y2VyQWN0aW9uLmJpbmQoXG4gICAgICBudWxsLFxuICAgICAgY3VycmVudGx5UmVuZGVyaW5nRmliZXIkMSxcbiAgICAgIHJlZHVjZXJcbiAgICApO1xuICAgIHJldHVybiBbaG9vay5tZW1vaXplZFN0YXRlLCByZWR1Y2VyXTtcbiAgfSxcbiAgdXNlUmVmOiBmdW5jdGlvbiAoaW5pdGlhbFZhbHVlKSB7XG4gICAgdmFyIGhvb2sgPSBtb3VudFdvcmtJblByb2dyZXNzSG9vaygpO1xuICAgIGluaXRpYWxWYWx1ZSA9IHsgY3VycmVudDogaW5pdGlhbFZhbHVlIH07XG4gICAgcmV0dXJuIChob29rLm1lbW9pemVkU3RhdGUgPSBpbml0aWFsVmFsdWUpO1xuICB9LFxuICB1c2VTdGF0ZTogZnVuY3Rpb24gKGluaXRpYWxTdGF0ZSkge1xuICAgIGluaXRpYWxTdGF0ZSA9IG1vdW50U3RhdGVJbXBsKGluaXRpYWxTdGF0ZSk7XG4gICAgdmFyIHF1ZXVlID0gaW5pdGlhbFN0YXRlLnF1ZXVlLFxuICAgICAgZGlzcGF0Y2ggPSBkaXNwYXRjaFNldFN0YXRlLmJpbmQobnVsbCwgY3VycmVudGx5UmVuZGVyaW5nRmliZXIkMSwgcXVldWUpO1xuICAgIHF1ZXVlLmRpc3BhdGNoID0gZGlzcGF0Y2g7XG4gICAgcmV0dXJuIFtpbml0aWFsU3RhdGUubWVtb2l6ZWRTdGF0ZSwgZGlzcGF0Y2hdO1xuICB9LFxuICB1c2VEZWJ1Z1ZhbHVlOiBtb3VudERlYnVnVmFsdWUsXG4gIHVzZURlZmVycmVkVmFsdWU6IGZ1bmN0aW9uICh2YWx1ZSwgaW5pdGlhbFZhbHVlKSB7XG4gICAgdmFyIGhvb2sgPSBtb3VudFdvcmtJblByb2dyZXNzSG9vaygpO1xuICAgIHJldHVybiBtb3VudERlZmVycmVkVmFsdWVJbXBsKGhvb2ssIHZhbHVlLCBpbml0aWFsVmFsdWUpO1xuICB9LFxuICB1c2VUcmFuc2l0aW9uOiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHN0YXRlSG9vayA9IG1vdW50U3RhdGVJbXBsKCExKTtcbiAgICBzdGF0ZUhvb2sgPSBzdGFydFRyYW5zaXRpb24uYmluZChcbiAgICAgIG51bGwsXG4gICAgICBjdXJyZW50bHlSZW5kZXJpbmdGaWJlciQxLFxuICAgICAgc3RhdGVIb29rLnF1ZXVlLFxuICAgICAgITAsXG4gICAgICAhMVxuICAgICk7XG4gICAgbW91bnRXb3JrSW5Qcm9ncmVzc0hvb2soKS5tZW1vaXplZFN0YXRlID0gc3RhdGVIb29rO1xuICAgIHJldHVybiBbITEsIHN0YXRlSG9va107XG4gIH0sXG4gIHVzZVN5bmNFeHRlcm5hbFN0b3JlOiBmdW5jdGlvbiAoc3Vic2NyaWJlLCBnZXRTbmFwc2hvdCwgZ2V0U2VydmVyU25hcHNob3QpIHtcbiAgICB2YXIgZmliZXIgPSBjdXJyZW50bHlSZW5kZXJpbmdGaWJlciQxLFxuICAgICAgaG9vayA9IG1vdW50V29ya0luUHJvZ3Jlc3NIb29rKCk7XG4gICAgaWYgKGlzSHlkcmF0aW5nKSB7XG4gICAgICBpZiAodm9pZCAwID09PSBnZXRTZXJ2ZXJTbmFwc2hvdClcbiAgICAgICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg0MDcpKTtcbiAgICAgIGdldFNlcnZlclNuYXBzaG90ID0gZ2V0U2VydmVyU25hcHNob3QoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZ2V0U2VydmVyU25hcHNob3QgPSBnZXRTbmFwc2hvdCgpO1xuICAgICAgaWYgKG51bGwgPT09IHdvcmtJblByb2dyZXNzUm9vdCkgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgzNDkpKTtcbiAgICAgIDAgIT09ICh3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lcyAmIDYwKSB8fFxuICAgICAgICBwdXNoU3RvcmVDb25zaXN0ZW5jeUNoZWNrKGZpYmVyLCBnZXRTbmFwc2hvdCwgZ2V0U2VydmVyU25hcHNob3QpO1xuICAgIH1cbiAgICBob29rLm1lbW9pemVkU3RhdGUgPSBnZXRTZXJ2ZXJTbmFwc2hvdDtcbiAgICB2YXIgaW5zdCA9IHsgdmFsdWU6IGdldFNlcnZlclNuYXBzaG90LCBnZXRTbmFwc2hvdDogZ2V0U25hcHNob3QgfTtcbiAgICBob29rLnF1ZXVlID0gaW5zdDtcbiAgICBtb3VudEVmZmVjdChzdWJzY3JpYmVUb1N0b3JlLmJpbmQobnVsbCwgZmliZXIsIGluc3QsIHN1YnNjcmliZSksIFtcbiAgICAgIHN1YnNjcmliZVxuICAgIF0pO1xuICAgIGZpYmVyLmZsYWdzIHw9IDIwNDg7XG4gICAgcHVzaEVmZmVjdChcbiAgICAgIDksXG4gICAgICB1cGRhdGVTdG9yZUluc3RhbmNlLmJpbmQoXG4gICAgICAgIG51bGwsXG4gICAgICAgIGZpYmVyLFxuICAgICAgICBpbnN0LFxuICAgICAgICBnZXRTZXJ2ZXJTbmFwc2hvdCxcbiAgICAgICAgZ2V0U25hcHNob3RcbiAgICAgICksXG4gICAgICB7IGRlc3Ryb3k6IHZvaWQgMCB9LFxuICAgICAgbnVsbFxuICAgICk7XG4gICAgcmV0dXJuIGdldFNlcnZlclNuYXBzaG90O1xuICB9LFxuICB1c2VJZDogZnVuY3Rpb24gKCkge1xuICAgIHZhciBob29rID0gbW91bnRXb3JrSW5Qcm9ncmVzc0hvb2soKSxcbiAgICAgIGlkZW50aWZpZXJQcmVmaXggPSB3b3JrSW5Qcm9ncmVzc1Jvb3QuaWRlbnRpZmllclByZWZpeDtcbiAgICBpZiAoaXNIeWRyYXRpbmcpIHtcbiAgICAgIHZhciBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgPSB0cmVlQ29udGV4dE92ZXJmbG93O1xuICAgICAgdmFyIGlkV2l0aExlYWRpbmdCaXQgPSB0cmVlQ29udGV4dElkO1xuICAgICAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0ID1cbiAgICAgICAgKFxuICAgICAgICAgIGlkV2l0aExlYWRpbmdCaXQgJiB+KDEgPDwgKDMyIC0gY2x6MzIoaWRXaXRoTGVhZGluZ0JpdCkgLSAxKSlcbiAgICAgICAgKS50b1N0cmluZygzMikgKyBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQ7XG4gICAgICBpZGVudGlmaWVyUHJlZml4ID1cbiAgICAgICAgXCI6XCIgKyBpZGVudGlmaWVyUHJlZml4ICsgXCJSXCIgKyBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQ7XG4gICAgICBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgPSBsb2NhbElkQ291bnRlcisrO1xuICAgICAgMCA8IEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCAmJlxuICAgICAgICAoaWRlbnRpZmllclByZWZpeCArPSBcIkhcIiArIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdC50b1N0cmluZygzMikpO1xuICAgICAgaWRlbnRpZmllclByZWZpeCArPSBcIjpcIjtcbiAgICB9IGVsc2VcbiAgICAgIChKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgPSBnbG9iYWxDbGllbnRJZENvdW50ZXIrKyksXG4gICAgICAgIChpZGVudGlmaWVyUHJlZml4ID1cbiAgICAgICAgICBcIjpcIiArXG4gICAgICAgICAgaWRlbnRpZmllclByZWZpeCArXG4gICAgICAgICAgXCJyXCIgK1xuICAgICAgICAgIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdC50b1N0cmluZygzMikgK1xuICAgICAgICAgIFwiOlwiKTtcbiAgICByZXR1cm4gKGhvb2subWVtb2l6ZWRTdGF0ZSA9IGlkZW50aWZpZXJQcmVmaXgpO1xuICB9LFxuICB1c2VDYWNoZVJlZnJlc2g6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gKG1vdW50V29ya0luUHJvZ3Jlc3NIb29rKCkubWVtb2l6ZWRTdGF0ZSA9IHJlZnJlc2hDYWNoZS5iaW5kKFxuICAgICAgbnVsbCxcbiAgICAgIGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyJDFcbiAgICApKTtcbiAgfVxufTtcbkhvb2tzRGlzcGF0Y2hlck9uTW91bnQudXNlTWVtb0NhY2hlID0gdXNlTWVtb0NhY2hlO1xuSG9va3NEaXNwYXRjaGVyT25Nb3VudC51c2VIb3N0VHJhbnNpdGlvblN0YXR1cyA9IHVzZUhvc3RUcmFuc2l0aW9uU3RhdHVzO1xuSG9va3NEaXNwYXRjaGVyT25Nb3VudC51c2VGb3JtU3RhdGUgPSBtb3VudEFjdGlvblN0YXRlO1xuSG9va3NEaXNwYXRjaGVyT25Nb3VudC51c2VBY3Rpb25TdGF0ZSA9IG1vdW50QWN0aW9uU3RhdGU7XG5Ib29rc0Rpc3BhdGNoZXJPbk1vdW50LnVzZU9wdGltaXN0aWMgPSBmdW5jdGlvbiAocGFzc3Rocm91Z2gpIHtcbiAgdmFyIGhvb2sgPSBtb3VudFdvcmtJblByb2dyZXNzSG9vaygpO1xuICBob29rLm1lbW9pemVkU3RhdGUgPSBob29rLmJhc2VTdGF0ZSA9IHBhc3N0aHJvdWdoO1xuICB2YXIgcXVldWUgPSB7XG4gICAgcGVuZGluZzogbnVsbCxcbiAgICBsYW5lczogMCxcbiAgICBkaXNwYXRjaDogbnVsbCxcbiAgICBsYXN0UmVuZGVyZWRSZWR1Y2VyOiBudWxsLFxuICAgIGxhc3RSZW5kZXJlZFN0YXRlOiBudWxsXG4gIH07XG4gIGhvb2sucXVldWUgPSBxdWV1ZTtcbiAgaG9vayA9IGRpc3BhdGNoT3B0aW1pc3RpY1NldFN0YXRlLmJpbmQoXG4gICAgbnVsbCxcbiAgICBjdXJyZW50bHlSZW5kZXJpbmdGaWJlciQxLFxuICAgICEwLFxuICAgIHF1ZXVlXG4gICk7XG4gIHF1ZXVlLmRpc3BhdGNoID0gaG9vaztcbiAgcmV0dXJuIFtwYXNzdGhyb3VnaCwgaG9va107XG59O1xudmFyIEhvb2tzRGlzcGF0Y2hlck9uVXBkYXRlID0ge1xuICByZWFkQ29udGV4dDogcmVhZENvbnRleHQsXG4gIHVzZTogdXNlLFxuICB1c2VDYWxsYmFjazogdXBkYXRlQ2FsbGJhY2ssXG4gIHVzZUNvbnRleHQ6IHJlYWRDb250ZXh0LFxuICB1c2VFZmZlY3Q6IHVwZGF0ZUVmZmVjdCxcbiAgdXNlSW1wZXJhdGl2ZUhhbmRsZTogdXBkYXRlSW1wZXJhdGl2ZUhhbmRsZSxcbiAgdXNlSW5zZXJ0aW9uRWZmZWN0OiB1cGRhdGVJbnNlcnRpb25FZmZlY3QsXG4gIHVzZUxheW91dEVmZmVjdDogdXBkYXRlTGF5b3V0RWZmZWN0LFxuICB1c2VNZW1vOiB1cGRhdGVNZW1vLFxuICB1c2VSZWR1Y2VyOiB1cGRhdGVSZWR1Y2VyLFxuICB1c2VSZWY6IHVwZGF0ZVJlZixcbiAgdXNlU3RhdGU6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdXBkYXRlUmVkdWNlcihiYXNpY1N0YXRlUmVkdWNlcik7XG4gIH0sXG4gIHVzZURlYnVnVmFsdWU6IG1vdW50RGVidWdWYWx1ZSxcbiAgdXNlRGVmZXJyZWRWYWx1ZTogZnVuY3Rpb24gKHZhbHVlLCBpbml0aWFsVmFsdWUpIHtcbiAgICB2YXIgaG9vayA9IHVwZGF0ZVdvcmtJblByb2dyZXNzSG9vaygpO1xuICAgIHJldHVybiB1cGRhdGVEZWZlcnJlZFZhbHVlSW1wbChcbiAgICAgIGhvb2ssXG4gICAgICBjdXJyZW50SG9vay5tZW1vaXplZFN0YXRlLFxuICAgICAgdmFsdWUsXG4gICAgICBpbml0aWFsVmFsdWVcbiAgICApO1xuICB9LFxuICB1c2VUcmFuc2l0aW9uOiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGJvb2xlYW5PclRoZW5hYmxlID0gdXBkYXRlUmVkdWNlcihiYXNpY1N0YXRlUmVkdWNlcilbMF0sXG4gICAgICBzdGFydCA9IHVwZGF0ZVdvcmtJblByb2dyZXNzSG9vaygpLm1lbW9pemVkU3RhdGU7XG4gICAgcmV0dXJuIFtcbiAgICAgIFwiYm9vbGVhblwiID09PSB0eXBlb2YgYm9vbGVhbk9yVGhlbmFibGVcbiAgICAgICAgPyBib29sZWFuT3JUaGVuYWJsZVxuICAgICAgICA6IHVzZVRoZW5hYmxlKGJvb2xlYW5PclRoZW5hYmxlKSxcbiAgICAgIHN0YXJ0XG4gICAgXTtcbiAgfSxcbiAgdXNlU3luY0V4dGVybmFsU3RvcmU6IHVwZGF0ZVN5bmNFeHRlcm5hbFN0b3JlLFxuICB1c2VJZDogdXBkYXRlSWRcbn07XG5Ib29rc0Rpc3BhdGNoZXJPblVwZGF0ZS51c2VDYWNoZVJlZnJlc2ggPSB1cGRhdGVSZWZyZXNoO1xuSG9va3NEaXNwYXRjaGVyT25VcGRhdGUudXNlTWVtb0NhY2hlID0gdXNlTWVtb0NhY2hlO1xuSG9va3NEaXNwYXRjaGVyT25VcGRhdGUudXNlSG9zdFRyYW5zaXRpb25TdGF0dXMgPSB1c2VIb3N0VHJhbnNpdGlvblN0YXR1cztcbkhvb2tzRGlzcGF0Y2hlck9uVXBkYXRlLnVzZUZvcm1TdGF0ZSA9IHVwZGF0ZUFjdGlvblN0YXRlO1xuSG9va3NEaXNwYXRjaGVyT25VcGRhdGUudXNlQWN0aW9uU3RhdGUgPSB1cGRhdGVBY3Rpb25TdGF0ZTtcbkhvb2tzRGlzcGF0Y2hlck9uVXBkYXRlLnVzZU9wdGltaXN0aWMgPSBmdW5jdGlvbiAocGFzc3Rocm91Z2gsIHJlZHVjZXIpIHtcbiAgdmFyIGhvb2sgPSB1cGRhdGVXb3JrSW5Qcm9ncmVzc0hvb2soKTtcbiAgcmV0dXJuIHVwZGF0ZU9wdGltaXN0aWNJbXBsKGhvb2ssIGN1cnJlbnRIb29rLCBwYXNzdGhyb3VnaCwgcmVkdWNlcik7XG59O1xudmFyIEhvb2tzRGlzcGF0Y2hlck9uUmVyZW5kZXIgPSB7XG4gIHJlYWRDb250ZXh0OiByZWFkQ29udGV4dCxcbiAgdXNlOiB1c2UsXG4gIHVzZUNhbGxiYWNrOiB1cGRhdGVDYWxsYmFjayxcbiAgdXNlQ29udGV4dDogcmVhZENvbnRleHQsXG4gIHVzZUVmZmVjdDogdXBkYXRlRWZmZWN0LFxuICB1c2VJbXBlcmF0aXZlSGFuZGxlOiB1cGRhdGVJbXBlcmF0aXZlSGFuZGxlLFxuICB1c2VJbnNlcnRpb25FZmZlY3Q6IHVwZGF0ZUluc2VydGlvbkVmZmVjdCxcbiAgdXNlTGF5b3V0RWZmZWN0OiB1cGRhdGVMYXlvdXRFZmZlY3QsXG4gIHVzZU1lbW86IHVwZGF0ZU1lbW8sXG4gIHVzZVJlZHVjZXI6IHJlcmVuZGVyUmVkdWNlcixcbiAgdXNlUmVmOiB1cGRhdGVSZWYsXG4gIHVzZVN0YXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHJlcmVuZGVyUmVkdWNlcihiYXNpY1N0YXRlUmVkdWNlcik7XG4gIH0sXG4gIHVzZURlYnVnVmFsdWU6IG1vdW50RGVidWdWYWx1ZSxcbiAgdXNlRGVmZXJyZWRWYWx1ZTogZnVuY3Rpb24gKHZhbHVlLCBpbml0aWFsVmFsdWUpIHtcbiAgICB2YXIgaG9vayA9IHVwZGF0ZVdvcmtJblByb2dyZXNzSG9vaygpO1xuICAgIHJldHVybiBudWxsID09PSBjdXJyZW50SG9va1xuICAgICAgPyBtb3VudERlZmVycmVkVmFsdWVJbXBsKGhvb2ssIHZhbHVlLCBpbml0aWFsVmFsdWUpXG4gICAgICA6IHVwZGF0ZURlZmVycmVkVmFsdWVJbXBsKFxuICAgICAgICAgIGhvb2ssXG4gICAgICAgICAgY3VycmVudEhvb2subWVtb2l6ZWRTdGF0ZSxcbiAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICBpbml0aWFsVmFsdWVcbiAgICAgICAgKTtcbiAgfSxcbiAgdXNlVHJhbnNpdGlvbjogZnVuY3Rpb24gKCkge1xuICAgIHZhciBib29sZWFuT3JUaGVuYWJsZSA9IHJlcmVuZGVyUmVkdWNlcihiYXNpY1N0YXRlUmVkdWNlcilbMF0sXG4gICAgICBzdGFydCA9IHVwZGF0ZVdvcmtJblByb2dyZXNzSG9vaygpLm1lbW9pemVkU3RhdGU7XG4gICAgcmV0dXJuIFtcbiAgICAgIFwiYm9vbGVhblwiID09PSB0eXBlb2YgYm9vbGVhbk9yVGhlbmFibGVcbiAgICAgICAgPyBib29sZWFuT3JUaGVuYWJsZVxuICAgICAgICA6IHVzZVRoZW5hYmxlKGJvb2xlYW5PclRoZW5hYmxlKSxcbiAgICAgIHN0YXJ0XG4gICAgXTtcbiAgfSxcbiAgdXNlU3luY0V4dGVybmFsU3RvcmU6IHVwZGF0ZVN5bmNFeHRlcm5hbFN0b3JlLFxuICB1c2VJZDogdXBkYXRlSWRcbn07XG5Ib29rc0Rpc3BhdGNoZXJPblJlcmVuZGVyLnVzZUNhY2hlUmVmcmVzaCA9IHVwZGF0ZVJlZnJlc2g7XG5Ib29rc0Rpc3BhdGNoZXJPblJlcmVuZGVyLnVzZU1lbW9DYWNoZSA9IHVzZU1lbW9DYWNoZTtcbkhvb2tzRGlzcGF0Y2hlck9uUmVyZW5kZXIudXNlSG9zdFRyYW5zaXRpb25TdGF0dXMgPSB1c2VIb3N0VHJhbnNpdGlvblN0YXR1cztcbkhvb2tzRGlzcGF0Y2hlck9uUmVyZW5kZXIudXNlRm9ybVN0YXRlID0gcmVyZW5kZXJBY3Rpb25TdGF0ZTtcbkhvb2tzRGlzcGF0Y2hlck9uUmVyZW5kZXIudXNlQWN0aW9uU3RhdGUgPSByZXJlbmRlckFjdGlvblN0YXRlO1xuSG9va3NEaXNwYXRjaGVyT25SZXJlbmRlci51c2VPcHRpbWlzdGljID0gZnVuY3Rpb24gKHBhc3N0aHJvdWdoLCByZWR1Y2VyKSB7XG4gIHZhciBob29rID0gdXBkYXRlV29ya0luUHJvZ3Jlc3NIb29rKCk7XG4gIGlmIChudWxsICE9PSBjdXJyZW50SG9vaylcbiAgICByZXR1cm4gdXBkYXRlT3B0aW1pc3RpY0ltcGwoaG9vaywgY3VycmVudEhvb2ssIHBhc3N0aHJvdWdoLCByZWR1Y2VyKTtcbiAgaG9vay5iYXNlU3RhdGUgPSBwYXNzdGhyb3VnaDtcbiAgcmV0dXJuIFtwYXNzdGhyb3VnaCwgaG9vay5xdWV1ZS5kaXNwYXRjaF07XG59O1xuZnVuY3Rpb24gYXBwbHlEZXJpdmVkU3RhdGVGcm9tUHJvcHMoXG4gIHdvcmtJblByb2dyZXNzLFxuICBjdG9yLFxuICBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMsXG4gIG5leHRQcm9wc1xuKSB7XG4gIGN0b3IgPSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlO1xuICBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgPSBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMobmV4dFByb3BzLCBjdG9yKTtcbiAgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzID1cbiAgICBudWxsID09PSBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgfHwgdm9pZCAwID09PSBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHNcbiAgICAgID8gY3RvclxuICAgICAgOiBhc3NpZ24oe30sIGN0b3IsIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyk7XG4gIHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUgPSBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7XG4gIDAgPT09IHdvcmtJblByb2dyZXNzLmxhbmVzICYmXG4gICAgKHdvcmtJblByb2dyZXNzLnVwZGF0ZVF1ZXVlLmJhc2VTdGF0ZSA9IGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyk7XG59XG52YXIgY2xhc3NDb21wb25lbnRVcGRhdGVyID0ge1xuICBpc01vdW50ZWQ6IGZ1bmN0aW9uIChjb21wb25lbnQpIHtcbiAgICByZXR1cm4gKGNvbXBvbmVudCA9IGNvbXBvbmVudC5fcmVhY3RJbnRlcm5hbHMpXG4gICAgICA/IGdldE5lYXJlc3RNb3VudGVkRmliZXIoY29tcG9uZW50KSA9PT0gY29tcG9uZW50XG4gICAgICA6ICExO1xuICB9LFxuICBlbnF1ZXVlU2V0U3RhdGU6IGZ1bmN0aW9uIChpbnN0LCBwYXlsb2FkLCBjYWxsYmFjaykge1xuICAgIGluc3QgPSBpbnN0Ll9yZWFjdEludGVybmFscztcbiAgICB2YXIgbGFuZSA9IHJlcXVlc3RVcGRhdGVMYW5lKCksXG4gICAgICB1cGRhdGUgPSBjcmVhdGVVcGRhdGUobGFuZSk7XG4gICAgdXBkYXRlLnBheWxvYWQgPSBwYXlsb2FkO1xuICAgIHZvaWQgMCAhPT0gY2FsbGJhY2sgJiYgbnVsbCAhPT0gY2FsbGJhY2sgJiYgKHVwZGF0ZS5jYWxsYmFjayA9IGNhbGxiYWNrKTtcbiAgICBwYXlsb2FkID0gZW5xdWV1ZVVwZGF0ZShpbnN0LCB1cGRhdGUsIGxhbmUpO1xuICAgIG51bGwgIT09IHBheWxvYWQgJiZcbiAgICAgIChzY2hlZHVsZVVwZGF0ZU9uRmliZXIocGF5bG9hZCwgaW5zdCwgbGFuZSksXG4gICAgICBlbnRhbmdsZVRyYW5zaXRpb25zKHBheWxvYWQsIGluc3QsIGxhbmUpKTtcbiAgfSxcbiAgZW5xdWV1ZVJlcGxhY2VTdGF0ZTogZnVuY3Rpb24gKGluc3QsIHBheWxvYWQsIGNhbGxiYWNrKSB7XG4gICAgaW5zdCA9IGluc3QuX3JlYWN0SW50ZXJuYWxzO1xuICAgIHZhciBsYW5lID0gcmVxdWVzdFVwZGF0ZUxhbmUoKSxcbiAgICAgIHVwZGF0ZSA9IGNyZWF0ZVVwZGF0ZShsYW5lKTtcbiAgICB1cGRhdGUudGFnID0gMTtcbiAgICB1cGRhdGUucGF5bG9hZCA9IHBheWxvYWQ7XG4gICAgdm9pZCAwICE9PSBjYWxsYmFjayAmJiBudWxsICE9PSBjYWxsYmFjayAmJiAodXBkYXRlLmNhbGxiYWNrID0gY2FsbGJhY2spO1xuICAgIHBheWxvYWQgPSBlbnF1ZXVlVXBkYXRlKGluc3QsIHVwZGF0ZSwgbGFuZSk7XG4gICAgbnVsbCAhPT0gcGF5bG9hZCAmJlxuICAgICAgKHNjaGVkdWxlVXBkYXRlT25GaWJlcihwYXlsb2FkLCBpbnN0LCBsYW5lKSxcbiAgICAgIGVudGFuZ2xlVHJhbnNpdGlvbnMocGF5bG9hZCwgaW5zdCwgbGFuZSkpO1xuICB9LFxuICBlbnF1ZXVlRm9yY2VVcGRhdGU6IGZ1bmN0aW9uIChpbnN0LCBjYWxsYmFjaykge1xuICAgIGluc3QgPSBpbnN0Ll9yZWFjdEludGVybmFscztcbiAgICB2YXIgbGFuZSA9IHJlcXVlc3RVcGRhdGVMYW5lKCksXG4gICAgICB1cGRhdGUgPSBjcmVhdGVVcGRhdGUobGFuZSk7XG4gICAgdXBkYXRlLnRhZyA9IDI7XG4gICAgdm9pZCAwICE9PSBjYWxsYmFjayAmJiBudWxsICE9PSBjYWxsYmFjayAmJiAodXBkYXRlLmNhbGxiYWNrID0gY2FsbGJhY2spO1xuICAgIGNhbGxiYWNrID0gZW5xdWV1ZVVwZGF0ZShpbnN0LCB1cGRhdGUsIGxhbmUpO1xuICAgIG51bGwgIT09IGNhbGxiYWNrICYmXG4gICAgICAoc2NoZWR1bGVVcGRhdGVPbkZpYmVyKGNhbGxiYWNrLCBpbnN0LCBsYW5lKSxcbiAgICAgIGVudGFuZ2xlVHJhbnNpdGlvbnMoY2FsbGJhY2ssIGluc3QsIGxhbmUpKTtcbiAgfVxufTtcbmZ1bmN0aW9uIGNoZWNrU2hvdWxkQ29tcG9uZW50VXBkYXRlKFxuICB3b3JrSW5Qcm9ncmVzcyxcbiAgY3RvcixcbiAgb2xkUHJvcHMsXG4gIG5ld1Byb3BzLFxuICBvbGRTdGF0ZSxcbiAgbmV3U3RhdGUsXG4gIG5leHRDb250ZXh0XG4pIHtcbiAgd29ya0luUHJvZ3Jlc3MgPSB3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGU7XG4gIHJldHVybiBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiB3b3JrSW5Qcm9ncmVzcy5zaG91bGRDb21wb25lbnRVcGRhdGVcbiAgICA/IHdvcmtJblByb2dyZXNzLnNob3VsZENvbXBvbmVudFVwZGF0ZShuZXdQcm9wcywgbmV3U3RhdGUsIG5leHRDb250ZXh0KVxuICAgIDogY3Rvci5wcm90b3R5cGUgJiYgY3Rvci5wcm90b3R5cGUuaXNQdXJlUmVhY3RDb21wb25lbnRcbiAgICAgID8gIXNoYWxsb3dFcXVhbChvbGRQcm9wcywgbmV3UHJvcHMpIHx8ICFzaGFsbG93RXF1YWwob2xkU3RhdGUsIG5ld1N0YXRlKVxuICAgICAgOiAhMDtcbn1cbmZ1bmN0aW9uIGNhbGxDb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKFxuICB3b3JrSW5Qcm9ncmVzcyxcbiAgaW5zdGFuY2UsXG4gIG5ld1Byb3BzLFxuICBuZXh0Q29udGV4dFxuKSB7XG4gIHdvcmtJblByb2dyZXNzID0gaW5zdGFuY2Uuc3RhdGU7XG4gIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGluc3RhbmNlLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgJiZcbiAgICBpbnN0YW5jZS5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5ld1Byb3BzLCBuZXh0Q29udGV4dCk7XG4gIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGluc3RhbmNlLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzICYmXG4gICAgaW5zdGFuY2UuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV3UHJvcHMsIG5leHRDb250ZXh0KTtcbiAgaW5zdGFuY2Uuc3RhdGUgIT09IHdvcmtJblByb2dyZXNzICYmXG4gICAgY2xhc3NDb21wb25lbnRVcGRhdGVyLmVucXVldWVSZXBsYWNlU3RhdGUoaW5zdGFuY2UsIGluc3RhbmNlLnN0YXRlLCBudWxsKTtcbn1cbmZ1bmN0aW9uIHJlc29sdmVDbGFzc0NvbXBvbmVudFByb3BzKENvbXBvbmVudCwgYmFzZVByb3BzKSB7XG4gIHZhciBuZXdQcm9wcyA9IGJhc2VQcm9wcztcbiAgaWYgKFwicmVmXCIgaW4gYmFzZVByb3BzKSB7XG4gICAgbmV3UHJvcHMgPSB7fTtcbiAgICBmb3IgKHZhciBwcm9wTmFtZSBpbiBiYXNlUHJvcHMpXG4gICAgICBcInJlZlwiICE9PSBwcm9wTmFtZSAmJiAobmV3UHJvcHNbcHJvcE5hbWVdID0gYmFzZVByb3BzW3Byb3BOYW1lXSk7XG4gIH1cbiAgaWYgKChDb21wb25lbnQgPSBDb21wb25lbnQuZGVmYXVsdFByb3BzKSkge1xuICAgIG5ld1Byb3BzID09PSBiYXNlUHJvcHMgJiYgKG5ld1Byb3BzID0gYXNzaWduKHt9LCBuZXdQcm9wcykpO1xuICAgIGZvciAodmFyIHByb3BOYW1lJDY3IGluIENvbXBvbmVudClcbiAgICAgIHZvaWQgMCA9PT0gbmV3UHJvcHNbcHJvcE5hbWUkNjddICYmXG4gICAgICAgIChuZXdQcm9wc1twcm9wTmFtZSQ2N10gPSBDb21wb25lbnRbcHJvcE5hbWUkNjddKTtcbiAgfVxuICByZXR1cm4gbmV3UHJvcHM7XG59XG52YXIgcmVwb3J0R2xvYmFsRXJyb3IgPVxuICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiByZXBvcnRFcnJvclxuICAgID8gcmVwb3J0RXJyb3JcbiAgICA6IGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgXCJvYmplY3RcIiA9PT0gdHlwZW9mIHdpbmRvdyAmJlxuICAgICAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHdpbmRvdy5FcnJvckV2ZW50XG4gICAgICAgICkge1xuICAgICAgICAgIHZhciBldmVudCA9IG5ldyB3aW5kb3cuRXJyb3JFdmVudChcImVycm9yXCIsIHtcbiAgICAgICAgICAgIGJ1YmJsZXM6ICEwLFxuICAgICAgICAgICAgY2FuY2VsYWJsZTogITAsXG4gICAgICAgICAgICBtZXNzYWdlOlxuICAgICAgICAgICAgICBcIm9iamVjdFwiID09PSB0eXBlb2YgZXJyb3IgJiZcbiAgICAgICAgICAgICAgbnVsbCAhPT0gZXJyb3IgJiZcbiAgICAgICAgICAgICAgXCJzdHJpbmdcIiA9PT0gdHlwZW9mIGVycm9yLm1lc3NhZ2VcbiAgICAgICAgICAgICAgICA/IFN0cmluZyhlcnJvci5tZXNzYWdlKVxuICAgICAgICAgICAgICAgIDogU3RyaW5nKGVycm9yKSxcbiAgICAgICAgICAgIGVycm9yOiBlcnJvclxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGlmICghd2luZG93LmRpc3BhdGNoRXZlbnQoZXZlbnQpKSByZXR1cm47XG4gICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgXCJvYmplY3RcIiA9PT0gdHlwZW9mIHByb2Nlc3MgJiZcbiAgICAgICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBwcm9jZXNzLmVtaXRcbiAgICAgICAgKSB7XG4gICAgICAgICAgcHJvY2Vzcy5lbWl0KFwidW5jYXVnaHRFeGNlcHRpb25cIiwgZXJyb3IpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgICAgIH07XG5mdW5jdGlvbiBkZWZhdWx0T25VbmNhdWdodEVycm9yKGVycm9yKSB7XG4gIHJlcG9ydEdsb2JhbEVycm9yKGVycm9yKTtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRPbkNhdWdodEVycm9yKGVycm9yKSB7XG4gIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xufVxuZnVuY3Rpb24gZGVmYXVsdE9uUmVjb3ZlcmFibGVFcnJvcihlcnJvcikge1xuICByZXBvcnRHbG9iYWxFcnJvcihlcnJvcik7XG59XG5mdW5jdGlvbiBsb2dVbmNhdWdodEVycm9yKHJvb3QsIGVycm9ySW5mbykge1xuICB0cnkge1xuICAgIHZhciBvblVuY2F1Z2h0RXJyb3IgPSByb290Lm9uVW5jYXVnaHRFcnJvcjtcbiAgICBvblVuY2F1Z2h0RXJyb3IoZXJyb3JJbmZvLnZhbHVlLCB7IGNvbXBvbmVudFN0YWNrOiBlcnJvckluZm8uc3RhY2sgfSk7XG4gIH0gY2F0Y2ggKGUkNjgpIHtcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIHRocm93IGUkNjg7XG4gICAgfSk7XG4gIH1cbn1cbmZ1bmN0aW9uIGxvZ0NhdWdodEVycm9yKHJvb3QsIGJvdW5kYXJ5LCBlcnJvckluZm8pIHtcbiAgdHJ5IHtcbiAgICB2YXIgb25DYXVnaHRFcnJvciA9IHJvb3Qub25DYXVnaHRFcnJvcjtcbiAgICBvbkNhdWdodEVycm9yKGVycm9ySW5mby52YWx1ZSwge1xuICAgICAgY29tcG9uZW50U3RhY2s6IGVycm9ySW5mby5zdGFjayxcbiAgICAgIGVycm9yQm91bmRhcnk6IDEgPT09IGJvdW5kYXJ5LnRhZyA/IGJvdW5kYXJ5LnN0YXRlTm9kZSA6IG51bGxcbiAgICB9KTtcbiAgfSBjYXRjaCAoZSQ2OSkge1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgdGhyb3cgZSQ2OTtcbiAgICB9KTtcbiAgfVxufVxuZnVuY3Rpb24gY3JlYXRlUm9vdEVycm9yVXBkYXRlKHJvb3QsIGVycm9ySW5mbywgbGFuZSkge1xuICBsYW5lID0gY3JlYXRlVXBkYXRlKGxhbmUpO1xuICBsYW5lLnRhZyA9IDM7XG4gIGxhbmUucGF5bG9hZCA9IHsgZWxlbWVudDogbnVsbCB9O1xuICBsYW5lLmNhbGxiYWNrID0gZnVuY3Rpb24gKCkge1xuICAgIGxvZ1VuY2F1Z2h0RXJyb3Iocm9vdCwgZXJyb3JJbmZvKTtcbiAgfTtcbiAgcmV0dXJuIGxhbmU7XG59XG5mdW5jdGlvbiBjcmVhdGVDbGFzc0Vycm9yVXBkYXRlKGxhbmUpIHtcbiAgbGFuZSA9IGNyZWF0ZVVwZGF0ZShsYW5lKTtcbiAgbGFuZS50YWcgPSAzO1xuICByZXR1cm4gbGFuZTtcbn1cbmZ1bmN0aW9uIGluaXRpYWxpemVDbGFzc0Vycm9yVXBkYXRlKHVwZGF0ZSwgcm9vdCwgZmliZXIsIGVycm9ySW5mbykge1xuICB2YXIgZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yID0gZmliZXIudHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I7XG4gIGlmIChcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IpIHtcbiAgICB2YXIgZXJyb3IgPSBlcnJvckluZm8udmFsdWU7XG4gICAgdXBkYXRlLnBheWxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yKGVycm9yKTtcbiAgICB9O1xuICAgIHVwZGF0ZS5jYWxsYmFjayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGxvZ0NhdWdodEVycm9yKHJvb3QsIGZpYmVyLCBlcnJvckluZm8pO1xuICAgIH07XG4gIH1cbiAgdmFyIGluc3QgPSBmaWJlci5zdGF0ZU5vZGU7XG4gIG51bGwgIT09IGluc3QgJiZcbiAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBpbnN0LmNvbXBvbmVudERpZENhdGNoICYmXG4gICAgKHVwZGF0ZS5jYWxsYmFjayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGxvZ0NhdWdodEVycm9yKHJvb3QsIGZpYmVyLCBlcnJvckluZm8pO1xuICAgICAgXCJmdW5jdGlvblwiICE9PSB0eXBlb2YgZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yICYmXG4gICAgICAgIChudWxsID09PSBsZWdhY3lFcnJvckJvdW5kYXJpZXNUaGF0QWxyZWFkeUZhaWxlZFxuICAgICAgICAgID8gKGxlZ2FjeUVycm9yQm91bmRhcmllc1RoYXRBbHJlYWR5RmFpbGVkID0gbmV3IFNldChbdGhpc10pKVxuICAgICAgICAgIDogbGVnYWN5RXJyb3JCb3VuZGFyaWVzVGhhdEFscmVhZHlGYWlsZWQuYWRkKHRoaXMpKTtcbiAgICAgIHZhciBzdGFjayA9IGVycm9ySW5mby5zdGFjaztcbiAgICAgIHRoaXMuY29tcG9uZW50RGlkQ2F0Y2goZXJyb3JJbmZvLnZhbHVlLCB7XG4gICAgICAgIGNvbXBvbmVudFN0YWNrOiBudWxsICE9PSBzdGFjayA/IHN0YWNrIDogXCJcIlxuICAgICAgfSk7XG4gICAgfSk7XG59XG5mdW5jdGlvbiB0aHJvd0V4Y2VwdGlvbihcbiAgcm9vdCxcbiAgcmV0dXJuRmliZXIsXG4gIHNvdXJjZUZpYmVyLFxuICB2YWx1ZSxcbiAgcm9vdFJlbmRlckxhbmVzXG4pIHtcbiAgc291cmNlRmliZXIuZmxhZ3MgfD0gMzI3Njg7XG4gIGlmIChcbiAgICBudWxsICE9PSB2YWx1ZSAmJlxuICAgIFwib2JqZWN0XCIgPT09IHR5cGVvZiB2YWx1ZSAmJlxuICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHZhbHVlLnRoZW5cbiAgKSB7XG4gICAgcmV0dXJuRmliZXIgPSBzb3VyY2VGaWJlci5hbHRlcm5hdGU7XG4gICAgbnVsbCAhPT0gcmV0dXJuRmliZXIgJiZcbiAgICAgIHByb3BhZ2F0ZVBhcmVudENvbnRleHRDaGFuZ2VzKFxuICAgICAgICByZXR1cm5GaWJlcixcbiAgICAgICAgc291cmNlRmliZXIsXG4gICAgICAgIHJvb3RSZW5kZXJMYW5lcyxcbiAgICAgICAgITBcbiAgICAgICk7XG4gICAgc291cmNlRmliZXIgPSBzdXNwZW5zZUhhbmRsZXJTdGFja0N1cnNvci5jdXJyZW50O1xuICAgIGlmIChudWxsICE9PSBzb3VyY2VGaWJlcikge1xuICAgICAgc3dpdGNoIChzb3VyY2VGaWJlci50YWcpIHtcbiAgICAgICAgY2FzZSAxMzpcbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgbnVsbCA9PT0gc2hlbGxCb3VuZGFyeVxuICAgICAgICAgICAgICA/IHJlbmRlckRpZFN1c3BlbmREZWxheUlmUG9zc2libGUoKVxuICAgICAgICAgICAgICA6IG51bGwgPT09IHNvdXJjZUZpYmVyLmFsdGVybmF0ZSAmJlxuICAgICAgICAgICAgICAgIDAgPT09IHdvcmtJblByb2dyZXNzUm9vdEV4aXRTdGF0dXMgJiZcbiAgICAgICAgICAgICAgICAod29ya0luUHJvZ3Jlc3NSb290RXhpdFN0YXR1cyA9IDMpLFxuICAgICAgICAgICAgKHNvdXJjZUZpYmVyLmZsYWdzICY9IC0yNTcpLFxuICAgICAgICAgICAgKHNvdXJjZUZpYmVyLmZsYWdzIHw9IDY1NTM2KSxcbiAgICAgICAgICAgIChzb3VyY2VGaWJlci5sYW5lcyA9IHJvb3RSZW5kZXJMYW5lcyksXG4gICAgICAgICAgICB2YWx1ZSA9PT0gbm9vcFN1c3BlbnNleUNvbW1pdFRoZW5hYmxlXG4gICAgICAgICAgICAgID8gKHNvdXJjZUZpYmVyLmZsYWdzIHw9IDE2Mzg0KVxuICAgICAgICAgICAgICA6ICgocmV0dXJuRmliZXIgPSBzb3VyY2VGaWJlci51cGRhdGVRdWV1ZSksXG4gICAgICAgICAgICAgICAgbnVsbCA9PT0gcmV0dXJuRmliZXJcbiAgICAgICAgICAgICAgICAgID8gKHNvdXJjZUZpYmVyLnVwZGF0ZVF1ZXVlID0gbmV3IFNldChbdmFsdWVdKSlcbiAgICAgICAgICAgICAgICAgIDogcmV0dXJuRmliZXIuYWRkKHZhbHVlKSxcbiAgICAgICAgICAgICAgICBhdHRhY2hQaW5nTGlzdGVuZXIocm9vdCwgdmFsdWUsIHJvb3RSZW5kZXJMYW5lcykpLFxuICAgICAgICAgICAgITFcbiAgICAgICAgICApO1xuICAgICAgICBjYXNlIDIyOlxuICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAoc291cmNlRmliZXIuZmxhZ3MgfD0gNjU1MzYpLFxuICAgICAgICAgICAgdmFsdWUgPT09IG5vb3BTdXNwZW5zZXlDb21taXRUaGVuYWJsZVxuICAgICAgICAgICAgICA/IChzb3VyY2VGaWJlci5mbGFncyB8PSAxNjM4NClcbiAgICAgICAgICAgICAgOiAoKHJldHVybkZpYmVyID0gc291cmNlRmliZXIudXBkYXRlUXVldWUpLFxuICAgICAgICAgICAgICAgIG51bGwgPT09IHJldHVybkZpYmVyXG4gICAgICAgICAgICAgICAgICA/ICgocmV0dXJuRmliZXIgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvbnM6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgbWFya2VySW5zdGFuY2VzOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgIHJldHJ5UXVldWU6IG5ldyBTZXQoW3ZhbHVlXSlcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgIChzb3VyY2VGaWJlci51cGRhdGVRdWV1ZSA9IHJldHVybkZpYmVyKSlcbiAgICAgICAgICAgICAgICAgIDogKChzb3VyY2VGaWJlciA9IHJldHVybkZpYmVyLnJldHJ5UXVldWUpLFxuICAgICAgICAgICAgICAgICAgICBudWxsID09PSBzb3VyY2VGaWJlclxuICAgICAgICAgICAgICAgICAgICAgID8gKHJldHVybkZpYmVyLnJldHJ5UXVldWUgPSBuZXcgU2V0KFt2YWx1ZV0pKVxuICAgICAgICAgICAgICAgICAgICAgIDogc291cmNlRmliZXIuYWRkKHZhbHVlKSksXG4gICAgICAgICAgICAgICAgYXR0YWNoUGluZ0xpc3RlbmVyKHJvb3QsIHZhbHVlLCByb290UmVuZGVyTGFuZXMpKSxcbiAgICAgICAgICAgICExXG4gICAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNDM1LCBzb3VyY2VGaWJlci50YWcpKTtcbiAgICB9XG4gICAgYXR0YWNoUGluZ0xpc3RlbmVyKHJvb3QsIHZhbHVlLCByb290UmVuZGVyTGFuZXMpO1xuICAgIHJlbmRlckRpZFN1c3BlbmREZWxheUlmUG9zc2libGUoKTtcbiAgICByZXR1cm4gITE7XG4gIH1cbiAgaWYgKGlzSHlkcmF0aW5nKVxuICAgIHJldHVybiAoXG4gICAgICAocmV0dXJuRmliZXIgPSBzdXNwZW5zZUhhbmRsZXJTdGFja0N1cnNvci5jdXJyZW50KSxcbiAgICAgIG51bGwgIT09IHJldHVybkZpYmVyXG4gICAgICAgID8gKDAgPT09IChyZXR1cm5GaWJlci5mbGFncyAmIDY1NTM2KSAmJiAocmV0dXJuRmliZXIuZmxhZ3MgfD0gMjU2KSxcbiAgICAgICAgICAocmV0dXJuRmliZXIuZmxhZ3MgfD0gNjU1MzYpLFxuICAgICAgICAgIChyZXR1cm5GaWJlci5sYW5lcyA9IHJvb3RSZW5kZXJMYW5lcyksXG4gICAgICAgICAgdmFsdWUgIT09IEh5ZHJhdGlvbk1pc21hdGNoRXhjZXB0aW9uICYmXG4gICAgICAgICAgICAoKHJvb3QgPSBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDQyMiksIHsgY2F1c2U6IHZhbHVlIH0pKSxcbiAgICAgICAgICAgIHF1ZXVlSHlkcmF0aW9uRXJyb3IoY3JlYXRlQ2FwdHVyZWRWYWx1ZUF0RmliZXIocm9vdCwgc291cmNlRmliZXIpKSkpXG4gICAgICAgIDogKHZhbHVlICE9PSBIeWRyYXRpb25NaXNtYXRjaEV4Y2VwdGlvbiAmJlxuICAgICAgICAgICAgKChyZXR1cm5GaWJlciA9IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNDIzKSwge1xuICAgICAgICAgICAgICBjYXVzZTogdmFsdWVcbiAgICAgICAgICAgIH0pKSxcbiAgICAgICAgICAgIHF1ZXVlSHlkcmF0aW9uRXJyb3IoXG4gICAgICAgICAgICAgIGNyZWF0ZUNhcHR1cmVkVmFsdWVBdEZpYmVyKHJldHVybkZpYmVyLCBzb3VyY2VGaWJlcilcbiAgICAgICAgICAgICkpLFxuICAgICAgICAgIChyb290ID0gcm9vdC5jdXJyZW50LmFsdGVybmF0ZSksXG4gICAgICAgICAgKHJvb3QuZmxhZ3MgfD0gNjU1MzYpLFxuICAgICAgICAgIChyb290UmVuZGVyTGFuZXMgJj0gLXJvb3RSZW5kZXJMYW5lcyksXG4gICAgICAgICAgKHJvb3QubGFuZXMgfD0gcm9vdFJlbmRlckxhbmVzKSxcbiAgICAgICAgICAodmFsdWUgPSBjcmVhdGVDYXB0dXJlZFZhbHVlQXRGaWJlcih2YWx1ZSwgc291cmNlRmliZXIpKSxcbiAgICAgICAgICAocm9vdFJlbmRlckxhbmVzID0gY3JlYXRlUm9vdEVycm9yVXBkYXRlKFxuICAgICAgICAgICAgcm9vdC5zdGF0ZU5vZGUsXG4gICAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICAgIHJvb3RSZW5kZXJMYW5lc1xuICAgICAgICAgICkpLFxuICAgICAgICAgIGVucXVldWVDYXB0dXJlZFVwZGF0ZShyb290LCByb290UmVuZGVyTGFuZXMpLFxuICAgICAgICAgIDQgIT09IHdvcmtJblByb2dyZXNzUm9vdEV4aXRTdGF0dXMgJiZcbiAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzc1Jvb3RFeGl0U3RhdHVzID0gMikpLFxuICAgICAgITFcbiAgICApO1xuICB2YXIgd3JhcHBlckVycm9yID0gRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg1MjApLCB7IGNhdXNlOiB2YWx1ZSB9KTtcbiAgd3JhcHBlckVycm9yID0gY3JlYXRlQ2FwdHVyZWRWYWx1ZUF0RmliZXIod3JhcHBlckVycm9yLCBzb3VyY2VGaWJlcik7XG4gIG51bGwgPT09IHdvcmtJblByb2dyZXNzUm9vdENvbmN1cnJlbnRFcnJvcnNcbiAgICA/ICh3b3JrSW5Qcm9ncmVzc1Jvb3RDb25jdXJyZW50RXJyb3JzID0gW3dyYXBwZXJFcnJvcl0pXG4gICAgOiB3b3JrSW5Qcm9ncmVzc1Jvb3RDb25jdXJyZW50RXJyb3JzLnB1c2god3JhcHBlckVycm9yKTtcbiAgNCAhPT0gd29ya0luUHJvZ3Jlc3NSb290RXhpdFN0YXR1cyAmJiAod29ya0luUHJvZ3Jlc3NSb290RXhpdFN0YXR1cyA9IDIpO1xuICBpZiAobnVsbCA9PT0gcmV0dXJuRmliZXIpIHJldHVybiAhMDtcbiAgdmFsdWUgPSBjcmVhdGVDYXB0dXJlZFZhbHVlQXRGaWJlcih2YWx1ZSwgc291cmNlRmliZXIpO1xuICBzb3VyY2VGaWJlciA9IHJldHVybkZpYmVyO1xuICBkbyB7XG4gICAgc3dpdGNoIChzb3VyY2VGaWJlci50YWcpIHtcbiAgICAgIGNhc2UgMzpcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAoc291cmNlRmliZXIuZmxhZ3MgfD0gNjU1MzYpLFxuICAgICAgICAgIChyb290ID0gcm9vdFJlbmRlckxhbmVzICYgLXJvb3RSZW5kZXJMYW5lcyksXG4gICAgICAgICAgKHNvdXJjZUZpYmVyLmxhbmVzIHw9IHJvb3QpLFxuICAgICAgICAgIChyb290ID0gY3JlYXRlUm9vdEVycm9yVXBkYXRlKHNvdXJjZUZpYmVyLnN0YXRlTm9kZSwgdmFsdWUsIHJvb3QpKSxcbiAgICAgICAgICBlbnF1ZXVlQ2FwdHVyZWRVcGRhdGUoc291cmNlRmliZXIsIHJvb3QpLFxuICAgICAgICAgICExXG4gICAgICAgICk7XG4gICAgICBjYXNlIDE6XG4gICAgICAgIGlmIChcbiAgICAgICAgICAoKHJldHVybkZpYmVyID0gc291cmNlRmliZXIudHlwZSksXG4gICAgICAgICAgKHdyYXBwZXJFcnJvciA9IHNvdXJjZUZpYmVyLnN0YXRlTm9kZSksXG4gICAgICAgICAgMCA9PT0gKHNvdXJjZUZpYmVyLmZsYWdzICYgMTI4KSAmJlxuICAgICAgICAgICAgKFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHJldHVybkZpYmVyLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvciB8fFxuICAgICAgICAgICAgICAobnVsbCAhPT0gd3JhcHBlckVycm9yICYmXG4gICAgICAgICAgICAgICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2Ygd3JhcHBlckVycm9yLmNvbXBvbmVudERpZENhdGNoICYmXG4gICAgICAgICAgICAgICAgKG51bGwgPT09IGxlZ2FjeUVycm9yQm91bmRhcmllc1RoYXRBbHJlYWR5RmFpbGVkIHx8XG4gICAgICAgICAgICAgICAgICAhbGVnYWN5RXJyb3JCb3VuZGFyaWVzVGhhdEFscmVhZHlGYWlsZWQuaGFzKHdyYXBwZXJFcnJvcikpKSkpXG4gICAgICAgIClcbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgKHNvdXJjZUZpYmVyLmZsYWdzIHw9IDY1NTM2KSxcbiAgICAgICAgICAgIChyb290UmVuZGVyTGFuZXMgJj0gLXJvb3RSZW5kZXJMYW5lcyksXG4gICAgICAgICAgICAoc291cmNlRmliZXIubGFuZXMgfD0gcm9vdFJlbmRlckxhbmVzKSxcbiAgICAgICAgICAgIChyb290UmVuZGVyTGFuZXMgPSBjcmVhdGVDbGFzc0Vycm9yVXBkYXRlKHJvb3RSZW5kZXJMYW5lcykpLFxuICAgICAgICAgICAgaW5pdGlhbGl6ZUNsYXNzRXJyb3JVcGRhdGUoXG4gICAgICAgICAgICAgIHJvb3RSZW5kZXJMYW5lcyxcbiAgICAgICAgICAgICAgcm9vdCxcbiAgICAgICAgICAgICAgc291cmNlRmliZXIsXG4gICAgICAgICAgICAgIHZhbHVlXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgZW5xdWV1ZUNhcHR1cmVkVXBkYXRlKHNvdXJjZUZpYmVyLCByb290UmVuZGVyTGFuZXMpLFxuICAgICAgICAgICAgITFcbiAgICAgICAgICApO1xuICAgIH1cbiAgICBzb3VyY2VGaWJlciA9IHNvdXJjZUZpYmVyLnJldHVybjtcbiAgfSB3aGlsZSAobnVsbCAhPT0gc291cmNlRmliZXIpO1xuICByZXR1cm4gITE7XG59XG52YXIgU2VsZWN0aXZlSHlkcmF0aW9uRXhjZXB0aW9uID0gRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg0NjEpKSxcbiAgZGlkUmVjZWl2ZVVwZGF0ZSA9ICExO1xuZnVuY3Rpb24gcmVjb25jaWxlQ2hpbGRyZW4oY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIG5leHRDaGlsZHJlbiwgcmVuZGVyTGFuZXMpIHtcbiAgd29ya0luUHJvZ3Jlc3MuY2hpbGQgPVxuICAgIG51bGwgPT09IGN1cnJlbnRcbiAgICAgID8gbW91bnRDaGlsZEZpYmVycyh3b3JrSW5Qcm9ncmVzcywgbnVsbCwgbmV4dENoaWxkcmVuLCByZW5kZXJMYW5lcylcbiAgICAgIDogcmVjb25jaWxlQ2hpbGRGaWJlcnMoXG4gICAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgY3VycmVudC5jaGlsZCxcbiAgICAgICAgICBuZXh0Q2hpbGRyZW4sXG4gICAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICAgKTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZUZvcndhcmRSZWYoXG4gIGN1cnJlbnQsXG4gIHdvcmtJblByb2dyZXNzLFxuICBDb21wb25lbnQsXG4gIG5leHRQcm9wcyxcbiAgcmVuZGVyTGFuZXNcbikge1xuICBDb21wb25lbnQgPSBDb21wb25lbnQucmVuZGVyO1xuICB2YXIgcmVmID0gd29ya0luUHJvZ3Jlc3MucmVmO1xuICBpZiAoXCJyZWZcIiBpbiBuZXh0UHJvcHMpIHtcbiAgICB2YXIgcHJvcHNXaXRob3V0UmVmID0ge307XG4gICAgZm9yICh2YXIga2V5IGluIG5leHRQcm9wcylcbiAgICAgIFwicmVmXCIgIT09IGtleSAmJiAocHJvcHNXaXRob3V0UmVmW2tleV0gPSBuZXh0UHJvcHNba2V5XSk7XG4gIH0gZWxzZSBwcm9wc1dpdGhvdXRSZWYgPSBuZXh0UHJvcHM7XG4gIHByZXBhcmVUb1JlYWRDb250ZXh0KHdvcmtJblByb2dyZXNzKTtcbiAgbmV4dFByb3BzID0gcmVuZGVyV2l0aEhvb2tzKFxuICAgIGN1cnJlbnQsXG4gICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgQ29tcG9uZW50LFxuICAgIHByb3BzV2l0aG91dFJlZixcbiAgICByZWYsXG4gICAgcmVuZGVyTGFuZXNcbiAgKTtcbiAga2V5ID0gY2hlY2tEaWRSZW5kZXJJZEhvb2soKTtcbiAgaWYgKG51bGwgIT09IGN1cnJlbnQgJiYgIWRpZFJlY2VpdmVVcGRhdGUpXG4gICAgcmV0dXJuIChcbiAgICAgIGJhaWxvdXRIb29rcyhjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgcmVuZGVyTGFuZXMpLFxuICAgICAgYmFpbG91dE9uQWxyZWFkeUZpbmlzaGVkV29yayhjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgcmVuZGVyTGFuZXMpXG4gICAgKTtcbiAgaXNIeWRyYXRpbmcgJiYga2V5ICYmIHB1c2hNYXRlcmlhbGl6ZWRUcmVlSWQod29ya0luUHJvZ3Jlc3MpO1xuICB3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSAxO1xuICByZWNvbmNpbGVDaGlsZHJlbihjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgbmV4dFByb3BzLCByZW5kZXJMYW5lcyk7XG4gIHJldHVybiB3b3JrSW5Qcm9ncmVzcy5jaGlsZDtcbn1cbmZ1bmN0aW9uIHVwZGF0ZU1lbW9Db21wb25lbnQoXG4gIGN1cnJlbnQsXG4gIHdvcmtJblByb2dyZXNzLFxuICBDb21wb25lbnQsXG4gIG5leHRQcm9wcyxcbiAgcmVuZGVyTGFuZXNcbikge1xuICBpZiAobnVsbCA9PT0gY3VycmVudCkge1xuICAgIHZhciB0eXBlID0gQ29tcG9uZW50LnR5cGU7XG4gICAgaWYgKFxuICAgICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgdHlwZSAmJlxuICAgICAgIXNob3VsZENvbnN0cnVjdCh0eXBlKSAmJlxuICAgICAgdm9pZCAwID09PSB0eXBlLmRlZmF1bHRQcm9wcyAmJlxuICAgICAgbnVsbCA9PT0gQ29tcG9uZW50LmNvbXBhcmVcbiAgICApXG4gICAgICByZXR1cm4gKFxuICAgICAgICAod29ya0luUHJvZ3Jlc3MudGFnID0gMTUpLFxuICAgICAgICAod29ya0luUHJvZ3Jlc3MudHlwZSA9IHR5cGUpLFxuICAgICAgICB1cGRhdGVTaW1wbGVNZW1vQ29tcG9uZW50KFxuICAgICAgICAgIGN1cnJlbnQsXG4gICAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgdHlwZSxcbiAgICAgICAgICBuZXh0UHJvcHMsXG4gICAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICBjdXJyZW50ID0gY3JlYXRlRmliZXJGcm9tVHlwZUFuZFByb3BzKFxuICAgICAgQ29tcG9uZW50LnR5cGUsXG4gICAgICBudWxsLFxuICAgICAgbmV4dFByb3BzLFxuICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICB3b3JrSW5Qcm9ncmVzcy5tb2RlLFxuICAgICAgcmVuZGVyTGFuZXNcbiAgICApO1xuICAgIGN1cnJlbnQucmVmID0gd29ya0luUHJvZ3Jlc3MucmVmO1xuICAgIGN1cnJlbnQucmV0dXJuID0gd29ya0luUHJvZ3Jlc3M7XG4gICAgcmV0dXJuICh3b3JrSW5Qcm9ncmVzcy5jaGlsZCA9IGN1cnJlbnQpO1xuICB9XG4gIHR5cGUgPSBjdXJyZW50LmNoaWxkO1xuICBpZiAoIWNoZWNrU2NoZWR1bGVkVXBkYXRlT3JDb250ZXh0KGN1cnJlbnQsIHJlbmRlckxhbmVzKSkge1xuICAgIHZhciBwcmV2UHJvcHMgPSB0eXBlLm1lbW9pemVkUHJvcHM7XG4gICAgQ29tcG9uZW50ID0gQ29tcG9uZW50LmNvbXBhcmU7XG4gICAgQ29tcG9uZW50ID0gbnVsbCAhPT0gQ29tcG9uZW50ID8gQ29tcG9uZW50IDogc2hhbGxvd0VxdWFsO1xuICAgIGlmIChDb21wb25lbnQocHJldlByb3BzLCBuZXh0UHJvcHMpICYmIGN1cnJlbnQucmVmID09PSB3b3JrSW5Qcm9ncmVzcy5yZWYpXG4gICAgICByZXR1cm4gYmFpbG91dE9uQWxyZWFkeUZpbmlzaGVkV29yayhjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgcmVuZGVyTGFuZXMpO1xuICB9XG4gIHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IDE7XG4gIGN1cnJlbnQgPSBjcmVhdGVXb3JrSW5Qcm9ncmVzcyh0eXBlLCBuZXh0UHJvcHMpO1xuICBjdXJyZW50LnJlZiA9IHdvcmtJblByb2dyZXNzLnJlZjtcbiAgY3VycmVudC5yZXR1cm4gPSB3b3JrSW5Qcm9ncmVzcztcbiAgcmV0dXJuICh3b3JrSW5Qcm9ncmVzcy5jaGlsZCA9IGN1cnJlbnQpO1xufVxuZnVuY3Rpb24gdXBkYXRlU2ltcGxlTWVtb0NvbXBvbmVudChcbiAgY3VycmVudCxcbiAgd29ya0luUHJvZ3Jlc3MsXG4gIENvbXBvbmVudCxcbiAgbmV4dFByb3BzLFxuICByZW5kZXJMYW5lc1xuKSB7XG4gIGlmIChudWxsICE9PSBjdXJyZW50KSB7XG4gICAgdmFyIHByZXZQcm9wcyA9IGN1cnJlbnQubWVtb2l6ZWRQcm9wcztcbiAgICBpZiAoXG4gICAgICBzaGFsbG93RXF1YWwocHJldlByb3BzLCBuZXh0UHJvcHMpICYmXG4gICAgICBjdXJyZW50LnJlZiA9PT0gd29ya0luUHJvZ3Jlc3MucmVmXG4gICAgKVxuICAgICAgaWYgKFxuICAgICAgICAoKGRpZFJlY2VpdmVVcGRhdGUgPSAhMSksXG4gICAgICAgICh3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHMgPSBuZXh0UHJvcHMgPSBwcmV2UHJvcHMpLFxuICAgICAgICBjaGVja1NjaGVkdWxlZFVwZGF0ZU9yQ29udGV4dChjdXJyZW50LCByZW5kZXJMYW5lcykpXG4gICAgICApXG4gICAgICAgIDAgIT09IChjdXJyZW50LmZsYWdzICYgMTMxMDcyKSAmJiAoZGlkUmVjZWl2ZVVwZGF0ZSA9ICEwKTtcbiAgICAgIGVsc2VcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAod29ya0luUHJvZ3Jlc3MubGFuZXMgPSBjdXJyZW50LmxhbmVzKSxcbiAgICAgICAgICBiYWlsb3V0T25BbHJlYWR5RmluaXNoZWRXb3JrKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCByZW5kZXJMYW5lcylcbiAgICAgICAgKTtcbiAgfVxuICByZXR1cm4gdXBkYXRlRnVuY3Rpb25Db21wb25lbnQoXG4gICAgY3VycmVudCxcbiAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICBDb21wb25lbnQsXG4gICAgbmV4dFByb3BzLFxuICAgIHJlbmRlckxhbmVzXG4gICk7XG59XG5mdW5jdGlvbiB1cGRhdGVPZmZzY3JlZW5Db21wb25lbnQoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIHJlbmRlckxhbmVzKSB7XG4gIHZhciBuZXh0UHJvcHMgPSB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHMsXG4gICAgbmV4dENoaWxkcmVuID0gbmV4dFByb3BzLmNoaWxkcmVuLFxuICAgIG5leHRJc0RldGFjaGVkID0gMCAhPT0gKHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZS5fcGVuZGluZ1Zpc2liaWxpdHkgJiAyKSxcbiAgICBwcmV2U3RhdGUgPSBudWxsICE9PSBjdXJyZW50ID8gY3VycmVudC5tZW1vaXplZFN0YXRlIDogbnVsbDtcbiAgbWFya1JlZihjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcyk7XG4gIGlmIChcImhpZGRlblwiID09PSBuZXh0UHJvcHMubW9kZSB8fCBuZXh0SXNEZXRhY2hlZCkge1xuICAgIGlmICgwICE9PSAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgJiAxMjgpKSB7XG4gICAgICBuZXh0UHJvcHMgPVxuICAgICAgICBudWxsICE9PSBwcmV2U3RhdGUgPyBwcmV2U3RhdGUuYmFzZUxhbmVzIHwgcmVuZGVyTGFuZXMgOiByZW5kZXJMYW5lcztcbiAgICAgIGlmIChudWxsICE9PSBjdXJyZW50KSB7XG4gICAgICAgIG5leHRDaGlsZHJlbiA9IHdvcmtJblByb2dyZXNzLmNoaWxkID0gY3VycmVudC5jaGlsZDtcbiAgICAgICAgZm9yIChuZXh0SXNEZXRhY2hlZCA9IDA7IG51bGwgIT09IG5leHRDaGlsZHJlbjsgKVxuICAgICAgICAgIChuZXh0SXNEZXRhY2hlZCA9XG4gICAgICAgICAgICBuZXh0SXNEZXRhY2hlZCB8IG5leHRDaGlsZHJlbi5sYW5lcyB8IG5leHRDaGlsZHJlbi5jaGlsZExhbmVzKSxcbiAgICAgICAgICAgIChuZXh0Q2hpbGRyZW4gPSBuZXh0Q2hpbGRyZW4uc2libGluZyk7XG4gICAgICAgIHdvcmtJblByb2dyZXNzLmNoaWxkTGFuZXMgPSBuZXh0SXNEZXRhY2hlZCAmIH5uZXh0UHJvcHM7XG4gICAgICB9IGVsc2UgKHdvcmtJblByb2dyZXNzLmNoaWxkTGFuZXMgPSAwKSwgKHdvcmtJblByb2dyZXNzLmNoaWxkID0gbnVsbCk7XG4gICAgICByZXR1cm4gZGVmZXJIaWRkZW5PZmZzY3JlZW5Db21wb25lbnQoXG4gICAgICAgIGN1cnJlbnQsXG4gICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICBuZXh0UHJvcHMsXG4gICAgICAgIHJlbmRlckxhbmVzXG4gICAgICApO1xuICAgIH1cbiAgICBpZiAoMCAhPT0gKHJlbmRlckxhbmVzICYgNTM2ODcwOTEyKSlcbiAgICAgICh3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlID0geyBiYXNlTGFuZXM6IDAsIGNhY2hlUG9vbDogbnVsbCB9KSxcbiAgICAgICAgbnVsbCAhPT0gY3VycmVudCAmJlxuICAgICAgICAgIHB1c2hUcmFuc2l0aW9uKFxuICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgICBudWxsICE9PSBwcmV2U3RhdGUgPyBwcmV2U3RhdGUuY2FjaGVQb29sIDogbnVsbFxuICAgICAgICAgICksXG4gICAgICAgIG51bGwgIT09IHByZXZTdGF0ZVxuICAgICAgICAgID8gcHVzaEhpZGRlbkNvbnRleHQod29ya0luUHJvZ3Jlc3MsIHByZXZTdGF0ZSlcbiAgICAgICAgICA6IHJldXNlSGlkZGVuQ29udGV4dE9uU3RhY2soKSxcbiAgICAgICAgcHVzaE9mZnNjcmVlblN1c3BlbnNlSGFuZGxlcih3b3JrSW5Qcm9ncmVzcyk7XG4gICAgZWxzZVxuICAgICAgcmV0dXJuIChcbiAgICAgICAgKHdvcmtJblByb2dyZXNzLmxhbmVzID0gd29ya0luUHJvZ3Jlc3MuY2hpbGRMYW5lcyA9IDUzNjg3MDkxMiksXG4gICAgICAgIGRlZmVySGlkZGVuT2Zmc2NyZWVuQ29tcG9uZW50KFxuICAgICAgICAgIGN1cnJlbnQsXG4gICAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgbnVsbCAhPT0gcHJldlN0YXRlID8gcHJldlN0YXRlLmJhc2VMYW5lcyB8IHJlbmRlckxhbmVzIDogcmVuZGVyTGFuZXMsXG4gICAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICAgKVxuICAgICAgKTtcbiAgfSBlbHNlXG4gICAgbnVsbCAhPT0gcHJldlN0YXRlXG4gICAgICA/IChwdXNoVHJhbnNpdGlvbih3b3JrSW5Qcm9ncmVzcywgcHJldlN0YXRlLmNhY2hlUG9vbCksXG4gICAgICAgIHB1c2hIaWRkZW5Db250ZXh0KHdvcmtJblByb2dyZXNzLCBwcmV2U3RhdGUpLFxuICAgICAgICByZXVzZVN1c3BlbnNlSGFuZGxlck9uU3RhY2sod29ya0luUHJvZ3Jlc3MpLFxuICAgICAgICAod29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSA9IG51bGwpKVxuICAgICAgOiAobnVsbCAhPT0gY3VycmVudCAmJiBwdXNoVHJhbnNpdGlvbih3b3JrSW5Qcm9ncmVzcywgbnVsbCksXG4gICAgICAgIHJldXNlSGlkZGVuQ29udGV4dE9uU3RhY2soKSxcbiAgICAgICAgcmV1c2VTdXNwZW5zZUhhbmRsZXJPblN0YWNrKHdvcmtJblByb2dyZXNzKSk7XG4gIHJlY29uY2lsZUNoaWxkcmVuKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCBuZXh0Q2hpbGRyZW4sIHJlbmRlckxhbmVzKTtcbiAgcmV0dXJuIHdvcmtJblByb2dyZXNzLmNoaWxkO1xufVxuZnVuY3Rpb24gZGVmZXJIaWRkZW5PZmZzY3JlZW5Db21wb25lbnQoXG4gIGN1cnJlbnQsXG4gIHdvcmtJblByb2dyZXNzLFxuICBuZXh0QmFzZUxhbmVzLFxuICByZW5kZXJMYW5lc1xuKSB7XG4gIHZhciBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgPSBwZWVrQ2FjaGVGcm9tUG9vbCgpO1xuICBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgPVxuICAgIG51bGwgPT09IEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdFxuICAgICAgPyBudWxsXG4gICAgICA6IHsgcGFyZW50OiBDYWNoZUNvbnRleHQuX2N1cnJlbnRWYWx1ZSwgcG9vbDogSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0IH07XG4gIHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUgPSB7XG4gICAgYmFzZUxhbmVzOiBuZXh0QmFzZUxhbmVzLFxuICAgIGNhY2hlUG9vbDogSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0XG4gIH07XG4gIG51bGwgIT09IGN1cnJlbnQgJiYgcHVzaFRyYW5zaXRpb24od29ya0luUHJvZ3Jlc3MsIG51bGwpO1xuICByZXVzZUhpZGRlbkNvbnRleHRPblN0YWNrKCk7XG4gIHB1c2hPZmZzY3JlZW5TdXNwZW5zZUhhbmRsZXIod29ya0luUHJvZ3Jlc3MpO1xuICBudWxsICE9PSBjdXJyZW50ICYmXG4gICAgcHJvcGFnYXRlUGFyZW50Q29udGV4dENoYW5nZXMoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIHJlbmRlckxhbmVzLCAhMCk7XG4gIHJldHVybiBudWxsO1xufVxuZnVuY3Rpb24gbWFya1JlZihjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcykge1xuICB2YXIgcmVmID0gd29ya0luUHJvZ3Jlc3MucmVmO1xuICBpZiAobnVsbCA9PT0gcmVmKVxuICAgIG51bGwgIT09IGN1cnJlbnQgJiZcbiAgICAgIG51bGwgIT09IGN1cnJlbnQucmVmICYmXG4gICAgICAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gMjA5NzY2NCk7XG4gIGVsc2Uge1xuICAgIGlmIChcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiByZWYgJiYgXCJvYmplY3RcIiAhPT0gdHlwZW9mIHJlZilcbiAgICAgIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMjg0KSk7XG4gICAgaWYgKG51bGwgPT09IGN1cnJlbnQgfHwgY3VycmVudC5yZWYgIT09IHJlZilcbiAgICAgIHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IDIwOTc2NjQ7XG4gIH1cbn1cbmZ1bmN0aW9uIHVwZGF0ZUZ1bmN0aW9uQ29tcG9uZW50KFxuICBjdXJyZW50LFxuICB3b3JrSW5Qcm9ncmVzcyxcbiAgQ29tcG9uZW50LFxuICBuZXh0UHJvcHMsXG4gIHJlbmRlckxhbmVzXG4pIHtcbiAgcHJlcGFyZVRvUmVhZENvbnRleHQod29ya0luUHJvZ3Jlc3MpO1xuICBDb21wb25lbnQgPSByZW5kZXJXaXRoSG9va3MoXG4gICAgY3VycmVudCxcbiAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICBDb21wb25lbnQsXG4gICAgbmV4dFByb3BzLFxuICAgIHZvaWQgMCxcbiAgICByZW5kZXJMYW5lc1xuICApO1xuICBuZXh0UHJvcHMgPSBjaGVja0RpZFJlbmRlcklkSG9vaygpO1xuICBpZiAobnVsbCAhPT0gY3VycmVudCAmJiAhZGlkUmVjZWl2ZVVwZGF0ZSlcbiAgICByZXR1cm4gKFxuICAgICAgYmFpbG91dEhvb2tzKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCByZW5kZXJMYW5lcyksXG4gICAgICBiYWlsb3V0T25BbHJlYWR5RmluaXNoZWRXb3JrKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCByZW5kZXJMYW5lcylcbiAgICApO1xuICBpc0h5ZHJhdGluZyAmJiBuZXh0UHJvcHMgJiYgcHVzaE1hdGVyaWFsaXplZFRyZWVJZCh3b3JrSW5Qcm9ncmVzcyk7XG4gIHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IDE7XG4gIHJlY29uY2lsZUNoaWxkcmVuKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCBDb21wb25lbnQsIHJlbmRlckxhbmVzKTtcbiAgcmV0dXJuIHdvcmtJblByb2dyZXNzLmNoaWxkO1xufVxuZnVuY3Rpb24gcmVwbGF5RnVuY3Rpb25Db21wb25lbnQoXG4gIGN1cnJlbnQsXG4gIHdvcmtJblByb2dyZXNzLFxuICBuZXh0UHJvcHMsXG4gIENvbXBvbmVudCxcbiAgc2Vjb25kQXJnLFxuICByZW5kZXJMYW5lc1xuKSB7XG4gIHByZXBhcmVUb1JlYWRDb250ZXh0KHdvcmtJblByb2dyZXNzKTtcbiAgd29ya0luUHJvZ3Jlc3MudXBkYXRlUXVldWUgPSBudWxsO1xuICBuZXh0UHJvcHMgPSByZW5kZXJXaXRoSG9va3NBZ2FpbihcbiAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICBDb21wb25lbnQsXG4gICAgbmV4dFByb3BzLFxuICAgIHNlY29uZEFyZ1xuICApO1xuICBmaW5pc2hSZW5kZXJpbmdIb29rcyhjdXJyZW50KTtcbiAgQ29tcG9uZW50ID0gY2hlY2tEaWRSZW5kZXJJZEhvb2soKTtcbiAgaWYgKG51bGwgIT09IGN1cnJlbnQgJiYgIWRpZFJlY2VpdmVVcGRhdGUpXG4gICAgcmV0dXJuIChcbiAgICAgIGJhaWxvdXRIb29rcyhjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgcmVuZGVyTGFuZXMpLFxuICAgICAgYmFpbG91dE9uQWxyZWFkeUZpbmlzaGVkV29yayhjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgcmVuZGVyTGFuZXMpXG4gICAgKTtcbiAgaXNIeWRyYXRpbmcgJiYgQ29tcG9uZW50ICYmIHB1c2hNYXRlcmlhbGl6ZWRUcmVlSWQod29ya0luUHJvZ3Jlc3MpO1xuICB3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSAxO1xuICByZWNvbmNpbGVDaGlsZHJlbihjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgbmV4dFByb3BzLCByZW5kZXJMYW5lcyk7XG4gIHJldHVybiB3b3JrSW5Qcm9ncmVzcy5jaGlsZDtcbn1cbmZ1bmN0aW9uIHVwZGF0ZUNsYXNzQ29tcG9uZW50KFxuICBjdXJyZW50LFxuICB3b3JrSW5Qcm9ncmVzcyxcbiAgQ29tcG9uZW50LFxuICBuZXh0UHJvcHMsXG4gIHJlbmRlckxhbmVzXG4pIHtcbiAgcHJlcGFyZVRvUmVhZENvbnRleHQod29ya0luUHJvZ3Jlc3MpO1xuICBpZiAobnVsbCA9PT0gd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlKSB7XG4gICAgdmFyIGNvbnRleHQgPSBlbXB0eUNvbnRleHRPYmplY3QsXG4gICAgICBjb250ZXh0VHlwZSA9IENvbXBvbmVudC5jb250ZXh0VHlwZTtcbiAgICBcIm9iamVjdFwiID09PSB0eXBlb2YgY29udGV4dFR5cGUgJiZcbiAgICAgIG51bGwgIT09IGNvbnRleHRUeXBlICYmXG4gICAgICAoY29udGV4dCA9IHJlYWRDb250ZXh0KGNvbnRleHRUeXBlKSk7XG4gICAgY29udGV4dCA9IG5ldyBDb21wb25lbnQobmV4dFByb3BzLCBjb250ZXh0KTtcbiAgICB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlID1cbiAgICAgIG51bGwgIT09IGNvbnRleHQuc3RhdGUgJiYgdm9pZCAwICE9PSBjb250ZXh0LnN0YXRlID8gY29udGV4dC5zdGF0ZSA6IG51bGw7XG4gICAgY29udGV4dC51cGRhdGVyID0gY2xhc3NDb21wb25lbnRVcGRhdGVyO1xuICAgIHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZSA9IGNvbnRleHQ7XG4gICAgY29udGV4dC5fcmVhY3RJbnRlcm5hbHMgPSB3b3JrSW5Qcm9ncmVzcztcbiAgICBjb250ZXh0ID0gd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlO1xuICAgIGNvbnRleHQucHJvcHMgPSBuZXh0UHJvcHM7XG4gICAgY29udGV4dC5zdGF0ZSA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGU7XG4gICAgY29udGV4dC5yZWZzID0ge307XG4gICAgaW5pdGlhbGl6ZVVwZGF0ZVF1ZXVlKHdvcmtJblByb2dyZXNzKTtcbiAgICBjb250ZXh0VHlwZSA9IENvbXBvbmVudC5jb250ZXh0VHlwZTtcbiAgICBjb250ZXh0LmNvbnRleHQgPVxuICAgICAgXCJvYmplY3RcIiA9PT0gdHlwZW9mIGNvbnRleHRUeXBlICYmIG51bGwgIT09IGNvbnRleHRUeXBlXG4gICAgICAgID8gcmVhZENvbnRleHQoY29udGV4dFR5cGUpXG4gICAgICAgIDogZW1wdHlDb250ZXh0T2JqZWN0O1xuICAgIGNvbnRleHQuc3RhdGUgPSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlO1xuICAgIGNvbnRleHRUeXBlID0gQ29tcG9uZW50LmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcztcbiAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBjb250ZXh0VHlwZSAmJlxuICAgICAgKGFwcGx5RGVyaXZlZFN0YXRlRnJvbVByb3BzKFxuICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgQ29tcG9uZW50LFxuICAgICAgICBjb250ZXh0VHlwZSxcbiAgICAgICAgbmV4dFByb3BzXG4gICAgICApLFxuICAgICAgKGNvbnRleHQuc3RhdGUgPSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlKSk7XG4gICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgQ29tcG9uZW50LmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyB8fFxuICAgICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgY29udGV4dC5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSB8fFxuICAgICAgKFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIGNvbnRleHQuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCAmJlxuICAgICAgICBcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiBjb250ZXh0LmNvbXBvbmVudFdpbGxNb3VudCkgfHxcbiAgICAgICgoY29udGV4dFR5cGUgPSBjb250ZXh0LnN0YXRlKSxcbiAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGNvbnRleHQuY29tcG9uZW50V2lsbE1vdW50ICYmXG4gICAgICAgIGNvbnRleHQuY29tcG9uZW50V2lsbE1vdW50KCksXG4gICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBjb250ZXh0LlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQgJiZcbiAgICAgICAgY29udGV4dC5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCksXG4gICAgICBjb250ZXh0VHlwZSAhPT0gY29udGV4dC5zdGF0ZSAmJlxuICAgICAgICBjbGFzc0NvbXBvbmVudFVwZGF0ZXIuZW5xdWV1ZVJlcGxhY2VTdGF0ZShjb250ZXh0LCBjb250ZXh0LnN0YXRlLCBudWxsKSxcbiAgICAgIHByb2Nlc3NVcGRhdGVRdWV1ZSh3b3JrSW5Qcm9ncmVzcywgbmV4dFByb3BzLCBjb250ZXh0LCByZW5kZXJMYW5lcyksXG4gICAgICBzdXNwZW5kSWZVcGRhdGVSZWFkRnJvbUVudGFuZ2xlZEFzeW5jQWN0aW9uKCksXG4gICAgICAoY29udGV4dC5zdGF0ZSA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUpKTtcbiAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBjb250ZXh0LmNvbXBvbmVudERpZE1vdW50ICYmXG4gICAgICAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gNDE5NDMwOCk7XG4gICAgbmV4dFByb3BzID0gITA7XG4gIH0gZWxzZSBpZiAobnVsbCA9PT0gY3VycmVudCkge1xuICAgIGNvbnRleHQgPSB3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGU7XG4gICAgdmFyIHVucmVzb2x2ZWRPbGRQcm9wcyA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkUHJvcHMsXG4gICAgICBvbGRQcm9wcyA9IHJlc29sdmVDbGFzc0NvbXBvbmVudFByb3BzKENvbXBvbmVudCwgdW5yZXNvbHZlZE9sZFByb3BzKTtcbiAgICBjb250ZXh0LnByb3BzID0gb2xkUHJvcHM7XG4gICAgdmFyIG9sZENvbnRleHQgPSBjb250ZXh0LmNvbnRleHQsXG4gICAgICBjb250ZXh0VHlwZSRqc2NvbXAkMCA9IENvbXBvbmVudC5jb250ZXh0VHlwZTtcbiAgICBjb250ZXh0VHlwZSA9IGVtcHR5Q29udGV4dE9iamVjdDtcbiAgICBcIm9iamVjdFwiID09PSB0eXBlb2YgY29udGV4dFR5cGUkanNjb21wJDAgJiZcbiAgICAgIG51bGwgIT09IGNvbnRleHRUeXBlJGpzY29tcCQwICYmXG4gICAgICAoY29udGV4dFR5cGUgPSByZWFkQ29udGV4dChjb250ZXh0VHlwZSRqc2NvbXAkMCkpO1xuICAgIHZhciBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgPSBDb21wb25lbnQuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzO1xuICAgIGNvbnRleHRUeXBlJGpzY29tcCQwID1cbiAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyB8fFxuICAgICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgY29udGV4dC5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZTtcbiAgICB1bnJlc29sdmVkT2xkUHJvcHMgPSB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHMgIT09IHVucmVzb2x2ZWRPbGRQcm9wcztcbiAgICBjb250ZXh0VHlwZSRqc2NvbXAkMCB8fFxuICAgICAgKFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIGNvbnRleHQuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgJiZcbiAgICAgICAgXCJmdW5jdGlvblwiICE9PSB0eXBlb2YgY29udGV4dC5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKSB8fFxuICAgICAgKCh1bnJlc29sdmVkT2xkUHJvcHMgfHwgb2xkQ29udGV4dCAhPT0gY29udGV4dFR5cGUpICYmXG4gICAgICAgIGNhbGxDb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKFxuICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgIGNvbnRleHQsXG4gICAgICAgICAgbmV4dFByb3BzLFxuICAgICAgICAgIGNvbnRleHRUeXBlXG4gICAgICAgICkpO1xuICAgIGhhc0ZvcmNlVXBkYXRlID0gITE7XG4gICAgdmFyIG9sZFN0YXRlID0gd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZTtcbiAgICBjb250ZXh0LnN0YXRlID0gb2xkU3RhdGU7XG4gICAgcHJvY2Vzc1VwZGF0ZVF1ZXVlKHdvcmtJblByb2dyZXNzLCBuZXh0UHJvcHMsIGNvbnRleHQsIHJlbmRlckxhbmVzKTtcbiAgICBzdXNwZW5kSWZVcGRhdGVSZWFkRnJvbUVudGFuZ2xlZEFzeW5jQWN0aW9uKCk7XG4gICAgb2xkQ29udGV4dCA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGU7XG4gICAgdW5yZXNvbHZlZE9sZFByb3BzIHx8IG9sZFN0YXRlICE9PSBvbGRDb250ZXh0IHx8IGhhc0ZvcmNlVXBkYXRlXG4gICAgICA/IChcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgJiZcbiAgICAgICAgICAoYXBwbHlEZXJpdmVkU3RhdGVGcm9tUHJvcHMoXG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICAgIENvbXBvbmVudCxcbiAgICAgICAgICAgIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyxcbiAgICAgICAgICAgIG5leHRQcm9wc1xuICAgICAgICAgICksXG4gICAgICAgICAgKG9sZENvbnRleHQgPSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlKSksXG4gICAgICAgIChvbGRQcm9wcyA9XG4gICAgICAgICAgaGFzRm9yY2VVcGRhdGUgfHxcbiAgICAgICAgICBjaGVja1Nob3VsZENvbXBvbmVudFVwZGF0ZShcbiAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgICAgQ29tcG9uZW50LFxuICAgICAgICAgICAgb2xkUHJvcHMsXG4gICAgICAgICAgICBuZXh0UHJvcHMsXG4gICAgICAgICAgICBvbGRTdGF0ZSxcbiAgICAgICAgICAgIG9sZENvbnRleHQsXG4gICAgICAgICAgICBjb250ZXh0VHlwZVxuICAgICAgICAgICkpXG4gICAgICAgICAgPyAoY29udGV4dFR5cGUkanNjb21wJDAgfHxcbiAgICAgICAgICAgICAgKFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIGNvbnRleHQuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCAmJlxuICAgICAgICAgICAgICAgIFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIGNvbnRleHQuY29tcG9uZW50V2lsbE1vdW50KSB8fFxuICAgICAgICAgICAgICAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgY29udGV4dC5jb21wb25lbnRXaWxsTW91bnQgJiZcbiAgICAgICAgICAgICAgICBjb250ZXh0LmNvbXBvbmVudFdpbGxNb3VudCgpLFxuICAgICAgICAgICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBjb250ZXh0LlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQgJiZcbiAgICAgICAgICAgICAgICBjb250ZXh0LlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQoKSksXG4gICAgICAgICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBjb250ZXh0LmNvbXBvbmVudERpZE1vdW50ICYmXG4gICAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSA0MTk0MzA4KSlcbiAgICAgICAgICA6IChcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBjb250ZXh0LmNvbXBvbmVudERpZE1vdW50ICYmXG4gICAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSA0MTk0MzA4KSxcbiAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFByb3BzID0gbmV4dFByb3BzKSxcbiAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlID0gb2xkQ29udGV4dCkpLFxuICAgICAgICAoY29udGV4dC5wcm9wcyA9IG5leHRQcm9wcyksXG4gICAgICAgIChjb250ZXh0LnN0YXRlID0gb2xkQ29udGV4dCksXG4gICAgICAgIChjb250ZXh0LmNvbnRleHQgPSBjb250ZXh0VHlwZSksXG4gICAgICAgIChuZXh0UHJvcHMgPSBvbGRQcm9wcykpXG4gICAgICA6IChcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBjb250ZXh0LmNvbXBvbmVudERpZE1vdW50ICYmXG4gICAgICAgICAgKHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IDQxOTQzMDgpLFxuICAgICAgICAobmV4dFByb3BzID0gITEpKTtcbiAgfSBlbHNlIHtcbiAgICBjb250ZXh0ID0gd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlO1xuICAgIGNsb25lVXBkYXRlUXVldWUoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MpO1xuICAgIGNvbnRleHRUeXBlID0gd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRQcm9wcztcbiAgICBjb250ZXh0VHlwZSRqc2NvbXAkMCA9IHJlc29sdmVDbGFzc0NvbXBvbmVudFByb3BzKENvbXBvbmVudCwgY29udGV4dFR5cGUpO1xuICAgIGNvbnRleHQucHJvcHMgPSBjb250ZXh0VHlwZSRqc2NvbXAkMDtcbiAgICBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgPSB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHM7XG4gICAgb2xkU3RhdGUgPSBjb250ZXh0LmNvbnRleHQ7XG4gICAgb2xkQ29udGV4dCA9IENvbXBvbmVudC5jb250ZXh0VHlwZTtcbiAgICBvbGRQcm9wcyA9IGVtcHR5Q29udGV4dE9iamVjdDtcbiAgICBcIm9iamVjdFwiID09PSB0eXBlb2Ygb2xkQ29udGV4dCAmJlxuICAgICAgbnVsbCAhPT0gb2xkQ29udGV4dCAmJlxuICAgICAgKG9sZFByb3BzID0gcmVhZENvbnRleHQob2xkQ29udGV4dCkpO1xuICAgIHVucmVzb2x2ZWRPbGRQcm9wcyA9IENvbXBvbmVudC5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7XG4gICAgKG9sZENvbnRleHQgPVxuICAgICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgdW5yZXNvbHZlZE9sZFByb3BzIHx8XG4gICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBjb250ZXh0LmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKSB8fFxuICAgICAgKFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIGNvbnRleHQuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgJiZcbiAgICAgICAgXCJmdW5jdGlvblwiICE9PSB0eXBlb2YgY29udGV4dC5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKSB8fFxuICAgICAgKChjb250ZXh0VHlwZSAhPT0gZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzIHx8IG9sZFN0YXRlICE9PSBvbGRQcm9wcykgJiZcbiAgICAgICAgY2FsbENvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoXG4gICAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgY29udGV4dCxcbiAgICAgICAgICBuZXh0UHJvcHMsXG4gICAgICAgICAgb2xkUHJvcHNcbiAgICAgICAgKSk7XG4gICAgaGFzRm9yY2VVcGRhdGUgPSAhMTtcbiAgICBvbGRTdGF0ZSA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGU7XG4gICAgY29udGV4dC5zdGF0ZSA9IG9sZFN0YXRlO1xuICAgIHByb2Nlc3NVcGRhdGVRdWV1ZSh3b3JrSW5Qcm9ncmVzcywgbmV4dFByb3BzLCBjb250ZXh0LCByZW5kZXJMYW5lcyk7XG4gICAgc3VzcGVuZElmVXBkYXRlUmVhZEZyb21FbnRhbmdsZWRBc3luY0FjdGlvbigpO1xuICAgIHZhciBuZXdTdGF0ZSA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGU7XG4gICAgY29udGV4dFR5cGUgIT09IGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyB8fFxuICAgIG9sZFN0YXRlICE9PSBuZXdTdGF0ZSB8fFxuICAgIGhhc0ZvcmNlVXBkYXRlIHx8XG4gICAgKG51bGwgIT09IGN1cnJlbnQgJiZcbiAgICAgIG51bGwgIT09IGN1cnJlbnQuZGVwZW5kZW5jaWVzICYmXG4gICAgICBjaGVja0lmQ29udGV4dENoYW5nZWQoY3VycmVudC5kZXBlbmRlbmNpZXMpKVxuICAgICAgPyAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgdW5yZXNvbHZlZE9sZFByb3BzICYmXG4gICAgICAgICAgKGFwcGx5RGVyaXZlZFN0YXRlRnJvbVByb3BzKFxuICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgICBDb21wb25lbnQsXG4gICAgICAgICAgICB1bnJlc29sdmVkT2xkUHJvcHMsXG4gICAgICAgICAgICBuZXh0UHJvcHNcbiAgICAgICAgICApLFxuICAgICAgICAgIChuZXdTdGF0ZSA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUpKSxcbiAgICAgICAgKGNvbnRleHRUeXBlJGpzY29tcCQwID1cbiAgICAgICAgICBoYXNGb3JjZVVwZGF0ZSB8fFxuICAgICAgICAgIGNoZWNrU2hvdWxkQ29tcG9uZW50VXBkYXRlKFxuICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgICBDb21wb25lbnQsXG4gICAgICAgICAgICBjb250ZXh0VHlwZSRqc2NvbXAkMCxcbiAgICAgICAgICAgIG5leHRQcm9wcyxcbiAgICAgICAgICAgIG9sZFN0YXRlLFxuICAgICAgICAgICAgbmV3U3RhdGUsXG4gICAgICAgICAgICBvbGRQcm9wc1xuICAgICAgICAgICkgfHxcbiAgICAgICAgICAobnVsbCAhPT0gY3VycmVudCAmJlxuICAgICAgICAgICAgbnVsbCAhPT0gY3VycmVudC5kZXBlbmRlbmNpZXMgJiZcbiAgICAgICAgICAgIGNoZWNrSWZDb250ZXh0Q2hhbmdlZChjdXJyZW50LmRlcGVuZGVuY2llcykpKVxuICAgICAgICAgID8gKG9sZENvbnRleHQgfHxcbiAgICAgICAgICAgICAgKFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIGNvbnRleHQuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUgJiZcbiAgICAgICAgICAgICAgICBcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiBjb250ZXh0LmNvbXBvbmVudFdpbGxVcGRhdGUpIHx8XG4gICAgICAgICAgICAgIChcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBjb250ZXh0LmNvbXBvbmVudFdpbGxVcGRhdGUgJiZcbiAgICAgICAgICAgICAgICBjb250ZXh0LmNvbXBvbmVudFdpbGxVcGRhdGUobmV4dFByb3BzLCBuZXdTdGF0ZSwgb2xkUHJvcHMpLFxuICAgICAgICAgICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBjb250ZXh0LlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlICYmXG4gICAgICAgICAgICAgICAgY29udGV4dC5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZShcbiAgICAgICAgICAgICAgICAgIG5leHRQcm9wcyxcbiAgICAgICAgICAgICAgICAgIG5ld1N0YXRlLFxuICAgICAgICAgICAgICAgICAgb2xkUHJvcHNcbiAgICAgICAgICAgICAgICApKSxcbiAgICAgICAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGNvbnRleHQuY29tcG9uZW50RGlkVXBkYXRlICYmXG4gICAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSA0KSxcbiAgICAgICAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGNvbnRleHQuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUgJiZcbiAgICAgICAgICAgICAgKHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IDEwMjQpKVxuICAgICAgICAgIDogKFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIGNvbnRleHQuY29tcG9uZW50RGlkVXBkYXRlIHx8XG4gICAgICAgICAgICAgIChjb250ZXh0VHlwZSA9PT0gY3VycmVudC5tZW1vaXplZFByb3BzICYmXG4gICAgICAgICAgICAgICAgb2xkU3RhdGUgPT09IGN1cnJlbnQubWVtb2l6ZWRTdGF0ZSkgfHxcbiAgICAgICAgICAgICAgKHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IDQpLFxuICAgICAgICAgICAgXCJmdW5jdGlvblwiICE9PSB0eXBlb2YgY29udGV4dC5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSB8fFxuICAgICAgICAgICAgICAoY29udGV4dFR5cGUgPT09IGN1cnJlbnQubWVtb2l6ZWRQcm9wcyAmJlxuICAgICAgICAgICAgICAgIG9sZFN0YXRlID09PSBjdXJyZW50Lm1lbW9pemVkU3RhdGUpIHx8XG4gICAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSAxMDI0KSxcbiAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFByb3BzID0gbmV4dFByb3BzKSxcbiAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlID0gbmV3U3RhdGUpKSxcbiAgICAgICAgKGNvbnRleHQucHJvcHMgPSBuZXh0UHJvcHMpLFxuICAgICAgICAoY29udGV4dC5zdGF0ZSA9IG5ld1N0YXRlKSxcbiAgICAgICAgKGNvbnRleHQuY29udGV4dCA9IG9sZFByb3BzKSxcbiAgICAgICAgKG5leHRQcm9wcyA9IGNvbnRleHRUeXBlJGpzY29tcCQwKSlcbiAgICAgIDogKFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIGNvbnRleHQuY29tcG9uZW50RGlkVXBkYXRlIHx8XG4gICAgICAgICAgKGNvbnRleHRUeXBlID09PSBjdXJyZW50Lm1lbW9pemVkUHJvcHMgJiZcbiAgICAgICAgICAgIG9sZFN0YXRlID09PSBjdXJyZW50Lm1lbW9pemVkU3RhdGUpIHx8XG4gICAgICAgICAgKHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IDQpLFxuICAgICAgICBcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiBjb250ZXh0LmdldFNuYXBzaG90QmVmb3JlVXBkYXRlIHx8XG4gICAgICAgICAgKGNvbnRleHRUeXBlID09PSBjdXJyZW50Lm1lbW9pemVkUHJvcHMgJiZcbiAgICAgICAgICAgIG9sZFN0YXRlID09PSBjdXJyZW50Lm1lbW9pemVkU3RhdGUpIHx8XG4gICAgICAgICAgKHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IDEwMjQpLFxuICAgICAgICAobmV4dFByb3BzID0gITEpKTtcbiAgfVxuICBjb250ZXh0ID0gbmV4dFByb3BzO1xuICBtYXJrUmVmKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzKTtcbiAgbmV4dFByb3BzID0gMCAhPT0gKHdvcmtJblByb2dyZXNzLmZsYWdzICYgMTI4KTtcbiAgY29udGV4dCB8fCBuZXh0UHJvcHNcbiAgICA/ICgoY29udGV4dCA9IHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZSksXG4gICAgICAoQ29tcG9uZW50ID1cbiAgICAgICAgbmV4dFByb3BzICYmIFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIENvbXBvbmVudC5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3JcbiAgICAgICAgICA/IG51bGxcbiAgICAgICAgICA6IGNvbnRleHQucmVuZGVyKCkpLFxuICAgICAgKHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IDEpLFxuICAgICAgbnVsbCAhPT0gY3VycmVudCAmJiBuZXh0UHJvcHNcbiAgICAgICAgPyAoKHdvcmtJblByb2dyZXNzLmNoaWxkID0gcmVjb25jaWxlQ2hpbGRGaWJlcnMoXG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICAgIGN1cnJlbnQuY2hpbGQsXG4gICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICAgICApKSxcbiAgICAgICAgICAod29ya0luUHJvZ3Jlc3MuY2hpbGQgPSByZWNvbmNpbGVDaGlsZEZpYmVycyhcbiAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgIENvbXBvbmVudCxcbiAgICAgICAgICAgIHJlbmRlckxhbmVzXG4gICAgICAgICAgKSkpXG4gICAgICAgIDogcmVjb25jaWxlQ2hpbGRyZW4oY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIENvbXBvbmVudCwgcmVuZGVyTGFuZXMpLFxuICAgICAgKHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUgPSBjb250ZXh0LnN0YXRlKSxcbiAgICAgIChjdXJyZW50ID0gd29ya0luUHJvZ3Jlc3MuY2hpbGQpKVxuICAgIDogKGN1cnJlbnQgPSBiYWlsb3V0T25BbHJlYWR5RmluaXNoZWRXb3JrKFxuICAgICAgICBjdXJyZW50LFxuICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICkpO1xuICByZXR1cm4gY3VycmVudDtcbn1cbmZ1bmN0aW9uIG1vdW50SG9zdFJvb3RXaXRob3V0SHlkcmF0aW5nKFxuICBjdXJyZW50LFxuICB3b3JrSW5Qcm9ncmVzcyxcbiAgbmV4dENoaWxkcmVuLFxuICByZW5kZXJMYW5lc1xuKSB7XG4gIHJlc2V0SHlkcmF0aW9uU3RhdGUoKTtcbiAgd29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gMjU2O1xuICByZWNvbmNpbGVDaGlsZHJlbihjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgbmV4dENoaWxkcmVuLCByZW5kZXJMYW5lcyk7XG4gIHJldHVybiB3b3JrSW5Qcm9ncmVzcy5jaGlsZDtcbn1cbnZhciBTVVNQRU5ERURfTUFSS0VSID0geyBkZWh5ZHJhdGVkOiBudWxsLCB0cmVlQ29udGV4dDogbnVsbCwgcmV0cnlMYW5lOiAwIH07XG5mdW5jdGlvbiBtb3VudFN1c3BlbnNlT2Zmc2NyZWVuU3RhdGUocmVuZGVyTGFuZXMpIHtcbiAgcmV0dXJuIHsgYmFzZUxhbmVzOiByZW5kZXJMYW5lcywgY2FjaGVQb29sOiBnZXRTdXNwZW5kZWRDYWNoZSgpIH07XG59XG5mdW5jdGlvbiBnZXRSZW1haW5pbmdXb3JrSW5QcmltYXJ5VHJlZShcbiAgY3VycmVudCxcbiAgcHJpbWFyeVRyZWVEaWREZWZlcixcbiAgcmVuZGVyTGFuZXNcbikge1xuICBjdXJyZW50ID0gbnVsbCAhPT0gY3VycmVudCA/IGN1cnJlbnQuY2hpbGRMYW5lcyAmIH5yZW5kZXJMYW5lcyA6IDA7XG4gIHByaW1hcnlUcmVlRGlkRGVmZXIgJiYgKGN1cnJlbnQgfD0gd29ya0luUHJvZ3Jlc3NEZWZlcnJlZExhbmUpO1xuICByZXR1cm4gY3VycmVudDtcbn1cbmZ1bmN0aW9uIHVwZGF0ZVN1c3BlbnNlQ29tcG9uZW50KGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCByZW5kZXJMYW5lcykge1xuICB2YXIgbmV4dFByb3BzID0gd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzLFxuICAgIHNob3dGYWxsYmFjayA9ICExLFxuICAgIGRpZFN1c3BlbmQgPSAwICE9PSAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgJiAxMjgpLFxuICAgIEpTQ29tcGlsZXJfdGVtcDtcbiAgKEpTQ29tcGlsZXJfdGVtcCA9IGRpZFN1c3BlbmQpIHx8XG4gICAgKEpTQ29tcGlsZXJfdGVtcCA9XG4gICAgICBudWxsICE9PSBjdXJyZW50ICYmIG51bGwgPT09IGN1cnJlbnQubWVtb2l6ZWRTdGF0ZVxuICAgICAgICA/ICExXG4gICAgICAgIDogMCAhPT0gKHN1c3BlbnNlU3RhY2tDdXJzb3IuY3VycmVudCAmIDIpKTtcbiAgSlNDb21waWxlcl90ZW1wICYmICgoc2hvd0ZhbGxiYWNrID0gITApLCAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgJj0gLTEyOSkpO1xuICBKU0NvbXBpbGVyX3RlbXAgPSAwICE9PSAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgJiAzMik7XG4gIHdvcmtJblByb2dyZXNzLmZsYWdzICY9IC0zMztcbiAgaWYgKG51bGwgPT09IGN1cnJlbnQpIHtcbiAgICBpZiAoaXNIeWRyYXRpbmcpIHtcbiAgICAgIHNob3dGYWxsYmFja1xuICAgICAgICA/IHB1c2hQcmltYXJ5VHJlZVN1c3BlbnNlSGFuZGxlcih3b3JrSW5Qcm9ncmVzcylcbiAgICAgICAgOiByZXVzZVN1c3BlbnNlSGFuZGxlck9uU3RhY2sod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgaWYgKGlzSHlkcmF0aW5nKSB7XG4gICAgICAgIHZhciBuZXh0SW5zdGFuY2UgPSBuZXh0SHlkcmF0YWJsZUluc3RhbmNlLFxuICAgICAgICAgIEpTQ29tcGlsZXJfdGVtcCRqc2NvbXAkMDtcbiAgICAgICAgaWYgKChKU0NvbXBpbGVyX3RlbXAkanNjb21wJDAgPSBuZXh0SW5zdGFuY2UpKSB7XG4gICAgICAgICAgYzoge1xuICAgICAgICAgICAgSlNDb21waWxlcl90ZW1wJGpzY29tcCQwID0gbmV4dEluc3RhbmNlO1xuICAgICAgICAgICAgZm9yIChcbiAgICAgICAgICAgICAgbmV4dEluc3RhbmNlID0gcm9vdE9yU2luZ2xldG9uQ29udGV4dDtcbiAgICAgICAgICAgICAgOCAhPT0gSlNDb21waWxlcl90ZW1wJGpzY29tcCQwLm5vZGVUeXBlO1xuXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgaWYgKCFuZXh0SW5zdGFuY2UpIHtcbiAgICAgICAgICAgICAgICBuZXh0SW5zdGFuY2UgPSBudWxsO1xuICAgICAgICAgICAgICAgIGJyZWFrIGM7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgSlNDb21waWxlcl90ZW1wJGpzY29tcCQwID0gZ2V0TmV4dEh5ZHJhdGFibGUoXG4gICAgICAgICAgICAgICAgSlNDb21waWxlcl90ZW1wJGpzY29tcCQwLm5leHRTaWJsaW5nXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIGlmIChudWxsID09PSBKU0NvbXBpbGVyX3RlbXAkanNjb21wJDApIHtcbiAgICAgICAgICAgICAgICBuZXh0SW5zdGFuY2UgPSBudWxsO1xuICAgICAgICAgICAgICAgIGJyZWFrIGM7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG5leHRJbnN0YW5jZSA9IEpTQ29tcGlsZXJfdGVtcCRqc2NvbXAkMDtcbiAgICAgICAgICB9XG4gICAgICAgICAgbnVsbCAhPT0gbmV4dEluc3RhbmNlXG4gICAgICAgICAgICA/ICgod29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSA9IHtcbiAgICAgICAgICAgICAgICBkZWh5ZHJhdGVkOiBuZXh0SW5zdGFuY2UsXG4gICAgICAgICAgICAgICAgdHJlZUNvbnRleHQ6XG4gICAgICAgICAgICAgICAgICBudWxsICE9PSB0cmVlQ29udGV4dFByb3ZpZGVyXG4gICAgICAgICAgICAgICAgICAgID8geyBpZDogdHJlZUNvbnRleHRJZCwgb3ZlcmZsb3c6IHRyZWVDb250ZXh0T3ZlcmZsb3cgfVxuICAgICAgICAgICAgICAgICAgICA6IG51bGwsXG4gICAgICAgICAgICAgICAgcmV0cnlMYW5lOiA1MzY4NzA5MTJcbiAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgIChKU0NvbXBpbGVyX3RlbXAkanNjb21wJDAgPSBjcmVhdGVGaWJlckltcGxDbGFzcyhcbiAgICAgICAgICAgICAgICAxOCxcbiAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgMFxuICAgICAgICAgICAgICApKSxcbiAgICAgICAgICAgICAgKEpTQ29tcGlsZXJfdGVtcCRqc2NvbXAkMC5zdGF0ZU5vZGUgPSBuZXh0SW5zdGFuY2UpLFxuICAgICAgICAgICAgICAoSlNDb21waWxlcl90ZW1wJGpzY29tcCQwLnJldHVybiA9IHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgICAgICAgKHdvcmtJblByb2dyZXNzLmNoaWxkID0gSlNDb21waWxlcl90ZW1wJGpzY29tcCQwKSxcbiAgICAgICAgICAgICAgKGh5ZHJhdGlvblBhcmVudEZpYmVyID0gd29ya0luUHJvZ3Jlc3MpLFxuICAgICAgICAgICAgICAobmV4dEh5ZHJhdGFibGVJbnN0YW5jZSA9IG51bGwpLFxuICAgICAgICAgICAgICAoSlNDb21waWxlcl90ZW1wJGpzY29tcCQwID0gITApKVxuICAgICAgICAgICAgOiAoSlNDb21waWxlcl90ZW1wJGpzY29tcCQwID0gITEpO1xuICAgICAgICB9XG4gICAgICAgIEpTQ29tcGlsZXJfdGVtcCRqc2NvbXAkMCB8fCB0aHJvd09uSHlkcmF0aW9uTWlzbWF0Y2god29ya0luUHJvZ3Jlc3MpO1xuICAgICAgfVxuICAgICAgbmV4dEluc3RhbmNlID0gd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZTtcbiAgICAgIGlmIChcbiAgICAgICAgbnVsbCAhPT0gbmV4dEluc3RhbmNlICYmXG4gICAgICAgICgobmV4dEluc3RhbmNlID0gbmV4dEluc3RhbmNlLmRlaHlkcmF0ZWQpLCBudWxsICE9PSBuZXh0SW5zdGFuY2UpXG4gICAgICApXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgXCIkIVwiID09PSBuZXh0SW5zdGFuY2UuZGF0YVxuICAgICAgICAgICAgPyAod29ya0luUHJvZ3Jlc3MubGFuZXMgPSAxNilcbiAgICAgICAgICAgIDogKHdvcmtJblByb2dyZXNzLmxhbmVzID0gNTM2ODcwOTEyKSxcbiAgICAgICAgICBudWxsXG4gICAgICAgICk7XG4gICAgICBwb3BTdXNwZW5zZUhhbmRsZXIod29ya0luUHJvZ3Jlc3MpO1xuICAgIH1cbiAgICBuZXh0SW5zdGFuY2UgPSBuZXh0UHJvcHMuY2hpbGRyZW47XG4gICAgbmV4dFByb3BzID0gbmV4dFByb3BzLmZhbGxiYWNrO1xuICAgIGlmIChzaG93RmFsbGJhY2spXG4gICAgICByZXR1cm4gKFxuICAgICAgICByZXVzZVN1c3BlbnNlSGFuZGxlck9uU3RhY2sod29ya0luUHJvZ3Jlc3MpLFxuICAgICAgICAoc2hvd0ZhbGxiYWNrID0gd29ya0luUHJvZ3Jlc3MubW9kZSksXG4gICAgICAgIChuZXh0SW5zdGFuY2UgPSBtb3VudFdvcmtJblByb2dyZXNzT2Zmc2NyZWVuRmliZXIoXG4gICAgICAgICAgeyBtb2RlOiBcImhpZGRlblwiLCBjaGlsZHJlbjogbmV4dEluc3RhbmNlIH0sXG4gICAgICAgICAgc2hvd0ZhbGxiYWNrXG4gICAgICAgICkpLFxuICAgICAgICAobmV4dFByb3BzID0gY3JlYXRlRmliZXJGcm9tRnJhZ21lbnQoXG4gICAgICAgICAgbmV4dFByb3BzLFxuICAgICAgICAgIHNob3dGYWxsYmFjayxcbiAgICAgICAgICByZW5kZXJMYW5lcyxcbiAgICAgICAgICBudWxsXG4gICAgICAgICkpLFxuICAgICAgICAobmV4dEluc3RhbmNlLnJldHVybiA9IHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgKG5leHRQcm9wcy5yZXR1cm4gPSB3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAgIChuZXh0SW5zdGFuY2Uuc2libGluZyA9IG5leHRQcm9wcyksXG4gICAgICAgICh3b3JrSW5Qcm9ncmVzcy5jaGlsZCA9IG5leHRJbnN0YW5jZSksXG4gICAgICAgIChzaG93RmFsbGJhY2sgPSB3b3JrSW5Qcm9ncmVzcy5jaGlsZCksXG4gICAgICAgIChzaG93RmFsbGJhY2subWVtb2l6ZWRTdGF0ZSA9IG1vdW50U3VzcGVuc2VPZmZzY3JlZW5TdGF0ZShyZW5kZXJMYW5lcykpLFxuICAgICAgICAoc2hvd0ZhbGxiYWNrLmNoaWxkTGFuZXMgPSBnZXRSZW1haW5pbmdXb3JrSW5QcmltYXJ5VHJlZShcbiAgICAgICAgICBjdXJyZW50LFxuICAgICAgICAgIEpTQ29tcGlsZXJfdGVtcCxcbiAgICAgICAgICByZW5kZXJMYW5lc1xuICAgICAgICApKSxcbiAgICAgICAgKHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUgPSBTVVNQRU5ERURfTUFSS0VSKSxcbiAgICAgICAgbmV4dFByb3BzXG4gICAgICApO1xuICAgIHB1c2hQcmltYXJ5VHJlZVN1c3BlbnNlSGFuZGxlcih3b3JrSW5Qcm9ncmVzcyk7XG4gICAgcmV0dXJuIG1vdW50U3VzcGVuc2VQcmltYXJ5Q2hpbGRyZW4od29ya0luUHJvZ3Jlc3MsIG5leHRJbnN0YW5jZSk7XG4gIH1cbiAgSlNDb21waWxlcl90ZW1wJGpzY29tcCQwID0gY3VycmVudC5tZW1vaXplZFN0YXRlO1xuICBpZiAoXG4gICAgbnVsbCAhPT0gSlNDb21waWxlcl90ZW1wJGpzY29tcCQwICYmXG4gICAgKChuZXh0SW5zdGFuY2UgPSBKU0NvbXBpbGVyX3RlbXAkanNjb21wJDAuZGVoeWRyYXRlZCksXG4gICAgbnVsbCAhPT0gbmV4dEluc3RhbmNlKVxuICApIHtcbiAgICBpZiAoZGlkU3VzcGVuZClcbiAgICAgIHdvcmtJblByb2dyZXNzLmZsYWdzICYgMjU2XG4gICAgICAgID8gKHB1c2hQcmltYXJ5VHJlZVN1c3BlbnNlSGFuZGxlcih3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAgICAgKHdvcmtJblByb2dyZXNzLmZsYWdzICY9IC0yNTcpLFxuICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcyA9IHJldHJ5U3VzcGVuc2VDb21wb25lbnRXaXRob3V0SHlkcmF0aW5nKFxuICAgICAgICAgICAgY3VycmVudCxcbiAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICAgICApKSlcbiAgICAgICAgOiBudWxsICE9PSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlXG4gICAgICAgICAgPyAocmV1c2VTdXNwZW5zZUhhbmRsZXJPblN0YWNrKHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5jaGlsZCA9IGN1cnJlbnQuY2hpbGQpLFxuICAgICAgICAgICAgKHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IDEyOCksXG4gICAgICAgICAgICAod29ya0luUHJvZ3Jlc3MgPSBudWxsKSlcbiAgICAgICAgICA6IChyZXVzZVN1c3BlbnNlSGFuZGxlck9uU3RhY2sod29ya0luUHJvZ3Jlc3MpLFxuICAgICAgICAgICAgKHNob3dGYWxsYmFjayA9IG5leHRQcm9wcy5mYWxsYmFjayksXG4gICAgICAgICAgICAobmV4dEluc3RhbmNlID0gd29ya0luUHJvZ3Jlc3MubW9kZSksXG4gICAgICAgICAgICAobmV4dFByb3BzID0gbW91bnRXb3JrSW5Qcm9ncmVzc09mZnNjcmVlbkZpYmVyKFxuICAgICAgICAgICAgICB7IG1vZGU6IFwidmlzaWJsZVwiLCBjaGlsZHJlbjogbmV4dFByb3BzLmNoaWxkcmVuIH0sXG4gICAgICAgICAgICAgIG5leHRJbnN0YW5jZVxuICAgICAgICAgICAgKSksXG4gICAgICAgICAgICAoc2hvd0ZhbGxiYWNrID0gY3JlYXRlRmliZXJGcm9tRnJhZ21lbnQoXG4gICAgICAgICAgICAgIHNob3dGYWxsYmFjayxcbiAgICAgICAgICAgICAgbmV4dEluc3RhbmNlLFxuICAgICAgICAgICAgICByZW5kZXJMYW5lcyxcbiAgICAgICAgICAgICAgbnVsbFxuICAgICAgICAgICAgKSksXG4gICAgICAgICAgICAoc2hvd0ZhbGxiYWNrLmZsYWdzIHw9IDIpLFxuICAgICAgICAgICAgKG5leHRQcm9wcy5yZXR1cm4gPSB3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAgICAgICAoc2hvd0ZhbGxiYWNrLnJldHVybiA9IHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgICAgIChuZXh0UHJvcHMuc2libGluZyA9IHNob3dGYWxsYmFjayksXG4gICAgICAgICAgICAod29ya0luUHJvZ3Jlc3MuY2hpbGQgPSBuZXh0UHJvcHMpLFxuICAgICAgICAgICAgcmVjb25jaWxlQ2hpbGRGaWJlcnMoXG4gICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgICAgICBjdXJyZW50LmNoaWxkLFxuICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICByZW5kZXJMYW5lc1xuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIChuZXh0UHJvcHMgPSB3b3JrSW5Qcm9ncmVzcy5jaGlsZCksXG4gICAgICAgICAgICAobmV4dFByb3BzLm1lbW9pemVkU3RhdGUgPVxuICAgICAgICAgICAgICBtb3VudFN1c3BlbnNlT2Zmc2NyZWVuU3RhdGUocmVuZGVyTGFuZXMpKSxcbiAgICAgICAgICAgIChuZXh0UHJvcHMuY2hpbGRMYW5lcyA9IGdldFJlbWFpbmluZ1dvcmtJblByaW1hcnlUcmVlKFxuICAgICAgICAgICAgICBjdXJyZW50LFxuICAgICAgICAgICAgICBKU0NvbXBpbGVyX3RlbXAsXG4gICAgICAgICAgICAgIHJlbmRlckxhbmVzXG4gICAgICAgICAgICApKSxcbiAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlID0gU1VTUEVOREVEX01BUktFUiksXG4gICAgICAgICAgICAod29ya0luUHJvZ3Jlc3MgPSBzaG93RmFsbGJhY2spKTtcbiAgICBlbHNlIGlmIChcbiAgICAgIChwdXNoUHJpbWFyeVRyZWVTdXNwZW5zZUhhbmRsZXIod29ya0luUHJvZ3Jlc3MpLFxuICAgICAgXCIkIVwiID09PSBuZXh0SW5zdGFuY2UuZGF0YSlcbiAgICApIHtcbiAgICAgIEpTQ29tcGlsZXJfdGVtcCA9XG4gICAgICAgIG5leHRJbnN0YW5jZS5uZXh0U2libGluZyAmJiBuZXh0SW5zdGFuY2UubmV4dFNpYmxpbmcuZGF0YXNldDtcbiAgICAgIGlmIChKU0NvbXBpbGVyX3RlbXApIHZhciBkaWdlc3QgPSBKU0NvbXBpbGVyX3RlbXAuZGdzdDtcbiAgICAgIEpTQ29tcGlsZXJfdGVtcCA9IGRpZ2VzdDtcbiAgICAgIG5leHRQcm9wcyA9IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNDE5KSk7XG4gICAgICBuZXh0UHJvcHMuc3RhY2sgPSBcIlwiO1xuICAgICAgbmV4dFByb3BzLmRpZ2VzdCA9IEpTQ29tcGlsZXJfdGVtcDtcbiAgICAgIHF1ZXVlSHlkcmF0aW9uRXJyb3IoeyB2YWx1ZTogbmV4dFByb3BzLCBzb3VyY2U6IG51bGwsIHN0YWNrOiBudWxsIH0pO1xuICAgICAgd29ya0luUHJvZ3Jlc3MgPSByZXRyeVN1c3BlbnNlQ29tcG9uZW50V2l0aG91dEh5ZHJhdGluZyhcbiAgICAgICAgY3VycmVudCxcbiAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgIHJlbmRlckxhbmVzXG4gICAgICApO1xuICAgIH0gZWxzZSBpZiAoXG4gICAgICAoZGlkUmVjZWl2ZVVwZGF0ZSB8fFxuICAgICAgICBwcm9wYWdhdGVQYXJlbnRDb250ZXh0Q2hhbmdlcyhjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgcmVuZGVyTGFuZXMsICExKSxcbiAgICAgIChKU0NvbXBpbGVyX3RlbXAgPSAwICE9PSAocmVuZGVyTGFuZXMgJiBjdXJyZW50LmNoaWxkTGFuZXMpKSxcbiAgICAgIGRpZFJlY2VpdmVVcGRhdGUgfHwgSlNDb21waWxlcl90ZW1wKVxuICAgICkge1xuICAgICAgSlNDb21waWxlcl90ZW1wID0gd29ya0luUHJvZ3Jlc3NSb290O1xuICAgICAgaWYgKG51bGwgIT09IEpTQ29tcGlsZXJfdGVtcCkge1xuICAgICAgICBuZXh0UHJvcHMgPSByZW5kZXJMYW5lcyAmIC1yZW5kZXJMYW5lcztcbiAgICAgICAgaWYgKDAgIT09IChuZXh0UHJvcHMgJiA0MikpIG5leHRQcm9wcyA9IDE7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICBzd2l0Y2ggKG5leHRQcm9wcykge1xuICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICBuZXh0UHJvcHMgPSAxO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgODpcbiAgICAgICAgICAgICAgbmV4dFByb3BzID0gNDtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDMyOlxuICAgICAgICAgICAgICBuZXh0UHJvcHMgPSAxNjtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDEyODpcbiAgICAgICAgICAgIGNhc2UgMjU2OlxuICAgICAgICAgICAgY2FzZSA1MTI6XG4gICAgICAgICAgICBjYXNlIDEwMjQ6XG4gICAgICAgICAgICBjYXNlIDIwNDg6XG4gICAgICAgICAgICBjYXNlIDQwOTY6XG4gICAgICAgICAgICBjYXNlIDgxOTI6XG4gICAgICAgICAgICBjYXNlIDE2Mzg0OlxuICAgICAgICAgICAgY2FzZSAzMjc2ODpcbiAgICAgICAgICAgIGNhc2UgNjU1MzY6XG4gICAgICAgICAgICBjYXNlIDEzMTA3MjpcbiAgICAgICAgICAgIGNhc2UgMjYyMTQ0OlxuICAgICAgICAgICAgY2FzZSA1MjQyODg6XG4gICAgICAgICAgICBjYXNlIDEwNDg1NzY6XG4gICAgICAgICAgICBjYXNlIDIwOTcxNTI6XG4gICAgICAgICAgICBjYXNlIDQxOTQzMDQ6XG4gICAgICAgICAgICBjYXNlIDgzODg2MDg6XG4gICAgICAgICAgICBjYXNlIDE2Nzc3MjE2OlxuICAgICAgICAgICAgY2FzZSAzMzU1NDQzMjpcbiAgICAgICAgICAgICAgbmV4dFByb3BzID0gNjQ7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAyNjg0MzU0NTY6XG4gICAgICAgICAgICAgIG5leHRQcm9wcyA9IDEzNDIxNzcyODtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICBuZXh0UHJvcHMgPSAwO1xuICAgICAgICAgIH1cbiAgICAgICAgbmV4dFByb3BzID1cbiAgICAgICAgICAwICE9PSAobmV4dFByb3BzICYgKEpTQ29tcGlsZXJfdGVtcC5zdXNwZW5kZWRMYW5lcyB8IHJlbmRlckxhbmVzKSlcbiAgICAgICAgICAgID8gMFxuICAgICAgICAgICAgOiBuZXh0UHJvcHM7XG4gICAgICAgIGlmICgwICE9PSBuZXh0UHJvcHMgJiYgbmV4dFByb3BzICE9PSBKU0NvbXBpbGVyX3RlbXAkanNjb21wJDAucmV0cnlMYW5lKVxuICAgICAgICAgIHRocm93IChcbiAgICAgICAgICAgICgoSlNDb21waWxlcl90ZW1wJGpzY29tcCQwLnJldHJ5TGFuZSA9IG5leHRQcm9wcyksXG4gICAgICAgICAgICBlbnF1ZXVlQ29uY3VycmVudFJlbmRlckZvckxhbmUoY3VycmVudCwgbmV4dFByb3BzKSxcbiAgICAgICAgICAgIHNjaGVkdWxlVXBkYXRlT25GaWJlcihKU0NvbXBpbGVyX3RlbXAsIGN1cnJlbnQsIG5leHRQcm9wcyksXG4gICAgICAgICAgICBTZWxlY3RpdmVIeWRyYXRpb25FeGNlcHRpb24pXG4gICAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIFwiJD9cIiA9PT0gbmV4dEluc3RhbmNlLmRhdGEgfHwgcmVuZGVyRGlkU3VzcGVuZERlbGF5SWZQb3NzaWJsZSgpO1xuICAgICAgd29ya0luUHJvZ3Jlc3MgPSByZXRyeVN1c3BlbnNlQ29tcG9uZW50V2l0aG91dEh5ZHJhdGluZyhcbiAgICAgICAgY3VycmVudCxcbiAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgIHJlbmRlckxhbmVzXG4gICAgICApO1xuICAgIH0gZWxzZVxuICAgICAgXCIkP1wiID09PSBuZXh0SW5zdGFuY2UuZGF0YVxuICAgICAgICA/ICgod29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gMTI4KSxcbiAgICAgICAgICAod29ya0luUHJvZ3Jlc3MuY2hpbGQgPSBjdXJyZW50LmNoaWxkKSxcbiAgICAgICAgICAod29ya0luUHJvZ3Jlc3MgPSByZXRyeURlaHlkcmF0ZWRTdXNwZW5zZUJvdW5kYXJ5LmJpbmQoXG4gICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgY3VycmVudFxuICAgICAgICAgICkpLFxuICAgICAgICAgIChuZXh0SW5zdGFuY2UuX3JlYWN0UmV0cnkgPSB3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAgICAgKHdvcmtJblByb2dyZXNzID0gbnVsbCkpXG4gICAgICAgIDogKChjdXJyZW50ID0gSlNDb21waWxlcl90ZW1wJGpzY29tcCQwLnRyZWVDb250ZXh0KSxcbiAgICAgICAgICAobmV4dEh5ZHJhdGFibGVJbnN0YW5jZSA9IGdldE5leHRIeWRyYXRhYmxlKFxuICAgICAgICAgICAgbmV4dEluc3RhbmNlLm5leHRTaWJsaW5nXG4gICAgICAgICAgKSksXG4gICAgICAgICAgKGh5ZHJhdGlvblBhcmVudEZpYmVyID0gd29ya0luUHJvZ3Jlc3MpLFxuICAgICAgICAgIChpc0h5ZHJhdGluZyA9ICEwKSxcbiAgICAgICAgICAoaHlkcmF0aW9uRXJyb3JzID0gbnVsbCksXG4gICAgICAgICAgKHJvb3RPclNpbmdsZXRvbkNvbnRleHQgPSAhMSksXG4gICAgICAgICAgbnVsbCAhPT0gY3VycmVudCAmJlxuICAgICAgICAgICAgKChpZFN0YWNrW2lkU3RhY2tJbmRleCsrXSA9IHRyZWVDb250ZXh0SWQpLFxuICAgICAgICAgICAgKGlkU3RhY2tbaWRTdGFja0luZGV4KytdID0gdHJlZUNvbnRleHRPdmVyZmxvdyksXG4gICAgICAgICAgICAoaWRTdGFja1tpZFN0YWNrSW5kZXgrK10gPSB0cmVlQ29udGV4dFByb3ZpZGVyKSxcbiAgICAgICAgICAgICh0cmVlQ29udGV4dElkID0gY3VycmVudC5pZCksXG4gICAgICAgICAgICAodHJlZUNvbnRleHRPdmVyZmxvdyA9IGN1cnJlbnQub3ZlcmZsb3cpLFxuICAgICAgICAgICAgKHRyZWVDb250ZXh0UHJvdmlkZXIgPSB3b3JrSW5Qcm9ncmVzcykpLFxuICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcyA9IG1vdW50U3VzcGVuc2VQcmltYXJ5Q2hpbGRyZW4oXG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICAgIG5leHRQcm9wcy5jaGlsZHJlblxuICAgICAgICAgICkpLFxuICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSA0MDk2KSk7XG4gICAgcmV0dXJuIHdvcmtJblByb2dyZXNzO1xuICB9XG4gIGlmIChzaG93RmFsbGJhY2spXG4gICAgcmV0dXJuIChcbiAgICAgIHJldXNlU3VzcGVuc2VIYW5kbGVyT25TdGFjayh3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAoc2hvd0ZhbGxiYWNrID0gbmV4dFByb3BzLmZhbGxiYWNrKSxcbiAgICAgIChuZXh0SW5zdGFuY2UgPSB3b3JrSW5Qcm9ncmVzcy5tb2RlKSxcbiAgICAgIChKU0NvbXBpbGVyX3RlbXAkanNjb21wJDAgPSBjdXJyZW50LmNoaWxkKSxcbiAgICAgIChkaWdlc3QgPSBKU0NvbXBpbGVyX3RlbXAkanNjb21wJDAuc2libGluZyksXG4gICAgICAobmV4dFByb3BzID0gY3JlYXRlV29ya0luUHJvZ3Jlc3MoSlNDb21waWxlcl90ZW1wJGpzY29tcCQwLCB7XG4gICAgICAgIG1vZGU6IFwiaGlkZGVuXCIsXG4gICAgICAgIGNoaWxkcmVuOiBuZXh0UHJvcHMuY2hpbGRyZW5cbiAgICAgIH0pKSxcbiAgICAgIChuZXh0UHJvcHMuc3VidHJlZUZsYWdzID1cbiAgICAgICAgSlNDb21waWxlcl90ZW1wJGpzY29tcCQwLnN1YnRyZWVGbGFncyAmIDMxNDU3MjgwKSxcbiAgICAgIG51bGwgIT09IGRpZ2VzdFxuICAgICAgICA/IChzaG93RmFsbGJhY2sgPSBjcmVhdGVXb3JrSW5Qcm9ncmVzcyhkaWdlc3QsIHNob3dGYWxsYmFjaykpXG4gICAgICAgIDogKChzaG93RmFsbGJhY2sgPSBjcmVhdGVGaWJlckZyb21GcmFnbWVudChcbiAgICAgICAgICAgIHNob3dGYWxsYmFjayxcbiAgICAgICAgICAgIG5leHRJbnN0YW5jZSxcbiAgICAgICAgICAgIHJlbmRlckxhbmVzLFxuICAgICAgICAgICAgbnVsbFxuICAgICAgICAgICkpLFxuICAgICAgICAgIChzaG93RmFsbGJhY2suZmxhZ3MgfD0gMikpLFxuICAgICAgKHNob3dGYWxsYmFjay5yZXR1cm4gPSB3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAobmV4dFByb3BzLnJldHVybiA9IHdvcmtJblByb2dyZXNzKSxcbiAgICAgIChuZXh0UHJvcHMuc2libGluZyA9IHNob3dGYWxsYmFjayksXG4gICAgICAod29ya0luUHJvZ3Jlc3MuY2hpbGQgPSBuZXh0UHJvcHMpLFxuICAgICAgKG5leHRQcm9wcyA9IHNob3dGYWxsYmFjayksXG4gICAgICAoc2hvd0ZhbGxiYWNrID0gd29ya0luUHJvZ3Jlc3MuY2hpbGQpLFxuICAgICAgKG5leHRJbnN0YW5jZSA9IGN1cnJlbnQuY2hpbGQubWVtb2l6ZWRTdGF0ZSksXG4gICAgICBudWxsID09PSBuZXh0SW5zdGFuY2VcbiAgICAgICAgPyAobmV4dEluc3RhbmNlID0gbW91bnRTdXNwZW5zZU9mZnNjcmVlblN0YXRlKHJlbmRlckxhbmVzKSlcbiAgICAgICAgOiAoKEpTQ29tcGlsZXJfdGVtcCRqc2NvbXAkMCA9IG5leHRJbnN0YW5jZS5jYWNoZVBvb2wpLFxuICAgICAgICAgIG51bGwgIT09IEpTQ29tcGlsZXJfdGVtcCRqc2NvbXAkMFxuICAgICAgICAgICAgPyAoKGRpZ2VzdCA9IENhY2hlQ29udGV4dC5fY3VycmVudFZhbHVlKSxcbiAgICAgICAgICAgICAgKEpTQ29tcGlsZXJfdGVtcCRqc2NvbXAkMCA9XG4gICAgICAgICAgICAgICAgSlNDb21waWxlcl90ZW1wJGpzY29tcCQwLnBhcmVudCAhPT0gZGlnZXN0XG4gICAgICAgICAgICAgICAgICA/IHsgcGFyZW50OiBkaWdlc3QsIHBvb2w6IGRpZ2VzdCB9XG4gICAgICAgICAgICAgICAgICA6IEpTQ29tcGlsZXJfdGVtcCRqc2NvbXAkMCkpXG4gICAgICAgICAgICA6IChKU0NvbXBpbGVyX3RlbXAkanNjb21wJDAgPSBnZXRTdXNwZW5kZWRDYWNoZSgpKSxcbiAgICAgICAgICAobmV4dEluc3RhbmNlID0ge1xuICAgICAgICAgICAgYmFzZUxhbmVzOiBuZXh0SW5zdGFuY2UuYmFzZUxhbmVzIHwgcmVuZGVyTGFuZXMsXG4gICAgICAgICAgICBjYWNoZVBvb2w6IEpTQ29tcGlsZXJfdGVtcCRqc2NvbXAkMFxuICAgICAgICAgIH0pKSxcbiAgICAgIChzaG93RmFsbGJhY2subWVtb2l6ZWRTdGF0ZSA9IG5leHRJbnN0YW5jZSksXG4gICAgICAoc2hvd0ZhbGxiYWNrLmNoaWxkTGFuZXMgPSBnZXRSZW1haW5pbmdXb3JrSW5QcmltYXJ5VHJlZShcbiAgICAgICAgY3VycmVudCxcbiAgICAgICAgSlNDb21waWxlcl90ZW1wLFxuICAgICAgICByZW5kZXJMYW5lc1xuICAgICAgKSksXG4gICAgICAod29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSA9IFNVU1BFTkRFRF9NQVJLRVIpLFxuICAgICAgbmV4dFByb3BzXG4gICAgKTtcbiAgcHVzaFByaW1hcnlUcmVlU3VzcGVuc2VIYW5kbGVyKHdvcmtJblByb2dyZXNzKTtcbiAgcmVuZGVyTGFuZXMgPSBjdXJyZW50LmNoaWxkO1xuICBjdXJyZW50ID0gcmVuZGVyTGFuZXMuc2libGluZztcbiAgcmVuZGVyTGFuZXMgPSBjcmVhdGVXb3JrSW5Qcm9ncmVzcyhyZW5kZXJMYW5lcywge1xuICAgIG1vZGU6IFwidmlzaWJsZVwiLFxuICAgIGNoaWxkcmVuOiBuZXh0UHJvcHMuY2hpbGRyZW5cbiAgfSk7XG4gIHJlbmRlckxhbmVzLnJldHVybiA9IHdvcmtJblByb2dyZXNzO1xuICByZW5kZXJMYW5lcy5zaWJsaW5nID0gbnVsbDtcbiAgbnVsbCAhPT0gY3VycmVudCAmJlxuICAgICgoSlNDb21waWxlcl90ZW1wID0gd29ya0luUHJvZ3Jlc3MuZGVsZXRpb25zKSxcbiAgICBudWxsID09PSBKU0NvbXBpbGVyX3RlbXBcbiAgICAgID8gKCh3b3JrSW5Qcm9ncmVzcy5kZWxldGlvbnMgPSBbY3VycmVudF0pLCAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gMTYpKVxuICAgICAgOiBKU0NvbXBpbGVyX3RlbXAucHVzaChjdXJyZW50KSk7XG4gIHdvcmtJblByb2dyZXNzLmNoaWxkID0gcmVuZGVyTGFuZXM7XG4gIHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUgPSBudWxsO1xuICByZXR1cm4gcmVuZGVyTGFuZXM7XG59XG5mdW5jdGlvbiBtb3VudFN1c3BlbnNlUHJpbWFyeUNoaWxkcmVuKHdvcmtJblByb2dyZXNzLCBwcmltYXJ5Q2hpbGRyZW4pIHtcbiAgcHJpbWFyeUNoaWxkcmVuID0gbW91bnRXb3JrSW5Qcm9ncmVzc09mZnNjcmVlbkZpYmVyKFxuICAgIHsgbW9kZTogXCJ2aXNpYmxlXCIsIGNoaWxkcmVuOiBwcmltYXJ5Q2hpbGRyZW4gfSxcbiAgICB3b3JrSW5Qcm9ncmVzcy5tb2RlXG4gICk7XG4gIHByaW1hcnlDaGlsZHJlbi5yZXR1cm4gPSB3b3JrSW5Qcm9ncmVzcztcbiAgcmV0dXJuICh3b3JrSW5Qcm9ncmVzcy5jaGlsZCA9IHByaW1hcnlDaGlsZHJlbik7XG59XG5mdW5jdGlvbiBtb3VudFdvcmtJblByb2dyZXNzT2Zmc2NyZWVuRmliZXIob2Zmc2NyZWVuUHJvcHMsIG1vZGUpIHtcbiAgcmV0dXJuIGNyZWF0ZUZpYmVyRnJvbU9mZnNjcmVlbihvZmZzY3JlZW5Qcm9wcywgbW9kZSwgMCwgbnVsbCk7XG59XG5mdW5jdGlvbiByZXRyeVN1c3BlbnNlQ29tcG9uZW50V2l0aG91dEh5ZHJhdGluZyhcbiAgY3VycmVudCxcbiAgd29ya0luUHJvZ3Jlc3MsXG4gIHJlbmRlckxhbmVzXG4pIHtcbiAgcmVjb25jaWxlQ2hpbGRGaWJlcnMod29ya0luUHJvZ3Jlc3MsIGN1cnJlbnQuY2hpbGQsIG51bGwsIHJlbmRlckxhbmVzKTtcbiAgY3VycmVudCA9IG1vdW50U3VzcGVuc2VQcmltYXJ5Q2hpbGRyZW4oXG4gICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzLmNoaWxkcmVuXG4gICk7XG4gIGN1cnJlbnQuZmxhZ3MgfD0gMjtcbiAgd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSA9IG51bGw7XG4gIHJldHVybiBjdXJyZW50O1xufVxuZnVuY3Rpb24gc2NoZWR1bGVTdXNwZW5zZVdvcmtPbkZpYmVyKGZpYmVyLCByZW5kZXJMYW5lcywgcHJvcGFnYXRpb25Sb290KSB7XG4gIGZpYmVyLmxhbmVzIHw9IHJlbmRlckxhbmVzO1xuICB2YXIgYWx0ZXJuYXRlID0gZmliZXIuYWx0ZXJuYXRlO1xuICBudWxsICE9PSBhbHRlcm5hdGUgJiYgKGFsdGVybmF0ZS5sYW5lcyB8PSByZW5kZXJMYW5lcyk7XG4gIHNjaGVkdWxlQ29udGV4dFdvcmtPblBhcmVudFBhdGgoZmliZXIucmV0dXJuLCByZW5kZXJMYW5lcywgcHJvcGFnYXRpb25Sb290KTtcbn1cbmZ1bmN0aW9uIGluaXRTdXNwZW5zZUxpc3RSZW5kZXJTdGF0ZShcbiAgd29ya0luUHJvZ3Jlc3MsXG4gIGlzQmFja3dhcmRzLFxuICB0YWlsLFxuICBsYXN0Q29udGVudFJvdyxcbiAgdGFpbE1vZGVcbikge1xuICB2YXIgcmVuZGVyU3RhdGUgPSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlO1xuICBudWxsID09PSByZW5kZXJTdGF0ZVxuICAgID8gKHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUgPSB7XG4gICAgICAgIGlzQmFja3dhcmRzOiBpc0JhY2t3YXJkcyxcbiAgICAgICAgcmVuZGVyaW5nOiBudWxsLFxuICAgICAgICByZW5kZXJpbmdTdGFydFRpbWU6IDAsXG4gICAgICAgIGxhc3Q6IGxhc3RDb250ZW50Um93LFxuICAgICAgICB0YWlsOiB0YWlsLFxuICAgICAgICB0YWlsTW9kZTogdGFpbE1vZGVcbiAgICAgIH0pXG4gICAgOiAoKHJlbmRlclN0YXRlLmlzQmFja3dhcmRzID0gaXNCYWNrd2FyZHMpLFxuICAgICAgKHJlbmRlclN0YXRlLnJlbmRlcmluZyA9IG51bGwpLFxuICAgICAgKHJlbmRlclN0YXRlLnJlbmRlcmluZ1N0YXJ0VGltZSA9IDApLFxuICAgICAgKHJlbmRlclN0YXRlLmxhc3QgPSBsYXN0Q29udGVudFJvdyksXG4gICAgICAocmVuZGVyU3RhdGUudGFpbCA9IHRhaWwpLFxuICAgICAgKHJlbmRlclN0YXRlLnRhaWxNb2RlID0gdGFpbE1vZGUpKTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZVN1c3BlbnNlTGlzdENvbXBvbmVudChjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgcmVuZGVyTGFuZXMpIHtcbiAgdmFyIG5leHRQcm9wcyA9IHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcyxcbiAgICByZXZlYWxPcmRlciA9IG5leHRQcm9wcy5yZXZlYWxPcmRlcixcbiAgICB0YWlsTW9kZSA9IG5leHRQcm9wcy50YWlsO1xuICByZWNvbmNpbGVDaGlsZHJlbihjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgbmV4dFByb3BzLmNoaWxkcmVuLCByZW5kZXJMYW5lcyk7XG4gIG5leHRQcm9wcyA9IHN1c3BlbnNlU3RhY2tDdXJzb3IuY3VycmVudDtcbiAgaWYgKDAgIT09IChuZXh0UHJvcHMgJiAyKSlcbiAgICAobmV4dFByb3BzID0gKG5leHRQcm9wcyAmIDEpIHwgMiksICh3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSAxMjgpO1xuICBlbHNlIHtcbiAgICBpZiAobnVsbCAhPT0gY3VycmVudCAmJiAwICE9PSAoY3VycmVudC5mbGFncyAmIDEyOCkpXG4gICAgICBhOiBmb3IgKGN1cnJlbnQgPSB3b3JrSW5Qcm9ncmVzcy5jaGlsZDsgbnVsbCAhPT0gY3VycmVudDsgKSB7XG4gICAgICAgIGlmICgxMyA9PT0gY3VycmVudC50YWcpXG4gICAgICAgICAgbnVsbCAhPT0gY3VycmVudC5tZW1vaXplZFN0YXRlICYmXG4gICAgICAgICAgICBzY2hlZHVsZVN1c3BlbnNlV29ya09uRmliZXIoY3VycmVudCwgcmVuZGVyTGFuZXMsIHdvcmtJblByb2dyZXNzKTtcbiAgICAgICAgZWxzZSBpZiAoMTkgPT09IGN1cnJlbnQudGFnKVxuICAgICAgICAgIHNjaGVkdWxlU3VzcGVuc2VXb3JrT25GaWJlcihjdXJyZW50LCByZW5kZXJMYW5lcywgd29ya0luUHJvZ3Jlc3MpO1xuICAgICAgICBlbHNlIGlmIChudWxsICE9PSBjdXJyZW50LmNoaWxkKSB7XG4gICAgICAgICAgY3VycmVudC5jaGlsZC5yZXR1cm4gPSBjdXJyZW50O1xuICAgICAgICAgIGN1cnJlbnQgPSBjdXJyZW50LmNoaWxkO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjdXJyZW50ID09PSB3b3JrSW5Qcm9ncmVzcykgYnJlYWsgYTtcbiAgICAgICAgZm9yICg7IG51bGwgPT09IGN1cnJlbnQuc2libGluZzsgKSB7XG4gICAgICAgICAgaWYgKG51bGwgPT09IGN1cnJlbnQucmV0dXJuIHx8IGN1cnJlbnQucmV0dXJuID09PSB3b3JrSW5Qcm9ncmVzcylcbiAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgY3VycmVudCA9IGN1cnJlbnQucmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGN1cnJlbnQuc2libGluZy5yZXR1cm4gPSBjdXJyZW50LnJldHVybjtcbiAgICAgICAgY3VycmVudCA9IGN1cnJlbnQuc2libGluZztcbiAgICAgIH1cbiAgICBuZXh0UHJvcHMgJj0gMTtcbiAgfVxuICBwdXNoKHN1c3BlbnNlU3RhY2tDdXJzb3IsIG5leHRQcm9wcyk7XG4gIHN3aXRjaCAocmV2ZWFsT3JkZXIpIHtcbiAgICBjYXNlIFwiZm9yd2FyZHNcIjpcbiAgICAgIHJlbmRlckxhbmVzID0gd29ya0luUHJvZ3Jlc3MuY2hpbGQ7XG4gICAgICBmb3IgKHJldmVhbE9yZGVyID0gbnVsbDsgbnVsbCAhPT0gcmVuZGVyTGFuZXM7IClcbiAgICAgICAgKGN1cnJlbnQgPSByZW5kZXJMYW5lcy5hbHRlcm5hdGUpLFxuICAgICAgICAgIG51bGwgIT09IGN1cnJlbnQgJiZcbiAgICAgICAgICAgIG51bGwgPT09IGZpbmRGaXJzdFN1c3BlbmRlZChjdXJyZW50KSAmJlxuICAgICAgICAgICAgKHJldmVhbE9yZGVyID0gcmVuZGVyTGFuZXMpLFxuICAgICAgICAgIChyZW5kZXJMYW5lcyA9IHJlbmRlckxhbmVzLnNpYmxpbmcpO1xuICAgICAgcmVuZGVyTGFuZXMgPSByZXZlYWxPcmRlcjtcbiAgICAgIG51bGwgPT09IHJlbmRlckxhbmVzXG4gICAgICAgID8gKChyZXZlYWxPcmRlciA9IHdvcmtJblByb2dyZXNzLmNoaWxkKSwgKHdvcmtJblByb2dyZXNzLmNoaWxkID0gbnVsbCkpXG4gICAgICAgIDogKChyZXZlYWxPcmRlciA9IHJlbmRlckxhbmVzLnNpYmxpbmcpLCAocmVuZGVyTGFuZXMuc2libGluZyA9IG51bGwpKTtcbiAgICAgIGluaXRTdXNwZW5zZUxpc3RSZW5kZXJTdGF0ZShcbiAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICExLFxuICAgICAgICByZXZlYWxPcmRlcixcbiAgICAgICAgcmVuZGVyTGFuZXMsXG4gICAgICAgIHRhaWxNb2RlXG4gICAgICApO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcImJhY2t3YXJkc1wiOlxuICAgICAgcmVuZGVyTGFuZXMgPSBudWxsO1xuICAgICAgcmV2ZWFsT3JkZXIgPSB3b3JrSW5Qcm9ncmVzcy5jaGlsZDtcbiAgICAgIGZvciAod29ya0luUHJvZ3Jlc3MuY2hpbGQgPSBudWxsOyBudWxsICE9PSByZXZlYWxPcmRlcjsgKSB7XG4gICAgICAgIGN1cnJlbnQgPSByZXZlYWxPcmRlci5hbHRlcm5hdGU7XG4gICAgICAgIGlmIChudWxsICE9PSBjdXJyZW50ICYmIG51bGwgPT09IGZpbmRGaXJzdFN1c3BlbmRlZChjdXJyZW50KSkge1xuICAgICAgICAgIHdvcmtJblByb2dyZXNzLmNoaWxkID0gcmV2ZWFsT3JkZXI7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY3VycmVudCA9IHJldmVhbE9yZGVyLnNpYmxpbmc7XG4gICAgICAgIHJldmVhbE9yZGVyLnNpYmxpbmcgPSByZW5kZXJMYW5lcztcbiAgICAgICAgcmVuZGVyTGFuZXMgPSByZXZlYWxPcmRlcjtcbiAgICAgICAgcmV2ZWFsT3JkZXIgPSBjdXJyZW50O1xuICAgICAgfVxuICAgICAgaW5pdFN1c3BlbnNlTGlzdFJlbmRlclN0YXRlKFxuICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgITAsXG4gICAgICAgIHJlbmRlckxhbmVzLFxuICAgICAgICBudWxsLFxuICAgICAgICB0YWlsTW9kZVxuICAgICAgKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJ0b2dldGhlclwiOlxuICAgICAgaW5pdFN1c3BlbnNlTGlzdFJlbmRlclN0YXRlKHdvcmtJblByb2dyZXNzLCAhMSwgbnVsbCwgbnVsbCwgdm9pZCAwKTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlID0gbnVsbDtcbiAgfVxuICByZXR1cm4gd29ya0luUHJvZ3Jlc3MuY2hpbGQ7XG59XG5mdW5jdGlvbiBiYWlsb3V0T25BbHJlYWR5RmluaXNoZWRXb3JrKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCByZW5kZXJMYW5lcykge1xuICBudWxsICE9PSBjdXJyZW50ICYmICh3b3JrSW5Qcm9ncmVzcy5kZXBlbmRlbmNpZXMgPSBjdXJyZW50LmRlcGVuZGVuY2llcyk7XG4gIHdvcmtJblByb2dyZXNzUm9vdFNraXBwZWRMYW5lcyB8PSB3b3JrSW5Qcm9ncmVzcy5sYW5lcztcbiAgaWYgKDAgPT09IChyZW5kZXJMYW5lcyAmIHdvcmtJblByb2dyZXNzLmNoaWxkTGFuZXMpKVxuICAgIGlmIChudWxsICE9PSBjdXJyZW50KSB7XG4gICAgICBpZiAoXG4gICAgICAgIChwcm9wYWdhdGVQYXJlbnRDb250ZXh0Q2hhbmdlcyhcbiAgICAgICAgICBjdXJyZW50LFxuICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgIHJlbmRlckxhbmVzLFxuICAgICAgICAgICExXG4gICAgICAgICksXG4gICAgICAgIDAgPT09IChyZW5kZXJMYW5lcyAmIHdvcmtJblByb2dyZXNzLmNoaWxkTGFuZXMpKVxuICAgICAgKVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9IGVsc2UgcmV0dXJuIG51bGw7XG4gIGlmIChudWxsICE9PSBjdXJyZW50ICYmIHdvcmtJblByb2dyZXNzLmNoaWxkICE9PSBjdXJyZW50LmNoaWxkKVxuICAgIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTUzKSk7XG4gIGlmIChudWxsICE9PSB3b3JrSW5Qcm9ncmVzcy5jaGlsZCkge1xuICAgIGN1cnJlbnQgPSB3b3JrSW5Qcm9ncmVzcy5jaGlsZDtcbiAgICByZW5kZXJMYW5lcyA9IGNyZWF0ZVdvcmtJblByb2dyZXNzKGN1cnJlbnQsIGN1cnJlbnQucGVuZGluZ1Byb3BzKTtcbiAgICB3b3JrSW5Qcm9ncmVzcy5jaGlsZCA9IHJlbmRlckxhbmVzO1xuICAgIGZvciAocmVuZGVyTGFuZXMucmV0dXJuID0gd29ya0luUHJvZ3Jlc3M7IG51bGwgIT09IGN1cnJlbnQuc2libGluZzsgKVxuICAgICAgKGN1cnJlbnQgPSBjdXJyZW50LnNpYmxpbmcpLFxuICAgICAgICAocmVuZGVyTGFuZXMgPSByZW5kZXJMYW5lcy5zaWJsaW5nID1cbiAgICAgICAgICBjcmVhdGVXb3JrSW5Qcm9ncmVzcyhjdXJyZW50LCBjdXJyZW50LnBlbmRpbmdQcm9wcykpLFxuICAgICAgICAocmVuZGVyTGFuZXMucmV0dXJuID0gd29ya0luUHJvZ3Jlc3MpO1xuICAgIHJlbmRlckxhbmVzLnNpYmxpbmcgPSBudWxsO1xuICB9XG4gIHJldHVybiB3b3JrSW5Qcm9ncmVzcy5jaGlsZDtcbn1cbmZ1bmN0aW9uIGNoZWNrU2NoZWR1bGVkVXBkYXRlT3JDb250ZXh0KGN1cnJlbnQsIHJlbmRlckxhbmVzKSB7XG4gIGlmICgwICE9PSAoY3VycmVudC5sYW5lcyAmIHJlbmRlckxhbmVzKSkgcmV0dXJuICEwO1xuICBjdXJyZW50ID0gY3VycmVudC5kZXBlbmRlbmNpZXM7XG4gIHJldHVybiBudWxsICE9PSBjdXJyZW50ICYmIGNoZWNrSWZDb250ZXh0Q2hhbmdlZChjdXJyZW50KSA/ICEwIDogITE7XG59XG5mdW5jdGlvbiBhdHRlbXB0RWFybHlCYWlsb3V0SWZOb1NjaGVkdWxlZFVwZGF0ZShcbiAgY3VycmVudCxcbiAgd29ya0luUHJvZ3Jlc3MsXG4gIHJlbmRlckxhbmVzXG4pIHtcbiAgc3dpdGNoICh3b3JrSW5Qcm9ncmVzcy50YWcpIHtcbiAgICBjYXNlIDM6XG4gICAgICBwdXNoSG9zdENvbnRhaW5lcih3b3JrSW5Qcm9ncmVzcywgd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pO1xuICAgICAgcHVzaFByb3ZpZGVyKHdvcmtJblByb2dyZXNzLCBDYWNoZUNvbnRleHQsIGN1cnJlbnQubWVtb2l6ZWRTdGF0ZS5jYWNoZSk7XG4gICAgICByZXNldEh5ZHJhdGlvblN0YXRlKCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDI3OlxuICAgIGNhc2UgNTpcbiAgICAgIHB1c2hIb3N0Q29udGV4dCh3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDQ6XG4gICAgICBwdXNoSG9zdENvbnRhaW5lcih3b3JrSW5Qcm9ncmVzcywgd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxMDpcbiAgICAgIHB1c2hQcm92aWRlcihcbiAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgIHdvcmtJblByb2dyZXNzLnR5cGUsXG4gICAgICAgIHdvcmtJblByb2dyZXNzLm1lbW9pemVkUHJvcHMudmFsdWVcbiAgICAgICk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDEzOlxuICAgICAgdmFyIHN0YXRlID0gd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZTtcbiAgICAgIGlmIChudWxsICE9PSBzdGF0ZSkge1xuICAgICAgICBpZiAobnVsbCAhPT0gc3RhdGUuZGVoeWRyYXRlZClcbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgcHVzaFByaW1hcnlUcmVlU3VzcGVuc2VIYW5kbGVyKHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSAxMjgpLFxuICAgICAgICAgICAgbnVsbFxuICAgICAgICAgICk7XG4gICAgICAgIGlmICgwICE9PSAocmVuZGVyTGFuZXMgJiB3b3JrSW5Qcm9ncmVzcy5jaGlsZC5jaGlsZExhbmVzKSlcbiAgICAgICAgICByZXR1cm4gdXBkYXRlU3VzcGVuc2VDb21wb25lbnQoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIHJlbmRlckxhbmVzKTtcbiAgICAgICAgcHVzaFByaW1hcnlUcmVlU3VzcGVuc2VIYW5kbGVyKHdvcmtJblByb2dyZXNzKTtcbiAgICAgICAgY3VycmVudCA9IGJhaWxvdXRPbkFscmVhZHlGaW5pc2hlZFdvcmsoXG4gICAgICAgICAgY3VycmVudCxcbiAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICByZW5kZXJMYW5lc1xuICAgICAgICApO1xuICAgICAgICByZXR1cm4gbnVsbCAhPT0gY3VycmVudCA/IGN1cnJlbnQuc2libGluZyA6IG51bGw7XG4gICAgICB9XG4gICAgICBwdXNoUHJpbWFyeVRyZWVTdXNwZW5zZUhhbmRsZXIod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxOTpcbiAgICAgIHZhciBkaWRTdXNwZW5kQmVmb3JlID0gMCAhPT0gKGN1cnJlbnQuZmxhZ3MgJiAxMjgpO1xuICAgICAgc3RhdGUgPSAwICE9PSAocmVuZGVyTGFuZXMgJiB3b3JrSW5Qcm9ncmVzcy5jaGlsZExhbmVzKTtcbiAgICAgIHN0YXRlIHx8XG4gICAgICAgIChwcm9wYWdhdGVQYXJlbnRDb250ZXh0Q2hhbmdlcyhcbiAgICAgICAgICBjdXJyZW50LFxuICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgIHJlbmRlckxhbmVzLFxuICAgICAgICAgICExXG4gICAgICAgICksXG4gICAgICAgIChzdGF0ZSA9IDAgIT09IChyZW5kZXJMYW5lcyAmIHdvcmtJblByb2dyZXNzLmNoaWxkTGFuZXMpKSk7XG4gICAgICBpZiAoZGlkU3VzcGVuZEJlZm9yZSkge1xuICAgICAgICBpZiAoc3RhdGUpXG4gICAgICAgICAgcmV0dXJuIHVwZGF0ZVN1c3BlbnNlTGlzdENvbXBvbmVudChcbiAgICAgICAgICAgIGN1cnJlbnQsXG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICAgIHJlbmRlckxhbmVzXG4gICAgICAgICAgKTtcbiAgICAgICAgd29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gMTI4O1xuICAgICAgfVxuICAgICAgZGlkU3VzcGVuZEJlZm9yZSA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGU7XG4gICAgICBudWxsICE9PSBkaWRTdXNwZW5kQmVmb3JlICYmXG4gICAgICAgICgoZGlkU3VzcGVuZEJlZm9yZS5yZW5kZXJpbmcgPSBudWxsKSxcbiAgICAgICAgKGRpZFN1c3BlbmRCZWZvcmUudGFpbCA9IG51bGwpLFxuICAgICAgICAoZGlkU3VzcGVuZEJlZm9yZS5sYXN0RWZmZWN0ID0gbnVsbCkpO1xuICAgICAgcHVzaChzdXNwZW5zZVN0YWNrQ3Vyc29yLCBzdXNwZW5zZVN0YWNrQ3Vyc29yLmN1cnJlbnQpO1xuICAgICAgaWYgKHN0YXRlKSBicmVhaztcbiAgICAgIGVsc2UgcmV0dXJuIG51bGw7XG4gICAgY2FzZSAyMjpcbiAgICBjYXNlIDIzOlxuICAgICAgcmV0dXJuIChcbiAgICAgICAgKHdvcmtJblByb2dyZXNzLmxhbmVzID0gMCksXG4gICAgICAgIHVwZGF0ZU9mZnNjcmVlbkNvbXBvbmVudChjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgcmVuZGVyTGFuZXMpXG4gICAgICApO1xuICAgIGNhc2UgMjQ6XG4gICAgICBwdXNoUHJvdmlkZXIod29ya0luUHJvZ3Jlc3MsIENhY2hlQ29udGV4dCwgY3VycmVudC5tZW1vaXplZFN0YXRlLmNhY2hlKTtcbiAgfVxuICByZXR1cm4gYmFpbG91dE9uQWxyZWFkeUZpbmlzaGVkV29yayhjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgcmVuZGVyTGFuZXMpO1xufVxuZnVuY3Rpb24gYmVnaW5Xb3JrKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCByZW5kZXJMYW5lcykge1xuICBpZiAobnVsbCAhPT0gY3VycmVudClcbiAgICBpZiAoY3VycmVudC5tZW1vaXplZFByb3BzICE9PSB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHMpXG4gICAgICBkaWRSZWNlaXZlVXBkYXRlID0gITA7XG4gICAgZWxzZSB7XG4gICAgICBpZiAoXG4gICAgICAgICFjaGVja1NjaGVkdWxlZFVwZGF0ZU9yQ29udGV4dChjdXJyZW50LCByZW5kZXJMYW5lcykgJiZcbiAgICAgICAgMCA9PT0gKHdvcmtJblByb2dyZXNzLmZsYWdzICYgMTI4KVxuICAgICAgKVxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIChkaWRSZWNlaXZlVXBkYXRlID0gITEpLFxuICAgICAgICAgIGF0dGVtcHRFYXJseUJhaWxvdXRJZk5vU2NoZWR1bGVkVXBkYXRlKFxuICAgICAgICAgICAgY3VycmVudCxcbiAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICAgICApXG4gICAgICAgICk7XG4gICAgICBkaWRSZWNlaXZlVXBkYXRlID0gMCAhPT0gKGN1cnJlbnQuZmxhZ3MgJiAxMzEwNzIpID8gITAgOiAhMTtcbiAgICB9XG4gIGVsc2VcbiAgICAoZGlkUmVjZWl2ZVVwZGF0ZSA9ICExKSxcbiAgICAgIGlzSHlkcmF0aW5nICYmXG4gICAgICAgIDAgIT09ICh3b3JrSW5Qcm9ncmVzcy5mbGFncyAmIDEwNDg1NzYpICYmXG4gICAgICAgIHB1c2hUcmVlSWQod29ya0luUHJvZ3Jlc3MsIHRyZWVGb3JrQ291bnQsIHdvcmtJblByb2dyZXNzLmluZGV4KTtcbiAgd29ya0luUHJvZ3Jlc3MubGFuZXMgPSAwO1xuICBzd2l0Y2ggKHdvcmtJblByb2dyZXNzLnRhZykge1xuICAgIGNhc2UgMTY6XG4gICAgICBhOiB7XG4gICAgICAgIGN1cnJlbnQgPSB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHM7XG4gICAgICAgIHZhciBsYXp5Q29tcG9uZW50ID0gd29ya0luUHJvZ3Jlc3MuZWxlbWVudFR5cGUsXG4gICAgICAgICAgaW5pdCA9IGxhenlDb21wb25lbnQuX2luaXQ7XG4gICAgICAgIGxhenlDb21wb25lbnQgPSBpbml0KGxhenlDb21wb25lbnQuX3BheWxvYWQpO1xuICAgICAgICB3b3JrSW5Qcm9ncmVzcy50eXBlID0gbGF6eUNvbXBvbmVudDtcbiAgICAgICAgaWYgKFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGxhenlDb21wb25lbnQpXG4gICAgICAgICAgc2hvdWxkQ29uc3RydWN0KGxhenlDb21wb25lbnQpXG4gICAgICAgICAgICA/ICgoY3VycmVudCA9IHJlc29sdmVDbGFzc0NvbXBvbmVudFByb3BzKGxhenlDb21wb25lbnQsIGN1cnJlbnQpKSxcbiAgICAgICAgICAgICAgKHdvcmtJblByb2dyZXNzLnRhZyA9IDEpLFxuICAgICAgICAgICAgICAod29ya0luUHJvZ3Jlc3MgPSB1cGRhdGVDbGFzc0NvbXBvbmVudChcbiAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgICAgICAgIGxhenlDb21wb25lbnQsXG4gICAgICAgICAgICAgICAgY3VycmVudCxcbiAgICAgICAgICAgICAgICByZW5kZXJMYW5lc1xuICAgICAgICAgICAgICApKSlcbiAgICAgICAgICAgIDogKCh3b3JrSW5Qcm9ncmVzcy50YWcgPSAwKSxcbiAgICAgICAgICAgICAgKHdvcmtJblByb2dyZXNzID0gdXBkYXRlRnVuY3Rpb25Db21wb25lbnQoXG4gICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICAgICAgICBsYXp5Q29tcG9uZW50LFxuICAgICAgICAgICAgICAgIGN1cnJlbnQsXG4gICAgICAgICAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICAgICAgICAgKSkpO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBpZiAodm9pZCAwICE9PSBsYXp5Q29tcG9uZW50ICYmIG51bGwgIT09IGxhenlDb21wb25lbnQpXG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICgoaW5pdCA9IGxhenlDb21wb25lbnQuJCR0eXBlb2YpLCBpbml0ID09PSBSRUFDVF9GT1JXQVJEX1JFRl9UWVBFKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLnRhZyA9IDExO1xuICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyA9IHVwZGF0ZUZvcndhcmRSZWYoXG4gICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICAgICAgICBsYXp5Q29tcG9uZW50LFxuICAgICAgICAgICAgICAgIGN1cnJlbnQsXG4gICAgICAgICAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaW5pdCA9PT0gUkVBQ1RfTUVNT19UWVBFKSB7XG4gICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLnRhZyA9IDE0O1xuICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyA9IHVwZGF0ZU1lbW9Db21wb25lbnQoXG4gICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICAgICAgICBsYXp5Q29tcG9uZW50LFxuICAgICAgICAgICAgICAgIGN1cnJlbnQsXG4gICAgICAgICAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyA9XG4gICAgICAgICAgICBnZXRDb21wb25lbnROYW1lRnJvbVR5cGUobGF6eUNvbXBvbmVudCkgfHwgbGF6eUNvbXBvbmVudDtcbiAgICAgICAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDMwNiwgd29ya0luUHJvZ3Jlc3MsIFwiXCIpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHdvcmtJblByb2dyZXNzO1xuICAgIGNhc2UgMDpcbiAgICAgIHJldHVybiB1cGRhdGVGdW5jdGlvbkNvbXBvbmVudChcbiAgICAgICAgY3VycmVudCxcbiAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgIHdvcmtJblByb2dyZXNzLnR5cGUsXG4gICAgICAgIHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcyxcbiAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICk7XG4gICAgY2FzZSAxOlxuICAgICAgcmV0dXJuIChcbiAgICAgICAgKGxhenlDb21wb25lbnQgPSB3b3JrSW5Qcm9ncmVzcy50eXBlKSxcbiAgICAgICAgKGluaXQgPSByZXNvbHZlQ2xhc3NDb21wb25lbnRQcm9wcyhcbiAgICAgICAgICBsYXp5Q29tcG9uZW50LFxuICAgICAgICAgIHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wc1xuICAgICAgICApKSxcbiAgICAgICAgdXBkYXRlQ2xhc3NDb21wb25lbnQoXG4gICAgICAgICAgY3VycmVudCxcbiAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICBsYXp5Q29tcG9uZW50LFxuICAgICAgICAgIGluaXQsXG4gICAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICBjYXNlIDM6XG4gICAgICBhOiB7XG4gICAgICAgIHB1c2hIb3N0Q29udGFpbmVyKFxuICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgIHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZS5jb250YWluZXJJbmZvXG4gICAgICAgICk7XG4gICAgICAgIGlmIChudWxsID09PSBjdXJyZW50KSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDM4NykpO1xuICAgICAgICB2YXIgbmV4dFByb3BzID0gd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzO1xuICAgICAgICBpbml0ID0gd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZTtcbiAgICAgICAgbGF6eUNvbXBvbmVudCA9IGluaXQuZWxlbWVudDtcbiAgICAgICAgY2xvbmVVcGRhdGVRdWV1ZShjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICAgIHByb2Nlc3NVcGRhdGVRdWV1ZSh3b3JrSW5Qcm9ncmVzcywgbmV4dFByb3BzLCBudWxsLCByZW5kZXJMYW5lcyk7XG4gICAgICAgIHZhciBuZXh0U3RhdGUgPSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlO1xuICAgICAgICBuZXh0UHJvcHMgPSBuZXh0U3RhdGUuY2FjaGU7XG4gICAgICAgIHB1c2hQcm92aWRlcih3b3JrSW5Qcm9ncmVzcywgQ2FjaGVDb250ZXh0LCBuZXh0UHJvcHMpO1xuICAgICAgICBuZXh0UHJvcHMgIT09IGluaXQuY2FjaGUgJiZcbiAgICAgICAgICBwcm9wYWdhdGVDb250ZXh0Q2hhbmdlcyhcbiAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgICAgW0NhY2hlQ29udGV4dF0sXG4gICAgICAgICAgICByZW5kZXJMYW5lcyxcbiAgICAgICAgICAgICEwXG4gICAgICAgICAgKTtcbiAgICAgICAgc3VzcGVuZElmVXBkYXRlUmVhZEZyb21FbnRhbmdsZWRBc3luY0FjdGlvbigpO1xuICAgICAgICBuZXh0UHJvcHMgPSBuZXh0U3RhdGUuZWxlbWVudDtcbiAgICAgICAgaWYgKGluaXQuaXNEZWh5ZHJhdGVkKVxuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICgoaW5pdCA9IHtcbiAgICAgICAgICAgICAgZWxlbWVudDogbmV4dFByb3BzLFxuICAgICAgICAgICAgICBpc0RlaHlkcmF0ZWQ6ICExLFxuICAgICAgICAgICAgICBjYWNoZTogbmV4dFN0YXRlLmNhY2hlXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy51cGRhdGVRdWV1ZS5iYXNlU3RhdGUgPSBpbml0KSxcbiAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlID0gaW5pdCksXG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcy5mbGFncyAmIDI1NilcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIHdvcmtJblByb2dyZXNzID0gbW91bnRIb3N0Um9vdFdpdGhvdXRIeWRyYXRpbmcoXG4gICAgICAgICAgICAgIGN1cnJlbnQsXG4gICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgICAgICBuZXh0UHJvcHMsXG4gICAgICAgICAgICAgIHJlbmRlckxhbmVzXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICB9IGVsc2UgaWYgKG5leHRQcm9wcyAhPT0gbGF6eUNvbXBvbmVudCkge1xuICAgICAgICAgICAgbGF6eUNvbXBvbmVudCA9IGNyZWF0ZUNhcHR1cmVkVmFsdWVBdEZpYmVyKFxuICAgICAgICAgICAgICBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDQyNCkpLFxuICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzc1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHF1ZXVlSHlkcmF0aW9uRXJyb3IobGF6eUNvbXBvbmVudCk7XG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyA9IG1vdW50SG9zdFJvb3RXaXRob3V0SHlkcmF0aW5nKFxuICAgICAgICAgICAgICBjdXJyZW50LFxuICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICAgICAgbmV4dFByb3BzLFxuICAgICAgICAgICAgICByZW5kZXJMYW5lc1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICBmb3IgKFxuICAgICAgICAgICAgICBuZXh0SHlkcmF0YWJsZUluc3RhbmNlID0gZ2V0TmV4dEh5ZHJhdGFibGUoXG4gICAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlLmNvbnRhaW5lckluZm8uZmlyc3RDaGlsZFxuICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgIGh5ZHJhdGlvblBhcmVudEZpYmVyID0gd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgICAgICAgaXNIeWRyYXRpbmcgPSAhMCxcbiAgICAgICAgICAgICAgICBoeWRyYXRpb25FcnJvcnMgPSBudWxsLFxuICAgICAgICAgICAgICAgIHJvb3RPclNpbmdsZXRvbkNvbnRleHQgPSAhMCxcbiAgICAgICAgICAgICAgICByZW5kZXJMYW5lcyA9IG1vdW50Q2hpbGRGaWJlcnMoXG4gICAgICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgICBuZXh0UHJvcHMsXG4gICAgICAgICAgICAgICAgICByZW5kZXJMYW5lc1xuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MuY2hpbGQgPSByZW5kZXJMYW5lcztcbiAgICAgICAgICAgICAgcmVuZGVyTGFuZXM7XG5cbiAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgKHJlbmRlckxhbmVzLmZsYWdzID0gKHJlbmRlckxhbmVzLmZsYWdzICYgLTMpIHwgNDA5NiksXG4gICAgICAgICAgICAgICAgKHJlbmRlckxhbmVzID0gcmVuZGVyTGFuZXMuc2libGluZyk7XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHJlc2V0SHlkcmF0aW9uU3RhdGUoKTtcbiAgICAgICAgICBpZiAobmV4dFByb3BzID09PSBsYXp5Q29tcG9uZW50KSB7XG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyA9IGJhaWxvdXRPbkFscmVhZHlGaW5pc2hlZFdvcmsoXG4gICAgICAgICAgICAgIGN1cnJlbnQsXG4gICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgICAgICByZW5kZXJMYW5lc1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlY29uY2lsZUNoaWxkcmVuKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCBuZXh0UHJvcHMsIHJlbmRlckxhbmVzKTtcbiAgICAgICAgfVxuICAgICAgICB3b3JrSW5Qcm9ncmVzcyA9IHdvcmtJblByb2dyZXNzLmNoaWxkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHdvcmtJblByb2dyZXNzO1xuICAgIGNhc2UgMjY6XG4gICAgICByZXR1cm4gKFxuICAgICAgICBtYXJrUmVmKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgbnVsbCA9PT0gY3VycmVudFxuICAgICAgICAgID8gKHJlbmRlckxhbmVzID0gZ2V0UmVzb3VyY2UoXG4gICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLnR5cGUsXG4gICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcyxcbiAgICAgICAgICAgICAgbnVsbFxuICAgICAgICAgICAgKSlcbiAgICAgICAgICAgID8gKHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUgPSByZW5kZXJMYW5lcylcbiAgICAgICAgICAgIDogaXNIeWRyYXRpbmcgfHxcbiAgICAgICAgICAgICAgKChyZW5kZXJMYW5lcyA9IHdvcmtJblByb2dyZXNzLnR5cGUpLFxuICAgICAgICAgICAgICAoY3VycmVudCA9IHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcyksXG4gICAgICAgICAgICAgIChsYXp5Q29tcG9uZW50ID0gZ2V0T3duZXJEb2N1bWVudEZyb21Sb290Q29udGFpbmVyKFxuICAgICAgICAgICAgICAgIHJvb3RJbnN0YW5jZVN0YWNrQ3Vyc29yLmN1cnJlbnRcbiAgICAgICAgICAgICAgKS5jcmVhdGVFbGVtZW50KHJlbmRlckxhbmVzKSksXG4gICAgICAgICAgICAgIChsYXp5Q29tcG9uZW50W2ludGVybmFsSW5zdGFuY2VLZXldID0gd29ya0luUHJvZ3Jlc3MpLFxuICAgICAgICAgICAgICAobGF6eUNvbXBvbmVudFtpbnRlcm5hbFByb3BzS2V5XSA9IGN1cnJlbnQpLFxuICAgICAgICAgICAgICBzZXRJbml0aWFsUHJvcGVydGllcyhsYXp5Q29tcG9uZW50LCByZW5kZXJMYW5lcywgY3VycmVudCksXG4gICAgICAgICAgICAgIG1hcmtOb2RlQXNIb2lzdGFibGUobGF6eUNvbXBvbmVudCksXG4gICAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGUgPSBsYXp5Q29tcG9uZW50KSlcbiAgICAgICAgICA6ICh3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlID0gZ2V0UmVzb3VyY2UoXG4gICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLnR5cGUsXG4gICAgICAgICAgICAgIGN1cnJlbnQubWVtb2l6ZWRQcm9wcyxcbiAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzLFxuICAgICAgICAgICAgICBjdXJyZW50Lm1lbW9pemVkU3RhdGVcbiAgICAgICAgICAgICkpLFxuICAgICAgICBudWxsXG4gICAgICApO1xuICAgIGNhc2UgMjc6XG4gICAgICByZXR1cm4gKFxuICAgICAgICBwdXNoSG9zdENvbnRleHQod29ya0luUHJvZ3Jlc3MpLFxuICAgICAgICBudWxsID09PSBjdXJyZW50ICYmXG4gICAgICAgICAgaXNIeWRyYXRpbmcgJiZcbiAgICAgICAgICAoKGxhenlDb21wb25lbnQgPSB3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGUgPVxuICAgICAgICAgICAgcmVzb2x2ZVNpbmdsZXRvbkluc3RhbmNlKFxuICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcy50eXBlLFxuICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHMsXG4gICAgICAgICAgICAgIHJvb3RJbnN0YW5jZVN0YWNrQ3Vyc29yLmN1cnJlbnRcbiAgICAgICAgICAgICkpLFxuICAgICAgICAgIChoeWRyYXRpb25QYXJlbnRGaWJlciA9IHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgICAocm9vdE9yU2luZ2xldG9uQ29udGV4dCA9ICEwKSxcbiAgICAgICAgICAobmV4dEh5ZHJhdGFibGVJbnN0YW5jZSA9IGdldE5leHRIeWRyYXRhYmxlKFxuICAgICAgICAgICAgbGF6eUNvbXBvbmVudC5maXJzdENoaWxkXG4gICAgICAgICAgKSkpLFxuICAgICAgICAobGF6eUNvbXBvbmVudCA9IHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcy5jaGlsZHJlbiksXG4gICAgICAgIG51bGwgIT09IGN1cnJlbnQgfHwgaXNIeWRyYXRpbmdcbiAgICAgICAgICA/IHJlY29uY2lsZUNoaWxkcmVuKFxuICAgICAgICAgICAgICBjdXJyZW50LFxuICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICAgICAgbGF6eUNvbXBvbmVudCxcbiAgICAgICAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICAgICAgIClcbiAgICAgICAgICA6ICh3b3JrSW5Qcm9ncmVzcy5jaGlsZCA9IHJlY29uY2lsZUNoaWxkRmliZXJzKFxuICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgbGF6eUNvbXBvbmVudCxcbiAgICAgICAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICAgICAgICkpLFxuICAgICAgICBtYXJrUmVmKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgd29ya0luUHJvZ3Jlc3MuY2hpbGRcbiAgICAgICk7XG4gICAgY2FzZSA1OlxuICAgICAgaWYgKG51bGwgPT09IGN1cnJlbnQgJiYgaXNIeWRyYXRpbmcpIHtcbiAgICAgICAgaWYgKChpbml0ID0gbGF6eUNvbXBvbmVudCA9IG5leHRIeWRyYXRhYmxlSW5zdGFuY2UpKVxuICAgICAgICAgIChsYXp5Q29tcG9uZW50ID0gY2FuSHlkcmF0ZUluc3RhbmNlKFxuICAgICAgICAgICAgbGF6eUNvbXBvbmVudCxcbiAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLnR5cGUsXG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHMsXG4gICAgICAgICAgICByb290T3JTaW5nbGV0b25Db250ZXh0XG4gICAgICAgICAgKSksXG4gICAgICAgICAgICBudWxsICE9PSBsYXp5Q29tcG9uZW50XG4gICAgICAgICAgICAgID8gKCh3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGUgPSBsYXp5Q29tcG9uZW50KSxcbiAgICAgICAgICAgICAgICAoaHlkcmF0aW9uUGFyZW50RmliZXIgPSB3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAgICAgICAgICAgKG5leHRIeWRyYXRhYmxlSW5zdGFuY2UgPSBnZXROZXh0SHlkcmF0YWJsZShcbiAgICAgICAgICAgICAgICAgIGxhenlDb21wb25lbnQuZmlyc3RDaGlsZFxuICAgICAgICAgICAgICAgICkpLFxuICAgICAgICAgICAgICAgIChyb290T3JTaW5nbGV0b25Db250ZXh0ID0gITEpLFxuICAgICAgICAgICAgICAgIChpbml0ID0gITApKVxuICAgICAgICAgICAgICA6IChpbml0ID0gITEpO1xuICAgICAgICBpbml0IHx8IHRocm93T25IeWRyYXRpb25NaXNtYXRjaCh3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICB9XG4gICAgICBwdXNoSG9zdENvbnRleHQod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgaW5pdCA9IHdvcmtJblByb2dyZXNzLnR5cGU7XG4gICAgICBuZXh0UHJvcHMgPSB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHM7XG4gICAgICBuZXh0U3RhdGUgPSBudWxsICE9PSBjdXJyZW50ID8gY3VycmVudC5tZW1vaXplZFByb3BzIDogbnVsbDtcbiAgICAgIGxhenlDb21wb25lbnQgPSBuZXh0UHJvcHMuY2hpbGRyZW47XG4gICAgICBzaG91bGRTZXRUZXh0Q29udGVudChpbml0LCBuZXh0UHJvcHMpXG4gICAgICAgID8gKGxhenlDb21wb25lbnQgPSBudWxsKVxuICAgICAgICA6IG51bGwgIT09IG5leHRTdGF0ZSAmJlxuICAgICAgICAgIHNob3VsZFNldFRleHRDb250ZW50KGluaXQsIG5leHRTdGF0ZSkgJiZcbiAgICAgICAgICAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gMzIpO1xuICAgICAgbnVsbCAhPT0gd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSAmJlxuICAgICAgICAoKGluaXQgPSByZW5kZXJXaXRoSG9va3MoXG4gICAgICAgICAgY3VycmVudCxcbiAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICBUcmFuc2l0aW9uQXdhcmVIb3N0Q29tcG9uZW50LFxuICAgICAgICAgIG51bGwsXG4gICAgICAgICAgbnVsbCxcbiAgICAgICAgICByZW5kZXJMYW5lc1xuICAgICAgICApKSxcbiAgICAgICAgKEhvc3RUcmFuc2l0aW9uQ29udGV4dC5fY3VycmVudFZhbHVlID0gaW5pdCkpO1xuICAgICAgbWFya1JlZihjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICByZWNvbmNpbGVDaGlsZHJlbihjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgbGF6eUNvbXBvbmVudCwgcmVuZGVyTGFuZXMpO1xuICAgICAgcmV0dXJuIHdvcmtJblByb2dyZXNzLmNoaWxkO1xuICAgIGNhc2UgNjpcbiAgICAgIGlmIChudWxsID09PSBjdXJyZW50ICYmIGlzSHlkcmF0aW5nKSB7XG4gICAgICAgIGlmICgoY3VycmVudCA9IHJlbmRlckxhbmVzID0gbmV4dEh5ZHJhdGFibGVJbnN0YW5jZSkpXG4gICAgICAgICAgKHJlbmRlckxhbmVzID0gY2FuSHlkcmF0ZVRleHRJbnN0YW5jZShcbiAgICAgICAgICAgIHJlbmRlckxhbmVzLFxuICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzLFxuICAgICAgICAgICAgcm9vdE9yU2luZ2xldG9uQ29udGV4dFxuICAgICAgICAgICkpLFxuICAgICAgICAgICAgbnVsbCAhPT0gcmVuZGVyTGFuZXNcbiAgICAgICAgICAgICAgPyAoKHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZSA9IHJlbmRlckxhbmVzKSxcbiAgICAgICAgICAgICAgICAoaHlkcmF0aW9uUGFyZW50RmliZXIgPSB3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAgICAgICAgICAgKG5leHRIeWRyYXRhYmxlSW5zdGFuY2UgPSBudWxsKSxcbiAgICAgICAgICAgICAgICAoY3VycmVudCA9ICEwKSlcbiAgICAgICAgICAgICAgOiAoY3VycmVudCA9ICExKTtcbiAgICAgICAgY3VycmVudCB8fCB0aHJvd09uSHlkcmF0aW9uTWlzbWF0Y2god29ya0luUHJvZ3Jlc3MpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgY2FzZSAxMzpcbiAgICAgIHJldHVybiB1cGRhdGVTdXNwZW5zZUNvbXBvbmVudChjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgcmVuZGVyTGFuZXMpO1xuICAgIGNhc2UgNDpcbiAgICAgIHJldHVybiAoXG4gICAgICAgIHB1c2hIb3N0Q29udGFpbmVyKFxuICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgIHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZS5jb250YWluZXJJbmZvXG4gICAgICAgICksXG4gICAgICAgIChsYXp5Q29tcG9uZW50ID0gd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzKSxcbiAgICAgICAgbnVsbCA9PT0gY3VycmVudFxuICAgICAgICAgID8gKHdvcmtJblByb2dyZXNzLmNoaWxkID0gcmVjb25jaWxlQ2hpbGRGaWJlcnMoXG4gICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICBsYXp5Q29tcG9uZW50LFxuICAgICAgICAgICAgICByZW5kZXJMYW5lc1xuICAgICAgICAgICAgKSlcbiAgICAgICAgICA6IHJlY29uY2lsZUNoaWxkcmVuKFxuICAgICAgICAgICAgICBjdXJyZW50LFxuICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICAgICAgbGF6eUNvbXBvbmVudCxcbiAgICAgICAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICAgICAgICksXG4gICAgICAgIHdvcmtJblByb2dyZXNzLmNoaWxkXG4gICAgICApO1xuICAgIGNhc2UgMTE6XG4gICAgICByZXR1cm4gdXBkYXRlRm9yd2FyZFJlZihcbiAgICAgICAgY3VycmVudCxcbiAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgIHdvcmtJblByb2dyZXNzLnR5cGUsXG4gICAgICAgIHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcyxcbiAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICk7XG4gICAgY2FzZSA3OlxuICAgICAgcmV0dXJuIChcbiAgICAgICAgcmVjb25jaWxlQ2hpbGRyZW4oXG4gICAgICAgICAgY3VycmVudCxcbiAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHMsXG4gICAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICAgKSxcbiAgICAgICAgd29ya0luUHJvZ3Jlc3MuY2hpbGRcbiAgICAgICk7XG4gICAgY2FzZSA4OlxuICAgICAgcmV0dXJuIChcbiAgICAgICAgcmVjb25jaWxlQ2hpbGRyZW4oXG4gICAgICAgICAgY3VycmVudCxcbiAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHMuY2hpbGRyZW4sXG4gICAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICAgKSxcbiAgICAgICAgd29ya0luUHJvZ3Jlc3MuY2hpbGRcbiAgICAgICk7XG4gICAgY2FzZSAxMjpcbiAgICAgIHJldHVybiAoXG4gICAgICAgIHJlY29uY2lsZUNoaWxkcmVuKFxuICAgICAgICAgIGN1cnJlbnQsXG4gICAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzLmNoaWxkcmVuLFxuICAgICAgICAgIHJlbmRlckxhbmVzXG4gICAgICAgICksXG4gICAgICAgIHdvcmtJblByb2dyZXNzLmNoaWxkXG4gICAgICApO1xuICAgIGNhc2UgMTA6XG4gICAgICByZXR1cm4gKFxuICAgICAgICAobGF6eUNvbXBvbmVudCA9IHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcyksXG4gICAgICAgIHB1c2hQcm92aWRlcih3b3JrSW5Qcm9ncmVzcywgd29ya0luUHJvZ3Jlc3MudHlwZSwgbGF6eUNvbXBvbmVudC52YWx1ZSksXG4gICAgICAgIHJlY29uY2lsZUNoaWxkcmVuKFxuICAgICAgICAgIGN1cnJlbnQsXG4gICAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgbGF6eUNvbXBvbmVudC5jaGlsZHJlbixcbiAgICAgICAgICByZW5kZXJMYW5lc1xuICAgICAgICApLFxuICAgICAgICB3b3JrSW5Qcm9ncmVzcy5jaGlsZFxuICAgICAgKTtcbiAgICBjYXNlIDk6XG4gICAgICByZXR1cm4gKFxuICAgICAgICAoaW5pdCA9IHdvcmtJblByb2dyZXNzLnR5cGUuX2NvbnRleHQpLFxuICAgICAgICAobGF6eUNvbXBvbmVudCA9IHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcy5jaGlsZHJlbiksXG4gICAgICAgIHByZXBhcmVUb1JlYWRDb250ZXh0KHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgKGluaXQgPSByZWFkQ29udGV4dChpbml0KSksXG4gICAgICAgIChsYXp5Q29tcG9uZW50ID0gbGF6eUNvbXBvbmVudChpbml0KSksXG4gICAgICAgICh3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSAxKSxcbiAgICAgICAgcmVjb25jaWxlQ2hpbGRyZW4oY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIGxhenlDb21wb25lbnQsIHJlbmRlckxhbmVzKSxcbiAgICAgICAgd29ya0luUHJvZ3Jlc3MuY2hpbGRcbiAgICAgICk7XG4gICAgY2FzZSAxNDpcbiAgICAgIHJldHVybiB1cGRhdGVNZW1vQ29tcG9uZW50KFxuICAgICAgICBjdXJyZW50LFxuICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgd29ya0luUHJvZ3Jlc3MudHlwZSxcbiAgICAgICAgd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzLFxuICAgICAgICByZW5kZXJMYW5lc1xuICAgICAgKTtcbiAgICBjYXNlIDE1OlxuICAgICAgcmV0dXJuIHVwZGF0ZVNpbXBsZU1lbW9Db21wb25lbnQoXG4gICAgICAgIGN1cnJlbnQsXG4gICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICB3b3JrSW5Qcm9ncmVzcy50eXBlLFxuICAgICAgICB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHMsXG4gICAgICAgIHJlbmRlckxhbmVzXG4gICAgICApO1xuICAgIGNhc2UgMTk6XG4gICAgICByZXR1cm4gdXBkYXRlU3VzcGVuc2VMaXN0Q29tcG9uZW50KGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCByZW5kZXJMYW5lcyk7XG4gICAgY2FzZSAyMjpcbiAgICAgIHJldHVybiB1cGRhdGVPZmZzY3JlZW5Db21wb25lbnQoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIHJlbmRlckxhbmVzKTtcbiAgICBjYXNlIDI0OlxuICAgICAgcmV0dXJuIChcbiAgICAgICAgcHJlcGFyZVRvUmVhZENvbnRleHQod29ya0luUHJvZ3Jlc3MpLFxuICAgICAgICAobGF6eUNvbXBvbmVudCA9IHJlYWRDb250ZXh0KENhY2hlQ29udGV4dCkpLFxuICAgICAgICBudWxsID09PSBjdXJyZW50XG4gICAgICAgICAgPyAoKGluaXQgPSBwZWVrQ2FjaGVGcm9tUG9vbCgpKSxcbiAgICAgICAgICAgIG51bGwgPT09IGluaXQgJiZcbiAgICAgICAgICAgICAgKChpbml0ID0gd29ya0luUHJvZ3Jlc3NSb290KSxcbiAgICAgICAgICAgICAgKG5leHRQcm9wcyA9IGNyZWF0ZUNhY2hlKCkpLFxuICAgICAgICAgICAgICAoaW5pdC5wb29sZWRDYWNoZSA9IG5leHRQcm9wcyksXG4gICAgICAgICAgICAgIG5leHRQcm9wcy5yZWZDb3VudCsrLFxuICAgICAgICAgICAgICBudWxsICE9PSBuZXh0UHJvcHMgJiYgKGluaXQucG9vbGVkQ2FjaGVMYW5lcyB8PSByZW5kZXJMYW5lcyksXG4gICAgICAgICAgICAgIChpbml0ID0gbmV4dFByb3BzKSksXG4gICAgICAgICAgICAod29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSA9IHtcbiAgICAgICAgICAgICAgcGFyZW50OiBsYXp5Q29tcG9uZW50LFxuICAgICAgICAgICAgICBjYWNoZTogaW5pdFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBpbml0aWFsaXplVXBkYXRlUXVldWUod29ya0luUHJvZ3Jlc3MpLFxuICAgICAgICAgICAgcHVzaFByb3ZpZGVyKHdvcmtJblByb2dyZXNzLCBDYWNoZUNvbnRleHQsIGluaXQpKVxuICAgICAgICAgIDogKDAgIT09IChjdXJyZW50LmxhbmVzICYgcmVuZGVyTGFuZXMpICYmXG4gICAgICAgICAgICAgIChjbG9uZVVwZGF0ZVF1ZXVlKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgICAgICAgcHJvY2Vzc1VwZGF0ZVF1ZXVlKHdvcmtJblByb2dyZXNzLCBudWxsLCBudWxsLCByZW5kZXJMYW5lcyksXG4gICAgICAgICAgICAgIHN1c3BlbmRJZlVwZGF0ZVJlYWRGcm9tRW50YW5nbGVkQXN5bmNBY3Rpb24oKSksXG4gICAgICAgICAgICAoaW5pdCA9IGN1cnJlbnQubWVtb2l6ZWRTdGF0ZSksXG4gICAgICAgICAgICAobmV4dFByb3BzID0gd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSksXG4gICAgICAgICAgICBpbml0LnBhcmVudCAhPT0gbGF6eUNvbXBvbmVudFxuICAgICAgICAgICAgICA/ICgoaW5pdCA9IHsgcGFyZW50OiBsYXp5Q29tcG9uZW50LCBjYWNoZTogbGF6eUNvbXBvbmVudCB9KSxcbiAgICAgICAgICAgICAgICAod29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSA9IGluaXQpLFxuICAgICAgICAgICAgICAgIDAgPT09IHdvcmtJblByb2dyZXNzLmxhbmVzICYmXG4gICAgICAgICAgICAgICAgICAod29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSA9XG4gICAgICAgICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLnVwZGF0ZVF1ZXVlLmJhc2VTdGF0ZSA9XG4gICAgICAgICAgICAgICAgICAgICAgaW5pdCksXG4gICAgICAgICAgICAgICAgcHVzaFByb3ZpZGVyKHdvcmtJblByb2dyZXNzLCBDYWNoZUNvbnRleHQsIGxhenlDb21wb25lbnQpKVxuICAgICAgICAgICAgICA6ICgobGF6eUNvbXBvbmVudCA9IG5leHRQcm9wcy5jYWNoZSksXG4gICAgICAgICAgICAgICAgcHVzaFByb3ZpZGVyKHdvcmtJblByb2dyZXNzLCBDYWNoZUNvbnRleHQsIGxhenlDb21wb25lbnQpLFxuICAgICAgICAgICAgICAgIGxhenlDb21wb25lbnQgIT09IGluaXQuY2FjaGUgJiZcbiAgICAgICAgICAgICAgICAgIHByb3BhZ2F0ZUNvbnRleHRDaGFuZ2VzKFxuICAgICAgICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICAgICAgICAgICAgW0NhY2hlQ29udGV4dF0sXG4gICAgICAgICAgICAgICAgICAgIHJlbmRlckxhbmVzLFxuICAgICAgICAgICAgICAgICAgICAhMFxuICAgICAgICAgICAgICAgICAgKSkpLFxuICAgICAgICByZWNvbmNpbGVDaGlsZHJlbihcbiAgICAgICAgICBjdXJyZW50LFxuICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgIHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixcbiAgICAgICAgICByZW5kZXJMYW5lc1xuICAgICAgICApLFxuICAgICAgICB3b3JrSW5Qcm9ncmVzcy5jaGlsZFxuICAgICAgKTtcbiAgICBjYXNlIDI5OlxuICAgICAgdGhyb3cgd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzO1xuICB9XG4gIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTU2LCB3b3JrSW5Qcm9ncmVzcy50YWcpKTtcbn1cbnZhciB2YWx1ZUN1cnNvciA9IGNyZWF0ZUN1cnNvcihudWxsKSxcbiAgY3VycmVudGx5UmVuZGVyaW5nRmliZXIgPSBudWxsLFxuICBsYXN0Q29udGV4dERlcGVuZGVuY3kgPSBudWxsO1xuZnVuY3Rpb24gcHVzaFByb3ZpZGVyKHByb3ZpZGVyRmliZXIsIGNvbnRleHQsIG5leHRWYWx1ZSkge1xuICBwdXNoKHZhbHVlQ3Vyc29yLCBjb250ZXh0Ll9jdXJyZW50VmFsdWUpO1xuICBjb250ZXh0Ll9jdXJyZW50VmFsdWUgPSBuZXh0VmFsdWU7XG59XG5mdW5jdGlvbiBwb3BQcm92aWRlcihjb250ZXh0KSB7XG4gIGNvbnRleHQuX2N1cnJlbnRWYWx1ZSA9IHZhbHVlQ3Vyc29yLmN1cnJlbnQ7XG4gIHBvcCh2YWx1ZUN1cnNvcik7XG59XG5mdW5jdGlvbiBzY2hlZHVsZUNvbnRleHRXb3JrT25QYXJlbnRQYXRoKHBhcmVudCwgcmVuZGVyTGFuZXMsIHByb3BhZ2F0aW9uUm9vdCkge1xuICBmb3IgKDsgbnVsbCAhPT0gcGFyZW50OyApIHtcbiAgICB2YXIgYWx0ZXJuYXRlID0gcGFyZW50LmFsdGVybmF0ZTtcbiAgICAocGFyZW50LmNoaWxkTGFuZXMgJiByZW5kZXJMYW5lcykgIT09IHJlbmRlckxhbmVzXG4gICAgICA/ICgocGFyZW50LmNoaWxkTGFuZXMgfD0gcmVuZGVyTGFuZXMpLFxuICAgICAgICBudWxsICE9PSBhbHRlcm5hdGUgJiYgKGFsdGVybmF0ZS5jaGlsZExhbmVzIHw9IHJlbmRlckxhbmVzKSlcbiAgICAgIDogbnVsbCAhPT0gYWx0ZXJuYXRlICYmXG4gICAgICAgIChhbHRlcm5hdGUuY2hpbGRMYW5lcyAmIHJlbmRlckxhbmVzKSAhPT0gcmVuZGVyTGFuZXMgJiZcbiAgICAgICAgKGFsdGVybmF0ZS5jaGlsZExhbmVzIHw9IHJlbmRlckxhbmVzKTtcbiAgICBpZiAocGFyZW50ID09PSBwcm9wYWdhdGlvblJvb3QpIGJyZWFrO1xuICAgIHBhcmVudCA9IHBhcmVudC5yZXR1cm47XG4gIH1cbn1cbmZ1bmN0aW9uIHByb3BhZ2F0ZUNvbnRleHRDaGFuZ2VzKFxuICB3b3JrSW5Qcm9ncmVzcyxcbiAgY29udGV4dHMsXG4gIHJlbmRlckxhbmVzLFxuICBmb3JjZVByb3BhZ2F0ZUVudGlyZVRyZWVcbikge1xuICB2YXIgZmliZXIgPSB3b3JrSW5Qcm9ncmVzcy5jaGlsZDtcbiAgbnVsbCAhPT0gZmliZXIgJiYgKGZpYmVyLnJldHVybiA9IHdvcmtJblByb2dyZXNzKTtcbiAgZm9yICg7IG51bGwgIT09IGZpYmVyOyApIHtcbiAgICB2YXIgbGlzdCA9IGZpYmVyLmRlcGVuZGVuY2llcztcbiAgICBpZiAobnVsbCAhPT0gbGlzdCkge1xuICAgICAgdmFyIG5leHRGaWJlciA9IGZpYmVyLmNoaWxkO1xuICAgICAgbGlzdCA9IGxpc3QuZmlyc3RDb250ZXh0O1xuICAgICAgYTogZm9yICg7IG51bGwgIT09IGxpc3Q7ICkge1xuICAgICAgICB2YXIgZGVwZW5kZW5jeSA9IGxpc3Q7XG4gICAgICAgIGxpc3QgPSBmaWJlcjtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb250ZXh0cy5sZW5ndGg7IGkrKylcbiAgICAgICAgICBpZiAoZGVwZW5kZW5jeS5jb250ZXh0ID09PSBjb250ZXh0c1tpXSkge1xuICAgICAgICAgICAgbGlzdC5sYW5lcyB8PSByZW5kZXJMYW5lcztcbiAgICAgICAgICAgIGRlcGVuZGVuY3kgPSBsaXN0LmFsdGVybmF0ZTtcbiAgICAgICAgICAgIG51bGwgIT09IGRlcGVuZGVuY3kgJiYgKGRlcGVuZGVuY3kubGFuZXMgfD0gcmVuZGVyTGFuZXMpO1xuICAgICAgICAgICAgc2NoZWR1bGVDb250ZXh0V29ya09uUGFyZW50UGF0aChcbiAgICAgICAgICAgICAgbGlzdC5yZXR1cm4sXG4gICAgICAgICAgICAgIHJlbmRlckxhbmVzLFxuICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzc1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGZvcmNlUHJvcGFnYXRlRW50aXJlVHJlZSB8fCAobmV4dEZpYmVyID0gbnVsbCk7XG4gICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgIH1cbiAgICAgICAgbGlzdCA9IGRlcGVuZGVuY3kubmV4dDtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKDE4ID09PSBmaWJlci50YWcpIHtcbiAgICAgIG5leHRGaWJlciA9IGZpYmVyLnJldHVybjtcbiAgICAgIGlmIChudWxsID09PSBuZXh0RmliZXIpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMzQxKSk7XG4gICAgICBuZXh0RmliZXIubGFuZXMgfD0gcmVuZGVyTGFuZXM7XG4gICAgICBsaXN0ID0gbmV4dEZpYmVyLmFsdGVybmF0ZTtcbiAgICAgIG51bGwgIT09IGxpc3QgJiYgKGxpc3QubGFuZXMgfD0gcmVuZGVyTGFuZXMpO1xuICAgICAgc2NoZWR1bGVDb250ZXh0V29ya09uUGFyZW50UGF0aChuZXh0RmliZXIsIHJlbmRlckxhbmVzLCB3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICBuZXh0RmliZXIgPSBudWxsO1xuICAgIH0gZWxzZSBuZXh0RmliZXIgPSBmaWJlci5jaGlsZDtcbiAgICBpZiAobnVsbCAhPT0gbmV4dEZpYmVyKSBuZXh0RmliZXIucmV0dXJuID0gZmliZXI7XG4gICAgZWxzZVxuICAgICAgZm9yIChuZXh0RmliZXIgPSBmaWJlcjsgbnVsbCAhPT0gbmV4dEZpYmVyOyApIHtcbiAgICAgICAgaWYgKG5leHRGaWJlciA9PT0gd29ya0luUHJvZ3Jlc3MpIHtcbiAgICAgICAgICBuZXh0RmliZXIgPSBudWxsO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGZpYmVyID0gbmV4dEZpYmVyLnNpYmxpbmc7XG4gICAgICAgIGlmIChudWxsICE9PSBmaWJlcikge1xuICAgICAgICAgIGZpYmVyLnJldHVybiA9IG5leHRGaWJlci5yZXR1cm47XG4gICAgICAgICAgbmV4dEZpYmVyID0gZmliZXI7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgbmV4dEZpYmVyID0gbmV4dEZpYmVyLnJldHVybjtcbiAgICAgIH1cbiAgICBmaWJlciA9IG5leHRGaWJlcjtcbiAgfVxufVxuZnVuY3Rpb24gcHJvcGFnYXRlUGFyZW50Q29udGV4dENoYW5nZXMoXG4gIGN1cnJlbnQsXG4gIHdvcmtJblByb2dyZXNzLFxuICByZW5kZXJMYW5lcyxcbiAgZm9yY2VQcm9wYWdhdGVFbnRpcmVUcmVlXG4pIHtcbiAgY3VycmVudCA9IG51bGw7XG4gIGZvciAoXG4gICAgdmFyIHBhcmVudCA9IHdvcmtJblByb2dyZXNzLCBpc0luc2lkZVByb3BhZ2F0aW9uQmFpbG91dCA9ICExO1xuICAgIG51bGwgIT09IHBhcmVudDtcblxuICApIHtcbiAgICBpZiAoIWlzSW5zaWRlUHJvcGFnYXRpb25CYWlsb3V0KVxuICAgICAgaWYgKDAgIT09IChwYXJlbnQuZmxhZ3MgJiA1MjQyODgpKSBpc0luc2lkZVByb3BhZ2F0aW9uQmFpbG91dCA9ICEwO1xuICAgICAgZWxzZSBpZiAoMCAhPT0gKHBhcmVudC5mbGFncyAmIDI2MjE0NCkpIGJyZWFrO1xuICAgIGlmICgxMCA9PT0gcGFyZW50LnRhZykge1xuICAgICAgdmFyIGN1cnJlbnRQYXJlbnQgPSBwYXJlbnQuYWx0ZXJuYXRlO1xuICAgICAgaWYgKG51bGwgPT09IGN1cnJlbnRQYXJlbnQpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMzg3KSk7XG4gICAgICBjdXJyZW50UGFyZW50ID0gY3VycmVudFBhcmVudC5tZW1vaXplZFByb3BzO1xuICAgICAgaWYgKG51bGwgIT09IGN1cnJlbnRQYXJlbnQpIHtcbiAgICAgICAgdmFyIGNvbnRleHQgPSBwYXJlbnQudHlwZTtcbiAgICAgICAgb2JqZWN0SXMocGFyZW50LnBlbmRpbmdQcm9wcy52YWx1ZSwgY3VycmVudFBhcmVudC52YWx1ZSkgfHxcbiAgICAgICAgICAobnVsbCAhPT0gY3VycmVudCA/IGN1cnJlbnQucHVzaChjb250ZXh0KSA6IChjdXJyZW50ID0gW2NvbnRleHRdKSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChwYXJlbnQgPT09IGhvc3RUcmFuc2l0aW9uUHJvdmlkZXJDdXJzb3IuY3VycmVudCkge1xuICAgICAgY3VycmVudFBhcmVudCA9IHBhcmVudC5hbHRlcm5hdGU7XG4gICAgICBpZiAobnVsbCA9PT0gY3VycmVudFBhcmVudCkgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgzODcpKTtcbiAgICAgIGN1cnJlbnRQYXJlbnQubWVtb2l6ZWRTdGF0ZS5tZW1vaXplZFN0YXRlICE9PVxuICAgICAgICBwYXJlbnQubWVtb2l6ZWRTdGF0ZS5tZW1vaXplZFN0YXRlICYmXG4gICAgICAgIChudWxsICE9PSBjdXJyZW50XG4gICAgICAgICAgPyBjdXJyZW50LnB1c2goSG9zdFRyYW5zaXRpb25Db250ZXh0KVxuICAgICAgICAgIDogKGN1cnJlbnQgPSBbSG9zdFRyYW5zaXRpb25Db250ZXh0XSkpO1xuICAgIH1cbiAgICBwYXJlbnQgPSBwYXJlbnQucmV0dXJuO1xuICB9XG4gIG51bGwgIT09IGN1cnJlbnQgJiZcbiAgICBwcm9wYWdhdGVDb250ZXh0Q2hhbmdlcyhcbiAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgY3VycmVudCxcbiAgICAgIHJlbmRlckxhbmVzLFxuICAgICAgZm9yY2VQcm9wYWdhdGVFbnRpcmVUcmVlXG4gICAgKTtcbiAgd29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gMjYyMTQ0O1xufVxuZnVuY3Rpb24gY2hlY2tJZkNvbnRleHRDaGFuZ2VkKGN1cnJlbnREZXBlbmRlbmNpZXMpIHtcbiAgZm9yIChcbiAgICBjdXJyZW50RGVwZW5kZW5jaWVzID0gY3VycmVudERlcGVuZGVuY2llcy5maXJzdENvbnRleHQ7XG4gICAgbnVsbCAhPT0gY3VycmVudERlcGVuZGVuY2llcztcblxuICApIHtcbiAgICBpZiAoXG4gICAgICAhb2JqZWN0SXMoXG4gICAgICAgIGN1cnJlbnREZXBlbmRlbmNpZXMuY29udGV4dC5fY3VycmVudFZhbHVlLFxuICAgICAgICBjdXJyZW50RGVwZW5kZW5jaWVzLm1lbW9pemVkVmFsdWVcbiAgICAgIClcbiAgICApXG4gICAgICByZXR1cm4gITA7XG4gICAgY3VycmVudERlcGVuZGVuY2llcyA9IGN1cnJlbnREZXBlbmRlbmNpZXMubmV4dDtcbiAgfVxuICByZXR1cm4gITE7XG59XG5mdW5jdGlvbiBwcmVwYXJlVG9SZWFkQ29udGV4dCh3b3JrSW5Qcm9ncmVzcykge1xuICBjdXJyZW50bHlSZW5kZXJpbmdGaWJlciA9IHdvcmtJblByb2dyZXNzO1xuICBsYXN0Q29udGV4dERlcGVuZGVuY3kgPSBudWxsO1xuICB3b3JrSW5Qcm9ncmVzcyA9IHdvcmtJblByb2dyZXNzLmRlcGVuZGVuY2llcztcbiAgbnVsbCAhPT0gd29ya0luUHJvZ3Jlc3MgJiYgKHdvcmtJblByb2dyZXNzLmZpcnN0Q29udGV4dCA9IG51bGwpO1xufVxuZnVuY3Rpb24gcmVhZENvbnRleHQoY29udGV4dCkge1xuICByZXR1cm4gcmVhZENvbnRleHRGb3JDb25zdW1lcihjdXJyZW50bHlSZW5kZXJpbmdGaWJlciwgY29udGV4dCk7XG59XG5mdW5jdGlvbiByZWFkQ29udGV4dER1cmluZ1JlY29uY2lsaWF0aW9uKGNvbnN1bWVyLCBjb250ZXh0KSB7XG4gIG51bGwgPT09IGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyICYmIHByZXBhcmVUb1JlYWRDb250ZXh0KGNvbnN1bWVyKTtcbiAgcmV0dXJuIHJlYWRDb250ZXh0Rm9yQ29uc3VtZXIoY29uc3VtZXIsIGNvbnRleHQpO1xufVxuZnVuY3Rpb24gcmVhZENvbnRleHRGb3JDb25zdW1lcihjb25zdW1lciwgY29udGV4dCkge1xuICB2YXIgdmFsdWUgPSBjb250ZXh0Ll9jdXJyZW50VmFsdWU7XG4gIGNvbnRleHQgPSB7IGNvbnRleHQ6IGNvbnRleHQsIG1lbW9pemVkVmFsdWU6IHZhbHVlLCBuZXh0OiBudWxsIH07XG4gIGlmIChudWxsID09PSBsYXN0Q29udGV4dERlcGVuZGVuY3kpIHtcbiAgICBpZiAobnVsbCA9PT0gY29uc3VtZXIpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMzA4KSk7XG4gICAgbGFzdENvbnRleHREZXBlbmRlbmN5ID0gY29udGV4dDtcbiAgICBjb25zdW1lci5kZXBlbmRlbmNpZXMgPSB7IGxhbmVzOiAwLCBmaXJzdENvbnRleHQ6IGNvbnRleHQgfTtcbiAgICBjb25zdW1lci5mbGFncyB8PSA1MjQyODg7XG4gIH0gZWxzZSBsYXN0Q29udGV4dERlcGVuZGVuY3kgPSBsYXN0Q29udGV4dERlcGVuZGVuY3kubmV4dCA9IGNvbnRleHQ7XG4gIHJldHVybiB2YWx1ZTtcbn1cbnZhciBoYXNGb3JjZVVwZGF0ZSA9ICExO1xuZnVuY3Rpb24gaW5pdGlhbGl6ZVVwZGF0ZVF1ZXVlKGZpYmVyKSB7XG4gIGZpYmVyLnVwZGF0ZVF1ZXVlID0ge1xuICAgIGJhc2VTdGF0ZTogZmliZXIubWVtb2l6ZWRTdGF0ZSxcbiAgICBmaXJzdEJhc2VVcGRhdGU6IG51bGwsXG4gICAgbGFzdEJhc2VVcGRhdGU6IG51bGwsXG4gICAgc2hhcmVkOiB7IHBlbmRpbmc6IG51bGwsIGxhbmVzOiAwLCBoaWRkZW5DYWxsYmFja3M6IG51bGwgfSxcbiAgICBjYWxsYmFja3M6IG51bGxcbiAgfTtcbn1cbmZ1bmN0aW9uIGNsb25lVXBkYXRlUXVldWUoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MpIHtcbiAgY3VycmVudCA9IGN1cnJlbnQudXBkYXRlUXVldWU7XG4gIHdvcmtJblByb2dyZXNzLnVwZGF0ZVF1ZXVlID09PSBjdXJyZW50ICYmXG4gICAgKHdvcmtJblByb2dyZXNzLnVwZGF0ZVF1ZXVlID0ge1xuICAgICAgYmFzZVN0YXRlOiBjdXJyZW50LmJhc2VTdGF0ZSxcbiAgICAgIGZpcnN0QmFzZVVwZGF0ZTogY3VycmVudC5maXJzdEJhc2VVcGRhdGUsXG4gICAgICBsYXN0QmFzZVVwZGF0ZTogY3VycmVudC5sYXN0QmFzZVVwZGF0ZSxcbiAgICAgIHNoYXJlZDogY3VycmVudC5zaGFyZWQsXG4gICAgICBjYWxsYmFja3M6IG51bGxcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVVwZGF0ZShsYW5lKSB7XG4gIHJldHVybiB7IGxhbmU6IGxhbmUsIHRhZzogMCwgcGF5bG9hZDogbnVsbCwgY2FsbGJhY2s6IG51bGwsIG5leHQ6IG51bGwgfTtcbn1cbmZ1bmN0aW9uIGVucXVldWVVcGRhdGUoZmliZXIsIHVwZGF0ZSwgbGFuZSkge1xuICB2YXIgdXBkYXRlUXVldWUgPSBmaWJlci51cGRhdGVRdWV1ZTtcbiAgaWYgKG51bGwgPT09IHVwZGF0ZVF1ZXVlKSByZXR1cm4gbnVsbDtcbiAgdXBkYXRlUXVldWUgPSB1cGRhdGVRdWV1ZS5zaGFyZWQ7XG4gIGlmICgwICE9PSAoZXhlY3V0aW9uQ29udGV4dCAmIDIpKSB7XG4gICAgdmFyIHBlbmRpbmcgPSB1cGRhdGVRdWV1ZS5wZW5kaW5nO1xuICAgIG51bGwgPT09IHBlbmRpbmdcbiAgICAgID8gKHVwZGF0ZS5uZXh0ID0gdXBkYXRlKVxuICAgICAgOiAoKHVwZGF0ZS5uZXh0ID0gcGVuZGluZy5uZXh0KSwgKHBlbmRpbmcubmV4dCA9IHVwZGF0ZSkpO1xuICAgIHVwZGF0ZVF1ZXVlLnBlbmRpbmcgPSB1cGRhdGU7XG4gICAgdXBkYXRlID0gZ2V0Um9vdEZvclVwZGF0ZWRGaWJlcihmaWJlcik7XG4gICAgbWFya1VwZGF0ZUxhbmVGcm9tRmliZXJUb1Jvb3QoZmliZXIsIG51bGwsIGxhbmUpO1xuICAgIHJldHVybiB1cGRhdGU7XG4gIH1cbiAgZW5xdWV1ZVVwZGF0ZSQxKGZpYmVyLCB1cGRhdGVRdWV1ZSwgdXBkYXRlLCBsYW5lKTtcbiAgcmV0dXJuIGdldFJvb3RGb3JVcGRhdGVkRmliZXIoZmliZXIpO1xufVxuZnVuY3Rpb24gZW50YW5nbGVUcmFuc2l0aW9ucyhyb290LCBmaWJlciwgbGFuZSkge1xuICBmaWJlciA9IGZpYmVyLnVwZGF0ZVF1ZXVlO1xuICBpZiAobnVsbCAhPT0gZmliZXIgJiYgKChmaWJlciA9IGZpYmVyLnNoYXJlZCksIDAgIT09IChsYW5lICYgNDE5NDE3NikpKSB7XG4gICAgdmFyIHF1ZXVlTGFuZXMgPSBmaWJlci5sYW5lcztcbiAgICBxdWV1ZUxhbmVzICY9IHJvb3QucGVuZGluZ0xhbmVzO1xuICAgIGxhbmUgfD0gcXVldWVMYW5lcztcbiAgICBmaWJlci5sYW5lcyA9IGxhbmU7XG4gICAgbWFya1Jvb3RFbnRhbmdsZWQocm9vdCwgbGFuZSk7XG4gIH1cbn1cbmZ1bmN0aW9uIGVucXVldWVDYXB0dXJlZFVwZGF0ZSh3b3JrSW5Qcm9ncmVzcywgY2FwdHVyZWRVcGRhdGUpIHtcbiAgdmFyIHF1ZXVlID0gd29ya0luUHJvZ3Jlc3MudXBkYXRlUXVldWUsXG4gICAgY3VycmVudCA9IHdvcmtJblByb2dyZXNzLmFsdGVybmF0ZTtcbiAgaWYgKFxuICAgIG51bGwgIT09IGN1cnJlbnQgJiZcbiAgICAoKGN1cnJlbnQgPSBjdXJyZW50LnVwZGF0ZVF1ZXVlKSwgcXVldWUgPT09IGN1cnJlbnQpXG4gICkge1xuICAgIHZhciBuZXdGaXJzdCA9IG51bGwsXG4gICAgICBuZXdMYXN0ID0gbnVsbDtcbiAgICBxdWV1ZSA9IHF1ZXVlLmZpcnN0QmFzZVVwZGF0ZTtcbiAgICBpZiAobnVsbCAhPT0gcXVldWUpIHtcbiAgICAgIGRvIHtcbiAgICAgICAgdmFyIGNsb25lID0ge1xuICAgICAgICAgIGxhbmU6IHF1ZXVlLmxhbmUsXG4gICAgICAgICAgdGFnOiBxdWV1ZS50YWcsXG4gICAgICAgICAgcGF5bG9hZDogcXVldWUucGF5bG9hZCxcbiAgICAgICAgICBjYWxsYmFjazogbnVsbCxcbiAgICAgICAgICBuZXh0OiBudWxsXG4gICAgICAgIH07XG4gICAgICAgIG51bGwgPT09IG5ld0xhc3RcbiAgICAgICAgICA/IChuZXdGaXJzdCA9IG5ld0xhc3QgPSBjbG9uZSlcbiAgICAgICAgICA6IChuZXdMYXN0ID0gbmV3TGFzdC5uZXh0ID0gY2xvbmUpO1xuICAgICAgICBxdWV1ZSA9IHF1ZXVlLm5leHQ7XG4gICAgICB9IHdoaWxlIChudWxsICE9PSBxdWV1ZSk7XG4gICAgICBudWxsID09PSBuZXdMYXN0XG4gICAgICAgID8gKG5ld0ZpcnN0ID0gbmV3TGFzdCA9IGNhcHR1cmVkVXBkYXRlKVxuICAgICAgICA6IChuZXdMYXN0ID0gbmV3TGFzdC5uZXh0ID0gY2FwdHVyZWRVcGRhdGUpO1xuICAgIH0gZWxzZSBuZXdGaXJzdCA9IG5ld0xhc3QgPSBjYXB0dXJlZFVwZGF0ZTtcbiAgICBxdWV1ZSA9IHtcbiAgICAgIGJhc2VTdGF0ZTogY3VycmVudC5iYXNlU3RhdGUsXG4gICAgICBmaXJzdEJhc2VVcGRhdGU6IG5ld0ZpcnN0LFxuICAgICAgbGFzdEJhc2VVcGRhdGU6IG5ld0xhc3QsXG4gICAgICBzaGFyZWQ6IGN1cnJlbnQuc2hhcmVkLFxuICAgICAgY2FsbGJhY2tzOiBjdXJyZW50LmNhbGxiYWNrc1xuICAgIH07XG4gICAgd29ya0luUHJvZ3Jlc3MudXBkYXRlUXVldWUgPSBxdWV1ZTtcbiAgICByZXR1cm47XG4gIH1cbiAgd29ya0luUHJvZ3Jlc3MgPSBxdWV1ZS5sYXN0QmFzZVVwZGF0ZTtcbiAgbnVsbCA9PT0gd29ya0luUHJvZ3Jlc3NcbiAgICA/IChxdWV1ZS5maXJzdEJhc2VVcGRhdGUgPSBjYXB0dXJlZFVwZGF0ZSlcbiAgICA6ICh3b3JrSW5Qcm9ncmVzcy5uZXh0ID0gY2FwdHVyZWRVcGRhdGUpO1xuICBxdWV1ZS5sYXN0QmFzZVVwZGF0ZSA9IGNhcHR1cmVkVXBkYXRlO1xufVxudmFyIGRpZFJlYWRGcm9tRW50YW5nbGVkQXN5bmNBY3Rpb24gPSAhMTtcbmZ1bmN0aW9uIHN1c3BlbmRJZlVwZGF0ZVJlYWRGcm9tRW50YW5nbGVkQXN5bmNBY3Rpb24oKSB7XG4gIGlmIChkaWRSZWFkRnJvbUVudGFuZ2xlZEFzeW5jQWN0aW9uKSB7XG4gICAgdmFyIGVudGFuZ2xlZEFjdGlvblRoZW5hYmxlID0gY3VycmVudEVudGFuZ2xlZEFjdGlvblRoZW5hYmxlO1xuICAgIGlmIChudWxsICE9PSBlbnRhbmdsZWRBY3Rpb25UaGVuYWJsZSkgdGhyb3cgZW50YW5nbGVkQWN0aW9uVGhlbmFibGU7XG4gIH1cbn1cbmZ1bmN0aW9uIHByb2Nlc3NVcGRhdGVRdWV1ZShcbiAgd29ya0luUHJvZ3Jlc3MkanNjb21wJDAsXG4gIHByb3BzLFxuICBpbnN0YW5jZSRqc2NvbXAkMCxcbiAgcmVuZGVyTGFuZXNcbikge1xuICBkaWRSZWFkRnJvbUVudGFuZ2xlZEFzeW5jQWN0aW9uID0gITE7XG4gIHZhciBxdWV1ZSA9IHdvcmtJblByb2dyZXNzJGpzY29tcCQwLnVwZGF0ZVF1ZXVlO1xuICBoYXNGb3JjZVVwZGF0ZSA9ICExO1xuICB2YXIgZmlyc3RCYXNlVXBkYXRlID0gcXVldWUuZmlyc3RCYXNlVXBkYXRlLFxuICAgIGxhc3RCYXNlVXBkYXRlID0gcXVldWUubGFzdEJhc2VVcGRhdGUsXG4gICAgcGVuZGluZ1F1ZXVlID0gcXVldWUuc2hhcmVkLnBlbmRpbmc7XG4gIGlmIChudWxsICE9PSBwZW5kaW5nUXVldWUpIHtcbiAgICBxdWV1ZS5zaGFyZWQucGVuZGluZyA9IG51bGw7XG4gICAgdmFyIGxhc3RQZW5kaW5nVXBkYXRlID0gcGVuZGluZ1F1ZXVlLFxuICAgICAgZmlyc3RQZW5kaW5nVXBkYXRlID0gbGFzdFBlbmRpbmdVcGRhdGUubmV4dDtcbiAgICBsYXN0UGVuZGluZ1VwZGF0ZS5uZXh0ID0gbnVsbDtcbiAgICBudWxsID09PSBsYXN0QmFzZVVwZGF0ZVxuICAgICAgPyAoZmlyc3RCYXNlVXBkYXRlID0gZmlyc3RQZW5kaW5nVXBkYXRlKVxuICAgICAgOiAobGFzdEJhc2VVcGRhdGUubmV4dCA9IGZpcnN0UGVuZGluZ1VwZGF0ZSk7XG4gICAgbGFzdEJhc2VVcGRhdGUgPSBsYXN0UGVuZGluZ1VwZGF0ZTtcbiAgICB2YXIgY3VycmVudCA9IHdvcmtJblByb2dyZXNzJGpzY29tcCQwLmFsdGVybmF0ZTtcbiAgICBudWxsICE9PSBjdXJyZW50ICYmXG4gICAgICAoKGN1cnJlbnQgPSBjdXJyZW50LnVwZGF0ZVF1ZXVlKSxcbiAgICAgIChwZW5kaW5nUXVldWUgPSBjdXJyZW50Lmxhc3RCYXNlVXBkYXRlKSxcbiAgICAgIHBlbmRpbmdRdWV1ZSAhPT0gbGFzdEJhc2VVcGRhdGUgJiZcbiAgICAgICAgKG51bGwgPT09IHBlbmRpbmdRdWV1ZVxuICAgICAgICAgID8gKGN1cnJlbnQuZmlyc3RCYXNlVXBkYXRlID0gZmlyc3RQZW5kaW5nVXBkYXRlKVxuICAgICAgICAgIDogKHBlbmRpbmdRdWV1ZS5uZXh0ID0gZmlyc3RQZW5kaW5nVXBkYXRlKSxcbiAgICAgICAgKGN1cnJlbnQubGFzdEJhc2VVcGRhdGUgPSBsYXN0UGVuZGluZ1VwZGF0ZSkpKTtcbiAgfVxuICBpZiAobnVsbCAhPT0gZmlyc3RCYXNlVXBkYXRlKSB7XG4gICAgdmFyIG5ld1N0YXRlID0gcXVldWUuYmFzZVN0YXRlO1xuICAgIGxhc3RCYXNlVXBkYXRlID0gMDtcbiAgICBjdXJyZW50ID0gZmlyc3RQZW5kaW5nVXBkYXRlID0gbGFzdFBlbmRpbmdVcGRhdGUgPSBudWxsO1xuICAgIHBlbmRpbmdRdWV1ZSA9IGZpcnN0QmFzZVVwZGF0ZTtcbiAgICBkbyB7XG4gICAgICB2YXIgdXBkYXRlTGFuZSA9IHBlbmRpbmdRdWV1ZS5sYW5lICYgLTUzNjg3MDkxMyxcbiAgICAgICAgaXNIaWRkZW5VcGRhdGUgPSB1cGRhdGVMYW5lICE9PSBwZW5kaW5nUXVldWUubGFuZTtcbiAgICAgIGlmIChcbiAgICAgICAgaXNIaWRkZW5VcGRhdGVcbiAgICAgICAgICA/ICh3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lcyAmIHVwZGF0ZUxhbmUpID09PSB1cGRhdGVMYW5lXG4gICAgICAgICAgOiAocmVuZGVyTGFuZXMgJiB1cGRhdGVMYW5lKSA9PT0gdXBkYXRlTGFuZVxuICAgICAgKSB7XG4gICAgICAgIDAgIT09IHVwZGF0ZUxhbmUgJiZcbiAgICAgICAgICB1cGRhdGVMYW5lID09PSBjdXJyZW50RW50YW5nbGVkTGFuZSAmJlxuICAgICAgICAgIChkaWRSZWFkRnJvbUVudGFuZ2xlZEFzeW5jQWN0aW9uID0gITApO1xuICAgICAgICBudWxsICE9PSBjdXJyZW50ICYmXG4gICAgICAgICAgKGN1cnJlbnQgPSBjdXJyZW50Lm5leHQgPVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBsYW5lOiAwLFxuICAgICAgICAgICAgICB0YWc6IHBlbmRpbmdRdWV1ZS50YWcsXG4gICAgICAgICAgICAgIHBheWxvYWQ6IHBlbmRpbmdRdWV1ZS5wYXlsb2FkLFxuICAgICAgICAgICAgICBjYWxsYmFjazogbnVsbCxcbiAgICAgICAgICAgICAgbmV4dDogbnVsbFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIGE6IHtcbiAgICAgICAgICB2YXIgd29ya0luUHJvZ3Jlc3MgPSB3b3JrSW5Qcm9ncmVzcyRqc2NvbXAkMCxcbiAgICAgICAgICAgIHVwZGF0ZSA9IHBlbmRpbmdRdWV1ZTtcbiAgICAgICAgICB1cGRhdGVMYW5lID0gcHJvcHM7XG4gICAgICAgICAgdmFyIGluc3RhbmNlID0gaW5zdGFuY2UkanNjb21wJDA7XG4gICAgICAgICAgc3dpdGNoICh1cGRhdGUudGFnKSB7XG4gICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzID0gdXBkYXRlLnBheWxvYWQ7XG4gICAgICAgICAgICAgIGlmIChcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiB3b3JrSW5Qcm9ncmVzcykge1xuICAgICAgICAgICAgICAgIG5ld1N0YXRlID0gd29ya0luUHJvZ3Jlc3MuY2FsbChpbnN0YW5jZSwgbmV3U3RhdGUsIHVwZGF0ZUxhbmUpO1xuICAgICAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgbmV3U3RhdGUgPSB3b3JrSW5Qcm9ncmVzcztcbiAgICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MuZmxhZ3MgPSAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgJiAtNjU1MzcpIHwgMTI4O1xuICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyA9IHVwZGF0ZS5wYXlsb2FkO1xuICAgICAgICAgICAgICB1cGRhdGVMYW5lID1cbiAgICAgICAgICAgICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiB3b3JrSW5Qcm9ncmVzc1xuICAgICAgICAgICAgICAgICAgPyB3b3JrSW5Qcm9ncmVzcy5jYWxsKGluc3RhbmNlLCBuZXdTdGF0ZSwgdXBkYXRlTGFuZSlcbiAgICAgICAgICAgICAgICAgIDogd29ya0luUHJvZ3Jlc3M7XG4gICAgICAgICAgICAgIGlmIChudWxsID09PSB1cGRhdGVMYW5lIHx8IHZvaWQgMCA9PT0gdXBkYXRlTGFuZSkgYnJlYWsgYTtcbiAgICAgICAgICAgICAgbmV3U3RhdGUgPSBhc3NpZ24oe30sIG5ld1N0YXRlLCB1cGRhdGVMYW5lKTtcbiAgICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgaGFzRm9yY2VVcGRhdGUgPSAhMDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdXBkYXRlTGFuZSA9IHBlbmRpbmdRdWV1ZS5jYWxsYmFjaztcbiAgICAgICAgbnVsbCAhPT0gdXBkYXRlTGFuZSAmJlxuICAgICAgICAgICgod29ya0luUHJvZ3Jlc3MkanNjb21wJDAuZmxhZ3MgfD0gNjQpLFxuICAgICAgICAgIGlzSGlkZGVuVXBkYXRlICYmICh3b3JrSW5Qcm9ncmVzcyRqc2NvbXAkMC5mbGFncyB8PSA4MTkyKSxcbiAgICAgICAgICAoaXNIaWRkZW5VcGRhdGUgPSBxdWV1ZS5jYWxsYmFja3MpLFxuICAgICAgICAgIG51bGwgPT09IGlzSGlkZGVuVXBkYXRlXG4gICAgICAgICAgICA/IChxdWV1ZS5jYWxsYmFja3MgPSBbdXBkYXRlTGFuZV0pXG4gICAgICAgICAgICA6IGlzSGlkZGVuVXBkYXRlLnB1c2godXBkYXRlTGFuZSkpO1xuICAgICAgfSBlbHNlXG4gICAgICAgIChpc0hpZGRlblVwZGF0ZSA9IHtcbiAgICAgICAgICBsYW5lOiB1cGRhdGVMYW5lLFxuICAgICAgICAgIHRhZzogcGVuZGluZ1F1ZXVlLnRhZyxcbiAgICAgICAgICBwYXlsb2FkOiBwZW5kaW5nUXVldWUucGF5bG9hZCxcbiAgICAgICAgICBjYWxsYmFjazogcGVuZGluZ1F1ZXVlLmNhbGxiYWNrLFxuICAgICAgICAgIG5leHQ6IG51bGxcbiAgICAgICAgfSksXG4gICAgICAgICAgbnVsbCA9PT0gY3VycmVudFxuICAgICAgICAgICAgPyAoKGZpcnN0UGVuZGluZ1VwZGF0ZSA9IGN1cnJlbnQgPSBpc0hpZGRlblVwZGF0ZSksXG4gICAgICAgICAgICAgIChsYXN0UGVuZGluZ1VwZGF0ZSA9IG5ld1N0YXRlKSlcbiAgICAgICAgICAgIDogKGN1cnJlbnQgPSBjdXJyZW50Lm5leHQgPSBpc0hpZGRlblVwZGF0ZSksXG4gICAgICAgICAgKGxhc3RCYXNlVXBkYXRlIHw9IHVwZGF0ZUxhbmUpO1xuICAgICAgcGVuZGluZ1F1ZXVlID0gcGVuZGluZ1F1ZXVlLm5leHQ7XG4gICAgICBpZiAobnVsbCA9PT0gcGVuZGluZ1F1ZXVlKVxuICAgICAgICBpZiAoKChwZW5kaW5nUXVldWUgPSBxdWV1ZS5zaGFyZWQucGVuZGluZyksIG51bGwgPT09IHBlbmRpbmdRdWV1ZSkpXG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAoaXNIaWRkZW5VcGRhdGUgPSBwZW5kaW5nUXVldWUpLFxuICAgICAgICAgICAgKHBlbmRpbmdRdWV1ZSA9IGlzSGlkZGVuVXBkYXRlLm5leHQpLFxuICAgICAgICAgICAgKGlzSGlkZGVuVXBkYXRlLm5leHQgPSBudWxsKSxcbiAgICAgICAgICAgIChxdWV1ZS5sYXN0QmFzZVVwZGF0ZSA9IGlzSGlkZGVuVXBkYXRlKSxcbiAgICAgICAgICAgIChxdWV1ZS5zaGFyZWQucGVuZGluZyA9IG51bGwpO1xuICAgIH0gd2hpbGUgKDEpO1xuICAgIG51bGwgPT09IGN1cnJlbnQgJiYgKGxhc3RQZW5kaW5nVXBkYXRlID0gbmV3U3RhdGUpO1xuICAgIHF1ZXVlLmJhc2VTdGF0ZSA9IGxhc3RQZW5kaW5nVXBkYXRlO1xuICAgIHF1ZXVlLmZpcnN0QmFzZVVwZGF0ZSA9IGZpcnN0UGVuZGluZ1VwZGF0ZTtcbiAgICBxdWV1ZS5sYXN0QmFzZVVwZGF0ZSA9IGN1cnJlbnQ7XG4gICAgbnVsbCA9PT0gZmlyc3RCYXNlVXBkYXRlICYmIChxdWV1ZS5zaGFyZWQubGFuZXMgPSAwKTtcbiAgICB3b3JrSW5Qcm9ncmVzc1Jvb3RTa2lwcGVkTGFuZXMgfD0gbGFzdEJhc2VVcGRhdGU7XG4gICAgd29ya0luUHJvZ3Jlc3MkanNjb21wJDAubGFuZXMgPSBsYXN0QmFzZVVwZGF0ZTtcbiAgICB3b3JrSW5Qcm9ncmVzcyRqc2NvbXAkMC5tZW1vaXplZFN0YXRlID0gbmV3U3RhdGU7XG4gIH1cbn1cbmZ1bmN0aW9uIGNhbGxDYWxsYmFjayhjYWxsYmFjaywgY29udGV4dCkge1xuICBpZiAoXCJmdW5jdGlvblwiICE9PSB0eXBlb2YgY2FsbGJhY2spXG4gICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxOTEsIGNhbGxiYWNrKSk7XG4gIGNhbGxiYWNrLmNhbGwoY29udGV4dCk7XG59XG5mdW5jdGlvbiBjb21taXRDYWxsYmFja3ModXBkYXRlUXVldWUsIGNvbnRleHQpIHtcbiAgdmFyIGNhbGxiYWNrcyA9IHVwZGF0ZVF1ZXVlLmNhbGxiYWNrcztcbiAgaWYgKG51bGwgIT09IGNhbGxiYWNrcylcbiAgICBmb3IgKFxuICAgICAgdXBkYXRlUXVldWUuY2FsbGJhY2tzID0gbnVsbCwgdXBkYXRlUXVldWUgPSAwO1xuICAgICAgdXBkYXRlUXVldWUgPCBjYWxsYmFja3MubGVuZ3RoO1xuICAgICAgdXBkYXRlUXVldWUrK1xuICAgIClcbiAgICAgIGNhbGxDYWxsYmFjayhjYWxsYmFja3NbdXBkYXRlUXVldWVdLCBjb250ZXh0KTtcbn1cbmZ1bmN0aW9uIGNvbW1pdEhvb2tFZmZlY3RMaXN0TW91bnQoZmxhZ3MsIGZpbmlzaGVkV29yaykge1xuICB0cnkge1xuICAgIHZhciB1cGRhdGVRdWV1ZSA9IGZpbmlzaGVkV29yay51cGRhdGVRdWV1ZSxcbiAgICAgIGxhc3RFZmZlY3QgPSBudWxsICE9PSB1cGRhdGVRdWV1ZSA/IHVwZGF0ZVF1ZXVlLmxhc3RFZmZlY3QgOiBudWxsO1xuICAgIGlmIChudWxsICE9PSBsYXN0RWZmZWN0KSB7XG4gICAgICB2YXIgZmlyc3RFZmZlY3QgPSBsYXN0RWZmZWN0Lm5leHQ7XG4gICAgICB1cGRhdGVRdWV1ZSA9IGZpcnN0RWZmZWN0O1xuICAgICAgZG8ge1xuICAgICAgICBpZiAoKHVwZGF0ZVF1ZXVlLnRhZyAmIGZsYWdzKSA9PT0gZmxhZ3MpIHtcbiAgICAgICAgICBsYXN0RWZmZWN0ID0gdm9pZCAwO1xuICAgICAgICAgIHZhciBjcmVhdGUgPSB1cGRhdGVRdWV1ZS5jcmVhdGUsXG4gICAgICAgICAgICBpbnN0ID0gdXBkYXRlUXVldWUuaW5zdDtcbiAgICAgICAgICBsYXN0RWZmZWN0ID0gY3JlYXRlKCk7XG4gICAgICAgICAgaW5zdC5kZXN0cm95ID0gbGFzdEVmZmVjdDtcbiAgICAgICAgfVxuICAgICAgICB1cGRhdGVRdWV1ZSA9IHVwZGF0ZVF1ZXVlLm5leHQ7XG4gICAgICB9IHdoaWxlICh1cGRhdGVRdWV1ZSAhPT0gZmlyc3RFZmZlY3QpO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjYXB0dXJlQ29tbWl0UGhhc2VFcnJvcihmaW5pc2hlZFdvcmssIGZpbmlzaGVkV29yay5yZXR1cm4sIGVycm9yKTtcbiAgfVxufVxuZnVuY3Rpb24gY29tbWl0SG9va0VmZmVjdExpc3RVbm1vdW50KFxuICBmbGFncyxcbiAgZmluaXNoZWRXb3JrLFxuICBuZWFyZXN0TW91bnRlZEFuY2VzdG9yJGpzY29tcCQwXG4pIHtcbiAgdHJ5IHtcbiAgICB2YXIgdXBkYXRlUXVldWUgPSBmaW5pc2hlZFdvcmsudXBkYXRlUXVldWUsXG4gICAgICBsYXN0RWZmZWN0ID0gbnVsbCAhPT0gdXBkYXRlUXVldWUgPyB1cGRhdGVRdWV1ZS5sYXN0RWZmZWN0IDogbnVsbDtcbiAgICBpZiAobnVsbCAhPT0gbGFzdEVmZmVjdCkge1xuICAgICAgdmFyIGZpcnN0RWZmZWN0ID0gbGFzdEVmZmVjdC5uZXh0O1xuICAgICAgdXBkYXRlUXVldWUgPSBmaXJzdEVmZmVjdDtcbiAgICAgIGRvIHtcbiAgICAgICAgaWYgKCh1cGRhdGVRdWV1ZS50YWcgJiBmbGFncykgPT09IGZsYWdzKSB7XG4gICAgICAgICAgdmFyIGluc3QgPSB1cGRhdGVRdWV1ZS5pbnN0LFxuICAgICAgICAgICAgZGVzdHJveSA9IGluc3QuZGVzdHJveTtcbiAgICAgICAgICBpZiAodm9pZCAwICE9PSBkZXN0cm95KSB7XG4gICAgICAgICAgICBpbnN0LmRlc3Ryb3kgPSB2b2lkIDA7XG4gICAgICAgICAgICBsYXN0RWZmZWN0ID0gZmluaXNoZWRXb3JrO1xuICAgICAgICAgICAgdmFyIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IgPSBuZWFyZXN0TW91bnRlZEFuY2VzdG9yJGpzY29tcCQwO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgZGVzdHJveSgpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgY2FwdHVyZUNvbW1pdFBoYXNlRXJyb3IoXG4gICAgICAgICAgICAgICAgbGFzdEVmZmVjdCxcbiAgICAgICAgICAgICAgICBuZWFyZXN0TW91bnRlZEFuY2VzdG9yLFxuICAgICAgICAgICAgICAgIGVycm9yXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHVwZGF0ZVF1ZXVlID0gdXBkYXRlUXVldWUubmV4dDtcbiAgICAgIH0gd2hpbGUgKHVwZGF0ZVF1ZXVlICE9PSBmaXJzdEVmZmVjdCk7XG4gICAgfVxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNhcHR1cmVDb21taXRQaGFzZUVycm9yKGZpbmlzaGVkV29yaywgZmluaXNoZWRXb3JrLnJldHVybiwgZXJyb3IpO1xuICB9XG59XG5mdW5jdGlvbiBjb21taXRDbGFzc0NhbGxiYWNrcyhmaW5pc2hlZFdvcmspIHtcbiAgdmFyIHVwZGF0ZVF1ZXVlID0gZmluaXNoZWRXb3JrLnVwZGF0ZVF1ZXVlO1xuICBpZiAobnVsbCAhPT0gdXBkYXRlUXVldWUpIHtcbiAgICB2YXIgaW5zdGFuY2UgPSBmaW5pc2hlZFdvcmsuc3RhdGVOb2RlO1xuICAgIHRyeSB7XG4gICAgICBjb21taXRDYWxsYmFja3ModXBkYXRlUXVldWUsIGluc3RhbmNlKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY2FwdHVyZUNvbW1pdFBoYXNlRXJyb3IoZmluaXNoZWRXb3JrLCBmaW5pc2hlZFdvcmsucmV0dXJuLCBlcnJvcik7XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBzYWZlbHlDYWxsQ29tcG9uZW50V2lsbFVubW91bnQoXG4gIGN1cnJlbnQsXG4gIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IsXG4gIGluc3RhbmNlXG4pIHtcbiAgaW5zdGFuY2UucHJvcHMgPSByZXNvbHZlQ2xhc3NDb21wb25lbnRQcm9wcyhcbiAgICBjdXJyZW50LnR5cGUsXG4gICAgY3VycmVudC5tZW1vaXplZFByb3BzXG4gICk7XG4gIGluc3RhbmNlLnN0YXRlID0gY3VycmVudC5tZW1vaXplZFN0YXRlO1xuICB0cnkge1xuICAgIGluc3RhbmNlLmNvbXBvbmVudFdpbGxVbm1vdW50KCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY2FwdHVyZUNvbW1pdFBoYXNlRXJyb3IoY3VycmVudCwgbmVhcmVzdE1vdW50ZWRBbmNlc3RvciwgZXJyb3IpO1xuICB9XG59XG5mdW5jdGlvbiBzYWZlbHlBdHRhY2hSZWYoY3VycmVudCwgbmVhcmVzdE1vdW50ZWRBbmNlc3Rvcikge1xuICB0cnkge1xuICAgIHZhciByZWYgPSBjdXJyZW50LnJlZjtcbiAgICBpZiAobnVsbCAhPT0gcmVmKSB7XG4gICAgICB2YXIgaW5zdGFuY2UgPSBjdXJyZW50LnN0YXRlTm9kZTtcbiAgICAgIHN3aXRjaCAoY3VycmVudC50YWcpIHtcbiAgICAgICAgY2FzZSAyNjpcbiAgICAgICAgY2FzZSAyNzpcbiAgICAgICAgY2FzZSA1OlxuICAgICAgICAgIHZhciBpbnN0YW5jZVRvVXNlID0gaW5zdGFuY2U7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgaW5zdGFuY2VUb1VzZSA9IGluc3RhbmNlO1xuICAgICAgfVxuICAgICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgcmVmXG4gICAgICAgID8gKGN1cnJlbnQucmVmQ2xlYW51cCA9IHJlZihpbnN0YW5jZVRvVXNlKSlcbiAgICAgICAgOiAocmVmLmN1cnJlbnQgPSBpbnN0YW5jZVRvVXNlKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY2FwdHVyZUNvbW1pdFBoYXNlRXJyb3IoY3VycmVudCwgbmVhcmVzdE1vdW50ZWRBbmNlc3RvciwgZXJyb3IpO1xuICB9XG59XG5mdW5jdGlvbiBzYWZlbHlEZXRhY2hSZWYoY3VycmVudCwgbmVhcmVzdE1vdW50ZWRBbmNlc3Rvcikge1xuICB2YXIgcmVmID0gY3VycmVudC5yZWYsXG4gICAgcmVmQ2xlYW51cCA9IGN1cnJlbnQucmVmQ2xlYW51cDtcbiAgaWYgKG51bGwgIT09IHJlZilcbiAgICBpZiAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgcmVmQ2xlYW51cClcbiAgICAgIHRyeSB7XG4gICAgICAgIHJlZkNsZWFudXAoKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNhcHR1cmVDb21taXRQaGFzZUVycm9yKGN1cnJlbnQsIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IsIGVycm9yKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIChjdXJyZW50LnJlZkNsZWFudXAgPSBudWxsKSxcbiAgICAgICAgICAoY3VycmVudCA9IGN1cnJlbnQuYWx0ZXJuYXRlKSxcbiAgICAgICAgICBudWxsICE9IGN1cnJlbnQgJiYgKGN1cnJlbnQucmVmQ2xlYW51cCA9IG51bGwpO1xuICAgICAgfVxuICAgIGVsc2UgaWYgKFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHJlZilcbiAgICAgIHRyeSB7XG4gICAgICAgIHJlZihudWxsKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yJDExMikge1xuICAgICAgICBjYXB0dXJlQ29tbWl0UGhhc2VFcnJvcihjdXJyZW50LCBuZWFyZXN0TW91bnRlZEFuY2VzdG9yLCBlcnJvciQxMTIpO1xuICAgICAgfVxuICAgIGVsc2UgcmVmLmN1cnJlbnQgPSBudWxsO1xufVxuZnVuY3Rpb24gY29tbWl0SG9zdE1vdW50KGZpbmlzaGVkV29yaykge1xuICB2YXIgdHlwZSA9IGZpbmlzaGVkV29yay50eXBlLFxuICAgIHByb3BzID0gZmluaXNoZWRXb3JrLm1lbW9pemVkUHJvcHMsXG4gICAgaW5zdGFuY2UgPSBmaW5pc2hlZFdvcmsuc3RhdGVOb2RlO1xuICB0cnkge1xuICAgIGE6IHN3aXRjaCAodHlwZSkge1xuICAgICAgY2FzZSBcImJ1dHRvblwiOlxuICAgICAgY2FzZSBcImlucHV0XCI6XG4gICAgICBjYXNlIFwic2VsZWN0XCI6XG4gICAgICBjYXNlIFwidGV4dGFyZWFcIjpcbiAgICAgICAgcHJvcHMuYXV0b0ZvY3VzICYmIGluc3RhbmNlLmZvY3VzKCk7XG4gICAgICAgIGJyZWFrIGE7XG4gICAgICBjYXNlIFwiaW1nXCI6XG4gICAgICAgIHByb3BzLnNyY1xuICAgICAgICAgID8gKGluc3RhbmNlLnNyYyA9IHByb3BzLnNyYylcbiAgICAgICAgICA6IHByb3BzLnNyY1NldCAmJiAoaW5zdGFuY2Uuc3Jjc2V0ID0gcHJvcHMuc3JjU2V0KTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY2FwdHVyZUNvbW1pdFBoYXNlRXJyb3IoZmluaXNoZWRXb3JrLCBmaW5pc2hlZFdvcmsucmV0dXJuLCBlcnJvcik7XG4gIH1cbn1cbmZ1bmN0aW9uIGNvbW1pdEhvc3RVcGRhdGUoZmluaXNoZWRXb3JrLCBuZXdQcm9wcywgb2xkUHJvcHMpIHtcbiAgdHJ5IHtcbiAgICB2YXIgZG9tRWxlbWVudCA9IGZpbmlzaGVkV29yay5zdGF0ZU5vZGU7XG4gICAgdXBkYXRlUHJvcGVydGllcyhkb21FbGVtZW50LCBmaW5pc2hlZFdvcmsudHlwZSwgb2xkUHJvcHMsIG5ld1Byb3BzKTtcbiAgICBkb21FbGVtZW50W2ludGVybmFsUHJvcHNLZXldID0gbmV3UHJvcHM7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY2FwdHVyZUNvbW1pdFBoYXNlRXJyb3IoZmluaXNoZWRXb3JrLCBmaW5pc2hlZFdvcmsucmV0dXJuLCBlcnJvcik7XG4gIH1cbn1cbmZ1bmN0aW9uIGlzSG9zdFBhcmVudChmaWJlcikge1xuICByZXR1cm4gKFxuICAgIDUgPT09IGZpYmVyLnRhZyB8fFxuICAgIDMgPT09IGZpYmVyLnRhZyB8fFxuICAgIDI2ID09PSBmaWJlci50YWcgfHxcbiAgICAyNyA9PT0gZmliZXIudGFnIHx8XG4gICAgNCA9PT0gZmliZXIudGFnXG4gICk7XG59XG5mdW5jdGlvbiBnZXRIb3N0U2libGluZyhmaWJlcikge1xuICBhOiBmb3IgKDs7KSB7XG4gICAgZm9yICg7IG51bGwgPT09IGZpYmVyLnNpYmxpbmc7ICkge1xuICAgICAgaWYgKG51bGwgPT09IGZpYmVyLnJldHVybiB8fCBpc0hvc3RQYXJlbnQoZmliZXIucmV0dXJuKSkgcmV0dXJuIG51bGw7XG4gICAgICBmaWJlciA9IGZpYmVyLnJldHVybjtcbiAgICB9XG4gICAgZmliZXIuc2libGluZy5yZXR1cm4gPSBmaWJlci5yZXR1cm47XG4gICAgZm9yIChcbiAgICAgIGZpYmVyID0gZmliZXIuc2libGluZztcbiAgICAgIDUgIT09IGZpYmVyLnRhZyAmJlxuICAgICAgNiAhPT0gZmliZXIudGFnICYmXG4gICAgICAyNyAhPT0gZmliZXIudGFnICYmXG4gICAgICAxOCAhPT0gZmliZXIudGFnO1xuXG4gICAgKSB7XG4gICAgICBpZiAoZmliZXIuZmxhZ3MgJiAyKSBjb250aW51ZSBhO1xuICAgICAgaWYgKG51bGwgPT09IGZpYmVyLmNoaWxkIHx8IDQgPT09IGZpYmVyLnRhZykgY29udGludWUgYTtcbiAgICAgIGVsc2UgKGZpYmVyLmNoaWxkLnJldHVybiA9IGZpYmVyKSwgKGZpYmVyID0gZmliZXIuY2hpbGQpO1xuICAgIH1cbiAgICBpZiAoIShmaWJlci5mbGFncyAmIDIpKSByZXR1cm4gZmliZXIuc3RhdGVOb2RlO1xuICB9XG59XG5mdW5jdGlvbiBpbnNlcnRPckFwcGVuZFBsYWNlbWVudE5vZGVJbnRvQ29udGFpbmVyKG5vZGUsIGJlZm9yZSwgcGFyZW50KSB7XG4gIHZhciB0YWcgPSBub2RlLnRhZztcbiAgaWYgKDUgPT09IHRhZyB8fCA2ID09PSB0YWcpXG4gICAgKG5vZGUgPSBub2RlLnN0YXRlTm9kZSksXG4gICAgICBiZWZvcmVcbiAgICAgICAgPyA4ID09PSBwYXJlbnQubm9kZVR5cGVcbiAgICAgICAgICA/IHBhcmVudC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShub2RlLCBiZWZvcmUpXG4gICAgICAgICAgOiBwYXJlbnQuaW5zZXJ0QmVmb3JlKG5vZGUsIGJlZm9yZSlcbiAgICAgICAgOiAoOCA9PT0gcGFyZW50Lm5vZGVUeXBlXG4gICAgICAgICAgICA/ICgoYmVmb3JlID0gcGFyZW50LnBhcmVudE5vZGUpLCBiZWZvcmUuaW5zZXJ0QmVmb3JlKG5vZGUsIHBhcmVudCkpXG4gICAgICAgICAgICA6ICgoYmVmb3JlID0gcGFyZW50KSwgYmVmb3JlLmFwcGVuZENoaWxkKG5vZGUpKSxcbiAgICAgICAgICAocGFyZW50ID0gcGFyZW50Ll9yZWFjdFJvb3RDb250YWluZXIpLFxuICAgICAgICAgIChudWxsICE9PSBwYXJlbnQgJiYgdm9pZCAwICE9PSBwYXJlbnQpIHx8XG4gICAgICAgICAgICBudWxsICE9PSBiZWZvcmUub25jbGljayB8fFxuICAgICAgICAgICAgKGJlZm9yZS5vbmNsaWNrID0gbm9vcCQxKSk7XG4gIGVsc2UgaWYgKDQgIT09IHRhZyAmJiAyNyAhPT0gdGFnICYmICgobm9kZSA9IG5vZGUuY2hpbGQpLCBudWxsICE9PSBub2RlKSlcbiAgICBmb3IgKFxuICAgICAgaW5zZXJ0T3JBcHBlbmRQbGFjZW1lbnROb2RlSW50b0NvbnRhaW5lcihub2RlLCBiZWZvcmUsIHBhcmVudCksXG4gICAgICAgIG5vZGUgPSBub2RlLnNpYmxpbmc7XG4gICAgICBudWxsICE9PSBub2RlO1xuXG4gICAgKVxuICAgICAgaW5zZXJ0T3JBcHBlbmRQbGFjZW1lbnROb2RlSW50b0NvbnRhaW5lcihub2RlLCBiZWZvcmUsIHBhcmVudCksXG4gICAgICAgIChub2RlID0gbm9kZS5zaWJsaW5nKTtcbn1cbmZ1bmN0aW9uIGluc2VydE9yQXBwZW5kUGxhY2VtZW50Tm9kZShub2RlLCBiZWZvcmUsIHBhcmVudCkge1xuICB2YXIgdGFnID0gbm9kZS50YWc7XG4gIGlmICg1ID09PSB0YWcgfHwgNiA9PT0gdGFnKVxuICAgIChub2RlID0gbm9kZS5zdGF0ZU5vZGUpLFxuICAgICAgYmVmb3JlID8gcGFyZW50Lmluc2VydEJlZm9yZShub2RlLCBiZWZvcmUpIDogcGFyZW50LmFwcGVuZENoaWxkKG5vZGUpO1xuICBlbHNlIGlmICg0ICE9PSB0YWcgJiYgMjcgIT09IHRhZyAmJiAoKG5vZGUgPSBub2RlLmNoaWxkKSwgbnVsbCAhPT0gbm9kZSkpXG4gICAgZm9yIChcbiAgICAgIGluc2VydE9yQXBwZW5kUGxhY2VtZW50Tm9kZShub2RlLCBiZWZvcmUsIHBhcmVudCksIG5vZGUgPSBub2RlLnNpYmxpbmc7XG4gICAgICBudWxsICE9PSBub2RlO1xuXG4gICAgKVxuICAgICAgaW5zZXJ0T3JBcHBlbmRQbGFjZW1lbnROb2RlKG5vZGUsIGJlZm9yZSwgcGFyZW50KSwgKG5vZGUgPSBub2RlLnNpYmxpbmcpO1xufVxudmFyIG9mZnNjcmVlblN1YnRyZWVJc0hpZGRlbiA9ICExLFxuICBvZmZzY3JlZW5TdWJ0cmVlV2FzSGlkZGVuID0gITEsXG4gIG5lZWRzRm9ybVJlc2V0ID0gITEsXG4gIFBvc3NpYmx5V2Vha1NldCA9IFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIFdlYWtTZXQgPyBXZWFrU2V0IDogU2V0LFxuICBuZXh0RWZmZWN0ID0gbnVsbCxcbiAgc2hvdWxkRmlyZUFmdGVyQWN0aXZlSW5zdGFuY2VCbHVyID0gITE7XG5mdW5jdGlvbiBjb21taXRCZWZvcmVNdXRhdGlvbkVmZmVjdHMocm9vdCwgZmlyc3RDaGlsZCkge1xuICByb290ID0gcm9vdC5jb250YWluZXJJbmZvO1xuICBldmVudHNFbmFibGVkID0gX2VuYWJsZWQ7XG4gIHJvb3QgPSBnZXRBY3RpdmVFbGVtZW50RGVlcChyb290KTtcbiAgaWYgKGhhc1NlbGVjdGlvbkNhcGFiaWxpdGllcyhyb290KSkge1xuICAgIGlmIChcInNlbGVjdGlvblN0YXJ0XCIgaW4gcm9vdClcbiAgICAgIHZhciBKU0NvbXBpbGVyX3RlbXAgPSB7XG4gICAgICAgIHN0YXJ0OiByb290LnNlbGVjdGlvblN0YXJ0LFxuICAgICAgICBlbmQ6IHJvb3Quc2VsZWN0aW9uRW5kXG4gICAgICB9O1xuICAgIGVsc2VcbiAgICAgIGE6IHtcbiAgICAgICAgSlNDb21waWxlcl90ZW1wID1cbiAgICAgICAgICAoKEpTQ29tcGlsZXJfdGVtcCA9IHJvb3Qub3duZXJEb2N1bWVudCkgJiZcbiAgICAgICAgICAgIEpTQ29tcGlsZXJfdGVtcC5kZWZhdWx0VmlldykgfHxcbiAgICAgICAgICB3aW5kb3c7XG4gICAgICAgIHZhciBzZWxlY3Rpb24gPVxuICAgICAgICAgIEpTQ29tcGlsZXJfdGVtcC5nZXRTZWxlY3Rpb24gJiYgSlNDb21waWxlcl90ZW1wLmdldFNlbGVjdGlvbigpO1xuICAgICAgICBpZiAoc2VsZWN0aW9uICYmIDAgIT09IHNlbGVjdGlvbi5yYW5nZUNvdW50KSB7XG4gICAgICAgICAgSlNDb21waWxlcl90ZW1wID0gc2VsZWN0aW9uLmFuY2hvck5vZGU7XG4gICAgICAgICAgdmFyIGFuY2hvck9mZnNldCA9IHNlbGVjdGlvbi5hbmNob3JPZmZzZXQsXG4gICAgICAgICAgICBmb2N1c05vZGUgPSBzZWxlY3Rpb24uZm9jdXNOb2RlO1xuICAgICAgICAgIHNlbGVjdGlvbiA9IHNlbGVjdGlvbi5mb2N1c09mZnNldDtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgSlNDb21waWxlcl90ZW1wLm5vZGVUeXBlLCBmb2N1c05vZGUubm9kZVR5cGU7XG4gICAgICAgICAgfSBjYXRjaCAoZSQyMCkge1xuICAgICAgICAgICAgSlNDb21waWxlcl90ZW1wID0gbnVsbDtcbiAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBsZW5ndGggPSAwLFxuICAgICAgICAgICAgc3RhcnQgPSAtMSxcbiAgICAgICAgICAgIGVuZCA9IC0xLFxuICAgICAgICAgICAgaW5kZXhXaXRoaW5BbmNob3IgPSAwLFxuICAgICAgICAgICAgaW5kZXhXaXRoaW5Gb2N1cyA9IDAsXG4gICAgICAgICAgICBub2RlID0gcm9vdCxcbiAgICAgICAgICAgIHBhcmVudE5vZGUgPSBudWxsO1xuICAgICAgICAgIGI6IGZvciAoOzspIHtcbiAgICAgICAgICAgIGZvciAodmFyIG5leHQ7IDsgKSB7XG4gICAgICAgICAgICAgIG5vZGUgIT09IEpTQ29tcGlsZXJfdGVtcCB8fFxuICAgICAgICAgICAgICAgICgwICE9PSBhbmNob3JPZmZzZXQgJiYgMyAhPT0gbm9kZS5ub2RlVHlwZSkgfHxcbiAgICAgICAgICAgICAgICAoc3RhcnQgPSBsZW5ndGggKyBhbmNob3JPZmZzZXQpO1xuICAgICAgICAgICAgICBub2RlICE9PSBmb2N1c05vZGUgfHxcbiAgICAgICAgICAgICAgICAoMCAhPT0gc2VsZWN0aW9uICYmIDMgIT09IG5vZGUubm9kZVR5cGUpIHx8XG4gICAgICAgICAgICAgICAgKGVuZCA9IGxlbmd0aCArIHNlbGVjdGlvbik7XG4gICAgICAgICAgICAgIDMgPT09IG5vZGUubm9kZVR5cGUgJiYgKGxlbmd0aCArPSBub2RlLm5vZGVWYWx1ZS5sZW5ndGgpO1xuICAgICAgICAgICAgICBpZiAobnVsbCA9PT0gKG5leHQgPSBub2RlLmZpcnN0Q2hpbGQpKSBicmVhaztcbiAgICAgICAgICAgICAgcGFyZW50Tm9kZSA9IG5vZGU7XG4gICAgICAgICAgICAgIG5vZGUgPSBuZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yICg7Oykge1xuICAgICAgICAgICAgICBpZiAobm9kZSA9PT0gcm9vdCkgYnJlYWsgYjtcbiAgICAgICAgICAgICAgcGFyZW50Tm9kZSA9PT0gSlNDb21waWxlcl90ZW1wICYmXG4gICAgICAgICAgICAgICAgKytpbmRleFdpdGhpbkFuY2hvciA9PT0gYW5jaG9yT2Zmc2V0ICYmXG4gICAgICAgICAgICAgICAgKHN0YXJ0ID0gbGVuZ3RoKTtcbiAgICAgICAgICAgICAgcGFyZW50Tm9kZSA9PT0gZm9jdXNOb2RlICYmXG4gICAgICAgICAgICAgICAgKytpbmRleFdpdGhpbkZvY3VzID09PSBzZWxlY3Rpb24gJiZcbiAgICAgICAgICAgICAgICAoZW5kID0gbGVuZ3RoKTtcbiAgICAgICAgICAgICAgaWYgKG51bGwgIT09IChuZXh0ID0gbm9kZS5uZXh0U2libGluZykpIGJyZWFrO1xuICAgICAgICAgICAgICBub2RlID0gcGFyZW50Tm9kZTtcbiAgICAgICAgICAgICAgcGFyZW50Tm9kZSA9IG5vZGUucGFyZW50Tm9kZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG5vZGUgPSBuZXh0O1xuICAgICAgICAgIH1cbiAgICAgICAgICBKU0NvbXBpbGVyX3RlbXAgPVxuICAgICAgICAgICAgLTEgPT09IHN0YXJ0IHx8IC0xID09PSBlbmQgPyBudWxsIDogeyBzdGFydDogc3RhcnQsIGVuZDogZW5kIH07XG4gICAgICAgIH0gZWxzZSBKU0NvbXBpbGVyX3RlbXAgPSBudWxsO1xuICAgICAgfVxuICAgIEpTQ29tcGlsZXJfdGVtcCA9IEpTQ29tcGlsZXJfdGVtcCB8fCB7IHN0YXJ0OiAwLCBlbmQ6IDAgfTtcbiAgfSBlbHNlIEpTQ29tcGlsZXJfdGVtcCA9IG51bGw7XG4gIHNlbGVjdGlvbkluZm9ybWF0aW9uID0geyBmb2N1c2VkRWxlbTogcm9vdCwgc2VsZWN0aW9uUmFuZ2U6IEpTQ29tcGlsZXJfdGVtcCB9O1xuICBfZW5hYmxlZCA9ICExO1xuICBmb3IgKG5leHRFZmZlY3QgPSBmaXJzdENoaWxkOyBudWxsICE9PSBuZXh0RWZmZWN0OyApXG4gICAgaWYgKFxuICAgICAgKChmaXJzdENoaWxkID0gbmV4dEVmZmVjdCksXG4gICAgICAocm9vdCA9IGZpcnN0Q2hpbGQuY2hpbGQpLFxuICAgICAgMCAhPT0gKGZpcnN0Q2hpbGQuc3VidHJlZUZsYWdzICYgMTAyOCkgJiYgbnVsbCAhPT0gcm9vdClcbiAgICApXG4gICAgICAocm9vdC5yZXR1cm4gPSBmaXJzdENoaWxkKSwgKG5leHRFZmZlY3QgPSByb290KTtcbiAgICBlbHNlXG4gICAgICBmb3IgKDsgbnVsbCAhPT0gbmV4dEVmZmVjdDsgKSB7XG4gICAgICAgIGZpcnN0Q2hpbGQgPSBuZXh0RWZmZWN0O1xuICAgICAgICBmb2N1c05vZGUgPSBmaXJzdENoaWxkLmFsdGVybmF0ZTtcbiAgICAgICAgcm9vdCA9IGZpcnN0Q2hpbGQuZmxhZ3M7XG4gICAgICAgIHN3aXRjaCAoZmlyc3RDaGlsZC50YWcpIHtcbiAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIDExOlxuICAgICAgICAgIGNhc2UgMTU6XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICBpZiAoMCAhPT0gKHJvb3QgJiAxMDI0KSAmJiBudWxsICE9PSBmb2N1c05vZGUpIHtcbiAgICAgICAgICAgICAgcm9vdCA9IHZvaWQgMDtcbiAgICAgICAgICAgICAgSlNDb21waWxlcl90ZW1wID0gZmlyc3RDaGlsZDtcbiAgICAgICAgICAgICAgYW5jaG9yT2Zmc2V0ID0gZm9jdXNOb2RlLm1lbW9pemVkUHJvcHM7XG4gICAgICAgICAgICAgIGZvY3VzTm9kZSA9IGZvY3VzTm9kZS5tZW1vaXplZFN0YXRlO1xuICAgICAgICAgICAgICBzZWxlY3Rpb24gPSBKU0NvbXBpbGVyX3RlbXAuc3RhdGVOb2RlO1xuICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHZhciByZXNvbHZlZFByZXZQcm9wcyA9IHJlc29sdmVDbGFzc0NvbXBvbmVudFByb3BzKFxuICAgICAgICAgICAgICAgICAgSlNDb21waWxlcl90ZW1wLnR5cGUsXG4gICAgICAgICAgICAgICAgICBhbmNob3JPZmZzZXQsXG4gICAgICAgICAgICAgICAgICBKU0NvbXBpbGVyX3RlbXAuZWxlbWVudFR5cGUgPT09IEpTQ29tcGlsZXJfdGVtcC50eXBlXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICByb290ID0gc2VsZWN0aW9uLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKFxuICAgICAgICAgICAgICAgICAgcmVzb2x2ZWRQcmV2UHJvcHMsXG4gICAgICAgICAgICAgICAgICBmb2N1c05vZGVcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIHNlbGVjdGlvbi5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZSA9IHJvb3Q7XG4gICAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgY2FwdHVyZUNvbW1pdFBoYXNlRXJyb3IoXG4gICAgICAgICAgICAgICAgICBKU0NvbXBpbGVyX3RlbXAsXG4gICAgICAgICAgICAgICAgICBKU0NvbXBpbGVyX3RlbXAucmV0dXJuLFxuICAgICAgICAgICAgICAgICAgZXJyb3JcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICBpZiAoMCAhPT0gKHJvb3QgJiAxMDI0KSlcbiAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICgocm9vdCA9IGZpcnN0Q2hpbGQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pLFxuICAgICAgICAgICAgICAgIChKU0NvbXBpbGVyX3RlbXAgPSByb290Lm5vZGVUeXBlKSxcbiAgICAgICAgICAgICAgICA5ID09PSBKU0NvbXBpbGVyX3RlbXApXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICBjbGVhckNvbnRhaW5lclNwYXJpbmdseShyb290KTtcbiAgICAgICAgICAgICAgZWxzZSBpZiAoMSA9PT0gSlNDb21waWxlcl90ZW1wKVxuICAgICAgICAgICAgICAgIHN3aXRjaCAocm9vdC5ub2RlTmFtZSkge1xuICAgICAgICAgICAgICAgICAgY2FzZSBcIkhFQURcIjpcbiAgICAgICAgICAgICAgICAgIGNhc2UgXCJIVE1MXCI6XG4gICAgICAgICAgICAgICAgICBjYXNlIFwiQk9EWVwiOlxuICAgICAgICAgICAgICAgICAgICBjbGVhckNvbnRhaW5lclNwYXJpbmdseShyb290KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByb290LnRleHRDb250ZW50ID0gXCJcIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgY2FzZSAyNjpcbiAgICAgICAgICBjYXNlIDI3OlxuICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgY2FzZSAxNzpcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBpZiAoMCAhPT0gKHJvb3QgJiAxMDI0KSkgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxNjMpKTtcbiAgICAgICAgfVxuICAgICAgICByb290ID0gZmlyc3RDaGlsZC5zaWJsaW5nO1xuICAgICAgICBpZiAobnVsbCAhPT0gcm9vdCkge1xuICAgICAgICAgIHJvb3QucmV0dXJuID0gZmlyc3RDaGlsZC5yZXR1cm47XG4gICAgICAgICAgbmV4dEVmZmVjdCA9IHJvb3Q7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgbmV4dEVmZmVjdCA9IGZpcnN0Q2hpbGQucmV0dXJuO1xuICAgICAgfVxuICByZXNvbHZlZFByZXZQcm9wcyA9IHNob3VsZEZpcmVBZnRlckFjdGl2ZUluc3RhbmNlQmx1cjtcbiAgc2hvdWxkRmlyZUFmdGVyQWN0aXZlSW5zdGFuY2VCbHVyID0gITE7XG4gIHJldHVybiByZXNvbHZlZFByZXZQcm9wcztcbn1cbmZ1bmN0aW9uIGNvbW1pdExheW91dEVmZmVjdE9uRmliZXIoZmluaXNoZWRSb290LCBjdXJyZW50LCBmaW5pc2hlZFdvcmspIHtcbiAgdmFyIGZsYWdzID0gZmluaXNoZWRXb3JrLmZsYWdzO1xuICBzd2l0Y2ggKGZpbmlzaGVkV29yay50YWcpIHtcbiAgICBjYXNlIDA6XG4gICAgY2FzZSAxMTpcbiAgICBjYXNlIDE1OlxuICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZUxheW91dEVmZmVjdHMoZmluaXNoZWRSb290LCBmaW5pc2hlZFdvcmspO1xuICAgICAgZmxhZ3MgJiA0ICYmIGNvbW1pdEhvb2tFZmZlY3RMaXN0TW91bnQoNSwgZmluaXNoZWRXb3JrKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMTpcbiAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VMYXlvdXRFZmZlY3RzKGZpbmlzaGVkUm9vdCwgZmluaXNoZWRXb3JrKTtcbiAgICAgIGlmIChmbGFncyAmIDQpXG4gICAgICAgIGlmICgoKGZpbmlzaGVkUm9vdCA9IGZpbmlzaGVkV29yay5zdGF0ZU5vZGUpLCBudWxsID09PSBjdXJyZW50KSlcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgZmluaXNoZWRSb290LmNvbXBvbmVudERpZE1vdW50KCk7XG4gICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNhcHR1cmVDb21taXRQaGFzZUVycm9yKGZpbmlzaGVkV29yaywgZmluaXNoZWRXb3JrLnJldHVybiwgZXJyb3IpO1xuICAgICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgdmFyIHByZXZQcm9wcyA9IHJlc29sdmVDbGFzc0NvbXBvbmVudFByb3BzKFxuICAgICAgICAgICAgZmluaXNoZWRXb3JrLnR5cGUsXG4gICAgICAgICAgICBjdXJyZW50Lm1lbW9pemVkUHJvcHNcbiAgICAgICAgICApO1xuICAgICAgICAgIGN1cnJlbnQgPSBjdXJyZW50Lm1lbW9pemVkU3RhdGU7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGZpbmlzaGVkUm9vdC5jb21wb25lbnREaWRVcGRhdGUoXG4gICAgICAgICAgICAgIHByZXZQcm9wcyxcbiAgICAgICAgICAgICAgY3VycmVudCxcbiAgICAgICAgICAgICAgZmluaXNoZWRSb290Ll9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH0gY2F0Y2ggKGVycm9yJDExMSkge1xuICAgICAgICAgICAgY2FwdHVyZUNvbW1pdFBoYXNlRXJyb3IoXG4gICAgICAgICAgICAgIGZpbmlzaGVkV29yayxcbiAgICAgICAgICAgICAgZmluaXNoZWRXb3JrLnJldHVybixcbiAgICAgICAgICAgICAgZXJyb3IkMTExXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgZmxhZ3MgJiA2NCAmJiBjb21taXRDbGFzc0NhbGxiYWNrcyhmaW5pc2hlZFdvcmspO1xuICAgICAgZmxhZ3MgJiA1MTIgJiYgc2FmZWx5QXR0YWNoUmVmKGZpbmlzaGVkV29yaywgZmluaXNoZWRXb3JrLnJldHVybik7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDM6XG4gICAgICByZWN1cnNpdmVseVRyYXZlcnNlTGF5b3V0RWZmZWN0cyhmaW5pc2hlZFJvb3QsIGZpbmlzaGVkV29yayk7XG4gICAgICBpZiAoZmxhZ3MgJiA2NCAmJiAoKGZsYWdzID0gZmluaXNoZWRXb3JrLnVwZGF0ZVF1ZXVlKSwgbnVsbCAhPT0gZmxhZ3MpKSB7XG4gICAgICAgIGZpbmlzaGVkUm9vdCA9IG51bGw7XG4gICAgICAgIGlmIChudWxsICE9PSBmaW5pc2hlZFdvcmsuY2hpbGQpXG4gICAgICAgICAgc3dpdGNoIChmaW5pc2hlZFdvcmsuY2hpbGQudGFnKSB7XG4gICAgICAgICAgICBjYXNlIDI3OlxuICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICBmaW5pc2hlZFJvb3QgPSBmaW5pc2hlZFdvcmsuY2hpbGQuc3RhdGVOb2RlO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgZmluaXNoZWRSb290ID0gZmluaXNoZWRXb3JrLmNoaWxkLnN0YXRlTm9kZTtcbiAgICAgICAgICB9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY29tbWl0Q2FsbGJhY2tzKGZsYWdzLCBmaW5pc2hlZFJvb3QpO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgIGNhcHR1cmVDb21taXRQaGFzZUVycm9yKGZpbmlzaGVkV29yaywgZmluaXNoZWRXb3JrLnJldHVybiwgZXJyb3IpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlIDI2OlxuICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZUxheW91dEVmZmVjdHMoZmluaXNoZWRSb290LCBmaW5pc2hlZFdvcmspO1xuICAgICAgZmxhZ3MgJiA1MTIgJiYgc2FmZWx5QXR0YWNoUmVmKGZpbmlzaGVkV29yaywgZmluaXNoZWRXb3JrLnJldHVybik7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDI3OlxuICAgIGNhc2UgNTpcbiAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VMYXlvdXRFZmZlY3RzKGZpbmlzaGVkUm9vdCwgZmluaXNoZWRXb3JrKTtcbiAgICAgIG51bGwgPT09IGN1cnJlbnQgJiYgZmxhZ3MgJiA0ICYmIGNvbW1pdEhvc3RNb3VudChmaW5pc2hlZFdvcmspO1xuICAgICAgZmxhZ3MgJiA1MTIgJiYgc2FmZWx5QXR0YWNoUmVmKGZpbmlzaGVkV29yaywgZmluaXNoZWRXb3JrLnJldHVybik7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDEyOlxuICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZUxheW91dEVmZmVjdHMoZmluaXNoZWRSb290LCBmaW5pc2hlZFdvcmspO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxMzpcbiAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VMYXlvdXRFZmZlY3RzKGZpbmlzaGVkUm9vdCwgZmluaXNoZWRXb3JrKTtcbiAgICAgIGZsYWdzICYgNCAmJiBjb21taXRTdXNwZW5zZUh5ZHJhdGlvbkNhbGxiYWNrcyhmaW5pc2hlZFJvb3QsIGZpbmlzaGVkV29yayk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDIyOlxuICAgICAgcHJldlByb3BzID1cbiAgICAgICAgbnVsbCAhPT0gZmluaXNoZWRXb3JrLm1lbW9pemVkU3RhdGUgfHwgb2Zmc2NyZWVuU3VidHJlZUlzSGlkZGVuO1xuICAgICAgaWYgKCFwcmV2UHJvcHMpIHtcbiAgICAgICAgY3VycmVudCA9XG4gICAgICAgICAgKG51bGwgIT09IGN1cnJlbnQgJiYgbnVsbCAhPT0gY3VycmVudC5tZW1vaXplZFN0YXRlKSB8fFxuICAgICAgICAgIG9mZnNjcmVlblN1YnRyZWVXYXNIaWRkZW47XG4gICAgICAgIHZhciBwcmV2T2Zmc2NyZWVuU3VidHJlZUlzSGlkZGVuID0gb2Zmc2NyZWVuU3VidHJlZUlzSGlkZGVuLFxuICAgICAgICAgIHByZXZPZmZzY3JlZW5TdWJ0cmVlV2FzSGlkZGVuID0gb2Zmc2NyZWVuU3VidHJlZVdhc0hpZGRlbjtcbiAgICAgICAgb2Zmc2NyZWVuU3VidHJlZUlzSGlkZGVuID0gcHJldlByb3BzO1xuICAgICAgICAob2Zmc2NyZWVuU3VidHJlZVdhc0hpZGRlbiA9IGN1cnJlbnQpICYmICFwcmV2T2Zmc2NyZWVuU3VidHJlZVdhc0hpZGRlblxuICAgICAgICAgID8gcmVjdXJzaXZlbHlUcmF2ZXJzZVJlYXBwZWFyTGF5b3V0RWZmZWN0cyhcbiAgICAgICAgICAgICAgZmluaXNoZWRSb290LFxuICAgICAgICAgICAgICBmaW5pc2hlZFdvcmssXG4gICAgICAgICAgICAgIDAgIT09IChmaW5pc2hlZFdvcmsuc3VidHJlZUZsYWdzICYgODc3MilcbiAgICAgICAgICAgIClcbiAgICAgICAgICA6IHJlY3Vyc2l2ZWx5VHJhdmVyc2VMYXlvdXRFZmZlY3RzKGZpbmlzaGVkUm9vdCwgZmluaXNoZWRXb3JrKTtcbiAgICAgICAgb2Zmc2NyZWVuU3VidHJlZUlzSGlkZGVuID0gcHJldk9mZnNjcmVlblN1YnRyZWVJc0hpZGRlbjtcbiAgICAgICAgb2Zmc2NyZWVuU3VidHJlZVdhc0hpZGRlbiA9IHByZXZPZmZzY3JlZW5TdWJ0cmVlV2FzSGlkZGVuO1xuICAgICAgfVxuICAgICAgZmxhZ3MgJiA1MTIgJiZcbiAgICAgICAgKFwibWFudWFsXCIgPT09IGZpbmlzaGVkV29yay5tZW1vaXplZFByb3BzLm1vZGVcbiAgICAgICAgICA/IHNhZmVseUF0dGFjaFJlZihmaW5pc2hlZFdvcmssIGZpbmlzaGVkV29yay5yZXR1cm4pXG4gICAgICAgICAgOiBzYWZlbHlEZXRhY2hSZWYoZmluaXNoZWRXb3JrLCBmaW5pc2hlZFdvcmsucmV0dXJuKSk7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZUxheW91dEVmZmVjdHMoZmluaXNoZWRSb290LCBmaW5pc2hlZFdvcmspO1xuICB9XG59XG5mdW5jdGlvbiBkZXRhY2hGaWJlckFmdGVyRWZmZWN0cyhmaWJlcikge1xuICB2YXIgYWx0ZXJuYXRlID0gZmliZXIuYWx0ZXJuYXRlO1xuICBudWxsICE9PSBhbHRlcm5hdGUgJiZcbiAgICAoKGZpYmVyLmFsdGVybmF0ZSA9IG51bGwpLCBkZXRhY2hGaWJlckFmdGVyRWZmZWN0cyhhbHRlcm5hdGUpKTtcbiAgZmliZXIuY2hpbGQgPSBudWxsO1xuICBmaWJlci5kZWxldGlvbnMgPSBudWxsO1xuICBmaWJlci5zaWJsaW5nID0gbnVsbDtcbiAgNSA9PT0gZmliZXIudGFnICYmXG4gICAgKChhbHRlcm5hdGUgPSBmaWJlci5zdGF0ZU5vZGUpLFxuICAgIG51bGwgIT09IGFsdGVybmF0ZSAmJiBkZXRhY2hEZWxldGVkSW5zdGFuY2UoYWx0ZXJuYXRlKSk7XG4gIGZpYmVyLnN0YXRlTm9kZSA9IG51bGw7XG4gIGZpYmVyLnJldHVybiA9IG51bGw7XG4gIGZpYmVyLmRlcGVuZGVuY2llcyA9IG51bGw7XG4gIGZpYmVyLm1lbW9pemVkUHJvcHMgPSBudWxsO1xuICBmaWJlci5tZW1vaXplZFN0YXRlID0gbnVsbDtcbiAgZmliZXIucGVuZGluZ1Byb3BzID0gbnVsbDtcbiAgZmliZXIuc3RhdGVOb2RlID0gbnVsbDtcbiAgZmliZXIudXBkYXRlUXVldWUgPSBudWxsO1xufVxudmFyIGhvc3RQYXJlbnQgPSBudWxsLFxuICBob3N0UGFyZW50SXNDb250YWluZXIgPSAhMTtcbmZ1bmN0aW9uIHJlY3Vyc2l2ZWx5VHJhdmVyc2VEZWxldGlvbkVmZmVjdHMoXG4gIGZpbmlzaGVkUm9vdCxcbiAgbmVhcmVzdE1vdW50ZWRBbmNlc3RvcixcbiAgcGFyZW50XG4pIHtcbiAgZm9yIChwYXJlbnQgPSBwYXJlbnQuY2hpbGQ7IG51bGwgIT09IHBhcmVudDsgKVxuICAgIGNvbW1pdERlbGV0aW9uRWZmZWN0c09uRmliZXIoZmluaXNoZWRSb290LCBuZWFyZXN0TW91bnRlZEFuY2VzdG9yLCBwYXJlbnQpLFxuICAgICAgKHBhcmVudCA9IHBhcmVudC5zaWJsaW5nKTtcbn1cbmZ1bmN0aW9uIGNvbW1pdERlbGV0aW9uRWZmZWN0c09uRmliZXIoXG4gIGZpbmlzaGVkUm9vdCxcbiAgbmVhcmVzdE1vdW50ZWRBbmNlc3RvcixcbiAgZGVsZXRlZEZpYmVyXG4pIHtcbiAgaWYgKGluamVjdGVkSG9vayAmJiBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBpbmplY3RlZEhvb2sub25Db21taXRGaWJlclVubW91bnQpXG4gICAgdHJ5IHtcbiAgICAgIGluamVjdGVkSG9vay5vbkNvbW1pdEZpYmVyVW5tb3VudChyZW5kZXJlcklELCBkZWxldGVkRmliZXIpO1xuICAgIH0gY2F0Y2ggKGVycikge31cbiAgc3dpdGNoIChkZWxldGVkRmliZXIudGFnKSB7XG4gICAgY2FzZSAyNjpcbiAgICAgIG9mZnNjcmVlblN1YnRyZWVXYXNIaWRkZW4gfHxcbiAgICAgICAgc2FmZWx5RGV0YWNoUmVmKGRlbGV0ZWRGaWJlciwgbmVhcmVzdE1vdW50ZWRBbmNlc3Rvcik7XG4gICAgICByZWN1cnNpdmVseVRyYXZlcnNlRGVsZXRpb25FZmZlY3RzKFxuICAgICAgICBmaW5pc2hlZFJvb3QsXG4gICAgICAgIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IsXG4gICAgICAgIGRlbGV0ZWRGaWJlclxuICAgICAgKTtcbiAgICAgIGRlbGV0ZWRGaWJlci5tZW1vaXplZFN0YXRlXG4gICAgICAgID8gZGVsZXRlZEZpYmVyLm1lbW9pemVkU3RhdGUuY291bnQtLVxuICAgICAgICA6IGRlbGV0ZWRGaWJlci5zdGF0ZU5vZGUgJiZcbiAgICAgICAgICAoKGRlbGV0ZWRGaWJlciA9IGRlbGV0ZWRGaWJlci5zdGF0ZU5vZGUpLFxuICAgICAgICAgIGRlbGV0ZWRGaWJlci5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGRlbGV0ZWRGaWJlcikpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAyNzpcbiAgICAgIG9mZnNjcmVlblN1YnRyZWVXYXNIaWRkZW4gfHxcbiAgICAgICAgc2FmZWx5RGV0YWNoUmVmKGRlbGV0ZWRGaWJlciwgbmVhcmVzdE1vdW50ZWRBbmNlc3Rvcik7XG4gICAgICB2YXIgcHJldkhvc3RQYXJlbnQgPSBob3N0UGFyZW50LFxuICAgICAgICBwcmV2SG9zdFBhcmVudElzQ29udGFpbmVyID0gaG9zdFBhcmVudElzQ29udGFpbmVyO1xuICAgICAgaG9zdFBhcmVudCA9IGRlbGV0ZWRGaWJlci5zdGF0ZU5vZGU7XG4gICAgICByZWN1cnNpdmVseVRyYXZlcnNlRGVsZXRpb25FZmZlY3RzKFxuICAgICAgICBmaW5pc2hlZFJvb3QsXG4gICAgICAgIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IsXG4gICAgICAgIGRlbGV0ZWRGaWJlclxuICAgICAgKTtcbiAgICAgIGRlbGV0ZWRGaWJlciA9IGRlbGV0ZWRGaWJlci5zdGF0ZU5vZGU7XG4gICAgICBmb3IgKFxuICAgICAgICBuZWFyZXN0TW91bnRlZEFuY2VzdG9yID0gZGVsZXRlZEZpYmVyLmF0dHJpYnV0ZXM7XG4gICAgICAgIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IubGVuZ3RoO1xuXG4gICAgICApXG4gICAgICAgIGRlbGV0ZWRGaWJlci5yZW1vdmVBdHRyaWJ1dGVOb2RlKG5lYXJlc3RNb3VudGVkQW5jZXN0b3JbMF0pO1xuICAgICAgZGV0YWNoRGVsZXRlZEluc3RhbmNlKGRlbGV0ZWRGaWJlcik7XG4gICAgICBob3N0UGFyZW50ID0gcHJldkhvc3RQYXJlbnQ7XG4gICAgICBob3N0UGFyZW50SXNDb250YWluZXIgPSBwcmV2SG9zdFBhcmVudElzQ29udGFpbmVyO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSA1OlxuICAgICAgb2Zmc2NyZWVuU3VidHJlZVdhc0hpZGRlbiB8fFxuICAgICAgICBzYWZlbHlEZXRhY2hSZWYoZGVsZXRlZEZpYmVyLCBuZWFyZXN0TW91bnRlZEFuY2VzdG9yKTtcbiAgICBjYXNlIDY6XG4gICAgICBwcmV2SG9zdFBhcmVudElzQ29udGFpbmVyID0gaG9zdFBhcmVudDtcbiAgICAgIHZhciBwcmV2SG9zdFBhcmVudElzQ29udGFpbmVyJDExOSA9IGhvc3RQYXJlbnRJc0NvbnRhaW5lcjtcbiAgICAgIGhvc3RQYXJlbnQgPSBudWxsO1xuICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZURlbGV0aW9uRWZmZWN0cyhcbiAgICAgICAgZmluaXNoZWRSb290LFxuICAgICAgICBuZWFyZXN0TW91bnRlZEFuY2VzdG9yLFxuICAgICAgICBkZWxldGVkRmliZXJcbiAgICAgICk7XG4gICAgICBob3N0UGFyZW50ID0gcHJldkhvc3RQYXJlbnRJc0NvbnRhaW5lcjtcbiAgICAgIGhvc3RQYXJlbnRJc0NvbnRhaW5lciA9IHByZXZIb3N0UGFyZW50SXNDb250YWluZXIkMTE5O1xuICAgICAgaWYgKG51bGwgIT09IGhvc3RQYXJlbnQpXG4gICAgICAgIGlmIChob3N0UGFyZW50SXNDb250YWluZXIpXG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIChmaW5pc2hlZFJvb3QgPSBob3N0UGFyZW50KSxcbiAgICAgICAgICAgICAgKHByZXZIb3N0UGFyZW50ID0gZGVsZXRlZEZpYmVyLnN0YXRlTm9kZSksXG4gICAgICAgICAgICAgIDggPT09IGZpbmlzaGVkUm9vdC5ub2RlVHlwZVxuICAgICAgICAgICAgICAgID8gZmluaXNoZWRSb290LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQocHJldkhvc3RQYXJlbnQpXG4gICAgICAgICAgICAgICAgOiBmaW5pc2hlZFJvb3QucmVtb3ZlQ2hpbGQocHJldkhvc3RQYXJlbnQpO1xuICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBjYXB0dXJlQ29tbWl0UGhhc2VFcnJvcihcbiAgICAgICAgICAgICAgZGVsZXRlZEZpYmVyLFxuICAgICAgICAgICAgICBuZWFyZXN0TW91bnRlZEFuY2VzdG9yLFxuICAgICAgICAgICAgICBlcnJvclxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIGVsc2VcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgaG9zdFBhcmVudC5yZW1vdmVDaGlsZChkZWxldGVkRmliZXIuc3RhdGVOb2RlKTtcbiAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY2FwdHVyZUNvbW1pdFBoYXNlRXJyb3IoXG4gICAgICAgICAgICAgIGRlbGV0ZWRGaWJlcixcbiAgICAgICAgICAgICAgbmVhcmVzdE1vdW50ZWRBbmNlc3RvcixcbiAgICAgICAgICAgICAgZXJyb3JcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxODpcbiAgICAgIG51bGwgIT09IGhvc3RQYXJlbnQgJiZcbiAgICAgICAgKGhvc3RQYXJlbnRJc0NvbnRhaW5lclxuICAgICAgICAgID8gKChuZWFyZXN0TW91bnRlZEFuY2VzdG9yID0gaG9zdFBhcmVudCksXG4gICAgICAgICAgICAoZGVsZXRlZEZpYmVyID0gZGVsZXRlZEZpYmVyLnN0YXRlTm9kZSksXG4gICAgICAgICAgICA4ID09PSBuZWFyZXN0TW91bnRlZEFuY2VzdG9yLm5vZGVUeXBlXG4gICAgICAgICAgICAgID8gY2xlYXJTdXNwZW5zZUJvdW5kYXJ5KFxuICAgICAgICAgICAgICAgICAgbmVhcmVzdE1vdW50ZWRBbmNlc3Rvci5wYXJlbnROb2RlLFxuICAgICAgICAgICAgICAgICAgZGVsZXRlZEZpYmVyXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICA6IDEgPT09IG5lYXJlc3RNb3VudGVkQW5jZXN0b3Iubm9kZVR5cGUgJiZcbiAgICAgICAgICAgICAgICBjbGVhclN1c3BlbnNlQm91bmRhcnkobmVhcmVzdE1vdW50ZWRBbmNlc3RvciwgZGVsZXRlZEZpYmVyKSxcbiAgICAgICAgICAgIHJldHJ5SWZCbG9ja2VkT24obmVhcmVzdE1vdW50ZWRBbmNlc3RvcikpXG4gICAgICAgICAgOiBjbGVhclN1c3BlbnNlQm91bmRhcnkoaG9zdFBhcmVudCwgZGVsZXRlZEZpYmVyLnN0YXRlTm9kZSkpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSA0OlxuICAgICAgcHJldkhvc3RQYXJlbnQgPSBob3N0UGFyZW50O1xuICAgICAgcHJldkhvc3RQYXJlbnRJc0NvbnRhaW5lciA9IGhvc3RQYXJlbnRJc0NvbnRhaW5lcjtcbiAgICAgIGhvc3RQYXJlbnQgPSBkZWxldGVkRmliZXIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87XG4gICAgICBob3N0UGFyZW50SXNDb250YWluZXIgPSAhMDtcbiAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VEZWxldGlvbkVmZmVjdHMoXG4gICAgICAgIGZpbmlzaGVkUm9vdCxcbiAgICAgICAgbmVhcmVzdE1vdW50ZWRBbmNlc3RvcixcbiAgICAgICAgZGVsZXRlZEZpYmVyXG4gICAgICApO1xuICAgICAgaG9zdFBhcmVudCA9IHByZXZIb3N0UGFyZW50O1xuICAgICAgaG9zdFBhcmVudElzQ29udGFpbmVyID0gcHJldkhvc3RQYXJlbnRJc0NvbnRhaW5lcjtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMDpcbiAgICBjYXNlIDExOlxuICAgIGNhc2UgMTQ6XG4gICAgY2FzZSAxNTpcbiAgICAgIG9mZnNjcmVlblN1YnRyZWVXYXNIaWRkZW4gfHxcbiAgICAgICAgY29tbWl0SG9va0VmZmVjdExpc3RVbm1vdW50KDIsIGRlbGV0ZWRGaWJlciwgbmVhcmVzdE1vdW50ZWRBbmNlc3Rvcik7XG4gICAgICBvZmZzY3JlZW5TdWJ0cmVlV2FzSGlkZGVuIHx8XG4gICAgICAgIGNvbW1pdEhvb2tFZmZlY3RMaXN0VW5tb3VudCg0LCBkZWxldGVkRmliZXIsIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IpO1xuICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZURlbGV0aW9uRWZmZWN0cyhcbiAgICAgICAgZmluaXNoZWRSb290LFxuICAgICAgICBuZWFyZXN0TW91bnRlZEFuY2VzdG9yLFxuICAgICAgICBkZWxldGVkRmliZXJcbiAgICAgICk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDE6XG4gICAgICBvZmZzY3JlZW5TdWJ0cmVlV2FzSGlkZGVuIHx8XG4gICAgICAgIChzYWZlbHlEZXRhY2hSZWYoZGVsZXRlZEZpYmVyLCBuZWFyZXN0TW91bnRlZEFuY2VzdG9yKSxcbiAgICAgICAgKHByZXZIb3N0UGFyZW50ID0gZGVsZXRlZEZpYmVyLnN0YXRlTm9kZSksXG4gICAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHByZXZIb3N0UGFyZW50LmNvbXBvbmVudFdpbGxVbm1vdW50ICYmXG4gICAgICAgICAgc2FmZWx5Q2FsbENvbXBvbmVudFdpbGxVbm1vdW50KFxuICAgICAgICAgICAgZGVsZXRlZEZpYmVyLFxuICAgICAgICAgICAgbmVhcmVzdE1vdW50ZWRBbmNlc3RvcixcbiAgICAgICAgICAgIHByZXZIb3N0UGFyZW50XG4gICAgICAgICAgKSk7XG4gICAgICByZWN1cnNpdmVseVRyYXZlcnNlRGVsZXRpb25FZmZlY3RzKFxuICAgICAgICBmaW5pc2hlZFJvb3QsXG4gICAgICAgIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IsXG4gICAgICAgIGRlbGV0ZWRGaWJlclxuICAgICAgKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMjE6XG4gICAgICByZWN1cnNpdmVseVRyYXZlcnNlRGVsZXRpb25FZmZlY3RzKFxuICAgICAgICBmaW5pc2hlZFJvb3QsXG4gICAgICAgIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IsXG4gICAgICAgIGRlbGV0ZWRGaWJlclxuICAgICAgKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMjI6XG4gICAgICBvZmZzY3JlZW5TdWJ0cmVlV2FzSGlkZGVuIHx8XG4gICAgICAgIHNhZmVseURldGFjaFJlZihkZWxldGVkRmliZXIsIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IpO1xuICAgICAgb2Zmc2NyZWVuU3VidHJlZVdhc0hpZGRlbiA9XG4gICAgICAgIChwcmV2SG9zdFBhcmVudCA9IG9mZnNjcmVlblN1YnRyZWVXYXNIaWRkZW4pIHx8XG4gICAgICAgIG51bGwgIT09IGRlbGV0ZWRGaWJlci5tZW1vaXplZFN0YXRlO1xuICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZURlbGV0aW9uRWZmZWN0cyhcbiAgICAgICAgZmluaXNoZWRSb290LFxuICAgICAgICBuZWFyZXN0TW91bnRlZEFuY2VzdG9yLFxuICAgICAgICBkZWxldGVkRmliZXJcbiAgICAgICk7XG4gICAgICBvZmZzY3JlZW5TdWJ0cmVlV2FzSGlkZGVuID0gcHJldkhvc3RQYXJlbnQ7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZURlbGV0aW9uRWZmZWN0cyhcbiAgICAgICAgZmluaXNoZWRSb290LFxuICAgICAgICBuZWFyZXN0TW91bnRlZEFuY2VzdG9yLFxuICAgICAgICBkZWxldGVkRmliZXJcbiAgICAgICk7XG4gIH1cbn1cbmZ1bmN0aW9uIGNvbW1pdFN1c3BlbnNlSHlkcmF0aW9uQ2FsbGJhY2tzKGZpbmlzaGVkUm9vdCwgZmluaXNoZWRXb3JrKSB7XG4gIGlmIChcbiAgICBudWxsID09PSBmaW5pc2hlZFdvcmsubWVtb2l6ZWRTdGF0ZSAmJlxuICAgICgoZmluaXNoZWRSb290ID0gZmluaXNoZWRXb3JrLmFsdGVybmF0ZSksXG4gICAgbnVsbCAhPT0gZmluaXNoZWRSb290ICYmXG4gICAgICAoKGZpbmlzaGVkUm9vdCA9IGZpbmlzaGVkUm9vdC5tZW1vaXplZFN0YXRlKSxcbiAgICAgIG51bGwgIT09IGZpbmlzaGVkUm9vdCAmJlxuICAgICAgICAoKGZpbmlzaGVkUm9vdCA9IGZpbmlzaGVkUm9vdC5kZWh5ZHJhdGVkKSwgbnVsbCAhPT0gZmluaXNoZWRSb290KSkpXG4gIClcbiAgICB0cnkge1xuICAgICAgcmV0cnlJZkJsb2NrZWRPbihmaW5pc2hlZFJvb3QpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjYXB0dXJlQ29tbWl0UGhhc2VFcnJvcihmaW5pc2hlZFdvcmssIGZpbmlzaGVkV29yay5yZXR1cm4sIGVycm9yKTtcbiAgICB9XG59XG5mdW5jdGlvbiBnZXRSZXRyeUNhY2hlKGZpbmlzaGVkV29yaykge1xuICBzd2l0Y2ggKGZpbmlzaGVkV29yay50YWcpIHtcbiAgICBjYXNlIDEzOlxuICAgIGNhc2UgMTk6XG4gICAgICB2YXIgcmV0cnlDYWNoZSA9IGZpbmlzaGVkV29yay5zdGF0ZU5vZGU7XG4gICAgICBudWxsID09PSByZXRyeUNhY2hlICYmXG4gICAgICAgIChyZXRyeUNhY2hlID0gZmluaXNoZWRXb3JrLnN0YXRlTm9kZSA9IG5ldyBQb3NzaWJseVdlYWtTZXQoKSk7XG4gICAgICByZXR1cm4gcmV0cnlDYWNoZTtcbiAgICBjYXNlIDIyOlxuICAgICAgcmV0dXJuIChcbiAgICAgICAgKGZpbmlzaGVkV29yayA9IGZpbmlzaGVkV29yay5zdGF0ZU5vZGUpLFxuICAgICAgICAocmV0cnlDYWNoZSA9IGZpbmlzaGVkV29yay5fcmV0cnlDYWNoZSksXG4gICAgICAgIG51bGwgPT09IHJldHJ5Q2FjaGUgJiZcbiAgICAgICAgICAocmV0cnlDYWNoZSA9IGZpbmlzaGVkV29yay5fcmV0cnlDYWNoZSA9IG5ldyBQb3NzaWJseVdlYWtTZXQoKSksXG4gICAgICAgIHJldHJ5Q2FjaGVcbiAgICAgICk7XG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNDM1LCBmaW5pc2hlZFdvcmsudGFnKSk7XG4gIH1cbn1cbmZ1bmN0aW9uIGF0dGFjaFN1c3BlbnNlUmV0cnlMaXN0ZW5lcnMoZmluaXNoZWRXb3JrLCB3YWtlYWJsZXMpIHtcbiAgdmFyIHJldHJ5Q2FjaGUgPSBnZXRSZXRyeUNhY2hlKGZpbmlzaGVkV29yayk7XG4gIHdha2VhYmxlcy5mb3JFYWNoKGZ1bmN0aW9uICh3YWtlYWJsZSkge1xuICAgIHZhciByZXRyeSA9IHJlc29sdmVSZXRyeVdha2VhYmxlLmJpbmQobnVsbCwgZmluaXNoZWRXb3JrLCB3YWtlYWJsZSk7XG4gICAgcmV0cnlDYWNoZS5oYXMod2FrZWFibGUpIHx8XG4gICAgICAocmV0cnlDYWNoZS5hZGQod2FrZWFibGUpLCB3YWtlYWJsZS50aGVuKHJldHJ5LCByZXRyeSkpO1xuICB9KTtcbn1cbmZ1bmN0aW9uIHJlY3Vyc2l2ZWx5VHJhdmVyc2VNdXRhdGlvbkVmZmVjdHMocm9vdCRqc2NvbXAkMCwgcGFyZW50RmliZXIpIHtcbiAgdmFyIGRlbGV0aW9ucyA9IHBhcmVudEZpYmVyLmRlbGV0aW9ucztcbiAgaWYgKG51bGwgIT09IGRlbGV0aW9ucylcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRlbGV0aW9ucy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGNoaWxkVG9EZWxldGUgPSBkZWxldGlvbnNbaV0sXG4gICAgICAgIHJvb3QgPSByb290JGpzY29tcCQwLFxuICAgICAgICByZXR1cm5GaWJlciA9IHBhcmVudEZpYmVyLFxuICAgICAgICBwYXJlbnQgPSByZXR1cm5GaWJlcjtcbiAgICAgIGE6IGZvciAoOyBudWxsICE9PSBwYXJlbnQ7ICkge1xuICAgICAgICBzd2l0Y2ggKHBhcmVudC50YWcpIHtcbiAgICAgICAgICBjYXNlIDI3OlxuICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgIGhvc3RQYXJlbnQgPSBwYXJlbnQuc3RhdGVOb2RlO1xuICAgICAgICAgICAgaG9zdFBhcmVudElzQ29udGFpbmVyID0gITE7XG4gICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgIGhvc3RQYXJlbnQgPSBwYXJlbnQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87XG4gICAgICAgICAgICBob3N0UGFyZW50SXNDb250YWluZXIgPSAhMDtcbiAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgaG9zdFBhcmVudCA9IHBhcmVudC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztcbiAgICAgICAgICAgIGhvc3RQYXJlbnRJc0NvbnRhaW5lciA9ICEwO1xuICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgfVxuICAgICAgICBwYXJlbnQgPSBwYXJlbnQucmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKG51bGwgPT09IGhvc3RQYXJlbnQpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTYwKSk7XG4gICAgICBjb21taXREZWxldGlvbkVmZmVjdHNPbkZpYmVyKHJvb3QsIHJldHVybkZpYmVyLCBjaGlsZFRvRGVsZXRlKTtcbiAgICAgIGhvc3RQYXJlbnQgPSBudWxsO1xuICAgICAgaG9zdFBhcmVudElzQ29udGFpbmVyID0gITE7XG4gICAgICByb290ID0gY2hpbGRUb0RlbGV0ZS5hbHRlcm5hdGU7XG4gICAgICBudWxsICE9PSByb290ICYmIChyb290LnJldHVybiA9IG51bGwpO1xuICAgICAgY2hpbGRUb0RlbGV0ZS5yZXR1cm4gPSBudWxsO1xuICAgIH1cbiAgaWYgKHBhcmVudEZpYmVyLnN1YnRyZWVGbGFncyAmIDEzODc4KVxuICAgIGZvciAocGFyZW50RmliZXIgPSBwYXJlbnRGaWJlci5jaGlsZDsgbnVsbCAhPT0gcGFyZW50RmliZXI7IClcbiAgICAgIGNvbW1pdE11dGF0aW9uRWZmZWN0c09uRmliZXIocGFyZW50RmliZXIsIHJvb3QkanNjb21wJDApLFxuICAgICAgICAocGFyZW50RmliZXIgPSBwYXJlbnRGaWJlci5zaWJsaW5nKTtcbn1cbnZhciBjdXJyZW50SG9pc3RhYmxlUm9vdCA9IG51bGw7XG5mdW5jdGlvbiBjb21taXRNdXRhdGlvbkVmZmVjdHNPbkZpYmVyKGZpbmlzaGVkV29yaywgcm9vdCkge1xuICB2YXIgY3VycmVudCA9IGZpbmlzaGVkV29yay5hbHRlcm5hdGUsXG4gICAgZmxhZ3MgPSBmaW5pc2hlZFdvcmsuZmxhZ3M7XG4gIHN3aXRjaCAoZmluaXNoZWRXb3JrLnRhZykge1xuICAgIGNhc2UgMDpcbiAgICBjYXNlIDExOlxuICAgIGNhc2UgMTQ6XG4gICAgY2FzZSAxNTpcbiAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VNdXRhdGlvbkVmZmVjdHMocm9vdCwgZmluaXNoZWRXb3JrKTtcbiAgICAgIGNvbW1pdFJlY29uY2lsaWF0aW9uRWZmZWN0cyhmaW5pc2hlZFdvcmspO1xuICAgICAgZmxhZ3MgJiA0ICYmXG4gICAgICAgIChjb21taXRIb29rRWZmZWN0TGlzdFVubW91bnQoMywgZmluaXNoZWRXb3JrLCBmaW5pc2hlZFdvcmsucmV0dXJuKSxcbiAgICAgICAgY29tbWl0SG9va0VmZmVjdExpc3RNb3VudCgzLCBmaW5pc2hlZFdvcmspLFxuICAgICAgICBjb21taXRIb29rRWZmZWN0TGlzdFVubW91bnQoNSwgZmluaXNoZWRXb3JrLCBmaW5pc2hlZFdvcmsucmV0dXJuKSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDE6XG4gICAgICByZWN1cnNpdmVseVRyYXZlcnNlTXV0YXRpb25FZmZlY3RzKHJvb3QsIGZpbmlzaGVkV29yayk7XG4gICAgICBjb21taXRSZWNvbmNpbGlhdGlvbkVmZmVjdHMoZmluaXNoZWRXb3JrKTtcbiAgICAgIGZsYWdzICYgNTEyICYmXG4gICAgICAgIChvZmZzY3JlZW5TdWJ0cmVlV2FzSGlkZGVuIHx8XG4gICAgICAgICAgbnVsbCA9PT0gY3VycmVudCB8fFxuICAgICAgICAgIHNhZmVseURldGFjaFJlZihjdXJyZW50LCBjdXJyZW50LnJldHVybikpO1xuICAgICAgZmxhZ3MgJiA2NCAmJlxuICAgICAgICBvZmZzY3JlZW5TdWJ0cmVlSXNIaWRkZW4gJiZcbiAgICAgICAgKChmaW5pc2hlZFdvcmsgPSBmaW5pc2hlZFdvcmsudXBkYXRlUXVldWUpLFxuICAgICAgICBudWxsICE9PSBmaW5pc2hlZFdvcmsgJiZcbiAgICAgICAgICAoKGZsYWdzID0gZmluaXNoZWRXb3JrLmNhbGxiYWNrcyksXG4gICAgICAgICAgbnVsbCAhPT0gZmxhZ3MgJiZcbiAgICAgICAgICAgICgoY3VycmVudCA9IGZpbmlzaGVkV29yay5zaGFyZWQuaGlkZGVuQ2FsbGJhY2tzKSxcbiAgICAgICAgICAgIChmaW5pc2hlZFdvcmsuc2hhcmVkLmhpZGRlbkNhbGxiYWNrcyA9XG4gICAgICAgICAgICAgIG51bGwgPT09IGN1cnJlbnQgPyBmbGFncyA6IGN1cnJlbnQuY29uY2F0KGZsYWdzKSkpKSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDI2OlxuICAgICAgdmFyIGhvaXN0YWJsZVJvb3QgPSBjdXJyZW50SG9pc3RhYmxlUm9vdDtcbiAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VNdXRhdGlvbkVmZmVjdHMocm9vdCwgZmluaXNoZWRXb3JrKTtcbiAgICAgIGNvbW1pdFJlY29uY2lsaWF0aW9uRWZmZWN0cyhmaW5pc2hlZFdvcmspO1xuICAgICAgZmxhZ3MgJiA1MTIgJiZcbiAgICAgICAgKG9mZnNjcmVlblN1YnRyZWVXYXNIaWRkZW4gfHxcbiAgICAgICAgICBudWxsID09PSBjdXJyZW50IHx8XG4gICAgICAgICAgc2FmZWx5RGV0YWNoUmVmKGN1cnJlbnQsIGN1cnJlbnQucmV0dXJuKSk7XG4gICAgICBpZiAoZmxhZ3MgJiA0KSB7XG4gICAgICAgIHZhciBjdXJyZW50UmVzb3VyY2UgPSBudWxsICE9PSBjdXJyZW50ID8gY3VycmVudC5tZW1vaXplZFN0YXRlIDogbnVsbDtcbiAgICAgICAgZmxhZ3MgPSBmaW5pc2hlZFdvcmsubWVtb2l6ZWRTdGF0ZTtcbiAgICAgICAgaWYgKG51bGwgPT09IGN1cnJlbnQpXG4gICAgICAgICAgaWYgKG51bGwgPT09IGZsYWdzKVxuICAgICAgICAgICAgaWYgKG51bGwgPT09IGZpbmlzaGVkV29yay5zdGF0ZU5vZGUpIHtcbiAgICAgICAgICAgICAgYToge1xuICAgICAgICAgICAgICAgIGZsYWdzID0gZmluaXNoZWRXb3JrLnR5cGU7XG4gICAgICAgICAgICAgICAgY3VycmVudCA9IGZpbmlzaGVkV29yay5tZW1vaXplZFByb3BzO1xuICAgICAgICAgICAgICAgIGhvaXN0YWJsZVJvb3QgPSBob2lzdGFibGVSb290Lm93bmVyRG9jdW1lbnQgfHwgaG9pc3RhYmxlUm9vdDtcbiAgICAgICAgICAgICAgICBiOiBzd2l0Y2ggKGZsYWdzKSB7XG4gICAgICAgICAgICAgICAgICBjYXNlIFwidGl0bGVcIjpcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFJlc291cmNlID1cbiAgICAgICAgICAgICAgICAgICAgICBob2lzdGFibGVSb290LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwidGl0bGVcIilbMF07XG4gICAgICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgICAhY3VycmVudFJlc291cmNlIHx8XG4gICAgICAgICAgICAgICAgICAgICAgY3VycmVudFJlc291cmNlW2ludGVybmFsSG9pc3RhYmxlTWFya2VyXSB8fFxuICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRSZXNvdXJjZVtpbnRlcm5hbEluc3RhbmNlS2V5XSB8fFxuICAgICAgICAgICAgICAgICAgICAgIFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiA9PT1cbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRSZXNvdXJjZS5uYW1lc3BhY2VVUkkgfHxcbiAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50UmVzb3VyY2UuaGFzQXR0cmlidXRlKFwiaXRlbXByb3BcIilcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgIChjdXJyZW50UmVzb3VyY2UgPSBob2lzdGFibGVSb290LmNyZWF0ZUVsZW1lbnQoZmxhZ3MpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGhvaXN0YWJsZVJvb3QuaGVhZC5pbnNlcnRCZWZvcmUoXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRSZXNvdXJjZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaG9pc3RhYmxlUm9vdC5xdWVyeVNlbGVjdG9yKFwiaGVhZCA+IHRpdGxlXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICBzZXRJbml0aWFsUHJvcGVydGllcyhjdXJyZW50UmVzb3VyY2UsIGZsYWdzLCBjdXJyZW50KTtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFJlc291cmNlW2ludGVybmFsSW5zdGFuY2VLZXldID0gZmluaXNoZWRXb3JrO1xuICAgICAgICAgICAgICAgICAgICBtYXJrTm9kZUFzSG9pc3RhYmxlKGN1cnJlbnRSZXNvdXJjZSk7XG4gICAgICAgICAgICAgICAgICAgIGZsYWdzID0gY3VycmVudFJlc291cmNlO1xuICAgICAgICAgICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgICAgICAgICAgY2FzZSBcImxpbmtcIjpcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1heWJlTm9kZXMgPSBnZXRIeWRyYXRhYmxlSG9pc3RhYmxlQ2FjaGUoXG4gICAgICAgICAgICAgICAgICAgICAgXCJsaW5rXCIsXG4gICAgICAgICAgICAgICAgICAgICAgXCJocmVmXCIsXG4gICAgICAgICAgICAgICAgICAgICAgaG9pc3RhYmxlUm9vdFxuICAgICAgICAgICAgICAgICAgICApLmdldChmbGFncyArIChjdXJyZW50LmhyZWYgfHwgXCJcIikpO1xuICAgICAgICAgICAgICAgICAgICBpZiAobWF5YmVOb2RlcylcbiAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1heWJlTm9kZXMubGVuZ3RoOyBpKyspXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICgoY3VycmVudFJlc291cmNlID0gbWF5YmVOb2Rlc1tpXSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRSZXNvdXJjZS5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpID09PVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChudWxsID09IGN1cnJlbnQuaHJlZiA/IG51bGwgOiBjdXJyZW50LmhyZWYpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFJlc291cmNlLmdldEF0dHJpYnV0ZShcInJlbFwiKSA9PT1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChudWxsID09IGN1cnJlbnQucmVsID8gbnVsbCA6IGN1cnJlbnQucmVsKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRSZXNvdXJjZS5nZXRBdHRyaWJ1dGUoXCJ0aXRsZVwiKSA9PT1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChudWxsID09IGN1cnJlbnQudGl0bGUgPyBudWxsIDogY3VycmVudC50aXRsZSkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50UmVzb3VyY2UuZ2V0QXR0cmlidXRlKFwiY3Jvc3NvcmlnaW5cIikgPT09XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAobnVsbCA9PSBjdXJyZW50LmNyb3NzT3JpZ2luXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gbnVsbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGN1cnJlbnQuY3Jvc3NPcmlnaW4pKVxuICAgICAgICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIG1heWJlTm9kZXMuc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhayBiO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50UmVzb3VyY2UgPSBob2lzdGFibGVSb290LmNyZWF0ZUVsZW1lbnQoZmxhZ3MpO1xuICAgICAgICAgICAgICAgICAgICBzZXRJbml0aWFsUHJvcGVydGllcyhjdXJyZW50UmVzb3VyY2UsIGZsYWdzLCBjdXJyZW50KTtcbiAgICAgICAgICAgICAgICAgICAgaG9pc3RhYmxlUm9vdC5oZWFkLmFwcGVuZENoaWxkKGN1cnJlbnRSZXNvdXJjZSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgY2FzZSBcIm1ldGFcIjpcbiAgICAgICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICAgIChtYXliZU5vZGVzID0gZ2V0SHlkcmF0YWJsZUhvaXN0YWJsZUNhY2hlKFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJtZXRhXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImNvbnRlbnRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGhvaXN0YWJsZVJvb3RcbiAgICAgICAgICAgICAgICAgICAgICApLmdldChmbGFncyArIChjdXJyZW50LmNvbnRlbnQgfHwgXCJcIikpKVxuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IG1heWJlTm9kZXMubGVuZ3RoOyBpKyspXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICgoY3VycmVudFJlc291cmNlID0gbWF5YmVOb2Rlc1tpXSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRSZXNvdXJjZS5nZXRBdHRyaWJ1dGUoXCJjb250ZW50XCIpID09PVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChudWxsID09IGN1cnJlbnQuY29udGVudFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBudWxsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IFwiXCIgKyBjdXJyZW50LmNvbnRlbnQpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFJlc291cmNlLmdldEF0dHJpYnV0ZShcIm5hbWVcIikgPT09XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAobnVsbCA9PSBjdXJyZW50Lm5hbWUgPyBudWxsIDogY3VycmVudC5uYW1lKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRSZXNvdXJjZS5nZXRBdHRyaWJ1dGUoXCJwcm9wZXJ0eVwiKSA9PT1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChudWxsID09IGN1cnJlbnQucHJvcGVydHlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBudWxsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogY3VycmVudC5wcm9wZXJ0eSkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50UmVzb3VyY2UuZ2V0QXR0cmlidXRlKFwiaHR0cC1lcXVpdlwiKSA9PT1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChudWxsID09IGN1cnJlbnQuaHR0cEVxdWl2XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gbnVsbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGN1cnJlbnQuaHR0cEVxdWl2KSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRSZXNvdXJjZS5nZXRBdHRyaWJ1dGUoXCJjaGFyc2V0XCIpID09PVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKG51bGwgPT0gY3VycmVudC5jaGFyU2V0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gbnVsbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGN1cnJlbnQuY2hhclNldCkpXG4gICAgICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbWF5YmVOb2Rlcy5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrIGI7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRSZXNvdXJjZSA9IGhvaXN0YWJsZVJvb3QuY3JlYXRlRWxlbWVudChmbGFncyk7XG4gICAgICAgICAgICAgICAgICAgIHNldEluaXRpYWxQcm9wZXJ0aWVzKGN1cnJlbnRSZXNvdXJjZSwgZmxhZ3MsIGN1cnJlbnQpO1xuICAgICAgICAgICAgICAgICAgICBob2lzdGFibGVSb290LmhlYWQuYXBwZW5kQ2hpbGQoY3VycmVudFJlc291cmNlKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDQ2OCwgZmxhZ3MpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY3VycmVudFJlc291cmNlW2ludGVybmFsSW5zdGFuY2VLZXldID0gZmluaXNoZWRXb3JrO1xuICAgICAgICAgICAgICAgIG1hcmtOb2RlQXNIb2lzdGFibGUoY3VycmVudFJlc291cmNlKTtcbiAgICAgICAgICAgICAgICBmbGFncyA9IGN1cnJlbnRSZXNvdXJjZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBmaW5pc2hlZFdvcmsuc3RhdGVOb2RlID0gZmxhZ3M7XG4gICAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgICAgbW91bnRIb2lzdGFibGUoXG4gICAgICAgICAgICAgICAgaG9pc3RhYmxlUm9vdCxcbiAgICAgICAgICAgICAgICBmaW5pc2hlZFdvcmsudHlwZSxcbiAgICAgICAgICAgICAgICBmaW5pc2hlZFdvcmsuc3RhdGVOb2RlXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgZWxzZVxuICAgICAgICAgICAgZmluaXNoZWRXb3JrLnN0YXRlTm9kZSA9IGFjcXVpcmVSZXNvdXJjZShcbiAgICAgICAgICAgICAgaG9pc3RhYmxlUm9vdCxcbiAgICAgICAgICAgICAgZmxhZ3MsXG4gICAgICAgICAgICAgIGZpbmlzaGVkV29yay5tZW1vaXplZFByb3BzXG4gICAgICAgICAgICApO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgY3VycmVudFJlc291cmNlICE9PSBmbGFnc1xuICAgICAgICAgICAgPyAobnVsbCA9PT0gY3VycmVudFJlc291cmNlXG4gICAgICAgICAgICAgICAgPyBudWxsICE9PSBjdXJyZW50LnN0YXRlTm9kZSAmJlxuICAgICAgICAgICAgICAgICAgKChjdXJyZW50ID0gY3VycmVudC5zdGF0ZU5vZGUpLFxuICAgICAgICAgICAgICAgICAgY3VycmVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGN1cnJlbnQpKVxuICAgICAgICAgICAgICAgIDogY3VycmVudFJlc291cmNlLmNvdW50LS0sXG4gICAgICAgICAgICAgIG51bGwgPT09IGZsYWdzXG4gICAgICAgICAgICAgICAgPyBtb3VudEhvaXN0YWJsZShcbiAgICAgICAgICAgICAgICAgICAgaG9pc3RhYmxlUm9vdCxcbiAgICAgICAgICAgICAgICAgICAgZmluaXNoZWRXb3JrLnR5cGUsXG4gICAgICAgICAgICAgICAgICAgIGZpbmlzaGVkV29yay5zdGF0ZU5vZGVcbiAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICA6IGFjcXVpcmVSZXNvdXJjZShcbiAgICAgICAgICAgICAgICAgICAgaG9pc3RhYmxlUm9vdCxcbiAgICAgICAgICAgICAgICAgICAgZmxhZ3MsXG4gICAgICAgICAgICAgICAgICAgIGZpbmlzaGVkV29yay5tZW1vaXplZFByb3BzXG4gICAgICAgICAgICAgICAgICApKVxuICAgICAgICAgICAgOiBudWxsID09PSBmbGFncyAmJlxuICAgICAgICAgICAgICBudWxsICE9PSBmaW5pc2hlZFdvcmsuc3RhdGVOb2RlICYmXG4gICAgICAgICAgICAgIGNvbW1pdEhvc3RVcGRhdGUoXG4gICAgICAgICAgICAgICAgZmluaXNoZWRXb3JrLFxuICAgICAgICAgICAgICAgIGZpbmlzaGVkV29yay5tZW1vaXplZFByb3BzLFxuICAgICAgICAgICAgICAgIGN1cnJlbnQubWVtb2l6ZWRQcm9wc1xuICAgICAgICAgICAgICApO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAyNzpcbiAgICAgIGlmIChmbGFncyAmIDQgJiYgbnVsbCA9PT0gZmluaXNoZWRXb3JrLmFsdGVybmF0ZSkge1xuICAgICAgICBob2lzdGFibGVSb290ID0gZmluaXNoZWRXb3JrLnN0YXRlTm9kZTtcbiAgICAgICAgY3VycmVudFJlc291cmNlID0gZmluaXNoZWRXb3JrLm1lbW9pemVkUHJvcHM7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgZm9yICh2YXIgbm9kZSA9IGhvaXN0YWJsZVJvb3QuZmlyc3RDaGlsZDsgbm9kZTsgKSB7XG4gICAgICAgICAgICB2YXIgbmV4dE5vZGUgPSBub2RlLm5leHRTaWJsaW5nLFxuICAgICAgICAgICAgICBub2RlTmFtZSA9IG5vZGUubm9kZU5hbWU7XG4gICAgICAgICAgICBub2RlW2ludGVybmFsSG9pc3RhYmxlTWFya2VyXSB8fFxuICAgICAgICAgICAgICBcIkhFQURcIiA9PT0gbm9kZU5hbWUgfHxcbiAgICAgICAgICAgICAgXCJCT0RZXCIgPT09IG5vZGVOYW1lIHx8XG4gICAgICAgICAgICAgIFwiU0NSSVBUXCIgPT09IG5vZGVOYW1lIHx8XG4gICAgICAgICAgICAgIFwiU1RZTEVcIiA9PT0gbm9kZU5hbWUgfHxcbiAgICAgICAgICAgICAgKFwiTElOS1wiID09PSBub2RlTmFtZSAmJlxuICAgICAgICAgICAgICAgIFwic3R5bGVzaGVldFwiID09PSBub2RlLnJlbC50b0xvd2VyQ2FzZSgpKSB8fFxuICAgICAgICAgICAgICBob2lzdGFibGVSb290LnJlbW92ZUNoaWxkKG5vZGUpO1xuICAgICAgICAgICAgbm9kZSA9IG5leHROb2RlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmb3IgKFxuICAgICAgICAgICAgdmFyIHR5cGUgPSBmaW5pc2hlZFdvcmsudHlwZSwgYXR0cmlidXRlcyA9IGhvaXN0YWJsZVJvb3QuYXR0cmlidXRlcztcbiAgICAgICAgICAgIGF0dHJpYnV0ZXMubGVuZ3RoO1xuXG4gICAgICAgICAgKVxuICAgICAgICAgICAgaG9pc3RhYmxlUm9vdC5yZW1vdmVBdHRyaWJ1dGVOb2RlKGF0dHJpYnV0ZXNbMF0pO1xuICAgICAgICAgIHNldEluaXRpYWxQcm9wZXJ0aWVzKGhvaXN0YWJsZVJvb3QsIHR5cGUsIGN1cnJlbnRSZXNvdXJjZSk7XG4gICAgICAgICAgaG9pc3RhYmxlUm9vdFtpbnRlcm5hbEluc3RhbmNlS2V5XSA9IGZpbmlzaGVkV29yaztcbiAgICAgICAgICBob2lzdGFibGVSb290W2ludGVybmFsUHJvcHNLZXldID0gY3VycmVudFJlc291cmNlO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgIGNhcHR1cmVDb21taXRQaGFzZUVycm9yKGZpbmlzaGVkV29yaywgZmluaXNoZWRXb3JrLnJldHVybiwgZXJyb3IpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgY2FzZSA1OlxuICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZU11dGF0aW9uRWZmZWN0cyhyb290LCBmaW5pc2hlZFdvcmspO1xuICAgICAgY29tbWl0UmVjb25jaWxpYXRpb25FZmZlY3RzKGZpbmlzaGVkV29yayk7XG4gICAgICBmbGFncyAmIDUxMiAmJlxuICAgICAgICAob2Zmc2NyZWVuU3VidHJlZVdhc0hpZGRlbiB8fFxuICAgICAgICAgIG51bGwgPT09IGN1cnJlbnQgfHxcbiAgICAgICAgICBzYWZlbHlEZXRhY2hSZWYoY3VycmVudCwgY3VycmVudC5yZXR1cm4pKTtcbiAgICAgIGlmIChmaW5pc2hlZFdvcmsuZmxhZ3MgJiAzMikge1xuICAgICAgICBob2lzdGFibGVSb290ID0gZmluaXNoZWRXb3JrLnN0YXRlTm9kZTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBzZXRUZXh0Q29udGVudChob2lzdGFibGVSb290LCBcIlwiKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICBjYXB0dXJlQ29tbWl0UGhhc2VFcnJvcihmaW5pc2hlZFdvcmssIGZpbmlzaGVkV29yay5yZXR1cm4sIGVycm9yKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZmxhZ3MgJiA0ICYmXG4gICAgICAgIG51bGwgIT0gZmluaXNoZWRXb3JrLnN0YXRlTm9kZSAmJlxuICAgICAgICAoKGhvaXN0YWJsZVJvb3QgPSBmaW5pc2hlZFdvcmsubWVtb2l6ZWRQcm9wcyksXG4gICAgICAgIGNvbW1pdEhvc3RVcGRhdGUoXG4gICAgICAgICAgZmluaXNoZWRXb3JrLFxuICAgICAgICAgIGhvaXN0YWJsZVJvb3QsXG4gICAgICAgICAgbnVsbCAhPT0gY3VycmVudCA/IGN1cnJlbnQubWVtb2l6ZWRQcm9wcyA6IGhvaXN0YWJsZVJvb3RcbiAgICAgICAgKSk7XG4gICAgICBmbGFncyAmIDEwMjQgJiYgKG5lZWRzRm9ybVJlc2V0ID0gITApO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSA2OlxuICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZU11dGF0aW9uRWZmZWN0cyhyb290LCBmaW5pc2hlZFdvcmspO1xuICAgICAgY29tbWl0UmVjb25jaWxpYXRpb25FZmZlY3RzKGZpbmlzaGVkV29yayk7XG4gICAgICBpZiAoZmxhZ3MgJiA0KSB7XG4gICAgICAgIGlmIChudWxsID09PSBmaW5pc2hlZFdvcmsuc3RhdGVOb2RlKVxuICAgICAgICAgIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTYyKSk7XG4gICAgICAgIGZsYWdzID0gZmluaXNoZWRXb3JrLm1lbW9pemVkUHJvcHM7XG4gICAgICAgIGN1cnJlbnQgPSBmaW5pc2hlZFdvcmsuc3RhdGVOb2RlO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGN1cnJlbnQubm9kZVZhbHVlID0gZmxhZ3M7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgY2FwdHVyZUNvbW1pdFBoYXNlRXJyb3IoZmluaXNoZWRXb3JrLCBmaW5pc2hlZFdvcmsucmV0dXJuLCBlcnJvcik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMzpcbiAgICAgIHRhZ0NhY2hlcyA9IG51bGw7XG4gICAgICBob2lzdGFibGVSb290ID0gY3VycmVudEhvaXN0YWJsZVJvb3Q7XG4gICAgICBjdXJyZW50SG9pc3RhYmxlUm9vdCA9IGdldEhvaXN0YWJsZVJvb3Qocm9vdC5jb250YWluZXJJbmZvKTtcbiAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VNdXRhdGlvbkVmZmVjdHMocm9vdCwgZmluaXNoZWRXb3JrKTtcbiAgICAgIGN1cnJlbnRIb2lzdGFibGVSb290ID0gaG9pc3RhYmxlUm9vdDtcbiAgICAgIGNvbW1pdFJlY29uY2lsaWF0aW9uRWZmZWN0cyhmaW5pc2hlZFdvcmspO1xuICAgICAgaWYgKGZsYWdzICYgNCAmJiBudWxsICE9PSBjdXJyZW50ICYmIGN1cnJlbnQubWVtb2l6ZWRTdGF0ZS5pc0RlaHlkcmF0ZWQpXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcmV0cnlJZkJsb2NrZWRPbihyb290LmNvbnRhaW5lckluZm8pO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgIGNhcHR1cmVDb21taXRQaGFzZUVycm9yKGZpbmlzaGVkV29yaywgZmluaXNoZWRXb3JrLnJldHVybiwgZXJyb3IpO1xuICAgICAgICB9XG4gICAgICBuZWVkc0Zvcm1SZXNldCAmJlxuICAgICAgICAoKG5lZWRzRm9ybVJlc2V0ID0gITEpLCByZWN1cnNpdmVseVJlc2V0Rm9ybXMoZmluaXNoZWRXb3JrKSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDQ6XG4gICAgICBmbGFncyA9IGN1cnJlbnRIb2lzdGFibGVSb290O1xuICAgICAgY3VycmVudEhvaXN0YWJsZVJvb3QgPSBnZXRIb2lzdGFibGVSb290KFxuICAgICAgICBmaW5pc2hlZFdvcmsuc3RhdGVOb2RlLmNvbnRhaW5lckluZm9cbiAgICAgICk7XG4gICAgICByZWN1cnNpdmVseVRyYXZlcnNlTXV0YXRpb25FZmZlY3RzKHJvb3QsIGZpbmlzaGVkV29yayk7XG4gICAgICBjb21taXRSZWNvbmNpbGlhdGlvbkVmZmVjdHMoZmluaXNoZWRXb3JrKTtcbiAgICAgIGN1cnJlbnRIb2lzdGFibGVSb290ID0gZmxhZ3M7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDEyOlxuICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZU11dGF0aW9uRWZmZWN0cyhyb290LCBmaW5pc2hlZFdvcmspO1xuICAgICAgY29tbWl0UmVjb25jaWxpYXRpb25FZmZlY3RzKGZpbmlzaGVkV29yayk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDEzOlxuICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZU11dGF0aW9uRWZmZWN0cyhyb290LCBmaW5pc2hlZFdvcmspO1xuICAgICAgY29tbWl0UmVjb25jaWxpYXRpb25FZmZlY3RzKGZpbmlzaGVkV29yayk7XG4gICAgICBmaW5pc2hlZFdvcmsuY2hpbGQuZmxhZ3MgJiA4MTkyICYmXG4gICAgICAgIChudWxsICE9PSBmaW5pc2hlZFdvcmsubWVtb2l6ZWRTdGF0ZSkgIT09XG4gICAgICAgICAgKG51bGwgIT09IGN1cnJlbnQgJiYgbnVsbCAhPT0gY3VycmVudC5tZW1vaXplZFN0YXRlKSAmJlxuICAgICAgICAoZ2xvYmFsTW9zdFJlY2VudEZhbGxiYWNrVGltZSA9IG5vdygpKTtcbiAgICAgIGZsYWdzICYgNCAmJlxuICAgICAgICAoKGZsYWdzID0gZmluaXNoZWRXb3JrLnVwZGF0ZVF1ZXVlKSxcbiAgICAgICAgbnVsbCAhPT0gZmxhZ3MgJiZcbiAgICAgICAgICAoKGZpbmlzaGVkV29yay51cGRhdGVRdWV1ZSA9IG51bGwpLFxuICAgICAgICAgIGF0dGFjaFN1c3BlbnNlUmV0cnlMaXN0ZW5lcnMoZmluaXNoZWRXb3JrLCBmbGFncykpKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMjI6XG4gICAgICBmbGFncyAmIDUxMiAmJlxuICAgICAgICAob2Zmc2NyZWVuU3VidHJlZVdhc0hpZGRlbiB8fFxuICAgICAgICAgIG51bGwgPT09IGN1cnJlbnQgfHxcbiAgICAgICAgICBzYWZlbHlEZXRhY2hSZWYoY3VycmVudCwgY3VycmVudC5yZXR1cm4pKTtcbiAgICAgIG5vZGUgPSBudWxsICE9PSBmaW5pc2hlZFdvcmsubWVtb2l6ZWRTdGF0ZTtcbiAgICAgIG5leHROb2RlID0gbnVsbCAhPT0gY3VycmVudCAmJiBudWxsICE9PSBjdXJyZW50Lm1lbW9pemVkU3RhdGU7XG4gICAgICBub2RlTmFtZSA9IG9mZnNjcmVlblN1YnRyZWVJc0hpZGRlbjtcbiAgICAgIHR5cGUgPSBvZmZzY3JlZW5TdWJ0cmVlV2FzSGlkZGVuO1xuICAgICAgb2Zmc2NyZWVuU3VidHJlZUlzSGlkZGVuID0gbm9kZU5hbWUgfHwgbm9kZTtcbiAgICAgIG9mZnNjcmVlblN1YnRyZWVXYXNIaWRkZW4gPSB0eXBlIHx8IG5leHROb2RlO1xuICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZU11dGF0aW9uRWZmZWN0cyhyb290LCBmaW5pc2hlZFdvcmspO1xuICAgICAgb2Zmc2NyZWVuU3VidHJlZVdhc0hpZGRlbiA9IHR5cGU7XG4gICAgICBvZmZzY3JlZW5TdWJ0cmVlSXNIaWRkZW4gPSBub2RlTmFtZTtcbiAgICAgIGNvbW1pdFJlY29uY2lsaWF0aW9uRWZmZWN0cyhmaW5pc2hlZFdvcmspO1xuICAgICAgcm9vdCA9IGZpbmlzaGVkV29yay5zdGF0ZU5vZGU7XG4gICAgICByb290Ll9jdXJyZW50ID0gZmluaXNoZWRXb3JrO1xuICAgICAgcm9vdC5fdmlzaWJpbGl0eSAmPSAtMztcbiAgICAgIHJvb3QuX3Zpc2liaWxpdHkgfD0gcm9vdC5fcGVuZGluZ1Zpc2liaWxpdHkgJiAyO1xuICAgICAgaWYgKFxuICAgICAgICBmbGFncyAmIDgxOTIgJiZcbiAgICAgICAgKChyb290Ll92aXNpYmlsaXR5ID0gbm9kZVxuICAgICAgICAgID8gcm9vdC5fdmlzaWJpbGl0eSAmIC0yXG4gICAgICAgICAgOiByb290Ll92aXNpYmlsaXR5IHwgMSksXG4gICAgICAgIG5vZGUgJiZcbiAgICAgICAgICAoKHJvb3QgPSBvZmZzY3JlZW5TdWJ0cmVlSXNIaWRkZW4gfHwgb2Zmc2NyZWVuU3VidHJlZVdhc0hpZGRlbiksXG4gICAgICAgICAgbnVsbCA9PT0gY3VycmVudCB8fFxuICAgICAgICAgICAgbmV4dE5vZGUgfHxcbiAgICAgICAgICAgIHJvb3QgfHxcbiAgICAgICAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VEaXNhcHBlYXJMYXlvdXRFZmZlY3RzKGZpbmlzaGVkV29yaykpLFxuICAgICAgICBudWxsID09PSBmaW5pc2hlZFdvcmsubWVtb2l6ZWRQcm9wcyB8fFxuICAgICAgICAgIFwibWFudWFsXCIgIT09IGZpbmlzaGVkV29yay5tZW1vaXplZFByb3BzLm1vZGUpXG4gICAgICApXG4gICAgICAgIGE6IGZvciAoY3VycmVudCA9IG51bGwsIHJvb3QgPSBmaW5pc2hlZFdvcms7IDsgKSB7XG4gICAgICAgICAgaWYgKDUgPT09IHJvb3QudGFnIHx8IDI2ID09PSByb290LnRhZyB8fCAyNyA9PT0gcm9vdC50YWcpIHtcbiAgICAgICAgICAgIGlmIChudWxsID09PSBjdXJyZW50KSB7XG4gICAgICAgICAgICAgIG5leHROb2RlID0gY3VycmVudCA9IHJvb3Q7XG4gICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaWYgKCgoaG9pc3RhYmxlUm9vdCA9IG5leHROb2RlLnN0YXRlTm9kZSksIG5vZGUpKVxuICAgICAgICAgICAgICAgICAgKGN1cnJlbnRSZXNvdXJjZSA9IGhvaXN0YWJsZVJvb3Quc3R5bGUpLFxuICAgICAgICAgICAgICAgICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBjdXJyZW50UmVzb3VyY2Uuc2V0UHJvcGVydHlcbiAgICAgICAgICAgICAgICAgICAgICA/IGN1cnJlbnRSZXNvdXJjZS5zZXRQcm9wZXJ0eShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJkaXNwbGF5XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFwibm9uZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBcImltcG9ydGFudFwiXG4gICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgOiAoY3VycmVudFJlc291cmNlLmRpc3BsYXkgPSBcIm5vbmVcIik7XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICBtYXliZU5vZGVzID0gbmV4dE5vZGUuc3RhdGVOb2RlO1xuICAgICAgICAgICAgICAgICAgaSA9IG5leHROb2RlLm1lbW9pemVkUHJvcHMuc3R5bGU7XG4gICAgICAgICAgICAgICAgICB2YXIgZGlzcGxheSA9XG4gICAgICAgICAgICAgICAgICAgIHZvaWQgMCAhPT0gaSAmJiBudWxsICE9PSBpICYmIGkuaGFzT3duUHJvcGVydHkoXCJkaXNwbGF5XCIpXG4gICAgICAgICAgICAgICAgICAgICAgPyBpLmRpc3BsYXlcbiAgICAgICAgICAgICAgICAgICAgICA6IG51bGw7XG4gICAgICAgICAgICAgICAgICBtYXliZU5vZGVzLnN0eWxlLmRpc3BsYXkgPVxuICAgICAgICAgICAgICAgICAgICBudWxsID09IGRpc3BsYXkgfHwgXCJib29sZWFuXCIgPT09IHR5cGVvZiBkaXNwbGF5XG4gICAgICAgICAgICAgICAgICAgICAgPyBcIlwiXG4gICAgICAgICAgICAgICAgICAgICAgOiAoXCJcIiArIGRpc3BsYXkpLnRyaW0oKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgY2FwdHVyZUNvbW1pdFBoYXNlRXJyb3IobmV4dE5vZGUsIG5leHROb2RlLnJldHVybiwgZXJyb3IpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmICg2ID09PSByb290LnRhZykge1xuICAgICAgICAgICAgaWYgKG51bGwgPT09IGN1cnJlbnQpIHtcbiAgICAgICAgICAgICAgbmV4dE5vZGUgPSByb290O1xuICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIG5leHROb2RlLnN0YXRlTm9kZS5ub2RlVmFsdWUgPSBub2RlXG4gICAgICAgICAgICAgICAgICA/IFwiXCJcbiAgICAgICAgICAgICAgICAgIDogbmV4dE5vZGUubWVtb2l6ZWRQcm9wcztcbiAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBjYXB0dXJlQ29tbWl0UGhhc2VFcnJvcihuZXh0Tm9kZSwgbmV4dE5vZGUucmV0dXJuLCBlcnJvcik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgICAgKCgyMiAhPT0gcm9vdC50YWcgJiYgMjMgIT09IHJvb3QudGFnKSB8fFxuICAgICAgICAgICAgICBudWxsID09PSByb290Lm1lbW9pemVkU3RhdGUgfHxcbiAgICAgICAgICAgICAgcm9vdCA9PT0gZmluaXNoZWRXb3JrKSAmJlxuICAgICAgICAgICAgbnVsbCAhPT0gcm9vdC5jaGlsZFxuICAgICAgICAgICkge1xuICAgICAgICAgICAgcm9vdC5jaGlsZC5yZXR1cm4gPSByb290O1xuICAgICAgICAgICAgcm9vdCA9IHJvb3QuY2hpbGQ7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHJvb3QgPT09IGZpbmlzaGVkV29yaykgYnJlYWsgYTtcbiAgICAgICAgICBmb3IgKDsgbnVsbCA9PT0gcm9vdC5zaWJsaW5nOyApIHtcbiAgICAgICAgICAgIGlmIChudWxsID09PSByb290LnJldHVybiB8fCByb290LnJldHVybiA9PT0gZmluaXNoZWRXb3JrKSBicmVhayBhO1xuICAgICAgICAgICAgY3VycmVudCA9PT0gcm9vdCAmJiAoY3VycmVudCA9IG51bGwpO1xuICAgICAgICAgICAgcm9vdCA9IHJvb3QucmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjdXJyZW50ID09PSByb290ICYmIChjdXJyZW50ID0gbnVsbCk7XG4gICAgICAgICAgcm9vdC5zaWJsaW5nLnJldHVybiA9IHJvb3QucmV0dXJuO1xuICAgICAgICAgIHJvb3QgPSByb290LnNpYmxpbmc7XG4gICAgICAgIH1cbiAgICAgIGZsYWdzICYgNCAmJlxuICAgICAgICAoKGZsYWdzID0gZmluaXNoZWRXb3JrLnVwZGF0ZVF1ZXVlKSxcbiAgICAgICAgbnVsbCAhPT0gZmxhZ3MgJiZcbiAgICAgICAgICAoKGN1cnJlbnQgPSBmbGFncy5yZXRyeVF1ZXVlKSxcbiAgICAgICAgICBudWxsICE9PSBjdXJyZW50ICYmXG4gICAgICAgICAgICAoKGZsYWdzLnJldHJ5UXVldWUgPSBudWxsKSxcbiAgICAgICAgICAgIGF0dGFjaFN1c3BlbnNlUmV0cnlMaXN0ZW5lcnMoZmluaXNoZWRXb3JrLCBjdXJyZW50KSkpKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMTk6XG4gICAgICByZWN1cnNpdmVseVRyYXZlcnNlTXV0YXRpb25FZmZlY3RzKHJvb3QsIGZpbmlzaGVkV29yayk7XG4gICAgICBjb21taXRSZWNvbmNpbGlhdGlvbkVmZmVjdHMoZmluaXNoZWRXb3JrKTtcbiAgICAgIGZsYWdzICYgNCAmJlxuICAgICAgICAoKGZsYWdzID0gZmluaXNoZWRXb3JrLnVwZGF0ZVF1ZXVlKSxcbiAgICAgICAgbnVsbCAhPT0gZmxhZ3MgJiZcbiAgICAgICAgICAoKGZpbmlzaGVkV29yay51cGRhdGVRdWV1ZSA9IG51bGwpLFxuICAgICAgICAgIGF0dGFjaFN1c3BlbnNlUmV0cnlMaXN0ZW5lcnMoZmluaXNoZWRXb3JrLCBmbGFncykpKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMjE6XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZU11dGF0aW9uRWZmZWN0cyhyb290LCBmaW5pc2hlZFdvcmspLFxuICAgICAgICBjb21taXRSZWNvbmNpbGlhdGlvbkVmZmVjdHMoZmluaXNoZWRXb3JrKTtcbiAgfVxufVxuZnVuY3Rpb24gY29tbWl0UmVjb25jaWxpYXRpb25FZmZlY3RzKGZpbmlzaGVkV29yaykge1xuICB2YXIgZmxhZ3MgPSBmaW5pc2hlZFdvcmsuZmxhZ3M7XG4gIGlmIChmbGFncyAmIDIpIHtcbiAgICB0cnkge1xuICAgICAgaWYgKDI3ICE9PSBmaW5pc2hlZFdvcmsudGFnKSB7XG4gICAgICAgIGE6IHtcbiAgICAgICAgICBmb3IgKHZhciBwYXJlbnQgPSBmaW5pc2hlZFdvcmsucmV0dXJuOyBudWxsICE9PSBwYXJlbnQ7ICkge1xuICAgICAgICAgICAgaWYgKGlzSG9zdFBhcmVudChwYXJlbnQpKSB7XG4gICAgICAgICAgICAgIHZhciBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgPSBwYXJlbnQ7XG4gICAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwYXJlbnQgPSBwYXJlbnQucmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDE2MCkpO1xuICAgICAgICB9XG4gICAgICAgIHN3aXRjaCAoSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0LnRhZykge1xuICAgICAgICAgIGNhc2UgMjc6XG4gICAgICAgICAgICB2YXIgcGFyZW50JGpzY29tcCQwID0gSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0LnN0YXRlTm9kZSxcbiAgICAgICAgICAgICAgYmVmb3JlID0gZ2V0SG9zdFNpYmxpbmcoZmluaXNoZWRXb3JrKTtcbiAgICAgICAgICAgIGluc2VydE9yQXBwZW5kUGxhY2VtZW50Tm9kZShmaW5pc2hlZFdvcmssIGJlZm9yZSwgcGFyZW50JGpzY29tcCQwKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgIHZhciBwYXJlbnQkMTEzID0gSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0LnN0YXRlTm9kZTtcbiAgICAgICAgICAgIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdC5mbGFncyAmIDMyICYmXG4gICAgICAgICAgICAgIChzZXRUZXh0Q29udGVudChwYXJlbnQkMTEzLCBcIlwiKSxcbiAgICAgICAgICAgICAgKEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdC5mbGFncyAmPSAtMzMpKTtcbiAgICAgICAgICAgIHZhciBiZWZvcmUkMTE0ID0gZ2V0SG9zdFNpYmxpbmcoZmluaXNoZWRXb3JrKTtcbiAgICAgICAgICAgIGluc2VydE9yQXBwZW5kUGxhY2VtZW50Tm9kZShmaW5pc2hlZFdvcmssIGJlZm9yZSQxMTQsIHBhcmVudCQxMTMpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgIHZhciBwYXJlbnQkMTE1ID0gSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0LnN0YXRlTm9kZS5jb250YWluZXJJbmZvLFxuICAgICAgICAgICAgICBiZWZvcmUkMTE2ID0gZ2V0SG9zdFNpYmxpbmcoZmluaXNoZWRXb3JrKTtcbiAgICAgICAgICAgIGluc2VydE9yQXBwZW5kUGxhY2VtZW50Tm9kZUludG9Db250YWluZXIoXG4gICAgICAgICAgICAgIGZpbmlzaGVkV29yayxcbiAgICAgICAgICAgICAgYmVmb3JlJDExNixcbiAgICAgICAgICAgICAgcGFyZW50JDExNVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDE2MSkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNhcHR1cmVDb21taXRQaGFzZUVycm9yKGZpbmlzaGVkV29yaywgZmluaXNoZWRXb3JrLnJldHVybiwgZXJyb3IpO1xuICAgIH1cbiAgICBmaW5pc2hlZFdvcmsuZmxhZ3MgJj0gLTM7XG4gIH1cbiAgZmxhZ3MgJiA0MDk2ICYmIChmaW5pc2hlZFdvcmsuZmxhZ3MgJj0gLTQwOTcpO1xufVxuZnVuY3Rpb24gcmVjdXJzaXZlbHlSZXNldEZvcm1zKHBhcmVudEZpYmVyKSB7XG4gIGlmIChwYXJlbnRGaWJlci5zdWJ0cmVlRmxhZ3MgJiAxMDI0KVxuICAgIGZvciAocGFyZW50RmliZXIgPSBwYXJlbnRGaWJlci5jaGlsZDsgbnVsbCAhPT0gcGFyZW50RmliZXI7ICkge1xuICAgICAgdmFyIGZpYmVyID0gcGFyZW50RmliZXI7XG4gICAgICByZWN1cnNpdmVseVJlc2V0Rm9ybXMoZmliZXIpO1xuICAgICAgNSA9PT0gZmliZXIudGFnICYmIGZpYmVyLmZsYWdzICYgMTAyNCAmJiBmaWJlci5zdGF0ZU5vZGUucmVzZXQoKTtcbiAgICAgIHBhcmVudEZpYmVyID0gcGFyZW50RmliZXIuc2libGluZztcbiAgICB9XG59XG5mdW5jdGlvbiByZWN1cnNpdmVseVRyYXZlcnNlTGF5b3V0RWZmZWN0cyhyb290LCBwYXJlbnRGaWJlcikge1xuICBpZiAocGFyZW50RmliZXIuc3VidHJlZUZsYWdzICYgODc3MilcbiAgICBmb3IgKHBhcmVudEZpYmVyID0gcGFyZW50RmliZXIuY2hpbGQ7IG51bGwgIT09IHBhcmVudEZpYmVyOyApXG4gICAgICBjb21taXRMYXlvdXRFZmZlY3RPbkZpYmVyKHJvb3QsIHBhcmVudEZpYmVyLmFsdGVybmF0ZSwgcGFyZW50RmliZXIpLFxuICAgICAgICAocGFyZW50RmliZXIgPSBwYXJlbnRGaWJlci5zaWJsaW5nKTtcbn1cbmZ1bmN0aW9uIHJlY3Vyc2l2ZWx5VHJhdmVyc2VEaXNhcHBlYXJMYXlvdXRFZmZlY3RzKHBhcmVudEZpYmVyKSB7XG4gIGZvciAocGFyZW50RmliZXIgPSBwYXJlbnRGaWJlci5jaGlsZDsgbnVsbCAhPT0gcGFyZW50RmliZXI7ICkge1xuICAgIHZhciBmaW5pc2hlZFdvcmsgPSBwYXJlbnRGaWJlcjtcbiAgICBzd2l0Y2ggKGZpbmlzaGVkV29yay50YWcpIHtcbiAgICAgIGNhc2UgMDpcbiAgICAgIGNhc2UgMTE6XG4gICAgICBjYXNlIDE0OlxuICAgICAgY2FzZSAxNTpcbiAgICAgICAgY29tbWl0SG9va0VmZmVjdExpc3RVbm1vdW50KDQsIGZpbmlzaGVkV29yaywgZmluaXNoZWRXb3JrLnJldHVybik7XG4gICAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VEaXNhcHBlYXJMYXlvdXRFZmZlY3RzKGZpbmlzaGVkV29yayk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAxOlxuICAgICAgICBzYWZlbHlEZXRhY2hSZWYoZmluaXNoZWRXb3JrLCBmaW5pc2hlZFdvcmsucmV0dXJuKTtcbiAgICAgICAgdmFyIGluc3RhbmNlID0gZmluaXNoZWRXb3JrLnN0YXRlTm9kZTtcbiAgICAgICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgaW5zdGFuY2UuY29tcG9uZW50V2lsbFVubW91bnQgJiZcbiAgICAgICAgICBzYWZlbHlDYWxsQ29tcG9uZW50V2lsbFVubW91bnQoXG4gICAgICAgICAgICBmaW5pc2hlZFdvcmssXG4gICAgICAgICAgICBmaW5pc2hlZFdvcmsucmV0dXJuLFxuICAgICAgICAgICAgaW5zdGFuY2VcbiAgICAgICAgICApO1xuICAgICAgICByZWN1cnNpdmVseVRyYXZlcnNlRGlzYXBwZWFyTGF5b3V0RWZmZWN0cyhmaW5pc2hlZFdvcmspO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMjY6XG4gICAgICBjYXNlIDI3OlxuICAgICAgY2FzZSA1OlxuICAgICAgICBzYWZlbHlEZXRhY2hSZWYoZmluaXNoZWRXb3JrLCBmaW5pc2hlZFdvcmsucmV0dXJuKTtcbiAgICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZURpc2FwcGVhckxheW91dEVmZmVjdHMoZmluaXNoZWRXb3JrKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDIyOlxuICAgICAgICBzYWZlbHlEZXRhY2hSZWYoZmluaXNoZWRXb3JrLCBmaW5pc2hlZFdvcmsucmV0dXJuKTtcbiAgICAgICAgbnVsbCA9PT0gZmluaXNoZWRXb3JrLm1lbW9pemVkU3RhdGUgJiZcbiAgICAgICAgICByZWN1cnNpdmVseVRyYXZlcnNlRGlzYXBwZWFyTGF5b3V0RWZmZWN0cyhmaW5pc2hlZFdvcmspO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VEaXNhcHBlYXJMYXlvdXRFZmZlY3RzKGZpbmlzaGVkV29yayk7XG4gICAgfVxuICAgIHBhcmVudEZpYmVyID0gcGFyZW50RmliZXIuc2libGluZztcbiAgfVxufVxuZnVuY3Rpb24gcmVjdXJzaXZlbHlUcmF2ZXJzZVJlYXBwZWFyTGF5b3V0RWZmZWN0cyhcbiAgZmluaXNoZWRSb290JGpzY29tcCQwLFxuICBwYXJlbnRGaWJlcixcbiAgaW5jbHVkZVdvcmtJblByb2dyZXNzRWZmZWN0c1xuKSB7XG4gIGluY2x1ZGVXb3JrSW5Qcm9ncmVzc0VmZmVjdHMgPVxuICAgIGluY2x1ZGVXb3JrSW5Qcm9ncmVzc0VmZmVjdHMgJiYgMCAhPT0gKHBhcmVudEZpYmVyLnN1YnRyZWVGbGFncyAmIDg3NzIpO1xuICBmb3IgKHBhcmVudEZpYmVyID0gcGFyZW50RmliZXIuY2hpbGQ7IG51bGwgIT09IHBhcmVudEZpYmVyOyApIHtcbiAgICB2YXIgY3VycmVudCA9IHBhcmVudEZpYmVyLmFsdGVybmF0ZSxcbiAgICAgIGZpbmlzaGVkUm9vdCA9IGZpbmlzaGVkUm9vdCRqc2NvbXAkMCxcbiAgICAgIGZpbmlzaGVkV29yayA9IHBhcmVudEZpYmVyLFxuICAgICAgZmxhZ3MgPSBmaW5pc2hlZFdvcmsuZmxhZ3M7XG4gICAgc3dpdGNoIChmaW5pc2hlZFdvcmsudGFnKSB7XG4gICAgICBjYXNlIDA6XG4gICAgICBjYXNlIDExOlxuICAgICAgY2FzZSAxNTpcbiAgICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZVJlYXBwZWFyTGF5b3V0RWZmZWN0cyhcbiAgICAgICAgICBmaW5pc2hlZFJvb3QsXG4gICAgICAgICAgZmluaXNoZWRXb3JrLFxuICAgICAgICAgIGluY2x1ZGVXb3JrSW5Qcm9ncmVzc0VmZmVjdHNcbiAgICAgICAgKTtcbiAgICAgICAgY29tbWl0SG9va0VmZmVjdExpc3RNb3VudCg0LCBmaW5pc2hlZFdvcmspO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZVJlYXBwZWFyTGF5b3V0RWZmZWN0cyhcbiAgICAgICAgICBmaW5pc2hlZFJvb3QsXG4gICAgICAgICAgZmluaXNoZWRXb3JrLFxuICAgICAgICAgIGluY2x1ZGVXb3JrSW5Qcm9ncmVzc0VmZmVjdHNcbiAgICAgICAgKTtcbiAgICAgICAgY3VycmVudCA9IGZpbmlzaGVkV29yaztcbiAgICAgICAgZmluaXNoZWRSb290ID0gY3VycmVudC5zdGF0ZU5vZGU7XG4gICAgICAgIGlmIChcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBmaW5pc2hlZFJvb3QuY29tcG9uZW50RGlkTW91bnQpXG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGZpbmlzaGVkUm9vdC5jb21wb25lbnREaWRNb3VudCgpO1xuICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBjYXB0dXJlQ29tbWl0UGhhc2VFcnJvcihjdXJyZW50LCBjdXJyZW50LnJldHVybiwgZXJyb3IpO1xuICAgICAgICAgIH1cbiAgICAgICAgY3VycmVudCA9IGZpbmlzaGVkV29yaztcbiAgICAgICAgZmluaXNoZWRSb290ID0gY3VycmVudC51cGRhdGVRdWV1ZTtcbiAgICAgICAgaWYgKG51bGwgIT09IGZpbmlzaGVkUm9vdCkge1xuICAgICAgICAgIHZhciBpbnN0YW5jZSA9IGN1cnJlbnQuc3RhdGVOb2RlO1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICB2YXIgaGlkZGVuQ2FsbGJhY2tzID0gZmluaXNoZWRSb290LnNoYXJlZC5oaWRkZW5DYWxsYmFja3M7XG4gICAgICAgICAgICBpZiAobnVsbCAhPT0gaGlkZGVuQ2FsbGJhY2tzKVxuICAgICAgICAgICAgICBmb3IgKFxuICAgICAgICAgICAgICAgIGZpbmlzaGVkUm9vdC5zaGFyZWQuaGlkZGVuQ2FsbGJhY2tzID0gbnVsbCwgZmluaXNoZWRSb290ID0gMDtcbiAgICAgICAgICAgICAgICBmaW5pc2hlZFJvb3QgPCBoaWRkZW5DYWxsYmFja3MubGVuZ3RoO1xuICAgICAgICAgICAgICAgIGZpbmlzaGVkUm9vdCsrXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICBjYWxsQ2FsbGJhY2soaGlkZGVuQ2FsbGJhY2tzW2ZpbmlzaGVkUm9vdF0sIGluc3RhbmNlKTtcbiAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY2FwdHVyZUNvbW1pdFBoYXNlRXJyb3IoY3VycmVudCwgY3VycmVudC5yZXR1cm4sIGVycm9yKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaW5jbHVkZVdvcmtJblByb2dyZXNzRWZmZWN0cyAmJlxuICAgICAgICAgIGZsYWdzICYgNjQgJiZcbiAgICAgICAgICBjb21taXRDbGFzc0NhbGxiYWNrcyhmaW5pc2hlZFdvcmspO1xuICAgICAgICBzYWZlbHlBdHRhY2hSZWYoZmluaXNoZWRXb3JrLCBmaW5pc2hlZFdvcmsucmV0dXJuKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDI2OlxuICAgICAgY2FzZSAyNzpcbiAgICAgIGNhc2UgNTpcbiAgICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZVJlYXBwZWFyTGF5b3V0RWZmZWN0cyhcbiAgICAgICAgICBmaW5pc2hlZFJvb3QsXG4gICAgICAgICAgZmluaXNoZWRXb3JrLFxuICAgICAgICAgIGluY2x1ZGVXb3JrSW5Qcm9ncmVzc0VmZmVjdHNcbiAgICAgICAgKTtcbiAgICAgICAgaW5jbHVkZVdvcmtJblByb2dyZXNzRWZmZWN0cyAmJlxuICAgICAgICAgIG51bGwgPT09IGN1cnJlbnQgJiZcbiAgICAgICAgICBmbGFncyAmIDQgJiZcbiAgICAgICAgICBjb21taXRIb3N0TW91bnQoZmluaXNoZWRXb3JrKTtcbiAgICAgICAgc2FmZWx5QXR0YWNoUmVmKGZpbmlzaGVkV29yaywgZmluaXNoZWRXb3JrLnJldHVybik7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAxMjpcbiAgICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZVJlYXBwZWFyTGF5b3V0RWZmZWN0cyhcbiAgICAgICAgICBmaW5pc2hlZFJvb3QsXG4gICAgICAgICAgZmluaXNoZWRXb3JrLFxuICAgICAgICAgIGluY2x1ZGVXb3JrSW5Qcm9ncmVzc0VmZmVjdHNcbiAgICAgICAgKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDEzOlxuICAgICAgICByZWN1cnNpdmVseVRyYXZlcnNlUmVhcHBlYXJMYXlvdXRFZmZlY3RzKFxuICAgICAgICAgIGZpbmlzaGVkUm9vdCxcbiAgICAgICAgICBmaW5pc2hlZFdvcmssXG4gICAgICAgICAgaW5jbHVkZVdvcmtJblByb2dyZXNzRWZmZWN0c1xuICAgICAgICApO1xuICAgICAgICBpbmNsdWRlV29ya0luUHJvZ3Jlc3NFZmZlY3RzICYmXG4gICAgICAgICAgZmxhZ3MgJiA0ICYmXG4gICAgICAgICAgY29tbWl0U3VzcGVuc2VIeWRyYXRpb25DYWxsYmFja3MoZmluaXNoZWRSb290LCBmaW5pc2hlZFdvcmspO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMjI6XG4gICAgICAgIG51bGwgPT09IGZpbmlzaGVkV29yay5tZW1vaXplZFN0YXRlICYmXG4gICAgICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZVJlYXBwZWFyTGF5b3V0RWZmZWN0cyhcbiAgICAgICAgICAgIGZpbmlzaGVkUm9vdCxcbiAgICAgICAgICAgIGZpbmlzaGVkV29yayxcbiAgICAgICAgICAgIGluY2x1ZGVXb3JrSW5Qcm9ncmVzc0VmZmVjdHNcbiAgICAgICAgICApO1xuICAgICAgICBzYWZlbHlBdHRhY2hSZWYoZmluaXNoZWRXb3JrLCBmaW5pc2hlZFdvcmsucmV0dXJuKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZWN1cnNpdmVseVRyYXZlcnNlUmVhcHBlYXJMYXlvdXRFZmZlY3RzKFxuICAgICAgICAgIGZpbmlzaGVkUm9vdCxcbiAgICAgICAgICBmaW5pc2hlZFdvcmssXG4gICAgICAgICAgaW5jbHVkZVdvcmtJblByb2dyZXNzRWZmZWN0c1xuICAgICAgICApO1xuICAgIH1cbiAgICBwYXJlbnRGaWJlciA9IHBhcmVudEZpYmVyLnNpYmxpbmc7XG4gIH1cbn1cbmZ1bmN0aW9uIGNvbW1pdE9mZnNjcmVlblBhc3NpdmVNb3VudEVmZmVjdHMoY3VycmVudCwgZmluaXNoZWRXb3JrKSB7XG4gIHZhciBwcmV2aW91c0NhY2hlID0gbnVsbDtcbiAgbnVsbCAhPT0gY3VycmVudCAmJlxuICAgIG51bGwgIT09IGN1cnJlbnQubWVtb2l6ZWRTdGF0ZSAmJlxuICAgIG51bGwgIT09IGN1cnJlbnQubWVtb2l6ZWRTdGF0ZS5jYWNoZVBvb2wgJiZcbiAgICAocHJldmlvdXNDYWNoZSA9IGN1cnJlbnQubWVtb2l6ZWRTdGF0ZS5jYWNoZVBvb2wucG9vbCk7XG4gIGN1cnJlbnQgPSBudWxsO1xuICBudWxsICE9PSBmaW5pc2hlZFdvcmsubWVtb2l6ZWRTdGF0ZSAmJlxuICAgIG51bGwgIT09IGZpbmlzaGVkV29yay5tZW1vaXplZFN0YXRlLmNhY2hlUG9vbCAmJlxuICAgIChjdXJyZW50ID0gZmluaXNoZWRXb3JrLm1lbW9pemVkU3RhdGUuY2FjaGVQb29sLnBvb2wpO1xuICBjdXJyZW50ICE9PSBwcmV2aW91c0NhY2hlICYmXG4gICAgKG51bGwgIT0gY3VycmVudCAmJiBjdXJyZW50LnJlZkNvdW50KyssXG4gICAgbnVsbCAhPSBwcmV2aW91c0NhY2hlICYmIHJlbGVhc2VDYWNoZShwcmV2aW91c0NhY2hlKSk7XG59XG5mdW5jdGlvbiBjb21taXRDYWNoZVBhc3NpdmVNb3VudEVmZmVjdChjdXJyZW50LCBmaW5pc2hlZFdvcmspIHtcbiAgY3VycmVudCA9IG51bGw7XG4gIG51bGwgIT09IGZpbmlzaGVkV29yay5hbHRlcm5hdGUgJiZcbiAgICAoY3VycmVudCA9IGZpbmlzaGVkV29yay5hbHRlcm5hdGUubWVtb2l6ZWRTdGF0ZS5jYWNoZSk7XG4gIGZpbmlzaGVkV29yayA9IGZpbmlzaGVkV29yay5tZW1vaXplZFN0YXRlLmNhY2hlO1xuICBmaW5pc2hlZFdvcmsgIT09IGN1cnJlbnQgJiZcbiAgICAoZmluaXNoZWRXb3JrLnJlZkNvdW50KyssIG51bGwgIT0gY3VycmVudCAmJiByZWxlYXNlQ2FjaGUoY3VycmVudCkpO1xufVxuZnVuY3Rpb24gcmVjdXJzaXZlbHlUcmF2ZXJzZVBhc3NpdmVNb3VudEVmZmVjdHMoXG4gIHJvb3QsXG4gIHBhcmVudEZpYmVyLFxuICBjb21taXR0ZWRMYW5lcyxcbiAgY29tbWl0dGVkVHJhbnNpdGlvbnNcbikge1xuICBpZiAocGFyZW50RmliZXIuc3VidHJlZUZsYWdzICYgMTAyNTYpXG4gICAgZm9yIChwYXJlbnRGaWJlciA9IHBhcmVudEZpYmVyLmNoaWxkOyBudWxsICE9PSBwYXJlbnRGaWJlcjsgKVxuICAgICAgY29tbWl0UGFzc2l2ZU1vdW50T25GaWJlcihcbiAgICAgICAgcm9vdCxcbiAgICAgICAgcGFyZW50RmliZXIsXG4gICAgICAgIGNvbW1pdHRlZExhbmVzLFxuICAgICAgICBjb21taXR0ZWRUcmFuc2l0aW9uc1xuICAgICAgKSxcbiAgICAgICAgKHBhcmVudEZpYmVyID0gcGFyZW50RmliZXIuc2libGluZyk7XG59XG5mdW5jdGlvbiBjb21taXRQYXNzaXZlTW91bnRPbkZpYmVyKFxuICBmaW5pc2hlZFJvb3QsXG4gIGZpbmlzaGVkV29yayxcbiAgY29tbWl0dGVkTGFuZXMsXG4gIGNvbW1pdHRlZFRyYW5zaXRpb25zXG4pIHtcbiAgdmFyIGZsYWdzID0gZmluaXNoZWRXb3JrLmZsYWdzO1xuICBzd2l0Y2ggKGZpbmlzaGVkV29yay50YWcpIHtcbiAgICBjYXNlIDA6XG4gICAgY2FzZSAxMTpcbiAgICBjYXNlIDE1OlxuICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZVBhc3NpdmVNb3VudEVmZmVjdHMoXG4gICAgICAgIGZpbmlzaGVkUm9vdCxcbiAgICAgICAgZmluaXNoZWRXb3JrLFxuICAgICAgICBjb21taXR0ZWRMYW5lcyxcbiAgICAgICAgY29tbWl0dGVkVHJhbnNpdGlvbnNcbiAgICAgICk7XG4gICAgICBmbGFncyAmIDIwNDggJiYgY29tbWl0SG9va0VmZmVjdExpc3RNb3VudCg5LCBmaW5pc2hlZFdvcmspO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAzOlxuICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZVBhc3NpdmVNb3VudEVmZmVjdHMoXG4gICAgICAgIGZpbmlzaGVkUm9vdCxcbiAgICAgICAgZmluaXNoZWRXb3JrLFxuICAgICAgICBjb21taXR0ZWRMYW5lcyxcbiAgICAgICAgY29tbWl0dGVkVHJhbnNpdGlvbnNcbiAgICAgICk7XG4gICAgICBmbGFncyAmIDIwNDggJiZcbiAgICAgICAgKChmaW5pc2hlZFJvb3QgPSBudWxsKSxcbiAgICAgICAgbnVsbCAhPT0gZmluaXNoZWRXb3JrLmFsdGVybmF0ZSAmJlxuICAgICAgICAgIChmaW5pc2hlZFJvb3QgPSBmaW5pc2hlZFdvcmsuYWx0ZXJuYXRlLm1lbW9pemVkU3RhdGUuY2FjaGUpLFxuICAgICAgICAoZmluaXNoZWRXb3JrID0gZmluaXNoZWRXb3JrLm1lbW9pemVkU3RhdGUuY2FjaGUpLFxuICAgICAgICBmaW5pc2hlZFdvcmsgIT09IGZpbmlzaGVkUm9vdCAmJlxuICAgICAgICAgIChmaW5pc2hlZFdvcmsucmVmQ291bnQrKyxcbiAgICAgICAgICBudWxsICE9IGZpbmlzaGVkUm9vdCAmJiByZWxlYXNlQ2FjaGUoZmluaXNoZWRSb290KSkpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxMjpcbiAgICAgIGlmIChmbGFncyAmIDIwNDgpIHtcbiAgICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZVBhc3NpdmVNb3VudEVmZmVjdHMoXG4gICAgICAgICAgZmluaXNoZWRSb290LFxuICAgICAgICAgIGZpbmlzaGVkV29yayxcbiAgICAgICAgICBjb21taXR0ZWRMYW5lcyxcbiAgICAgICAgICBjb21taXR0ZWRUcmFuc2l0aW9uc1xuICAgICAgICApO1xuICAgICAgICBmaW5pc2hlZFJvb3QgPSBmaW5pc2hlZFdvcmsuc3RhdGVOb2RlO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHZhciBfZmluaXNoZWRXb3JrJG1lbW9pemUyID0gZmluaXNoZWRXb3JrLm1lbW9pemVkUHJvcHMsXG4gICAgICAgICAgICBpZCA9IF9maW5pc2hlZFdvcmskbWVtb2l6ZTIuaWQsXG4gICAgICAgICAgICBvblBvc3RDb21taXQgPSBfZmluaXNoZWRXb3JrJG1lbW9pemUyLm9uUG9zdENvbW1pdDtcbiAgICAgICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBvblBvc3RDb21taXQgJiZcbiAgICAgICAgICAgIG9uUG9zdENvbW1pdChcbiAgICAgICAgICAgICAgaWQsXG4gICAgICAgICAgICAgIG51bGwgPT09IGZpbmlzaGVkV29yay5hbHRlcm5hdGUgPyBcIm1vdW50XCIgOiBcInVwZGF0ZVwiLFxuICAgICAgICAgICAgICBmaW5pc2hlZFJvb3QucGFzc2l2ZUVmZmVjdER1cmF0aW9uLFxuICAgICAgICAgICAgICAtMFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICBjYXB0dXJlQ29tbWl0UGhhc2VFcnJvcihmaW5pc2hlZFdvcmssIGZpbmlzaGVkV29yay5yZXR1cm4sIGVycm9yKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlXG4gICAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VQYXNzaXZlTW91bnRFZmZlY3RzKFxuICAgICAgICAgIGZpbmlzaGVkUm9vdCxcbiAgICAgICAgICBmaW5pc2hlZFdvcmssXG4gICAgICAgICAgY29tbWl0dGVkTGFuZXMsXG4gICAgICAgICAgY29tbWl0dGVkVHJhbnNpdGlvbnNcbiAgICAgICAgKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMjM6XG4gICAgICBicmVhaztcbiAgICBjYXNlIDIyOlxuICAgICAgX2ZpbmlzaGVkV29yayRtZW1vaXplMiA9IGZpbmlzaGVkV29yay5zdGF0ZU5vZGU7XG4gICAgICBudWxsICE9PSBmaW5pc2hlZFdvcmsubWVtb2l6ZWRTdGF0ZVxuICAgICAgICA/IF9maW5pc2hlZFdvcmskbWVtb2l6ZTIuX3Zpc2liaWxpdHkgJiA0XG4gICAgICAgICAgPyByZWN1cnNpdmVseVRyYXZlcnNlUGFzc2l2ZU1vdW50RWZmZWN0cyhcbiAgICAgICAgICAgICAgZmluaXNoZWRSb290LFxuICAgICAgICAgICAgICBmaW5pc2hlZFdvcmssXG4gICAgICAgICAgICAgIGNvbW1pdHRlZExhbmVzLFxuICAgICAgICAgICAgICBjb21taXR0ZWRUcmFuc2l0aW9uc1xuICAgICAgICAgICAgKVxuICAgICAgICAgIDogcmVjdXJzaXZlbHlUcmF2ZXJzZUF0b21pY1Bhc3NpdmVFZmZlY3RzKGZpbmlzaGVkUm9vdCwgZmluaXNoZWRXb3JrKVxuICAgICAgICA6IF9maW5pc2hlZFdvcmskbWVtb2l6ZTIuX3Zpc2liaWxpdHkgJiA0XG4gICAgICAgICAgPyByZWN1cnNpdmVseVRyYXZlcnNlUGFzc2l2ZU1vdW50RWZmZWN0cyhcbiAgICAgICAgICAgICAgZmluaXNoZWRSb290LFxuICAgICAgICAgICAgICBmaW5pc2hlZFdvcmssXG4gICAgICAgICAgICAgIGNvbW1pdHRlZExhbmVzLFxuICAgICAgICAgICAgICBjb21taXR0ZWRUcmFuc2l0aW9uc1xuICAgICAgICAgICAgKVxuICAgICAgICAgIDogKChfZmluaXNoZWRXb3JrJG1lbW9pemUyLl92aXNpYmlsaXR5IHw9IDQpLFxuICAgICAgICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZVJlY29ubmVjdFBhc3NpdmVFZmZlY3RzKFxuICAgICAgICAgICAgICBmaW5pc2hlZFJvb3QsXG4gICAgICAgICAgICAgIGZpbmlzaGVkV29yayxcbiAgICAgICAgICAgICAgY29tbWl0dGVkTGFuZXMsXG4gICAgICAgICAgICAgIGNvbW1pdHRlZFRyYW5zaXRpb25zLFxuICAgICAgICAgICAgICAwICE9PSAoZmluaXNoZWRXb3JrLnN1YnRyZWVGbGFncyAmIDEwMjU2KVxuICAgICAgICAgICAgKSk7XG4gICAgICBmbGFncyAmIDIwNDggJiZcbiAgICAgICAgY29tbWl0T2Zmc2NyZWVuUGFzc2l2ZU1vdW50RWZmZWN0cyhcbiAgICAgICAgICBmaW5pc2hlZFdvcmsuYWx0ZXJuYXRlLFxuICAgICAgICAgIGZpbmlzaGVkV29ya1xuICAgICAgICApO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAyNDpcbiAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VQYXNzaXZlTW91bnRFZmZlY3RzKFxuICAgICAgICBmaW5pc2hlZFJvb3QsXG4gICAgICAgIGZpbmlzaGVkV29yayxcbiAgICAgICAgY29tbWl0dGVkTGFuZXMsXG4gICAgICAgIGNvbW1pdHRlZFRyYW5zaXRpb25zXG4gICAgICApO1xuICAgICAgZmxhZ3MgJiAyMDQ4ICYmXG4gICAgICAgIGNvbW1pdENhY2hlUGFzc2l2ZU1vdW50RWZmZWN0KGZpbmlzaGVkV29yay5hbHRlcm5hdGUsIGZpbmlzaGVkV29yayk7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZVBhc3NpdmVNb3VudEVmZmVjdHMoXG4gICAgICAgIGZpbmlzaGVkUm9vdCxcbiAgICAgICAgZmluaXNoZWRXb3JrLFxuICAgICAgICBjb21taXR0ZWRMYW5lcyxcbiAgICAgICAgY29tbWl0dGVkVHJhbnNpdGlvbnNcbiAgICAgICk7XG4gIH1cbn1cbmZ1bmN0aW9uIHJlY3Vyc2l2ZWx5VHJhdmVyc2VSZWNvbm5lY3RQYXNzaXZlRWZmZWN0cyhcbiAgZmluaXNoZWRSb290JGpzY29tcCQwLFxuICBwYXJlbnRGaWJlcixcbiAgY29tbWl0dGVkTGFuZXMkanNjb21wJDAsXG4gIGNvbW1pdHRlZFRyYW5zaXRpb25zJGpzY29tcCQwLFxuICBpbmNsdWRlV29ya0luUHJvZ3Jlc3NFZmZlY3RzXG4pIHtcbiAgaW5jbHVkZVdvcmtJblByb2dyZXNzRWZmZWN0cyA9XG4gICAgaW5jbHVkZVdvcmtJblByb2dyZXNzRWZmZWN0cyAmJiAwICE9PSAocGFyZW50RmliZXIuc3VidHJlZUZsYWdzICYgMTAyNTYpO1xuICBmb3IgKHBhcmVudEZpYmVyID0gcGFyZW50RmliZXIuY2hpbGQ7IG51bGwgIT09IHBhcmVudEZpYmVyOyApIHtcbiAgICB2YXIgZmluaXNoZWRSb290ID0gZmluaXNoZWRSb290JGpzY29tcCQwLFxuICAgICAgZmluaXNoZWRXb3JrID0gcGFyZW50RmliZXIsXG4gICAgICBjb21taXR0ZWRMYW5lcyA9IGNvbW1pdHRlZExhbmVzJGpzY29tcCQwLFxuICAgICAgY29tbWl0dGVkVHJhbnNpdGlvbnMgPSBjb21taXR0ZWRUcmFuc2l0aW9ucyRqc2NvbXAkMCxcbiAgICAgIGZsYWdzID0gZmluaXNoZWRXb3JrLmZsYWdzO1xuICAgIHN3aXRjaCAoZmluaXNoZWRXb3JrLnRhZykge1xuICAgICAgY2FzZSAwOlxuICAgICAgY2FzZSAxMTpcbiAgICAgIGNhc2UgMTU6XG4gICAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VSZWNvbm5lY3RQYXNzaXZlRWZmZWN0cyhcbiAgICAgICAgICBmaW5pc2hlZFJvb3QsXG4gICAgICAgICAgZmluaXNoZWRXb3JrLFxuICAgICAgICAgIGNvbW1pdHRlZExhbmVzLFxuICAgICAgICAgIGNvbW1pdHRlZFRyYW5zaXRpb25zLFxuICAgICAgICAgIGluY2x1ZGVXb3JrSW5Qcm9ncmVzc0VmZmVjdHNcbiAgICAgICAgKTtcbiAgICAgICAgY29tbWl0SG9va0VmZmVjdExpc3RNb3VudCg4LCBmaW5pc2hlZFdvcmspO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMjM6XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAyMjpcbiAgICAgICAgdmFyIGluc3RhbmNlID0gZmluaXNoZWRXb3JrLnN0YXRlTm9kZTtcbiAgICAgICAgbnVsbCAhPT0gZmluaXNoZWRXb3JrLm1lbW9pemVkU3RhdGVcbiAgICAgICAgICA/IGluc3RhbmNlLl92aXNpYmlsaXR5ICYgNFxuICAgICAgICAgICAgPyByZWN1cnNpdmVseVRyYXZlcnNlUmVjb25uZWN0UGFzc2l2ZUVmZmVjdHMoXG4gICAgICAgICAgICAgICAgZmluaXNoZWRSb290LFxuICAgICAgICAgICAgICAgIGZpbmlzaGVkV29yayxcbiAgICAgICAgICAgICAgICBjb21taXR0ZWRMYW5lcyxcbiAgICAgICAgICAgICAgICBjb21taXR0ZWRUcmFuc2l0aW9ucyxcbiAgICAgICAgICAgICAgICBpbmNsdWRlV29ya0luUHJvZ3Jlc3NFZmZlY3RzXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgIDogcmVjdXJzaXZlbHlUcmF2ZXJzZUF0b21pY1Bhc3NpdmVFZmZlY3RzKFxuICAgICAgICAgICAgICAgIGZpbmlzaGVkUm9vdCxcbiAgICAgICAgICAgICAgICBmaW5pc2hlZFdvcmtcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgIDogKChpbnN0YW5jZS5fdmlzaWJpbGl0eSB8PSA0KSxcbiAgICAgICAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VSZWNvbm5lY3RQYXNzaXZlRWZmZWN0cyhcbiAgICAgICAgICAgICAgZmluaXNoZWRSb290LFxuICAgICAgICAgICAgICBmaW5pc2hlZFdvcmssXG4gICAgICAgICAgICAgIGNvbW1pdHRlZExhbmVzLFxuICAgICAgICAgICAgICBjb21taXR0ZWRUcmFuc2l0aW9ucyxcbiAgICAgICAgICAgICAgaW5jbHVkZVdvcmtJblByb2dyZXNzRWZmZWN0c1xuICAgICAgICAgICAgKSk7XG4gICAgICAgIGluY2x1ZGVXb3JrSW5Qcm9ncmVzc0VmZmVjdHMgJiZcbiAgICAgICAgICBmbGFncyAmIDIwNDggJiZcbiAgICAgICAgICBjb21taXRPZmZzY3JlZW5QYXNzaXZlTW91bnRFZmZlY3RzKFxuICAgICAgICAgICAgZmluaXNoZWRXb3JrLmFsdGVybmF0ZSxcbiAgICAgICAgICAgIGZpbmlzaGVkV29ya1xuICAgICAgICAgICk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAyNDpcbiAgICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZVJlY29ubmVjdFBhc3NpdmVFZmZlY3RzKFxuICAgICAgICAgIGZpbmlzaGVkUm9vdCxcbiAgICAgICAgICBmaW5pc2hlZFdvcmssXG4gICAgICAgICAgY29tbWl0dGVkTGFuZXMsXG4gICAgICAgICAgY29tbWl0dGVkVHJhbnNpdGlvbnMsXG4gICAgICAgICAgaW5jbHVkZVdvcmtJblByb2dyZXNzRWZmZWN0c1xuICAgICAgICApO1xuICAgICAgICBpbmNsdWRlV29ya0luUHJvZ3Jlc3NFZmZlY3RzICYmXG4gICAgICAgICAgZmxhZ3MgJiAyMDQ4ICYmXG4gICAgICAgICAgY29tbWl0Q2FjaGVQYXNzaXZlTW91bnRFZmZlY3QoZmluaXNoZWRXb3JrLmFsdGVybmF0ZSwgZmluaXNoZWRXb3JrKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZWN1cnNpdmVseVRyYXZlcnNlUmVjb25uZWN0UGFzc2l2ZUVmZmVjdHMoXG4gICAgICAgICAgZmluaXNoZWRSb290LFxuICAgICAgICAgIGZpbmlzaGVkV29yayxcbiAgICAgICAgICBjb21taXR0ZWRMYW5lcyxcbiAgICAgICAgICBjb21taXR0ZWRUcmFuc2l0aW9ucyxcbiAgICAgICAgICBpbmNsdWRlV29ya0luUHJvZ3Jlc3NFZmZlY3RzXG4gICAgICAgICk7XG4gICAgfVxuICAgIHBhcmVudEZpYmVyID0gcGFyZW50RmliZXIuc2libGluZztcbiAgfVxufVxuZnVuY3Rpb24gcmVjdXJzaXZlbHlUcmF2ZXJzZUF0b21pY1Bhc3NpdmVFZmZlY3RzKFxuICBmaW5pc2hlZFJvb3QkanNjb21wJDAsXG4gIHBhcmVudEZpYmVyXG4pIHtcbiAgaWYgKHBhcmVudEZpYmVyLnN1YnRyZWVGbGFncyAmIDEwMjU2KVxuICAgIGZvciAocGFyZW50RmliZXIgPSBwYXJlbnRGaWJlci5jaGlsZDsgbnVsbCAhPT0gcGFyZW50RmliZXI7ICkge1xuICAgICAgdmFyIGZpbmlzaGVkUm9vdCA9IGZpbmlzaGVkUm9vdCRqc2NvbXAkMCxcbiAgICAgICAgZmluaXNoZWRXb3JrID0gcGFyZW50RmliZXIsXG4gICAgICAgIGZsYWdzID0gZmluaXNoZWRXb3JrLmZsYWdzO1xuICAgICAgc3dpdGNoIChmaW5pc2hlZFdvcmsudGFnKSB7XG4gICAgICAgIGNhc2UgMjI6XG4gICAgICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZUF0b21pY1Bhc3NpdmVFZmZlY3RzKGZpbmlzaGVkUm9vdCwgZmluaXNoZWRXb3JrKTtcbiAgICAgICAgICBmbGFncyAmIDIwNDggJiZcbiAgICAgICAgICAgIGNvbW1pdE9mZnNjcmVlblBhc3NpdmVNb3VudEVmZmVjdHMoXG4gICAgICAgICAgICAgIGZpbmlzaGVkV29yay5hbHRlcm5hdGUsXG4gICAgICAgICAgICAgIGZpbmlzaGVkV29ya1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAyNDpcbiAgICAgICAgICByZWN1cnNpdmVseVRyYXZlcnNlQXRvbWljUGFzc2l2ZUVmZmVjdHMoZmluaXNoZWRSb290LCBmaW5pc2hlZFdvcmspO1xuICAgICAgICAgIGZsYWdzICYgMjA0OCAmJlxuICAgICAgICAgICAgY29tbWl0Q2FjaGVQYXNzaXZlTW91bnRFZmZlY3QoZmluaXNoZWRXb3JrLmFsdGVybmF0ZSwgZmluaXNoZWRXb3JrKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZWN1cnNpdmVseVRyYXZlcnNlQXRvbWljUGFzc2l2ZUVmZmVjdHMoZmluaXNoZWRSb290LCBmaW5pc2hlZFdvcmspO1xuICAgICAgfVxuICAgICAgcGFyZW50RmliZXIgPSBwYXJlbnRGaWJlci5zaWJsaW5nO1xuICAgIH1cbn1cbnZhciBzdXNwZW5zZXlDb21taXRGbGFnID0gODE5MjtcbmZ1bmN0aW9uIHJlY3Vyc2l2ZWx5QWNjdW11bGF0ZVN1c3BlbnNleUNvbW1pdChwYXJlbnRGaWJlcikge1xuICBpZiAocGFyZW50RmliZXIuc3VidHJlZUZsYWdzICYgc3VzcGVuc2V5Q29tbWl0RmxhZylcbiAgICBmb3IgKHBhcmVudEZpYmVyID0gcGFyZW50RmliZXIuY2hpbGQ7IG51bGwgIT09IHBhcmVudEZpYmVyOyApXG4gICAgICBhY2N1bXVsYXRlU3VzcGVuc2V5Q29tbWl0T25GaWJlcihwYXJlbnRGaWJlciksXG4gICAgICAgIChwYXJlbnRGaWJlciA9IHBhcmVudEZpYmVyLnNpYmxpbmcpO1xufVxuZnVuY3Rpb24gYWNjdW11bGF0ZVN1c3BlbnNleUNvbW1pdE9uRmliZXIoZmliZXIpIHtcbiAgc3dpdGNoIChmaWJlci50YWcpIHtcbiAgICBjYXNlIDI2OlxuICAgICAgcmVjdXJzaXZlbHlBY2N1bXVsYXRlU3VzcGVuc2V5Q29tbWl0KGZpYmVyKTtcbiAgICAgIGZpYmVyLmZsYWdzICYgc3VzcGVuc2V5Q29tbWl0RmxhZyAmJlxuICAgICAgICBudWxsICE9PSBmaWJlci5tZW1vaXplZFN0YXRlICYmXG4gICAgICAgIHN1c3BlbmRSZXNvdXJjZShcbiAgICAgICAgICBjdXJyZW50SG9pc3RhYmxlUm9vdCxcbiAgICAgICAgICBmaWJlci5tZW1vaXplZFN0YXRlLFxuICAgICAgICAgIGZpYmVyLm1lbW9pemVkUHJvcHNcbiAgICAgICAgKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgNTpcbiAgICAgIHJlY3Vyc2l2ZWx5QWNjdW11bGF0ZVN1c3BlbnNleUNvbW1pdChmaWJlcik7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDM6XG4gICAgY2FzZSA0OlxuICAgICAgdmFyIHByZXZpb3VzSG9pc3RhYmxlUm9vdCA9IGN1cnJlbnRIb2lzdGFibGVSb290O1xuICAgICAgY3VycmVudEhvaXN0YWJsZVJvb3QgPSBnZXRIb2lzdGFibGVSb290KGZpYmVyLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKTtcbiAgICAgIHJlY3Vyc2l2ZWx5QWNjdW11bGF0ZVN1c3BlbnNleUNvbW1pdChmaWJlcik7XG4gICAgICBjdXJyZW50SG9pc3RhYmxlUm9vdCA9IHByZXZpb3VzSG9pc3RhYmxlUm9vdDtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMjI6XG4gICAgICBudWxsID09PSBmaWJlci5tZW1vaXplZFN0YXRlICYmXG4gICAgICAgICgocHJldmlvdXNIb2lzdGFibGVSb290ID0gZmliZXIuYWx0ZXJuYXRlKSxcbiAgICAgICAgbnVsbCAhPT0gcHJldmlvdXNIb2lzdGFibGVSb290ICYmXG4gICAgICAgIG51bGwgIT09IHByZXZpb3VzSG9pc3RhYmxlUm9vdC5tZW1vaXplZFN0YXRlXG4gICAgICAgICAgPyAoKHByZXZpb3VzSG9pc3RhYmxlUm9vdCA9IHN1c3BlbnNleUNvbW1pdEZsYWcpLFxuICAgICAgICAgICAgKHN1c3BlbnNleUNvbW1pdEZsYWcgPSAxNjc3NzIxNiksXG4gICAgICAgICAgICByZWN1cnNpdmVseUFjY3VtdWxhdGVTdXNwZW5zZXlDb21taXQoZmliZXIpLFxuICAgICAgICAgICAgKHN1c3BlbnNleUNvbW1pdEZsYWcgPSBwcmV2aW91c0hvaXN0YWJsZVJvb3QpKVxuICAgICAgICAgIDogcmVjdXJzaXZlbHlBY2N1bXVsYXRlU3VzcGVuc2V5Q29tbWl0KGZpYmVyKSk7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgcmVjdXJzaXZlbHlBY2N1bXVsYXRlU3VzcGVuc2V5Q29tbWl0KGZpYmVyKTtcbiAgfVxufVxuZnVuY3Rpb24gZGV0YWNoQWx0ZXJuYXRlU2libGluZ3MocGFyZW50RmliZXIpIHtcbiAgdmFyIHByZXZpb3VzRmliZXIgPSBwYXJlbnRGaWJlci5hbHRlcm5hdGU7XG4gIGlmIChcbiAgICBudWxsICE9PSBwcmV2aW91c0ZpYmVyICYmXG4gICAgKChwYXJlbnRGaWJlciA9IHByZXZpb3VzRmliZXIuY2hpbGQpLCBudWxsICE9PSBwYXJlbnRGaWJlcilcbiAgKSB7XG4gICAgcHJldmlvdXNGaWJlci5jaGlsZCA9IG51bGw7XG4gICAgZG9cbiAgICAgIChwcmV2aW91c0ZpYmVyID0gcGFyZW50RmliZXIuc2libGluZyksXG4gICAgICAgIChwYXJlbnRGaWJlci5zaWJsaW5nID0gbnVsbCksXG4gICAgICAgIChwYXJlbnRGaWJlciA9IHByZXZpb3VzRmliZXIpO1xuICAgIHdoaWxlIChudWxsICE9PSBwYXJlbnRGaWJlcik7XG4gIH1cbn1cbmZ1bmN0aW9uIHJlY3Vyc2l2ZWx5VHJhdmVyc2VQYXNzaXZlVW5tb3VudEVmZmVjdHMocGFyZW50RmliZXIpIHtcbiAgdmFyIGRlbGV0aW9ucyA9IHBhcmVudEZpYmVyLmRlbGV0aW9ucztcbiAgaWYgKDAgIT09IChwYXJlbnRGaWJlci5mbGFncyAmIDE2KSkge1xuICAgIGlmIChudWxsICE9PSBkZWxldGlvbnMpXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRlbGV0aW9ucy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgY2hpbGRUb0RlbGV0ZSA9IGRlbGV0aW9uc1tpXTtcbiAgICAgICAgbmV4dEVmZmVjdCA9IGNoaWxkVG9EZWxldGU7XG4gICAgICAgIGNvbW1pdFBhc3NpdmVVbm1vdW50RWZmZWN0c0luc2lkZU9mRGVsZXRlZFRyZWVfYmVnaW4oXG4gICAgICAgICAgY2hpbGRUb0RlbGV0ZSxcbiAgICAgICAgICBwYXJlbnRGaWJlclxuICAgICAgICApO1xuICAgICAgfVxuICAgIGRldGFjaEFsdGVybmF0ZVNpYmxpbmdzKHBhcmVudEZpYmVyKTtcbiAgfVxuICBpZiAocGFyZW50RmliZXIuc3VidHJlZUZsYWdzICYgMTAyNTYpXG4gICAgZm9yIChwYXJlbnRGaWJlciA9IHBhcmVudEZpYmVyLmNoaWxkOyBudWxsICE9PSBwYXJlbnRGaWJlcjsgKVxuICAgICAgY29tbWl0UGFzc2l2ZVVubW91bnRPbkZpYmVyKHBhcmVudEZpYmVyKSxcbiAgICAgICAgKHBhcmVudEZpYmVyID0gcGFyZW50RmliZXIuc2libGluZyk7XG59XG5mdW5jdGlvbiBjb21taXRQYXNzaXZlVW5tb3VudE9uRmliZXIoZmluaXNoZWRXb3JrKSB7XG4gIHN3aXRjaCAoZmluaXNoZWRXb3JrLnRhZykge1xuICAgIGNhc2UgMDpcbiAgICBjYXNlIDExOlxuICAgIGNhc2UgMTU6XG4gICAgICByZWN1cnNpdmVseVRyYXZlcnNlUGFzc2l2ZVVubW91bnRFZmZlY3RzKGZpbmlzaGVkV29yayk7XG4gICAgICBmaW5pc2hlZFdvcmsuZmxhZ3MgJiAyMDQ4ICYmXG4gICAgICAgIGNvbW1pdEhvb2tFZmZlY3RMaXN0VW5tb3VudCg5LCBmaW5pc2hlZFdvcmssIGZpbmlzaGVkV29yay5yZXR1cm4pO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAzOlxuICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZVBhc3NpdmVVbm1vdW50RWZmZWN0cyhmaW5pc2hlZFdvcmspO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxMjpcbiAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VQYXNzaXZlVW5tb3VudEVmZmVjdHMoZmluaXNoZWRXb3JrKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMjI6XG4gICAgICB2YXIgaW5zdGFuY2UgPSBmaW5pc2hlZFdvcmsuc3RhdGVOb2RlO1xuICAgICAgbnVsbCAhPT0gZmluaXNoZWRXb3JrLm1lbW9pemVkU3RhdGUgJiZcbiAgICAgIGluc3RhbmNlLl92aXNpYmlsaXR5ICYgNCAmJlxuICAgICAgKG51bGwgPT09IGZpbmlzaGVkV29yay5yZXR1cm4gfHwgMTMgIT09IGZpbmlzaGVkV29yay5yZXR1cm4udGFnKVxuICAgICAgICA/ICgoaW5zdGFuY2UuX3Zpc2liaWxpdHkgJj0gLTUpLFxuICAgICAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VEaXNjb25uZWN0UGFzc2l2ZUVmZmVjdHMoZmluaXNoZWRXb3JrKSlcbiAgICAgICAgOiByZWN1cnNpdmVseVRyYXZlcnNlUGFzc2l2ZVVubW91bnRFZmZlY3RzKGZpbmlzaGVkV29yayk7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZVBhc3NpdmVVbm1vdW50RWZmZWN0cyhmaW5pc2hlZFdvcmspO1xuICB9XG59XG5mdW5jdGlvbiByZWN1cnNpdmVseVRyYXZlcnNlRGlzY29ubmVjdFBhc3NpdmVFZmZlY3RzKHBhcmVudEZpYmVyKSB7XG4gIHZhciBkZWxldGlvbnMgPSBwYXJlbnRGaWJlci5kZWxldGlvbnM7XG4gIGlmICgwICE9PSAocGFyZW50RmliZXIuZmxhZ3MgJiAxNikpIHtcbiAgICBpZiAobnVsbCAhPT0gZGVsZXRpb25zKVxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkZWxldGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGNoaWxkVG9EZWxldGUgPSBkZWxldGlvbnNbaV07XG4gICAgICAgIG5leHRFZmZlY3QgPSBjaGlsZFRvRGVsZXRlO1xuICAgICAgICBjb21taXRQYXNzaXZlVW5tb3VudEVmZmVjdHNJbnNpZGVPZkRlbGV0ZWRUcmVlX2JlZ2luKFxuICAgICAgICAgIGNoaWxkVG9EZWxldGUsXG4gICAgICAgICAgcGFyZW50RmliZXJcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICBkZXRhY2hBbHRlcm5hdGVTaWJsaW5ncyhwYXJlbnRGaWJlcik7XG4gIH1cbiAgZm9yIChwYXJlbnRGaWJlciA9IHBhcmVudEZpYmVyLmNoaWxkOyBudWxsICE9PSBwYXJlbnRGaWJlcjsgKSB7XG4gICAgZGVsZXRpb25zID0gcGFyZW50RmliZXI7XG4gICAgc3dpdGNoIChkZWxldGlvbnMudGFnKSB7XG4gICAgICBjYXNlIDA6XG4gICAgICBjYXNlIDExOlxuICAgICAgY2FzZSAxNTpcbiAgICAgICAgY29tbWl0SG9va0VmZmVjdExpc3RVbm1vdW50KDgsIGRlbGV0aW9ucywgZGVsZXRpb25zLnJldHVybik7XG4gICAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VEaXNjb25uZWN0UGFzc2l2ZUVmZmVjdHMoZGVsZXRpb25zKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDIyOlxuICAgICAgICBpID0gZGVsZXRpb25zLnN0YXRlTm9kZTtcbiAgICAgICAgaS5fdmlzaWJpbGl0eSAmIDQgJiZcbiAgICAgICAgICAoKGkuX3Zpc2liaWxpdHkgJj0gLTUpLFxuICAgICAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VEaXNjb25uZWN0UGFzc2l2ZUVmZmVjdHMoZGVsZXRpb25zKSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZURpc2Nvbm5lY3RQYXNzaXZlRWZmZWN0cyhkZWxldGlvbnMpO1xuICAgIH1cbiAgICBwYXJlbnRGaWJlciA9IHBhcmVudEZpYmVyLnNpYmxpbmc7XG4gIH1cbn1cbmZ1bmN0aW9uIGNvbW1pdFBhc3NpdmVVbm1vdW50RWZmZWN0c0luc2lkZU9mRGVsZXRlZFRyZWVfYmVnaW4oXG4gIGRlbGV0ZWRTdWJ0cmVlUm9vdCxcbiAgbmVhcmVzdE1vdW50ZWRBbmNlc3RvclxuKSB7XG4gIGZvciAoOyBudWxsICE9PSBuZXh0RWZmZWN0OyApIHtcbiAgICB2YXIgZmliZXIgPSBuZXh0RWZmZWN0O1xuICAgIHN3aXRjaCAoZmliZXIudGFnKSB7XG4gICAgICBjYXNlIDA6XG4gICAgICBjYXNlIDExOlxuICAgICAgY2FzZSAxNTpcbiAgICAgICAgY29tbWl0SG9va0VmZmVjdExpc3RVbm1vdW50KDgsIGZpYmVyLCBuZWFyZXN0TW91bnRlZEFuY2VzdG9yKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDIzOlxuICAgICAgY2FzZSAyMjpcbiAgICAgICAgaWYgKFxuICAgICAgICAgIG51bGwgIT09IGZpYmVyLm1lbW9pemVkU3RhdGUgJiZcbiAgICAgICAgICBudWxsICE9PSBmaWJlci5tZW1vaXplZFN0YXRlLmNhY2hlUG9vbFxuICAgICAgICApIHtcbiAgICAgICAgICB2YXIgY2FjaGUgPSBmaWJlci5tZW1vaXplZFN0YXRlLmNhY2hlUG9vbC5wb29sO1xuICAgICAgICAgIG51bGwgIT0gY2FjaGUgJiYgY2FjaGUucmVmQ291bnQrKztcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMjQ6XG4gICAgICAgIHJlbGVhc2VDYWNoZShmaWJlci5tZW1vaXplZFN0YXRlLmNhY2hlKTtcbiAgICB9XG4gICAgY2FjaGUgPSBmaWJlci5jaGlsZDtcbiAgICBpZiAobnVsbCAhPT0gY2FjaGUpIChjYWNoZS5yZXR1cm4gPSBmaWJlciksIChuZXh0RWZmZWN0ID0gY2FjaGUpO1xuICAgIGVsc2VcbiAgICAgIGE6IGZvciAoZmliZXIgPSBkZWxldGVkU3VidHJlZVJvb3Q7IG51bGwgIT09IG5leHRFZmZlY3Q7ICkge1xuICAgICAgICBjYWNoZSA9IG5leHRFZmZlY3Q7XG4gICAgICAgIHZhciBzaWJsaW5nID0gY2FjaGUuc2libGluZyxcbiAgICAgICAgICByZXR1cm5GaWJlciA9IGNhY2hlLnJldHVybjtcbiAgICAgICAgZGV0YWNoRmliZXJBZnRlckVmZmVjdHMoY2FjaGUpO1xuICAgICAgICBpZiAoY2FjaGUgPT09IGZpYmVyKSB7XG4gICAgICAgICAgbmV4dEVmZmVjdCA9IG51bGw7XG4gICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobnVsbCAhPT0gc2libGluZykge1xuICAgICAgICAgIHNpYmxpbmcucmV0dXJuID0gcmV0dXJuRmliZXI7XG4gICAgICAgICAgbmV4dEVmZmVjdCA9IHNpYmxpbmc7XG4gICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgfVxuICAgICAgICBuZXh0RWZmZWN0ID0gcmV0dXJuRmliZXI7XG4gICAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIEZpYmVyTm9kZSh0YWcsIHBlbmRpbmdQcm9wcywga2V5LCBtb2RlKSB7XG4gIHRoaXMudGFnID0gdGFnO1xuICB0aGlzLmtleSA9IGtleTtcbiAgdGhpcy5zaWJsaW5nID1cbiAgICB0aGlzLmNoaWxkID1cbiAgICB0aGlzLnJldHVybiA9XG4gICAgdGhpcy5zdGF0ZU5vZGUgPVxuICAgIHRoaXMudHlwZSA9XG4gICAgdGhpcy5lbGVtZW50VHlwZSA9XG4gICAgICBudWxsO1xuICB0aGlzLmluZGV4ID0gMDtcbiAgdGhpcy5yZWZDbGVhbnVwID0gdGhpcy5yZWYgPSBudWxsO1xuICB0aGlzLnBlbmRpbmdQcm9wcyA9IHBlbmRpbmdQcm9wcztcbiAgdGhpcy5kZXBlbmRlbmNpZXMgPVxuICAgIHRoaXMubWVtb2l6ZWRTdGF0ZSA9XG4gICAgdGhpcy51cGRhdGVRdWV1ZSA9XG4gICAgdGhpcy5tZW1vaXplZFByb3BzID1cbiAgICAgIG51bGw7XG4gIHRoaXMubW9kZSA9IG1vZGU7XG4gIHRoaXMuc3VidHJlZUZsYWdzID0gdGhpcy5mbGFncyA9IDA7XG4gIHRoaXMuZGVsZXRpb25zID0gbnVsbDtcbiAgdGhpcy5jaGlsZExhbmVzID0gdGhpcy5sYW5lcyA9IDA7XG4gIHRoaXMuYWx0ZXJuYXRlID0gbnVsbDtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUZpYmVySW1wbENsYXNzKHRhZywgcGVuZGluZ1Byb3BzLCBrZXksIG1vZGUpIHtcbiAgcmV0dXJuIG5ldyBGaWJlck5vZGUodGFnLCBwZW5kaW5nUHJvcHMsIGtleSwgbW9kZSk7XG59XG5mdW5jdGlvbiBzaG91bGRDb25zdHJ1Y3QoQ29tcG9uZW50KSB7XG4gIENvbXBvbmVudCA9IENvbXBvbmVudC5wcm90b3R5cGU7XG4gIHJldHVybiAhKCFDb21wb25lbnQgfHwgIUNvbXBvbmVudC5pc1JlYWN0Q29tcG9uZW50KTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVdvcmtJblByb2dyZXNzKGN1cnJlbnQsIHBlbmRpbmdQcm9wcykge1xuICB2YXIgd29ya0luUHJvZ3Jlc3MgPSBjdXJyZW50LmFsdGVybmF0ZTtcbiAgbnVsbCA9PT0gd29ya0luUHJvZ3Jlc3NcbiAgICA/ICgod29ya0luUHJvZ3Jlc3MgPSBjcmVhdGVGaWJlckltcGxDbGFzcyhcbiAgICAgICAgY3VycmVudC50YWcsXG4gICAgICAgIHBlbmRpbmdQcm9wcyxcbiAgICAgICAgY3VycmVudC5rZXksXG4gICAgICAgIGN1cnJlbnQubW9kZVxuICAgICAgKSksXG4gICAgICAod29ya0luUHJvZ3Jlc3MuZWxlbWVudFR5cGUgPSBjdXJyZW50LmVsZW1lbnRUeXBlKSxcbiAgICAgICh3b3JrSW5Qcm9ncmVzcy50eXBlID0gY3VycmVudC50eXBlKSxcbiAgICAgICh3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGUgPSBjdXJyZW50LnN0YXRlTm9kZSksXG4gICAgICAod29ya0luUHJvZ3Jlc3MuYWx0ZXJuYXRlID0gY3VycmVudCksXG4gICAgICAoY3VycmVudC5hbHRlcm5hdGUgPSB3b3JrSW5Qcm9ncmVzcykpXG4gICAgOiAoKHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcyA9IHBlbmRpbmdQcm9wcyksXG4gICAgICAod29ya0luUHJvZ3Jlc3MudHlwZSA9IGN1cnJlbnQudHlwZSksXG4gICAgICAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgPSAwKSxcbiAgICAgICh3b3JrSW5Qcm9ncmVzcy5zdWJ0cmVlRmxhZ3MgPSAwKSxcbiAgICAgICh3b3JrSW5Qcm9ncmVzcy5kZWxldGlvbnMgPSBudWxsKSk7XG4gIHdvcmtJblByb2dyZXNzLmZsYWdzID0gY3VycmVudC5mbGFncyAmIDMxNDU3MjgwO1xuICB3b3JrSW5Qcm9ncmVzcy5jaGlsZExhbmVzID0gY3VycmVudC5jaGlsZExhbmVzO1xuICB3b3JrSW5Qcm9ncmVzcy5sYW5lcyA9IGN1cnJlbnQubGFuZXM7XG4gIHdvcmtJblByb2dyZXNzLmNoaWxkID0gY3VycmVudC5jaGlsZDtcbiAgd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRQcm9wcyA9IGN1cnJlbnQubWVtb2l6ZWRQcm9wcztcbiAgd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSA9IGN1cnJlbnQubWVtb2l6ZWRTdGF0ZTtcbiAgd29ya0luUHJvZ3Jlc3MudXBkYXRlUXVldWUgPSBjdXJyZW50LnVwZGF0ZVF1ZXVlO1xuICBwZW5kaW5nUHJvcHMgPSBjdXJyZW50LmRlcGVuZGVuY2llcztcbiAgd29ya0luUHJvZ3Jlc3MuZGVwZW5kZW5jaWVzID1cbiAgICBudWxsID09PSBwZW5kaW5nUHJvcHNcbiAgICAgID8gbnVsbFxuICAgICAgOiB7IGxhbmVzOiBwZW5kaW5nUHJvcHMubGFuZXMsIGZpcnN0Q29udGV4dDogcGVuZGluZ1Byb3BzLmZpcnN0Q29udGV4dCB9O1xuICB3b3JrSW5Qcm9ncmVzcy5zaWJsaW5nID0gY3VycmVudC5zaWJsaW5nO1xuICB3b3JrSW5Qcm9ncmVzcy5pbmRleCA9IGN1cnJlbnQuaW5kZXg7XG4gIHdvcmtJblByb2dyZXNzLnJlZiA9IGN1cnJlbnQucmVmO1xuICB3b3JrSW5Qcm9ncmVzcy5yZWZDbGVhbnVwID0gY3VycmVudC5yZWZDbGVhbnVwO1xuICByZXR1cm4gd29ya0luUHJvZ3Jlc3M7XG59XG5mdW5jdGlvbiByZXNldFdvcmtJblByb2dyZXNzKHdvcmtJblByb2dyZXNzLCByZW5kZXJMYW5lcykge1xuICB3b3JrSW5Qcm9ncmVzcy5mbGFncyAmPSAzMTQ1NzI4MjtcbiAgdmFyIGN1cnJlbnQgPSB3b3JrSW5Qcm9ncmVzcy5hbHRlcm5hdGU7XG4gIG51bGwgPT09IGN1cnJlbnRcbiAgICA/ICgod29ya0luUHJvZ3Jlc3MuY2hpbGRMYW5lcyA9IDApLFxuICAgICAgKHdvcmtJblByb2dyZXNzLmxhbmVzID0gcmVuZGVyTGFuZXMpLFxuICAgICAgKHdvcmtJblByb2dyZXNzLmNoaWxkID0gbnVsbCksXG4gICAgICAod29ya0luUHJvZ3Jlc3Muc3VidHJlZUZsYWdzID0gMCksXG4gICAgICAod29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRQcm9wcyA9IG51bGwpLFxuICAgICAgKHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUgPSBudWxsKSxcbiAgICAgICh3b3JrSW5Qcm9ncmVzcy51cGRhdGVRdWV1ZSA9IG51bGwpLFxuICAgICAgKHdvcmtJblByb2dyZXNzLmRlcGVuZGVuY2llcyA9IG51bGwpLFxuICAgICAgKHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZSA9IG51bGwpKVxuICAgIDogKCh3b3JrSW5Qcm9ncmVzcy5jaGlsZExhbmVzID0gY3VycmVudC5jaGlsZExhbmVzKSxcbiAgICAgICh3b3JrSW5Qcm9ncmVzcy5sYW5lcyA9IGN1cnJlbnQubGFuZXMpLFxuICAgICAgKHdvcmtJblByb2dyZXNzLmNoaWxkID0gY3VycmVudC5jaGlsZCksXG4gICAgICAod29ya0luUHJvZ3Jlc3Muc3VidHJlZUZsYWdzID0gMCksXG4gICAgICAod29ya0luUHJvZ3Jlc3MuZGVsZXRpb25zID0gbnVsbCksXG4gICAgICAod29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRQcm9wcyA9IGN1cnJlbnQubWVtb2l6ZWRQcm9wcyksXG4gICAgICAod29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSA9IGN1cnJlbnQubWVtb2l6ZWRTdGF0ZSksXG4gICAgICAod29ya0luUHJvZ3Jlc3MudXBkYXRlUXVldWUgPSBjdXJyZW50LnVwZGF0ZVF1ZXVlKSxcbiAgICAgICh3b3JrSW5Qcm9ncmVzcy50eXBlID0gY3VycmVudC50eXBlKSxcbiAgICAgIChyZW5kZXJMYW5lcyA9IGN1cnJlbnQuZGVwZW5kZW5jaWVzKSxcbiAgICAgICh3b3JrSW5Qcm9ncmVzcy5kZXBlbmRlbmNpZXMgPVxuICAgICAgICBudWxsID09PSByZW5kZXJMYW5lc1xuICAgICAgICAgID8gbnVsbFxuICAgICAgICAgIDoge1xuICAgICAgICAgICAgICBsYW5lczogcmVuZGVyTGFuZXMubGFuZXMsXG4gICAgICAgICAgICAgIGZpcnN0Q29udGV4dDogcmVuZGVyTGFuZXMuZmlyc3RDb250ZXh0XG4gICAgICAgICAgICB9KSk7XG4gIHJldHVybiB3b3JrSW5Qcm9ncmVzcztcbn1cbmZ1bmN0aW9uIGNyZWF0ZUZpYmVyRnJvbVR5cGVBbmRQcm9wcyhcbiAgdHlwZSxcbiAga2V5LFxuICBwZW5kaW5nUHJvcHMsXG4gIG93bmVyLFxuICBtb2RlLFxuICBsYW5lc1xuKSB7XG4gIHZhciBmaWJlclRhZyA9IDA7XG4gIG93bmVyID0gdHlwZTtcbiAgaWYgKFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHR5cGUpIHNob3VsZENvbnN0cnVjdCh0eXBlKSAmJiAoZmliZXJUYWcgPSAxKTtcbiAgZWxzZSBpZiAoXCJzdHJpbmdcIiA9PT0gdHlwZW9mIHR5cGUpXG4gICAgZmliZXJUYWcgPSBpc0hvc3RIb2lzdGFibGVUeXBlKFxuICAgICAgdHlwZSxcbiAgICAgIHBlbmRpbmdQcm9wcyxcbiAgICAgIGNvbnRleHRTdGFja0N1cnNvci5jdXJyZW50XG4gICAgKVxuICAgICAgPyAyNlxuICAgICAgOiBcImh0bWxcIiA9PT0gdHlwZSB8fCBcImhlYWRcIiA9PT0gdHlwZSB8fCBcImJvZHlcIiA9PT0gdHlwZVxuICAgICAgICA/IDI3XG4gICAgICAgIDogNTtcbiAgZWxzZVxuICAgIGE6IHN3aXRjaCAodHlwZSkge1xuICAgICAgY2FzZSBSRUFDVF9GUkFHTUVOVF9UWVBFOlxuICAgICAgICByZXR1cm4gY3JlYXRlRmliZXJGcm9tRnJhZ21lbnQocGVuZGluZ1Byb3BzLmNoaWxkcmVuLCBtb2RlLCBsYW5lcywga2V5KTtcbiAgICAgIGNhc2UgUkVBQ1RfU1RSSUNUX01PREVfVFlQRTpcbiAgICAgICAgZmliZXJUYWcgPSA4O1xuICAgICAgICBtb2RlIHw9IDI0O1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgUkVBQ1RfUFJPRklMRVJfVFlQRTpcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAodHlwZSA9IGNyZWF0ZUZpYmVySW1wbENsYXNzKDEyLCBwZW5kaW5nUHJvcHMsIGtleSwgbW9kZSB8IDIpKSxcbiAgICAgICAgICAodHlwZS5lbGVtZW50VHlwZSA9IFJFQUNUX1BST0ZJTEVSX1RZUEUpLFxuICAgICAgICAgICh0eXBlLmxhbmVzID0gbGFuZXMpLFxuICAgICAgICAgIHR5cGVcbiAgICAgICAgKTtcbiAgICAgIGNhc2UgUkVBQ1RfU1VTUEVOU0VfVFlQRTpcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAodHlwZSA9IGNyZWF0ZUZpYmVySW1wbENsYXNzKDEzLCBwZW5kaW5nUHJvcHMsIGtleSwgbW9kZSkpLFxuICAgICAgICAgICh0eXBlLmVsZW1lbnRUeXBlID0gUkVBQ1RfU1VTUEVOU0VfVFlQRSksXG4gICAgICAgICAgKHR5cGUubGFuZXMgPSBsYW5lcyksXG4gICAgICAgICAgdHlwZVxuICAgICAgICApO1xuICAgICAgY2FzZSBSRUFDVF9TVVNQRU5TRV9MSVNUX1RZUEU6XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgKHR5cGUgPSBjcmVhdGVGaWJlckltcGxDbGFzcygxOSwgcGVuZGluZ1Byb3BzLCBrZXksIG1vZGUpKSxcbiAgICAgICAgICAodHlwZS5lbGVtZW50VHlwZSA9IFJFQUNUX1NVU1BFTlNFX0xJU1RfVFlQRSksXG4gICAgICAgICAgKHR5cGUubGFuZXMgPSBsYW5lcyksXG4gICAgICAgICAgdHlwZVxuICAgICAgICApO1xuICAgICAgY2FzZSBSRUFDVF9PRkZTQ1JFRU5fVFlQRTpcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUZpYmVyRnJvbU9mZnNjcmVlbihwZW5kaW5nUHJvcHMsIG1vZGUsIGxhbmVzLCBrZXkpO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKFwib2JqZWN0XCIgPT09IHR5cGVvZiB0eXBlICYmIG51bGwgIT09IHR5cGUpXG4gICAgICAgICAgc3dpdGNoICh0eXBlLiQkdHlwZW9mKSB7XG4gICAgICAgICAgICBjYXNlIFJFQUNUX1BST1ZJREVSX1RZUEU6XG4gICAgICAgICAgICBjYXNlIFJFQUNUX0NPTlRFWFRfVFlQRTpcbiAgICAgICAgICAgICAgZmliZXJUYWcgPSAxMDtcbiAgICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICAgIGNhc2UgUkVBQ1RfQ09OU1VNRVJfVFlQRTpcbiAgICAgICAgICAgICAgZmliZXJUYWcgPSA5O1xuICAgICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgICAgY2FzZSBSRUFDVF9GT1JXQVJEX1JFRl9UWVBFOlxuICAgICAgICAgICAgICBmaWJlclRhZyA9IDExO1xuICAgICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgICAgY2FzZSBSRUFDVF9NRU1PX1RZUEU6XG4gICAgICAgICAgICAgIGZpYmVyVGFnID0gMTQ7XG4gICAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgICBjYXNlIFJFQUNUX0xBWllfVFlQRTpcbiAgICAgICAgICAgICAgZmliZXJUYWcgPSAxNjtcbiAgICAgICAgICAgICAgb3duZXIgPSBudWxsO1xuICAgICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgIH1cbiAgICAgICAgZmliZXJUYWcgPSAyOTtcbiAgICAgICAgcGVuZGluZ1Byb3BzID0gRXJyb3IoXG4gICAgICAgICAgZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxMzAsIG51bGwgPT09IHR5cGUgPyBcIm51bGxcIiA6IHR5cGVvZiB0eXBlLCBcIlwiKVxuICAgICAgICApO1xuICAgICAgICBvd25lciA9IG51bGw7XG4gICAgfVxuICBrZXkgPSBjcmVhdGVGaWJlckltcGxDbGFzcyhmaWJlclRhZywgcGVuZGluZ1Byb3BzLCBrZXksIG1vZGUpO1xuICBrZXkuZWxlbWVudFR5cGUgPSB0eXBlO1xuICBrZXkudHlwZSA9IG93bmVyO1xuICBrZXkubGFuZXMgPSBsYW5lcztcbiAgcmV0dXJuIGtleTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUZpYmVyRnJvbUZyYWdtZW50KGVsZW1lbnRzLCBtb2RlLCBsYW5lcywga2V5KSB7XG4gIGVsZW1lbnRzID0gY3JlYXRlRmliZXJJbXBsQ2xhc3MoNywgZWxlbWVudHMsIGtleSwgbW9kZSk7XG4gIGVsZW1lbnRzLmxhbmVzID0gbGFuZXM7XG4gIHJldHVybiBlbGVtZW50cztcbn1cbmZ1bmN0aW9uIGNyZWF0ZUZpYmVyRnJvbU9mZnNjcmVlbihwZW5kaW5nUHJvcHMsIG1vZGUsIGxhbmVzLCBrZXkpIHtcbiAgcGVuZGluZ1Byb3BzID0gY3JlYXRlRmliZXJJbXBsQ2xhc3MoMjIsIHBlbmRpbmdQcm9wcywga2V5LCBtb2RlKTtcbiAgcGVuZGluZ1Byb3BzLmVsZW1lbnRUeXBlID0gUkVBQ1RfT0ZGU0NSRUVOX1RZUEU7XG4gIHBlbmRpbmdQcm9wcy5sYW5lcyA9IGxhbmVzO1xuICB2YXIgcHJpbWFyeUNoaWxkSW5zdGFuY2UgPSB7XG4gICAgX3Zpc2liaWxpdHk6IDEsXG4gICAgX3BlbmRpbmdWaXNpYmlsaXR5OiAxLFxuICAgIF9wZW5kaW5nTWFya2VyczogbnVsbCxcbiAgICBfcmV0cnlDYWNoZTogbnVsbCxcbiAgICBfdHJhbnNpdGlvbnM6IG51bGwsXG4gICAgX2N1cnJlbnQ6IG51bGwsXG4gICAgZGV0YWNoOiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgZmliZXIgPSBwcmltYXJ5Q2hpbGRJbnN0YW5jZS5fY3VycmVudDtcbiAgICAgIGlmIChudWxsID09PSBmaWJlcikgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg0NTYpKTtcbiAgICAgIGlmICgwID09PSAocHJpbWFyeUNoaWxkSW5zdGFuY2UuX3BlbmRpbmdWaXNpYmlsaXR5ICYgMikpIHtcbiAgICAgICAgdmFyIHJvb3QgPSBlbnF1ZXVlQ29uY3VycmVudFJlbmRlckZvckxhbmUoZmliZXIsIDIpO1xuICAgICAgICBudWxsICE9PSByb290ICYmXG4gICAgICAgICAgKChwcmltYXJ5Q2hpbGRJbnN0YW5jZS5fcGVuZGluZ1Zpc2liaWxpdHkgfD0gMiksXG4gICAgICAgICAgc2NoZWR1bGVVcGRhdGVPbkZpYmVyKHJvb3QsIGZpYmVyLCAyKSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBhdHRhY2g6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBmaWJlciA9IHByaW1hcnlDaGlsZEluc3RhbmNlLl9jdXJyZW50O1xuICAgICAgaWYgKG51bGwgPT09IGZpYmVyKSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDQ1NikpO1xuICAgICAgaWYgKDAgIT09IChwcmltYXJ5Q2hpbGRJbnN0YW5jZS5fcGVuZGluZ1Zpc2liaWxpdHkgJiAyKSkge1xuICAgICAgICB2YXIgcm9vdCA9IGVucXVldWVDb25jdXJyZW50UmVuZGVyRm9yTGFuZShmaWJlciwgMik7XG4gICAgICAgIG51bGwgIT09IHJvb3QgJiZcbiAgICAgICAgICAoKHByaW1hcnlDaGlsZEluc3RhbmNlLl9wZW5kaW5nVmlzaWJpbGl0eSAmPSAtMyksXG4gICAgICAgICAgc2NoZWR1bGVVcGRhdGVPbkZpYmVyKHJvb3QsIGZpYmVyLCAyKSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuICBwZW5kaW5nUHJvcHMuc3RhdGVOb2RlID0gcHJpbWFyeUNoaWxkSW5zdGFuY2U7XG4gIHJldHVybiBwZW5kaW5nUHJvcHM7XG59XG5mdW5jdGlvbiBjcmVhdGVGaWJlckZyb21UZXh0KGNvbnRlbnQsIG1vZGUsIGxhbmVzKSB7XG4gIGNvbnRlbnQgPSBjcmVhdGVGaWJlckltcGxDbGFzcyg2LCBjb250ZW50LCBudWxsLCBtb2RlKTtcbiAgY29udGVudC5sYW5lcyA9IGxhbmVzO1xuICByZXR1cm4gY29udGVudDtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUZpYmVyRnJvbVBvcnRhbChwb3J0YWwsIG1vZGUsIGxhbmVzKSB7XG4gIG1vZGUgPSBjcmVhdGVGaWJlckltcGxDbGFzcyhcbiAgICA0LFxuICAgIG51bGwgIT09IHBvcnRhbC5jaGlsZHJlbiA/IHBvcnRhbC5jaGlsZHJlbiA6IFtdLFxuICAgIHBvcnRhbC5rZXksXG4gICAgbW9kZVxuICApO1xuICBtb2RlLmxhbmVzID0gbGFuZXM7XG4gIG1vZGUuc3RhdGVOb2RlID0ge1xuICAgIGNvbnRhaW5lckluZm86IHBvcnRhbC5jb250YWluZXJJbmZvLFxuICAgIHBlbmRpbmdDaGlsZHJlbjogbnVsbCxcbiAgICBpbXBsZW1lbnRhdGlvbjogcG9ydGFsLmltcGxlbWVudGF0aW9uXG4gIH07XG4gIHJldHVybiBtb2RlO1xufVxuZnVuY3Rpb24gbWFya1VwZGF0ZSh3b3JrSW5Qcm9ncmVzcykge1xuICB3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSA0O1xufVxuZnVuY3Rpb24gcHJlbG9hZFJlc291cmNlQW5kU3VzcGVuZElmTmVlZGVkKHdvcmtJblByb2dyZXNzLCByZXNvdXJjZSkge1xuICBpZiAoXCJzdHlsZXNoZWV0XCIgIT09IHJlc291cmNlLnR5cGUgfHwgMCAhPT0gKHJlc291cmNlLnN0YXRlLmxvYWRpbmcgJiA0KSlcbiAgICB3b3JrSW5Qcm9ncmVzcy5mbGFncyAmPSAtMTY3NzcyMTc7XG4gIGVsc2UgaWYgKCgod29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gMTY3NzcyMTYpLCAhcHJlbG9hZFJlc291cmNlKHJlc291cmNlKSkpIHtcbiAgICByZXNvdXJjZSA9IHN1c3BlbnNlSGFuZGxlclN0YWNrQ3Vyc29yLmN1cnJlbnQ7XG4gICAgaWYgKFxuICAgICAgbnVsbCAhPT0gcmVzb3VyY2UgJiZcbiAgICAgICgod29ya0luUHJvZ3Jlc3NSb290UmVuZGVyTGFuZXMgJiA0MTk0MTc2KSA9PT1cbiAgICAgIHdvcmtJblByb2dyZXNzUm9vdFJlbmRlckxhbmVzXG4gICAgICAgID8gbnVsbCAhPT0gc2hlbGxCb3VuZGFyeVxuICAgICAgICA6ICgod29ya0luUHJvZ3Jlc3NSb290UmVuZGVyTGFuZXMgJiA2MjkxNDU2MCkgIT09XG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lcyAmJlxuICAgICAgICAgICAgMCA9PT0gKHdvcmtJblByb2dyZXNzUm9vdFJlbmRlckxhbmVzICYgNTM2ODcwOTEyKSkgfHxcbiAgICAgICAgICByZXNvdXJjZSAhPT0gc2hlbGxCb3VuZGFyeSlcbiAgICApXG4gICAgICB0aHJvdyAoXG4gICAgICAgICgoc3VzcGVuZGVkVGhlbmFibGUgPSBub29wU3VzcGVuc2V5Q29tbWl0VGhlbmFibGUpLFxuICAgICAgICBTdXNwZW5zZXlDb21taXRFeGNlcHRpb24pXG4gICAgICApO1xuICAgIHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IDgxOTI7XG4gIH1cbn1cbmZ1bmN0aW9uIHNjaGVkdWxlUmV0cnlFZmZlY3Qod29ya0luUHJvZ3Jlc3MsIHJldHJ5UXVldWUpIHtcbiAgbnVsbCAhPT0gcmV0cnlRdWV1ZSAmJiAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gNCk7XG4gIHdvcmtJblByb2dyZXNzLmZsYWdzICYgMTYzODQgJiZcbiAgICAoKHJldHJ5UXVldWUgPVxuICAgICAgMjIgIT09IHdvcmtJblByb2dyZXNzLnRhZyA/IGNsYWltTmV4dFJldHJ5TGFuZSgpIDogNTM2ODcwOTEyKSxcbiAgICAod29ya0luUHJvZ3Jlc3MubGFuZXMgfD0gcmV0cnlRdWV1ZSksXG4gICAgKHdvcmtJblByb2dyZXNzU3VzcGVuZGVkUmV0cnlMYW5lcyB8PSByZXRyeVF1ZXVlKSk7XG59XG5mdW5jdGlvbiBjdXRPZmZUYWlsSWZOZWVkZWQocmVuZGVyU3RhdGUsIGhhc1JlbmRlcmVkQVRhaWxGYWxsYmFjaykge1xuICBpZiAoIWlzSHlkcmF0aW5nKVxuICAgIHN3aXRjaCAocmVuZGVyU3RhdGUudGFpbE1vZGUpIHtcbiAgICAgIGNhc2UgXCJoaWRkZW5cIjpcbiAgICAgICAgaGFzUmVuZGVyZWRBVGFpbEZhbGxiYWNrID0gcmVuZGVyU3RhdGUudGFpbDtcbiAgICAgICAgZm9yICh2YXIgbGFzdFRhaWxOb2RlID0gbnVsbDsgbnVsbCAhPT0gaGFzUmVuZGVyZWRBVGFpbEZhbGxiYWNrOyApXG4gICAgICAgICAgbnVsbCAhPT0gaGFzUmVuZGVyZWRBVGFpbEZhbGxiYWNrLmFsdGVybmF0ZSAmJlxuICAgICAgICAgICAgKGxhc3RUYWlsTm9kZSA9IGhhc1JlbmRlcmVkQVRhaWxGYWxsYmFjayksXG4gICAgICAgICAgICAoaGFzUmVuZGVyZWRBVGFpbEZhbGxiYWNrID0gaGFzUmVuZGVyZWRBVGFpbEZhbGxiYWNrLnNpYmxpbmcpO1xuICAgICAgICBudWxsID09PSBsYXN0VGFpbE5vZGVcbiAgICAgICAgICA/IChyZW5kZXJTdGF0ZS50YWlsID0gbnVsbClcbiAgICAgICAgICA6IChsYXN0VGFpbE5vZGUuc2libGluZyA9IG51bGwpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJjb2xsYXBzZWRcIjpcbiAgICAgICAgbGFzdFRhaWxOb2RlID0gcmVuZGVyU3RhdGUudGFpbDtcbiAgICAgICAgZm9yICh2YXIgbGFzdFRhaWxOb2RlJDEzMSA9IG51bGw7IG51bGwgIT09IGxhc3RUYWlsTm9kZTsgKVxuICAgICAgICAgIG51bGwgIT09IGxhc3RUYWlsTm9kZS5hbHRlcm5hdGUgJiYgKGxhc3RUYWlsTm9kZSQxMzEgPSBsYXN0VGFpbE5vZGUpLFxuICAgICAgICAgICAgKGxhc3RUYWlsTm9kZSA9IGxhc3RUYWlsTm9kZS5zaWJsaW5nKTtcbiAgICAgICAgbnVsbCA9PT0gbGFzdFRhaWxOb2RlJDEzMVxuICAgICAgICAgID8gaGFzUmVuZGVyZWRBVGFpbEZhbGxiYWNrIHx8IG51bGwgPT09IHJlbmRlclN0YXRlLnRhaWxcbiAgICAgICAgICAgID8gKHJlbmRlclN0YXRlLnRhaWwgPSBudWxsKVxuICAgICAgICAgICAgOiAocmVuZGVyU3RhdGUudGFpbC5zaWJsaW5nID0gbnVsbClcbiAgICAgICAgICA6IChsYXN0VGFpbE5vZGUkMTMxLnNpYmxpbmcgPSBudWxsKTtcbiAgICB9XG59XG5mdW5jdGlvbiBidWJibGVQcm9wZXJ0aWVzKGNvbXBsZXRlZFdvcmspIHtcbiAgdmFyIGRpZEJhaWxvdXQgPVxuICAgICAgbnVsbCAhPT0gY29tcGxldGVkV29yay5hbHRlcm5hdGUgJiZcbiAgICAgIGNvbXBsZXRlZFdvcmsuYWx0ZXJuYXRlLmNoaWxkID09PSBjb21wbGV0ZWRXb3JrLmNoaWxkLFxuICAgIG5ld0NoaWxkTGFuZXMgPSAwLFxuICAgIHN1YnRyZWVGbGFncyA9IDA7XG4gIGlmIChkaWRCYWlsb3V0KVxuICAgIGZvciAodmFyIGNoaWxkJDEzMiA9IGNvbXBsZXRlZFdvcmsuY2hpbGQ7IG51bGwgIT09IGNoaWxkJDEzMjsgKVxuICAgICAgKG5ld0NoaWxkTGFuZXMgfD0gY2hpbGQkMTMyLmxhbmVzIHwgY2hpbGQkMTMyLmNoaWxkTGFuZXMpLFxuICAgICAgICAoc3VidHJlZUZsYWdzIHw9IGNoaWxkJDEzMi5zdWJ0cmVlRmxhZ3MgJiAzMTQ1NzI4MCksXG4gICAgICAgIChzdWJ0cmVlRmxhZ3MgfD0gY2hpbGQkMTMyLmZsYWdzICYgMzE0NTcyODApLFxuICAgICAgICAoY2hpbGQkMTMyLnJldHVybiA9IGNvbXBsZXRlZFdvcmspLFxuICAgICAgICAoY2hpbGQkMTMyID0gY2hpbGQkMTMyLnNpYmxpbmcpO1xuICBlbHNlXG4gICAgZm9yIChjaGlsZCQxMzIgPSBjb21wbGV0ZWRXb3JrLmNoaWxkOyBudWxsICE9PSBjaGlsZCQxMzI7IClcbiAgICAgIChuZXdDaGlsZExhbmVzIHw9IGNoaWxkJDEzMi5sYW5lcyB8IGNoaWxkJDEzMi5jaGlsZExhbmVzKSxcbiAgICAgICAgKHN1YnRyZWVGbGFncyB8PSBjaGlsZCQxMzIuc3VidHJlZUZsYWdzKSxcbiAgICAgICAgKHN1YnRyZWVGbGFncyB8PSBjaGlsZCQxMzIuZmxhZ3MpLFxuICAgICAgICAoY2hpbGQkMTMyLnJldHVybiA9IGNvbXBsZXRlZFdvcmspLFxuICAgICAgICAoY2hpbGQkMTMyID0gY2hpbGQkMTMyLnNpYmxpbmcpO1xuICBjb21wbGV0ZWRXb3JrLnN1YnRyZWVGbGFncyB8PSBzdWJ0cmVlRmxhZ3M7XG4gIGNvbXBsZXRlZFdvcmsuY2hpbGRMYW5lcyA9IG5ld0NoaWxkTGFuZXM7XG4gIHJldHVybiBkaWRCYWlsb3V0O1xufVxuZnVuY3Rpb24gY29tcGxldGVXb3JrKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCByZW5kZXJMYW5lcykge1xuICB2YXIgbmV3UHJvcHMgPSB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHM7XG4gIHBvcFRyZWVDb250ZXh0KHdvcmtJblByb2dyZXNzKTtcbiAgc3dpdGNoICh3b3JrSW5Qcm9ncmVzcy50YWcpIHtcbiAgICBjYXNlIDE2OlxuICAgIGNhc2UgMTU6XG4gICAgY2FzZSAwOlxuICAgIGNhc2UgMTE6XG4gICAgY2FzZSA3OlxuICAgIGNhc2UgODpcbiAgICBjYXNlIDEyOlxuICAgIGNhc2UgOTpcbiAgICBjYXNlIDE0OlxuICAgICAgcmV0dXJuIGJ1YmJsZVByb3BlcnRpZXMod29ya0luUHJvZ3Jlc3MpLCBudWxsO1xuICAgIGNhc2UgMTpcbiAgICAgIHJldHVybiBidWJibGVQcm9wZXJ0aWVzKHdvcmtJblByb2dyZXNzKSwgbnVsbDtcbiAgICBjYXNlIDM6XG4gICAgICByZW5kZXJMYW5lcyA9IHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZTtcbiAgICAgIG5ld1Byb3BzID0gbnVsbDtcbiAgICAgIG51bGwgIT09IGN1cnJlbnQgJiYgKG5ld1Byb3BzID0gY3VycmVudC5tZW1vaXplZFN0YXRlLmNhY2hlKTtcbiAgICAgIHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUuY2FjaGUgIT09IG5ld1Byb3BzICYmXG4gICAgICAgICh3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSAyMDQ4KTtcbiAgICAgIHBvcFByb3ZpZGVyKENhY2hlQ29udGV4dCk7XG4gICAgICBwb3BIb3N0Q29udGFpbmVyKCk7XG4gICAgICByZW5kZXJMYW5lcy5wZW5kaW5nQ29udGV4dCAmJlxuICAgICAgICAoKHJlbmRlckxhbmVzLmNvbnRleHQgPSByZW5kZXJMYW5lcy5wZW5kaW5nQ29udGV4dCksXG4gICAgICAgIChyZW5kZXJMYW5lcy5wZW5kaW5nQ29udGV4dCA9IG51bGwpKTtcbiAgICAgIGlmIChudWxsID09PSBjdXJyZW50IHx8IG51bGwgPT09IGN1cnJlbnQuY2hpbGQpXG4gICAgICAgIHBvcEh5ZHJhdGlvblN0YXRlKHdvcmtJblByb2dyZXNzKVxuICAgICAgICAgID8gbWFya1VwZGF0ZSh3b3JrSW5Qcm9ncmVzcylcbiAgICAgICAgICA6IG51bGwgPT09IGN1cnJlbnQgfHxcbiAgICAgICAgICAgIChjdXJyZW50Lm1lbW9pemVkU3RhdGUuaXNEZWh5ZHJhdGVkICYmXG4gICAgICAgICAgICAgIDAgPT09ICh3b3JrSW5Qcm9ncmVzcy5mbGFncyAmIDI1NikpIHx8XG4gICAgICAgICAgICAoKHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IDEwMjQpLFxuICAgICAgICAgICAgbnVsbCAhPT0gaHlkcmF0aW9uRXJyb3JzICYmXG4gICAgICAgICAgICAgIChxdWV1ZVJlY292ZXJhYmxlRXJyb3JzKGh5ZHJhdGlvbkVycm9ycyksXG4gICAgICAgICAgICAgIChoeWRyYXRpb25FcnJvcnMgPSBudWxsKSkpO1xuICAgICAgYnViYmxlUHJvcGVydGllcyh3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICBjYXNlIDI2OlxuICAgICAgcmV0dXJuIChcbiAgICAgICAgKHJlbmRlckxhbmVzID0gd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSksXG4gICAgICAgIG51bGwgPT09IGN1cnJlbnRcbiAgICAgICAgICA/IChtYXJrVXBkYXRlKHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgICAgIG51bGwgIT09IHJlbmRlckxhbmVzXG4gICAgICAgICAgICAgID8gKGJ1YmJsZVByb3BlcnRpZXMod29ya0luUHJvZ3Jlc3MpLFxuICAgICAgICAgICAgICAgIHByZWxvYWRSZXNvdXJjZUFuZFN1c3BlbmRJZk5lZWRlZCh3b3JrSW5Qcm9ncmVzcywgcmVuZGVyTGFuZXMpKVxuICAgICAgICAgICAgICA6IChidWJibGVQcm9wZXJ0aWVzKHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgICAgICAgICAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgJj0gLTE2Nzc3MjE3KSkpXG4gICAgICAgICAgOiByZW5kZXJMYW5lc1xuICAgICAgICAgICAgPyByZW5kZXJMYW5lcyAhPT0gY3VycmVudC5tZW1vaXplZFN0YXRlXG4gICAgICAgICAgICAgID8gKG1hcmtVcGRhdGUod29ya0luUHJvZ3Jlc3MpLFxuICAgICAgICAgICAgICAgIGJ1YmJsZVByb3BlcnRpZXMod29ya0luUHJvZ3Jlc3MpLFxuICAgICAgICAgICAgICAgIHByZWxvYWRSZXNvdXJjZUFuZFN1c3BlbmRJZk5lZWRlZCh3b3JrSW5Qcm9ncmVzcywgcmVuZGVyTGFuZXMpKVxuICAgICAgICAgICAgICA6IChidWJibGVQcm9wZXJ0aWVzKHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgICAgICAgICAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgJj0gLTE2Nzc3MjE3KSlcbiAgICAgICAgICAgIDogKGN1cnJlbnQubWVtb2l6ZWRQcm9wcyAhPT0gbmV3UHJvcHMgJiYgbWFya1VwZGF0ZSh3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAgICAgICAgIGJ1YmJsZVByb3BlcnRpZXMod29ya0luUHJvZ3Jlc3MpLFxuICAgICAgICAgICAgICAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgJj0gLTE2Nzc3MjE3KSksXG4gICAgICAgIG51bGxcbiAgICAgICk7XG4gICAgY2FzZSAyNzpcbiAgICAgIHBvcEhvc3RDb250ZXh0KHdvcmtJblByb2dyZXNzKTtcbiAgICAgIHJlbmRlckxhbmVzID0gcm9vdEluc3RhbmNlU3RhY2tDdXJzb3IuY3VycmVudDtcbiAgICAgIHZhciB0eXBlID0gd29ya0luUHJvZ3Jlc3MudHlwZTtcbiAgICAgIGlmIChudWxsICE9PSBjdXJyZW50ICYmIG51bGwgIT0gd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlKVxuICAgICAgICBjdXJyZW50Lm1lbW9pemVkUHJvcHMgIT09IG5ld1Byb3BzICYmIG1hcmtVcGRhdGUod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgZWxzZSB7XG4gICAgICAgIGlmICghbmV3UHJvcHMpIHtcbiAgICAgICAgICBpZiAobnVsbCA9PT0gd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlKVxuICAgICAgICAgICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxNjYpKTtcbiAgICAgICAgICBidWJibGVQcm9wZXJ0aWVzKHdvcmtJblByb2dyZXNzKTtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBjdXJyZW50ID0gY29udGV4dFN0YWNrQ3Vyc29yLmN1cnJlbnQ7XG4gICAgICAgIHBvcEh5ZHJhdGlvblN0YXRlKHdvcmtJblByb2dyZXNzKVxuICAgICAgICAgID8gcHJlcGFyZVRvSHlkcmF0ZUhvc3RJbnN0YW5jZSh3b3JrSW5Qcm9ncmVzcywgY3VycmVudClcbiAgICAgICAgICA6ICgoY3VycmVudCA9IHJlc29sdmVTaW5nbGV0b25JbnN0YW5jZSh0eXBlLCBuZXdQcm9wcywgcmVuZGVyTGFuZXMpKSxcbiAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGUgPSBjdXJyZW50KSxcbiAgICAgICAgICAgIG1hcmtVcGRhdGUod29ya0luUHJvZ3Jlc3MpKTtcbiAgICAgIH1cbiAgICAgIGJ1YmJsZVByb3BlcnRpZXMod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgY2FzZSA1OlxuICAgICAgcG9wSG9zdENvbnRleHQod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgcmVuZGVyTGFuZXMgPSB3b3JrSW5Qcm9ncmVzcy50eXBlO1xuICAgICAgaWYgKG51bGwgIT09IGN1cnJlbnQgJiYgbnVsbCAhPSB3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGUpXG4gICAgICAgIGN1cnJlbnQubWVtb2l6ZWRQcm9wcyAhPT0gbmV3UHJvcHMgJiYgbWFya1VwZGF0ZSh3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICBlbHNlIHtcbiAgICAgICAgaWYgKCFuZXdQcm9wcykge1xuICAgICAgICAgIGlmIChudWxsID09PSB3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGUpXG4gICAgICAgICAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDE2NikpO1xuICAgICAgICAgIGJ1YmJsZVByb3BlcnRpZXMod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGN1cnJlbnQgPSBjb250ZXh0U3RhY2tDdXJzb3IuY3VycmVudDtcbiAgICAgICAgaWYgKHBvcEh5ZHJhdGlvblN0YXRlKHdvcmtJblByb2dyZXNzKSlcbiAgICAgICAgICBwcmVwYXJlVG9IeWRyYXRlSG9zdEluc3RhbmNlKHdvcmtJblByb2dyZXNzLCBjdXJyZW50KTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgdHlwZSA9IGdldE93bmVyRG9jdW1lbnRGcm9tUm9vdENvbnRhaW5lcihcbiAgICAgICAgICAgIHJvb3RJbnN0YW5jZVN0YWNrQ3Vyc29yLmN1cnJlbnRcbiAgICAgICAgICApO1xuICAgICAgICAgIHN3aXRjaCAoY3VycmVudCkge1xuICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICBjdXJyZW50ID0gdHlwZS5jcmVhdGVFbGVtZW50TlMoXG4gICAgICAgICAgICAgICAgXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLFxuICAgICAgICAgICAgICAgIHJlbmRlckxhbmVzXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICBjdXJyZW50ID0gdHlwZS5jcmVhdGVFbGVtZW50TlMoXG4gICAgICAgICAgICAgICAgXCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCIsXG4gICAgICAgICAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICBzd2l0Y2ggKHJlbmRlckxhbmVzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBcInN2Z1wiOlxuICAgICAgICAgICAgICAgICAgY3VycmVudCA9IHR5cGUuY3JlYXRlRWxlbWVudE5TKFxuICAgICAgICAgICAgICAgICAgICBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsXG4gICAgICAgICAgICAgICAgICAgIHJlbmRlckxhbmVzXG4gICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcIm1hdGhcIjpcbiAgICAgICAgICAgICAgICAgIGN1cnJlbnQgPSB0eXBlLmNyZWF0ZUVsZW1lbnROUyhcbiAgICAgICAgICAgICAgICAgICAgXCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCIsXG4gICAgICAgICAgICAgICAgICAgIHJlbmRlckxhbmVzXG4gICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcInNjcmlwdFwiOlxuICAgICAgICAgICAgICAgICAgY3VycmVudCA9IHR5cGUuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgICAgICAgICAgIGN1cnJlbnQuaW5uZXJIVE1MID0gXCI8c2NyaXB0PlxceDNjL3NjcmlwdD5cIjtcbiAgICAgICAgICAgICAgICAgIGN1cnJlbnQgPSBjdXJyZW50LnJlbW92ZUNoaWxkKGN1cnJlbnQuZmlyc3RDaGlsZCk7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwic2VsZWN0XCI6XG4gICAgICAgICAgICAgICAgICBjdXJyZW50ID1cbiAgICAgICAgICAgICAgICAgICAgXCJzdHJpbmdcIiA9PT0gdHlwZW9mIG5ld1Byb3BzLmlzXG4gICAgICAgICAgICAgICAgICAgICAgPyB0eXBlLmNyZWF0ZUVsZW1lbnQoXCJzZWxlY3RcIiwgeyBpczogbmV3UHJvcHMuaXMgfSlcbiAgICAgICAgICAgICAgICAgICAgICA6IHR5cGUuY3JlYXRlRWxlbWVudChcInNlbGVjdFwiKTtcbiAgICAgICAgICAgICAgICAgIG5ld1Byb3BzLm11bHRpcGxlXG4gICAgICAgICAgICAgICAgICAgID8gKGN1cnJlbnQubXVsdGlwbGUgPSAhMClcbiAgICAgICAgICAgICAgICAgICAgOiBuZXdQcm9wcy5zaXplICYmIChjdXJyZW50LnNpemUgPSBuZXdQcm9wcy5zaXplKTtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICBjdXJyZW50ID1cbiAgICAgICAgICAgICAgICAgICAgXCJzdHJpbmdcIiA9PT0gdHlwZW9mIG5ld1Byb3BzLmlzXG4gICAgICAgICAgICAgICAgICAgICAgPyB0eXBlLmNyZWF0ZUVsZW1lbnQocmVuZGVyTGFuZXMsIHsgaXM6IG5ld1Byb3BzLmlzIH0pXG4gICAgICAgICAgICAgICAgICAgICAgOiB0eXBlLmNyZWF0ZUVsZW1lbnQocmVuZGVyTGFuZXMpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGN1cnJlbnRbaW50ZXJuYWxJbnN0YW5jZUtleV0gPSB3b3JrSW5Qcm9ncmVzcztcbiAgICAgICAgICBjdXJyZW50W2ludGVybmFsUHJvcHNLZXldID0gbmV3UHJvcHM7XG4gICAgICAgICAgYTogZm9yICh0eXBlID0gd29ya0luUHJvZ3Jlc3MuY2hpbGQ7IG51bGwgIT09IHR5cGU7ICkge1xuICAgICAgICAgICAgaWYgKDUgPT09IHR5cGUudGFnIHx8IDYgPT09IHR5cGUudGFnKVxuICAgICAgICAgICAgICBjdXJyZW50LmFwcGVuZENoaWxkKHR5cGUuc3RhdGVOb2RlKTtcbiAgICAgICAgICAgIGVsc2UgaWYgKDQgIT09IHR5cGUudGFnICYmIDI3ICE9PSB0eXBlLnRhZyAmJiBudWxsICE9PSB0eXBlLmNoaWxkKSB7XG4gICAgICAgICAgICAgIHR5cGUuY2hpbGQucmV0dXJuID0gdHlwZTtcbiAgICAgICAgICAgICAgdHlwZSA9IHR5cGUuY2hpbGQ7XG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHR5cGUgPT09IHdvcmtJblByb2dyZXNzKSBicmVhayBhO1xuICAgICAgICAgICAgZm9yICg7IG51bGwgPT09IHR5cGUuc2libGluZzsgKSB7XG4gICAgICAgICAgICAgIGlmIChudWxsID09PSB0eXBlLnJldHVybiB8fCB0eXBlLnJldHVybiA9PT0gd29ya0luUHJvZ3Jlc3MpXG4gICAgICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICAgICAgdHlwZSA9IHR5cGUucmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdHlwZS5zaWJsaW5nLnJldHVybiA9IHR5cGUucmV0dXJuO1xuICAgICAgICAgICAgdHlwZSA9IHR5cGUuc2libGluZztcbiAgICAgICAgICB9XG4gICAgICAgICAgd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlID0gY3VycmVudDtcbiAgICAgICAgICBhOiBzd2l0Y2ggKFxuICAgICAgICAgICAgKHNldEluaXRpYWxQcm9wZXJ0aWVzKGN1cnJlbnQsIHJlbmRlckxhbmVzLCBuZXdQcm9wcyksIHJlbmRlckxhbmVzKVxuICAgICAgICAgICkge1xuICAgICAgICAgICAgY2FzZSBcImJ1dHRvblwiOlxuICAgICAgICAgICAgY2FzZSBcImlucHV0XCI6XG4gICAgICAgICAgICBjYXNlIFwic2VsZWN0XCI6XG4gICAgICAgICAgICBjYXNlIFwidGV4dGFyZWFcIjpcbiAgICAgICAgICAgICAgY3VycmVudCA9ICEhbmV3UHJvcHMuYXV0b0ZvY3VzO1xuICAgICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgICAgY2FzZSBcImltZ1wiOlxuICAgICAgICAgICAgICBjdXJyZW50ID0gITA7XG4gICAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICBjdXJyZW50ID0gITE7XG4gICAgICAgICAgfVxuICAgICAgICAgIGN1cnJlbnQgJiYgbWFya1VwZGF0ZSh3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGJ1YmJsZVByb3BlcnRpZXMod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgd29ya0luUHJvZ3Jlc3MuZmxhZ3MgJj0gLTE2Nzc3MjE3O1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgY2FzZSA2OlxuICAgICAgaWYgKGN1cnJlbnQgJiYgbnVsbCAhPSB3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGUpXG4gICAgICAgIGN1cnJlbnQubWVtb2l6ZWRQcm9wcyAhPT0gbmV3UHJvcHMgJiYgbWFya1VwZGF0ZSh3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICBlbHNlIHtcbiAgICAgICAgaWYgKFwic3RyaW5nXCIgIT09IHR5cGVvZiBuZXdQcm9wcyAmJiBudWxsID09PSB3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGUpXG4gICAgICAgICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxNjYpKTtcbiAgICAgICAgY3VycmVudCA9IHJvb3RJbnN0YW5jZVN0YWNrQ3Vyc29yLmN1cnJlbnQ7XG4gICAgICAgIGlmIChwb3BIeWRyYXRpb25TdGF0ZSh3b3JrSW5Qcm9ncmVzcykpIHtcbiAgICAgICAgICBjdXJyZW50ID0gd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlO1xuICAgICAgICAgIHJlbmRlckxhbmVzID0gd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRQcm9wcztcbiAgICAgICAgICBuZXdQcm9wcyA9IG51bGw7XG4gICAgICAgICAgdHlwZSA9IGh5ZHJhdGlvblBhcmVudEZpYmVyO1xuICAgICAgICAgIGlmIChudWxsICE9PSB0eXBlKVxuICAgICAgICAgICAgc3dpdGNoICh0eXBlLnRhZykge1xuICAgICAgICAgICAgICBjYXNlIDI3OlxuICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgbmV3UHJvcHMgPSB0eXBlLm1lbW9pemVkUHJvcHM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgY3VycmVudFtpbnRlcm5hbEluc3RhbmNlS2V5XSA9IHdvcmtJblByb2dyZXNzO1xuICAgICAgICAgIGN1cnJlbnQgPVxuICAgICAgICAgICAgY3VycmVudC5ub2RlVmFsdWUgPT09IHJlbmRlckxhbmVzIHx8XG4gICAgICAgICAgICAobnVsbCAhPT0gbmV3UHJvcHMgJiYgITAgPT09IG5ld1Byb3BzLnN1cHByZXNzSHlkcmF0aW9uV2FybmluZykgfHxcbiAgICAgICAgICAgIGNoZWNrRm9yVW5tYXRjaGVkVGV4dChjdXJyZW50Lm5vZGVWYWx1ZSwgcmVuZGVyTGFuZXMpXG4gICAgICAgICAgICAgID8gITBcbiAgICAgICAgICAgICAgOiAhMTtcbiAgICAgICAgICBjdXJyZW50IHx8IHRocm93T25IeWRyYXRpb25NaXNtYXRjaCh3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICAgIH0gZWxzZVxuICAgICAgICAgIChjdXJyZW50ID1cbiAgICAgICAgICAgIGdldE93bmVyRG9jdW1lbnRGcm9tUm9vdENvbnRhaW5lcihjdXJyZW50KS5jcmVhdGVUZXh0Tm9kZShcbiAgICAgICAgICAgICAgbmV3UHJvcHNcbiAgICAgICAgICAgICkpLFxuICAgICAgICAgICAgKGN1cnJlbnRbaW50ZXJuYWxJbnN0YW5jZUtleV0gPSB3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAgICAgICAod29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlID0gY3VycmVudCk7XG4gICAgICB9XG4gICAgICBidWJibGVQcm9wZXJ0aWVzKHdvcmtJblByb2dyZXNzKTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIGNhc2UgMTM6XG4gICAgICBuZXdQcm9wcyA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGU7XG4gICAgICBpZiAoXG4gICAgICAgIG51bGwgPT09IGN1cnJlbnQgfHxcbiAgICAgICAgKG51bGwgIT09IGN1cnJlbnQubWVtb2l6ZWRTdGF0ZSAmJlxuICAgICAgICAgIG51bGwgIT09IGN1cnJlbnQubWVtb2l6ZWRTdGF0ZS5kZWh5ZHJhdGVkKVxuICAgICAgKSB7XG4gICAgICAgIHR5cGUgPSBwb3BIeWRyYXRpb25TdGF0ZSh3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICAgIGlmIChudWxsICE9PSBuZXdQcm9wcyAmJiBudWxsICE9PSBuZXdQcm9wcy5kZWh5ZHJhdGVkKSB7XG4gICAgICAgICAgaWYgKG51bGwgPT09IGN1cnJlbnQpIHtcbiAgICAgICAgICAgIGlmICghdHlwZSkgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgzMTgpKTtcbiAgICAgICAgICAgIHR5cGUgPSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlO1xuICAgICAgICAgICAgdHlwZSA9IG51bGwgIT09IHR5cGUgPyB0eXBlLmRlaHlkcmF0ZWQgOiBudWxsO1xuICAgICAgICAgICAgaWYgKCF0eXBlKSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDMxNykpO1xuICAgICAgICAgICAgdHlwZVtpbnRlcm5hbEluc3RhbmNlS2V5XSA9IHdvcmtJblByb2dyZXNzO1xuICAgICAgICAgIH0gZWxzZVxuICAgICAgICAgICAgcmVzZXRIeWRyYXRpb25TdGF0ZSgpLFxuICAgICAgICAgICAgICAwID09PSAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgJiAxMjgpICYmXG4gICAgICAgICAgICAgICAgKHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUgPSBudWxsKSxcbiAgICAgICAgICAgICAgKHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IDQpO1xuICAgICAgICAgIGJ1YmJsZVByb3BlcnRpZXMod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgICAgIHR5cGUgPSAhMTtcbiAgICAgICAgfSBlbHNlXG4gICAgICAgICAgbnVsbCAhPT0gaHlkcmF0aW9uRXJyb3JzICYmXG4gICAgICAgICAgICAocXVldWVSZWNvdmVyYWJsZUVycm9ycyhoeWRyYXRpb25FcnJvcnMpLCAoaHlkcmF0aW9uRXJyb3JzID0gbnVsbCkpLFxuICAgICAgICAgICAgKHR5cGUgPSAhMCk7XG4gICAgICAgIGlmICghdHlwZSkge1xuICAgICAgICAgIGlmICh3b3JrSW5Qcm9ncmVzcy5mbGFncyAmIDI1NilcbiAgICAgICAgICAgIHJldHVybiBwb3BTdXNwZW5zZUhhbmRsZXIod29ya0luUHJvZ3Jlc3MpLCB3b3JrSW5Qcm9ncmVzcztcbiAgICAgICAgICBwb3BTdXNwZW5zZUhhbmRsZXIod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBwb3BTdXNwZW5zZUhhbmRsZXIod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgaWYgKDAgIT09ICh3b3JrSW5Qcm9ncmVzcy5mbGFncyAmIDEyOCkpXG4gICAgICAgIHJldHVybiAod29ya0luUHJvZ3Jlc3MubGFuZXMgPSByZW5kZXJMYW5lcyksIHdvcmtJblByb2dyZXNzO1xuICAgICAgcmVuZGVyTGFuZXMgPSBudWxsICE9PSBuZXdQcm9wcztcbiAgICAgIGN1cnJlbnQgPSBudWxsICE9PSBjdXJyZW50ICYmIG51bGwgIT09IGN1cnJlbnQubWVtb2l6ZWRTdGF0ZTtcbiAgICAgIGlmIChyZW5kZXJMYW5lcykge1xuICAgICAgICBuZXdQcm9wcyA9IHdvcmtJblByb2dyZXNzLmNoaWxkO1xuICAgICAgICB0eXBlID0gbnVsbDtcbiAgICAgICAgbnVsbCAhPT0gbmV3UHJvcHMuYWx0ZXJuYXRlICYmXG4gICAgICAgICAgbnVsbCAhPT0gbmV3UHJvcHMuYWx0ZXJuYXRlLm1lbW9pemVkU3RhdGUgJiZcbiAgICAgICAgICBudWxsICE9PSBuZXdQcm9wcy5hbHRlcm5hdGUubWVtb2l6ZWRTdGF0ZS5jYWNoZVBvb2wgJiZcbiAgICAgICAgICAodHlwZSA9IG5ld1Byb3BzLmFsdGVybmF0ZS5tZW1vaXplZFN0YXRlLmNhY2hlUG9vbC5wb29sKTtcbiAgICAgICAgdmFyIGNhY2hlJDE0NCA9IG51bGw7XG4gICAgICAgIG51bGwgIT09IG5ld1Byb3BzLm1lbW9pemVkU3RhdGUgJiZcbiAgICAgICAgICBudWxsICE9PSBuZXdQcm9wcy5tZW1vaXplZFN0YXRlLmNhY2hlUG9vbCAmJlxuICAgICAgICAgIChjYWNoZSQxNDQgPSBuZXdQcm9wcy5tZW1vaXplZFN0YXRlLmNhY2hlUG9vbC5wb29sKTtcbiAgICAgICAgY2FjaGUkMTQ0ICE9PSB0eXBlICYmIChuZXdQcm9wcy5mbGFncyB8PSAyMDQ4KTtcbiAgICAgIH1cbiAgICAgIHJlbmRlckxhbmVzICE9PSBjdXJyZW50ICYmXG4gICAgICAgIHJlbmRlckxhbmVzICYmXG4gICAgICAgICh3b3JrSW5Qcm9ncmVzcy5jaGlsZC5mbGFncyB8PSA4MTkyKTtcbiAgICAgIHNjaGVkdWxlUmV0cnlFZmZlY3Qod29ya0luUHJvZ3Jlc3MsIHdvcmtJblByb2dyZXNzLnVwZGF0ZVF1ZXVlKTtcbiAgICAgIGJ1YmJsZVByb3BlcnRpZXMod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgY2FzZSA0OlxuICAgICAgcmV0dXJuIChcbiAgICAgICAgcG9wSG9zdENvbnRhaW5lcigpLFxuICAgICAgICBudWxsID09PSBjdXJyZW50ICYmXG4gICAgICAgICAgbGlzdGVuVG9BbGxTdXBwb3J0ZWRFdmVudHMod29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pLFxuICAgICAgICBidWJibGVQcm9wZXJ0aWVzKHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgbnVsbFxuICAgICAgKTtcbiAgICBjYXNlIDEwOlxuICAgICAgcmV0dXJuIChcbiAgICAgICAgcG9wUHJvdmlkZXIod29ya0luUHJvZ3Jlc3MudHlwZSksIGJ1YmJsZVByb3BlcnRpZXMod29ya0luUHJvZ3Jlc3MpLCBudWxsXG4gICAgICApO1xuICAgIGNhc2UgMTk6XG4gICAgICBwb3Aoc3VzcGVuc2VTdGFja0N1cnNvcik7XG4gICAgICB0eXBlID0gd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZTtcbiAgICAgIGlmIChudWxsID09PSB0eXBlKSByZXR1cm4gYnViYmxlUHJvcGVydGllcyh3b3JrSW5Qcm9ncmVzcyksIG51bGw7XG4gICAgICBuZXdQcm9wcyA9IDAgIT09ICh3b3JrSW5Qcm9ncmVzcy5mbGFncyAmIDEyOCk7XG4gICAgICBjYWNoZSQxNDQgPSB0eXBlLnJlbmRlcmluZztcbiAgICAgIGlmIChudWxsID09PSBjYWNoZSQxNDQpXG4gICAgICAgIGlmIChuZXdQcm9wcykgY3V0T2ZmVGFpbElmTmVlZGVkKHR5cGUsICExKTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgMCAhPT0gd29ya0luUHJvZ3Jlc3NSb290RXhpdFN0YXR1cyB8fFxuICAgICAgICAgICAgKG51bGwgIT09IGN1cnJlbnQgJiYgMCAhPT0gKGN1cnJlbnQuZmxhZ3MgJiAxMjgpKVxuICAgICAgICAgIClcbiAgICAgICAgICAgIGZvciAoY3VycmVudCA9IHdvcmtJblByb2dyZXNzLmNoaWxkOyBudWxsICE9PSBjdXJyZW50OyApIHtcbiAgICAgICAgICAgICAgY2FjaGUkMTQ0ID0gZmluZEZpcnN0U3VzcGVuZGVkKGN1cnJlbnQpO1xuICAgICAgICAgICAgICBpZiAobnVsbCAhPT0gY2FjaGUkMTQ0KSB7XG4gICAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gMTI4O1xuICAgICAgICAgICAgICAgIGN1dE9mZlRhaWxJZk5lZWRlZCh0eXBlLCAhMSk7XG4gICAgICAgICAgICAgICAgY3VycmVudCA9IGNhY2hlJDE0NC51cGRhdGVRdWV1ZTtcbiAgICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcy51cGRhdGVRdWV1ZSA9IGN1cnJlbnQ7XG4gICAgICAgICAgICAgICAgc2NoZWR1bGVSZXRyeUVmZmVjdCh3b3JrSW5Qcm9ncmVzcywgY3VycmVudCk7XG4gICAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3Muc3VidHJlZUZsYWdzID0gMDtcbiAgICAgICAgICAgICAgICBjdXJyZW50ID0gcmVuZGVyTGFuZXM7XG4gICAgICAgICAgICAgICAgZm9yIChyZW5kZXJMYW5lcyA9IHdvcmtJblByb2dyZXNzLmNoaWxkOyBudWxsICE9PSByZW5kZXJMYW5lczsgKVxuICAgICAgICAgICAgICAgICAgcmVzZXRXb3JrSW5Qcm9ncmVzcyhyZW5kZXJMYW5lcywgY3VycmVudCksXG4gICAgICAgICAgICAgICAgICAgIChyZW5kZXJMYW5lcyA9IHJlbmRlckxhbmVzLnNpYmxpbmcpO1xuICAgICAgICAgICAgICAgIHB1c2goXG4gICAgICAgICAgICAgICAgICBzdXNwZW5zZVN0YWNrQ3Vyc29yLFxuICAgICAgICAgICAgICAgICAgKHN1c3BlbnNlU3RhY2tDdXJzb3IuY3VycmVudCAmIDEpIHwgMlxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdvcmtJblByb2dyZXNzLmNoaWxkO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGN1cnJlbnQgPSBjdXJyZW50LnNpYmxpbmc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgbnVsbCAhPT0gdHlwZS50YWlsICYmXG4gICAgICAgICAgICBub3coKSA+IHdvcmtJblByb2dyZXNzUm9vdFJlbmRlclRhcmdldFRpbWUgJiZcbiAgICAgICAgICAgICgod29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gMTI4KSxcbiAgICAgICAgICAgIChuZXdQcm9wcyA9ICEwKSxcbiAgICAgICAgICAgIGN1dE9mZlRhaWxJZk5lZWRlZCh0eXBlLCAhMSksXG4gICAgICAgICAgICAod29ya0luUHJvZ3Jlc3MubGFuZXMgPSA0MTk0MzA0KSk7XG4gICAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBpZiAoIW5ld1Byb3BzKVxuICAgICAgICAgIGlmICgoKGN1cnJlbnQgPSBmaW5kRmlyc3RTdXNwZW5kZWQoY2FjaGUkMTQ0KSksIG51bGwgIT09IGN1cnJlbnQpKSB7XG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICgod29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gMTI4KSxcbiAgICAgICAgICAgICAgKG5ld1Byb3BzID0gITApLFxuICAgICAgICAgICAgICAoY3VycmVudCA9IGN1cnJlbnQudXBkYXRlUXVldWUpLFxuICAgICAgICAgICAgICAod29ya0luUHJvZ3Jlc3MudXBkYXRlUXVldWUgPSBjdXJyZW50KSxcbiAgICAgICAgICAgICAgc2NoZWR1bGVSZXRyeUVmZmVjdCh3b3JrSW5Qcm9ncmVzcywgY3VycmVudCksXG4gICAgICAgICAgICAgIGN1dE9mZlRhaWxJZk5lZWRlZCh0eXBlLCAhMCksXG4gICAgICAgICAgICAgIG51bGwgPT09IHR5cGUudGFpbCAmJlxuICAgICAgICAgICAgICAgIFwiaGlkZGVuXCIgPT09IHR5cGUudGFpbE1vZGUgJiZcbiAgICAgICAgICAgICAgICAhY2FjaGUkMTQ0LmFsdGVybmF0ZSAmJlxuICAgICAgICAgICAgICAgICFpc0h5ZHJhdGluZylcbiAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgcmV0dXJuIGJ1YmJsZVByb3BlcnRpZXMod29ya0luUHJvZ3Jlc3MpLCBudWxsO1xuICAgICAgICAgIH0gZWxzZVxuICAgICAgICAgICAgMiAqIG5vdygpIC0gdHlwZS5yZW5kZXJpbmdTdGFydFRpbWUgPlxuICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJUYXJnZXRUaW1lICYmXG4gICAgICAgICAgICAgIDUzNjg3MDkxMiAhPT0gcmVuZGVyTGFuZXMgJiZcbiAgICAgICAgICAgICAgKCh3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSAxMjgpLFxuICAgICAgICAgICAgICAobmV3UHJvcHMgPSAhMCksXG4gICAgICAgICAgICAgIGN1dE9mZlRhaWxJZk5lZWRlZCh0eXBlLCAhMSksXG4gICAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5sYW5lcyA9IDQxOTQzMDQpKTtcbiAgICAgICAgdHlwZS5pc0JhY2t3YXJkc1xuICAgICAgICAgID8gKChjYWNoZSQxNDQuc2libGluZyA9IHdvcmtJblByb2dyZXNzLmNoaWxkKSxcbiAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5jaGlsZCA9IGNhY2hlJDE0NCkpXG4gICAgICAgICAgOiAoKGN1cnJlbnQgPSB0eXBlLmxhc3QpLFxuICAgICAgICAgICAgbnVsbCAhPT0gY3VycmVudFxuICAgICAgICAgICAgICA/IChjdXJyZW50LnNpYmxpbmcgPSBjYWNoZSQxNDQpXG4gICAgICAgICAgICAgIDogKHdvcmtJblByb2dyZXNzLmNoaWxkID0gY2FjaGUkMTQ0KSxcbiAgICAgICAgICAgICh0eXBlLmxhc3QgPSBjYWNoZSQxNDQpKTtcbiAgICAgIH1cbiAgICAgIGlmIChudWxsICE9PSB0eXBlLnRhaWwpXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgKHdvcmtJblByb2dyZXNzID0gdHlwZS50YWlsKSxcbiAgICAgICAgICAodHlwZS5yZW5kZXJpbmcgPSB3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAgICAgKHR5cGUudGFpbCA9IHdvcmtJblByb2dyZXNzLnNpYmxpbmcpLFxuICAgICAgICAgICh0eXBlLnJlbmRlcmluZ1N0YXJ0VGltZSA9IG5vdygpKSxcbiAgICAgICAgICAod29ya0luUHJvZ3Jlc3Muc2libGluZyA9IG51bGwpLFxuICAgICAgICAgIChjdXJyZW50ID0gc3VzcGVuc2VTdGFja0N1cnNvci5jdXJyZW50KSxcbiAgICAgICAgICBwdXNoKHN1c3BlbnNlU3RhY2tDdXJzb3IsIG5ld1Byb3BzID8gKGN1cnJlbnQgJiAxKSB8IDIgOiBjdXJyZW50ICYgMSksXG4gICAgICAgICAgd29ya0luUHJvZ3Jlc3NcbiAgICAgICAgKTtcbiAgICAgIGJ1YmJsZVByb3BlcnRpZXMod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgY2FzZSAyMjpcbiAgICBjYXNlIDIzOlxuICAgICAgcmV0dXJuIChcbiAgICAgICAgcG9wU3VzcGVuc2VIYW5kbGVyKHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgcG9wSGlkZGVuQ29udGV4dCgpLFxuICAgICAgICAobmV3UHJvcHMgPSBudWxsICE9PSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlKSxcbiAgICAgICAgbnVsbCAhPT0gY3VycmVudFxuICAgICAgICAgID8gKG51bGwgIT09IGN1cnJlbnQubWVtb2l6ZWRTdGF0ZSkgIT09IG5ld1Byb3BzICYmXG4gICAgICAgICAgICAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gODE5MilcbiAgICAgICAgICA6IG5ld1Byb3BzICYmICh3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSA4MTkyKSxcbiAgICAgICAgbmV3UHJvcHNcbiAgICAgICAgICA/IDAgIT09IChyZW5kZXJMYW5lcyAmIDUzNjg3MDkxMikgJiZcbiAgICAgICAgICAgIDAgPT09ICh3b3JrSW5Qcm9ncmVzcy5mbGFncyAmIDEyOCkgJiZcbiAgICAgICAgICAgIChidWJibGVQcm9wZXJ0aWVzKHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLnN1YnRyZWVGbGFncyAmIDYgJiYgKHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IDgxOTIpKVxuICAgICAgICAgIDogYnViYmxlUHJvcGVydGllcyh3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAgIChyZW5kZXJMYW5lcyA9IHdvcmtJblByb2dyZXNzLnVwZGF0ZVF1ZXVlKSxcbiAgICAgICAgbnVsbCAhPT0gcmVuZGVyTGFuZXMgJiZcbiAgICAgICAgICBzY2hlZHVsZVJldHJ5RWZmZWN0KHdvcmtJblByb2dyZXNzLCByZW5kZXJMYW5lcy5yZXRyeVF1ZXVlKSxcbiAgICAgICAgKHJlbmRlckxhbmVzID0gbnVsbCksXG4gICAgICAgIG51bGwgIT09IGN1cnJlbnQgJiZcbiAgICAgICAgICBudWxsICE9PSBjdXJyZW50Lm1lbW9pemVkU3RhdGUgJiZcbiAgICAgICAgICBudWxsICE9PSBjdXJyZW50Lm1lbW9pemVkU3RhdGUuY2FjaGVQb29sICYmXG4gICAgICAgICAgKHJlbmRlckxhbmVzID0gY3VycmVudC5tZW1vaXplZFN0YXRlLmNhY2hlUG9vbC5wb29sKSxcbiAgICAgICAgKG5ld1Byb3BzID0gbnVsbCksXG4gICAgICAgIG51bGwgIT09IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUgJiZcbiAgICAgICAgICBudWxsICE9PSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlLmNhY2hlUG9vbCAmJlxuICAgICAgICAgIChuZXdQcm9wcyA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUuY2FjaGVQb29sLnBvb2wpLFxuICAgICAgICBuZXdQcm9wcyAhPT0gcmVuZGVyTGFuZXMgJiYgKHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IDIwNDgpLFxuICAgICAgICBudWxsICE9PSBjdXJyZW50ICYmIHBvcChyZXN1bWVkQ2FjaGUpLFxuICAgICAgICBudWxsXG4gICAgICApO1xuICAgIGNhc2UgMjQ6XG4gICAgICByZXR1cm4gKFxuICAgICAgICAocmVuZGVyTGFuZXMgPSBudWxsKSxcbiAgICAgICAgbnVsbCAhPT0gY3VycmVudCAmJiAocmVuZGVyTGFuZXMgPSBjdXJyZW50Lm1lbW9pemVkU3RhdGUuY2FjaGUpLFxuICAgICAgICB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlLmNhY2hlICE9PSByZW5kZXJMYW5lcyAmJlxuICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSAyMDQ4KSxcbiAgICAgICAgcG9wUHJvdmlkZXIoQ2FjaGVDb250ZXh0KSxcbiAgICAgICAgYnViYmxlUHJvcGVydGllcyh3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAgIG51bGxcbiAgICAgICk7XG4gICAgY2FzZSAyNTpcbiAgICAgIHJldHVybiBudWxsO1xuICB9XG4gIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTU2LCB3b3JrSW5Qcm9ncmVzcy50YWcpKTtcbn1cbmZ1bmN0aW9uIHVud2luZFdvcmsoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MpIHtcbiAgcG9wVHJlZUNvbnRleHQod29ya0luUHJvZ3Jlc3MpO1xuICBzd2l0Y2ggKHdvcmtJblByb2dyZXNzLnRhZykge1xuICAgIGNhc2UgMTpcbiAgICAgIHJldHVybiAoXG4gICAgICAgIChjdXJyZW50ID0gd29ya0luUHJvZ3Jlc3MuZmxhZ3MpLFxuICAgICAgICBjdXJyZW50ICYgNjU1MzZcbiAgICAgICAgICA/ICgod29ya0luUHJvZ3Jlc3MuZmxhZ3MgPSAoY3VycmVudCAmIC02NTUzNykgfCAxMjgpLCB3b3JrSW5Qcm9ncmVzcylcbiAgICAgICAgICA6IG51bGxcbiAgICAgICk7XG4gICAgY2FzZSAzOlxuICAgICAgcmV0dXJuIChcbiAgICAgICAgcG9wUHJvdmlkZXIoQ2FjaGVDb250ZXh0KSxcbiAgICAgICAgcG9wSG9zdENvbnRhaW5lcigpLFxuICAgICAgICAoY3VycmVudCA9IHdvcmtJblByb2dyZXNzLmZsYWdzKSxcbiAgICAgICAgMCAhPT0gKGN1cnJlbnQgJiA2NTUzNikgJiYgMCA9PT0gKGN1cnJlbnQgJiAxMjgpXG4gICAgICAgICAgPyAoKHdvcmtJblByb2dyZXNzLmZsYWdzID0gKGN1cnJlbnQgJiAtNjU1MzcpIHwgMTI4KSwgd29ya0luUHJvZ3Jlc3MpXG4gICAgICAgICAgOiBudWxsXG4gICAgICApO1xuICAgIGNhc2UgMjY6XG4gICAgY2FzZSAyNzpcbiAgICBjYXNlIDU6XG4gICAgICByZXR1cm4gcG9wSG9zdENvbnRleHQod29ya0luUHJvZ3Jlc3MpLCBudWxsO1xuICAgIGNhc2UgMTM6XG4gICAgICBwb3BTdXNwZW5zZUhhbmRsZXIod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgY3VycmVudCA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGU7XG4gICAgICBpZiAobnVsbCAhPT0gY3VycmVudCAmJiBudWxsICE9PSBjdXJyZW50LmRlaHlkcmF0ZWQpIHtcbiAgICAgICAgaWYgKG51bGwgPT09IHdvcmtJblByb2dyZXNzLmFsdGVybmF0ZSlcbiAgICAgICAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDM0MCkpO1xuICAgICAgICByZXNldEh5ZHJhdGlvblN0YXRlKCk7XG4gICAgICB9XG4gICAgICBjdXJyZW50ID0gd29ya0luUHJvZ3Jlc3MuZmxhZ3M7XG4gICAgICByZXR1cm4gY3VycmVudCAmIDY1NTM2XG4gICAgICAgID8gKCh3b3JrSW5Qcm9ncmVzcy5mbGFncyA9IChjdXJyZW50ICYgLTY1NTM3KSB8IDEyOCksIHdvcmtJblByb2dyZXNzKVxuICAgICAgICA6IG51bGw7XG4gICAgY2FzZSAxOTpcbiAgICAgIHJldHVybiBwb3Aoc3VzcGVuc2VTdGFja0N1cnNvciksIG51bGw7XG4gICAgY2FzZSA0OlxuICAgICAgcmV0dXJuIHBvcEhvc3RDb250YWluZXIoKSwgbnVsbDtcbiAgICBjYXNlIDEwOlxuICAgICAgcmV0dXJuIHBvcFByb3ZpZGVyKHdvcmtJblByb2dyZXNzLnR5cGUpLCBudWxsO1xuICAgIGNhc2UgMjI6XG4gICAgY2FzZSAyMzpcbiAgICAgIHJldHVybiAoXG4gICAgICAgIHBvcFN1c3BlbnNlSGFuZGxlcih3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAgIHBvcEhpZGRlbkNvbnRleHQoKSxcbiAgICAgICAgbnVsbCAhPT0gY3VycmVudCAmJiBwb3AocmVzdW1lZENhY2hlKSxcbiAgICAgICAgKGN1cnJlbnQgPSB3b3JrSW5Qcm9ncmVzcy5mbGFncyksXG4gICAgICAgIGN1cnJlbnQgJiA2NTUzNlxuICAgICAgICAgID8gKCh3b3JrSW5Qcm9ncmVzcy5mbGFncyA9IChjdXJyZW50ICYgLTY1NTM3KSB8IDEyOCksIHdvcmtJblByb2dyZXNzKVxuICAgICAgICAgIDogbnVsbFxuICAgICAgKTtcbiAgICBjYXNlIDI0OlxuICAgICAgcmV0dXJuIHBvcFByb3ZpZGVyKENhY2hlQ29udGV4dCksIG51bGw7XG4gICAgY2FzZSAyNTpcbiAgICAgIHJldHVybiBudWxsO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxuZnVuY3Rpb24gdW53aW5kSW50ZXJydXB0ZWRXb3JrKGN1cnJlbnQsIGludGVycnVwdGVkV29yaykge1xuICBwb3BUcmVlQ29udGV4dChpbnRlcnJ1cHRlZFdvcmspO1xuICBzd2l0Y2ggKGludGVycnVwdGVkV29yay50YWcpIHtcbiAgICBjYXNlIDM6XG4gICAgICBwb3BQcm92aWRlcihDYWNoZUNvbnRleHQpO1xuICAgICAgcG9wSG9zdENvbnRhaW5lcigpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAyNjpcbiAgICBjYXNlIDI3OlxuICAgIGNhc2UgNTpcbiAgICAgIHBvcEhvc3RDb250ZXh0KGludGVycnVwdGVkV29yayk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDQ6XG4gICAgICBwb3BIb3N0Q29udGFpbmVyKCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDEzOlxuICAgICAgcG9wU3VzcGVuc2VIYW5kbGVyKGludGVycnVwdGVkV29yayk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDE5OlxuICAgICAgcG9wKHN1c3BlbnNlU3RhY2tDdXJzb3IpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxMDpcbiAgICAgIHBvcFByb3ZpZGVyKGludGVycnVwdGVkV29yay50eXBlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMjI6XG4gICAgY2FzZSAyMzpcbiAgICAgIHBvcFN1c3BlbnNlSGFuZGxlcihpbnRlcnJ1cHRlZFdvcmspO1xuICAgICAgcG9wSGlkZGVuQ29udGV4dCgpO1xuICAgICAgbnVsbCAhPT0gY3VycmVudCAmJiBwb3AocmVzdW1lZENhY2hlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMjQ6XG4gICAgICBwb3BQcm92aWRlcihDYWNoZUNvbnRleHQpO1xuICB9XG59XG52YXIgRGVmYXVsdEFzeW5jRGlzcGF0Y2hlciA9IHtcbiAgICBnZXRDYWNoZUZvclR5cGU6IGZ1bmN0aW9uIChyZXNvdXJjZVR5cGUpIHtcbiAgICAgIHZhciBjYWNoZSA9IHJlYWRDb250ZXh0KENhY2hlQ29udGV4dCksXG4gICAgICAgIGNhY2hlRm9yVHlwZSA9IGNhY2hlLmRhdGEuZ2V0KHJlc291cmNlVHlwZSk7XG4gICAgICB2b2lkIDAgPT09IGNhY2hlRm9yVHlwZSAmJlxuICAgICAgICAoKGNhY2hlRm9yVHlwZSA9IHJlc291cmNlVHlwZSgpKSxcbiAgICAgICAgY2FjaGUuZGF0YS5zZXQocmVzb3VyY2VUeXBlLCBjYWNoZUZvclR5cGUpKTtcbiAgICAgIHJldHVybiBjYWNoZUZvclR5cGU7XG4gICAgfVxuICB9LFxuICBQb3NzaWJseVdlYWtNYXAgPSBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBXZWFrTWFwID8gV2Vha01hcCA6IE1hcCxcbiAgZXhlY3V0aW9uQ29udGV4dCA9IDAsXG4gIHdvcmtJblByb2dyZXNzUm9vdCA9IG51bGwsXG4gIHdvcmtJblByb2dyZXNzID0gbnVsbCxcbiAgd29ya0luUHJvZ3Jlc3NSb290UmVuZGVyTGFuZXMgPSAwLFxuICB3b3JrSW5Qcm9ncmVzc1N1c3BlbmRlZFJlYXNvbiA9IDAsXG4gIHdvcmtJblByb2dyZXNzVGhyb3duVmFsdWUgPSBudWxsLFxuICB3b3JrSW5Qcm9ncmVzc1Jvb3REaWRTa2lwU3VzcGVuZGVkU2libGluZ3MgPSAhMSxcbiAgd29ya0luUHJvZ3Jlc3NSb290SXNQcmVyZW5kZXJpbmcgPSAhMSxcbiAgd29ya0luUHJvZ3Jlc3NSb290RGlkQXR0YWNoUGluZ0xpc3RlbmVyID0gITEsXG4gIGVudGFuZ2xlZFJlbmRlckxhbmVzID0gMCxcbiAgd29ya0luUHJvZ3Jlc3NSb290RXhpdFN0YXR1cyA9IDAsXG4gIHdvcmtJblByb2dyZXNzUm9vdFNraXBwZWRMYW5lcyA9IDAsXG4gIHdvcmtJblByb2dyZXNzUm9vdEludGVybGVhdmVkVXBkYXRlZExhbmVzID0gMCxcbiAgd29ya0luUHJvZ3Jlc3NSb290UGluZ2VkTGFuZXMgPSAwLFxuICB3b3JrSW5Qcm9ncmVzc0RlZmVycmVkTGFuZSA9IDAsXG4gIHdvcmtJblByb2dyZXNzU3VzcGVuZGVkUmV0cnlMYW5lcyA9IDAsXG4gIHdvcmtJblByb2dyZXNzUm9vdENvbmN1cnJlbnRFcnJvcnMgPSBudWxsLFxuICB3b3JrSW5Qcm9ncmVzc1Jvb3RSZWNvdmVyYWJsZUVycm9ycyA9IG51bGwsXG4gIHdvcmtJblByb2dyZXNzUm9vdERpZEluY2x1ZGVSZWN1cnNpdmVSZW5kZXJVcGRhdGUgPSAhMSxcbiAgZ2xvYmFsTW9zdFJlY2VudEZhbGxiYWNrVGltZSA9IDAsXG4gIHdvcmtJblByb2dyZXNzUm9vdFJlbmRlclRhcmdldFRpbWUgPSBJbmZpbml0eSxcbiAgd29ya0luUHJvZ3Jlc3NUcmFuc2l0aW9ucyA9IG51bGwsXG4gIGxlZ2FjeUVycm9yQm91bmRhcmllc1RoYXRBbHJlYWR5RmFpbGVkID0gbnVsbCxcbiAgcm9vdERvZXNIYXZlUGFzc2l2ZUVmZmVjdHMgPSAhMSxcbiAgcm9vdFdpdGhQZW5kaW5nUGFzc2l2ZUVmZmVjdHMgPSBudWxsLFxuICBwZW5kaW5nUGFzc2l2ZUVmZmVjdHNMYW5lcyA9IDAsXG4gIHBlbmRpbmdQYXNzaXZlRWZmZWN0c1JlbWFpbmluZ0xhbmVzID0gMCxcbiAgcGVuZGluZ1Bhc3NpdmVUcmFuc2l0aW9ucyA9IG51bGwsXG4gIG5lc3RlZFVwZGF0ZUNvdW50ID0gMCxcbiAgcm9vdFdpdGhOZXN0ZWRVcGRhdGVzID0gbnVsbDtcbmZ1bmN0aW9uIHJlcXVlc3RVcGRhdGVMYW5lKCkge1xuICBpZiAoMCAhPT0gKGV4ZWN1dGlvbkNvbnRleHQgJiAyKSAmJiAwICE9PSB3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lcylcbiAgICByZXR1cm4gd29ya0luUHJvZ3Jlc3NSb290UmVuZGVyTGFuZXMgJiAtd29ya0luUHJvZ3Jlc3NSb290UmVuZGVyTGFuZXM7XG4gIGlmIChudWxsICE9PSBSZWFjdFNoYXJlZEludGVybmFscy5UKSB7XG4gICAgdmFyIGFjdGlvblNjb3BlTGFuZSA9IGN1cnJlbnRFbnRhbmdsZWRMYW5lO1xuICAgIHJldHVybiAwICE9PSBhY3Rpb25TY29wZUxhbmUgPyBhY3Rpb25TY29wZUxhbmUgOiByZXF1ZXN0VHJhbnNpdGlvbkxhbmUoKTtcbiAgfVxuICByZXR1cm4gcmVzb2x2ZVVwZGF0ZVByaW9yaXR5KCk7XG59XG5mdW5jdGlvbiByZXF1ZXN0RGVmZXJyZWRMYW5lKCkge1xuICAwID09PSB3b3JrSW5Qcm9ncmVzc0RlZmVycmVkTGFuZSAmJlxuICAgICh3b3JrSW5Qcm9ncmVzc0RlZmVycmVkTGFuZSA9XG4gICAgICAwID09PSAod29ya0luUHJvZ3Jlc3NSb290UmVuZGVyTGFuZXMgJiA1MzY4NzA5MTIpIHx8IGlzSHlkcmF0aW5nXG4gICAgICAgID8gY2xhaW1OZXh0VHJhbnNpdGlvbkxhbmUoKVxuICAgICAgICA6IDUzNjg3MDkxMik7XG4gIHZhciBzdXNwZW5zZUhhbmRsZXIgPSBzdXNwZW5zZUhhbmRsZXJTdGFja0N1cnNvci5jdXJyZW50O1xuICBudWxsICE9PSBzdXNwZW5zZUhhbmRsZXIgJiYgKHN1c3BlbnNlSGFuZGxlci5mbGFncyB8PSAzMik7XG4gIHJldHVybiB3b3JrSW5Qcm9ncmVzc0RlZmVycmVkTGFuZTtcbn1cbmZ1bmN0aW9uIHNjaGVkdWxlVXBkYXRlT25GaWJlcihyb290LCBmaWJlciwgbGFuZSkge1xuICBpZiAoXG4gICAgKHJvb3QgPT09IHdvcmtJblByb2dyZXNzUm9vdCAmJiAyID09PSB3b3JrSW5Qcm9ncmVzc1N1c3BlbmRlZFJlYXNvbikgfHxcbiAgICBudWxsICE9PSByb290LmNhbmNlbFBlbmRpbmdDb21taXRcbiAgKVxuICAgIHByZXBhcmVGcmVzaFN0YWNrKHJvb3QsIDApLFxuICAgICAgbWFya1Jvb3RTdXNwZW5kZWQoXG4gICAgICAgIHJvb3QsXG4gICAgICAgIHdvcmtJblByb2dyZXNzUm9vdFJlbmRlckxhbmVzLFxuICAgICAgICB3b3JrSW5Qcm9ncmVzc0RlZmVycmVkTGFuZSxcbiAgICAgICAgITFcbiAgICAgICk7XG4gIG1hcmtSb290VXBkYXRlZCQxKHJvb3QsIGxhbmUpO1xuICBpZiAoMCA9PT0gKGV4ZWN1dGlvbkNvbnRleHQgJiAyKSB8fCByb290ICE9PSB3b3JrSW5Qcm9ncmVzc1Jvb3QpXG4gICAgcm9vdCA9PT0gd29ya0luUHJvZ3Jlc3NSb290ICYmXG4gICAgICAoMCA9PT0gKGV4ZWN1dGlvbkNvbnRleHQgJiAyKSAmJlxuICAgICAgICAod29ya0luUHJvZ3Jlc3NSb290SW50ZXJsZWF2ZWRVcGRhdGVkTGFuZXMgfD0gbGFuZSksXG4gICAgICA0ID09PSB3b3JrSW5Qcm9ncmVzc1Jvb3RFeGl0U3RhdHVzICYmXG4gICAgICAgIG1hcmtSb290U3VzcGVuZGVkKFxuICAgICAgICAgIHJvb3QsXG4gICAgICAgICAgd29ya0luUHJvZ3Jlc3NSb290UmVuZGVyTGFuZXMsXG4gICAgICAgICAgd29ya0luUHJvZ3Jlc3NEZWZlcnJlZExhbmUsXG4gICAgICAgICAgITFcbiAgICAgICAgKSksXG4gICAgICBlbnN1cmVSb290SXNTY2hlZHVsZWQocm9vdCk7XG59XG5mdW5jdGlvbiBwZXJmb3JtV29ya09uUm9vdChyb290JGpzY29tcCQwLCBsYW5lcywgZm9yY2VTeW5jKSB7XG4gIGlmICgwICE9PSAoZXhlY3V0aW9uQ29udGV4dCAmIDYpKSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDMyNykpO1xuICB2YXIgc2hvdWxkVGltZVNsaWNlID1cbiAgICAgICghZm9yY2VTeW5jICYmXG4gICAgICAgIDAgPT09IChsYW5lcyAmIDYwKSAmJlxuICAgICAgICAwID09PSAobGFuZXMgJiByb290JGpzY29tcCQwLmV4cGlyZWRMYW5lcykpIHx8XG4gICAgICBjaGVja0lmUm9vdElzUHJlcmVuZGVyaW5nKHJvb3QkanNjb21wJDAsIGxhbmVzKSxcbiAgICBleGl0U3RhdHVzID0gc2hvdWxkVGltZVNsaWNlXG4gICAgICA/IHJlbmRlclJvb3RDb25jdXJyZW50KHJvb3QkanNjb21wJDAsIGxhbmVzKVxuICAgICAgOiByZW5kZXJSb290U3luYyhyb290JGpzY29tcCQwLCBsYW5lcywgITApLFxuICAgIHJlbmRlcldhc0NvbmN1cnJlbnQgPSBzaG91bGRUaW1lU2xpY2U7XG4gIGRvIHtcbiAgICBpZiAoMCA9PT0gZXhpdFN0YXR1cykge1xuICAgICAgd29ya0luUHJvZ3Jlc3NSb290SXNQcmVyZW5kZXJpbmcgJiZcbiAgICAgICAgIXNob3VsZFRpbWVTbGljZSAmJlxuICAgICAgICBtYXJrUm9vdFN1c3BlbmRlZChyb290JGpzY29tcCQwLCBsYW5lcywgMCwgITEpO1xuICAgICAgYnJlYWs7XG4gICAgfSBlbHNlIGlmICg2ID09PSBleGl0U3RhdHVzKVxuICAgICAgbWFya1Jvb3RTdXNwZW5kZWQoXG4gICAgICAgIHJvb3QkanNjb21wJDAsXG4gICAgICAgIGxhbmVzLFxuICAgICAgICAwLFxuICAgICAgICAhd29ya0luUHJvZ3Jlc3NSb290RGlkU2tpcFN1c3BlbmRlZFNpYmxpbmdzXG4gICAgICApO1xuICAgIGVsc2Uge1xuICAgICAgZm9yY2VTeW5jID0gcm9vdCRqc2NvbXAkMC5jdXJyZW50LmFsdGVybmF0ZTtcbiAgICAgIGlmIChcbiAgICAgICAgcmVuZGVyV2FzQ29uY3VycmVudCAmJlxuICAgICAgICAhaXNSZW5kZXJDb25zaXN0ZW50V2l0aEV4dGVybmFsU3RvcmVzKGZvcmNlU3luYylcbiAgICAgICkge1xuICAgICAgICBleGl0U3RhdHVzID0gcmVuZGVyUm9vdFN5bmMocm9vdCRqc2NvbXAkMCwgbGFuZXMsICExKTtcbiAgICAgICAgcmVuZGVyV2FzQ29uY3VycmVudCA9ICExO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmICgyID09PSBleGl0U3RhdHVzKSB7XG4gICAgICAgIHJlbmRlcldhc0NvbmN1cnJlbnQgPSBsYW5lcztcbiAgICAgICAgaWYgKHJvb3QkanNjb21wJDAuZXJyb3JSZWNvdmVyeURpc2FibGVkTGFuZXMgJiByZW5kZXJXYXNDb25jdXJyZW50KVxuICAgICAgICAgIHZhciBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgPSAwO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgKEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCA9IHJvb3QkanNjb21wJDAucGVuZGluZ0xhbmVzICYgLTUzNjg3MDkxMyksXG4gICAgICAgICAgICAoSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0ID1cbiAgICAgICAgICAgICAgMCAhPT0gSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0XG4gICAgICAgICAgICAgICAgPyBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHRcbiAgICAgICAgICAgICAgICA6IEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCAmIDUzNjg3MDkxMlxuICAgICAgICAgICAgICAgICAgPyA1MzY4NzA5MTJcbiAgICAgICAgICAgICAgICAgIDogMCk7XG4gICAgICAgIGlmICgwICE9PSBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQpIHtcbiAgICAgICAgICBsYW5lcyA9IEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdDtcbiAgICAgICAgICBhOiB7XG4gICAgICAgICAgICB2YXIgcm9vdCA9IHJvb3QkanNjb21wJDA7XG4gICAgICAgICAgICBleGl0U3RhdHVzID0gd29ya0luUHJvZ3Jlc3NSb290Q29uY3VycmVudEVycm9ycztcbiAgICAgICAgICAgIHZhciB3YXNSb290RGVoeWRyYXRlZCA9IHJvb3QuY3VycmVudC5tZW1vaXplZFN0YXRlLmlzRGVoeWRyYXRlZDtcbiAgICAgICAgICAgIHdhc1Jvb3REZWh5ZHJhdGVkICYmXG4gICAgICAgICAgICAgIChwcmVwYXJlRnJlc2hTdGFjayhyb290LCBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQpLmZsYWdzIHw9IDI1Nik7XG4gICAgICAgICAgICBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgPSByZW5kZXJSb290U3luYyhcbiAgICAgICAgICAgICAgcm9vdCxcbiAgICAgICAgICAgICAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0LFxuICAgICAgICAgICAgICAhMVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGlmICgyICE9PSBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQpIHtcbiAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzUm9vdERpZEF0dGFjaFBpbmdMaXN0ZW5lciAmJlxuICAgICAgICAgICAgICAgICF3YXNSb290RGVoeWRyYXRlZFxuICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICByb290LmVycm9yUmVjb3ZlcnlEaXNhYmxlZExhbmVzIHw9IHJlbmRlcldhc0NvbmN1cnJlbnQ7XG4gICAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3NSb290SW50ZXJsZWF2ZWRVcGRhdGVkTGFuZXMgfD1cbiAgICAgICAgICAgICAgICAgIHJlbmRlcldhc0NvbmN1cnJlbnQ7XG4gICAgICAgICAgICAgICAgZXhpdFN0YXR1cyA9IDQ7XG4gICAgICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZW5kZXJXYXNDb25jdXJyZW50ID0gd29ya0luUHJvZ3Jlc3NSb290UmVjb3ZlcmFibGVFcnJvcnM7XG4gICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzUm9vdFJlY292ZXJhYmxlRXJyb3JzID0gZXhpdFN0YXR1cztcbiAgICAgICAgICAgICAgbnVsbCAhPT0gcmVuZGVyV2FzQ29uY3VycmVudCAmJlxuICAgICAgICAgICAgICAgIHF1ZXVlUmVjb3ZlcmFibGVFcnJvcnMocmVuZGVyV2FzQ29uY3VycmVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBleGl0U3RhdHVzID0gSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0O1xuICAgICAgICAgIH1cbiAgICAgICAgICByZW5kZXJXYXNDb25jdXJyZW50ID0gITE7XG4gICAgICAgICAgaWYgKDIgIT09IGV4aXRTdGF0dXMpIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoMSA9PT0gZXhpdFN0YXR1cykge1xuICAgICAgICBwcmVwYXJlRnJlc2hTdGFjayhyb290JGpzY29tcCQwLCAwKTtcbiAgICAgICAgbWFya1Jvb3RTdXNwZW5kZWQocm9vdCRqc2NvbXAkMCwgbGFuZXMsIDAsICEwKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBhOiB7XG4gICAgICAgIHNob3VsZFRpbWVTbGljZSA9IHJvb3QkanNjb21wJDA7XG4gICAgICAgIHN3aXRjaCAoZXhpdFN0YXR1cykge1xuICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDM0NSkpO1xuICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgIGlmICgobGFuZXMgJiA0MTk0MTc2KSA9PT0gbGFuZXMpIHtcbiAgICAgICAgICAgICAgbWFya1Jvb3RTdXNwZW5kZWQoXG4gICAgICAgICAgICAgICAgc2hvdWxkVGltZVNsaWNlLFxuICAgICAgICAgICAgICAgIGxhbmVzLFxuICAgICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzRGVmZXJyZWRMYW5lLFxuICAgICAgICAgICAgICAgICF3b3JrSW5Qcm9ncmVzc1Jvb3REaWRTa2lwU3VzcGVuZGVkU2libGluZ3NcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgIHdvcmtJblByb2dyZXNzUm9vdFJlY292ZXJhYmxlRXJyb3JzID0gbnVsbDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgzMjkpKTtcbiAgICAgICAgfVxuICAgICAgICBzaG91bGRUaW1lU2xpY2UuZmluaXNoZWRXb3JrID0gZm9yY2VTeW5jO1xuICAgICAgICBzaG91bGRUaW1lU2xpY2UuZmluaXNoZWRMYW5lcyA9IGxhbmVzO1xuICAgICAgICBpZiAoXG4gICAgICAgICAgKGxhbmVzICYgNjI5MTQ1NjApID09PSBsYW5lcyAmJlxuICAgICAgICAgICgocmVuZGVyV2FzQ29uY3VycmVudCA9IGdsb2JhbE1vc3RSZWNlbnRGYWxsYmFja1RpbWUgKyAzMDAgLSBub3coKSksXG4gICAgICAgICAgMTAgPCByZW5kZXJXYXNDb25jdXJyZW50KVxuICAgICAgICApIHtcbiAgICAgICAgICBtYXJrUm9vdFN1c3BlbmRlZChcbiAgICAgICAgICAgIHNob3VsZFRpbWVTbGljZSxcbiAgICAgICAgICAgIGxhbmVzLFxuICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3NEZWZlcnJlZExhbmUsXG4gICAgICAgICAgICAhd29ya0luUHJvZ3Jlc3NSb290RGlkU2tpcFN1c3BlbmRlZFNpYmxpbmdzXG4gICAgICAgICAgKTtcbiAgICAgICAgICBpZiAoMCAhPT0gZ2V0TmV4dExhbmVzKHNob3VsZFRpbWVTbGljZSwgMCkpIGJyZWFrIGE7XG4gICAgICAgICAgc2hvdWxkVGltZVNsaWNlLnRpbWVvdXRIYW5kbGUgPSBzY2hlZHVsZVRpbWVvdXQoXG4gICAgICAgICAgICBjb21taXRSb290V2hlblJlYWR5LmJpbmQoXG4gICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgIHNob3VsZFRpbWVTbGljZSxcbiAgICAgICAgICAgICAgZm9yY2VTeW5jLFxuICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzc1Jvb3RSZWNvdmVyYWJsZUVycm9ycyxcbiAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3NUcmFuc2l0aW9ucyxcbiAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3NSb290RGlkSW5jbHVkZVJlY3Vyc2l2ZVJlbmRlclVwZGF0ZSxcbiAgICAgICAgICAgICAgbGFuZXMsXG4gICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzRGVmZXJyZWRMYW5lLFxuICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzc1Jvb3RJbnRlcmxlYXZlZFVwZGF0ZWRMYW5lcyxcbiAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3NTdXNwZW5kZWRSZXRyeUxhbmVzLFxuICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzc1Jvb3REaWRTa2lwU3VzcGVuZGVkU2libGluZ3MsXG4gICAgICAgICAgICAgIDIsXG4gICAgICAgICAgICAgIC0wLFxuICAgICAgICAgICAgICAwXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgcmVuZGVyV2FzQ29uY3VycmVudFxuICAgICAgICAgICk7XG4gICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgfVxuICAgICAgICBjb21taXRSb290V2hlblJlYWR5KFxuICAgICAgICAgIHNob3VsZFRpbWVTbGljZSxcbiAgICAgICAgICBmb3JjZVN5bmMsXG4gICAgICAgICAgd29ya0luUHJvZ3Jlc3NSb290UmVjb3ZlcmFibGVFcnJvcnMsXG4gICAgICAgICAgd29ya0luUHJvZ3Jlc3NUcmFuc2l0aW9ucyxcbiAgICAgICAgICB3b3JrSW5Qcm9ncmVzc1Jvb3REaWRJbmNsdWRlUmVjdXJzaXZlUmVuZGVyVXBkYXRlLFxuICAgICAgICAgIGxhbmVzLFxuICAgICAgICAgIHdvcmtJblByb2dyZXNzRGVmZXJyZWRMYW5lLFxuICAgICAgICAgIHdvcmtJblByb2dyZXNzUm9vdEludGVybGVhdmVkVXBkYXRlZExhbmVzLFxuICAgICAgICAgIHdvcmtJblByb2dyZXNzU3VzcGVuZGVkUmV0cnlMYW5lcyxcbiAgICAgICAgICB3b3JrSW5Qcm9ncmVzc1Jvb3REaWRTa2lwU3VzcGVuZGVkU2libGluZ3MsXG4gICAgICAgICAgMCxcbiAgICAgICAgICAtMCxcbiAgICAgICAgICAwXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIGJyZWFrO1xuICB9IHdoaWxlICgxKTtcbiAgZW5zdXJlUm9vdElzU2NoZWR1bGVkKHJvb3QkanNjb21wJDApO1xufVxuZnVuY3Rpb24gcXVldWVSZWNvdmVyYWJsZUVycm9ycyhlcnJvcnMpIHtcbiAgbnVsbCA9PT0gd29ya0luUHJvZ3Jlc3NSb290UmVjb3ZlcmFibGVFcnJvcnNcbiAgICA/ICh3b3JrSW5Qcm9ncmVzc1Jvb3RSZWNvdmVyYWJsZUVycm9ycyA9IGVycm9ycylcbiAgICA6IHdvcmtJblByb2dyZXNzUm9vdFJlY292ZXJhYmxlRXJyb3JzLnB1c2guYXBwbHkoXG4gICAgICAgIHdvcmtJblByb2dyZXNzUm9vdFJlY292ZXJhYmxlRXJyb3JzLFxuICAgICAgICBlcnJvcnNcbiAgICAgICk7XG59XG5mdW5jdGlvbiBjb21taXRSb290V2hlblJlYWR5KFxuICByb290LFxuICBmaW5pc2hlZFdvcmssXG4gIHJlY292ZXJhYmxlRXJyb3JzLFxuICB0cmFuc2l0aW9ucyxcbiAgZGlkSW5jbHVkZVJlbmRlclBoYXNlVXBkYXRlLFxuICBsYW5lcyxcbiAgc3Bhd25lZExhbmUsXG4gIHVwZGF0ZWRMYW5lcyxcbiAgc3VzcGVuZGVkUmV0cnlMYW5lcyxcbiAgZGlkU2tpcFN1c3BlbmRlZFNpYmxpbmdzLFxuICBzdXNwZW5kZWRDb21taXRSZWFzb24sXG4gIGNvbXBsZXRlZFJlbmRlclN0YXJ0VGltZSxcbiAgY29tcGxldGVkUmVuZGVyRW5kVGltZVxuKSB7XG4gIHZhciBzdWJ0cmVlRmxhZ3MgPSBmaW5pc2hlZFdvcmsuc3VidHJlZUZsYWdzO1xuICBpZiAoc3VidHJlZUZsYWdzICYgODE5MiB8fCAxNjc4NTQwOCA9PT0gKHN1YnRyZWVGbGFncyAmIDE2Nzg1NDA4KSlcbiAgICBpZiAoXG4gICAgICAoKHN1c3BlbmRlZFN0YXRlID0geyBzdHlsZXNoZWV0czogbnVsbCwgY291bnQ6IDAsIHVuc3VzcGVuZDogbm9vcCB9KSxcbiAgICAgIGFjY3VtdWxhdGVTdXNwZW5zZXlDb21taXRPbkZpYmVyKGZpbmlzaGVkV29yayksXG4gICAgICAoZmluaXNoZWRXb3JrID0gd2FpdEZvckNvbW1pdFRvQmVSZWFkeSgpKSxcbiAgICAgIG51bGwgIT09IGZpbmlzaGVkV29yaylcbiAgICApIHtcbiAgICAgIHJvb3QuY2FuY2VsUGVuZGluZ0NvbW1pdCA9IGZpbmlzaGVkV29yayhcbiAgICAgICAgY29tbWl0Um9vdC5iaW5kKFxuICAgICAgICAgIG51bGwsXG4gICAgICAgICAgcm9vdCxcbiAgICAgICAgICByZWNvdmVyYWJsZUVycm9ycyxcbiAgICAgICAgICB0cmFuc2l0aW9ucyxcbiAgICAgICAgICBkaWRJbmNsdWRlUmVuZGVyUGhhc2VVcGRhdGUsXG4gICAgICAgICAgc3Bhd25lZExhbmUsXG4gICAgICAgICAgdXBkYXRlZExhbmVzLFxuICAgICAgICAgIHN1c3BlbmRlZFJldHJ5TGFuZXMsXG4gICAgICAgICAgMSxcbiAgICAgICAgICBjb21wbGV0ZWRSZW5kZXJTdGFydFRpbWUsXG4gICAgICAgICAgY29tcGxldGVkUmVuZGVyRW5kVGltZVxuICAgICAgICApXG4gICAgICApO1xuICAgICAgbWFya1Jvb3RTdXNwZW5kZWQocm9vdCwgbGFuZXMsIHNwYXduZWRMYW5lLCAhZGlkU2tpcFN1c3BlbmRlZFNpYmxpbmdzKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIGNvbW1pdFJvb3QoXG4gICAgcm9vdCxcbiAgICByZWNvdmVyYWJsZUVycm9ycyxcbiAgICB0cmFuc2l0aW9ucyxcbiAgICBkaWRJbmNsdWRlUmVuZGVyUGhhc2VVcGRhdGUsXG4gICAgc3Bhd25lZExhbmUsXG4gICAgdXBkYXRlZExhbmVzLFxuICAgIHN1c3BlbmRlZFJldHJ5TGFuZXMsXG4gICAgc3VzcGVuZGVkQ29tbWl0UmVhc29uLFxuICAgIGNvbXBsZXRlZFJlbmRlclN0YXJ0VGltZSxcbiAgICBjb21wbGV0ZWRSZW5kZXJFbmRUaW1lXG4gICk7XG59XG5mdW5jdGlvbiBpc1JlbmRlckNvbnNpc3RlbnRXaXRoRXh0ZXJuYWxTdG9yZXMoZmluaXNoZWRXb3JrKSB7XG4gIGZvciAodmFyIG5vZGUgPSBmaW5pc2hlZFdvcms7IDsgKSB7XG4gICAgdmFyIHRhZyA9IG5vZGUudGFnO1xuICAgIGlmIChcbiAgICAgICgwID09PSB0YWcgfHwgMTEgPT09IHRhZyB8fCAxNSA9PT0gdGFnKSAmJlxuICAgICAgbm9kZS5mbGFncyAmIDE2Mzg0ICYmXG4gICAgICAoKHRhZyA9IG5vZGUudXBkYXRlUXVldWUpLFxuICAgICAgbnVsbCAhPT0gdGFnICYmICgodGFnID0gdGFnLnN0b3JlcyksIG51bGwgIT09IHRhZykpXG4gICAgKVxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0YWcubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGNoZWNrID0gdGFnW2ldLFxuICAgICAgICAgIGdldFNuYXBzaG90ID0gY2hlY2suZ2V0U25hcHNob3Q7XG4gICAgICAgIGNoZWNrID0gY2hlY2sudmFsdWU7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgaWYgKCFvYmplY3RJcyhnZXRTbmFwc2hvdCgpLCBjaGVjaykpIHJldHVybiAhMTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICByZXR1cm4gITE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB0YWcgPSBub2RlLmNoaWxkO1xuICAgIGlmIChub2RlLnN1YnRyZWVGbGFncyAmIDE2Mzg0ICYmIG51bGwgIT09IHRhZylcbiAgICAgICh0YWcucmV0dXJuID0gbm9kZSksIChub2RlID0gdGFnKTtcbiAgICBlbHNlIHtcbiAgICAgIGlmIChub2RlID09PSBmaW5pc2hlZFdvcmspIGJyZWFrO1xuICAgICAgZm9yICg7IG51bGwgPT09IG5vZGUuc2libGluZzsgKSB7XG4gICAgICAgIGlmIChudWxsID09PSBub2RlLnJldHVybiB8fCBub2RlLnJldHVybiA9PT0gZmluaXNoZWRXb3JrKSByZXR1cm4gITA7XG4gICAgICAgIG5vZGUgPSBub2RlLnJldHVybjtcbiAgICAgIH1cbiAgICAgIG5vZGUuc2libGluZy5yZXR1cm4gPSBub2RlLnJldHVybjtcbiAgICAgIG5vZGUgPSBub2RlLnNpYmxpbmc7XG4gICAgfVxuICB9XG4gIHJldHVybiAhMDtcbn1cbmZ1bmN0aW9uIG1hcmtSb290U3VzcGVuZGVkKFxuICByb290LFxuICBzdXNwZW5kZWRMYW5lcyxcbiAgc3Bhd25lZExhbmUsXG4gIGRpZEF0dGVtcHRFbnRpcmVUcmVlXG4pIHtcbiAgc3VzcGVuZGVkTGFuZXMgJj0gfndvcmtJblByb2dyZXNzUm9vdFBpbmdlZExhbmVzO1xuICBzdXNwZW5kZWRMYW5lcyAmPSB+d29ya0luUHJvZ3Jlc3NSb290SW50ZXJsZWF2ZWRVcGRhdGVkTGFuZXM7XG4gIHJvb3Quc3VzcGVuZGVkTGFuZXMgfD0gc3VzcGVuZGVkTGFuZXM7XG4gIHJvb3QucGluZ2VkTGFuZXMgJj0gfnN1c3BlbmRlZExhbmVzO1xuICBkaWRBdHRlbXB0RW50aXJlVHJlZSAmJiAocm9vdC53YXJtTGFuZXMgfD0gc3VzcGVuZGVkTGFuZXMpO1xuICBkaWRBdHRlbXB0RW50aXJlVHJlZSA9IHJvb3QuZXhwaXJhdGlvblRpbWVzO1xuICBmb3IgKHZhciBsYW5lcyA9IHN1c3BlbmRlZExhbmVzOyAwIDwgbGFuZXM7ICkge1xuICAgIHZhciBpbmRleCQ2ID0gMzEgLSBjbHozMihsYW5lcyksXG4gICAgICBsYW5lID0gMSA8PCBpbmRleCQ2O1xuICAgIGRpZEF0dGVtcHRFbnRpcmVUcmVlW2luZGV4JDZdID0gLTE7XG4gICAgbGFuZXMgJj0gfmxhbmU7XG4gIH1cbiAgMCAhPT0gc3Bhd25lZExhbmUgJiZcbiAgICBtYXJrU3Bhd25lZERlZmVycmVkTGFuZShyb290LCBzcGF3bmVkTGFuZSwgc3VzcGVuZGVkTGFuZXMpO1xufVxuZnVuY3Rpb24gZmx1c2hTeW5jV29yayQxKCkge1xuICByZXR1cm4gMCA9PT0gKGV4ZWN1dGlvbkNvbnRleHQgJiA2KVxuICAgID8gKGZsdXNoU3luY1dvcmtBY3Jvc3NSb290c19pbXBsKDAsICExKSwgITEpXG4gICAgOiAhMDtcbn1cbmZ1bmN0aW9uIHJlc2V0V29ya0luUHJvZ3Jlc3NTdGFjaygpIHtcbiAgaWYgKG51bGwgIT09IHdvcmtJblByb2dyZXNzKSB7XG4gICAgaWYgKDAgPT09IHdvcmtJblByb2dyZXNzU3VzcGVuZGVkUmVhc29uKVxuICAgICAgdmFyIGludGVycnVwdGVkV29yayA9IHdvcmtJblByb2dyZXNzLnJldHVybjtcbiAgICBlbHNlXG4gICAgICAoaW50ZXJydXB0ZWRXb3JrID0gd29ya0luUHJvZ3Jlc3MpLFxuICAgICAgICAobGFzdENvbnRleHREZXBlbmRlbmN5ID0gY3VycmVudGx5UmVuZGVyaW5nRmliZXIgPSBudWxsKSxcbiAgICAgICAgcmVzZXRIb29rc09uVW53aW5kKGludGVycnVwdGVkV29yayksXG4gICAgICAgICh0aGVuYWJsZVN0YXRlJDEgPSBudWxsKSxcbiAgICAgICAgKHRoZW5hYmxlSW5kZXhDb3VudGVyJDEgPSAwKSxcbiAgICAgICAgKGludGVycnVwdGVkV29yayA9IHdvcmtJblByb2dyZXNzKTtcbiAgICBmb3IgKDsgbnVsbCAhPT0gaW50ZXJydXB0ZWRXb3JrOyApXG4gICAgICB1bndpbmRJbnRlcnJ1cHRlZFdvcmsoaW50ZXJydXB0ZWRXb3JrLmFsdGVybmF0ZSwgaW50ZXJydXB0ZWRXb3JrKSxcbiAgICAgICAgKGludGVycnVwdGVkV29yayA9IGludGVycnVwdGVkV29yay5yZXR1cm4pO1xuICAgIHdvcmtJblByb2dyZXNzID0gbnVsbDtcbiAgfVxufVxuZnVuY3Rpb24gcHJlcGFyZUZyZXNoU3RhY2socm9vdCwgbGFuZXMpIHtcbiAgcm9vdC5maW5pc2hlZFdvcmsgPSBudWxsO1xuICByb290LmZpbmlzaGVkTGFuZXMgPSAwO1xuICB2YXIgdGltZW91dEhhbmRsZSA9IHJvb3QudGltZW91dEhhbmRsZTtcbiAgLTEgIT09IHRpbWVvdXRIYW5kbGUgJiZcbiAgICAoKHJvb3QudGltZW91dEhhbmRsZSA9IC0xKSwgY2FuY2VsVGltZW91dCh0aW1lb3V0SGFuZGxlKSk7XG4gIHRpbWVvdXRIYW5kbGUgPSByb290LmNhbmNlbFBlbmRpbmdDb21taXQ7XG4gIG51bGwgIT09IHRpbWVvdXRIYW5kbGUgJiZcbiAgICAoKHJvb3QuY2FuY2VsUGVuZGluZ0NvbW1pdCA9IG51bGwpLCB0aW1lb3V0SGFuZGxlKCkpO1xuICByZXNldFdvcmtJblByb2dyZXNzU3RhY2soKTtcbiAgd29ya0luUHJvZ3Jlc3NSb290ID0gcm9vdDtcbiAgd29ya0luUHJvZ3Jlc3MgPSB0aW1lb3V0SGFuZGxlID0gY3JlYXRlV29ya0luUHJvZ3Jlc3Mocm9vdC5jdXJyZW50LCBudWxsKTtcbiAgd29ya0luUHJvZ3Jlc3NSb290UmVuZGVyTGFuZXMgPSBsYW5lcztcbiAgd29ya0luUHJvZ3Jlc3NTdXNwZW5kZWRSZWFzb24gPSAwO1xuICB3b3JrSW5Qcm9ncmVzc1Rocm93blZhbHVlID0gbnVsbDtcbiAgd29ya0luUHJvZ3Jlc3NSb290RGlkU2tpcFN1c3BlbmRlZFNpYmxpbmdzID0gITE7XG4gIHdvcmtJblByb2dyZXNzUm9vdElzUHJlcmVuZGVyaW5nID0gY2hlY2tJZlJvb3RJc1ByZXJlbmRlcmluZyhyb290LCBsYW5lcyk7XG4gIHdvcmtJblByb2dyZXNzUm9vdERpZEF0dGFjaFBpbmdMaXN0ZW5lciA9ICExO1xuICB3b3JrSW5Qcm9ncmVzc1N1c3BlbmRlZFJldHJ5TGFuZXMgPVxuICAgIHdvcmtJblByb2dyZXNzRGVmZXJyZWRMYW5lID1cbiAgICB3b3JrSW5Qcm9ncmVzc1Jvb3RQaW5nZWRMYW5lcyA9XG4gICAgd29ya0luUHJvZ3Jlc3NSb290SW50ZXJsZWF2ZWRVcGRhdGVkTGFuZXMgPVxuICAgIHdvcmtJblByb2dyZXNzUm9vdFNraXBwZWRMYW5lcyA9XG4gICAgd29ya0luUHJvZ3Jlc3NSb290RXhpdFN0YXR1cyA9XG4gICAgICAwO1xuICB3b3JrSW5Qcm9ncmVzc1Jvb3RSZWNvdmVyYWJsZUVycm9ycyA9IHdvcmtJblByb2dyZXNzUm9vdENvbmN1cnJlbnRFcnJvcnMgPVxuICAgIG51bGw7XG4gIHdvcmtJblByb2dyZXNzUm9vdERpZEluY2x1ZGVSZWN1cnNpdmVSZW5kZXJVcGRhdGUgPSAhMTtcbiAgMCAhPT0gKGxhbmVzICYgOCkgJiYgKGxhbmVzIHw9IGxhbmVzICYgMzIpO1xuICB2YXIgYWxsRW50YW5nbGVkTGFuZXMgPSByb290LmVudGFuZ2xlZExhbmVzO1xuICBpZiAoMCAhPT0gYWxsRW50YW5nbGVkTGFuZXMpXG4gICAgZm9yIChcbiAgICAgIHJvb3QgPSByb290LmVudGFuZ2xlbWVudHMsIGFsbEVudGFuZ2xlZExhbmVzICY9IGxhbmVzO1xuICAgICAgMCA8IGFsbEVudGFuZ2xlZExhbmVzO1xuXG4gICAgKSB7XG4gICAgICB2YXIgaW5kZXgkNCA9IDMxIC0gY2x6MzIoYWxsRW50YW5nbGVkTGFuZXMpLFxuICAgICAgICBsYW5lID0gMSA8PCBpbmRleCQ0O1xuICAgICAgbGFuZXMgfD0gcm9vdFtpbmRleCQ0XTtcbiAgICAgIGFsbEVudGFuZ2xlZExhbmVzICY9IH5sYW5lO1xuICAgIH1cbiAgZW50YW5nbGVkUmVuZGVyTGFuZXMgPSBsYW5lcztcbiAgZmluaXNoUXVldWVpbmdDb25jdXJyZW50VXBkYXRlcygpO1xuICByZXR1cm4gdGltZW91dEhhbmRsZTtcbn1cbmZ1bmN0aW9uIGhhbmRsZVRocm93KHJvb3QsIHRocm93blZhbHVlKSB7XG4gIGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyJDEgPSBudWxsO1xuICBSZWFjdFNoYXJlZEludGVybmFscy5IID0gQ29udGV4dE9ubHlEaXNwYXRjaGVyO1xuICB0aHJvd25WYWx1ZSA9PT0gU3VzcGVuc2VFeGNlcHRpb25cbiAgICA/ICgodGhyb3duVmFsdWUgPSBnZXRTdXNwZW5kZWRUaGVuYWJsZSgpKSxcbiAgICAgICh3b3JrSW5Qcm9ncmVzc1N1c3BlbmRlZFJlYXNvbiA9IDMpKVxuICAgIDogdGhyb3duVmFsdWUgPT09IFN1c3BlbnNleUNvbW1pdEV4Y2VwdGlvblxuICAgICAgPyAoKHRocm93blZhbHVlID0gZ2V0U3VzcGVuZGVkVGhlbmFibGUoKSksXG4gICAgICAgICh3b3JrSW5Qcm9ncmVzc1N1c3BlbmRlZFJlYXNvbiA9IDQpKVxuICAgICAgOiAod29ya0luUHJvZ3Jlc3NTdXNwZW5kZWRSZWFzb24gPVxuICAgICAgICAgIHRocm93blZhbHVlID09PSBTZWxlY3RpdmVIeWRyYXRpb25FeGNlcHRpb25cbiAgICAgICAgICAgID8gOFxuICAgICAgICAgICAgOiBudWxsICE9PSB0aHJvd25WYWx1ZSAmJlxuICAgICAgICAgICAgICAgIFwib2JqZWN0XCIgPT09IHR5cGVvZiB0aHJvd25WYWx1ZSAmJlxuICAgICAgICAgICAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHRocm93blZhbHVlLnRoZW5cbiAgICAgICAgICAgICAgPyA2XG4gICAgICAgICAgICAgIDogMSk7XG4gIHdvcmtJblByb2dyZXNzVGhyb3duVmFsdWUgPSB0aHJvd25WYWx1ZTtcbiAgbnVsbCA9PT0gd29ya0luUHJvZ3Jlc3MgJiZcbiAgICAoKHdvcmtJblByb2dyZXNzUm9vdEV4aXRTdGF0dXMgPSAxKSxcbiAgICBsb2dVbmNhdWdodEVycm9yKFxuICAgICAgcm9vdCxcbiAgICAgIGNyZWF0ZUNhcHR1cmVkVmFsdWVBdEZpYmVyKHRocm93blZhbHVlLCByb290LmN1cnJlbnQpXG4gICAgKSk7XG59XG5mdW5jdGlvbiBwdXNoRGlzcGF0Y2hlcigpIHtcbiAgdmFyIHByZXZEaXNwYXRjaGVyID0gUmVhY3RTaGFyZWRJbnRlcm5hbHMuSDtcbiAgUmVhY3RTaGFyZWRJbnRlcm5hbHMuSCA9IENvbnRleHRPbmx5RGlzcGF0Y2hlcjtcbiAgcmV0dXJuIG51bGwgPT09IHByZXZEaXNwYXRjaGVyID8gQ29udGV4dE9ubHlEaXNwYXRjaGVyIDogcHJldkRpc3BhdGNoZXI7XG59XG5mdW5jdGlvbiBwdXNoQXN5bmNEaXNwYXRjaGVyKCkge1xuICB2YXIgcHJldkFzeW5jRGlzcGF0Y2hlciA9IFJlYWN0U2hhcmVkSW50ZXJuYWxzLkE7XG4gIFJlYWN0U2hhcmVkSW50ZXJuYWxzLkEgPSBEZWZhdWx0QXN5bmNEaXNwYXRjaGVyO1xuICByZXR1cm4gcHJldkFzeW5jRGlzcGF0Y2hlcjtcbn1cbmZ1bmN0aW9uIHJlbmRlckRpZFN1c3BlbmREZWxheUlmUG9zc2libGUoKSB7XG4gIHdvcmtJblByb2dyZXNzUm9vdEV4aXRTdGF0dXMgPSA0O1xuICB3b3JrSW5Qcm9ncmVzc1Jvb3REaWRTa2lwU3VzcGVuZGVkU2libGluZ3MgfHxcbiAgICAoKHdvcmtJblByb2dyZXNzUm9vdFJlbmRlckxhbmVzICYgNDE5NDE3NikgIT09XG4gICAgICB3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lcyAmJlxuICAgICAgbnVsbCAhPT0gc3VzcGVuc2VIYW5kbGVyU3RhY2tDdXJzb3IuY3VycmVudCkgfHxcbiAgICAod29ya0luUHJvZ3Jlc3NSb290SXNQcmVyZW5kZXJpbmcgPSAhMCk7XG4gICgwID09PSAod29ya0luUHJvZ3Jlc3NSb290U2tpcHBlZExhbmVzICYgMTM0MjE3NzI3KSAmJlxuICAgIDAgPT09ICh3b3JrSW5Qcm9ncmVzc1Jvb3RJbnRlcmxlYXZlZFVwZGF0ZWRMYW5lcyAmIDEzNDIxNzcyNykpIHx8XG4gICAgbnVsbCA9PT0gd29ya0luUHJvZ3Jlc3NSb290IHx8XG4gICAgbWFya1Jvb3RTdXNwZW5kZWQoXG4gICAgICB3b3JrSW5Qcm9ncmVzc1Jvb3QsXG4gICAgICB3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lcyxcbiAgICAgIHdvcmtJblByb2dyZXNzRGVmZXJyZWRMYW5lLFxuICAgICAgITFcbiAgICApO1xufVxuZnVuY3Rpb24gcmVuZGVyUm9vdFN5bmMocm9vdCwgbGFuZXMsIHNob3VsZFlpZWxkRm9yUHJlcmVuZGVyaW5nKSB7XG4gIHZhciBwcmV2RXhlY3V0aW9uQ29udGV4dCA9IGV4ZWN1dGlvbkNvbnRleHQ7XG4gIGV4ZWN1dGlvbkNvbnRleHQgfD0gMjtcbiAgdmFyIHByZXZEaXNwYXRjaGVyID0gcHVzaERpc3BhdGNoZXIoKSxcbiAgICBwcmV2QXN5bmNEaXNwYXRjaGVyID0gcHVzaEFzeW5jRGlzcGF0Y2hlcigpO1xuICBpZiAod29ya0luUHJvZ3Jlc3NSb290ICE9PSByb290IHx8IHdvcmtJblByb2dyZXNzUm9vdFJlbmRlckxhbmVzICE9PSBsYW5lcylcbiAgICAod29ya0luUHJvZ3Jlc3NUcmFuc2l0aW9ucyA9IG51bGwpLCBwcmVwYXJlRnJlc2hTdGFjayhyb290LCBsYW5lcyk7XG4gIGxhbmVzID0gITE7XG4gIHZhciBleGl0U3RhdHVzID0gd29ya0luUHJvZ3Jlc3NSb290RXhpdFN0YXR1cztcbiAgYTogZG9cbiAgICB0cnkge1xuICAgICAgaWYgKDAgIT09IHdvcmtJblByb2dyZXNzU3VzcGVuZGVkUmVhc29uICYmIG51bGwgIT09IHdvcmtJblByb2dyZXNzKSB7XG4gICAgICAgIHZhciB1bml0T2ZXb3JrID0gd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgdGhyb3duVmFsdWUgPSB3b3JrSW5Qcm9ncmVzc1Rocm93blZhbHVlO1xuICAgICAgICBzd2l0Y2ggKHdvcmtJblByb2dyZXNzU3VzcGVuZGVkUmVhc29uKSB7XG4gICAgICAgICAgY2FzZSA4OlxuICAgICAgICAgICAgcmVzZXRXb3JrSW5Qcm9ncmVzc1N0YWNrKCk7XG4gICAgICAgICAgICBleGl0U3RhdHVzID0gNjtcbiAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICBudWxsID09PSBzdXNwZW5zZUhhbmRsZXJTdGFja0N1cnNvci5jdXJyZW50ICYmIChsYW5lcyA9ICEwKTtcbiAgICAgICAgICAgIHZhciByZWFzb24gPSB3b3JrSW5Qcm9ncmVzc1N1c3BlbmRlZFJlYXNvbjtcbiAgICAgICAgICAgIHdvcmtJblByb2dyZXNzU3VzcGVuZGVkUmVhc29uID0gMDtcbiAgICAgICAgICAgIHdvcmtJblByb2dyZXNzVGhyb3duVmFsdWUgPSBudWxsO1xuICAgICAgICAgICAgdGhyb3dBbmRVbndpbmRXb3JrTG9vcChyb290LCB1bml0T2ZXb3JrLCB0aHJvd25WYWx1ZSwgcmVhc29uKTtcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgc2hvdWxkWWllbGRGb3JQcmVyZW5kZXJpbmcgJiZcbiAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3NSb290SXNQcmVyZW5kZXJpbmdcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICBleGl0U3RhdHVzID0gMDtcbiAgICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAocmVhc29uID0gd29ya0luUHJvZ3Jlc3NTdXNwZW5kZWRSZWFzb24pLFxuICAgICAgICAgICAgICAod29ya0luUHJvZ3Jlc3NTdXNwZW5kZWRSZWFzb24gPSAwKSxcbiAgICAgICAgICAgICAgKHdvcmtJblByb2dyZXNzVGhyb3duVmFsdWUgPSBudWxsKSxcbiAgICAgICAgICAgICAgdGhyb3dBbmRVbndpbmRXb3JrTG9vcChyb290LCB1bml0T2ZXb3JrLCB0aHJvd25WYWx1ZSwgcmVhc29uKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgd29ya0xvb3BTeW5jKCk7XG4gICAgICBleGl0U3RhdHVzID0gd29ya0luUHJvZ3Jlc3NSb290RXhpdFN0YXR1cztcbiAgICAgIGJyZWFrO1xuICAgIH0gY2F0Y2ggKHRocm93blZhbHVlJDE2NCkge1xuICAgICAgaGFuZGxlVGhyb3cocm9vdCwgdGhyb3duVmFsdWUkMTY0KTtcbiAgICB9XG4gIHdoaWxlICgxKTtcbiAgbGFuZXMgJiYgcm9vdC5zaGVsbFN1c3BlbmRDb3VudGVyKys7XG4gIGxhc3RDb250ZXh0RGVwZW5kZW5jeSA9IGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyID0gbnVsbDtcbiAgZXhlY3V0aW9uQ29udGV4dCA9IHByZXZFeGVjdXRpb25Db250ZXh0O1xuICBSZWFjdFNoYXJlZEludGVybmFscy5IID0gcHJldkRpc3BhdGNoZXI7XG4gIFJlYWN0U2hhcmVkSW50ZXJuYWxzLkEgPSBwcmV2QXN5bmNEaXNwYXRjaGVyO1xuICBudWxsID09PSB3b3JrSW5Qcm9ncmVzcyAmJlxuICAgICgod29ya0luUHJvZ3Jlc3NSb290ID0gbnVsbCksXG4gICAgKHdvcmtJblByb2dyZXNzUm9vdFJlbmRlckxhbmVzID0gMCksXG4gICAgZmluaXNoUXVldWVpbmdDb25jdXJyZW50VXBkYXRlcygpKTtcbiAgcmV0dXJuIGV4aXRTdGF0dXM7XG59XG5mdW5jdGlvbiB3b3JrTG9vcFN5bmMoKSB7XG4gIGZvciAoOyBudWxsICE9PSB3b3JrSW5Qcm9ncmVzczsgKSBwZXJmb3JtVW5pdE9mV29yayh3b3JrSW5Qcm9ncmVzcyk7XG59XG5mdW5jdGlvbiByZW5kZXJSb290Q29uY3VycmVudChyb290LCBsYW5lcykge1xuICB2YXIgcHJldkV4ZWN1dGlvbkNvbnRleHQgPSBleGVjdXRpb25Db250ZXh0O1xuICBleGVjdXRpb25Db250ZXh0IHw9IDI7XG4gIHZhciBwcmV2RGlzcGF0Y2hlciA9IHB1c2hEaXNwYXRjaGVyKCksXG4gICAgcHJldkFzeW5jRGlzcGF0Y2hlciA9IHB1c2hBc3luY0Rpc3BhdGNoZXIoKTtcbiAgd29ya0luUHJvZ3Jlc3NSb290ICE9PSByb290IHx8IHdvcmtJblByb2dyZXNzUm9vdFJlbmRlckxhbmVzICE9PSBsYW5lc1xuICAgID8gKCh3b3JrSW5Qcm9ncmVzc1RyYW5zaXRpb25zID0gbnVsbCksXG4gICAgICAod29ya0luUHJvZ3Jlc3NSb290UmVuZGVyVGFyZ2V0VGltZSA9IG5vdygpICsgNTAwKSxcbiAgICAgIHByZXBhcmVGcmVzaFN0YWNrKHJvb3QsIGxhbmVzKSlcbiAgICA6ICh3b3JrSW5Qcm9ncmVzc1Jvb3RJc1ByZXJlbmRlcmluZyA9IGNoZWNrSWZSb290SXNQcmVyZW5kZXJpbmcoXG4gICAgICAgIHJvb3QsXG4gICAgICAgIGxhbmVzXG4gICAgICApKTtcbiAgYTogZG9cbiAgICB0cnkge1xuICAgICAgaWYgKDAgIT09IHdvcmtJblByb2dyZXNzU3VzcGVuZGVkUmVhc29uICYmIG51bGwgIT09IHdvcmtJblByb2dyZXNzKSB7XG4gICAgICAgIGxhbmVzID0gd29ya0luUHJvZ3Jlc3M7XG4gICAgICAgIHZhciB0aHJvd25WYWx1ZSA9IHdvcmtJblByb2dyZXNzVGhyb3duVmFsdWU7XG4gICAgICAgIGI6IHN3aXRjaCAod29ya0luUHJvZ3Jlc3NTdXNwZW5kZWRSZWFzb24pIHtcbiAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzc1N1c3BlbmRlZFJlYXNvbiA9IDA7XG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzc1Rocm93blZhbHVlID0gbnVsbDtcbiAgICAgICAgICAgIHRocm93QW5kVW53aW5kV29ya0xvb3Aocm9vdCwgbGFuZXMsIHRocm93blZhbHVlLCAxKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgIGlmIChpc1RoZW5hYmxlUmVzb2x2ZWQodGhyb3duVmFsdWUpKSB7XG4gICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzU3VzcGVuZGVkUmVhc29uID0gMDtcbiAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3NUaHJvd25WYWx1ZSA9IG51bGw7XG4gICAgICAgICAgICAgIHJlcGxheVN1c3BlbmRlZFVuaXRPZldvcmsobGFuZXMpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxhbmVzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAyID09PSB3b3JrSW5Qcm9ncmVzc1N1c3BlbmRlZFJlYXNvbiAmJlxuICAgICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzUm9vdCA9PT0gcm9vdCAmJlxuICAgICAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzc1N1c3BlbmRlZFJlYXNvbiA9IDcpO1xuICAgICAgICAgICAgICBlbnN1cmVSb290SXNTY2hlZHVsZWQocm9vdCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhyb3duVmFsdWUudGhlbihsYW5lcywgbGFuZXMpO1xuICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzc1N1c3BlbmRlZFJlYXNvbiA9IDc7XG4gICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgIHdvcmtJblByb2dyZXNzU3VzcGVuZGVkUmVhc29uID0gNTtcbiAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgY2FzZSA3OlxuICAgICAgICAgICAgaXNUaGVuYWJsZVJlc29sdmVkKHRocm93blZhbHVlKVxuICAgICAgICAgICAgICA/ICgod29ya0luUHJvZ3Jlc3NTdXNwZW5kZWRSZWFzb24gPSAwKSxcbiAgICAgICAgICAgICAgICAod29ya0luUHJvZ3Jlc3NUaHJvd25WYWx1ZSA9IG51bGwpLFxuICAgICAgICAgICAgICAgIHJlcGxheVN1c3BlbmRlZFVuaXRPZldvcmsobGFuZXMpKVxuICAgICAgICAgICAgICA6ICgod29ya0luUHJvZ3Jlc3NTdXNwZW5kZWRSZWFzb24gPSAwKSxcbiAgICAgICAgICAgICAgICAod29ya0luUHJvZ3Jlc3NUaHJvd25WYWx1ZSA9IG51bGwpLFxuICAgICAgICAgICAgICAgIHRocm93QW5kVW53aW5kV29ya0xvb3Aocm9vdCwgbGFuZXMsIHRocm93blZhbHVlLCA3KSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICB2YXIgcmVzb3VyY2UgPSBudWxsO1xuICAgICAgICAgICAgc3dpdGNoICh3b3JrSW5Qcm9ncmVzcy50YWcpIHtcbiAgICAgICAgICAgICAgY2FzZSAyNjpcbiAgICAgICAgICAgICAgICByZXNvdXJjZSA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGU7XG4gICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgY2FzZSAyNzpcbiAgICAgICAgICAgICAgICB2YXIgaG9zdEZpYmVyID0gd29ya0luUHJvZ3Jlc3M7XG4gICAgICAgICAgICAgICAgaWYgKHJlc291cmNlID8gcHJlbG9hZFJlc291cmNlKHJlc291cmNlKSA6IDEpIHtcbiAgICAgICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzU3VzcGVuZGVkUmVhc29uID0gMDtcbiAgICAgICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzVGhyb3duVmFsdWUgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgdmFyIHNpYmxpbmcgPSBob3N0RmliZXIuc2libGluZztcbiAgICAgICAgICAgICAgICAgIGlmIChudWxsICE9PSBzaWJsaW5nKSB3b3JrSW5Qcm9ncmVzcyA9IHNpYmxpbmc7XG4gICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJldHVybkZpYmVyID0gaG9zdEZpYmVyLnJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgbnVsbCAhPT0gcmV0dXJuRmliZXJcbiAgICAgICAgICAgICAgICAgICAgICA/ICgod29ya0luUHJvZ3Jlc3MgPSByZXR1cm5GaWJlciksXG4gICAgICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZVVuaXRPZldvcmsocmV0dXJuRmliZXIpKVxuICAgICAgICAgICAgICAgICAgICAgIDogKHdvcmtJblByb2dyZXNzID0gbnVsbCk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBicmVhayBiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHdvcmtJblByb2dyZXNzU3VzcGVuZGVkUmVhc29uID0gMDtcbiAgICAgICAgICAgIHdvcmtJblByb2dyZXNzVGhyb3duVmFsdWUgPSBudWxsO1xuICAgICAgICAgICAgdGhyb3dBbmRVbndpbmRXb3JrTG9vcChyb290LCBsYW5lcywgdGhyb3duVmFsdWUsIDUpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3NTdXNwZW5kZWRSZWFzb24gPSAwO1xuICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3NUaHJvd25WYWx1ZSA9IG51bGw7XG4gICAgICAgICAgICB0aHJvd0FuZFVud2luZFdvcmtMb29wKHJvb3QsIGxhbmVzLCB0aHJvd25WYWx1ZSwgNik7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIDg6XG4gICAgICAgICAgICByZXNldFdvcmtJblByb2dyZXNzU3RhY2soKTtcbiAgICAgICAgICAgIHdvcmtJblByb2dyZXNzUm9vdEV4aXRTdGF0dXMgPSA2O1xuICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg0NjIpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgd29ya0xvb3BDb25jdXJyZW50KCk7XG4gICAgICBicmVhaztcbiAgICB9IGNhdGNoICh0aHJvd25WYWx1ZSQxNjYpIHtcbiAgICAgIGhhbmRsZVRocm93KHJvb3QsIHRocm93blZhbHVlJDE2Nik7XG4gICAgfVxuICB3aGlsZSAoMSk7XG4gIGxhc3RDb250ZXh0RGVwZW5kZW5jeSA9IGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyID0gbnVsbDtcbiAgUmVhY3RTaGFyZWRJbnRlcm5hbHMuSCA9IHByZXZEaXNwYXRjaGVyO1xuICBSZWFjdFNoYXJlZEludGVybmFscy5BID0gcHJldkFzeW5jRGlzcGF0Y2hlcjtcbiAgZXhlY3V0aW9uQ29udGV4dCA9IHByZXZFeGVjdXRpb25Db250ZXh0O1xuICBpZiAobnVsbCAhPT0gd29ya0luUHJvZ3Jlc3MpIHJldHVybiAwO1xuICB3b3JrSW5Qcm9ncmVzc1Jvb3QgPSBudWxsO1xuICB3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lcyA9IDA7XG4gIGZpbmlzaFF1ZXVlaW5nQ29uY3VycmVudFVwZGF0ZXMoKTtcbiAgcmV0dXJuIHdvcmtJblByb2dyZXNzUm9vdEV4aXRTdGF0dXM7XG59XG5mdW5jdGlvbiB3b3JrTG9vcENvbmN1cnJlbnQoKSB7XG4gIGZvciAoOyBudWxsICE9PSB3b3JrSW5Qcm9ncmVzcyAmJiAhc2hvdWxkWWllbGQoKTsgKVxuICAgIHBlcmZvcm1Vbml0T2ZXb3JrKHdvcmtJblByb2dyZXNzKTtcbn1cbmZ1bmN0aW9uIHBlcmZvcm1Vbml0T2ZXb3JrKHVuaXRPZldvcmspIHtcbiAgdmFyIG5leHQgPSBiZWdpbldvcmsodW5pdE9mV29yay5hbHRlcm5hdGUsIHVuaXRPZldvcmssIGVudGFuZ2xlZFJlbmRlckxhbmVzKTtcbiAgdW5pdE9mV29yay5tZW1vaXplZFByb3BzID0gdW5pdE9mV29yay5wZW5kaW5nUHJvcHM7XG4gIG51bGwgPT09IG5leHQgPyBjb21wbGV0ZVVuaXRPZldvcmsodW5pdE9mV29yaykgOiAod29ya0luUHJvZ3Jlc3MgPSBuZXh0KTtcbn1cbmZ1bmN0aW9uIHJlcGxheVN1c3BlbmRlZFVuaXRPZldvcmsodW5pdE9mV29yaykge1xuICB2YXIgbmV4dCA9IHVuaXRPZldvcms7XG4gIHZhciBjdXJyZW50ID0gbmV4dC5hbHRlcm5hdGU7XG4gIHN3aXRjaCAobmV4dC50YWcpIHtcbiAgICBjYXNlIDE1OlxuICAgIGNhc2UgMDpcbiAgICAgIG5leHQgPSByZXBsYXlGdW5jdGlvbkNvbXBvbmVudChcbiAgICAgICAgY3VycmVudCxcbiAgICAgICAgbmV4dCxcbiAgICAgICAgbmV4dC5wZW5kaW5nUHJvcHMsXG4gICAgICAgIG5leHQudHlwZSxcbiAgICAgICAgdm9pZCAwLFxuICAgICAgICB3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lc1xuICAgICAgKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMTE6XG4gICAgICBuZXh0ID0gcmVwbGF5RnVuY3Rpb25Db21wb25lbnQoXG4gICAgICAgIGN1cnJlbnQsXG4gICAgICAgIG5leHQsXG4gICAgICAgIG5leHQucGVuZGluZ1Byb3BzLFxuICAgICAgICBuZXh0LnR5cGUucmVuZGVyLFxuICAgICAgICBuZXh0LnJlZixcbiAgICAgICAgd29ya0luUHJvZ3Jlc3NSb290UmVuZGVyTGFuZXNcbiAgICAgICk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDU6XG4gICAgICByZXNldEhvb2tzT25VbndpbmQobmV4dCk7XG4gICAgZGVmYXVsdDpcbiAgICAgIHVud2luZEludGVycnVwdGVkV29yayhjdXJyZW50LCBuZXh0KSxcbiAgICAgICAgKG5leHQgPSB3b3JrSW5Qcm9ncmVzcyA9XG4gICAgICAgICAgcmVzZXRXb3JrSW5Qcm9ncmVzcyhuZXh0LCBlbnRhbmdsZWRSZW5kZXJMYW5lcykpLFxuICAgICAgICAobmV4dCA9IGJlZ2luV29yayhjdXJyZW50LCBuZXh0LCBlbnRhbmdsZWRSZW5kZXJMYW5lcykpO1xuICB9XG4gIHVuaXRPZldvcmsubWVtb2l6ZWRQcm9wcyA9IHVuaXRPZldvcmsucGVuZGluZ1Byb3BzO1xuICBudWxsID09PSBuZXh0ID8gY29tcGxldGVVbml0T2ZXb3JrKHVuaXRPZldvcmspIDogKHdvcmtJblByb2dyZXNzID0gbmV4dCk7XG59XG5mdW5jdGlvbiB0aHJvd0FuZFVud2luZFdvcmtMb29wKFxuICByb290LFxuICB1bml0T2ZXb3JrLFxuICB0aHJvd25WYWx1ZSxcbiAgc3VzcGVuZGVkUmVhc29uXG4pIHtcbiAgbGFzdENvbnRleHREZXBlbmRlbmN5ID0gY3VycmVudGx5UmVuZGVyaW5nRmliZXIgPSBudWxsO1xuICByZXNldEhvb2tzT25VbndpbmQodW5pdE9mV29yayk7XG4gIHRoZW5hYmxlU3RhdGUkMSA9IG51bGw7XG4gIHRoZW5hYmxlSW5kZXhDb3VudGVyJDEgPSAwO1xuICB2YXIgcmV0dXJuRmliZXIgPSB1bml0T2ZXb3JrLnJldHVybjtcbiAgdHJ5IHtcbiAgICBpZiAoXG4gICAgICB0aHJvd0V4Y2VwdGlvbihcbiAgICAgICAgcm9vdCxcbiAgICAgICAgcmV0dXJuRmliZXIsXG4gICAgICAgIHVuaXRPZldvcmssXG4gICAgICAgIHRocm93blZhbHVlLFxuICAgICAgICB3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lc1xuICAgICAgKVxuICAgICkge1xuICAgICAgd29ya0luUHJvZ3Jlc3NSb290RXhpdFN0YXR1cyA9IDE7XG4gICAgICBsb2dVbmNhdWdodEVycm9yKFxuICAgICAgICByb290LFxuICAgICAgICBjcmVhdGVDYXB0dXJlZFZhbHVlQXRGaWJlcih0aHJvd25WYWx1ZSwgcm9vdC5jdXJyZW50KVxuICAgICAgKTtcbiAgICAgIHdvcmtJblByb2dyZXNzID0gbnVsbDtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgaWYgKG51bGwgIT09IHJldHVybkZpYmVyKSB0aHJvdyAoKHdvcmtJblByb2dyZXNzID0gcmV0dXJuRmliZXIpLCBlcnJvcik7XG4gICAgd29ya0luUHJvZ3Jlc3NSb290RXhpdFN0YXR1cyA9IDE7XG4gICAgbG9nVW5jYXVnaHRFcnJvcihcbiAgICAgIHJvb3QsXG4gICAgICBjcmVhdGVDYXB0dXJlZFZhbHVlQXRGaWJlcih0aHJvd25WYWx1ZSwgcm9vdC5jdXJyZW50KVxuICAgICk7XG4gICAgd29ya0luUHJvZ3Jlc3MgPSBudWxsO1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAodW5pdE9mV29yay5mbGFncyAmIDMyNzY4KSB7XG4gICAgaWYgKGlzSHlkcmF0aW5nIHx8IDEgPT09IHN1c3BlbmRlZFJlYXNvbikgcm9vdCA9ICEwO1xuICAgIGVsc2UgaWYgKFxuICAgICAgd29ya0luUHJvZ3Jlc3NSb290SXNQcmVyZW5kZXJpbmcgfHxcbiAgICAgIDAgIT09ICh3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lcyAmIDUzNjg3MDkxMilcbiAgICApXG4gICAgICByb290ID0gITE7XG4gICAgZWxzZSBpZiAoXG4gICAgICAoKHdvcmtJblByb2dyZXNzUm9vdERpZFNraXBTdXNwZW5kZWRTaWJsaW5ncyA9IHJvb3QgPSAhMCksXG4gICAgICAyID09PSBzdXNwZW5kZWRSZWFzb24gfHwgMyA9PT0gc3VzcGVuZGVkUmVhc29uIHx8IDYgPT09IHN1c3BlbmRlZFJlYXNvbilcbiAgICApXG4gICAgICAoc3VzcGVuZGVkUmVhc29uID0gc3VzcGVuc2VIYW5kbGVyU3RhY2tDdXJzb3IuY3VycmVudCksXG4gICAgICAgIG51bGwgIT09IHN1c3BlbmRlZFJlYXNvbiAmJlxuICAgICAgICAgIDEzID09PSBzdXNwZW5kZWRSZWFzb24udGFnICYmXG4gICAgICAgICAgKHN1c3BlbmRlZFJlYXNvbi5mbGFncyB8PSAxNjM4NCk7XG4gICAgdW53aW5kVW5pdE9mV29yayh1bml0T2ZXb3JrLCByb290KTtcbiAgfSBlbHNlIGNvbXBsZXRlVW5pdE9mV29yayh1bml0T2ZXb3JrKTtcbn1cbmZ1bmN0aW9uIGNvbXBsZXRlVW5pdE9mV29yayh1bml0T2ZXb3JrKSB7XG4gIHZhciBjb21wbGV0ZWRXb3JrID0gdW5pdE9mV29yaztcbiAgZG8ge1xuICAgIGlmICgwICE9PSAoY29tcGxldGVkV29yay5mbGFncyAmIDMyNzY4KSkge1xuICAgICAgdW53aW5kVW5pdE9mV29yayhcbiAgICAgICAgY29tcGxldGVkV29yayxcbiAgICAgICAgd29ya0luUHJvZ3Jlc3NSb290RGlkU2tpcFN1c3BlbmRlZFNpYmxpbmdzXG4gICAgICApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB1bml0T2ZXb3JrID0gY29tcGxldGVkV29yay5yZXR1cm47XG4gICAgdmFyIG5leHQgPSBjb21wbGV0ZVdvcmsoXG4gICAgICBjb21wbGV0ZWRXb3JrLmFsdGVybmF0ZSxcbiAgICAgIGNvbXBsZXRlZFdvcmssXG4gICAgICBlbnRhbmdsZWRSZW5kZXJMYW5lc1xuICAgICk7XG4gICAgaWYgKG51bGwgIT09IG5leHQpIHtcbiAgICAgIHdvcmtJblByb2dyZXNzID0gbmV4dDtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29tcGxldGVkV29yayA9IGNvbXBsZXRlZFdvcmsuc2libGluZztcbiAgICBpZiAobnVsbCAhPT0gY29tcGxldGVkV29yaykge1xuICAgICAgd29ya0luUHJvZ3Jlc3MgPSBjb21wbGV0ZWRXb3JrO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB3b3JrSW5Qcm9ncmVzcyA9IGNvbXBsZXRlZFdvcmsgPSB1bml0T2ZXb3JrO1xuICB9IHdoaWxlIChudWxsICE9PSBjb21wbGV0ZWRXb3JrKTtcbiAgMCA9PT0gd29ya0luUHJvZ3Jlc3NSb290RXhpdFN0YXR1cyAmJiAod29ya0luUHJvZ3Jlc3NSb290RXhpdFN0YXR1cyA9IDUpO1xufVxuZnVuY3Rpb24gdW53aW5kVW5pdE9mV29yayh1bml0T2ZXb3JrLCBza2lwU2libGluZ3MpIHtcbiAgZG8ge1xuICAgIHZhciBuZXh0ID0gdW53aW5kV29yayh1bml0T2ZXb3JrLmFsdGVybmF0ZSwgdW5pdE9mV29yayk7XG4gICAgaWYgKG51bGwgIT09IG5leHQpIHtcbiAgICAgIG5leHQuZmxhZ3MgJj0gMzI3Njc7XG4gICAgICB3b3JrSW5Qcm9ncmVzcyA9IG5leHQ7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIG5leHQgPSB1bml0T2ZXb3JrLnJldHVybjtcbiAgICBudWxsICE9PSBuZXh0ICYmXG4gICAgICAoKG5leHQuZmxhZ3MgfD0gMzI3NjgpLCAobmV4dC5zdWJ0cmVlRmxhZ3MgPSAwKSwgKG5leHQuZGVsZXRpb25zID0gbnVsbCkpO1xuICAgIGlmIChcbiAgICAgICFza2lwU2libGluZ3MgJiZcbiAgICAgICgodW5pdE9mV29yayA9IHVuaXRPZldvcmsuc2libGluZyksIG51bGwgIT09IHVuaXRPZldvcmspXG4gICAgKSB7XG4gICAgICB3b3JrSW5Qcm9ncmVzcyA9IHVuaXRPZldvcms7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHdvcmtJblByb2dyZXNzID0gdW5pdE9mV29yayA9IG5leHQ7XG4gIH0gd2hpbGUgKG51bGwgIT09IHVuaXRPZldvcmspO1xuICB3b3JrSW5Qcm9ncmVzc1Jvb3RFeGl0U3RhdHVzID0gNjtcbiAgd29ya0luUHJvZ3Jlc3MgPSBudWxsO1xufVxuZnVuY3Rpb24gY29tbWl0Um9vdChcbiAgcm9vdCxcbiAgcmVjb3ZlcmFibGVFcnJvcnMsXG4gIHRyYW5zaXRpb25zLFxuICBkaWRJbmNsdWRlUmVuZGVyUGhhc2VVcGRhdGUsXG4gIHNwYXduZWRMYW5lLFxuICB1cGRhdGVkTGFuZXMsXG4gIHN1c3BlbmRlZFJldHJ5TGFuZXMsXG4gIHN1c3BlbmRlZENvbW1pdFJlYXNvbixcbiAgY29tcGxldGVkUmVuZGVyU3RhcnRUaW1lLFxuICBjb21wbGV0ZWRSZW5kZXJFbmRUaW1lXG4pIHtcbiAgdmFyIHByZXZUcmFuc2l0aW9uID0gUmVhY3RTaGFyZWRJbnRlcm5hbHMuVCxcbiAgICBwcmV2aW91c1VwZGF0ZUxhbmVQcmlvcml0eSA9IFJlYWN0RE9NU2hhcmVkSW50ZXJuYWxzLnA7XG4gIHRyeSB7XG4gICAgKFJlYWN0RE9NU2hhcmVkSW50ZXJuYWxzLnAgPSAyKSxcbiAgICAgIChSZWFjdFNoYXJlZEludGVybmFscy5UID0gbnVsbCksXG4gICAgICBjb21taXRSb290SW1wbChcbiAgICAgICAgcm9vdCxcbiAgICAgICAgcmVjb3ZlcmFibGVFcnJvcnMsXG4gICAgICAgIHRyYW5zaXRpb25zLFxuICAgICAgICBkaWRJbmNsdWRlUmVuZGVyUGhhc2VVcGRhdGUsXG4gICAgICAgIHByZXZpb3VzVXBkYXRlTGFuZVByaW9yaXR5LFxuICAgICAgICBzcGF3bmVkTGFuZSxcbiAgICAgICAgdXBkYXRlZExhbmVzLFxuICAgICAgICBzdXNwZW5kZWRSZXRyeUxhbmVzLFxuICAgICAgICBzdXNwZW5kZWRDb21taXRSZWFzb24sXG4gICAgICAgIGNvbXBsZXRlZFJlbmRlclN0YXJ0VGltZSxcbiAgICAgICAgY29tcGxldGVkUmVuZGVyRW5kVGltZVxuICAgICAgKTtcbiAgfSBmaW5hbGx5IHtcbiAgICAoUmVhY3RTaGFyZWRJbnRlcm5hbHMuVCA9IHByZXZUcmFuc2l0aW9uKSxcbiAgICAgIChSZWFjdERPTVNoYXJlZEludGVybmFscy5wID0gcHJldmlvdXNVcGRhdGVMYW5lUHJpb3JpdHkpO1xuICB9XG59XG5mdW5jdGlvbiBjb21taXRSb290SW1wbChcbiAgcm9vdCxcbiAgcmVjb3ZlcmFibGVFcnJvcnMsXG4gIHRyYW5zaXRpb25zLFxuICBkaWRJbmNsdWRlUmVuZGVyUGhhc2VVcGRhdGUsXG4gIHJlbmRlclByaW9yaXR5TGV2ZWwsXG4gIHNwYXduZWRMYW5lLFxuICB1cGRhdGVkTGFuZXMsXG4gIHN1c3BlbmRlZFJldHJ5TGFuZXNcbikge1xuICBkbyBmbHVzaFBhc3NpdmVFZmZlY3RzKCk7XG4gIHdoaWxlIChudWxsICE9PSByb290V2l0aFBlbmRpbmdQYXNzaXZlRWZmZWN0cyk7XG4gIGlmICgwICE9PSAoZXhlY3V0aW9uQ29udGV4dCAmIDYpKSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDMyNykpO1xuICB2YXIgZmluaXNoZWRXb3JrID0gcm9vdC5maW5pc2hlZFdvcms7XG4gIGRpZEluY2x1ZGVSZW5kZXJQaGFzZVVwZGF0ZSA9IHJvb3QuZmluaXNoZWRMYW5lcztcbiAgaWYgKG51bGwgPT09IGZpbmlzaGVkV29yaykgcmV0dXJuIG51bGw7XG4gIHJvb3QuZmluaXNoZWRXb3JrID0gbnVsbDtcbiAgcm9vdC5maW5pc2hlZExhbmVzID0gMDtcbiAgaWYgKGZpbmlzaGVkV29yayA9PT0gcm9vdC5jdXJyZW50KSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDE3NykpO1xuICByb290LmNhbGxiYWNrTm9kZSA9IG51bGw7XG4gIHJvb3QuY2FsbGJhY2tQcmlvcml0eSA9IDA7XG4gIHJvb3QuY2FuY2VsUGVuZGluZ0NvbW1pdCA9IG51bGw7XG4gIHZhciByZW1haW5pbmdMYW5lcyA9IGZpbmlzaGVkV29yay5sYW5lcyB8IGZpbmlzaGVkV29yay5jaGlsZExhbmVzO1xuICByZW1haW5pbmdMYW5lcyB8PSBjb25jdXJyZW50bHlVcGRhdGVkTGFuZXM7XG4gIG1hcmtSb290RmluaXNoZWQoXG4gICAgcm9vdCxcbiAgICBkaWRJbmNsdWRlUmVuZGVyUGhhc2VVcGRhdGUsXG4gICAgcmVtYWluaW5nTGFuZXMsXG4gICAgc3Bhd25lZExhbmUsXG4gICAgdXBkYXRlZExhbmVzLFxuICAgIHN1c3BlbmRlZFJldHJ5TGFuZXNcbiAgKTtcbiAgcm9vdCA9PT0gd29ya0luUHJvZ3Jlc3NSb290ICYmXG4gICAgKCh3b3JrSW5Qcm9ncmVzcyA9IHdvcmtJblByb2dyZXNzUm9vdCA9IG51bGwpLFxuICAgICh3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lcyA9IDApKTtcbiAgKDAgPT09IChmaW5pc2hlZFdvcmsuc3VidHJlZUZsYWdzICYgMTAyNTYpICYmXG4gICAgMCA9PT0gKGZpbmlzaGVkV29yay5mbGFncyAmIDEwMjU2KSkgfHxcbiAgICByb290RG9lc0hhdmVQYXNzaXZlRWZmZWN0cyB8fFxuICAgICgocm9vdERvZXNIYXZlUGFzc2l2ZUVmZmVjdHMgPSAhMCksXG4gICAgKHBlbmRpbmdQYXNzaXZlRWZmZWN0c1JlbWFpbmluZ0xhbmVzID0gcmVtYWluaW5nTGFuZXMpLFxuICAgIChwZW5kaW5nUGFzc2l2ZVRyYW5zaXRpb25zID0gdHJhbnNpdGlvbnMpLFxuICAgIHNjaGVkdWxlQ2FsbGJhY2skMShOb3JtYWxQcmlvcml0eSQxLCBmdW5jdGlvbiAoKSB7XG4gICAgICBmbHVzaFBhc3NpdmVFZmZlY3RzKCEwKTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH0pKTtcbiAgdHJhbnNpdGlvbnMgPSAwICE9PSAoZmluaXNoZWRXb3JrLmZsYWdzICYgMTU5OTApO1xuICAwICE9PSAoZmluaXNoZWRXb3JrLnN1YnRyZWVGbGFncyAmIDE1OTkwKSB8fCB0cmFuc2l0aW9uc1xuICAgID8gKCh0cmFuc2l0aW9ucyA9IFJlYWN0U2hhcmVkSW50ZXJuYWxzLlQpLFxuICAgICAgKFJlYWN0U2hhcmVkSW50ZXJuYWxzLlQgPSBudWxsKSxcbiAgICAgIChzcGF3bmVkTGFuZSA9IFJlYWN0RE9NU2hhcmVkSW50ZXJuYWxzLnApLFxuICAgICAgKFJlYWN0RE9NU2hhcmVkSW50ZXJuYWxzLnAgPSAyKSxcbiAgICAgICh1cGRhdGVkTGFuZXMgPSBleGVjdXRpb25Db250ZXh0KSxcbiAgICAgIChleGVjdXRpb25Db250ZXh0IHw9IDQpLFxuICAgICAgY29tbWl0QmVmb3JlTXV0YXRpb25FZmZlY3RzKHJvb3QsIGZpbmlzaGVkV29yayksXG4gICAgICBjb21taXRNdXRhdGlvbkVmZmVjdHNPbkZpYmVyKGZpbmlzaGVkV29yaywgcm9vdCksXG4gICAgICByZXN0b3JlU2VsZWN0aW9uKHNlbGVjdGlvbkluZm9ybWF0aW9uLCByb290LmNvbnRhaW5lckluZm8pLFxuICAgICAgKF9lbmFibGVkID0gISFldmVudHNFbmFibGVkKSxcbiAgICAgIChzZWxlY3Rpb25JbmZvcm1hdGlvbiA9IGV2ZW50c0VuYWJsZWQgPSBudWxsKSxcbiAgICAgIChyb290LmN1cnJlbnQgPSBmaW5pc2hlZFdvcmspLFxuICAgICAgY29tbWl0TGF5b3V0RWZmZWN0T25GaWJlcihyb290LCBmaW5pc2hlZFdvcmsuYWx0ZXJuYXRlLCBmaW5pc2hlZFdvcmspLFxuICAgICAgcmVxdWVzdFBhaW50KCksXG4gICAgICAoZXhlY3V0aW9uQ29udGV4dCA9IHVwZGF0ZWRMYW5lcyksXG4gICAgICAoUmVhY3RET01TaGFyZWRJbnRlcm5hbHMucCA9IHNwYXduZWRMYW5lKSxcbiAgICAgIChSZWFjdFNoYXJlZEludGVybmFscy5UID0gdHJhbnNpdGlvbnMpKVxuICAgIDogKHJvb3QuY3VycmVudCA9IGZpbmlzaGVkV29yayk7XG4gIHJvb3REb2VzSGF2ZVBhc3NpdmVFZmZlY3RzXG4gICAgPyAoKHJvb3REb2VzSGF2ZVBhc3NpdmVFZmZlY3RzID0gITEpLFxuICAgICAgKHJvb3RXaXRoUGVuZGluZ1Bhc3NpdmVFZmZlY3RzID0gcm9vdCksXG4gICAgICAocGVuZGluZ1Bhc3NpdmVFZmZlY3RzTGFuZXMgPSBkaWRJbmNsdWRlUmVuZGVyUGhhc2VVcGRhdGUpKVxuICAgIDogcmVsZWFzZVJvb3RQb29sZWRDYWNoZShyb290LCByZW1haW5pbmdMYW5lcyk7XG4gIHJlbWFpbmluZ0xhbmVzID0gcm9vdC5wZW5kaW5nTGFuZXM7XG4gIDAgPT09IHJlbWFpbmluZ0xhbmVzICYmIChsZWdhY3lFcnJvckJvdW5kYXJpZXNUaGF0QWxyZWFkeUZhaWxlZCA9IG51bGwpO1xuICBvbkNvbW1pdFJvb3QoZmluaXNoZWRXb3JrLnN0YXRlTm9kZSwgcmVuZGVyUHJpb3JpdHlMZXZlbCk7XG4gIGVuc3VyZVJvb3RJc1NjaGVkdWxlZChyb290KTtcbiAgaWYgKG51bGwgIT09IHJlY292ZXJhYmxlRXJyb3JzKVxuICAgIGZvciAoXG4gICAgICByZW5kZXJQcmlvcml0eUxldmVsID0gcm9vdC5vblJlY292ZXJhYmxlRXJyb3IsIGZpbmlzaGVkV29yayA9IDA7XG4gICAgICBmaW5pc2hlZFdvcmsgPCByZWNvdmVyYWJsZUVycm9ycy5sZW5ndGg7XG4gICAgICBmaW5pc2hlZFdvcmsrK1xuICAgIClcbiAgICAgIChyZW1haW5pbmdMYW5lcyA9IHJlY292ZXJhYmxlRXJyb3JzW2ZpbmlzaGVkV29ya10pLFxuICAgICAgICByZW5kZXJQcmlvcml0eUxldmVsKHJlbWFpbmluZ0xhbmVzLnZhbHVlLCB7XG4gICAgICAgICAgY29tcG9uZW50U3RhY2s6IHJlbWFpbmluZ0xhbmVzLnN0YWNrXG4gICAgICAgIH0pO1xuICAwICE9PSAocGVuZGluZ1Bhc3NpdmVFZmZlY3RzTGFuZXMgJiAzKSAmJiBmbHVzaFBhc3NpdmVFZmZlY3RzKCk7XG4gIHJlbWFpbmluZ0xhbmVzID0gcm9vdC5wZW5kaW5nTGFuZXM7XG4gIDAgIT09IChkaWRJbmNsdWRlUmVuZGVyUGhhc2VVcGRhdGUgJiA0MTk0MjE4KSAmJiAwICE9PSAocmVtYWluaW5nTGFuZXMgJiA0MilcbiAgICA/IHJvb3QgPT09IHJvb3RXaXRoTmVzdGVkVXBkYXRlc1xuICAgICAgPyBuZXN0ZWRVcGRhdGVDb3VudCsrXG4gICAgICA6ICgobmVzdGVkVXBkYXRlQ291bnQgPSAwKSwgKHJvb3RXaXRoTmVzdGVkVXBkYXRlcyA9IHJvb3QpKVxuICAgIDogKG5lc3RlZFVwZGF0ZUNvdW50ID0gMCk7XG4gIGZsdXNoU3luY1dvcmtBY3Jvc3NSb290c19pbXBsKDAsICExKTtcbiAgcmV0dXJuIG51bGw7XG59XG5mdW5jdGlvbiByZWxlYXNlUm9vdFBvb2xlZENhY2hlKHJvb3QsIHJlbWFpbmluZ0xhbmVzKSB7XG4gIDAgPT09IChyb290LnBvb2xlZENhY2hlTGFuZXMgJj0gcmVtYWluaW5nTGFuZXMpICYmXG4gICAgKChyZW1haW5pbmdMYW5lcyA9IHJvb3QucG9vbGVkQ2FjaGUpLFxuICAgIG51bGwgIT0gcmVtYWluaW5nTGFuZXMgJiZcbiAgICAgICgocm9vdC5wb29sZWRDYWNoZSA9IG51bGwpLCByZWxlYXNlQ2FjaGUocmVtYWluaW5nTGFuZXMpKSk7XG59XG5mdW5jdGlvbiBmbHVzaFBhc3NpdmVFZmZlY3RzKCkge1xuICBpZiAobnVsbCAhPT0gcm9vdFdpdGhQZW5kaW5nUGFzc2l2ZUVmZmVjdHMpIHtcbiAgICB2YXIgcm9vdCQxNzAgPSByb290V2l0aFBlbmRpbmdQYXNzaXZlRWZmZWN0cyxcbiAgICAgIHJlbWFpbmluZ0xhbmVzID0gcGVuZGluZ1Bhc3NpdmVFZmZlY3RzUmVtYWluaW5nTGFuZXM7XG4gICAgcGVuZGluZ1Bhc3NpdmVFZmZlY3RzUmVtYWluaW5nTGFuZXMgPSAwO1xuICAgIHZhciByZW5kZXJQcmlvcml0eSA9IGxhbmVzVG9FdmVudFByaW9yaXR5KHBlbmRpbmdQYXNzaXZlRWZmZWN0c0xhbmVzKSxcbiAgICAgIHByZXZUcmFuc2l0aW9uID0gUmVhY3RTaGFyZWRJbnRlcm5hbHMuVCxcbiAgICAgIHByZXZpb3VzUHJpb3JpdHkgPSBSZWFjdERPTVNoYXJlZEludGVybmFscy5wO1xuICAgIHRyeSB7XG4gICAgICBSZWFjdERPTVNoYXJlZEludGVybmFscy5wID0gMzIgPiByZW5kZXJQcmlvcml0eSA/IDMyIDogcmVuZGVyUHJpb3JpdHk7XG4gICAgICBSZWFjdFNoYXJlZEludGVybmFscy5UID0gbnVsbDtcbiAgICAgIGlmIChudWxsID09PSByb290V2l0aFBlbmRpbmdQYXNzaXZlRWZmZWN0cylcbiAgICAgICAgdmFyIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCA9ICExO1xuICAgICAgZWxzZSB7XG4gICAgICAgIHJlbmRlclByaW9yaXR5ID0gcGVuZGluZ1Bhc3NpdmVUcmFuc2l0aW9ucztcbiAgICAgICAgcGVuZGluZ1Bhc3NpdmVUcmFuc2l0aW9ucyA9IG51bGw7XG4gICAgICAgIHZhciByb290ID0gcm9vdFdpdGhQZW5kaW5nUGFzc2l2ZUVmZmVjdHMsXG4gICAgICAgICAgbGFuZXMgPSBwZW5kaW5nUGFzc2l2ZUVmZmVjdHNMYW5lcztcbiAgICAgICAgcm9vdFdpdGhQZW5kaW5nUGFzc2l2ZUVmZmVjdHMgPSBudWxsO1xuICAgICAgICBwZW5kaW5nUGFzc2l2ZUVmZmVjdHNMYW5lcyA9IDA7XG4gICAgICAgIGlmICgwICE9PSAoZXhlY3V0aW9uQ29udGV4dCAmIDYpKVxuICAgICAgICAgIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMzMxKSk7XG4gICAgICAgIHZhciBwcmV2RXhlY3V0aW9uQ29udGV4dCA9IGV4ZWN1dGlvbkNvbnRleHQ7XG4gICAgICAgIGV4ZWN1dGlvbkNvbnRleHQgfD0gNDtcbiAgICAgICAgY29tbWl0UGFzc2l2ZVVubW91bnRPbkZpYmVyKHJvb3QuY3VycmVudCk7XG4gICAgICAgIGNvbW1pdFBhc3NpdmVNb3VudE9uRmliZXIocm9vdCwgcm9vdC5jdXJyZW50LCBsYW5lcywgcmVuZGVyUHJpb3JpdHkpO1xuICAgICAgICBleGVjdXRpb25Db250ZXh0ID0gcHJldkV4ZWN1dGlvbkNvbnRleHQ7XG4gICAgICAgIGZsdXNoU3luY1dvcmtBY3Jvc3NSb290c19pbXBsKDAsICExKTtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIGluamVjdGVkSG9vayAmJlxuICAgICAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGluamVjdGVkSG9vay5vblBvc3RDb21taXRGaWJlclJvb3RcbiAgICAgICAgKVxuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpbmplY3RlZEhvb2sub25Qb3N0Q29tbWl0RmliZXJSb290KHJlbmRlcmVySUQsIHJvb3QpO1xuICAgICAgICAgIH0gY2F0Y2ggKGVycikge31cbiAgICAgICAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0ID0gITA7XG4gICAgICB9XG4gICAgICByZXR1cm4gSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0O1xuICAgIH0gZmluYWxseSB7XG4gICAgICAoUmVhY3RET01TaGFyZWRJbnRlcm5hbHMucCA9IHByZXZpb3VzUHJpb3JpdHkpLFxuICAgICAgICAoUmVhY3RTaGFyZWRJbnRlcm5hbHMuVCA9IHByZXZUcmFuc2l0aW9uKSxcbiAgICAgICAgcmVsZWFzZVJvb3RQb29sZWRDYWNoZShyb290JDE3MCwgcmVtYWluaW5nTGFuZXMpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gITE7XG59XG5mdW5jdGlvbiBjYXB0dXJlQ29tbWl0UGhhc2VFcnJvck9uUm9vdChyb290RmliZXIsIHNvdXJjZUZpYmVyLCBlcnJvcikge1xuICBzb3VyY2VGaWJlciA9IGNyZWF0ZUNhcHR1cmVkVmFsdWVBdEZpYmVyKGVycm9yLCBzb3VyY2VGaWJlcik7XG4gIHNvdXJjZUZpYmVyID0gY3JlYXRlUm9vdEVycm9yVXBkYXRlKHJvb3RGaWJlci5zdGF0ZU5vZGUsIHNvdXJjZUZpYmVyLCAyKTtcbiAgcm9vdEZpYmVyID0gZW5xdWV1ZVVwZGF0ZShyb290RmliZXIsIHNvdXJjZUZpYmVyLCAyKTtcbiAgbnVsbCAhPT0gcm9vdEZpYmVyICYmXG4gICAgKG1hcmtSb290VXBkYXRlZCQxKHJvb3RGaWJlciwgMiksIGVuc3VyZVJvb3RJc1NjaGVkdWxlZChyb290RmliZXIpKTtcbn1cbmZ1bmN0aW9uIGNhcHR1cmVDb21taXRQaGFzZUVycm9yKHNvdXJjZUZpYmVyLCBuZWFyZXN0TW91bnRlZEFuY2VzdG9yLCBlcnJvcikge1xuICBpZiAoMyA9PT0gc291cmNlRmliZXIudGFnKVxuICAgIGNhcHR1cmVDb21taXRQaGFzZUVycm9yT25Sb290KHNvdXJjZUZpYmVyLCBzb3VyY2VGaWJlciwgZXJyb3IpO1xuICBlbHNlXG4gICAgZm9yICg7IG51bGwgIT09IG5lYXJlc3RNb3VudGVkQW5jZXN0b3I7ICkge1xuICAgICAgaWYgKDMgPT09IG5lYXJlc3RNb3VudGVkQW5jZXN0b3IudGFnKSB7XG4gICAgICAgIGNhcHR1cmVDb21taXRQaGFzZUVycm9yT25Sb290KFxuICAgICAgICAgIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IsXG4gICAgICAgICAgc291cmNlRmliZXIsXG4gICAgICAgICAgZXJyb3JcbiAgICAgICAgKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9IGVsc2UgaWYgKDEgPT09IG5lYXJlc3RNb3VudGVkQW5jZXN0b3IudGFnKSB7XG4gICAgICAgIHZhciBpbnN0YW5jZSA9IG5lYXJlc3RNb3VudGVkQW5jZXN0b3Iuc3RhdGVOb2RlO1xuICAgICAgICBpZiAoXG4gICAgICAgICAgXCJmdW5jdGlvblwiID09PVxuICAgICAgICAgICAgdHlwZW9mIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IudHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IgfHxcbiAgICAgICAgICAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgaW5zdGFuY2UuY29tcG9uZW50RGlkQ2F0Y2ggJiZcbiAgICAgICAgICAgIChudWxsID09PSBsZWdhY3lFcnJvckJvdW5kYXJpZXNUaGF0QWxyZWFkeUZhaWxlZCB8fFxuICAgICAgICAgICAgICAhbGVnYWN5RXJyb3JCb3VuZGFyaWVzVGhhdEFscmVhZHlGYWlsZWQuaGFzKGluc3RhbmNlKSkpXG4gICAgICAgICkge1xuICAgICAgICAgIHNvdXJjZUZpYmVyID0gY3JlYXRlQ2FwdHVyZWRWYWx1ZUF0RmliZXIoZXJyb3IsIHNvdXJjZUZpYmVyKTtcbiAgICAgICAgICBlcnJvciA9IGNyZWF0ZUNsYXNzRXJyb3JVcGRhdGUoMik7XG4gICAgICAgICAgaW5zdGFuY2UgPSBlbnF1ZXVlVXBkYXRlKG5lYXJlc3RNb3VudGVkQW5jZXN0b3IsIGVycm9yLCAyKTtcbiAgICAgICAgICBudWxsICE9PSBpbnN0YW5jZSAmJlxuICAgICAgICAgICAgKGluaXRpYWxpemVDbGFzc0Vycm9yVXBkYXRlKFxuICAgICAgICAgICAgICBlcnJvcixcbiAgICAgICAgICAgICAgaW5zdGFuY2UsXG4gICAgICAgICAgICAgIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IsXG4gICAgICAgICAgICAgIHNvdXJjZUZpYmVyXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgbWFya1Jvb3RVcGRhdGVkJDEoaW5zdGFuY2UsIDIpLFxuICAgICAgICAgICAgZW5zdXJlUm9vdElzU2NoZWR1bGVkKGluc3RhbmNlKSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IgPSBuZWFyZXN0TW91bnRlZEFuY2VzdG9yLnJldHVybjtcbiAgICB9XG59XG5mdW5jdGlvbiBhdHRhY2hQaW5nTGlzdGVuZXIocm9vdCwgd2FrZWFibGUsIGxhbmVzKSB7XG4gIHZhciBwaW5nQ2FjaGUgPSByb290LnBpbmdDYWNoZTtcbiAgaWYgKG51bGwgPT09IHBpbmdDYWNoZSkge1xuICAgIHBpbmdDYWNoZSA9IHJvb3QucGluZ0NhY2hlID0gbmV3IFBvc3NpYmx5V2Vha01hcCgpO1xuICAgIHZhciB0aHJlYWRJRHMgPSBuZXcgU2V0KCk7XG4gICAgcGluZ0NhY2hlLnNldCh3YWtlYWJsZSwgdGhyZWFkSURzKTtcbiAgfSBlbHNlXG4gICAgKHRocmVhZElEcyA9IHBpbmdDYWNoZS5nZXQod2FrZWFibGUpKSxcbiAgICAgIHZvaWQgMCA9PT0gdGhyZWFkSURzICYmXG4gICAgICAgICgodGhyZWFkSURzID0gbmV3IFNldCgpKSwgcGluZ0NhY2hlLnNldCh3YWtlYWJsZSwgdGhyZWFkSURzKSk7XG4gIHRocmVhZElEcy5oYXMobGFuZXMpIHx8XG4gICAgKCh3b3JrSW5Qcm9ncmVzc1Jvb3REaWRBdHRhY2hQaW5nTGlzdGVuZXIgPSAhMCksXG4gICAgdGhyZWFkSURzLmFkZChsYW5lcyksXG4gICAgKHJvb3QgPSBwaW5nU3VzcGVuZGVkUm9vdC5iaW5kKG51bGwsIHJvb3QsIHdha2VhYmxlLCBsYW5lcykpLFxuICAgIHdha2VhYmxlLnRoZW4ocm9vdCwgcm9vdCkpO1xufVxuZnVuY3Rpb24gcGluZ1N1c3BlbmRlZFJvb3Qocm9vdCwgd2FrZWFibGUsIHBpbmdlZExhbmVzKSB7XG4gIHZhciBwaW5nQ2FjaGUgPSByb290LnBpbmdDYWNoZTtcbiAgbnVsbCAhPT0gcGluZ0NhY2hlICYmIHBpbmdDYWNoZS5kZWxldGUod2FrZWFibGUpO1xuICByb290LnBpbmdlZExhbmVzIHw9IHJvb3Quc3VzcGVuZGVkTGFuZXMgJiBwaW5nZWRMYW5lcztcbiAgcm9vdC53YXJtTGFuZXMgJj0gfnBpbmdlZExhbmVzO1xuICB3b3JrSW5Qcm9ncmVzc1Jvb3QgPT09IHJvb3QgJiZcbiAgICAod29ya0luUHJvZ3Jlc3NSb290UmVuZGVyTGFuZXMgJiBwaW5nZWRMYW5lcykgPT09IHBpbmdlZExhbmVzICYmXG4gICAgKDQgPT09IHdvcmtJblByb2dyZXNzUm9vdEV4aXRTdGF0dXMgfHxcbiAgICAoMyA9PT0gd29ya0luUHJvZ3Jlc3NSb290RXhpdFN0YXR1cyAmJlxuICAgICAgKHdvcmtJblByb2dyZXNzUm9vdFJlbmRlckxhbmVzICYgNjI5MTQ1NjApID09PVxuICAgICAgICB3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lcyAmJlxuICAgICAgMzAwID4gbm93KCkgLSBnbG9iYWxNb3N0UmVjZW50RmFsbGJhY2tUaW1lKVxuICAgICAgPyAwID09PSAoZXhlY3V0aW9uQ29udGV4dCAmIDIpICYmIHByZXBhcmVGcmVzaFN0YWNrKHJvb3QsIDApXG4gICAgICA6ICh3b3JrSW5Qcm9ncmVzc1Jvb3RQaW5nZWRMYW5lcyB8PSBwaW5nZWRMYW5lcyksXG4gICAgd29ya0luUHJvZ3Jlc3NTdXNwZW5kZWRSZXRyeUxhbmVzID09PSB3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lcyAmJlxuICAgICAgKHdvcmtJblByb2dyZXNzU3VzcGVuZGVkUmV0cnlMYW5lcyA9IDApKTtcbiAgZW5zdXJlUm9vdElzU2NoZWR1bGVkKHJvb3QpO1xufVxuZnVuY3Rpb24gcmV0cnlUaW1lZE91dEJvdW5kYXJ5KGJvdW5kYXJ5RmliZXIsIHJldHJ5TGFuZSkge1xuICAwID09PSByZXRyeUxhbmUgJiYgKHJldHJ5TGFuZSA9IGNsYWltTmV4dFJldHJ5TGFuZSgpKTtcbiAgYm91bmRhcnlGaWJlciA9IGVucXVldWVDb25jdXJyZW50UmVuZGVyRm9yTGFuZShib3VuZGFyeUZpYmVyLCByZXRyeUxhbmUpO1xuICBudWxsICE9PSBib3VuZGFyeUZpYmVyICYmXG4gICAgKG1hcmtSb290VXBkYXRlZCQxKGJvdW5kYXJ5RmliZXIsIHJldHJ5TGFuZSksXG4gICAgZW5zdXJlUm9vdElzU2NoZWR1bGVkKGJvdW5kYXJ5RmliZXIpKTtcbn1cbmZ1bmN0aW9uIHJldHJ5RGVoeWRyYXRlZFN1c3BlbnNlQm91bmRhcnkoYm91bmRhcnlGaWJlcikge1xuICB2YXIgc3VzcGVuc2VTdGF0ZSA9IGJvdW5kYXJ5RmliZXIubWVtb2l6ZWRTdGF0ZSxcbiAgICByZXRyeUxhbmUgPSAwO1xuICBudWxsICE9PSBzdXNwZW5zZVN0YXRlICYmIChyZXRyeUxhbmUgPSBzdXNwZW5zZVN0YXRlLnJldHJ5TGFuZSk7XG4gIHJldHJ5VGltZWRPdXRCb3VuZGFyeShib3VuZGFyeUZpYmVyLCByZXRyeUxhbmUpO1xufVxuZnVuY3Rpb24gcmVzb2x2ZVJldHJ5V2FrZWFibGUoYm91bmRhcnlGaWJlciwgd2FrZWFibGUpIHtcbiAgdmFyIHJldHJ5TGFuZSA9IDA7XG4gIHN3aXRjaCAoYm91bmRhcnlGaWJlci50YWcpIHtcbiAgICBjYXNlIDEzOlxuICAgICAgdmFyIHJldHJ5Q2FjaGUgPSBib3VuZGFyeUZpYmVyLnN0YXRlTm9kZTtcbiAgICAgIHZhciBzdXNwZW5zZVN0YXRlID0gYm91bmRhcnlGaWJlci5tZW1vaXplZFN0YXRlO1xuICAgICAgbnVsbCAhPT0gc3VzcGVuc2VTdGF0ZSAmJiAocmV0cnlMYW5lID0gc3VzcGVuc2VTdGF0ZS5yZXRyeUxhbmUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxOTpcbiAgICAgIHJldHJ5Q2FjaGUgPSBib3VuZGFyeUZpYmVyLnN0YXRlTm9kZTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMjI6XG4gICAgICByZXRyeUNhY2hlID0gYm91bmRhcnlGaWJlci5zdGF0ZU5vZGUuX3JldHJ5Q2FjaGU7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgzMTQpKTtcbiAgfVxuICBudWxsICE9PSByZXRyeUNhY2hlICYmIHJldHJ5Q2FjaGUuZGVsZXRlKHdha2VhYmxlKTtcbiAgcmV0cnlUaW1lZE91dEJvdW5kYXJ5KGJvdW5kYXJ5RmliZXIsIHJldHJ5TGFuZSk7XG59XG5mdW5jdGlvbiBzY2hlZHVsZUNhbGxiYWNrJDEocHJpb3JpdHlMZXZlbCwgY2FsbGJhY2spIHtcbiAgcmV0dXJuIHNjaGVkdWxlQ2FsbGJhY2skMyhwcmlvcml0eUxldmVsLCBjYWxsYmFjayk7XG59XG52YXIgZmlyc3RTY2hlZHVsZWRSb290ID0gbnVsbCxcbiAgbGFzdFNjaGVkdWxlZFJvb3QgPSBudWxsLFxuICBkaWRTY2hlZHVsZU1pY3JvdGFzayA9ICExLFxuICBtaWdodEhhdmVQZW5kaW5nU3luY1dvcmsgPSAhMSxcbiAgaXNGbHVzaGluZ1dvcmsgPSAhMSxcbiAgY3VycmVudEV2ZW50VHJhbnNpdGlvbkxhbmUgPSAwO1xuZnVuY3Rpb24gZW5zdXJlUm9vdElzU2NoZWR1bGVkKHJvb3QpIHtcbiAgcm9vdCAhPT0gbGFzdFNjaGVkdWxlZFJvb3QgJiZcbiAgICBudWxsID09PSByb290Lm5leHQgJiZcbiAgICAobnVsbCA9PT0gbGFzdFNjaGVkdWxlZFJvb3RcbiAgICAgID8gKGZpcnN0U2NoZWR1bGVkUm9vdCA9IGxhc3RTY2hlZHVsZWRSb290ID0gcm9vdClcbiAgICAgIDogKGxhc3RTY2hlZHVsZWRSb290ID0gbGFzdFNjaGVkdWxlZFJvb3QubmV4dCA9IHJvb3QpKTtcbiAgbWlnaHRIYXZlUGVuZGluZ1N5bmNXb3JrID0gITA7XG4gIGRpZFNjaGVkdWxlTWljcm90YXNrIHx8XG4gICAgKChkaWRTY2hlZHVsZU1pY3JvdGFzayA9ICEwKSxcbiAgICBzY2hlZHVsZUltbWVkaWF0ZVRhc2socHJvY2Vzc1Jvb3RTY2hlZHVsZUluTWljcm90YXNrKSk7XG59XG5mdW5jdGlvbiBmbHVzaFN5bmNXb3JrQWNyb3NzUm9vdHNfaW1wbChzeW5jVHJhbnNpdGlvbkxhbmVzLCBvbmx5TGVnYWN5KSB7XG4gIGlmICghaXNGbHVzaGluZ1dvcmsgJiYgbWlnaHRIYXZlUGVuZGluZ1N5bmNXb3JrKSB7XG4gICAgaXNGbHVzaGluZ1dvcmsgPSAhMDtcbiAgICBkbyB7XG4gICAgICB2YXIgZGlkUGVyZm9ybVNvbWVXb3JrID0gITE7XG4gICAgICBmb3IgKHZhciByb290JDE3MiA9IGZpcnN0U2NoZWR1bGVkUm9vdDsgbnVsbCAhPT0gcm9vdCQxNzI7ICkge1xuICAgICAgICBpZiAoIW9ubHlMZWdhY3kpXG4gICAgICAgICAgaWYgKDAgIT09IHN5bmNUcmFuc2l0aW9uTGFuZXMpIHtcbiAgICAgICAgICAgIHZhciBwZW5kaW5nTGFuZXMgPSByb290JDE3Mi5wZW5kaW5nTGFuZXM7XG4gICAgICAgICAgICBpZiAoMCA9PT0gcGVuZGluZ0xhbmVzKSB2YXIgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0ID0gMDtcbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICB2YXIgc3VzcGVuZGVkTGFuZXMgPSByb290JDE3Mi5zdXNwZW5kZWRMYW5lcyxcbiAgICAgICAgICAgICAgICBwaW5nZWRMYW5lcyA9IHJvb3QkMTcyLnBpbmdlZExhbmVzO1xuICAgICAgICAgICAgICBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgPVxuICAgICAgICAgICAgICAgICgxIDw8ICgzMSAtIGNsejMyKDQyIHwgc3luY1RyYW5zaXRpb25MYW5lcykgKyAxKSkgLSAxO1xuICAgICAgICAgICAgICBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgJj1cbiAgICAgICAgICAgICAgICBwZW5kaW5nTGFuZXMgJiB+KHN1c3BlbmRlZExhbmVzICYgfnBpbmdlZExhbmVzKTtcbiAgICAgICAgICAgICAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0ID1cbiAgICAgICAgICAgICAgICBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgJiAyMDEzMjY2NzdcbiAgICAgICAgICAgICAgICAgID8gKEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCAmIDIwMTMyNjY3NykgfCAxXG4gICAgICAgICAgICAgICAgICA6IEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdFxuICAgICAgICAgICAgICAgICAgICA/IEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCB8IDJcbiAgICAgICAgICAgICAgICAgICAgOiAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgMCAhPT0gSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0ICYmXG4gICAgICAgICAgICAgICgoZGlkUGVyZm9ybVNvbWVXb3JrID0gITApLFxuICAgICAgICAgICAgICBwZXJmb3JtU3luY1dvcmtPblJvb3Qocm9vdCQxNzIsIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCkpO1xuICAgICAgICAgIH0gZWxzZVxuICAgICAgICAgICAgKEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCA9IHdvcmtJblByb2dyZXNzUm9vdFJlbmRlckxhbmVzKSxcbiAgICAgICAgICAgICAgKEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCA9IGdldE5leHRMYW5lcyhcbiAgICAgICAgICAgICAgICByb290JDE3MixcbiAgICAgICAgICAgICAgICByb290JDE3MiA9PT0gd29ya0luUHJvZ3Jlc3NSb290ID8gSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0IDogMFxuICAgICAgICAgICAgICApKSxcbiAgICAgICAgICAgICAgMCA9PT0gKEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCAmIDMpIHx8XG4gICAgICAgICAgICAgICAgY2hlY2tJZlJvb3RJc1ByZXJlbmRlcmluZyhyb290JDE3MiwgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0KSB8fFxuICAgICAgICAgICAgICAgICgoZGlkUGVyZm9ybVNvbWVXb3JrID0gITApLFxuICAgICAgICAgICAgICAgIHBlcmZvcm1TeW5jV29ya09uUm9vdChyb290JDE3MiwgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0KSk7XG4gICAgICAgIHJvb3QkMTcyID0gcm9vdCQxNzIubmV4dDtcbiAgICAgIH1cbiAgICB9IHdoaWxlIChkaWRQZXJmb3JtU29tZVdvcmspO1xuICAgIGlzRmx1c2hpbmdXb3JrID0gITE7XG4gIH1cbn1cbmZ1bmN0aW9uIHByb2Nlc3NSb290U2NoZWR1bGVJbk1pY3JvdGFzaygpIHtcbiAgbWlnaHRIYXZlUGVuZGluZ1N5bmNXb3JrID0gZGlkU2NoZWR1bGVNaWNyb3Rhc2sgPSAhMTtcbiAgdmFyIHN5bmNUcmFuc2l0aW9uTGFuZXMgPSAwO1xuICAwICE9PSBjdXJyZW50RXZlbnRUcmFuc2l0aW9uTGFuZSAmJlxuICAgIChzaG91bGRBdHRlbXB0RWFnZXJUcmFuc2l0aW9uKCkgJiZcbiAgICAgIChzeW5jVHJhbnNpdGlvbkxhbmVzID0gY3VycmVudEV2ZW50VHJhbnNpdGlvbkxhbmUpLFxuICAgIChjdXJyZW50RXZlbnRUcmFuc2l0aW9uTGFuZSA9IDApKTtcbiAgZm9yIChcbiAgICB2YXIgY3VycmVudFRpbWUgPSBub3coKSwgcHJldiA9IG51bGwsIHJvb3QgPSBmaXJzdFNjaGVkdWxlZFJvb3Q7XG4gICAgbnVsbCAhPT0gcm9vdDtcblxuICApIHtcbiAgICB2YXIgbmV4dCA9IHJvb3QubmV4dCxcbiAgICAgIG5leHRMYW5lcyA9IHNjaGVkdWxlVGFza0ZvclJvb3REdXJpbmdNaWNyb3Rhc2socm9vdCwgY3VycmVudFRpbWUpO1xuICAgIGlmICgwID09PSBuZXh0TGFuZXMpXG4gICAgICAocm9vdC5uZXh0ID0gbnVsbCksXG4gICAgICAgIG51bGwgPT09IHByZXYgPyAoZmlyc3RTY2hlZHVsZWRSb290ID0gbmV4dCkgOiAocHJldi5uZXh0ID0gbmV4dCksXG4gICAgICAgIG51bGwgPT09IG5leHQgJiYgKGxhc3RTY2hlZHVsZWRSb290ID0gcHJldik7XG4gICAgZWxzZSBpZiAoXG4gICAgICAoKHByZXYgPSByb290KSwgMCAhPT0gc3luY1RyYW5zaXRpb25MYW5lcyB8fCAwICE9PSAobmV4dExhbmVzICYgMykpXG4gICAgKVxuICAgICAgbWlnaHRIYXZlUGVuZGluZ1N5bmNXb3JrID0gITA7XG4gICAgcm9vdCA9IG5leHQ7XG4gIH1cbiAgZmx1c2hTeW5jV29ya0Fjcm9zc1Jvb3RzX2ltcGwoc3luY1RyYW5zaXRpb25MYW5lcywgITEpO1xufVxuZnVuY3Rpb24gc2NoZWR1bGVUYXNrRm9yUm9vdER1cmluZ01pY3JvdGFzayhyb290LCBjdXJyZW50VGltZSkge1xuICBmb3IgKFxuICAgIHZhciBzdXNwZW5kZWRMYW5lcyA9IHJvb3Quc3VzcGVuZGVkTGFuZXMsXG4gICAgICBwaW5nZWRMYW5lcyA9IHJvb3QucGluZ2VkTGFuZXMsXG4gICAgICBleHBpcmF0aW9uVGltZXMgPSByb290LmV4cGlyYXRpb25UaW1lcyxcbiAgICAgIGxhbmVzID0gcm9vdC5wZW5kaW5nTGFuZXMgJiAtNjI5MTQ1NjE7XG4gICAgMCA8IGxhbmVzO1xuXG4gICkge1xuICAgIHZhciBpbmRleCQ1ID0gMzEgLSBjbHozMihsYW5lcyksXG4gICAgICBsYW5lID0gMSA8PCBpbmRleCQ1LFxuICAgICAgZXhwaXJhdGlvblRpbWUgPSBleHBpcmF0aW9uVGltZXNbaW5kZXgkNV07XG4gICAgaWYgKC0xID09PSBleHBpcmF0aW9uVGltZSkge1xuICAgICAgaWYgKDAgPT09IChsYW5lICYgc3VzcGVuZGVkTGFuZXMpIHx8IDAgIT09IChsYW5lICYgcGluZ2VkTGFuZXMpKVxuICAgICAgICBleHBpcmF0aW9uVGltZXNbaW5kZXgkNV0gPSBjb21wdXRlRXhwaXJhdGlvblRpbWUobGFuZSwgY3VycmVudFRpbWUpO1xuICAgIH0gZWxzZSBleHBpcmF0aW9uVGltZSA8PSBjdXJyZW50VGltZSAmJiAocm9vdC5leHBpcmVkTGFuZXMgfD0gbGFuZSk7XG4gICAgbGFuZXMgJj0gfmxhbmU7XG4gIH1cbiAgY3VycmVudFRpbWUgPSB3b3JrSW5Qcm9ncmVzc1Jvb3Q7XG4gIHN1c3BlbmRlZExhbmVzID0gd29ya0luUHJvZ3Jlc3NSb290UmVuZGVyTGFuZXM7XG4gIHN1c3BlbmRlZExhbmVzID0gZ2V0TmV4dExhbmVzKFxuICAgIHJvb3QsXG4gICAgcm9vdCA9PT0gY3VycmVudFRpbWUgPyBzdXNwZW5kZWRMYW5lcyA6IDBcbiAgKTtcbiAgcGluZ2VkTGFuZXMgPSByb290LmNhbGxiYWNrTm9kZTtcbiAgaWYgKFxuICAgIDAgPT09IHN1c3BlbmRlZExhbmVzIHx8XG4gICAgKHJvb3QgPT09IGN1cnJlbnRUaW1lICYmIDIgPT09IHdvcmtJblByb2dyZXNzU3VzcGVuZGVkUmVhc29uKSB8fFxuICAgIG51bGwgIT09IHJvb3QuY2FuY2VsUGVuZGluZ0NvbW1pdFxuICApXG4gICAgcmV0dXJuIChcbiAgICAgIG51bGwgIT09IHBpbmdlZExhbmVzICYmXG4gICAgICAgIG51bGwgIT09IHBpbmdlZExhbmVzICYmXG4gICAgICAgIGNhbmNlbENhbGxiYWNrJDEocGluZ2VkTGFuZXMpLFxuICAgICAgKHJvb3QuY2FsbGJhY2tOb2RlID0gbnVsbCksXG4gICAgICAocm9vdC5jYWxsYmFja1ByaW9yaXR5ID0gMClcbiAgICApO1xuICBpZiAoXG4gICAgMCA9PT0gKHN1c3BlbmRlZExhbmVzICYgMykgfHxcbiAgICBjaGVja0lmUm9vdElzUHJlcmVuZGVyaW5nKHJvb3QsIHN1c3BlbmRlZExhbmVzKVxuICApIHtcbiAgICBjdXJyZW50VGltZSA9IHN1c3BlbmRlZExhbmVzICYgLXN1c3BlbmRlZExhbmVzO1xuICAgIGlmIChjdXJyZW50VGltZSA9PT0gcm9vdC5jYWxsYmFja1ByaW9yaXR5KSByZXR1cm4gY3VycmVudFRpbWU7XG4gICAgbnVsbCAhPT0gcGluZ2VkTGFuZXMgJiYgY2FuY2VsQ2FsbGJhY2skMShwaW5nZWRMYW5lcyk7XG4gICAgc3dpdGNoIChsYW5lc1RvRXZlbnRQcmlvcml0eShzdXNwZW5kZWRMYW5lcykpIHtcbiAgICAgIGNhc2UgMjpcbiAgICAgIGNhc2UgODpcbiAgICAgICAgc3VzcGVuZGVkTGFuZXMgPSBVc2VyQmxvY2tpbmdQcmlvcml0eTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDMyOlxuICAgICAgICBzdXNwZW5kZWRMYW5lcyA9IE5vcm1hbFByaW9yaXR5JDE7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAyNjg0MzU0NTY6XG4gICAgICAgIHN1c3BlbmRlZExhbmVzID0gSWRsZVByaW9yaXR5O1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHN1c3BlbmRlZExhbmVzID0gTm9ybWFsUHJpb3JpdHkkMTtcbiAgICB9XG4gICAgcGluZ2VkTGFuZXMgPSBwZXJmb3JtV29ya09uUm9vdFZpYVNjaGVkdWxlclRhc2suYmluZChudWxsLCByb290KTtcbiAgICBzdXNwZW5kZWRMYW5lcyA9IHNjaGVkdWxlQ2FsbGJhY2skMyhzdXNwZW5kZWRMYW5lcywgcGluZ2VkTGFuZXMpO1xuICAgIHJvb3QuY2FsbGJhY2tQcmlvcml0eSA9IGN1cnJlbnRUaW1lO1xuICAgIHJvb3QuY2FsbGJhY2tOb2RlID0gc3VzcGVuZGVkTGFuZXM7XG4gICAgcmV0dXJuIGN1cnJlbnRUaW1lO1xuICB9XG4gIG51bGwgIT09IHBpbmdlZExhbmVzICYmIG51bGwgIT09IHBpbmdlZExhbmVzICYmIGNhbmNlbENhbGxiYWNrJDEocGluZ2VkTGFuZXMpO1xuICByb290LmNhbGxiYWNrUHJpb3JpdHkgPSAyO1xuICByb290LmNhbGxiYWNrTm9kZSA9IG51bGw7XG4gIHJldHVybiAyO1xufVxuZnVuY3Rpb24gcGVyZm9ybVdvcmtPblJvb3RWaWFTY2hlZHVsZXJUYXNrKHJvb3QsIGRpZFRpbWVvdXQpIHtcbiAgdmFyIG9yaWdpbmFsQ2FsbGJhY2tOb2RlID0gcm9vdC5jYWxsYmFja05vZGU7XG4gIGlmIChmbHVzaFBhc3NpdmVFZmZlY3RzKCkgJiYgcm9vdC5jYWxsYmFja05vZGUgIT09IG9yaWdpbmFsQ2FsbGJhY2tOb2RlKVxuICAgIHJldHVybiBudWxsO1xuICB2YXIgd29ya0luUHJvZ3Jlc3NSb290UmVuZGVyTGFuZXMkanNjb21wJDAgPSB3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lcztcbiAgd29ya0luUHJvZ3Jlc3NSb290UmVuZGVyTGFuZXMkanNjb21wJDAgPSBnZXROZXh0TGFuZXMoXG4gICAgcm9vdCxcbiAgICByb290ID09PSB3b3JrSW5Qcm9ncmVzc1Jvb3QgPyB3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lcyRqc2NvbXAkMCA6IDBcbiAgKTtcbiAgaWYgKDAgPT09IHdvcmtJblByb2dyZXNzUm9vdFJlbmRlckxhbmVzJGpzY29tcCQwKSByZXR1cm4gbnVsbDtcbiAgcGVyZm9ybVdvcmtPblJvb3Qocm9vdCwgd29ya0luUHJvZ3Jlc3NSb290UmVuZGVyTGFuZXMkanNjb21wJDAsIGRpZFRpbWVvdXQpO1xuICBzY2hlZHVsZVRhc2tGb3JSb290RHVyaW5nTWljcm90YXNrKHJvb3QsIG5vdygpKTtcbiAgcmV0dXJuIG51bGwgIT0gcm9vdC5jYWxsYmFja05vZGUgJiYgcm9vdC5jYWxsYmFja05vZGUgPT09IG9yaWdpbmFsQ2FsbGJhY2tOb2RlXG4gICAgPyBwZXJmb3JtV29ya09uUm9vdFZpYVNjaGVkdWxlclRhc2suYmluZChudWxsLCByb290KVxuICAgIDogbnVsbDtcbn1cbmZ1bmN0aW9uIHBlcmZvcm1TeW5jV29ya09uUm9vdChyb290LCBsYW5lcykge1xuICBpZiAoZmx1c2hQYXNzaXZlRWZmZWN0cygpKSByZXR1cm4gbnVsbDtcbiAgcGVyZm9ybVdvcmtPblJvb3Qocm9vdCwgbGFuZXMsICEwKTtcbn1cbmZ1bmN0aW9uIHNjaGVkdWxlSW1tZWRpYXRlVGFzayhjYikge1xuICBzY2hlZHVsZU1pY3JvdGFzayhmdW5jdGlvbiAoKSB7XG4gICAgMCAhPT0gKGV4ZWN1dGlvbkNvbnRleHQgJiA2KVxuICAgICAgPyBzY2hlZHVsZUNhbGxiYWNrJDMoSW1tZWRpYXRlUHJpb3JpdHksIGNiKVxuICAgICAgOiBjYigpO1xuICB9KTtcbn1cbmZ1bmN0aW9uIHJlcXVlc3RUcmFuc2l0aW9uTGFuZSgpIHtcbiAgMCA9PT0gY3VycmVudEV2ZW50VHJhbnNpdGlvbkxhbmUgJiZcbiAgICAoY3VycmVudEV2ZW50VHJhbnNpdGlvbkxhbmUgPSBjbGFpbU5leHRUcmFuc2l0aW9uTGFuZSgpKTtcbiAgcmV0dXJuIGN1cnJlbnRFdmVudFRyYW5zaXRpb25MYW5lO1xufVxuZnVuY3Rpb24gY29lcmNlRm9ybUFjdGlvblByb3AoYWN0aW9uUHJvcCkge1xuICByZXR1cm4gbnVsbCA9PSBhY3Rpb25Qcm9wIHx8XG4gICAgXCJzeW1ib2xcIiA9PT0gdHlwZW9mIGFjdGlvblByb3AgfHxcbiAgICBcImJvb2xlYW5cIiA9PT0gdHlwZW9mIGFjdGlvblByb3BcbiAgICA/IG51bGxcbiAgICA6IFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGFjdGlvblByb3BcbiAgICAgID8gYWN0aW9uUHJvcFxuICAgICAgOiBzYW5pdGl6ZVVSTChcIlwiICsgYWN0aW9uUHJvcCk7XG59XG5mdW5jdGlvbiBjcmVhdGVGb3JtRGF0YVdpdGhTdWJtaXR0ZXIoZm9ybSwgc3VibWl0dGVyKSB7XG4gIHZhciB0ZW1wID0gc3VibWl0dGVyLm93bmVyRG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuICB0ZW1wLm5hbWUgPSBzdWJtaXR0ZXIubmFtZTtcbiAgdGVtcC52YWx1ZSA9IHN1Ym1pdHRlci52YWx1ZTtcbiAgZm9ybS5pZCAmJiB0ZW1wLnNldEF0dHJpYnV0ZShcImZvcm1cIiwgZm9ybS5pZCk7XG4gIHN1Ym1pdHRlci5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0ZW1wLCBzdWJtaXR0ZXIpO1xuICBmb3JtID0gbmV3IEZvcm1EYXRhKGZvcm0pO1xuICB0ZW1wLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGVtcCk7XG4gIHJldHVybiBmb3JtO1xufVxuZnVuY3Rpb24gZXh0cmFjdEV2ZW50cyQxKFxuICBkaXNwYXRjaFF1ZXVlLFxuICBkb21FdmVudE5hbWUsXG4gIG1heWJlVGFyZ2V0SW5zdCxcbiAgbmF0aXZlRXZlbnQsXG4gIG5hdGl2ZUV2ZW50VGFyZ2V0XG4pIHtcbiAgaWYgKFxuICAgIFwic3VibWl0XCIgPT09IGRvbUV2ZW50TmFtZSAmJlxuICAgIG1heWJlVGFyZ2V0SW5zdCAmJlxuICAgIG1heWJlVGFyZ2V0SW5zdC5zdGF0ZU5vZGUgPT09IG5hdGl2ZUV2ZW50VGFyZ2V0XG4gICkge1xuICAgIHZhciBhY3Rpb24gPSBjb2VyY2VGb3JtQWN0aW9uUHJvcChcbiAgICAgICAgKG5hdGl2ZUV2ZW50VGFyZ2V0W2ludGVybmFsUHJvcHNLZXldIHx8IG51bGwpLmFjdGlvblxuICAgICAgKSxcbiAgICAgIHN1Ym1pdHRlciA9IG5hdGl2ZUV2ZW50LnN1Ym1pdHRlcjtcbiAgICBzdWJtaXR0ZXIgJiZcbiAgICAgICgoZG9tRXZlbnROYW1lID0gKGRvbUV2ZW50TmFtZSA9IHN1Ym1pdHRlcltpbnRlcm5hbFByb3BzS2V5XSB8fCBudWxsKVxuICAgICAgICA/IGNvZXJjZUZvcm1BY3Rpb25Qcm9wKGRvbUV2ZW50TmFtZS5mb3JtQWN0aW9uKVxuICAgICAgICA6IHN1Ym1pdHRlci5nZXRBdHRyaWJ1dGUoXCJmb3JtQWN0aW9uXCIpKSxcbiAgICAgIG51bGwgIT09IGRvbUV2ZW50TmFtZSAmJiAoKGFjdGlvbiA9IGRvbUV2ZW50TmFtZSksIChzdWJtaXR0ZXIgPSBudWxsKSkpO1xuICAgIHZhciBldmVudCA9IG5ldyBTeW50aGV0aWNFdmVudChcbiAgICAgIFwiYWN0aW9uXCIsXG4gICAgICBcImFjdGlvblwiLFxuICAgICAgbnVsbCxcbiAgICAgIG5hdGl2ZUV2ZW50LFxuICAgICAgbmF0aXZlRXZlbnRUYXJnZXRcbiAgICApO1xuICAgIGRpc3BhdGNoUXVldWUucHVzaCh7XG4gICAgICBldmVudDogZXZlbnQsXG4gICAgICBsaXN0ZW5lcnM6IFtcbiAgICAgICAge1xuICAgICAgICAgIGluc3RhbmNlOiBudWxsLFxuICAgICAgICAgIGxpc3RlbmVyOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAobmF0aXZlRXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgICAgICAgICBpZiAoMCAhPT0gY3VycmVudEV2ZW50VHJhbnNpdGlvbkxhbmUpIHtcbiAgICAgICAgICAgICAgICB2YXIgZm9ybURhdGEgPSBzdWJtaXR0ZXJcbiAgICAgICAgICAgICAgICAgID8gY3JlYXRlRm9ybURhdGFXaXRoU3VibWl0dGVyKG5hdGl2ZUV2ZW50VGFyZ2V0LCBzdWJtaXR0ZXIpXG4gICAgICAgICAgICAgICAgICA6IG5ldyBGb3JtRGF0YShuYXRpdmVFdmVudFRhcmdldCk7XG4gICAgICAgICAgICAgICAgc3RhcnRIb3N0VHJhbnNpdGlvbihcbiAgICAgICAgICAgICAgICAgIG1heWJlVGFyZ2V0SW5zdCxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgcGVuZGluZzogITAsXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IGZvcm1EYXRhLFxuICAgICAgICAgICAgICAgICAgICBtZXRob2Q6IG5hdGl2ZUV2ZW50VGFyZ2V0Lm1ldGhvZCxcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiBhY3Rpb25cbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgICAgZm9ybURhdGFcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgYWN0aW9uICYmXG4gICAgICAgICAgICAgICAgKGV2ZW50LnByZXZlbnREZWZhdWx0KCksXG4gICAgICAgICAgICAgICAgKGZvcm1EYXRhID0gc3VibWl0dGVyXG4gICAgICAgICAgICAgICAgICA/IGNyZWF0ZUZvcm1EYXRhV2l0aFN1Ym1pdHRlcihuYXRpdmVFdmVudFRhcmdldCwgc3VibWl0dGVyKVxuICAgICAgICAgICAgICAgICAgOiBuZXcgRm9ybURhdGEobmF0aXZlRXZlbnRUYXJnZXQpKSxcbiAgICAgICAgICAgICAgICBzdGFydEhvc3RUcmFuc2l0aW9uKFxuICAgICAgICAgICAgICAgICAgbWF5YmVUYXJnZXRJbnN0LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBwZW5kaW5nOiAhMCxcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogZm9ybURhdGEsXG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZDogbmF0aXZlRXZlbnRUYXJnZXQubWV0aG9kLFxuICAgICAgICAgICAgICAgICAgICBhY3Rpb246IGFjdGlvblxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIGFjdGlvbixcbiAgICAgICAgICAgICAgICAgIGZvcm1EYXRhXG4gICAgICAgICAgICAgICAgKSk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBjdXJyZW50VGFyZ2V0OiBuYXRpdmVFdmVudFRhcmdldFxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSk7XG4gIH1cbn1cbmZvciAoXG4gIHZhciBpJGpzY29tcCRpbmxpbmVfMTQzOSA9IDA7XG4gIGkkanNjb21wJGlubGluZV8xNDM5IDwgc2ltcGxlRXZlbnRQbHVnaW5FdmVudHMubGVuZ3RoO1xuICBpJGpzY29tcCRpbmxpbmVfMTQzOSsrXG4pIHtcbiAgdmFyIGV2ZW50TmFtZSRqc2NvbXAkaW5saW5lXzE0NDAgPVxuICAgICAgc2ltcGxlRXZlbnRQbHVnaW5FdmVudHNbaSRqc2NvbXAkaW5saW5lXzE0MzldLFxuICAgIGRvbUV2ZW50TmFtZSRqc2NvbXAkaW5saW5lXzE0NDEgPVxuICAgICAgZXZlbnROYW1lJGpzY29tcCRpbmxpbmVfMTQ0MC50b0xvd2VyQ2FzZSgpLFxuICAgIGNhcGl0YWxpemVkRXZlbnQkanNjb21wJGlubGluZV8xNDQyID1cbiAgICAgIGV2ZW50TmFtZSRqc2NvbXAkaW5saW5lXzE0NDBbMF0udG9VcHBlckNhc2UoKSArXG4gICAgICBldmVudE5hbWUkanNjb21wJGlubGluZV8xNDQwLnNsaWNlKDEpO1xuICByZWdpc3RlclNpbXBsZUV2ZW50KFxuICAgIGRvbUV2ZW50TmFtZSRqc2NvbXAkaW5saW5lXzE0NDEsXG4gICAgXCJvblwiICsgY2FwaXRhbGl6ZWRFdmVudCRqc2NvbXAkaW5saW5lXzE0NDJcbiAgKTtcbn1cbnJlZ2lzdGVyU2ltcGxlRXZlbnQoQU5JTUFUSU9OX0VORCwgXCJvbkFuaW1hdGlvbkVuZFwiKTtcbnJlZ2lzdGVyU2ltcGxlRXZlbnQoQU5JTUFUSU9OX0lURVJBVElPTiwgXCJvbkFuaW1hdGlvbkl0ZXJhdGlvblwiKTtcbnJlZ2lzdGVyU2ltcGxlRXZlbnQoQU5JTUFUSU9OX1NUQVJULCBcIm9uQW5pbWF0aW9uU3RhcnRcIik7XG5yZWdpc3RlclNpbXBsZUV2ZW50KFwiZGJsY2xpY2tcIiwgXCJvbkRvdWJsZUNsaWNrXCIpO1xucmVnaXN0ZXJTaW1wbGVFdmVudChcImZvY3VzaW5cIiwgXCJvbkZvY3VzXCIpO1xucmVnaXN0ZXJTaW1wbGVFdmVudChcImZvY3Vzb3V0XCIsIFwib25CbHVyXCIpO1xucmVnaXN0ZXJTaW1wbGVFdmVudChUUkFOU0lUSU9OX1JVTiwgXCJvblRyYW5zaXRpb25SdW5cIik7XG5yZWdpc3RlclNpbXBsZUV2ZW50KFRSQU5TSVRJT05fU1RBUlQsIFwib25UcmFuc2l0aW9uU3RhcnRcIik7XG5yZWdpc3RlclNpbXBsZUV2ZW50KFRSQU5TSVRJT05fQ0FOQ0VMLCBcIm9uVHJhbnNpdGlvbkNhbmNlbFwiKTtcbnJlZ2lzdGVyU2ltcGxlRXZlbnQoVFJBTlNJVElPTl9FTkQsIFwib25UcmFuc2l0aW9uRW5kXCIpO1xucmVnaXN0ZXJEaXJlY3RFdmVudChcIm9uTW91c2VFbnRlclwiLCBbXCJtb3VzZW91dFwiLCBcIm1vdXNlb3ZlclwiXSk7XG5yZWdpc3RlckRpcmVjdEV2ZW50KFwib25Nb3VzZUxlYXZlXCIsIFtcIm1vdXNlb3V0XCIsIFwibW91c2VvdmVyXCJdKTtcbnJlZ2lzdGVyRGlyZWN0RXZlbnQoXCJvblBvaW50ZXJFbnRlclwiLCBbXCJwb2ludGVyb3V0XCIsIFwicG9pbnRlcm92ZXJcIl0pO1xucmVnaXN0ZXJEaXJlY3RFdmVudChcIm9uUG9pbnRlckxlYXZlXCIsIFtcInBvaW50ZXJvdXRcIiwgXCJwb2ludGVyb3ZlclwiXSk7XG5yZWdpc3RlclR3b1BoYXNlRXZlbnQoXG4gIFwib25DaGFuZ2VcIixcbiAgXCJjaGFuZ2UgY2xpY2sgZm9jdXNpbiBmb2N1c291dCBpbnB1dCBrZXlkb3duIGtleXVwIHNlbGVjdGlvbmNoYW5nZVwiLnNwbGl0KFwiIFwiKVxuKTtcbnJlZ2lzdGVyVHdvUGhhc2VFdmVudChcbiAgXCJvblNlbGVjdFwiLFxuICBcImZvY3Vzb3V0IGNvbnRleHRtZW51IGRyYWdlbmQgZm9jdXNpbiBrZXlkb3duIGtleXVwIG1vdXNlZG93biBtb3VzZXVwIHNlbGVjdGlvbmNoYW5nZVwiLnNwbGl0KFxuICAgIFwiIFwiXG4gIClcbik7XG5yZWdpc3RlclR3b1BoYXNlRXZlbnQoXCJvbkJlZm9yZUlucHV0XCIsIFtcbiAgXCJjb21wb3NpdGlvbmVuZFwiLFxuICBcImtleXByZXNzXCIsXG4gIFwidGV4dElucHV0XCIsXG4gIFwicGFzdGVcIlxuXSk7XG5yZWdpc3RlclR3b1BoYXNlRXZlbnQoXG4gIFwib25Db21wb3NpdGlvbkVuZFwiLFxuICBcImNvbXBvc2l0aW9uZW5kIGZvY3Vzb3V0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpXG4pO1xucmVnaXN0ZXJUd29QaGFzZUV2ZW50KFxuICBcIm9uQ29tcG9zaXRpb25TdGFydFwiLFxuICBcImNvbXBvc2l0aW9uc3RhcnQgZm9jdXNvdXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIilcbik7XG5yZWdpc3RlclR3b1BoYXNlRXZlbnQoXG4gIFwib25Db21wb3NpdGlvblVwZGF0ZVwiLFxuICBcImNvbXBvc2l0aW9udXBkYXRlIGZvY3Vzb3V0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpXG4pO1xudmFyIG1lZGlhRXZlbnRUeXBlcyA9XG4gICAgXCJhYm9ydCBjYW5wbGF5IGNhbnBsYXl0aHJvdWdoIGR1cmF0aW9uY2hhbmdlIGVtcHRpZWQgZW5jcnlwdGVkIGVuZGVkIGVycm9yIGxvYWRlZGRhdGEgbG9hZGVkbWV0YWRhdGEgbG9hZHN0YXJ0IHBhdXNlIHBsYXkgcGxheWluZyBwcm9ncmVzcyByYXRlY2hhbmdlIHJlc2l6ZSBzZWVrZWQgc2Vla2luZyBzdGFsbGVkIHN1c3BlbmQgdGltZXVwZGF0ZSB2b2x1bWVjaGFuZ2Ugd2FpdGluZ1wiLnNwbGl0KFxuICAgICAgXCIgXCJcbiAgICApLFxuICBub25EZWxlZ2F0ZWRFdmVudHMgPSBuZXcgU2V0KFxuICAgIFwiYmVmb3JldG9nZ2xlIGNhbmNlbCBjbG9zZSBpbnZhbGlkIGxvYWQgc2Nyb2xsIHNjcm9sbGVuZCB0b2dnbGVcIlxuICAgICAgLnNwbGl0KFwiIFwiKVxuICAgICAgLmNvbmNhdChtZWRpYUV2ZW50VHlwZXMpXG4gICk7XG5mdW5jdGlvbiBwcm9jZXNzRGlzcGF0Y2hRdWV1ZShkaXNwYXRjaFF1ZXVlLCBldmVudFN5c3RlbUZsYWdzKSB7XG4gIGV2ZW50U3lzdGVtRmxhZ3MgPSAwICE9PSAoZXZlbnRTeXN0ZW1GbGFncyAmIDQpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGRpc3BhdGNoUXVldWUubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgX2Rpc3BhdGNoUXVldWUkaSA9IGRpc3BhdGNoUXVldWVbaV0sXG4gICAgICBldmVudCA9IF9kaXNwYXRjaFF1ZXVlJGkuZXZlbnQ7XG4gICAgX2Rpc3BhdGNoUXVldWUkaSA9IF9kaXNwYXRjaFF1ZXVlJGkubGlzdGVuZXJzO1xuICAgIGE6IHtcbiAgICAgIHZhciBwcmV2aW91c0luc3RhbmNlID0gdm9pZCAwO1xuICAgICAgaWYgKGV2ZW50U3lzdGVtRmxhZ3MpXG4gICAgICAgIGZvciAoXG4gICAgICAgICAgdmFyIGkkanNjb21wJDAgPSBfZGlzcGF0Y2hRdWV1ZSRpLmxlbmd0aCAtIDE7XG4gICAgICAgICAgMCA8PSBpJGpzY29tcCQwO1xuICAgICAgICAgIGkkanNjb21wJDAtLVxuICAgICAgICApIHtcbiAgICAgICAgICB2YXIgX2Rpc3BhdGNoTGlzdGVuZXJzJGkgPSBfZGlzcGF0Y2hRdWV1ZSRpW2kkanNjb21wJDBdLFxuICAgICAgICAgICAgaW5zdGFuY2UgPSBfZGlzcGF0Y2hMaXN0ZW5lcnMkaS5pbnN0YW5jZSxcbiAgICAgICAgICAgIGN1cnJlbnRUYXJnZXQgPSBfZGlzcGF0Y2hMaXN0ZW5lcnMkaS5jdXJyZW50VGFyZ2V0O1xuICAgICAgICAgIF9kaXNwYXRjaExpc3RlbmVycyRpID0gX2Rpc3BhdGNoTGlzdGVuZXJzJGkubGlzdGVuZXI7XG4gICAgICAgICAgaWYgKGluc3RhbmNlICE9PSBwcmV2aW91c0luc3RhbmNlICYmIGV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkpXG4gICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgIHByZXZpb3VzSW5zdGFuY2UgPSBfZGlzcGF0Y2hMaXN0ZW5lcnMkaTtcbiAgICAgICAgICBldmVudC5jdXJyZW50VGFyZ2V0ID0gY3VycmVudFRhcmdldDtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgcHJldmlvdXNJbnN0YW5jZShldmVudCk7XG4gICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIHJlcG9ydEdsb2JhbEVycm9yKGVycm9yKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZXZlbnQuY3VycmVudFRhcmdldCA9IG51bGw7XG4gICAgICAgICAgcHJldmlvdXNJbnN0YW5jZSA9IGluc3RhbmNlO1xuICAgICAgICB9XG4gICAgICBlbHNlXG4gICAgICAgIGZvciAoXG4gICAgICAgICAgaSRqc2NvbXAkMCA9IDA7XG4gICAgICAgICAgaSRqc2NvbXAkMCA8IF9kaXNwYXRjaFF1ZXVlJGkubGVuZ3RoO1xuICAgICAgICAgIGkkanNjb21wJDArK1xuICAgICAgICApIHtcbiAgICAgICAgICBfZGlzcGF0Y2hMaXN0ZW5lcnMkaSA9IF9kaXNwYXRjaFF1ZXVlJGlbaSRqc2NvbXAkMF07XG4gICAgICAgICAgaW5zdGFuY2UgPSBfZGlzcGF0Y2hMaXN0ZW5lcnMkaS5pbnN0YW5jZTtcbiAgICAgICAgICBjdXJyZW50VGFyZ2V0ID0gX2Rpc3BhdGNoTGlzdGVuZXJzJGkuY3VycmVudFRhcmdldDtcbiAgICAgICAgICBfZGlzcGF0Y2hMaXN0ZW5lcnMkaSA9IF9kaXNwYXRjaExpc3RlbmVycyRpLmxpc3RlbmVyO1xuICAgICAgICAgIGlmIChpbnN0YW5jZSAhPT0gcHJldmlvdXNJbnN0YW5jZSAmJiBldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpKVxuICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICBwcmV2aW91c0luc3RhbmNlID0gX2Rpc3BhdGNoTGlzdGVuZXJzJGk7XG4gICAgICAgICAgZXZlbnQuY3VycmVudFRhcmdldCA9IGN1cnJlbnRUYXJnZXQ7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHByZXZpb3VzSW5zdGFuY2UoZXZlbnQpO1xuICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICByZXBvcnRHbG9iYWxFcnJvcihlcnJvcik7XG4gICAgICAgICAgfVxuICAgICAgICAgIGV2ZW50LmN1cnJlbnRUYXJnZXQgPSBudWxsO1xuICAgICAgICAgIHByZXZpb3VzSW5zdGFuY2UgPSBpbnN0YW5jZTtcbiAgICAgICAgfVxuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gbGlzdGVuVG9Ob25EZWxlZ2F0ZWRFdmVudChkb21FdmVudE5hbWUsIHRhcmdldEVsZW1lbnQpIHtcbiAgdmFyIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCA9IHRhcmdldEVsZW1lbnRbaW50ZXJuYWxFdmVudEhhbmRsZXJzS2V5XTtcbiAgdm9pZCAwID09PSBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgJiZcbiAgICAoSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0ID0gdGFyZ2V0RWxlbWVudFtpbnRlcm5hbEV2ZW50SGFuZGxlcnNLZXldID1cbiAgICAgIG5ldyBTZXQoKSk7XG4gIHZhciBsaXN0ZW5lclNldEtleSA9IGRvbUV2ZW50TmFtZSArIFwiX19idWJibGVcIjtcbiAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0LmhhcyhsaXN0ZW5lclNldEtleSkgfHxcbiAgICAoYWRkVHJhcHBlZEV2ZW50TGlzdGVuZXIodGFyZ2V0RWxlbWVudCwgZG9tRXZlbnROYW1lLCAyLCAhMSksXG4gICAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0LmFkZChsaXN0ZW5lclNldEtleSkpO1xufVxuZnVuY3Rpb24gbGlzdGVuVG9OYXRpdmVFdmVudChkb21FdmVudE5hbWUsIGlzQ2FwdHVyZVBoYXNlTGlzdGVuZXIsIHRhcmdldCkge1xuICB2YXIgZXZlbnRTeXN0ZW1GbGFncyA9IDA7XG4gIGlzQ2FwdHVyZVBoYXNlTGlzdGVuZXIgJiYgKGV2ZW50U3lzdGVtRmxhZ3MgfD0gNCk7XG4gIGFkZFRyYXBwZWRFdmVudExpc3RlbmVyKFxuICAgIHRhcmdldCxcbiAgICBkb21FdmVudE5hbWUsXG4gICAgZXZlbnRTeXN0ZW1GbGFncyxcbiAgICBpc0NhcHR1cmVQaGFzZUxpc3RlbmVyXG4gICk7XG59XG52YXIgbGlzdGVuaW5nTWFya2VyID0gXCJfcmVhY3RMaXN0ZW5pbmdcIiArIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpO1xuZnVuY3Rpb24gbGlzdGVuVG9BbGxTdXBwb3J0ZWRFdmVudHMocm9vdENvbnRhaW5lckVsZW1lbnQpIHtcbiAgaWYgKCFyb290Q29udGFpbmVyRWxlbWVudFtsaXN0ZW5pbmdNYXJrZXJdKSB7XG4gICAgcm9vdENvbnRhaW5lckVsZW1lbnRbbGlzdGVuaW5nTWFya2VyXSA9ICEwO1xuICAgIGFsbE5hdGl2ZUV2ZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChkb21FdmVudE5hbWUpIHtcbiAgICAgIFwic2VsZWN0aW9uY2hhbmdlXCIgIT09IGRvbUV2ZW50TmFtZSAmJlxuICAgICAgICAobm9uRGVsZWdhdGVkRXZlbnRzLmhhcyhkb21FdmVudE5hbWUpIHx8XG4gICAgICAgICAgbGlzdGVuVG9OYXRpdmVFdmVudChkb21FdmVudE5hbWUsICExLCByb290Q29udGFpbmVyRWxlbWVudCksXG4gICAgICAgIGxpc3RlblRvTmF0aXZlRXZlbnQoZG9tRXZlbnROYW1lLCAhMCwgcm9vdENvbnRhaW5lckVsZW1lbnQpKTtcbiAgICB9KTtcbiAgICB2YXIgb3duZXJEb2N1bWVudCA9XG4gICAgICA5ID09PSByb290Q29udGFpbmVyRWxlbWVudC5ub2RlVHlwZVxuICAgICAgICA/IHJvb3RDb250YWluZXJFbGVtZW50XG4gICAgICAgIDogcm9vdENvbnRhaW5lckVsZW1lbnQub3duZXJEb2N1bWVudDtcbiAgICBudWxsID09PSBvd25lckRvY3VtZW50IHx8XG4gICAgICBvd25lckRvY3VtZW50W2xpc3RlbmluZ01hcmtlcl0gfHxcbiAgICAgICgob3duZXJEb2N1bWVudFtsaXN0ZW5pbmdNYXJrZXJdID0gITApLFxuICAgICAgbGlzdGVuVG9OYXRpdmVFdmVudChcInNlbGVjdGlvbmNoYW5nZVwiLCAhMSwgb3duZXJEb2N1bWVudCkpO1xuICB9XG59XG5mdW5jdGlvbiBhZGRUcmFwcGVkRXZlbnRMaXN0ZW5lcihcbiAgdGFyZ2V0Q29udGFpbmVyLFxuICBkb21FdmVudE5hbWUsXG4gIGV2ZW50U3lzdGVtRmxhZ3MsXG4gIGlzQ2FwdHVyZVBoYXNlTGlzdGVuZXJcbikge1xuICBzd2l0Y2ggKGdldEV2ZW50UHJpb3JpdHkoZG9tRXZlbnROYW1lKSkge1xuICAgIGNhc2UgMjpcbiAgICAgIHZhciBsaXN0ZW5lcldyYXBwZXIgPSBkaXNwYXRjaERpc2NyZXRlRXZlbnQ7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDg6XG4gICAgICBsaXN0ZW5lcldyYXBwZXIgPSBkaXNwYXRjaENvbnRpbnVvdXNFdmVudDtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBsaXN0ZW5lcldyYXBwZXIgPSBkaXNwYXRjaEV2ZW50O1xuICB9XG4gIGV2ZW50U3lzdGVtRmxhZ3MgPSBsaXN0ZW5lcldyYXBwZXIuYmluZChcbiAgICBudWxsLFxuICAgIGRvbUV2ZW50TmFtZSxcbiAgICBldmVudFN5c3RlbUZsYWdzLFxuICAgIHRhcmdldENvbnRhaW5lclxuICApO1xuICBsaXN0ZW5lcldyYXBwZXIgPSB2b2lkIDA7XG4gICFwYXNzaXZlQnJvd3NlckV2ZW50c1N1cHBvcnRlZCB8fFxuICAgIChcInRvdWNoc3RhcnRcIiAhPT0gZG9tRXZlbnROYW1lICYmXG4gICAgICBcInRvdWNobW92ZVwiICE9PSBkb21FdmVudE5hbWUgJiZcbiAgICAgIFwid2hlZWxcIiAhPT0gZG9tRXZlbnROYW1lKSB8fFxuICAgIChsaXN0ZW5lcldyYXBwZXIgPSAhMCk7XG4gIGlzQ2FwdHVyZVBoYXNlTGlzdGVuZXJcbiAgICA/IHZvaWQgMCAhPT0gbGlzdGVuZXJXcmFwcGVyXG4gICAgICA/IHRhcmdldENvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKGRvbUV2ZW50TmFtZSwgZXZlbnRTeXN0ZW1GbGFncywge1xuICAgICAgICAgIGNhcHR1cmU6ICEwLFxuICAgICAgICAgIHBhc3NpdmU6IGxpc3RlbmVyV3JhcHBlclxuICAgICAgICB9KVxuICAgICAgOiB0YXJnZXRDb250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcihkb21FdmVudE5hbWUsIGV2ZW50U3lzdGVtRmxhZ3MsICEwKVxuICAgIDogdm9pZCAwICE9PSBsaXN0ZW5lcldyYXBwZXJcbiAgICAgID8gdGFyZ2V0Q29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoZG9tRXZlbnROYW1lLCBldmVudFN5c3RlbUZsYWdzLCB7XG4gICAgICAgICAgcGFzc2l2ZTogbGlzdGVuZXJXcmFwcGVyXG4gICAgICAgIH0pXG4gICAgICA6IHRhcmdldENvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKGRvbUV2ZW50TmFtZSwgZXZlbnRTeXN0ZW1GbGFncywgITEpO1xufVxuZnVuY3Rpb24gZGlzcGF0Y2hFdmVudEZvclBsdWdpbkV2ZW50U3lzdGVtKFxuICBkb21FdmVudE5hbWUsXG4gIGV2ZW50U3lzdGVtRmxhZ3MsXG4gIG5hdGl2ZUV2ZW50LFxuICB0YXJnZXRJbnN0JGpzY29tcCQwLFxuICB0YXJnZXRDb250YWluZXJcbikge1xuICB2YXIgYW5jZXN0b3JJbnN0ID0gdGFyZ2V0SW5zdCRqc2NvbXAkMDtcbiAgaWYgKFxuICAgIDAgPT09IChldmVudFN5c3RlbUZsYWdzICYgMSkgJiZcbiAgICAwID09PSAoZXZlbnRTeXN0ZW1GbGFncyAmIDIpICYmXG4gICAgbnVsbCAhPT0gdGFyZ2V0SW5zdCRqc2NvbXAkMFxuICApXG4gICAgYTogZm9yICg7Oykge1xuICAgICAgaWYgKG51bGwgPT09IHRhcmdldEluc3QkanNjb21wJDApIHJldHVybjtcbiAgICAgIHZhciBub2RlVGFnID0gdGFyZ2V0SW5zdCRqc2NvbXAkMC50YWc7XG4gICAgICBpZiAoMyA9PT0gbm9kZVRhZyB8fCA0ID09PSBub2RlVGFnKSB7XG4gICAgICAgIHZhciBjb250YWluZXIgPSB0YXJnZXRJbnN0JGpzY29tcCQwLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO1xuICAgICAgICBpZiAoXG4gICAgICAgICAgY29udGFpbmVyID09PSB0YXJnZXRDb250YWluZXIgfHxcbiAgICAgICAgICAoOCA9PT0gY29udGFpbmVyLm5vZGVUeXBlICYmIGNvbnRhaW5lci5wYXJlbnROb2RlID09PSB0YXJnZXRDb250YWluZXIpXG4gICAgICAgIClcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgaWYgKDQgPT09IG5vZGVUYWcpXG4gICAgICAgICAgZm9yIChub2RlVGFnID0gdGFyZ2V0SW5zdCRqc2NvbXAkMC5yZXR1cm47IG51bGwgIT09IG5vZGVUYWc7ICkge1xuICAgICAgICAgICAgdmFyIGdyYW5kVGFnID0gbm9kZVRhZy50YWc7XG4gICAgICAgICAgICBpZiAoMyA9PT0gZ3JhbmRUYWcgfHwgNCA9PT0gZ3JhbmRUYWcpXG4gICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAoKGdyYW5kVGFnID0gbm9kZVRhZy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyksXG4gICAgICAgICAgICAgICAgZ3JhbmRUYWcgPT09IHRhcmdldENvbnRhaW5lciB8fFxuICAgICAgICAgICAgICAgICAgKDggPT09IGdyYW5kVGFnLm5vZGVUeXBlICYmXG4gICAgICAgICAgICAgICAgICAgIGdyYW5kVGFnLnBhcmVudE5vZGUgPT09IHRhcmdldENvbnRhaW5lcikpXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBub2RlVGFnID0gbm9kZVRhZy5yZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICBmb3IgKDsgbnVsbCAhPT0gY29udGFpbmVyOyApIHtcbiAgICAgICAgICBub2RlVGFnID0gZ2V0Q2xvc2VzdEluc3RhbmNlRnJvbU5vZGUoY29udGFpbmVyKTtcbiAgICAgICAgICBpZiAobnVsbCA9PT0gbm9kZVRhZykgcmV0dXJuO1xuICAgICAgICAgIGdyYW5kVGFnID0gbm9kZVRhZy50YWc7XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgNSA9PT0gZ3JhbmRUYWcgfHxcbiAgICAgICAgICAgIDYgPT09IGdyYW5kVGFnIHx8XG4gICAgICAgICAgICAyNiA9PT0gZ3JhbmRUYWcgfHxcbiAgICAgICAgICAgIDI3ID09PSBncmFuZFRhZ1xuICAgICAgICAgICkge1xuICAgICAgICAgICAgdGFyZ2V0SW5zdCRqc2NvbXAkMCA9IGFuY2VzdG9ySW5zdCA9IG5vZGVUYWc7XG4gICAgICAgICAgICBjb250aW51ZSBhO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb250YWluZXIgPSBjb250YWluZXIucGFyZW50Tm9kZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGFyZ2V0SW5zdCRqc2NvbXAkMCA9IHRhcmdldEluc3QkanNjb21wJDAucmV0dXJuO1xuICAgIH1cbiAgYmF0Y2hlZFVwZGF0ZXMkMShmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHRhcmdldEluc3QgPSBhbmNlc3Rvckluc3QsXG4gICAgICBuYXRpdmVFdmVudFRhcmdldCA9IGdldEV2ZW50VGFyZ2V0KG5hdGl2ZUV2ZW50KSxcbiAgICAgIGRpc3BhdGNoUXVldWUgPSBbXTtcbiAgICBhOiB7XG4gICAgICB2YXIgcmVhY3ROYW1lID0gdG9wTGV2ZWxFdmVudHNUb1JlYWN0TmFtZXMuZ2V0KGRvbUV2ZW50TmFtZSk7XG4gICAgICBpZiAodm9pZCAwICE9PSByZWFjdE5hbWUpIHtcbiAgICAgICAgdmFyIFN5bnRoZXRpY0V2ZW50Q3RvciA9IFN5bnRoZXRpY0V2ZW50LFxuICAgICAgICAgIHJlYWN0RXZlbnRUeXBlID0gZG9tRXZlbnROYW1lO1xuICAgICAgICBzd2l0Y2ggKGRvbUV2ZW50TmFtZSkge1xuICAgICAgICAgIGNhc2UgXCJrZXlwcmVzc1wiOlxuICAgICAgICAgICAgaWYgKDAgPT09IGdldEV2ZW50Q2hhckNvZGUobmF0aXZlRXZlbnQpKSBicmVhayBhO1xuICAgICAgICAgIGNhc2UgXCJrZXlkb3duXCI6XG4gICAgICAgICAgY2FzZSBcImtleXVwXCI6XG4gICAgICAgICAgICBTeW50aGV0aWNFdmVudEN0b3IgPSBTeW50aGV0aWNLZXlib2FyZEV2ZW50O1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBcImZvY3VzaW5cIjpcbiAgICAgICAgICAgIHJlYWN0RXZlbnRUeXBlID0gXCJmb2N1c1wiO1xuICAgICAgICAgICAgU3ludGhldGljRXZlbnRDdG9yID0gU3ludGhldGljRm9jdXNFdmVudDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgXCJmb2N1c291dFwiOlxuICAgICAgICAgICAgcmVhY3RFdmVudFR5cGUgPSBcImJsdXJcIjtcbiAgICAgICAgICAgIFN5bnRoZXRpY0V2ZW50Q3RvciA9IFN5bnRoZXRpY0ZvY3VzRXZlbnQ7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFwiYmVmb3JlYmx1clwiOlxuICAgICAgICAgIGNhc2UgXCJhZnRlcmJsdXJcIjpcbiAgICAgICAgICAgIFN5bnRoZXRpY0V2ZW50Q3RvciA9IFN5bnRoZXRpY0ZvY3VzRXZlbnQ7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFwiY2xpY2tcIjpcbiAgICAgICAgICAgIGlmICgyID09PSBuYXRpdmVFdmVudC5idXR0b24pIGJyZWFrIGE7XG4gICAgICAgICAgY2FzZSBcImF1eGNsaWNrXCI6XG4gICAgICAgICAgY2FzZSBcImRibGNsaWNrXCI6XG4gICAgICAgICAgY2FzZSBcIm1vdXNlZG93blwiOlxuICAgICAgICAgIGNhc2UgXCJtb3VzZW1vdmVcIjpcbiAgICAgICAgICBjYXNlIFwibW91c2V1cFwiOlxuICAgICAgICAgIGNhc2UgXCJtb3VzZW91dFwiOlxuICAgICAgICAgIGNhc2UgXCJtb3VzZW92ZXJcIjpcbiAgICAgICAgICBjYXNlIFwiY29udGV4dG1lbnVcIjpcbiAgICAgICAgICAgIFN5bnRoZXRpY0V2ZW50Q3RvciA9IFN5bnRoZXRpY01vdXNlRXZlbnQ7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFwiZHJhZ1wiOlxuICAgICAgICAgIGNhc2UgXCJkcmFnZW5kXCI6XG4gICAgICAgICAgY2FzZSBcImRyYWdlbnRlclwiOlxuICAgICAgICAgIGNhc2UgXCJkcmFnZXhpdFwiOlxuICAgICAgICAgIGNhc2UgXCJkcmFnbGVhdmVcIjpcbiAgICAgICAgICBjYXNlIFwiZHJhZ292ZXJcIjpcbiAgICAgICAgICBjYXNlIFwiZHJhZ3N0YXJ0XCI6XG4gICAgICAgICAgY2FzZSBcImRyb3BcIjpcbiAgICAgICAgICAgIFN5bnRoZXRpY0V2ZW50Q3RvciA9IFN5bnRoZXRpY0RyYWdFdmVudDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgXCJ0b3VjaGNhbmNlbFwiOlxuICAgICAgICAgIGNhc2UgXCJ0b3VjaGVuZFwiOlxuICAgICAgICAgIGNhc2UgXCJ0b3VjaG1vdmVcIjpcbiAgICAgICAgICBjYXNlIFwidG91Y2hzdGFydFwiOlxuICAgICAgICAgICAgU3ludGhldGljRXZlbnRDdG9yID0gU3ludGhldGljVG91Y2hFdmVudDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgQU5JTUFUSU9OX0VORDpcbiAgICAgICAgICBjYXNlIEFOSU1BVElPTl9JVEVSQVRJT046XG4gICAgICAgICAgY2FzZSBBTklNQVRJT05fU1RBUlQ6XG4gICAgICAgICAgICBTeW50aGV0aWNFdmVudEN0b3IgPSBTeW50aGV0aWNBbmltYXRpb25FdmVudDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgVFJBTlNJVElPTl9FTkQ6XG4gICAgICAgICAgICBTeW50aGV0aWNFdmVudEN0b3IgPSBTeW50aGV0aWNUcmFuc2l0aW9uRXZlbnQ7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFwic2Nyb2xsXCI6XG4gICAgICAgICAgY2FzZSBcInNjcm9sbGVuZFwiOlxuICAgICAgICAgICAgU3ludGhldGljRXZlbnRDdG9yID0gU3ludGhldGljVUlFdmVudDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgXCJ3aGVlbFwiOlxuICAgICAgICAgICAgU3ludGhldGljRXZlbnRDdG9yID0gU3ludGhldGljV2hlZWxFdmVudDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgXCJjb3B5XCI6XG4gICAgICAgICAgY2FzZSBcImN1dFwiOlxuICAgICAgICAgIGNhc2UgXCJwYXN0ZVwiOlxuICAgICAgICAgICAgU3ludGhldGljRXZlbnRDdG9yID0gU3ludGhldGljQ2xpcGJvYXJkRXZlbnQ7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpcbiAgICAgICAgICBjYXNlIFwibG9zdHBvaW50ZXJjYXB0dXJlXCI6XG4gICAgICAgICAgY2FzZSBcInBvaW50ZXJjYW5jZWxcIjpcbiAgICAgICAgICBjYXNlIFwicG9pbnRlcmRvd25cIjpcbiAgICAgICAgICBjYXNlIFwicG9pbnRlcm1vdmVcIjpcbiAgICAgICAgICBjYXNlIFwicG9pbnRlcm91dFwiOlxuICAgICAgICAgIGNhc2UgXCJwb2ludGVyb3ZlclwiOlxuICAgICAgICAgIGNhc2UgXCJwb2ludGVydXBcIjpcbiAgICAgICAgICAgIFN5bnRoZXRpY0V2ZW50Q3RvciA9IFN5bnRoZXRpY1BvaW50ZXJFdmVudDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgXCJ0b2dnbGVcIjpcbiAgICAgICAgICBjYXNlIFwiYmVmb3JldG9nZ2xlXCI6XG4gICAgICAgICAgICBTeW50aGV0aWNFdmVudEN0b3IgPSBTeW50aGV0aWNUb2dnbGVFdmVudDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgaW5DYXB0dXJlUGhhc2UgPSAwICE9PSAoZXZlbnRTeXN0ZW1GbGFncyAmIDQpLFxuICAgICAgICAgIGFjY3VtdWxhdGVUYXJnZXRPbmx5ID1cbiAgICAgICAgICAgICFpbkNhcHR1cmVQaGFzZSAmJlxuICAgICAgICAgICAgKFwic2Nyb2xsXCIgPT09IGRvbUV2ZW50TmFtZSB8fCBcInNjcm9sbGVuZFwiID09PSBkb21FdmVudE5hbWUpLFxuICAgICAgICAgIHJlYWN0RXZlbnROYW1lID0gaW5DYXB0dXJlUGhhc2VcbiAgICAgICAgICAgID8gbnVsbCAhPT0gcmVhY3ROYW1lXG4gICAgICAgICAgICAgID8gcmVhY3ROYW1lICsgXCJDYXB0dXJlXCJcbiAgICAgICAgICAgICAgOiBudWxsXG4gICAgICAgICAgICA6IHJlYWN0TmFtZTtcbiAgICAgICAgaW5DYXB0dXJlUGhhc2UgPSBbXTtcbiAgICAgICAgZm9yIChcbiAgICAgICAgICB2YXIgaW5zdGFuY2UgPSB0YXJnZXRJbnN0LCBsYXN0SG9zdENvbXBvbmVudDtcbiAgICAgICAgICBudWxsICE9PSBpbnN0YW5jZTtcblxuICAgICAgICApIHtcbiAgICAgICAgICB2YXIgX2luc3RhbmNlID0gaW5zdGFuY2U7XG4gICAgICAgICAgbGFzdEhvc3RDb21wb25lbnQgPSBfaW5zdGFuY2Uuc3RhdGVOb2RlO1xuICAgICAgICAgIF9pbnN0YW5jZSA9IF9pbnN0YW5jZS50YWc7XG4gICAgICAgICAgKDUgIT09IF9pbnN0YW5jZSAmJiAyNiAhPT0gX2luc3RhbmNlICYmIDI3ICE9PSBfaW5zdGFuY2UpIHx8XG4gICAgICAgICAgICBudWxsID09PSBsYXN0SG9zdENvbXBvbmVudCB8fFxuICAgICAgICAgICAgbnVsbCA9PT0gcmVhY3RFdmVudE5hbWUgfHxcbiAgICAgICAgICAgICgoX2luc3RhbmNlID0gZ2V0TGlzdGVuZXIoaW5zdGFuY2UsIHJlYWN0RXZlbnROYW1lKSksXG4gICAgICAgICAgICBudWxsICE9IF9pbnN0YW5jZSAmJlxuICAgICAgICAgICAgICBpbkNhcHR1cmVQaGFzZS5wdXNoKFxuICAgICAgICAgICAgICAgIGNyZWF0ZURpc3BhdGNoTGlzdGVuZXIoaW5zdGFuY2UsIF9pbnN0YW5jZSwgbGFzdEhvc3RDb21wb25lbnQpXG4gICAgICAgICAgICAgICkpO1xuICAgICAgICAgIGlmIChhY2N1bXVsYXRlVGFyZ2V0T25seSkgYnJlYWs7XG4gICAgICAgICAgaW5zdGFuY2UgPSBpbnN0YW5jZS5yZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgMCA8IGluQ2FwdHVyZVBoYXNlLmxlbmd0aCAmJlxuICAgICAgICAgICgocmVhY3ROYW1lID0gbmV3IFN5bnRoZXRpY0V2ZW50Q3RvcihcbiAgICAgICAgICAgIHJlYWN0TmFtZSxcbiAgICAgICAgICAgIHJlYWN0RXZlbnRUeXBlLFxuICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgIG5hdGl2ZUV2ZW50LFxuICAgICAgICAgICAgbmF0aXZlRXZlbnRUYXJnZXRcbiAgICAgICAgICApKSxcbiAgICAgICAgICBkaXNwYXRjaFF1ZXVlLnB1c2goeyBldmVudDogcmVhY3ROYW1lLCBsaXN0ZW5lcnM6IGluQ2FwdHVyZVBoYXNlIH0pKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKDAgPT09IChldmVudFN5c3RlbUZsYWdzICYgNykpIHtcbiAgICAgIGE6IHtcbiAgICAgICAgcmVhY3ROYW1lID1cbiAgICAgICAgICBcIm1vdXNlb3ZlclwiID09PSBkb21FdmVudE5hbWUgfHwgXCJwb2ludGVyb3ZlclwiID09PSBkb21FdmVudE5hbWU7XG4gICAgICAgIFN5bnRoZXRpY0V2ZW50Q3RvciA9XG4gICAgICAgICAgXCJtb3VzZW91dFwiID09PSBkb21FdmVudE5hbWUgfHwgXCJwb2ludGVyb3V0XCIgPT09IGRvbUV2ZW50TmFtZTtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIHJlYWN0TmFtZSAmJlxuICAgICAgICAgIG5hdGl2ZUV2ZW50ICE9PSBjdXJyZW50UmVwbGF5aW5nRXZlbnQgJiZcbiAgICAgICAgICAocmVhY3RFdmVudFR5cGUgPVxuICAgICAgICAgICAgbmF0aXZlRXZlbnQucmVsYXRlZFRhcmdldCB8fCBuYXRpdmVFdmVudC5mcm9tRWxlbWVudCkgJiZcbiAgICAgICAgICAoZ2V0Q2xvc2VzdEluc3RhbmNlRnJvbU5vZGUocmVhY3RFdmVudFR5cGUpIHx8XG4gICAgICAgICAgICByZWFjdEV2ZW50VHlwZVtpbnRlcm5hbENvbnRhaW5lckluc3RhbmNlS2V5XSlcbiAgICAgICAgKVxuICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgIGlmIChTeW50aGV0aWNFdmVudEN0b3IgfHwgcmVhY3ROYW1lKSB7XG4gICAgICAgICAgcmVhY3ROYW1lID1cbiAgICAgICAgICAgIG5hdGl2ZUV2ZW50VGFyZ2V0LndpbmRvdyA9PT0gbmF0aXZlRXZlbnRUYXJnZXRcbiAgICAgICAgICAgICAgPyBuYXRpdmVFdmVudFRhcmdldFxuICAgICAgICAgICAgICA6IChyZWFjdE5hbWUgPSBuYXRpdmVFdmVudFRhcmdldC5vd25lckRvY3VtZW50KVxuICAgICAgICAgICAgICAgID8gcmVhY3ROYW1lLmRlZmF1bHRWaWV3IHx8IHJlYWN0TmFtZS5wYXJlbnRXaW5kb3dcbiAgICAgICAgICAgICAgICA6IHdpbmRvdztcbiAgICAgICAgICBpZiAoU3ludGhldGljRXZlbnRDdG9yKSB7XG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICgocmVhY3RFdmVudFR5cGUgPVxuICAgICAgICAgICAgICAgIG5hdGl2ZUV2ZW50LnJlbGF0ZWRUYXJnZXQgfHwgbmF0aXZlRXZlbnQudG9FbGVtZW50KSxcbiAgICAgICAgICAgICAgKFN5bnRoZXRpY0V2ZW50Q3RvciA9IHRhcmdldEluc3QpLFxuICAgICAgICAgICAgICAocmVhY3RFdmVudFR5cGUgPSByZWFjdEV2ZW50VHlwZVxuICAgICAgICAgICAgICAgID8gZ2V0Q2xvc2VzdEluc3RhbmNlRnJvbU5vZGUocmVhY3RFdmVudFR5cGUpXG4gICAgICAgICAgICAgICAgOiBudWxsKSxcbiAgICAgICAgICAgICAgbnVsbCAhPT0gcmVhY3RFdmVudFR5cGUgJiZcbiAgICAgICAgICAgICAgICAoKGFjY3VtdWxhdGVUYXJnZXRPbmx5ID1cbiAgICAgICAgICAgICAgICAgIGdldE5lYXJlc3RNb3VudGVkRmliZXIocmVhY3RFdmVudFR5cGUpKSxcbiAgICAgICAgICAgICAgICAoaW5DYXB0dXJlUGhhc2UgPSByZWFjdEV2ZW50VHlwZS50YWcpLFxuICAgICAgICAgICAgICAgIHJlYWN0RXZlbnRUeXBlICE9PSBhY2N1bXVsYXRlVGFyZ2V0T25seSB8fFxuICAgICAgICAgICAgICAgICAgKDUgIT09IGluQ2FwdHVyZVBoYXNlICYmXG4gICAgICAgICAgICAgICAgICAgIDI3ICE9PSBpbkNhcHR1cmVQaGFzZSAmJlxuICAgICAgICAgICAgICAgICAgICA2ICE9PSBpbkNhcHR1cmVQaGFzZSkpKVxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgICByZWFjdEV2ZW50VHlwZSA9IG51bGw7XG4gICAgICAgICAgfSBlbHNlIChTeW50aGV0aWNFdmVudEN0b3IgPSBudWxsKSwgKHJlYWN0RXZlbnRUeXBlID0gdGFyZ2V0SW5zdCk7XG4gICAgICAgICAgaWYgKFN5bnRoZXRpY0V2ZW50Q3RvciAhPT0gcmVhY3RFdmVudFR5cGUpIHtcbiAgICAgICAgICAgIGluQ2FwdHVyZVBoYXNlID0gU3ludGhldGljTW91c2VFdmVudDtcbiAgICAgICAgICAgIF9pbnN0YW5jZSA9IFwib25Nb3VzZUxlYXZlXCI7XG4gICAgICAgICAgICByZWFjdEV2ZW50TmFtZSA9IFwib25Nb3VzZUVudGVyXCI7XG4gICAgICAgICAgICBpbnN0YW5jZSA9IFwibW91c2VcIjtcbiAgICAgICAgICAgIGlmIChcInBvaW50ZXJvdXRcIiA9PT0gZG9tRXZlbnROYW1lIHx8IFwicG9pbnRlcm92ZXJcIiA9PT0gZG9tRXZlbnROYW1lKVxuICAgICAgICAgICAgICAoaW5DYXB0dXJlUGhhc2UgPSBTeW50aGV0aWNQb2ludGVyRXZlbnQpLFxuICAgICAgICAgICAgICAgIChfaW5zdGFuY2UgPSBcIm9uUG9pbnRlckxlYXZlXCIpLFxuICAgICAgICAgICAgICAgIChyZWFjdEV2ZW50TmFtZSA9IFwib25Qb2ludGVyRW50ZXJcIiksXG4gICAgICAgICAgICAgICAgKGluc3RhbmNlID0gXCJwb2ludGVyXCIpO1xuICAgICAgICAgICAgYWNjdW11bGF0ZVRhcmdldE9ubHkgPVxuICAgICAgICAgICAgICBudWxsID09IFN5bnRoZXRpY0V2ZW50Q3RvclxuICAgICAgICAgICAgICAgID8gcmVhY3ROYW1lXG4gICAgICAgICAgICAgICAgOiBnZXROb2RlRnJvbUluc3RhbmNlKFN5bnRoZXRpY0V2ZW50Q3Rvcik7XG4gICAgICAgICAgICBsYXN0SG9zdENvbXBvbmVudCA9XG4gICAgICAgICAgICAgIG51bGwgPT0gcmVhY3RFdmVudFR5cGVcbiAgICAgICAgICAgICAgICA/IHJlYWN0TmFtZVxuICAgICAgICAgICAgICAgIDogZ2V0Tm9kZUZyb21JbnN0YW5jZShyZWFjdEV2ZW50VHlwZSk7XG4gICAgICAgICAgICByZWFjdE5hbWUgPSBuZXcgaW5DYXB0dXJlUGhhc2UoXG4gICAgICAgICAgICAgIF9pbnN0YW5jZSxcbiAgICAgICAgICAgICAgaW5zdGFuY2UgKyBcImxlYXZlXCIsXG4gICAgICAgICAgICAgIFN5bnRoZXRpY0V2ZW50Q3RvcixcbiAgICAgICAgICAgICAgbmF0aXZlRXZlbnQsXG4gICAgICAgICAgICAgIG5hdGl2ZUV2ZW50VGFyZ2V0XG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgcmVhY3ROYW1lLnRhcmdldCA9IGFjY3VtdWxhdGVUYXJnZXRPbmx5O1xuICAgICAgICAgICAgcmVhY3ROYW1lLnJlbGF0ZWRUYXJnZXQgPSBsYXN0SG9zdENvbXBvbmVudDtcbiAgICAgICAgICAgIF9pbnN0YW5jZSA9IG51bGw7XG4gICAgICAgICAgICBnZXRDbG9zZXN0SW5zdGFuY2VGcm9tTm9kZShuYXRpdmVFdmVudFRhcmdldCkgPT09IHRhcmdldEluc3QgJiZcbiAgICAgICAgICAgICAgKChpbkNhcHR1cmVQaGFzZSA9IG5ldyBpbkNhcHR1cmVQaGFzZShcbiAgICAgICAgICAgICAgICByZWFjdEV2ZW50TmFtZSxcbiAgICAgICAgICAgICAgICBpbnN0YW5jZSArIFwiZW50ZXJcIixcbiAgICAgICAgICAgICAgICByZWFjdEV2ZW50VHlwZSxcbiAgICAgICAgICAgICAgICBuYXRpdmVFdmVudCxcbiAgICAgICAgICAgICAgICBuYXRpdmVFdmVudFRhcmdldFxuICAgICAgICAgICAgICApKSxcbiAgICAgICAgICAgICAgKGluQ2FwdHVyZVBoYXNlLnRhcmdldCA9IGxhc3RIb3N0Q29tcG9uZW50KSxcbiAgICAgICAgICAgICAgKGluQ2FwdHVyZVBoYXNlLnJlbGF0ZWRUYXJnZXQgPSBhY2N1bXVsYXRlVGFyZ2V0T25seSksXG4gICAgICAgICAgICAgIChfaW5zdGFuY2UgPSBpbkNhcHR1cmVQaGFzZSkpO1xuICAgICAgICAgICAgYWNjdW11bGF0ZVRhcmdldE9ubHkgPSBfaW5zdGFuY2U7XG4gICAgICAgICAgICBpZiAoU3ludGhldGljRXZlbnRDdG9yICYmIHJlYWN0RXZlbnRUeXBlKVxuICAgICAgICAgICAgICBiOiB7XG4gICAgICAgICAgICAgICAgaW5DYXB0dXJlUGhhc2UgPSBTeW50aGV0aWNFdmVudEN0b3I7XG4gICAgICAgICAgICAgICAgcmVhY3RFdmVudE5hbWUgPSByZWFjdEV2ZW50VHlwZTtcbiAgICAgICAgICAgICAgICBpbnN0YW5jZSA9IDA7XG4gICAgICAgICAgICAgICAgZm9yIChcbiAgICAgICAgICAgICAgICAgIGxhc3RIb3N0Q29tcG9uZW50ID0gaW5DYXB0dXJlUGhhc2U7XG4gICAgICAgICAgICAgICAgICBsYXN0SG9zdENvbXBvbmVudDtcbiAgICAgICAgICAgICAgICAgIGxhc3RIb3N0Q29tcG9uZW50ID0gZ2V0UGFyZW50KGxhc3RIb3N0Q29tcG9uZW50KVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgIGluc3RhbmNlKys7XG4gICAgICAgICAgICAgICAgbGFzdEhvc3RDb21wb25lbnQgPSAwO1xuICAgICAgICAgICAgICAgIGZvciAoXG4gICAgICAgICAgICAgICAgICBfaW5zdGFuY2UgPSByZWFjdEV2ZW50TmFtZTtcbiAgICAgICAgICAgICAgICAgIF9pbnN0YW5jZTtcbiAgICAgICAgICAgICAgICAgIF9pbnN0YW5jZSA9IGdldFBhcmVudChfaW5zdGFuY2UpXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgbGFzdEhvc3RDb21wb25lbnQrKztcbiAgICAgICAgICAgICAgICBmb3IgKDsgMCA8IGluc3RhbmNlIC0gbGFzdEhvc3RDb21wb25lbnQ7IClcbiAgICAgICAgICAgICAgICAgIChpbkNhcHR1cmVQaGFzZSA9IGdldFBhcmVudChpbkNhcHR1cmVQaGFzZSkpLCBpbnN0YW5jZS0tO1xuICAgICAgICAgICAgICAgIGZvciAoOyAwIDwgbGFzdEhvc3RDb21wb25lbnQgLSBpbnN0YW5jZTsgKVxuICAgICAgICAgICAgICAgICAgKHJlYWN0RXZlbnROYW1lID0gZ2V0UGFyZW50KHJlYWN0RXZlbnROYW1lKSksXG4gICAgICAgICAgICAgICAgICAgIGxhc3RIb3N0Q29tcG9uZW50LS07XG4gICAgICAgICAgICAgICAgZm9yICg7IGluc3RhbmNlLS07ICkge1xuICAgICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICBpbkNhcHR1cmVQaGFzZSA9PT0gcmVhY3RFdmVudE5hbWUgfHxcbiAgICAgICAgICAgICAgICAgICAgKG51bGwgIT09IHJlYWN0RXZlbnROYW1lICYmXG4gICAgICAgICAgICAgICAgICAgICAgaW5DYXB0dXJlUGhhc2UgPT09IHJlYWN0RXZlbnROYW1lLmFsdGVybmF0ZSlcbiAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgYnJlYWsgYjtcbiAgICAgICAgICAgICAgICAgIGluQ2FwdHVyZVBoYXNlID0gZ2V0UGFyZW50KGluQ2FwdHVyZVBoYXNlKTtcbiAgICAgICAgICAgICAgICAgIHJlYWN0RXZlbnROYW1lID0gZ2V0UGFyZW50KHJlYWN0RXZlbnROYW1lKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaW5DYXB0dXJlUGhhc2UgPSBudWxsO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGluQ2FwdHVyZVBoYXNlID0gbnVsbDtcbiAgICAgICAgICAgIG51bGwgIT09IFN5bnRoZXRpY0V2ZW50Q3RvciAmJlxuICAgICAgICAgICAgICBhY2N1bXVsYXRlRW50ZXJMZWF2ZUxpc3RlbmVyc0ZvckV2ZW50KFxuICAgICAgICAgICAgICAgIGRpc3BhdGNoUXVldWUsXG4gICAgICAgICAgICAgICAgcmVhY3ROYW1lLFxuICAgICAgICAgICAgICAgIFN5bnRoZXRpY0V2ZW50Q3RvcixcbiAgICAgICAgICAgICAgICBpbkNhcHR1cmVQaGFzZSxcbiAgICAgICAgICAgICAgICAhMVxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgbnVsbCAhPT0gcmVhY3RFdmVudFR5cGUgJiZcbiAgICAgICAgICAgICAgbnVsbCAhPT0gYWNjdW11bGF0ZVRhcmdldE9ubHkgJiZcbiAgICAgICAgICAgICAgYWNjdW11bGF0ZUVudGVyTGVhdmVMaXN0ZW5lcnNGb3JFdmVudChcbiAgICAgICAgICAgICAgICBkaXNwYXRjaFF1ZXVlLFxuICAgICAgICAgICAgICAgIGFjY3VtdWxhdGVUYXJnZXRPbmx5LFxuICAgICAgICAgICAgICAgIHJlYWN0RXZlbnRUeXBlLFxuICAgICAgICAgICAgICAgIGluQ2FwdHVyZVBoYXNlLFxuICAgICAgICAgICAgICAgICEwXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBhOiB7XG4gICAgICAgIHJlYWN0TmFtZSA9IHRhcmdldEluc3QgPyBnZXROb2RlRnJvbUluc3RhbmNlKHRhcmdldEluc3QpIDogd2luZG93O1xuICAgICAgICBTeW50aGV0aWNFdmVudEN0b3IgPVxuICAgICAgICAgIHJlYWN0TmFtZS5ub2RlTmFtZSAmJiByZWFjdE5hbWUubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIFwic2VsZWN0XCIgPT09IFN5bnRoZXRpY0V2ZW50Q3RvciB8fFxuICAgICAgICAgIChcImlucHV0XCIgPT09IFN5bnRoZXRpY0V2ZW50Q3RvciAmJiBcImZpbGVcIiA9PT0gcmVhY3ROYW1lLnR5cGUpXG4gICAgICAgIClcbiAgICAgICAgICB2YXIgZ2V0VGFyZ2V0SW5zdEZ1bmMgPSBnZXRUYXJnZXRJbnN0Rm9yQ2hhbmdlRXZlbnQ7XG4gICAgICAgIGVsc2UgaWYgKGlzVGV4dElucHV0RWxlbWVudChyZWFjdE5hbWUpKVxuICAgICAgICAgIGlmIChpc0lucHV0RXZlbnRTdXBwb3J0ZWQpXG4gICAgICAgICAgICBnZXRUYXJnZXRJbnN0RnVuYyA9IGdldFRhcmdldEluc3RGb3JJbnB1dE9yQ2hhbmdlRXZlbnQ7XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBnZXRUYXJnZXRJbnN0RnVuYyA9IGdldFRhcmdldEluc3RGb3JJbnB1dEV2ZW50UG9seWZpbGw7XG4gICAgICAgICAgICB2YXIgaGFuZGxlRXZlbnRGdW5jID0gaGFuZGxlRXZlbnRzRm9ySW5wdXRFdmVudFBvbHlmaWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgZWxzZVxuICAgICAgICAgIChTeW50aGV0aWNFdmVudEN0b3IgPSByZWFjdE5hbWUubm9kZU5hbWUpLFxuICAgICAgICAgICAgIVN5bnRoZXRpY0V2ZW50Q3RvciB8fFxuICAgICAgICAgICAgXCJpbnB1dFwiICE9PSBTeW50aGV0aWNFdmVudEN0b3IudG9Mb3dlckNhc2UoKSB8fFxuICAgICAgICAgICAgKFwiY2hlY2tib3hcIiAhPT0gcmVhY3ROYW1lLnR5cGUgJiYgXCJyYWRpb1wiICE9PSByZWFjdE5hbWUudHlwZSlcbiAgICAgICAgICAgICAgPyB0YXJnZXRJbnN0ICYmXG4gICAgICAgICAgICAgICAgaXNDdXN0b21FbGVtZW50KHRhcmdldEluc3QuZWxlbWVudFR5cGUpICYmXG4gICAgICAgICAgICAgICAgKGdldFRhcmdldEluc3RGdW5jID0gZ2V0VGFyZ2V0SW5zdEZvckNoYW5nZUV2ZW50KVxuICAgICAgICAgICAgICA6IChnZXRUYXJnZXRJbnN0RnVuYyA9IGdldFRhcmdldEluc3RGb3JDbGlja0V2ZW50KTtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIGdldFRhcmdldEluc3RGdW5jICYmXG4gICAgICAgICAgKGdldFRhcmdldEluc3RGdW5jID0gZ2V0VGFyZ2V0SW5zdEZ1bmMoZG9tRXZlbnROYW1lLCB0YXJnZXRJbnN0KSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgY3JlYXRlQW5kQWNjdW11bGF0ZUNoYW5nZUV2ZW50KFxuICAgICAgICAgICAgZGlzcGF0Y2hRdWV1ZSxcbiAgICAgICAgICAgIGdldFRhcmdldEluc3RGdW5jLFxuICAgICAgICAgICAgbmF0aXZlRXZlbnQsXG4gICAgICAgICAgICBuYXRpdmVFdmVudFRhcmdldFxuICAgICAgICAgICk7XG4gICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgfVxuICAgICAgICBoYW5kbGVFdmVudEZ1bmMgJiYgaGFuZGxlRXZlbnRGdW5jKGRvbUV2ZW50TmFtZSwgcmVhY3ROYW1lLCB0YXJnZXRJbnN0KTtcbiAgICAgICAgXCJmb2N1c291dFwiID09PSBkb21FdmVudE5hbWUgJiZcbiAgICAgICAgICB0YXJnZXRJbnN0ICYmXG4gICAgICAgICAgXCJudW1iZXJcIiA9PT0gcmVhY3ROYW1lLnR5cGUgJiZcbiAgICAgICAgICBudWxsICE9IHRhcmdldEluc3QubWVtb2l6ZWRQcm9wcy52YWx1ZSAmJlxuICAgICAgICAgIHNldERlZmF1bHRWYWx1ZShyZWFjdE5hbWUsIFwibnVtYmVyXCIsIHJlYWN0TmFtZS52YWx1ZSk7XG4gICAgICB9XG4gICAgICBoYW5kbGVFdmVudEZ1bmMgPSB0YXJnZXRJbnN0ID8gZ2V0Tm9kZUZyb21JbnN0YW5jZSh0YXJnZXRJbnN0KSA6IHdpbmRvdztcbiAgICAgIHN3aXRjaCAoZG9tRXZlbnROYW1lKSB7XG4gICAgICAgIGNhc2UgXCJmb2N1c2luXCI6XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgaXNUZXh0SW5wdXRFbGVtZW50KGhhbmRsZUV2ZW50RnVuYykgfHxcbiAgICAgICAgICAgIFwidHJ1ZVwiID09PSBoYW5kbGVFdmVudEZ1bmMuY29udGVudEVkaXRhYmxlXG4gICAgICAgICAgKVxuICAgICAgICAgICAgKGFjdGl2ZUVsZW1lbnQgPSBoYW5kbGVFdmVudEZ1bmMpLFxuICAgICAgICAgICAgICAoYWN0aXZlRWxlbWVudEluc3QgPSB0YXJnZXRJbnN0KSxcbiAgICAgICAgICAgICAgKGxhc3RTZWxlY3Rpb24gPSBudWxsKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcImZvY3Vzb3V0XCI6XG4gICAgICAgICAgbGFzdFNlbGVjdGlvbiA9IGFjdGl2ZUVsZW1lbnRJbnN0ID0gYWN0aXZlRWxlbWVudCA9IG51bGw7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJtb3VzZWRvd25cIjpcbiAgICAgICAgICBtb3VzZURvd24gPSAhMDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcImNvbnRleHRtZW51XCI6XG4gICAgICAgIGNhc2UgXCJtb3VzZXVwXCI6XG4gICAgICAgIGNhc2UgXCJkcmFnZW5kXCI6XG4gICAgICAgICAgbW91c2VEb3duID0gITE7XG4gICAgICAgICAgY29uc3RydWN0U2VsZWN0RXZlbnQoZGlzcGF0Y2hRdWV1ZSwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcInNlbGVjdGlvbmNoYW5nZVwiOlxuICAgICAgICAgIGlmIChza2lwU2VsZWN0aW9uQ2hhbmdlRXZlbnQpIGJyZWFrO1xuICAgICAgICBjYXNlIFwia2V5ZG93blwiOlxuICAgICAgICBjYXNlIFwia2V5dXBcIjpcbiAgICAgICAgICBjb25zdHJ1Y3RTZWxlY3RFdmVudChkaXNwYXRjaFF1ZXVlLCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpO1xuICAgICAgfVxuICAgICAgdmFyIGZhbGxiYWNrRGF0YTtcbiAgICAgIGlmIChjYW5Vc2VDb21wb3NpdGlvbkV2ZW50KVxuICAgICAgICBiOiB7XG4gICAgICAgICAgc3dpdGNoIChkb21FdmVudE5hbWUpIHtcbiAgICAgICAgICAgIGNhc2UgXCJjb21wb3NpdGlvbnN0YXJ0XCI6XG4gICAgICAgICAgICAgIHZhciBldmVudFR5cGUgPSBcIm9uQ29tcG9zaXRpb25TdGFydFwiO1xuICAgICAgICAgICAgICBicmVhayBiO1xuICAgICAgICAgICAgY2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6XG4gICAgICAgICAgICAgIGV2ZW50VHlwZSA9IFwib25Db21wb3NpdGlvbkVuZFwiO1xuICAgICAgICAgICAgICBicmVhayBiO1xuICAgICAgICAgICAgY2FzZSBcImNvbXBvc2l0aW9udXBkYXRlXCI6XG4gICAgICAgICAgICAgIGV2ZW50VHlwZSA9IFwib25Db21wb3NpdGlvblVwZGF0ZVwiO1xuICAgICAgICAgICAgICBicmVhayBiO1xuICAgICAgICAgIH1cbiAgICAgICAgICBldmVudFR5cGUgPSB2b2lkIDA7XG4gICAgICAgIH1cbiAgICAgIGVsc2VcbiAgICAgICAgaXNDb21wb3NpbmdcbiAgICAgICAgICA/IGlzRmFsbGJhY2tDb21wb3NpdGlvbkVuZChkb21FdmVudE5hbWUsIG5hdGl2ZUV2ZW50KSAmJlxuICAgICAgICAgICAgKGV2ZW50VHlwZSA9IFwib25Db21wb3NpdGlvbkVuZFwiKVxuICAgICAgICAgIDogXCJrZXlkb3duXCIgPT09IGRvbUV2ZW50TmFtZSAmJlxuICAgICAgICAgICAgMjI5ID09PSBuYXRpdmVFdmVudC5rZXlDb2RlICYmXG4gICAgICAgICAgICAoZXZlbnRUeXBlID0gXCJvbkNvbXBvc2l0aW9uU3RhcnRcIik7XG4gICAgICBldmVudFR5cGUgJiZcbiAgICAgICAgKHVzZUZhbGxiYWNrQ29tcG9zaXRpb25EYXRhICYmXG4gICAgICAgICAgXCJrb1wiICE9PSBuYXRpdmVFdmVudC5sb2NhbGUgJiZcbiAgICAgICAgICAoaXNDb21wb3NpbmcgfHwgXCJvbkNvbXBvc2l0aW9uU3RhcnRcIiAhPT0gZXZlbnRUeXBlXG4gICAgICAgICAgICA/IFwib25Db21wb3NpdGlvbkVuZFwiID09PSBldmVudFR5cGUgJiZcbiAgICAgICAgICAgICAgaXNDb21wb3NpbmcgJiZcbiAgICAgICAgICAgICAgKGZhbGxiYWNrRGF0YSA9IGdldERhdGEoKSlcbiAgICAgICAgICAgIDogKChyb290ID0gbmF0aXZlRXZlbnRUYXJnZXQpLFxuICAgICAgICAgICAgICAoc3RhcnRUZXh0ID0gXCJ2YWx1ZVwiIGluIHJvb3QgPyByb290LnZhbHVlIDogcm9vdC50ZXh0Q29udGVudCksXG4gICAgICAgICAgICAgIChpc0NvbXBvc2luZyA9ICEwKSkpLFxuICAgICAgICAoaGFuZGxlRXZlbnRGdW5jID0gYWNjdW11bGF0ZVR3b1BoYXNlTGlzdGVuZXJzKHRhcmdldEluc3QsIGV2ZW50VHlwZSkpLFxuICAgICAgICAwIDwgaGFuZGxlRXZlbnRGdW5jLmxlbmd0aCAmJlxuICAgICAgICAgICgoZXZlbnRUeXBlID0gbmV3IFN5bnRoZXRpY0NvbXBvc2l0aW9uRXZlbnQoXG4gICAgICAgICAgICBldmVudFR5cGUsXG4gICAgICAgICAgICBkb21FdmVudE5hbWUsXG4gICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgbmF0aXZlRXZlbnQsXG4gICAgICAgICAgICBuYXRpdmVFdmVudFRhcmdldFxuICAgICAgICAgICkpLFxuICAgICAgICAgIGRpc3BhdGNoUXVldWUucHVzaCh7IGV2ZW50OiBldmVudFR5cGUsIGxpc3RlbmVyczogaGFuZGxlRXZlbnRGdW5jIH0pLFxuICAgICAgICAgIGZhbGxiYWNrRGF0YVxuICAgICAgICAgICAgPyAoZXZlbnRUeXBlLmRhdGEgPSBmYWxsYmFja0RhdGEpXG4gICAgICAgICAgICA6ICgoZmFsbGJhY2tEYXRhID0gZ2V0RGF0YUZyb21DdXN0b21FdmVudChuYXRpdmVFdmVudCkpLFxuICAgICAgICAgICAgICBudWxsICE9PSBmYWxsYmFja0RhdGEgJiYgKGV2ZW50VHlwZS5kYXRhID0gZmFsbGJhY2tEYXRhKSkpKTtcbiAgICAgIGlmIChcbiAgICAgICAgKGZhbGxiYWNrRGF0YSA9IGNhblVzZVRleHRJbnB1dEV2ZW50XG4gICAgICAgICAgPyBnZXROYXRpdmVCZWZvcmVJbnB1dENoYXJzKGRvbUV2ZW50TmFtZSwgbmF0aXZlRXZlbnQpXG4gICAgICAgICAgOiBnZXRGYWxsYmFja0JlZm9yZUlucHV0Q2hhcnMoZG9tRXZlbnROYW1lLCBuYXRpdmVFdmVudCkpXG4gICAgICApXG4gICAgICAgIChldmVudFR5cGUgPSBhY2N1bXVsYXRlVHdvUGhhc2VMaXN0ZW5lcnModGFyZ2V0SW5zdCwgXCJvbkJlZm9yZUlucHV0XCIpKSxcbiAgICAgICAgICAwIDwgZXZlbnRUeXBlLmxlbmd0aCAmJlxuICAgICAgICAgICAgKChoYW5kbGVFdmVudEZ1bmMgPSBuZXcgU3ludGhldGljQ29tcG9zaXRpb25FdmVudChcbiAgICAgICAgICAgICAgXCJvbkJlZm9yZUlucHV0XCIsXG4gICAgICAgICAgICAgIFwiYmVmb3JlaW5wdXRcIixcbiAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgbmF0aXZlRXZlbnQsXG4gICAgICAgICAgICAgIG5hdGl2ZUV2ZW50VGFyZ2V0XG4gICAgICAgICAgICApKSxcbiAgICAgICAgICAgIGRpc3BhdGNoUXVldWUucHVzaCh7XG4gICAgICAgICAgICAgIGV2ZW50OiBoYW5kbGVFdmVudEZ1bmMsXG4gICAgICAgICAgICAgIGxpc3RlbmVyczogZXZlbnRUeXBlXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIChoYW5kbGVFdmVudEZ1bmMuZGF0YSA9IGZhbGxiYWNrRGF0YSkpO1xuICAgICAgZXh0cmFjdEV2ZW50cyQxKFxuICAgICAgICBkaXNwYXRjaFF1ZXVlLFxuICAgICAgICBkb21FdmVudE5hbWUsXG4gICAgICAgIHRhcmdldEluc3QsXG4gICAgICAgIG5hdGl2ZUV2ZW50LFxuICAgICAgICBuYXRpdmVFdmVudFRhcmdldFxuICAgICAgKTtcbiAgICB9XG4gICAgcHJvY2Vzc0Rpc3BhdGNoUXVldWUoZGlzcGF0Y2hRdWV1ZSwgZXZlbnRTeXN0ZW1GbGFncyk7XG4gIH0pO1xufVxuZnVuY3Rpb24gY3JlYXRlRGlzcGF0Y2hMaXN0ZW5lcihpbnN0YW5jZSwgbGlzdGVuZXIsIGN1cnJlbnRUYXJnZXQpIHtcbiAgcmV0dXJuIHtcbiAgICBpbnN0YW5jZTogaW5zdGFuY2UsXG4gICAgbGlzdGVuZXI6IGxpc3RlbmVyLFxuICAgIGN1cnJlbnRUYXJnZXQ6IGN1cnJlbnRUYXJnZXRcbiAgfTtcbn1cbmZ1bmN0aW9uIGFjY3VtdWxhdGVUd29QaGFzZUxpc3RlbmVycyh0YXJnZXRGaWJlciwgcmVhY3ROYW1lKSB7XG4gIGZvciAoXG4gICAgdmFyIGNhcHR1cmVOYW1lID0gcmVhY3ROYW1lICsgXCJDYXB0dXJlXCIsIGxpc3RlbmVycyA9IFtdO1xuICAgIG51bGwgIT09IHRhcmdldEZpYmVyO1xuXG4gICkge1xuICAgIHZhciBfaW5zdGFuY2UyID0gdGFyZ2V0RmliZXIsXG4gICAgICBzdGF0ZU5vZGUgPSBfaW5zdGFuY2UyLnN0YXRlTm9kZTtcbiAgICBfaW5zdGFuY2UyID0gX2luc3RhbmNlMi50YWc7XG4gICAgKDUgIT09IF9pbnN0YW5jZTIgJiYgMjYgIT09IF9pbnN0YW5jZTIgJiYgMjcgIT09IF9pbnN0YW5jZTIpIHx8XG4gICAgICBudWxsID09PSBzdGF0ZU5vZGUgfHxcbiAgICAgICgoX2luc3RhbmNlMiA9IGdldExpc3RlbmVyKHRhcmdldEZpYmVyLCBjYXB0dXJlTmFtZSkpLFxuICAgICAgbnVsbCAhPSBfaW5zdGFuY2UyICYmXG4gICAgICAgIGxpc3RlbmVycy51bnNoaWZ0KFxuICAgICAgICAgIGNyZWF0ZURpc3BhdGNoTGlzdGVuZXIodGFyZ2V0RmliZXIsIF9pbnN0YW5jZTIsIHN0YXRlTm9kZSlcbiAgICAgICAgKSxcbiAgICAgIChfaW5zdGFuY2UyID0gZ2V0TGlzdGVuZXIodGFyZ2V0RmliZXIsIHJlYWN0TmFtZSkpLFxuICAgICAgbnVsbCAhPSBfaW5zdGFuY2UyICYmXG4gICAgICAgIGxpc3RlbmVycy5wdXNoKFxuICAgICAgICAgIGNyZWF0ZURpc3BhdGNoTGlzdGVuZXIodGFyZ2V0RmliZXIsIF9pbnN0YW5jZTIsIHN0YXRlTm9kZSlcbiAgICAgICAgKSk7XG4gICAgdGFyZ2V0RmliZXIgPSB0YXJnZXRGaWJlci5yZXR1cm47XG4gIH1cbiAgcmV0dXJuIGxpc3RlbmVycztcbn1cbmZ1bmN0aW9uIGdldFBhcmVudChpbnN0KSB7XG4gIGlmIChudWxsID09PSBpbnN0KSByZXR1cm4gbnVsbDtcbiAgZG8gaW5zdCA9IGluc3QucmV0dXJuO1xuICB3aGlsZSAoaW5zdCAmJiA1ICE9PSBpbnN0LnRhZyAmJiAyNyAhPT0gaW5zdC50YWcpO1xuICByZXR1cm4gaW5zdCA/IGluc3QgOiBudWxsO1xufVxuZnVuY3Rpb24gYWNjdW11bGF0ZUVudGVyTGVhdmVMaXN0ZW5lcnNGb3JFdmVudChcbiAgZGlzcGF0Y2hRdWV1ZSxcbiAgZXZlbnQsXG4gIHRhcmdldCxcbiAgY29tbW9uLFxuICBpbkNhcHR1cmVQaGFzZVxuKSB7XG4gIGZvciAoXG4gICAgdmFyIHJlZ2lzdHJhdGlvbk5hbWUgPSBldmVudC5fcmVhY3ROYW1lLCBsaXN0ZW5lcnMgPSBbXTtcbiAgICBudWxsICE9PSB0YXJnZXQgJiYgdGFyZ2V0ICE9PSBjb21tb247XG5cbiAgKSB7XG4gICAgdmFyIF9pbnN0YW5jZTMgPSB0YXJnZXQsXG4gICAgICBhbHRlcm5hdGUgPSBfaW5zdGFuY2UzLmFsdGVybmF0ZSxcbiAgICAgIHN0YXRlTm9kZSA9IF9pbnN0YW5jZTMuc3RhdGVOb2RlO1xuICAgIF9pbnN0YW5jZTMgPSBfaW5zdGFuY2UzLnRhZztcbiAgICBpZiAobnVsbCAhPT0gYWx0ZXJuYXRlICYmIGFsdGVybmF0ZSA9PT0gY29tbW9uKSBicmVhaztcbiAgICAoNSAhPT0gX2luc3RhbmNlMyAmJiAyNiAhPT0gX2luc3RhbmNlMyAmJiAyNyAhPT0gX2luc3RhbmNlMykgfHxcbiAgICAgIG51bGwgPT09IHN0YXRlTm9kZSB8fFxuICAgICAgKChhbHRlcm5hdGUgPSBzdGF0ZU5vZGUpLFxuICAgICAgaW5DYXB0dXJlUGhhc2VcbiAgICAgICAgPyAoKHN0YXRlTm9kZSA9IGdldExpc3RlbmVyKHRhcmdldCwgcmVnaXN0cmF0aW9uTmFtZSkpLFxuICAgICAgICAgIG51bGwgIT0gc3RhdGVOb2RlICYmXG4gICAgICAgICAgICBsaXN0ZW5lcnMudW5zaGlmdChcbiAgICAgICAgICAgICAgY3JlYXRlRGlzcGF0Y2hMaXN0ZW5lcih0YXJnZXQsIHN0YXRlTm9kZSwgYWx0ZXJuYXRlKVxuICAgICAgICAgICAgKSlcbiAgICAgICAgOiBpbkNhcHR1cmVQaGFzZSB8fFxuICAgICAgICAgICgoc3RhdGVOb2RlID0gZ2V0TGlzdGVuZXIodGFyZ2V0LCByZWdpc3RyYXRpb25OYW1lKSksXG4gICAgICAgICAgbnVsbCAhPSBzdGF0ZU5vZGUgJiZcbiAgICAgICAgICAgIGxpc3RlbmVycy5wdXNoKFxuICAgICAgICAgICAgICBjcmVhdGVEaXNwYXRjaExpc3RlbmVyKHRhcmdldCwgc3RhdGVOb2RlLCBhbHRlcm5hdGUpXG4gICAgICAgICAgICApKSk7XG4gICAgdGFyZ2V0ID0gdGFyZ2V0LnJldHVybjtcbiAgfVxuICAwICE9PSBsaXN0ZW5lcnMubGVuZ3RoICYmXG4gICAgZGlzcGF0Y2hRdWV1ZS5wdXNoKHsgZXZlbnQ6IGV2ZW50LCBsaXN0ZW5lcnM6IGxpc3RlbmVycyB9KTtcbn1cbnZhciBOT1JNQUxJWkVfTkVXTElORVNfUkVHRVggPSAvXFxyXFxuPy9nLFxuICBOT1JNQUxJWkVfTlVMTF9BTkRfUkVQTEFDRU1FTlRfUkVHRVggPSAvXFx1MDAwMHxcXHVGRkZEL2c7XG5mdW5jdGlvbiBub3JtYWxpemVNYXJrdXBGb3JUZXh0T3JBdHRyaWJ1dGUobWFya3VwKSB7XG4gIHJldHVybiAoXCJzdHJpbmdcIiA9PT0gdHlwZW9mIG1hcmt1cCA/IG1hcmt1cCA6IFwiXCIgKyBtYXJrdXApXG4gICAgLnJlcGxhY2UoTk9STUFMSVpFX05FV0xJTkVTX1JFR0VYLCBcIlxcblwiKVxuICAgIC5yZXBsYWNlKE5PUk1BTElaRV9OVUxMX0FORF9SRVBMQUNFTUVOVF9SRUdFWCwgXCJcIik7XG59XG5mdW5jdGlvbiBjaGVja0ZvclVubWF0Y2hlZFRleHQoc2VydmVyVGV4dCwgY2xpZW50VGV4dCkge1xuICBjbGllbnRUZXh0ID0gbm9ybWFsaXplTWFya3VwRm9yVGV4dE9yQXR0cmlidXRlKGNsaWVudFRleHQpO1xuICByZXR1cm4gbm9ybWFsaXplTWFya3VwRm9yVGV4dE9yQXR0cmlidXRlKHNlcnZlclRleHQpID09PSBjbGllbnRUZXh0ID8gITAgOiAhMTtcbn1cbmZ1bmN0aW9uIG5vb3AkMSgpIHt9XG5mdW5jdGlvbiBzZXRQcm9wKGRvbUVsZW1lbnQsIHRhZywga2V5LCB2YWx1ZSwgcHJvcHMsIHByZXZWYWx1ZSkge1xuICBzd2l0Y2ggKGtleSkge1xuICAgIGNhc2UgXCJjaGlsZHJlblwiOlxuICAgICAgXCJzdHJpbmdcIiA9PT0gdHlwZW9mIHZhbHVlXG4gICAgICAgID8gXCJib2R5XCIgPT09IHRhZyB8fFxuICAgICAgICAgIChcInRleHRhcmVhXCIgPT09IHRhZyAmJiBcIlwiID09PSB2YWx1ZSkgfHxcbiAgICAgICAgICBzZXRUZXh0Q29udGVudChkb21FbGVtZW50LCB2YWx1ZSlcbiAgICAgICAgOiAoXCJudW1iZXJcIiA9PT0gdHlwZW9mIHZhbHVlIHx8IFwiYmlnaW50XCIgPT09IHR5cGVvZiB2YWx1ZSkgJiZcbiAgICAgICAgICBcImJvZHlcIiAhPT0gdGFnICYmXG4gICAgICAgICAgc2V0VGV4dENvbnRlbnQoZG9tRWxlbWVudCwgXCJcIiArIHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJjbGFzc05hbWVcIjpcbiAgICAgIHNldFZhbHVlRm9yS25vd25BdHRyaWJ1dGUoZG9tRWxlbWVudCwgXCJjbGFzc1wiLCB2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwidGFiSW5kZXhcIjpcbiAgICAgIHNldFZhbHVlRm9yS25vd25BdHRyaWJ1dGUoZG9tRWxlbWVudCwgXCJ0YWJpbmRleFwiLCB2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiZGlyXCI6XG4gICAgY2FzZSBcInJvbGVcIjpcbiAgICBjYXNlIFwidmlld0JveFwiOlxuICAgIGNhc2UgXCJ3aWR0aFwiOlxuICAgIGNhc2UgXCJoZWlnaHRcIjpcbiAgICAgIHNldFZhbHVlRm9yS25vd25BdHRyaWJ1dGUoZG9tRWxlbWVudCwga2V5LCB2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwic3R5bGVcIjpcbiAgICAgIHNldFZhbHVlRm9yU3R5bGVzKGRvbUVsZW1lbnQsIHZhbHVlLCBwcmV2VmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcImRhdGFcIjpcbiAgICAgIGlmIChcIm9iamVjdFwiICE9PSB0YWcpIHtcbiAgICAgICAgc2V0VmFsdWVGb3JLbm93bkF0dHJpYnV0ZShkb21FbGVtZW50LCBcImRhdGFcIiwgdmFsdWUpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICBjYXNlIFwic3JjXCI6XG4gICAgY2FzZSBcImhyZWZcIjpcbiAgICAgIGlmIChcIlwiID09PSB2YWx1ZSAmJiAoXCJhXCIgIT09IHRhZyB8fCBcImhyZWZcIiAhPT0ga2V5KSkge1xuICAgICAgICBkb21FbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShrZXkpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGlmIChcbiAgICAgICAgbnVsbCA9PSB2YWx1ZSB8fFxuICAgICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiB2YWx1ZSB8fFxuICAgICAgICBcInN5bWJvbFwiID09PSB0eXBlb2YgdmFsdWUgfHxcbiAgICAgICAgXCJib29sZWFuXCIgPT09IHR5cGVvZiB2YWx1ZVxuICAgICAgKSB7XG4gICAgICAgIGRvbUVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKGtleSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgdmFsdWUgPSBzYW5pdGl6ZVVSTChcIlwiICsgdmFsdWUpO1xuICAgICAgZG9tRWxlbWVudC5zZXRBdHRyaWJ1dGUoa2V5LCB2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiYWN0aW9uXCI6XG4gICAgY2FzZSBcImZvcm1BY3Rpb25cIjpcbiAgICAgIGlmIChcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiB2YWx1ZSkge1xuICAgICAgICBkb21FbGVtZW50LnNldEF0dHJpYnV0ZShcbiAgICAgICAgICBrZXksXG4gICAgICAgICAgXCJqYXZhc2NyaXB0OnRocm93IG5ldyBFcnJvcignQSBSZWFjdCBmb3JtIHdhcyB1bmV4cGVjdGVkbHkgc3VibWl0dGVkLiBJZiB5b3UgY2FsbGVkIGZvcm0uc3VibWl0KCkgbWFudWFsbHksIGNvbnNpZGVyIHVzaW5nIGZvcm0ucmVxdWVzdFN1Ym1pdCgpIGluc3RlYWQuIElmIHlvdVxcXFwncmUgdHJ5aW5nIHRvIHVzZSBldmVudC5zdG9wUHJvcGFnYXRpb24oKSBpbiBhIHN1Ym1pdCBldmVudCBoYW5kbGVyLCBjb25zaWRlciBhbHNvIGNhbGxpbmcgZXZlbnQucHJldmVudERlZmF1bHQoKS4nKVwiXG4gICAgICAgICk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfSBlbHNlXG4gICAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHByZXZWYWx1ZSAmJlxuICAgICAgICAgIChcImZvcm1BY3Rpb25cIiA9PT0ga2V5XG4gICAgICAgICAgICA/IChcImlucHV0XCIgIT09IHRhZyAmJlxuICAgICAgICAgICAgICAgIHNldFByb3AoZG9tRWxlbWVudCwgdGFnLCBcIm5hbWVcIiwgcHJvcHMubmFtZSwgcHJvcHMsIG51bGwpLFxuICAgICAgICAgICAgICBzZXRQcm9wKFxuICAgICAgICAgICAgICAgIGRvbUVsZW1lbnQsXG4gICAgICAgICAgICAgICAgdGFnLFxuICAgICAgICAgICAgICAgIFwiZm9ybUVuY1R5cGVcIixcbiAgICAgICAgICAgICAgICBwcm9wcy5mb3JtRW5jVHlwZSxcbiAgICAgICAgICAgICAgICBwcm9wcyxcbiAgICAgICAgICAgICAgICBudWxsXG4gICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgIHNldFByb3AoXG4gICAgICAgICAgICAgICAgZG9tRWxlbWVudCxcbiAgICAgICAgICAgICAgICB0YWcsXG4gICAgICAgICAgICAgICAgXCJmb3JtTWV0aG9kXCIsXG4gICAgICAgICAgICAgICAgcHJvcHMuZm9ybU1ldGhvZCxcbiAgICAgICAgICAgICAgICBwcm9wcyxcbiAgICAgICAgICAgICAgICBudWxsXG4gICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgIHNldFByb3AoXG4gICAgICAgICAgICAgICAgZG9tRWxlbWVudCxcbiAgICAgICAgICAgICAgICB0YWcsXG4gICAgICAgICAgICAgICAgXCJmb3JtVGFyZ2V0XCIsXG4gICAgICAgICAgICAgICAgcHJvcHMuZm9ybVRhcmdldCxcbiAgICAgICAgICAgICAgICBwcm9wcyxcbiAgICAgICAgICAgICAgICBudWxsXG4gICAgICAgICAgICAgICkpXG4gICAgICAgICAgICA6IChzZXRQcm9wKGRvbUVsZW1lbnQsIHRhZywgXCJlbmNUeXBlXCIsIHByb3BzLmVuY1R5cGUsIHByb3BzLCBudWxsKSxcbiAgICAgICAgICAgICAgc2V0UHJvcChkb21FbGVtZW50LCB0YWcsIFwibWV0aG9kXCIsIHByb3BzLm1ldGhvZCwgcHJvcHMsIG51bGwpLFxuICAgICAgICAgICAgICBzZXRQcm9wKGRvbUVsZW1lbnQsIHRhZywgXCJ0YXJnZXRcIiwgcHJvcHMudGFyZ2V0LCBwcm9wcywgbnVsbCkpKTtcbiAgICAgIGlmIChcbiAgICAgICAgbnVsbCA9PSB2YWx1ZSB8fFxuICAgICAgICBcInN5bWJvbFwiID09PSB0eXBlb2YgdmFsdWUgfHxcbiAgICAgICAgXCJib29sZWFuXCIgPT09IHR5cGVvZiB2YWx1ZVxuICAgICAgKSB7XG4gICAgICAgIGRvbUVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKGtleSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgdmFsdWUgPSBzYW5pdGl6ZVVSTChcIlwiICsgdmFsdWUpO1xuICAgICAgZG9tRWxlbWVudC5zZXRBdHRyaWJ1dGUoa2V5LCB2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwib25DbGlja1wiOlxuICAgICAgbnVsbCAhPSB2YWx1ZSAmJiAoZG9tRWxlbWVudC5vbmNsaWNrID0gbm9vcCQxKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJvblNjcm9sbFwiOlxuICAgICAgbnVsbCAhPSB2YWx1ZSAmJiBsaXN0ZW5Ub05vbkRlbGVnYXRlZEV2ZW50KFwic2Nyb2xsXCIsIGRvbUVsZW1lbnQpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcIm9uU2Nyb2xsRW5kXCI6XG4gICAgICBudWxsICE9IHZhbHVlICYmIGxpc3RlblRvTm9uRGVsZWdhdGVkRXZlbnQoXCJzY3JvbGxlbmRcIiwgZG9tRWxlbWVudCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIjpcbiAgICAgIGlmIChudWxsICE9IHZhbHVlKSB7XG4gICAgICAgIGlmIChcIm9iamVjdFwiICE9PSB0eXBlb2YgdmFsdWUgfHwgIShcIl9faHRtbFwiIGluIHZhbHVlKSlcbiAgICAgICAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDYxKSk7XG4gICAgICAgIGtleSA9IHZhbHVlLl9faHRtbDtcbiAgICAgICAgaWYgKG51bGwgIT0ga2V5KSB7XG4gICAgICAgICAgaWYgKG51bGwgIT0gcHJvcHMuY2hpbGRyZW4pIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNjApKTtcbiAgICAgICAgICBkb21FbGVtZW50LmlubmVySFRNTCA9IGtleTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcIm11bHRpcGxlXCI6XG4gICAgICBkb21FbGVtZW50Lm11bHRpcGxlID1cbiAgICAgICAgdmFsdWUgJiYgXCJmdW5jdGlvblwiICE9PSB0eXBlb2YgdmFsdWUgJiYgXCJzeW1ib2xcIiAhPT0gdHlwZW9mIHZhbHVlO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcIm11dGVkXCI6XG4gICAgICBkb21FbGVtZW50Lm11dGVkID1cbiAgICAgICAgdmFsdWUgJiYgXCJmdW5jdGlvblwiICE9PSB0eXBlb2YgdmFsdWUgJiYgXCJzeW1ib2xcIiAhPT0gdHlwZW9mIHZhbHVlO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiOlxuICAgIGNhc2UgXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIjpcbiAgICBjYXNlIFwiZGVmYXVsdFZhbHVlXCI6XG4gICAgY2FzZSBcImRlZmF1bHRDaGVja2VkXCI6XG4gICAgY2FzZSBcImlubmVySFRNTFwiOlxuICAgIGNhc2UgXCJyZWZcIjpcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJhdXRvRm9jdXNcIjpcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJ4bGlua0hyZWZcIjpcbiAgICAgIGlmIChcbiAgICAgICAgbnVsbCA9PSB2YWx1ZSB8fFxuICAgICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiB2YWx1ZSB8fFxuICAgICAgICBcImJvb2xlYW5cIiA9PT0gdHlwZW9mIHZhbHVlIHx8XG4gICAgICAgIFwic3ltYm9sXCIgPT09IHR5cGVvZiB2YWx1ZVxuICAgICAgKSB7XG4gICAgICAgIGRvbUVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKFwieGxpbms6aHJlZlwiKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBrZXkgPSBzYW5pdGl6ZVVSTChcIlwiICsgdmFsdWUpO1xuICAgICAgZG9tRWxlbWVudC5zZXRBdHRyaWJ1dGVOUyhcbiAgICAgICAgXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsXG4gICAgICAgIFwieGxpbms6aHJlZlwiLFxuICAgICAgICBrZXlcbiAgICAgICk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiY29udGVudEVkaXRhYmxlXCI6XG4gICAgY2FzZSBcInNwZWxsQ2hlY2tcIjpcbiAgICBjYXNlIFwiZHJhZ2dhYmxlXCI6XG4gICAgY2FzZSBcInZhbHVlXCI6XG4gICAgY2FzZSBcImF1dG9SZXZlcnNlXCI6XG4gICAgY2FzZSBcImV4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWRcIjpcbiAgICBjYXNlIFwiZm9jdXNhYmxlXCI6XG4gICAgY2FzZSBcInByZXNlcnZlQWxwaGFcIjpcbiAgICAgIG51bGwgIT0gdmFsdWUgJiYgXCJmdW5jdGlvblwiICE9PSB0eXBlb2YgdmFsdWUgJiYgXCJzeW1ib2xcIiAhPT0gdHlwZW9mIHZhbHVlXG4gICAgICAgID8gZG9tRWxlbWVudC5zZXRBdHRyaWJ1dGUoa2V5LCBcIlwiICsgdmFsdWUpXG4gICAgICAgIDogZG9tRWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoa2V5KTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJpbmVydFwiOlxuICAgIGNhc2UgXCJhbGxvd0Z1bGxTY3JlZW5cIjpcbiAgICBjYXNlIFwiYXN5bmNcIjpcbiAgICBjYXNlIFwiYXV0b1BsYXlcIjpcbiAgICBjYXNlIFwiY29udHJvbHNcIjpcbiAgICBjYXNlIFwiZGVmYXVsdFwiOlxuICAgIGNhc2UgXCJkZWZlclwiOlxuICAgIGNhc2UgXCJkaXNhYmxlZFwiOlxuICAgIGNhc2UgXCJkaXNhYmxlUGljdHVyZUluUGljdHVyZVwiOlxuICAgIGNhc2UgXCJkaXNhYmxlUmVtb3RlUGxheWJhY2tcIjpcbiAgICBjYXNlIFwiZm9ybU5vVmFsaWRhdGVcIjpcbiAgICBjYXNlIFwiaGlkZGVuXCI6XG4gICAgY2FzZSBcImxvb3BcIjpcbiAgICBjYXNlIFwibm9Nb2R1bGVcIjpcbiAgICBjYXNlIFwibm9WYWxpZGF0ZVwiOlxuICAgIGNhc2UgXCJvcGVuXCI6XG4gICAgY2FzZSBcInBsYXlzSW5saW5lXCI6XG4gICAgY2FzZSBcInJlYWRPbmx5XCI6XG4gICAgY2FzZSBcInJlcXVpcmVkXCI6XG4gICAgY2FzZSBcInJldmVyc2VkXCI6XG4gICAgY2FzZSBcInNjb3BlZFwiOlxuICAgIGNhc2UgXCJzZWFtbGVzc1wiOlxuICAgIGNhc2UgXCJpdGVtU2NvcGVcIjpcbiAgICAgIHZhbHVlICYmIFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIHZhbHVlICYmIFwic3ltYm9sXCIgIT09IHR5cGVvZiB2YWx1ZVxuICAgICAgICA/IGRvbUVsZW1lbnQuc2V0QXR0cmlidXRlKGtleSwgXCJcIilcbiAgICAgICAgOiBkb21FbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShrZXkpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcImNhcHR1cmVcIjpcbiAgICBjYXNlIFwiZG93bmxvYWRcIjpcbiAgICAgICEwID09PSB2YWx1ZVxuICAgICAgICA/IGRvbUVsZW1lbnQuc2V0QXR0cmlidXRlKGtleSwgXCJcIilcbiAgICAgICAgOiAhMSAhPT0gdmFsdWUgJiZcbiAgICAgICAgICAgIG51bGwgIT0gdmFsdWUgJiZcbiAgICAgICAgICAgIFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIHZhbHVlICYmXG4gICAgICAgICAgICBcInN5bWJvbFwiICE9PSB0eXBlb2YgdmFsdWVcbiAgICAgICAgICA/IGRvbUVsZW1lbnQuc2V0QXR0cmlidXRlKGtleSwgdmFsdWUpXG4gICAgICAgICAgOiBkb21FbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShrZXkpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcImNvbHNcIjpcbiAgICBjYXNlIFwicm93c1wiOlxuICAgIGNhc2UgXCJzaXplXCI6XG4gICAgY2FzZSBcInNwYW5cIjpcbiAgICAgIG51bGwgIT0gdmFsdWUgJiZcbiAgICAgIFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIHZhbHVlICYmXG4gICAgICBcInN5bWJvbFwiICE9PSB0eXBlb2YgdmFsdWUgJiZcbiAgICAgICFpc05hTih2YWx1ZSkgJiZcbiAgICAgIDEgPD0gdmFsdWVcbiAgICAgICAgPyBkb21FbGVtZW50LnNldEF0dHJpYnV0ZShrZXksIHZhbHVlKVxuICAgICAgICA6IGRvbUVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKGtleSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwicm93U3BhblwiOlxuICAgIGNhc2UgXCJzdGFydFwiOlxuICAgICAgbnVsbCA9PSB2YWx1ZSB8fFxuICAgICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgdmFsdWUgfHxcbiAgICAgIFwic3ltYm9sXCIgPT09IHR5cGVvZiB2YWx1ZSB8fFxuICAgICAgaXNOYU4odmFsdWUpXG4gICAgICAgID8gZG9tRWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoa2V5KVxuICAgICAgICA6IGRvbUVsZW1lbnQuc2V0QXR0cmlidXRlKGtleSwgdmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcInBvcG92ZXJcIjpcbiAgICAgIGxpc3RlblRvTm9uRGVsZWdhdGVkRXZlbnQoXCJiZWZvcmV0b2dnbGVcIiwgZG9tRWxlbWVudCk7XG4gICAgICBsaXN0ZW5Ub05vbkRlbGVnYXRlZEV2ZW50KFwidG9nZ2xlXCIsIGRvbUVsZW1lbnQpO1xuICAgICAgc2V0VmFsdWVGb3JBdHRyaWJ1dGUoZG9tRWxlbWVudCwgXCJwb3BvdmVyXCIsIHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJ4bGlua0FjdHVhdGVcIjpcbiAgICAgIHNldFZhbHVlRm9yTmFtZXNwYWNlZEF0dHJpYnV0ZShcbiAgICAgICAgZG9tRWxlbWVudCxcbiAgICAgICAgXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsXG4gICAgICAgIFwieGxpbms6YWN0dWF0ZVwiLFxuICAgICAgICB2YWx1ZVxuICAgICAgKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJ4bGlua0FyY3JvbGVcIjpcbiAgICAgIHNldFZhbHVlRm9yTmFtZXNwYWNlZEF0dHJpYnV0ZShcbiAgICAgICAgZG9tRWxlbWVudCxcbiAgICAgICAgXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsXG4gICAgICAgIFwieGxpbms6YXJjcm9sZVwiLFxuICAgICAgICB2YWx1ZVxuICAgICAgKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJ4bGlua1JvbGVcIjpcbiAgICAgIHNldFZhbHVlRm9yTmFtZXNwYWNlZEF0dHJpYnV0ZShcbiAgICAgICAgZG9tRWxlbWVudCxcbiAgICAgICAgXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsXG4gICAgICAgIFwieGxpbms6cm9sZVwiLFxuICAgICAgICB2YWx1ZVxuICAgICAgKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJ4bGlua1Nob3dcIjpcbiAgICAgIHNldFZhbHVlRm9yTmFtZXNwYWNlZEF0dHJpYnV0ZShcbiAgICAgICAgZG9tRWxlbWVudCxcbiAgICAgICAgXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsXG4gICAgICAgIFwieGxpbms6c2hvd1wiLFxuICAgICAgICB2YWx1ZVxuICAgICAgKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJ4bGlua1RpdGxlXCI6XG4gICAgICBzZXRWYWx1ZUZvck5hbWVzcGFjZWRBdHRyaWJ1dGUoXG4gICAgICAgIGRvbUVsZW1lbnQsXG4gICAgICAgIFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLFxuICAgICAgICBcInhsaW5rOnRpdGxlXCIsXG4gICAgICAgIHZhbHVlXG4gICAgICApO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcInhsaW5rVHlwZVwiOlxuICAgICAgc2V0VmFsdWVGb3JOYW1lc3BhY2VkQXR0cmlidXRlKFxuICAgICAgICBkb21FbGVtZW50LFxuICAgICAgICBcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIixcbiAgICAgICAgXCJ4bGluazp0eXBlXCIsXG4gICAgICAgIHZhbHVlXG4gICAgICApO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcInhtbEJhc2VcIjpcbiAgICAgIHNldFZhbHVlRm9yTmFtZXNwYWNlZEF0dHJpYnV0ZShcbiAgICAgICAgZG9tRWxlbWVudCxcbiAgICAgICAgXCJodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2VcIixcbiAgICAgICAgXCJ4bWw6YmFzZVwiLFxuICAgICAgICB2YWx1ZVxuICAgICAgKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJ4bWxMYW5nXCI6XG4gICAgICBzZXRWYWx1ZUZvck5hbWVzcGFjZWRBdHRyaWJ1dGUoXG4gICAgICAgIGRvbUVsZW1lbnQsXG4gICAgICAgIFwiaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlXCIsXG4gICAgICAgIFwieG1sOmxhbmdcIixcbiAgICAgICAgdmFsdWVcbiAgICAgICk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwieG1sU3BhY2VcIjpcbiAgICAgIHNldFZhbHVlRm9yTmFtZXNwYWNlZEF0dHJpYnV0ZShcbiAgICAgICAgZG9tRWxlbWVudCxcbiAgICAgICAgXCJodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2VcIixcbiAgICAgICAgXCJ4bWw6c3BhY2VcIixcbiAgICAgICAgdmFsdWVcbiAgICAgICk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiaXNcIjpcbiAgICAgIHNldFZhbHVlRm9yQXR0cmlidXRlKGRvbUVsZW1lbnQsIFwiaXNcIiwgdmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcImlubmVyVGV4dFwiOlxuICAgIGNhc2UgXCJ0ZXh0Q29udGVudFwiOlxuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIGlmIChcbiAgICAgICAgISgyIDwga2V5Lmxlbmd0aCkgfHxcbiAgICAgICAgKFwib1wiICE9PSBrZXlbMF0gJiYgXCJPXCIgIT09IGtleVswXSkgfHxcbiAgICAgICAgKFwiblwiICE9PSBrZXlbMV0gJiYgXCJOXCIgIT09IGtleVsxXSlcbiAgICAgIClcbiAgICAgICAgKGtleSA9IGFsaWFzZXMuZ2V0KGtleSkgfHwga2V5KSxcbiAgICAgICAgICBzZXRWYWx1ZUZvckF0dHJpYnV0ZShkb21FbGVtZW50LCBrZXksIHZhbHVlKTtcbiAgfVxufVxuZnVuY3Rpb24gc2V0UHJvcE9uQ3VzdG9tRWxlbWVudChkb21FbGVtZW50LCB0YWcsIGtleSwgdmFsdWUsIHByb3BzLCBwcmV2VmFsdWUpIHtcbiAgc3dpdGNoIChrZXkpIHtcbiAgICBjYXNlIFwic3R5bGVcIjpcbiAgICAgIHNldFZhbHVlRm9yU3R5bGVzKGRvbUVsZW1lbnQsIHZhbHVlLCBwcmV2VmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI6XG4gICAgICBpZiAobnVsbCAhPSB2YWx1ZSkge1xuICAgICAgICBpZiAoXCJvYmplY3RcIiAhPT0gdHlwZW9mIHZhbHVlIHx8ICEoXCJfX2h0bWxcIiBpbiB2YWx1ZSkpXG4gICAgICAgICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg2MSkpO1xuICAgICAgICBrZXkgPSB2YWx1ZS5fX2h0bWw7XG4gICAgICAgIGlmIChudWxsICE9IGtleSkge1xuICAgICAgICAgIGlmIChudWxsICE9IHByb3BzLmNoaWxkcmVuKSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDYwKSk7XG4gICAgICAgICAgZG9tRWxlbWVudC5pbm5lckhUTUwgPSBrZXk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJjaGlsZHJlblwiOlxuICAgICAgXCJzdHJpbmdcIiA9PT0gdHlwZW9mIHZhbHVlXG4gICAgICAgID8gc2V0VGV4dENvbnRlbnQoZG9tRWxlbWVudCwgdmFsdWUpXG4gICAgICAgIDogKFwibnVtYmVyXCIgPT09IHR5cGVvZiB2YWx1ZSB8fCBcImJpZ2ludFwiID09PSB0eXBlb2YgdmFsdWUpICYmXG4gICAgICAgICAgc2V0VGV4dENvbnRlbnQoZG9tRWxlbWVudCwgXCJcIiArIHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJvblNjcm9sbFwiOlxuICAgICAgbnVsbCAhPSB2YWx1ZSAmJiBsaXN0ZW5Ub05vbkRlbGVnYXRlZEV2ZW50KFwic2Nyb2xsXCIsIGRvbUVsZW1lbnQpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcIm9uU2Nyb2xsRW5kXCI6XG4gICAgICBudWxsICE9IHZhbHVlICYmIGxpc3RlblRvTm9uRGVsZWdhdGVkRXZlbnQoXCJzY3JvbGxlbmRcIiwgZG9tRWxlbWVudCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwib25DbGlja1wiOlxuICAgICAgbnVsbCAhPSB2YWx1ZSAmJiAoZG9tRWxlbWVudC5vbmNsaWNrID0gbm9vcCQxKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIjpcbiAgICBjYXNlIFwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCI6XG4gICAgY2FzZSBcImlubmVySFRNTFwiOlxuICAgIGNhc2UgXCJyZWZcIjpcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJpbm5lclRleHRcIjpcbiAgICBjYXNlIFwidGV4dENvbnRlbnRcIjpcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBpZiAoIXJlZ2lzdHJhdGlvbk5hbWVEZXBlbmRlbmNpZXMuaGFzT3duUHJvcGVydHkoa2V5KSlcbiAgICAgICAgYToge1xuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIFwib1wiID09PSBrZXlbMF0gJiZcbiAgICAgICAgICAgIFwiblwiID09PSBrZXlbMV0gJiZcbiAgICAgICAgICAgICgocHJvcHMgPSBrZXkuZW5kc1dpdGgoXCJDYXB0dXJlXCIpKSxcbiAgICAgICAgICAgICh0YWcgPSBrZXkuc2xpY2UoMiwgcHJvcHMgPyBrZXkubGVuZ3RoIC0gNyA6IHZvaWQgMCkpLFxuICAgICAgICAgICAgKHByZXZWYWx1ZSA9IGRvbUVsZW1lbnRbaW50ZXJuYWxQcm9wc0tleV0gfHwgbnVsbCksXG4gICAgICAgICAgICAocHJldlZhbHVlID0gbnVsbCAhPSBwcmV2VmFsdWUgPyBwcmV2VmFsdWVba2V5XSA6IG51bGwpLFxuICAgICAgICAgICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgcHJldlZhbHVlICYmXG4gICAgICAgICAgICAgIGRvbUVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0YWcsIHByZXZWYWx1ZSwgcHJvcHMpLFxuICAgICAgICAgICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgdmFsdWUpXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICBcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiBwcmV2VmFsdWUgJiZcbiAgICAgICAgICAgICAgbnVsbCAhPT0gcHJldlZhbHVlICYmXG4gICAgICAgICAgICAgIChrZXkgaW4gZG9tRWxlbWVudFxuICAgICAgICAgICAgICAgID8gKGRvbUVsZW1lbnRba2V5XSA9IG51bGwpXG4gICAgICAgICAgICAgICAgOiBkb21FbGVtZW50Lmhhc0F0dHJpYnV0ZShrZXkpICYmXG4gICAgICAgICAgICAgICAgICBkb21FbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShrZXkpKTtcbiAgICAgICAgICAgIGRvbUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcih0YWcsIHZhbHVlLCBwcm9wcyk7XG4gICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgIH1cbiAgICAgICAgICBrZXkgaW4gZG9tRWxlbWVudFxuICAgICAgICAgICAgPyAoZG9tRWxlbWVudFtrZXldID0gdmFsdWUpXG4gICAgICAgICAgICA6ICEwID09PSB2YWx1ZVxuICAgICAgICAgICAgICA/IGRvbUVsZW1lbnQuc2V0QXR0cmlidXRlKGtleSwgXCJcIilcbiAgICAgICAgICAgICAgOiBzZXRWYWx1ZUZvckF0dHJpYnV0ZShkb21FbGVtZW50LCBrZXksIHZhbHVlKTtcbiAgICAgICAgfVxuICB9XG59XG5mdW5jdGlvbiBzZXRJbml0aWFsUHJvcGVydGllcyhkb21FbGVtZW50LCB0YWcsIHByb3BzKSB7XG4gIHN3aXRjaCAodGFnKSB7XG4gICAgY2FzZSBcImRpdlwiOlxuICAgIGNhc2UgXCJzcGFuXCI6XG4gICAgY2FzZSBcInN2Z1wiOlxuICAgIGNhc2UgXCJwYXRoXCI6XG4gICAgY2FzZSBcImFcIjpcbiAgICBjYXNlIFwiZ1wiOlxuICAgIGNhc2UgXCJwXCI6XG4gICAgY2FzZSBcImxpXCI6XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiaW1nXCI6XG4gICAgICBsaXN0ZW5Ub05vbkRlbGVnYXRlZEV2ZW50KFwiZXJyb3JcIiwgZG9tRWxlbWVudCk7XG4gICAgICBsaXN0ZW5Ub05vbkRlbGVnYXRlZEV2ZW50KFwibG9hZFwiLCBkb21FbGVtZW50KTtcbiAgICAgIHZhciBoYXNTcmMgPSAhMSxcbiAgICAgICAgaGFzU3JjU2V0ID0gITEsXG4gICAgICAgIHByb3BLZXk7XG4gICAgICBmb3IgKHByb3BLZXkgaW4gcHJvcHMpXG4gICAgICAgIGlmIChwcm9wcy5oYXNPd25Qcm9wZXJ0eShwcm9wS2V5KSkge1xuICAgICAgICAgIHZhciBwcm9wVmFsdWUgPSBwcm9wc1twcm9wS2V5XTtcbiAgICAgICAgICBpZiAobnVsbCAhPSBwcm9wVmFsdWUpXG4gICAgICAgICAgICBzd2l0Y2ggKHByb3BLZXkpIHtcbiAgICAgICAgICAgICAgY2FzZSBcInNyY1wiOlxuICAgICAgICAgICAgICAgIGhhc1NyYyA9ICEwO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIFwic3JjU2V0XCI6XG4gICAgICAgICAgICAgICAgaGFzU3JjU2V0ID0gITA7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgXCJjaGlsZHJlblwiOlxuICAgICAgICAgICAgICBjYXNlIFwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIjpcbiAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDEzNywgdGFnKSk7XG4gICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgc2V0UHJvcChkb21FbGVtZW50LCB0YWcsIHByb3BLZXksIHByb3BWYWx1ZSwgcHJvcHMsIG51bGwpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICBoYXNTcmNTZXQgJiZcbiAgICAgICAgc2V0UHJvcChkb21FbGVtZW50LCB0YWcsIFwic3JjU2V0XCIsIHByb3BzLnNyY1NldCwgcHJvcHMsIG51bGwpO1xuICAgICAgaGFzU3JjICYmIHNldFByb3AoZG9tRWxlbWVudCwgdGFnLCBcInNyY1wiLCBwcm9wcy5zcmMsIHByb3BzLCBudWxsKTtcbiAgICAgIHJldHVybjtcbiAgICBjYXNlIFwiaW5wdXRcIjpcbiAgICAgIGxpc3RlblRvTm9uRGVsZWdhdGVkRXZlbnQoXCJpbnZhbGlkXCIsIGRvbUVsZW1lbnQpO1xuICAgICAgdmFyIGRlZmF1bHRWYWx1ZSA9IChwcm9wS2V5ID0gcHJvcFZhbHVlID0gaGFzU3JjU2V0ID0gbnVsbCksXG4gICAgICAgIGNoZWNrZWQgPSBudWxsLFxuICAgICAgICBkZWZhdWx0Q2hlY2tlZCA9IG51bGw7XG4gICAgICBmb3IgKGhhc1NyYyBpbiBwcm9wcylcbiAgICAgICAgaWYgKHByb3BzLmhhc093blByb3BlcnR5KGhhc1NyYykpIHtcbiAgICAgICAgICB2YXIgcHJvcFZhbHVlJDE4NiA9IHByb3BzW2hhc1NyY107XG4gICAgICAgICAgaWYgKG51bGwgIT0gcHJvcFZhbHVlJDE4NilcbiAgICAgICAgICAgIHN3aXRjaCAoaGFzU3JjKSB7XG4gICAgICAgICAgICAgIGNhc2UgXCJuYW1lXCI6XG4gICAgICAgICAgICAgICAgaGFzU3JjU2V0ID0gcHJvcFZhbHVlJDE4NjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSBcInR5cGVcIjpcbiAgICAgICAgICAgICAgICBwcm9wVmFsdWUgPSBwcm9wVmFsdWUkMTg2O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIFwiY2hlY2tlZFwiOlxuICAgICAgICAgICAgICAgIGNoZWNrZWQgPSBwcm9wVmFsdWUkMTg2O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIFwiZGVmYXVsdENoZWNrZWRcIjpcbiAgICAgICAgICAgICAgICBkZWZhdWx0Q2hlY2tlZCA9IHByb3BWYWx1ZSQxODY7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgXCJ2YWx1ZVwiOlxuICAgICAgICAgICAgICAgIHByb3BLZXkgPSBwcm9wVmFsdWUkMTg2O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIFwiZGVmYXVsdFZhbHVlXCI6XG4gICAgICAgICAgICAgICAgZGVmYXVsdFZhbHVlID0gcHJvcFZhbHVlJDE4NjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSBcImNoaWxkcmVuXCI6XG4gICAgICAgICAgICAgIGNhc2UgXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiOlxuICAgICAgICAgICAgICAgIGlmIChudWxsICE9IHByb3BWYWx1ZSQxODYpXG4gICAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDEzNywgdGFnKSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgc2V0UHJvcChkb21FbGVtZW50LCB0YWcsIGhhc1NyYywgcHJvcFZhbHVlJDE4NiwgcHJvcHMsIG51bGwpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICBpbml0SW5wdXQoXG4gICAgICAgIGRvbUVsZW1lbnQsXG4gICAgICAgIHByb3BLZXksXG4gICAgICAgIGRlZmF1bHRWYWx1ZSxcbiAgICAgICAgY2hlY2tlZCxcbiAgICAgICAgZGVmYXVsdENoZWNrZWQsXG4gICAgICAgIHByb3BWYWx1ZSxcbiAgICAgICAgaGFzU3JjU2V0LFxuICAgICAgICAhMVxuICAgICAgKTtcbiAgICAgIHRyYWNrKGRvbUVsZW1lbnQpO1xuICAgICAgcmV0dXJuO1xuICAgIGNhc2UgXCJzZWxlY3RcIjpcbiAgICAgIGxpc3RlblRvTm9uRGVsZWdhdGVkRXZlbnQoXCJpbnZhbGlkXCIsIGRvbUVsZW1lbnQpO1xuICAgICAgaGFzU3JjID0gcHJvcFZhbHVlID0gcHJvcEtleSA9IG51bGw7XG4gICAgICBmb3IgKGhhc1NyY1NldCBpbiBwcm9wcylcbiAgICAgICAgaWYgKFxuICAgICAgICAgIHByb3BzLmhhc093blByb3BlcnR5KGhhc1NyY1NldCkgJiZcbiAgICAgICAgICAoKGRlZmF1bHRWYWx1ZSA9IHByb3BzW2hhc1NyY1NldF0pLCBudWxsICE9IGRlZmF1bHRWYWx1ZSlcbiAgICAgICAgKVxuICAgICAgICAgIHN3aXRjaCAoaGFzU3JjU2V0KSB7XG4gICAgICAgICAgICBjYXNlIFwidmFsdWVcIjpcbiAgICAgICAgICAgICAgcHJvcEtleSA9IGRlZmF1bHRWYWx1ZTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiZGVmYXVsdFZhbHVlXCI6XG4gICAgICAgICAgICAgIHByb3BWYWx1ZSA9IGRlZmF1bHRWYWx1ZTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwibXVsdGlwbGVcIjpcbiAgICAgICAgICAgICAgaGFzU3JjID0gZGVmYXVsdFZhbHVlO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgc2V0UHJvcChkb21FbGVtZW50LCB0YWcsIGhhc1NyY1NldCwgZGVmYXVsdFZhbHVlLCBwcm9wcywgbnVsbCk7XG4gICAgICAgICAgfVxuICAgICAgdGFnID0gcHJvcEtleTtcbiAgICAgIHByb3BzID0gcHJvcFZhbHVlO1xuICAgICAgZG9tRWxlbWVudC5tdWx0aXBsZSA9ICEhaGFzU3JjO1xuICAgICAgbnVsbCAhPSB0YWdcbiAgICAgICAgPyB1cGRhdGVPcHRpb25zKGRvbUVsZW1lbnQsICEhaGFzU3JjLCB0YWcsICExKVxuICAgICAgICA6IG51bGwgIT0gcHJvcHMgJiYgdXBkYXRlT3B0aW9ucyhkb21FbGVtZW50LCAhIWhhc1NyYywgcHJvcHMsICEwKTtcbiAgICAgIHJldHVybjtcbiAgICBjYXNlIFwidGV4dGFyZWFcIjpcbiAgICAgIGxpc3RlblRvTm9uRGVsZWdhdGVkRXZlbnQoXCJpbnZhbGlkXCIsIGRvbUVsZW1lbnQpO1xuICAgICAgcHJvcEtleSA9IGhhc1NyY1NldCA9IGhhc1NyYyA9IG51bGw7XG4gICAgICBmb3IgKHByb3BWYWx1ZSBpbiBwcm9wcylcbiAgICAgICAgaWYgKFxuICAgICAgICAgIHByb3BzLmhhc093blByb3BlcnR5KHByb3BWYWx1ZSkgJiZcbiAgICAgICAgICAoKGRlZmF1bHRWYWx1ZSA9IHByb3BzW3Byb3BWYWx1ZV0pLCBudWxsICE9IGRlZmF1bHRWYWx1ZSlcbiAgICAgICAgKVxuICAgICAgICAgIHN3aXRjaCAocHJvcFZhbHVlKSB7XG4gICAgICAgICAgICBjYXNlIFwidmFsdWVcIjpcbiAgICAgICAgICAgICAgaGFzU3JjID0gZGVmYXVsdFZhbHVlO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJkZWZhdWx0VmFsdWVcIjpcbiAgICAgICAgICAgICAgaGFzU3JjU2V0ID0gZGVmYXVsdFZhbHVlO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJjaGlsZHJlblwiOlxuICAgICAgICAgICAgICBwcm9wS2V5ID0gZGVmYXVsdFZhbHVlO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiOlxuICAgICAgICAgICAgICBpZiAobnVsbCAhPSBkZWZhdWx0VmFsdWUpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoOTEpKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICBzZXRQcm9wKGRvbUVsZW1lbnQsIHRhZywgcHJvcFZhbHVlLCBkZWZhdWx0VmFsdWUsIHByb3BzLCBudWxsKTtcbiAgICAgICAgICB9XG4gICAgICBpbml0VGV4dGFyZWEoZG9tRWxlbWVudCwgaGFzU3JjLCBoYXNTcmNTZXQsIHByb3BLZXkpO1xuICAgICAgdHJhY2soZG9tRWxlbWVudCk7XG4gICAgICByZXR1cm47XG4gICAgY2FzZSBcIm9wdGlvblwiOlxuICAgICAgZm9yIChjaGVja2VkIGluIHByb3BzKVxuICAgICAgICBpZiAoXG4gICAgICAgICAgcHJvcHMuaGFzT3duUHJvcGVydHkoY2hlY2tlZCkgJiZcbiAgICAgICAgICAoKGhhc1NyYyA9IHByb3BzW2NoZWNrZWRdKSwgbnVsbCAhPSBoYXNTcmMpXG4gICAgICAgIClcbiAgICAgICAgICBzd2l0Y2ggKGNoZWNrZWQpIHtcbiAgICAgICAgICAgIGNhc2UgXCJzZWxlY3RlZFwiOlxuICAgICAgICAgICAgICBkb21FbGVtZW50LnNlbGVjdGVkID1cbiAgICAgICAgICAgICAgICBoYXNTcmMgJiZcbiAgICAgICAgICAgICAgICBcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiBoYXNTcmMgJiZcbiAgICAgICAgICAgICAgICBcInN5bWJvbFwiICE9PSB0eXBlb2YgaGFzU3JjO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgIHNldFByb3AoZG9tRWxlbWVudCwgdGFnLCBjaGVja2VkLCBoYXNTcmMsIHByb3BzLCBudWxsKTtcbiAgICAgICAgICB9XG4gICAgICByZXR1cm47XG4gICAgY2FzZSBcImRpYWxvZ1wiOlxuICAgICAgbGlzdGVuVG9Ob25EZWxlZ2F0ZWRFdmVudChcImNhbmNlbFwiLCBkb21FbGVtZW50KTtcbiAgICAgIGxpc3RlblRvTm9uRGVsZWdhdGVkRXZlbnQoXCJjbG9zZVwiLCBkb21FbGVtZW50KTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJpZnJhbWVcIjpcbiAgICBjYXNlIFwib2JqZWN0XCI6XG4gICAgICBsaXN0ZW5Ub05vbkRlbGVnYXRlZEV2ZW50KFwibG9hZFwiLCBkb21FbGVtZW50KTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJ2aWRlb1wiOlxuICAgIGNhc2UgXCJhdWRpb1wiOlxuICAgICAgZm9yIChoYXNTcmMgPSAwOyBoYXNTcmMgPCBtZWRpYUV2ZW50VHlwZXMubGVuZ3RoOyBoYXNTcmMrKylcbiAgICAgICAgbGlzdGVuVG9Ob25EZWxlZ2F0ZWRFdmVudChtZWRpYUV2ZW50VHlwZXNbaGFzU3JjXSwgZG9tRWxlbWVudCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiaW1hZ2VcIjpcbiAgICAgIGxpc3RlblRvTm9uRGVsZWdhdGVkRXZlbnQoXCJlcnJvclwiLCBkb21FbGVtZW50KTtcbiAgICAgIGxpc3RlblRvTm9uRGVsZWdhdGVkRXZlbnQoXCJsb2FkXCIsIGRvbUVsZW1lbnQpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcImRldGFpbHNcIjpcbiAgICAgIGxpc3RlblRvTm9uRGVsZWdhdGVkRXZlbnQoXCJ0b2dnbGVcIiwgZG9tRWxlbWVudCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiZW1iZWRcIjpcbiAgICBjYXNlIFwic291cmNlXCI6XG4gICAgY2FzZSBcImxpbmtcIjpcbiAgICAgIGxpc3RlblRvTm9uRGVsZWdhdGVkRXZlbnQoXCJlcnJvclwiLCBkb21FbGVtZW50KSxcbiAgICAgICAgbGlzdGVuVG9Ob25EZWxlZ2F0ZWRFdmVudChcImxvYWRcIiwgZG9tRWxlbWVudCk7XG4gICAgY2FzZSBcImFyZWFcIjpcbiAgICBjYXNlIFwiYmFzZVwiOlxuICAgIGNhc2UgXCJiclwiOlxuICAgIGNhc2UgXCJjb2xcIjpcbiAgICBjYXNlIFwiaHJcIjpcbiAgICBjYXNlIFwia2V5Z2VuXCI6XG4gICAgY2FzZSBcIm1ldGFcIjpcbiAgICBjYXNlIFwicGFyYW1cIjpcbiAgICBjYXNlIFwidHJhY2tcIjpcbiAgICBjYXNlIFwid2JyXCI6XG4gICAgY2FzZSBcIm1lbnVpdGVtXCI6XG4gICAgICBmb3IgKGRlZmF1bHRDaGVja2VkIGluIHByb3BzKVxuICAgICAgICBpZiAoXG4gICAgICAgICAgcHJvcHMuaGFzT3duUHJvcGVydHkoZGVmYXVsdENoZWNrZWQpICYmXG4gICAgICAgICAgKChoYXNTcmMgPSBwcm9wc1tkZWZhdWx0Q2hlY2tlZF0pLCBudWxsICE9IGhhc1NyYylcbiAgICAgICAgKVxuICAgICAgICAgIHN3aXRjaCAoZGVmYXVsdENoZWNrZWQpIHtcbiAgICAgICAgICAgIGNhc2UgXCJjaGlsZHJlblwiOlxuICAgICAgICAgICAgY2FzZSBcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI6XG4gICAgICAgICAgICAgIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTM3LCB0YWcpKTtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgIHNldFByb3AoZG9tRWxlbWVudCwgdGFnLCBkZWZhdWx0Q2hlY2tlZCwgaGFzU3JjLCBwcm9wcywgbnVsbCk7XG4gICAgICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIGRlZmF1bHQ6XG4gICAgICBpZiAoaXNDdXN0b21FbGVtZW50KHRhZykpIHtcbiAgICAgICAgZm9yIChwcm9wVmFsdWUkMTg2IGluIHByb3BzKVxuICAgICAgICAgIHByb3BzLmhhc093blByb3BlcnR5KHByb3BWYWx1ZSQxODYpICYmXG4gICAgICAgICAgICAoKGhhc1NyYyA9IHByb3BzW3Byb3BWYWx1ZSQxODZdKSxcbiAgICAgICAgICAgIHZvaWQgMCAhPT0gaGFzU3JjICYmXG4gICAgICAgICAgICAgIHNldFByb3BPbkN1c3RvbUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgZG9tRWxlbWVudCxcbiAgICAgICAgICAgICAgICB0YWcsXG4gICAgICAgICAgICAgICAgcHJvcFZhbHVlJDE4NixcbiAgICAgICAgICAgICAgICBoYXNTcmMsXG4gICAgICAgICAgICAgICAgcHJvcHMsXG4gICAgICAgICAgICAgICAgdm9pZCAwXG4gICAgICAgICAgICAgICkpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gIH1cbiAgZm9yIChkZWZhdWx0VmFsdWUgaW4gcHJvcHMpXG4gICAgcHJvcHMuaGFzT3duUHJvcGVydHkoZGVmYXVsdFZhbHVlKSAmJlxuICAgICAgKChoYXNTcmMgPSBwcm9wc1tkZWZhdWx0VmFsdWVdKSxcbiAgICAgIG51bGwgIT0gaGFzU3JjICYmXG4gICAgICAgIHNldFByb3AoZG9tRWxlbWVudCwgdGFnLCBkZWZhdWx0VmFsdWUsIGhhc1NyYywgcHJvcHMsIG51bGwpKTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZVByb3BlcnRpZXMoZG9tRWxlbWVudCwgdGFnLCBsYXN0UHJvcHMsIG5leHRQcm9wcykge1xuICBzd2l0Y2ggKHRhZykge1xuICAgIGNhc2UgXCJkaXZcIjpcbiAgICBjYXNlIFwic3BhblwiOlxuICAgIGNhc2UgXCJzdmdcIjpcbiAgICBjYXNlIFwicGF0aFwiOlxuICAgIGNhc2UgXCJhXCI6XG4gICAgY2FzZSBcImdcIjpcbiAgICBjYXNlIFwicFwiOlxuICAgIGNhc2UgXCJsaVwiOlxuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcImlucHV0XCI6XG4gICAgICB2YXIgbmFtZSA9IG51bGwsXG4gICAgICAgIHR5cGUgPSBudWxsLFxuICAgICAgICB2YWx1ZSA9IG51bGwsXG4gICAgICAgIGRlZmF1bHRWYWx1ZSA9IG51bGwsXG4gICAgICAgIGxhc3REZWZhdWx0VmFsdWUgPSBudWxsLFxuICAgICAgICBjaGVja2VkID0gbnVsbCxcbiAgICAgICAgZGVmYXVsdENoZWNrZWQgPSBudWxsO1xuICAgICAgZm9yIChwcm9wS2V5IGluIGxhc3RQcm9wcykge1xuICAgICAgICB2YXIgbGFzdFByb3AgPSBsYXN0UHJvcHNbcHJvcEtleV07XG4gICAgICAgIGlmIChsYXN0UHJvcHMuaGFzT3duUHJvcGVydHkocHJvcEtleSkgJiYgbnVsbCAhPSBsYXN0UHJvcClcbiAgICAgICAgICBzd2l0Y2ggKHByb3BLZXkpIHtcbiAgICAgICAgICAgIGNhc2UgXCJjaGVja2VkXCI6XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcInZhbHVlXCI6XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcImRlZmF1bHRWYWx1ZVwiOlxuICAgICAgICAgICAgICBsYXN0RGVmYXVsdFZhbHVlID0gbGFzdFByb3A7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICBuZXh0UHJvcHMuaGFzT3duUHJvcGVydHkocHJvcEtleSkgfHxcbiAgICAgICAgICAgICAgICBzZXRQcm9wKGRvbUVsZW1lbnQsIHRhZywgcHJvcEtleSwgbnVsbCwgbmV4dFByb3BzLCBsYXN0UHJvcCk7XG4gICAgICAgICAgfVxuICAgICAgfVxuICAgICAgZm9yICh2YXIgcHJvcEtleSQyMDMgaW4gbmV4dFByb3BzKSB7XG4gICAgICAgIHZhciBwcm9wS2V5ID0gbmV4dFByb3BzW3Byb3BLZXkkMjAzXTtcbiAgICAgICAgbGFzdFByb3AgPSBsYXN0UHJvcHNbcHJvcEtleSQyMDNdO1xuICAgICAgICBpZiAoXG4gICAgICAgICAgbmV4dFByb3BzLmhhc093blByb3BlcnR5KHByb3BLZXkkMjAzKSAmJlxuICAgICAgICAgIChudWxsICE9IHByb3BLZXkgfHwgbnVsbCAhPSBsYXN0UHJvcClcbiAgICAgICAgKVxuICAgICAgICAgIHN3aXRjaCAocHJvcEtleSQyMDMpIHtcbiAgICAgICAgICAgIGNhc2UgXCJ0eXBlXCI6XG4gICAgICAgICAgICAgIHR5cGUgPSBwcm9wS2V5O1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJuYW1lXCI6XG4gICAgICAgICAgICAgIG5hbWUgPSBwcm9wS2V5O1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJjaGVja2VkXCI6XG4gICAgICAgICAgICAgIGNoZWNrZWQgPSBwcm9wS2V5O1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJkZWZhdWx0Q2hlY2tlZFwiOlxuICAgICAgICAgICAgICBkZWZhdWx0Q2hlY2tlZCA9IHByb3BLZXk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcInZhbHVlXCI6XG4gICAgICAgICAgICAgIHZhbHVlID0gcHJvcEtleTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiZGVmYXVsdFZhbHVlXCI6XG4gICAgICAgICAgICAgIGRlZmF1bHRWYWx1ZSA9IHByb3BLZXk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcImNoaWxkcmVuXCI6XG4gICAgICAgICAgICBjYXNlIFwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIjpcbiAgICAgICAgICAgICAgaWYgKG51bGwgIT0gcHJvcEtleSlcbiAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDEzNywgdGFnKSk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgcHJvcEtleSAhPT0gbGFzdFByb3AgJiZcbiAgICAgICAgICAgICAgICBzZXRQcm9wKFxuICAgICAgICAgICAgICAgICAgZG9tRWxlbWVudCxcbiAgICAgICAgICAgICAgICAgIHRhZyxcbiAgICAgICAgICAgICAgICAgIHByb3BLZXkkMjAzLFxuICAgICAgICAgICAgICAgICAgcHJvcEtleSxcbiAgICAgICAgICAgICAgICAgIG5leHRQcm9wcyxcbiAgICAgICAgICAgICAgICAgIGxhc3RQcm9wXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICB9XG4gICAgICB1cGRhdGVJbnB1dChcbiAgICAgICAgZG9tRWxlbWVudCxcbiAgICAgICAgdmFsdWUsXG4gICAgICAgIGRlZmF1bHRWYWx1ZSxcbiAgICAgICAgbGFzdERlZmF1bHRWYWx1ZSxcbiAgICAgICAgY2hlY2tlZCxcbiAgICAgICAgZGVmYXVsdENoZWNrZWQsXG4gICAgICAgIHR5cGUsXG4gICAgICAgIG5hbWVcbiAgICAgICk7XG4gICAgICByZXR1cm47XG4gICAgY2FzZSBcInNlbGVjdFwiOlxuICAgICAgcHJvcEtleSA9IHZhbHVlID0gZGVmYXVsdFZhbHVlID0gcHJvcEtleSQyMDMgPSBudWxsO1xuICAgICAgZm9yICh0eXBlIGluIGxhc3RQcm9wcylcbiAgICAgICAgaWYgKFxuICAgICAgICAgICgobGFzdERlZmF1bHRWYWx1ZSA9IGxhc3RQcm9wc1t0eXBlXSksXG4gICAgICAgICAgbGFzdFByb3BzLmhhc093blByb3BlcnR5KHR5cGUpICYmIG51bGwgIT0gbGFzdERlZmF1bHRWYWx1ZSlcbiAgICAgICAgKVxuICAgICAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICAgICAgY2FzZSBcInZhbHVlXCI6XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIm11bHRpcGxlXCI6XG4gICAgICAgICAgICAgIHByb3BLZXkgPSBsYXN0RGVmYXVsdFZhbHVlO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgbmV4dFByb3BzLmhhc093blByb3BlcnR5KHR5cGUpIHx8XG4gICAgICAgICAgICAgICAgc2V0UHJvcChcbiAgICAgICAgICAgICAgICAgIGRvbUVsZW1lbnQsXG4gICAgICAgICAgICAgICAgICB0YWcsXG4gICAgICAgICAgICAgICAgICB0eXBlLFxuICAgICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICAgIG5leHRQcm9wcyxcbiAgICAgICAgICAgICAgICAgIGxhc3REZWZhdWx0VmFsdWVcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgIGZvciAobmFtZSBpbiBuZXh0UHJvcHMpXG4gICAgICAgIGlmIChcbiAgICAgICAgICAoKHR5cGUgPSBuZXh0UHJvcHNbbmFtZV0pLFxuICAgICAgICAgIChsYXN0RGVmYXVsdFZhbHVlID0gbGFzdFByb3BzW25hbWVdKSxcbiAgICAgICAgICBuZXh0UHJvcHMuaGFzT3duUHJvcGVydHkobmFtZSkgJiZcbiAgICAgICAgICAgIChudWxsICE9IHR5cGUgfHwgbnVsbCAhPSBsYXN0RGVmYXVsdFZhbHVlKSlcbiAgICAgICAgKVxuICAgICAgICAgIHN3aXRjaCAobmFtZSkge1xuICAgICAgICAgICAgY2FzZSBcInZhbHVlXCI6XG4gICAgICAgICAgICAgIHByb3BLZXkkMjAzID0gdHlwZTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiZGVmYXVsdFZhbHVlXCI6XG4gICAgICAgICAgICAgIGRlZmF1bHRWYWx1ZSA9IHR5cGU7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIm11bHRpcGxlXCI6XG4gICAgICAgICAgICAgIHZhbHVlID0gdHlwZTtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgIHR5cGUgIT09IGxhc3REZWZhdWx0VmFsdWUgJiZcbiAgICAgICAgICAgICAgICBzZXRQcm9wKFxuICAgICAgICAgICAgICAgICAgZG9tRWxlbWVudCxcbiAgICAgICAgICAgICAgICAgIHRhZyxcbiAgICAgICAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICAgICAgICB0eXBlLFxuICAgICAgICAgICAgICAgICAgbmV4dFByb3BzLFxuICAgICAgICAgICAgICAgICAgbGFzdERlZmF1bHRWYWx1ZVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgdGFnID0gZGVmYXVsdFZhbHVlO1xuICAgICAgbGFzdFByb3BzID0gdmFsdWU7XG4gICAgICBuZXh0UHJvcHMgPSBwcm9wS2V5O1xuICAgICAgbnVsbCAhPSBwcm9wS2V5JDIwM1xuICAgICAgICA/IHVwZGF0ZU9wdGlvbnMoZG9tRWxlbWVudCwgISFsYXN0UHJvcHMsIHByb3BLZXkkMjAzLCAhMSlcbiAgICAgICAgOiAhIW5leHRQcm9wcyAhPT0gISFsYXN0UHJvcHMgJiZcbiAgICAgICAgICAobnVsbCAhPSB0YWdcbiAgICAgICAgICAgID8gdXBkYXRlT3B0aW9ucyhkb21FbGVtZW50LCAhIWxhc3RQcm9wcywgdGFnLCAhMClcbiAgICAgICAgICAgIDogdXBkYXRlT3B0aW9ucyhkb21FbGVtZW50LCAhIWxhc3RQcm9wcywgbGFzdFByb3BzID8gW10gOiBcIlwiLCAhMSkpO1xuICAgICAgcmV0dXJuO1xuICAgIGNhc2UgXCJ0ZXh0YXJlYVwiOlxuICAgICAgcHJvcEtleSA9IHByb3BLZXkkMjAzID0gbnVsbDtcbiAgICAgIGZvciAoZGVmYXVsdFZhbHVlIGluIGxhc3RQcm9wcylcbiAgICAgICAgaWYgKFxuICAgICAgICAgICgobmFtZSA9IGxhc3RQcm9wc1tkZWZhdWx0VmFsdWVdKSxcbiAgICAgICAgICBsYXN0UHJvcHMuaGFzT3duUHJvcGVydHkoZGVmYXVsdFZhbHVlKSAmJlxuICAgICAgICAgICAgbnVsbCAhPSBuYW1lICYmXG4gICAgICAgICAgICAhbmV4dFByb3BzLmhhc093blByb3BlcnR5KGRlZmF1bHRWYWx1ZSkpXG4gICAgICAgIClcbiAgICAgICAgICBzd2l0Y2ggKGRlZmF1bHRWYWx1ZSkge1xuICAgICAgICAgICAgY2FzZSBcInZhbHVlXCI6XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcImNoaWxkcmVuXCI6XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgc2V0UHJvcChkb21FbGVtZW50LCB0YWcsIGRlZmF1bHRWYWx1ZSwgbnVsbCwgbmV4dFByb3BzLCBuYW1lKTtcbiAgICAgICAgICB9XG4gICAgICBmb3IgKHZhbHVlIGluIG5leHRQcm9wcylcbiAgICAgICAgaWYgKFxuICAgICAgICAgICgobmFtZSA9IG5leHRQcm9wc1t2YWx1ZV0pLFxuICAgICAgICAgICh0eXBlID0gbGFzdFByb3BzW3ZhbHVlXSksXG4gICAgICAgICAgbmV4dFByb3BzLmhhc093blByb3BlcnR5KHZhbHVlKSAmJiAobnVsbCAhPSBuYW1lIHx8IG51bGwgIT0gdHlwZSkpXG4gICAgICAgIClcbiAgICAgICAgICBzd2l0Y2ggKHZhbHVlKSB7XG4gICAgICAgICAgICBjYXNlIFwidmFsdWVcIjpcbiAgICAgICAgICAgICAgcHJvcEtleSQyMDMgPSBuYW1lO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJkZWZhdWx0VmFsdWVcIjpcbiAgICAgICAgICAgICAgcHJvcEtleSA9IG5hbWU7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcImNoaWxkcmVuXCI6XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI6XG4gICAgICAgICAgICAgIGlmIChudWxsICE9IG5hbWUpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoOTEpKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICBuYW1lICE9PSB0eXBlICYmXG4gICAgICAgICAgICAgICAgc2V0UHJvcChkb21FbGVtZW50LCB0YWcsIHZhbHVlLCBuYW1lLCBuZXh0UHJvcHMsIHR5cGUpO1xuICAgICAgICAgIH1cbiAgICAgIHVwZGF0ZVRleHRhcmVhKGRvbUVsZW1lbnQsIHByb3BLZXkkMjAzLCBwcm9wS2V5KTtcbiAgICAgIHJldHVybjtcbiAgICBjYXNlIFwib3B0aW9uXCI6XG4gICAgICBmb3IgKHZhciBwcm9wS2V5JDIxOSBpbiBsYXN0UHJvcHMpXG4gICAgICAgIGlmIChcbiAgICAgICAgICAoKHByb3BLZXkkMjAzID0gbGFzdFByb3BzW3Byb3BLZXkkMjE5XSksXG4gICAgICAgICAgbGFzdFByb3BzLmhhc093blByb3BlcnR5KHByb3BLZXkkMjE5KSAmJlxuICAgICAgICAgICAgbnVsbCAhPSBwcm9wS2V5JDIwMyAmJlxuICAgICAgICAgICAgIW5leHRQcm9wcy5oYXNPd25Qcm9wZXJ0eShwcm9wS2V5JDIxOSkpXG4gICAgICAgIClcbiAgICAgICAgICBzd2l0Y2ggKHByb3BLZXkkMjE5KSB7XG4gICAgICAgICAgICBjYXNlIFwic2VsZWN0ZWRcIjpcbiAgICAgICAgICAgICAgZG9tRWxlbWVudC5zZWxlY3RlZCA9ICExO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgIHNldFByb3AoXG4gICAgICAgICAgICAgICAgZG9tRWxlbWVudCxcbiAgICAgICAgICAgICAgICB0YWcsXG4gICAgICAgICAgICAgICAgcHJvcEtleSQyMTksXG4gICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICBuZXh0UHJvcHMsXG4gICAgICAgICAgICAgICAgcHJvcEtleSQyMDNcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICBmb3IgKGxhc3REZWZhdWx0VmFsdWUgaW4gbmV4dFByb3BzKVxuICAgICAgICBpZiAoXG4gICAgICAgICAgKChwcm9wS2V5JDIwMyA9IG5leHRQcm9wc1tsYXN0RGVmYXVsdFZhbHVlXSksXG4gICAgICAgICAgKHByb3BLZXkgPSBsYXN0UHJvcHNbbGFzdERlZmF1bHRWYWx1ZV0pLFxuICAgICAgICAgIG5leHRQcm9wcy5oYXNPd25Qcm9wZXJ0eShsYXN0RGVmYXVsdFZhbHVlKSAmJlxuICAgICAgICAgICAgcHJvcEtleSQyMDMgIT09IHByb3BLZXkgJiZcbiAgICAgICAgICAgIChudWxsICE9IHByb3BLZXkkMjAzIHx8IG51bGwgIT0gcHJvcEtleSkpXG4gICAgICAgIClcbiAgICAgICAgICBzd2l0Y2ggKGxhc3REZWZhdWx0VmFsdWUpIHtcbiAgICAgICAgICAgIGNhc2UgXCJzZWxlY3RlZFwiOlxuICAgICAgICAgICAgICBkb21FbGVtZW50LnNlbGVjdGVkID1cbiAgICAgICAgICAgICAgICBwcm9wS2V5JDIwMyAmJlxuICAgICAgICAgICAgICAgIFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIHByb3BLZXkkMjAzICYmXG4gICAgICAgICAgICAgICAgXCJzeW1ib2xcIiAhPT0gdHlwZW9mIHByb3BLZXkkMjAzO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgIHNldFByb3AoXG4gICAgICAgICAgICAgICAgZG9tRWxlbWVudCxcbiAgICAgICAgICAgICAgICB0YWcsXG4gICAgICAgICAgICAgICAgbGFzdERlZmF1bHRWYWx1ZSxcbiAgICAgICAgICAgICAgICBwcm9wS2V5JDIwMyxcbiAgICAgICAgICAgICAgICBuZXh0UHJvcHMsXG4gICAgICAgICAgICAgICAgcHJvcEtleVxuICAgICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICBjYXNlIFwiaW1nXCI6XG4gICAgY2FzZSBcImxpbmtcIjpcbiAgICBjYXNlIFwiYXJlYVwiOlxuICAgIGNhc2UgXCJiYXNlXCI6XG4gICAgY2FzZSBcImJyXCI6XG4gICAgY2FzZSBcImNvbFwiOlxuICAgIGNhc2UgXCJlbWJlZFwiOlxuICAgIGNhc2UgXCJoclwiOlxuICAgIGNhc2UgXCJrZXlnZW5cIjpcbiAgICBjYXNlIFwibWV0YVwiOlxuICAgIGNhc2UgXCJwYXJhbVwiOlxuICAgIGNhc2UgXCJzb3VyY2VcIjpcbiAgICBjYXNlIFwidHJhY2tcIjpcbiAgICBjYXNlIFwid2JyXCI6XG4gICAgY2FzZSBcIm1lbnVpdGVtXCI6XG4gICAgICBmb3IgKHZhciBwcm9wS2V5JDIyNCBpbiBsYXN0UHJvcHMpXG4gICAgICAgIChwcm9wS2V5JDIwMyA9IGxhc3RQcm9wc1twcm9wS2V5JDIyNF0pLFxuICAgICAgICAgIGxhc3RQcm9wcy5oYXNPd25Qcm9wZXJ0eShwcm9wS2V5JDIyNCkgJiZcbiAgICAgICAgICAgIG51bGwgIT0gcHJvcEtleSQyMDMgJiZcbiAgICAgICAgICAgICFuZXh0UHJvcHMuaGFzT3duUHJvcGVydHkocHJvcEtleSQyMjQpICYmXG4gICAgICAgICAgICBzZXRQcm9wKGRvbUVsZW1lbnQsIHRhZywgcHJvcEtleSQyMjQsIG51bGwsIG5leHRQcm9wcywgcHJvcEtleSQyMDMpO1xuICAgICAgZm9yIChjaGVja2VkIGluIG5leHRQcm9wcylcbiAgICAgICAgaWYgKFxuICAgICAgICAgICgocHJvcEtleSQyMDMgPSBuZXh0UHJvcHNbY2hlY2tlZF0pLFxuICAgICAgICAgIChwcm9wS2V5ID0gbGFzdFByb3BzW2NoZWNrZWRdKSxcbiAgICAgICAgICBuZXh0UHJvcHMuaGFzT3duUHJvcGVydHkoY2hlY2tlZCkgJiZcbiAgICAgICAgICAgIHByb3BLZXkkMjAzICE9PSBwcm9wS2V5ICYmXG4gICAgICAgICAgICAobnVsbCAhPSBwcm9wS2V5JDIwMyB8fCBudWxsICE9IHByb3BLZXkpKVxuICAgICAgICApXG4gICAgICAgICAgc3dpdGNoIChjaGVja2VkKSB7XG4gICAgICAgICAgICBjYXNlIFwiY2hpbGRyZW5cIjpcbiAgICAgICAgICAgIGNhc2UgXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiOlxuICAgICAgICAgICAgICBpZiAobnVsbCAhPSBwcm9wS2V5JDIwMylcbiAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDEzNywgdGFnKSk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgc2V0UHJvcChcbiAgICAgICAgICAgICAgICBkb21FbGVtZW50LFxuICAgICAgICAgICAgICAgIHRhZyxcbiAgICAgICAgICAgICAgICBjaGVja2VkLFxuICAgICAgICAgICAgICAgIHByb3BLZXkkMjAzLFxuICAgICAgICAgICAgICAgIG5leHRQcm9wcyxcbiAgICAgICAgICAgICAgICBwcm9wS2V5XG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIGRlZmF1bHQ6XG4gICAgICBpZiAoaXNDdXN0b21FbGVtZW50KHRhZykpIHtcbiAgICAgICAgZm9yICh2YXIgcHJvcEtleSQyMjkgaW4gbGFzdFByb3BzKVxuICAgICAgICAgIChwcm9wS2V5JDIwMyA9IGxhc3RQcm9wc1twcm9wS2V5JDIyOV0pLFxuICAgICAgICAgICAgbGFzdFByb3BzLmhhc093blByb3BlcnR5KHByb3BLZXkkMjI5KSAmJlxuICAgICAgICAgICAgICB2b2lkIDAgIT09IHByb3BLZXkkMjAzICYmXG4gICAgICAgICAgICAgICFuZXh0UHJvcHMuaGFzT3duUHJvcGVydHkocHJvcEtleSQyMjkpICYmXG4gICAgICAgICAgICAgIHNldFByb3BPbkN1c3RvbUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgZG9tRWxlbWVudCxcbiAgICAgICAgICAgICAgICB0YWcsXG4gICAgICAgICAgICAgICAgcHJvcEtleSQyMjksXG4gICAgICAgICAgICAgICAgdm9pZCAwLFxuICAgICAgICAgICAgICAgIG5leHRQcm9wcyxcbiAgICAgICAgICAgICAgICBwcm9wS2V5JDIwM1xuICAgICAgICAgICAgICApO1xuICAgICAgICBmb3IgKGRlZmF1bHRDaGVja2VkIGluIG5leHRQcm9wcylcbiAgICAgICAgICAocHJvcEtleSQyMDMgPSBuZXh0UHJvcHNbZGVmYXVsdENoZWNrZWRdKSxcbiAgICAgICAgICAgIChwcm9wS2V5ID0gbGFzdFByb3BzW2RlZmF1bHRDaGVja2VkXSksXG4gICAgICAgICAgICAhbmV4dFByb3BzLmhhc093blByb3BlcnR5KGRlZmF1bHRDaGVja2VkKSB8fFxuICAgICAgICAgICAgICBwcm9wS2V5JDIwMyA9PT0gcHJvcEtleSB8fFxuICAgICAgICAgICAgICAodm9pZCAwID09PSBwcm9wS2V5JDIwMyAmJiB2b2lkIDAgPT09IHByb3BLZXkpIHx8XG4gICAgICAgICAgICAgIHNldFByb3BPbkN1c3RvbUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgZG9tRWxlbWVudCxcbiAgICAgICAgICAgICAgICB0YWcsXG4gICAgICAgICAgICAgICAgZGVmYXVsdENoZWNrZWQsXG4gICAgICAgICAgICAgICAgcHJvcEtleSQyMDMsXG4gICAgICAgICAgICAgICAgbmV4dFByb3BzLFxuICAgICAgICAgICAgICAgIHByb3BLZXlcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICB9XG4gIGZvciAodmFyIHByb3BLZXkkMjM0IGluIGxhc3RQcm9wcylcbiAgICAocHJvcEtleSQyMDMgPSBsYXN0UHJvcHNbcHJvcEtleSQyMzRdKSxcbiAgICAgIGxhc3RQcm9wcy5oYXNPd25Qcm9wZXJ0eShwcm9wS2V5JDIzNCkgJiZcbiAgICAgICAgbnVsbCAhPSBwcm9wS2V5JDIwMyAmJlxuICAgICAgICAhbmV4dFByb3BzLmhhc093blByb3BlcnR5KHByb3BLZXkkMjM0KSAmJlxuICAgICAgICBzZXRQcm9wKGRvbUVsZW1lbnQsIHRhZywgcHJvcEtleSQyMzQsIG51bGwsIG5leHRQcm9wcywgcHJvcEtleSQyMDMpO1xuICBmb3IgKGxhc3RQcm9wIGluIG5leHRQcm9wcylcbiAgICAocHJvcEtleSQyMDMgPSBuZXh0UHJvcHNbbGFzdFByb3BdKSxcbiAgICAgIChwcm9wS2V5ID0gbGFzdFByb3BzW2xhc3RQcm9wXSksXG4gICAgICAhbmV4dFByb3BzLmhhc093blByb3BlcnR5KGxhc3RQcm9wKSB8fFxuICAgICAgICBwcm9wS2V5JDIwMyA9PT0gcHJvcEtleSB8fFxuICAgICAgICAobnVsbCA9PSBwcm9wS2V5JDIwMyAmJiBudWxsID09IHByb3BLZXkpIHx8XG4gICAgICAgIHNldFByb3AoZG9tRWxlbWVudCwgdGFnLCBsYXN0UHJvcCwgcHJvcEtleSQyMDMsIG5leHRQcm9wcywgcHJvcEtleSk7XG59XG52YXIgZXZlbnRzRW5hYmxlZCA9IG51bGwsXG4gIHNlbGVjdGlvbkluZm9ybWF0aW9uID0gbnVsbDtcbmZ1bmN0aW9uIGdldE93bmVyRG9jdW1lbnRGcm9tUm9vdENvbnRhaW5lcihyb290Q29udGFpbmVyRWxlbWVudCkge1xuICByZXR1cm4gOSA9PT0gcm9vdENvbnRhaW5lckVsZW1lbnQubm9kZVR5cGVcbiAgICA/IHJvb3RDb250YWluZXJFbGVtZW50XG4gICAgOiByb290Q29udGFpbmVyRWxlbWVudC5vd25lckRvY3VtZW50O1xufVxuZnVuY3Rpb24gZ2V0T3duSG9zdENvbnRleHQobmFtZXNwYWNlVVJJKSB7XG4gIHN3aXRjaCAobmFtZXNwYWNlVVJJKSB7XG4gICAgY2FzZSBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI6XG4gICAgICByZXR1cm4gMTtcbiAgICBjYXNlIFwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiOlxuICAgICAgcmV0dXJuIDI7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiAwO1xuICB9XG59XG5mdW5jdGlvbiBnZXRDaGlsZEhvc3RDb250ZXh0UHJvZChwYXJlbnROYW1lc3BhY2UsIHR5cGUpIHtcbiAgaWYgKDAgPT09IHBhcmVudE5hbWVzcGFjZSlcbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgIGNhc2UgXCJzdmdcIjpcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgICBjYXNlIFwibWF0aFwiOlxuICAgICAgICByZXR1cm4gMjtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgcmV0dXJuIDEgPT09IHBhcmVudE5hbWVzcGFjZSAmJiBcImZvcmVpZ25PYmplY3RcIiA9PT0gdHlwZVxuICAgID8gMFxuICAgIDogcGFyZW50TmFtZXNwYWNlO1xufVxuZnVuY3Rpb24gc2hvdWxkU2V0VGV4dENvbnRlbnQodHlwZSwgcHJvcHMpIHtcbiAgcmV0dXJuIChcbiAgICBcInRleHRhcmVhXCIgPT09IHR5cGUgfHxcbiAgICBcIm5vc2NyaXB0XCIgPT09IHR5cGUgfHxcbiAgICBcInN0cmluZ1wiID09PSB0eXBlb2YgcHJvcHMuY2hpbGRyZW4gfHxcbiAgICBcIm51bWJlclwiID09PSB0eXBlb2YgcHJvcHMuY2hpbGRyZW4gfHxcbiAgICBcImJpZ2ludFwiID09PSB0eXBlb2YgcHJvcHMuY2hpbGRyZW4gfHxcbiAgICAoXCJvYmplY3RcIiA9PT0gdHlwZW9mIHByb3BzLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MICYmXG4gICAgICBudWxsICE9PSBwcm9wcy5kYW5nZXJvdXNseVNldElubmVySFRNTCAmJlxuICAgICAgbnVsbCAhPSBwcm9wcy5kYW5nZXJvdXNseVNldElubmVySFRNTC5fX2h0bWwpXG4gICk7XG59XG52YXIgY3VycmVudFBvcHN0YXRlVHJhbnNpdGlvbkV2ZW50ID0gbnVsbDtcbmZ1bmN0aW9uIHNob3VsZEF0dGVtcHRFYWdlclRyYW5zaXRpb24oKSB7XG4gIHZhciBldmVudCA9IHdpbmRvdy5ldmVudDtcbiAgaWYgKGV2ZW50ICYmIFwicG9wc3RhdGVcIiA9PT0gZXZlbnQudHlwZSkge1xuICAgIGlmIChldmVudCA9PT0gY3VycmVudFBvcHN0YXRlVHJhbnNpdGlvbkV2ZW50KSByZXR1cm4gITE7XG4gICAgY3VycmVudFBvcHN0YXRlVHJhbnNpdGlvbkV2ZW50ID0gZXZlbnQ7XG4gICAgcmV0dXJuICEwO1xuICB9XG4gIGN1cnJlbnRQb3BzdGF0ZVRyYW5zaXRpb25FdmVudCA9IG51bGw7XG4gIHJldHVybiAhMTtcbn1cbnZhciBzY2hlZHVsZVRpbWVvdXQgPSBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBzZXRUaW1lb3V0ID8gc2V0VGltZW91dCA6IHZvaWQgMCxcbiAgY2FuY2VsVGltZW91dCA9IFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGNsZWFyVGltZW91dCA/IGNsZWFyVGltZW91dCA6IHZvaWQgMCxcbiAgbG9jYWxQcm9taXNlID0gXCJmdW5jdGlvblwiID09PSB0eXBlb2YgUHJvbWlzZSA/IFByb21pc2UgOiB2b2lkIDAsXG4gIHNjaGVkdWxlTWljcm90YXNrID1cbiAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBxdWV1ZU1pY3JvdGFza1xuICAgICAgPyBxdWV1ZU1pY3JvdGFza1xuICAgICAgOiBcInVuZGVmaW5lZFwiICE9PSB0eXBlb2YgbG9jYWxQcm9taXNlXG4gICAgICAgID8gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICByZXR1cm4gbG9jYWxQcm9taXNlXG4gICAgICAgICAgICAgIC5yZXNvbHZlKG51bGwpXG4gICAgICAgICAgICAgIC50aGVuKGNhbGxiYWNrKVxuICAgICAgICAgICAgICAuY2F0Y2goaGFuZGxlRXJyb3JJbk5leHRUaWNrKTtcbiAgICAgICAgICB9XG4gICAgICAgIDogc2NoZWR1bGVUaW1lb3V0O1xuZnVuY3Rpb24gaGFuZGxlRXJyb3JJbk5leHRUaWNrKGVycm9yKSB7XG4gIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgIHRocm93IGVycm9yO1xuICB9KTtcbn1cbmZ1bmN0aW9uIGNsZWFyU3VzcGVuc2VCb3VuZGFyeShwYXJlbnRJbnN0YW5jZSwgc3VzcGVuc2VJbnN0YW5jZSkge1xuICB2YXIgbm9kZSA9IHN1c3BlbnNlSW5zdGFuY2UsXG4gICAgZGVwdGggPSAwO1xuICBkbyB7XG4gICAgdmFyIG5leHROb2RlID0gbm9kZS5uZXh0U2libGluZztcbiAgICBwYXJlbnRJbnN0YW5jZS5yZW1vdmVDaGlsZChub2RlKTtcbiAgICBpZiAobmV4dE5vZGUgJiYgOCA9PT0gbmV4dE5vZGUubm9kZVR5cGUpXG4gICAgICBpZiAoKChub2RlID0gbmV4dE5vZGUuZGF0YSksIFwiLyRcIiA9PT0gbm9kZSkpIHtcbiAgICAgICAgaWYgKDAgPT09IGRlcHRoKSB7XG4gICAgICAgICAgcGFyZW50SW5zdGFuY2UucmVtb3ZlQ2hpbGQobmV4dE5vZGUpO1xuICAgICAgICAgIHJldHJ5SWZCbG9ja2VkT24oc3VzcGVuc2VJbnN0YW5jZSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGRlcHRoLS07XG4gICAgICB9IGVsc2UgKFwiJFwiICE9PSBub2RlICYmIFwiJD9cIiAhPT0gbm9kZSAmJiBcIiQhXCIgIT09IG5vZGUpIHx8IGRlcHRoKys7XG4gICAgbm9kZSA9IG5leHROb2RlO1xuICB9IHdoaWxlIChub2RlKTtcbiAgcmV0cnlJZkJsb2NrZWRPbihzdXNwZW5zZUluc3RhbmNlKTtcbn1cbmZ1bmN0aW9uIGNsZWFyQ29udGFpbmVyU3BhcmluZ2x5KGNvbnRhaW5lcikge1xuICB2YXIgbmV4dE5vZGUgPSBjb250YWluZXIuZmlyc3RDaGlsZDtcbiAgbmV4dE5vZGUgJiYgMTAgPT09IG5leHROb2RlLm5vZGVUeXBlICYmIChuZXh0Tm9kZSA9IG5leHROb2RlLm5leHRTaWJsaW5nKTtcbiAgZm9yICg7IG5leHROb2RlOyApIHtcbiAgICB2YXIgbm9kZSA9IG5leHROb2RlO1xuICAgIG5leHROb2RlID0gbmV4dE5vZGUubmV4dFNpYmxpbmc7XG4gICAgc3dpdGNoIChub2RlLm5vZGVOYW1lKSB7XG4gICAgICBjYXNlIFwiSFRNTFwiOlxuICAgICAgY2FzZSBcIkhFQURcIjpcbiAgICAgIGNhc2UgXCJCT0RZXCI6XG4gICAgICAgIGNsZWFyQ29udGFpbmVyU3BhcmluZ2x5KG5vZGUpO1xuICAgICAgICBkZXRhY2hEZWxldGVkSW5zdGFuY2Uobm9kZSk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgY2FzZSBcIlNDUklQVFwiOlxuICAgICAgY2FzZSBcIlNUWUxFXCI6XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgY2FzZSBcIkxJTktcIjpcbiAgICAgICAgaWYgKFwic3R5bGVzaGVldFwiID09PSBub2RlLnJlbC50b0xvd2VyQ2FzZSgpKSBjb250aW51ZTtcbiAgICB9XG4gICAgY29udGFpbmVyLnJlbW92ZUNoaWxkKG5vZGUpO1xuICB9XG59XG5mdW5jdGlvbiBjYW5IeWRyYXRlSW5zdGFuY2UoaW5zdGFuY2UsIHR5cGUsIHByb3BzLCBpblJvb3RPclNpbmdsZXRvbikge1xuICBmb3IgKDsgMSA9PT0gaW5zdGFuY2Uubm9kZVR5cGU7ICkge1xuICAgIHZhciBhbnlQcm9wcyA9IHByb3BzO1xuICAgIGlmIChpbnN0YW5jZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpICE9PSB0eXBlLnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgIGlmIChcbiAgICAgICAgIWluUm9vdE9yU2luZ2xldG9uICYmXG4gICAgICAgIChcIklOUFVUXCIgIT09IGluc3RhbmNlLm5vZGVOYW1lIHx8IFwiaGlkZGVuXCIgIT09IGluc3RhbmNlLnR5cGUpXG4gICAgICApXG4gICAgICAgIGJyZWFrO1xuICAgIH0gZWxzZSBpZiAoIWluUm9vdE9yU2luZ2xldG9uKVxuICAgICAgaWYgKFwiaW5wdXRcIiA9PT0gdHlwZSAmJiBcImhpZGRlblwiID09PSBpbnN0YW5jZS50eXBlKSB7XG4gICAgICAgIHZhciBuYW1lID0gbnVsbCA9PSBhbnlQcm9wcy5uYW1lID8gbnVsbCA6IFwiXCIgKyBhbnlQcm9wcy5uYW1lO1xuICAgICAgICBpZiAoXG4gICAgICAgICAgXCJoaWRkZW5cIiA9PT0gYW55UHJvcHMudHlwZSAmJlxuICAgICAgICAgIGluc3RhbmNlLmdldEF0dHJpYnV0ZShcIm5hbWVcIikgPT09IG5hbWVcbiAgICAgICAgKVxuICAgICAgICAgIHJldHVybiBpbnN0YW5jZTtcbiAgICAgIH0gZWxzZSByZXR1cm4gaW5zdGFuY2U7XG4gICAgZWxzZSBpZiAoIWluc3RhbmNlW2ludGVybmFsSG9pc3RhYmxlTWFya2VyXSlcbiAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICBjYXNlIFwibWV0YVwiOlxuICAgICAgICAgIGlmICghaW5zdGFuY2UuaGFzQXR0cmlidXRlKFwiaXRlbXByb3BcIikpIGJyZWFrO1xuICAgICAgICAgIHJldHVybiBpbnN0YW5jZTtcbiAgICAgICAgY2FzZSBcImxpbmtcIjpcbiAgICAgICAgICBuYW1lID0gaW5zdGFuY2UuZ2V0QXR0cmlidXRlKFwicmVsXCIpO1xuICAgICAgICAgIGlmIChcInN0eWxlc2hlZXRcIiA9PT0gbmFtZSAmJiBpbnN0YW5jZS5oYXNBdHRyaWJ1dGUoXCJkYXRhLXByZWNlZGVuY2VcIikpXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBlbHNlIGlmIChcbiAgICAgICAgICAgIG5hbWUgIT09IGFueVByb3BzLnJlbCB8fFxuICAgICAgICAgICAgaW5zdGFuY2UuZ2V0QXR0cmlidXRlKFwiaHJlZlwiKSAhPT1cbiAgICAgICAgICAgICAgKG51bGwgPT0gYW55UHJvcHMuaHJlZiA/IG51bGwgOiBhbnlQcm9wcy5ocmVmKSB8fFxuICAgICAgICAgICAgaW5zdGFuY2UuZ2V0QXR0cmlidXRlKFwiY3Jvc3NvcmlnaW5cIikgIT09XG4gICAgICAgICAgICAgIChudWxsID09IGFueVByb3BzLmNyb3NzT3JpZ2luID8gbnVsbCA6IGFueVByb3BzLmNyb3NzT3JpZ2luKSB8fFxuICAgICAgICAgICAgaW5zdGFuY2UuZ2V0QXR0cmlidXRlKFwidGl0bGVcIikgIT09XG4gICAgICAgICAgICAgIChudWxsID09IGFueVByb3BzLnRpdGxlID8gbnVsbCA6IGFueVByb3BzLnRpdGxlKVxuICAgICAgICAgIClcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIHJldHVybiBpbnN0YW5jZTtcbiAgICAgICAgY2FzZSBcInN0eWxlXCI6XG4gICAgICAgICAgaWYgKGluc3RhbmNlLmhhc0F0dHJpYnV0ZShcImRhdGEtcHJlY2VkZW5jZVwiKSkgYnJlYWs7XG4gICAgICAgICAgcmV0dXJuIGluc3RhbmNlO1xuICAgICAgICBjYXNlIFwic2NyaXB0XCI6XG4gICAgICAgICAgbmFtZSA9IGluc3RhbmNlLmdldEF0dHJpYnV0ZShcInNyY1wiKTtcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAobmFtZSAhPT0gKG51bGwgPT0gYW55UHJvcHMuc3JjID8gbnVsbCA6IGFueVByb3BzLnNyYykgfHxcbiAgICAgICAgICAgICAgaW5zdGFuY2UuZ2V0QXR0cmlidXRlKFwidHlwZVwiKSAhPT1cbiAgICAgICAgICAgICAgICAobnVsbCA9PSBhbnlQcm9wcy50eXBlID8gbnVsbCA6IGFueVByb3BzLnR5cGUpIHx8XG4gICAgICAgICAgICAgIGluc3RhbmNlLmdldEF0dHJpYnV0ZShcImNyb3Nzb3JpZ2luXCIpICE9PVxuICAgICAgICAgICAgICAgIChudWxsID09IGFueVByb3BzLmNyb3NzT3JpZ2luID8gbnVsbCA6IGFueVByb3BzLmNyb3NzT3JpZ2luKSkgJiZcbiAgICAgICAgICAgIG5hbWUgJiZcbiAgICAgICAgICAgIGluc3RhbmNlLmhhc0F0dHJpYnV0ZShcImFzeW5jXCIpICYmXG4gICAgICAgICAgICAhaW5zdGFuY2UuaGFzQXR0cmlidXRlKFwiaXRlbXByb3BcIilcbiAgICAgICAgICApXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICByZXR1cm4gaW5zdGFuY2U7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuIGluc3RhbmNlO1xuICAgICAgfVxuICAgIGluc3RhbmNlID0gZ2V0TmV4dEh5ZHJhdGFibGUoaW5zdGFuY2UubmV4dFNpYmxpbmcpO1xuICAgIGlmIChudWxsID09PSBpbnN0YW5jZSkgYnJlYWs7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5mdW5jdGlvbiBjYW5IeWRyYXRlVGV4dEluc3RhbmNlKGluc3RhbmNlLCB0ZXh0LCBpblJvb3RPclNpbmdsZXRvbikge1xuICBpZiAoXCJcIiA9PT0gdGV4dCkgcmV0dXJuIG51bGw7XG4gIGZvciAoOyAzICE9PSBpbnN0YW5jZS5ub2RlVHlwZTsgKSB7XG4gICAgaWYgKFxuICAgICAgKDEgIT09IGluc3RhbmNlLm5vZGVUeXBlIHx8XG4gICAgICAgIFwiSU5QVVRcIiAhPT0gaW5zdGFuY2Uubm9kZU5hbWUgfHxcbiAgICAgICAgXCJoaWRkZW5cIiAhPT0gaW5zdGFuY2UudHlwZSkgJiZcbiAgICAgICFpblJvb3RPclNpbmdsZXRvblxuICAgIClcbiAgICAgIHJldHVybiBudWxsO1xuICAgIGluc3RhbmNlID0gZ2V0TmV4dEh5ZHJhdGFibGUoaW5zdGFuY2UubmV4dFNpYmxpbmcpO1xuICAgIGlmIChudWxsID09PSBpbnN0YW5jZSkgcmV0dXJuIG51bGw7XG4gIH1cbiAgcmV0dXJuIGluc3RhbmNlO1xufVxuZnVuY3Rpb24gZ2V0TmV4dEh5ZHJhdGFibGUobm9kZSkge1xuICBmb3IgKDsgbnVsbCAhPSBub2RlOyBub2RlID0gbm9kZS5uZXh0U2libGluZykge1xuICAgIHZhciBub2RlVHlwZSA9IG5vZGUubm9kZVR5cGU7XG4gICAgaWYgKDEgPT09IG5vZGVUeXBlIHx8IDMgPT09IG5vZGVUeXBlKSBicmVhaztcbiAgICBpZiAoOCA9PT0gbm9kZVR5cGUpIHtcbiAgICAgIG5vZGVUeXBlID0gbm9kZS5kYXRhO1xuICAgICAgaWYgKFxuICAgICAgICBcIiRcIiA9PT0gbm9kZVR5cGUgfHxcbiAgICAgICAgXCIkIVwiID09PSBub2RlVHlwZSB8fFxuICAgICAgICBcIiQ/XCIgPT09IG5vZGVUeXBlIHx8XG4gICAgICAgIFwiRiFcIiA9PT0gbm9kZVR5cGUgfHxcbiAgICAgICAgXCJGXCIgPT09IG5vZGVUeXBlXG4gICAgICApXG4gICAgICAgIGJyZWFrO1xuICAgICAgaWYgKFwiLyRcIiA9PT0gbm9kZVR5cGUpIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbm9kZTtcbn1cbmZ1bmN0aW9uIGdldFBhcmVudFN1c3BlbnNlSW5zdGFuY2UodGFyZ2V0SW5zdGFuY2UpIHtcbiAgdGFyZ2V0SW5zdGFuY2UgPSB0YXJnZXRJbnN0YW5jZS5wcmV2aW91c1NpYmxpbmc7XG4gIGZvciAodmFyIGRlcHRoID0gMDsgdGFyZ2V0SW5zdGFuY2U7ICkge1xuICAgIGlmICg4ID09PSB0YXJnZXRJbnN0YW5jZS5ub2RlVHlwZSkge1xuICAgICAgdmFyIGRhdGEgPSB0YXJnZXRJbnN0YW5jZS5kYXRhO1xuICAgICAgaWYgKFwiJFwiID09PSBkYXRhIHx8IFwiJCFcIiA9PT0gZGF0YSB8fCBcIiQ/XCIgPT09IGRhdGEpIHtcbiAgICAgICAgaWYgKDAgPT09IGRlcHRoKSByZXR1cm4gdGFyZ2V0SW5zdGFuY2U7XG4gICAgICAgIGRlcHRoLS07XG4gICAgICB9IGVsc2UgXCIvJFwiID09PSBkYXRhICYmIGRlcHRoKys7XG4gICAgfVxuICAgIHRhcmdldEluc3RhbmNlID0gdGFyZ2V0SW5zdGFuY2UucHJldmlvdXNTaWJsaW5nO1xuICB9XG4gIHJldHVybiBudWxsO1xufVxuZnVuY3Rpb24gcmVzb2x2ZVNpbmdsZXRvbkluc3RhbmNlKHR5cGUsIHByb3BzLCByb290Q29udGFpbmVySW5zdGFuY2UpIHtcbiAgcHJvcHMgPSBnZXRPd25lckRvY3VtZW50RnJvbVJvb3RDb250YWluZXIocm9vdENvbnRhaW5lckluc3RhbmNlKTtcbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSBcImh0bWxcIjpcbiAgICAgIHR5cGUgPSBwcm9wcy5kb2N1bWVudEVsZW1lbnQ7XG4gICAgICBpZiAoIXR5cGUpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNDUyKSk7XG4gICAgICByZXR1cm4gdHlwZTtcbiAgICBjYXNlIFwiaGVhZFwiOlxuICAgICAgdHlwZSA9IHByb3BzLmhlYWQ7XG4gICAgICBpZiAoIXR5cGUpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNDUzKSk7XG4gICAgICByZXR1cm4gdHlwZTtcbiAgICBjYXNlIFwiYm9keVwiOlxuICAgICAgdHlwZSA9IHByb3BzLmJvZHk7XG4gICAgICBpZiAoIXR5cGUpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNDU0KSk7XG4gICAgICByZXR1cm4gdHlwZTtcbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg0NTEpKTtcbiAgfVxufVxudmFyIHByZWxvYWRQcm9wc01hcCA9IG5ldyBNYXAoKSxcbiAgcHJlY29ubmVjdHNTZXQgPSBuZXcgU2V0KCk7XG5mdW5jdGlvbiBnZXRIb2lzdGFibGVSb290KGNvbnRhaW5lcikge1xuICByZXR1cm4gXCJmdW5jdGlvblwiID09PSB0eXBlb2YgY29udGFpbmVyLmdldFJvb3ROb2RlXG4gICAgPyBjb250YWluZXIuZ2V0Um9vdE5vZGUoKVxuICAgIDogY29udGFpbmVyLm93bmVyRG9jdW1lbnQ7XG59XG52YXIgcHJldmlvdXNEaXNwYXRjaGVyID0gUmVhY3RET01TaGFyZWRJbnRlcm5hbHMuZDtcblJlYWN0RE9NU2hhcmVkSW50ZXJuYWxzLmQgPSB7XG4gIGY6IGZsdXNoU3luY1dvcmssXG4gIHI6IHJlcXVlc3RGb3JtUmVzZXQsXG4gIEQ6IHByZWZldGNoRE5TLFxuICBDOiBwcmVjb25uZWN0LFxuICBMOiBwcmVsb2FkLFxuICBtOiBwcmVsb2FkTW9kdWxlLFxuICBYOiBwcmVpbml0U2NyaXB0LFxuICBTOiBwcmVpbml0U3R5bGUsXG4gIE06IHByZWluaXRNb2R1bGVTY3JpcHRcbn07XG5mdW5jdGlvbiBmbHVzaFN5bmNXb3JrKCkge1xuICB2YXIgcHJldmlvdXNXYXNSZW5kZXJpbmcgPSBwcmV2aW91c0Rpc3BhdGNoZXIuZigpLFxuICAgIHdhc1JlbmRlcmluZyA9IGZsdXNoU3luY1dvcmskMSgpO1xuICByZXR1cm4gcHJldmlvdXNXYXNSZW5kZXJpbmcgfHwgd2FzUmVuZGVyaW5nO1xufVxuZnVuY3Rpb24gcmVxdWVzdEZvcm1SZXNldChmb3JtKSB7XG4gIHZhciBmb3JtSW5zdCA9IGdldEluc3RhbmNlRnJvbU5vZGUoZm9ybSk7XG4gIG51bGwgIT09IGZvcm1JbnN0ICYmIDUgPT09IGZvcm1JbnN0LnRhZyAmJiBcImZvcm1cIiA9PT0gZm9ybUluc3QudHlwZVxuICAgID8gcmVxdWVzdEZvcm1SZXNldCQxKGZvcm1JbnN0KVxuICAgIDogcHJldmlvdXNEaXNwYXRjaGVyLnIoZm9ybSk7XG59XG52YXIgZ2xvYmFsRG9jdW1lbnQgPSBcInVuZGVmaW5lZFwiID09PSB0eXBlb2YgZG9jdW1lbnQgPyBudWxsIDogZG9jdW1lbnQ7XG5mdW5jdGlvbiBwcmVjb25uZWN0QXMocmVsLCBocmVmLCBjcm9zc09yaWdpbikge1xuICB2YXIgb3duZXJEb2N1bWVudCA9IGdsb2JhbERvY3VtZW50O1xuICBpZiAob3duZXJEb2N1bWVudCAmJiBcInN0cmluZ1wiID09PSB0eXBlb2YgaHJlZiAmJiBocmVmKSB7XG4gICAgdmFyIGxpbWl0ZWRFc2NhcGVkSHJlZiA9XG4gICAgICBlc2NhcGVTZWxlY3RvckF0dHJpYnV0ZVZhbHVlSW5zaWRlRG91YmxlUXVvdGVzKGhyZWYpO1xuICAgIGxpbWl0ZWRFc2NhcGVkSHJlZiA9XG4gICAgICAnbGlua1tyZWw9XCInICsgcmVsICsgJ1wiXVtocmVmPVwiJyArIGxpbWl0ZWRFc2NhcGVkSHJlZiArICdcIl0nO1xuICAgIFwic3RyaW5nXCIgPT09IHR5cGVvZiBjcm9zc09yaWdpbiAmJlxuICAgICAgKGxpbWl0ZWRFc2NhcGVkSHJlZiArPSAnW2Nyb3Nzb3JpZ2luPVwiJyArIGNyb3NzT3JpZ2luICsgJ1wiXScpO1xuICAgIHByZWNvbm5lY3RzU2V0LmhhcyhsaW1pdGVkRXNjYXBlZEhyZWYpIHx8XG4gICAgICAocHJlY29ubmVjdHNTZXQuYWRkKGxpbWl0ZWRFc2NhcGVkSHJlZiksXG4gICAgICAocmVsID0geyByZWw6IHJlbCwgY3Jvc3NPcmlnaW46IGNyb3NzT3JpZ2luLCBocmVmOiBocmVmIH0pLFxuICAgICAgbnVsbCA9PT0gb3duZXJEb2N1bWVudC5xdWVyeVNlbGVjdG9yKGxpbWl0ZWRFc2NhcGVkSHJlZikgJiZcbiAgICAgICAgKChocmVmID0gb3duZXJEb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlua1wiKSksXG4gICAgICAgIHNldEluaXRpYWxQcm9wZXJ0aWVzKGhyZWYsIFwibGlua1wiLCByZWwpLFxuICAgICAgICBtYXJrTm9kZUFzSG9pc3RhYmxlKGhyZWYpLFxuICAgICAgICBvd25lckRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoaHJlZikpKTtcbiAgfVxufVxuZnVuY3Rpb24gcHJlZmV0Y2hETlMoaHJlZikge1xuICBwcmV2aW91c0Rpc3BhdGNoZXIuRChocmVmKTtcbiAgcHJlY29ubmVjdEFzKFwiZG5zLXByZWZldGNoXCIsIGhyZWYsIG51bGwpO1xufVxuZnVuY3Rpb24gcHJlY29ubmVjdChocmVmLCBjcm9zc09yaWdpbikge1xuICBwcmV2aW91c0Rpc3BhdGNoZXIuQyhocmVmLCBjcm9zc09yaWdpbik7XG4gIHByZWNvbm5lY3RBcyhcInByZWNvbm5lY3RcIiwgaHJlZiwgY3Jvc3NPcmlnaW4pO1xufVxuZnVuY3Rpb24gcHJlbG9hZChocmVmLCBhcywgb3B0aW9ucykge1xuICBwcmV2aW91c0Rpc3BhdGNoZXIuTChocmVmLCBhcywgb3B0aW9ucyk7XG4gIHZhciBvd25lckRvY3VtZW50ID0gZ2xvYmFsRG9jdW1lbnQ7XG4gIGlmIChvd25lckRvY3VtZW50ICYmIGhyZWYgJiYgYXMpIHtcbiAgICB2YXIgcHJlbG9hZFNlbGVjdG9yID1cbiAgICAgICdsaW5rW3JlbD1cInByZWxvYWRcIl1bYXM9XCInICtcbiAgICAgIGVzY2FwZVNlbGVjdG9yQXR0cmlidXRlVmFsdWVJbnNpZGVEb3VibGVRdW90ZXMoYXMpICtcbiAgICAgICdcIl0nO1xuICAgIFwiaW1hZ2VcIiA9PT0gYXNcbiAgICAgID8gb3B0aW9ucyAmJiBvcHRpb25zLmltYWdlU3JjU2V0XG4gICAgICAgID8gKChwcmVsb2FkU2VsZWN0b3IgKz1cbiAgICAgICAgICAgICdbaW1hZ2VzcmNzZXQ9XCInICtcbiAgICAgICAgICAgIGVzY2FwZVNlbGVjdG9yQXR0cmlidXRlVmFsdWVJbnNpZGVEb3VibGVRdW90ZXMoXG4gICAgICAgICAgICAgIG9wdGlvbnMuaW1hZ2VTcmNTZXRcbiAgICAgICAgICAgICkgK1xuICAgICAgICAgICAgJ1wiXScpLFxuICAgICAgICAgIFwic3RyaW5nXCIgPT09IHR5cGVvZiBvcHRpb25zLmltYWdlU2l6ZXMgJiZcbiAgICAgICAgICAgIChwcmVsb2FkU2VsZWN0b3IgKz1cbiAgICAgICAgICAgICAgJ1tpbWFnZXNpemVzPVwiJyArXG4gICAgICAgICAgICAgIGVzY2FwZVNlbGVjdG9yQXR0cmlidXRlVmFsdWVJbnNpZGVEb3VibGVRdW90ZXMoXG4gICAgICAgICAgICAgICAgb3B0aW9ucy5pbWFnZVNpemVzXG4gICAgICAgICAgICAgICkgK1xuICAgICAgICAgICAgICAnXCJdJykpXG4gICAgICAgIDogKHByZWxvYWRTZWxlY3RvciArPVxuICAgICAgICAgICAgJ1tocmVmPVwiJyArXG4gICAgICAgICAgICBlc2NhcGVTZWxlY3RvckF0dHJpYnV0ZVZhbHVlSW5zaWRlRG91YmxlUXVvdGVzKGhyZWYpICtcbiAgICAgICAgICAgICdcIl0nKVxuICAgICAgOiAocHJlbG9hZFNlbGVjdG9yICs9XG4gICAgICAgICAgJ1tocmVmPVwiJyArXG4gICAgICAgICAgZXNjYXBlU2VsZWN0b3JBdHRyaWJ1dGVWYWx1ZUluc2lkZURvdWJsZVF1b3RlcyhocmVmKSArXG4gICAgICAgICAgJ1wiXScpO1xuICAgIHZhciBrZXkgPSBwcmVsb2FkU2VsZWN0b3I7XG4gICAgc3dpdGNoIChhcykge1xuICAgICAgY2FzZSBcInN0eWxlXCI6XG4gICAgICAgIGtleSA9IGdldFN0eWxlS2V5KGhyZWYpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJzY3JpcHRcIjpcbiAgICAgICAga2V5ID0gZ2V0U2NyaXB0S2V5KGhyZWYpO1xuICAgIH1cbiAgICBwcmVsb2FkUHJvcHNNYXAuaGFzKGtleSkgfHxcbiAgICAgICgoaHJlZiA9IGFzc2lnbihcbiAgICAgICAge1xuICAgICAgICAgIHJlbDogXCJwcmVsb2FkXCIsXG4gICAgICAgICAgaHJlZjpcbiAgICAgICAgICAgIFwiaW1hZ2VcIiA9PT0gYXMgJiYgb3B0aW9ucyAmJiBvcHRpb25zLmltYWdlU3JjU2V0ID8gdm9pZCAwIDogaHJlZixcbiAgICAgICAgICBhczogYXNcbiAgICAgICAgfSxcbiAgICAgICAgb3B0aW9uc1xuICAgICAgKSksXG4gICAgICBwcmVsb2FkUHJvcHNNYXAuc2V0KGtleSwgaHJlZiksXG4gICAgICBudWxsICE9PSBvd25lckRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IocHJlbG9hZFNlbGVjdG9yKSB8fFxuICAgICAgICAoXCJzdHlsZVwiID09PSBhcyAmJlxuICAgICAgICAgIG93bmVyRG9jdW1lbnQucXVlcnlTZWxlY3RvcihnZXRTdHlsZXNoZWV0U2VsZWN0b3JGcm9tS2V5KGtleSkpKSB8fFxuICAgICAgICAoXCJzY3JpcHRcIiA9PT0gYXMgJiZcbiAgICAgICAgICBvd25lckRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZ2V0U2NyaXB0U2VsZWN0b3JGcm9tS2V5KGtleSkpKSB8fFxuICAgICAgICAoKGFzID0gb3duZXJEb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlua1wiKSksXG4gICAgICAgIHNldEluaXRpYWxQcm9wZXJ0aWVzKGFzLCBcImxpbmtcIiwgaHJlZiksXG4gICAgICAgIG1hcmtOb2RlQXNIb2lzdGFibGUoYXMpLFxuICAgICAgICBvd25lckRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoYXMpKSk7XG4gIH1cbn1cbmZ1bmN0aW9uIHByZWxvYWRNb2R1bGUoaHJlZiwgb3B0aW9ucykge1xuICBwcmV2aW91c0Rpc3BhdGNoZXIubShocmVmLCBvcHRpb25zKTtcbiAgdmFyIG93bmVyRG9jdW1lbnQgPSBnbG9iYWxEb2N1bWVudDtcbiAgaWYgKG93bmVyRG9jdW1lbnQgJiYgaHJlZikge1xuICAgIHZhciBhcyA9IG9wdGlvbnMgJiYgXCJzdHJpbmdcIiA9PT0gdHlwZW9mIG9wdGlvbnMuYXMgPyBvcHRpb25zLmFzIDogXCJzY3JpcHRcIixcbiAgICAgIHByZWxvYWRTZWxlY3RvciA9XG4gICAgICAgICdsaW5rW3JlbD1cIm1vZHVsZXByZWxvYWRcIl1bYXM9XCInICtcbiAgICAgICAgZXNjYXBlU2VsZWN0b3JBdHRyaWJ1dGVWYWx1ZUluc2lkZURvdWJsZVF1b3RlcyhhcykgK1xuICAgICAgICAnXCJdW2hyZWY9XCInICtcbiAgICAgICAgZXNjYXBlU2VsZWN0b3JBdHRyaWJ1dGVWYWx1ZUluc2lkZURvdWJsZVF1b3RlcyhocmVmKSArXG4gICAgICAgICdcIl0nLFxuICAgICAga2V5ID0gcHJlbG9hZFNlbGVjdG9yO1xuICAgIHN3aXRjaCAoYXMpIHtcbiAgICAgIGNhc2UgXCJhdWRpb3dvcmtsZXRcIjpcbiAgICAgIGNhc2UgXCJwYWludHdvcmtsZXRcIjpcbiAgICAgIGNhc2UgXCJzZXJ2aWNld29ya2VyXCI6XG4gICAgICBjYXNlIFwic2hhcmVkd29ya2VyXCI6XG4gICAgICBjYXNlIFwid29ya2VyXCI6XG4gICAgICBjYXNlIFwic2NyaXB0XCI6XG4gICAgICAgIGtleSA9IGdldFNjcmlwdEtleShocmVmKTtcbiAgICB9XG4gICAgaWYgKFxuICAgICAgIXByZWxvYWRQcm9wc01hcC5oYXMoa2V5KSAmJlxuICAgICAgKChocmVmID0gYXNzaWduKHsgcmVsOiBcIm1vZHVsZXByZWxvYWRcIiwgaHJlZjogaHJlZiB9LCBvcHRpb25zKSksXG4gICAgICBwcmVsb2FkUHJvcHNNYXAuc2V0KGtleSwgaHJlZiksXG4gICAgICBudWxsID09PSBvd25lckRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IocHJlbG9hZFNlbGVjdG9yKSlcbiAgICApIHtcbiAgICAgIHN3aXRjaCAoYXMpIHtcbiAgICAgICAgY2FzZSBcImF1ZGlvd29ya2xldFwiOlxuICAgICAgICBjYXNlIFwicGFpbnR3b3JrbGV0XCI6XG4gICAgICAgIGNhc2UgXCJzZXJ2aWNld29ya2VyXCI6XG4gICAgICAgIGNhc2UgXCJzaGFyZWR3b3JrZXJcIjpcbiAgICAgICAgY2FzZSBcIndvcmtlclwiOlxuICAgICAgICBjYXNlIFwic2NyaXB0XCI6XG4gICAgICAgICAgaWYgKG93bmVyRG9jdW1lbnQucXVlcnlTZWxlY3RvcihnZXRTY3JpcHRTZWxlY3RvckZyb21LZXkoa2V5KSkpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBhcyA9IG93bmVyRG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpbmtcIik7XG4gICAgICBzZXRJbml0aWFsUHJvcGVydGllcyhhcywgXCJsaW5rXCIsIGhyZWYpO1xuICAgICAgbWFya05vZGVBc0hvaXN0YWJsZShhcyk7XG4gICAgICBvd25lckRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoYXMpO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gcHJlaW5pdFN0eWxlKGhyZWYsIHByZWNlZGVuY2UsIG9wdGlvbnMpIHtcbiAgcHJldmlvdXNEaXNwYXRjaGVyLlMoaHJlZiwgcHJlY2VkZW5jZSwgb3B0aW9ucyk7XG4gIHZhciBvd25lckRvY3VtZW50ID0gZ2xvYmFsRG9jdW1lbnQ7XG4gIGlmIChvd25lckRvY3VtZW50ICYmIGhyZWYpIHtcbiAgICB2YXIgc3R5bGVzID0gZ2V0UmVzb3VyY2VzRnJvbVJvb3Qob3duZXJEb2N1bWVudCkuaG9pc3RhYmxlU3R5bGVzLFxuICAgICAga2V5ID0gZ2V0U3R5bGVLZXkoaHJlZik7XG4gICAgcHJlY2VkZW5jZSA9IHByZWNlZGVuY2UgfHwgXCJkZWZhdWx0XCI7XG4gICAgdmFyIHJlc291cmNlID0gc3R5bGVzLmdldChrZXkpO1xuICAgIGlmICghcmVzb3VyY2UpIHtcbiAgICAgIHZhciBzdGF0ZSA9IHsgbG9hZGluZzogMCwgcHJlbG9hZDogbnVsbCB9O1xuICAgICAgaWYgKFxuICAgICAgICAocmVzb3VyY2UgPSBvd25lckRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXG4gICAgICAgICAgZ2V0U3R5bGVzaGVldFNlbGVjdG9yRnJvbUtleShrZXkpXG4gICAgICAgICkpXG4gICAgICApXG4gICAgICAgIHN0YXRlLmxvYWRpbmcgPSA1O1xuICAgICAgZWxzZSB7XG4gICAgICAgIGhyZWYgPSBhc3NpZ24oXG4gICAgICAgICAgeyByZWw6IFwic3R5bGVzaGVldFwiLCBocmVmOiBocmVmLCBcImRhdGEtcHJlY2VkZW5jZVwiOiBwcmVjZWRlbmNlIH0sXG4gICAgICAgICAgb3B0aW9uc1xuICAgICAgICApO1xuICAgICAgICAob3B0aW9ucyA9IHByZWxvYWRQcm9wc01hcC5nZXQoa2V5KSkgJiZcbiAgICAgICAgICBhZG9wdFByZWxvYWRQcm9wc0ZvclN0eWxlc2hlZXQoaHJlZiwgb3B0aW9ucyk7XG4gICAgICAgIHZhciBsaW5rID0gKHJlc291cmNlID0gb3duZXJEb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlua1wiKSk7XG4gICAgICAgIG1hcmtOb2RlQXNIb2lzdGFibGUobGluayk7XG4gICAgICAgIHNldEluaXRpYWxQcm9wZXJ0aWVzKGxpbmssIFwibGlua1wiLCBocmVmKTtcbiAgICAgICAgbGluay5fcCA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICBsaW5rLm9ubG9hZCA9IHJlc29sdmU7XG4gICAgICAgICAgbGluay5vbmVycm9yID0gcmVqZWN0O1xuICAgICAgICB9KTtcbiAgICAgICAgbGluay5hZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgc3RhdGUubG9hZGluZyB8PSAxO1xuICAgICAgICB9KTtcbiAgICAgICAgbGluay5hZGRFdmVudExpc3RlbmVyKFwiZXJyb3JcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHN0YXRlLmxvYWRpbmcgfD0gMjtcbiAgICAgICAgfSk7XG4gICAgICAgIHN0YXRlLmxvYWRpbmcgfD0gNDtcbiAgICAgICAgaW5zZXJ0U3R5bGVzaGVldChyZXNvdXJjZSwgcHJlY2VkZW5jZSwgb3duZXJEb2N1bWVudCk7XG4gICAgICB9XG4gICAgICByZXNvdXJjZSA9IHtcbiAgICAgICAgdHlwZTogXCJzdHlsZXNoZWV0XCIsXG4gICAgICAgIGluc3RhbmNlOiByZXNvdXJjZSxcbiAgICAgICAgY291bnQ6IDEsXG4gICAgICAgIHN0YXRlOiBzdGF0ZVxuICAgICAgfTtcbiAgICAgIHN0eWxlcy5zZXQoa2V5LCByZXNvdXJjZSk7XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBwcmVpbml0U2NyaXB0KHNyYywgb3B0aW9ucykge1xuICBwcmV2aW91c0Rpc3BhdGNoZXIuWChzcmMsIG9wdGlvbnMpO1xuICB2YXIgb3duZXJEb2N1bWVudCA9IGdsb2JhbERvY3VtZW50O1xuICBpZiAob3duZXJEb2N1bWVudCAmJiBzcmMpIHtcbiAgICB2YXIgc2NyaXB0cyA9IGdldFJlc291cmNlc0Zyb21Sb290KG93bmVyRG9jdW1lbnQpLmhvaXN0YWJsZVNjcmlwdHMsXG4gICAgICBrZXkgPSBnZXRTY3JpcHRLZXkoc3JjKSxcbiAgICAgIHJlc291cmNlID0gc2NyaXB0cy5nZXQoa2V5KTtcbiAgICByZXNvdXJjZSB8fFxuICAgICAgKChyZXNvdXJjZSA9IG93bmVyRG9jdW1lbnQucXVlcnlTZWxlY3RvcihnZXRTY3JpcHRTZWxlY3RvckZyb21LZXkoa2V5KSkpLFxuICAgICAgcmVzb3VyY2UgfHxcbiAgICAgICAgKChzcmMgPSBhc3NpZ24oeyBzcmM6IHNyYywgYXN5bmM6ICEwIH0sIG9wdGlvbnMpKSxcbiAgICAgICAgKG9wdGlvbnMgPSBwcmVsb2FkUHJvcHNNYXAuZ2V0KGtleSkpICYmXG4gICAgICAgICAgYWRvcHRQcmVsb2FkUHJvcHNGb3JTY3JpcHQoc3JjLCBvcHRpb25zKSxcbiAgICAgICAgKHJlc291cmNlID0gb3duZXJEb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpKSxcbiAgICAgICAgbWFya05vZGVBc0hvaXN0YWJsZShyZXNvdXJjZSksXG4gICAgICAgIHNldEluaXRpYWxQcm9wZXJ0aWVzKHJlc291cmNlLCBcImxpbmtcIiwgc3JjKSxcbiAgICAgICAgb3duZXJEb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHJlc291cmNlKSksXG4gICAgICAocmVzb3VyY2UgPSB7XG4gICAgICAgIHR5cGU6IFwic2NyaXB0XCIsXG4gICAgICAgIGluc3RhbmNlOiByZXNvdXJjZSxcbiAgICAgICAgY291bnQ6IDEsXG4gICAgICAgIHN0YXRlOiBudWxsXG4gICAgICB9KSxcbiAgICAgIHNjcmlwdHMuc2V0KGtleSwgcmVzb3VyY2UpKTtcbiAgfVxufVxuZnVuY3Rpb24gcHJlaW5pdE1vZHVsZVNjcmlwdChzcmMsIG9wdGlvbnMpIHtcbiAgcHJldmlvdXNEaXNwYXRjaGVyLk0oc3JjLCBvcHRpb25zKTtcbiAgdmFyIG93bmVyRG9jdW1lbnQgPSBnbG9iYWxEb2N1bWVudDtcbiAgaWYgKG93bmVyRG9jdW1lbnQgJiYgc3JjKSB7XG4gICAgdmFyIHNjcmlwdHMgPSBnZXRSZXNvdXJjZXNGcm9tUm9vdChvd25lckRvY3VtZW50KS5ob2lzdGFibGVTY3JpcHRzLFxuICAgICAga2V5ID0gZ2V0U2NyaXB0S2V5KHNyYyksXG4gICAgICByZXNvdXJjZSA9IHNjcmlwdHMuZ2V0KGtleSk7XG4gICAgcmVzb3VyY2UgfHxcbiAgICAgICgocmVzb3VyY2UgPSBvd25lckRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZ2V0U2NyaXB0U2VsZWN0b3JGcm9tS2V5KGtleSkpKSxcbiAgICAgIHJlc291cmNlIHx8XG4gICAgICAgICgoc3JjID0gYXNzaWduKHsgc3JjOiBzcmMsIGFzeW5jOiAhMCwgdHlwZTogXCJtb2R1bGVcIiB9LCBvcHRpb25zKSksXG4gICAgICAgIChvcHRpb25zID0gcHJlbG9hZFByb3BzTWFwLmdldChrZXkpKSAmJlxuICAgICAgICAgIGFkb3B0UHJlbG9hZFByb3BzRm9yU2NyaXB0KHNyYywgb3B0aW9ucyksXG4gICAgICAgIChyZXNvdXJjZSA9IG93bmVyRG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKSksXG4gICAgICAgIG1hcmtOb2RlQXNIb2lzdGFibGUocmVzb3VyY2UpLFxuICAgICAgICBzZXRJbml0aWFsUHJvcGVydGllcyhyZXNvdXJjZSwgXCJsaW5rXCIsIHNyYyksXG4gICAgICAgIG93bmVyRG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChyZXNvdXJjZSkpLFxuICAgICAgKHJlc291cmNlID0ge1xuICAgICAgICB0eXBlOiBcInNjcmlwdFwiLFxuICAgICAgICBpbnN0YW5jZTogcmVzb3VyY2UsXG4gICAgICAgIGNvdW50OiAxLFxuICAgICAgICBzdGF0ZTogbnVsbFxuICAgICAgfSksXG4gICAgICBzY3JpcHRzLnNldChrZXksIHJlc291cmNlKSk7XG4gIH1cbn1cbmZ1bmN0aW9uIGdldFJlc291cmNlKHR5cGUsIGN1cnJlbnRQcm9wcywgcGVuZGluZ1Byb3BzLCBjdXJyZW50UmVzb3VyY2UpIHtcbiAgdmFyIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCA9IChKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgPVxuICAgIHJvb3RJbnN0YW5jZVN0YWNrQ3Vyc29yLmN1cnJlbnQpXG4gICAgPyBnZXRIb2lzdGFibGVSb290KEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdClcbiAgICA6IG51bGw7XG4gIGlmICghSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0KSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDQ0NikpO1xuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlIFwibWV0YVwiOlxuICAgIGNhc2UgXCJ0aXRsZVwiOlxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgY2FzZSBcInN0eWxlXCI6XG4gICAgICByZXR1cm4gXCJzdHJpbmdcIiA9PT0gdHlwZW9mIHBlbmRpbmdQcm9wcy5wcmVjZWRlbmNlICYmXG4gICAgICAgIFwic3RyaW5nXCIgPT09IHR5cGVvZiBwZW5kaW5nUHJvcHMuaHJlZlxuICAgICAgICA/ICgoY3VycmVudFByb3BzID0gZ2V0U3R5bGVLZXkocGVuZGluZ1Byb3BzLmhyZWYpKSxcbiAgICAgICAgICAocGVuZGluZ1Byb3BzID0gZ2V0UmVzb3VyY2VzRnJvbVJvb3QoXG4gICAgICAgICAgICBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHRcbiAgICAgICAgICApLmhvaXN0YWJsZVN0eWxlcyksXG4gICAgICAgICAgKGN1cnJlbnRSZXNvdXJjZSA9IHBlbmRpbmdQcm9wcy5nZXQoY3VycmVudFByb3BzKSksXG4gICAgICAgICAgY3VycmVudFJlc291cmNlIHx8XG4gICAgICAgICAgICAoKGN1cnJlbnRSZXNvdXJjZSA9IHtcbiAgICAgICAgICAgICAgdHlwZTogXCJzdHlsZVwiLFxuICAgICAgICAgICAgICBpbnN0YW5jZTogbnVsbCxcbiAgICAgICAgICAgICAgY291bnQ6IDAsXG4gICAgICAgICAgICAgIHN0YXRlOiBudWxsXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIHBlbmRpbmdQcm9wcy5zZXQoY3VycmVudFByb3BzLCBjdXJyZW50UmVzb3VyY2UpKSxcbiAgICAgICAgICBjdXJyZW50UmVzb3VyY2UpXG4gICAgICAgIDogeyB0eXBlOiBcInZvaWRcIiwgaW5zdGFuY2U6IG51bGwsIGNvdW50OiAwLCBzdGF0ZTogbnVsbCB9O1xuICAgIGNhc2UgXCJsaW5rXCI6XG4gICAgICBpZiAoXG4gICAgICAgIFwic3R5bGVzaGVldFwiID09PSBwZW5kaW5nUHJvcHMucmVsICYmXG4gICAgICAgIFwic3RyaW5nXCIgPT09IHR5cGVvZiBwZW5kaW5nUHJvcHMuaHJlZiAmJlxuICAgICAgICBcInN0cmluZ1wiID09PSB0eXBlb2YgcGVuZGluZ1Byb3BzLnByZWNlZGVuY2VcbiAgICAgICkge1xuICAgICAgICB0eXBlID0gZ2V0U3R5bGVLZXkocGVuZGluZ1Byb3BzLmhyZWYpO1xuICAgICAgICB2YXIgc3R5bGVzJDI0MiA9IGdldFJlc291cmNlc0Zyb21Sb290KFxuICAgICAgICAgICAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0XG4gICAgICAgICAgKS5ob2lzdGFibGVTdHlsZXMsXG4gICAgICAgICAgcmVzb3VyY2UkMjQzID0gc3R5bGVzJDI0Mi5nZXQodHlwZSk7XG4gICAgICAgIHJlc291cmNlJDI0MyB8fFxuICAgICAgICAgICgoSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0ID1cbiAgICAgICAgICAgIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdC5vd25lckRvY3VtZW50IHx8IEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCksXG4gICAgICAgICAgKHJlc291cmNlJDI0MyA9IHtcbiAgICAgICAgICAgIHR5cGU6IFwic3R5bGVzaGVldFwiLFxuICAgICAgICAgICAgaW5zdGFuY2U6IG51bGwsXG4gICAgICAgICAgICBjb3VudDogMCxcbiAgICAgICAgICAgIHN0YXRlOiB7IGxvYWRpbmc6IDAsIHByZWxvYWQ6IG51bGwgfVxuICAgICAgICAgIH0pLFxuICAgICAgICAgIHN0eWxlcyQyNDIuc2V0KHR5cGUsIHJlc291cmNlJDI0MyksXG4gICAgICAgICAgKHN0eWxlcyQyNDIgPSBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQucXVlcnlTZWxlY3RvcihcbiAgICAgICAgICAgIGdldFN0eWxlc2hlZXRTZWxlY3RvckZyb21LZXkodHlwZSlcbiAgICAgICAgICApKSAmJlxuICAgICAgICAgICAgIXN0eWxlcyQyNDIuX3AgJiZcbiAgICAgICAgICAgICgocmVzb3VyY2UkMjQzLmluc3RhbmNlID0gc3R5bGVzJDI0MiksXG4gICAgICAgICAgICAocmVzb3VyY2UkMjQzLnN0YXRlLmxvYWRpbmcgPSA1KSksXG4gICAgICAgICAgcHJlbG9hZFByb3BzTWFwLmhhcyh0eXBlKSB8fFxuICAgICAgICAgICAgKChwZW5kaW5nUHJvcHMgPSB7XG4gICAgICAgICAgICAgIHJlbDogXCJwcmVsb2FkXCIsXG4gICAgICAgICAgICAgIGFzOiBcInN0eWxlXCIsXG4gICAgICAgICAgICAgIGhyZWY6IHBlbmRpbmdQcm9wcy5ocmVmLFxuICAgICAgICAgICAgICBjcm9zc09yaWdpbjogcGVuZGluZ1Byb3BzLmNyb3NzT3JpZ2luLFxuICAgICAgICAgICAgICBpbnRlZ3JpdHk6IHBlbmRpbmdQcm9wcy5pbnRlZ3JpdHksXG4gICAgICAgICAgICAgIG1lZGlhOiBwZW5kaW5nUHJvcHMubWVkaWEsXG4gICAgICAgICAgICAgIGhyZWZMYW5nOiBwZW5kaW5nUHJvcHMuaHJlZkxhbmcsXG4gICAgICAgICAgICAgIHJlZmVycmVyUG9saWN5OiBwZW5kaW5nUHJvcHMucmVmZXJyZXJQb2xpY3lcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgcHJlbG9hZFByb3BzTWFwLnNldCh0eXBlLCBwZW5kaW5nUHJvcHMpLFxuICAgICAgICAgICAgc3R5bGVzJDI0MiB8fFxuICAgICAgICAgICAgICBwcmVsb2FkU3R5bGVzaGVldChcbiAgICAgICAgICAgICAgICBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQsXG4gICAgICAgICAgICAgICAgdHlwZSxcbiAgICAgICAgICAgICAgICBwZW5kaW5nUHJvcHMsXG4gICAgICAgICAgICAgICAgcmVzb3VyY2UkMjQzLnN0YXRlXG4gICAgICAgICAgICAgICkpKTtcbiAgICAgICAgaWYgKGN1cnJlbnRQcm9wcyAmJiBudWxsID09PSBjdXJyZW50UmVzb3VyY2UpXG4gICAgICAgICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg1MjgsIFwiXCIpKTtcbiAgICAgICAgcmV0dXJuIHJlc291cmNlJDI0MztcbiAgICAgIH1cbiAgICAgIGlmIChjdXJyZW50UHJvcHMgJiYgbnVsbCAhPT0gY3VycmVudFJlc291cmNlKVxuICAgICAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDUyOSwgXCJcIikpO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgY2FzZSBcInNjcmlwdFwiOlxuICAgICAgcmV0dXJuIChcbiAgICAgICAgKGN1cnJlbnRQcm9wcyA9IHBlbmRpbmdQcm9wcy5hc3luYyksXG4gICAgICAgIChwZW5kaW5nUHJvcHMgPSBwZW5kaW5nUHJvcHMuc3JjKSxcbiAgICAgICAgXCJzdHJpbmdcIiA9PT0gdHlwZW9mIHBlbmRpbmdQcm9wcyAmJlxuICAgICAgICBjdXJyZW50UHJvcHMgJiZcbiAgICAgICAgXCJmdW5jdGlvblwiICE9PSB0eXBlb2YgY3VycmVudFByb3BzICYmXG4gICAgICAgIFwic3ltYm9sXCIgIT09IHR5cGVvZiBjdXJyZW50UHJvcHNcbiAgICAgICAgICA/ICgoY3VycmVudFByb3BzID0gZ2V0U2NyaXB0S2V5KHBlbmRpbmdQcm9wcykpLFxuICAgICAgICAgICAgKHBlbmRpbmdQcm9wcyA9IGdldFJlc291cmNlc0Zyb21Sb290KFxuICAgICAgICAgICAgICBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHRcbiAgICAgICAgICAgICkuaG9pc3RhYmxlU2NyaXB0cyksXG4gICAgICAgICAgICAoY3VycmVudFJlc291cmNlID0gcGVuZGluZ1Byb3BzLmdldChjdXJyZW50UHJvcHMpKSxcbiAgICAgICAgICAgIGN1cnJlbnRSZXNvdXJjZSB8fFxuICAgICAgICAgICAgICAoKGN1cnJlbnRSZXNvdXJjZSA9IHtcbiAgICAgICAgICAgICAgICB0eXBlOiBcInNjcmlwdFwiLFxuICAgICAgICAgICAgICAgIGluc3RhbmNlOiBudWxsLFxuICAgICAgICAgICAgICAgIGNvdW50OiAwLFxuICAgICAgICAgICAgICAgIHN0YXRlOiBudWxsXG4gICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICBwZW5kaW5nUHJvcHMuc2V0KGN1cnJlbnRQcm9wcywgY3VycmVudFJlc291cmNlKSksXG4gICAgICAgICAgICBjdXJyZW50UmVzb3VyY2UpXG4gICAgICAgICAgOiB7IHR5cGU6IFwidm9pZFwiLCBpbnN0YW5jZTogbnVsbCwgY291bnQ6IDAsIHN0YXRlOiBudWxsIH1cbiAgICAgICk7XG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNDQ0LCB0eXBlKSk7XG4gIH1cbn1cbmZ1bmN0aW9uIGdldFN0eWxlS2V5KGhyZWYpIHtcbiAgcmV0dXJuICdocmVmPVwiJyArIGVzY2FwZVNlbGVjdG9yQXR0cmlidXRlVmFsdWVJbnNpZGVEb3VibGVRdW90ZXMoaHJlZikgKyAnXCInO1xufVxuZnVuY3Rpb24gZ2V0U3R5bGVzaGVldFNlbGVjdG9yRnJvbUtleShrZXkpIHtcbiAgcmV0dXJuICdsaW5rW3JlbD1cInN0eWxlc2hlZXRcIl1bJyArIGtleSArIFwiXVwiO1xufVxuZnVuY3Rpb24gc3R5bGVzaGVldFByb3BzRnJvbVJhd1Byb3BzKHJhd1Byb3BzKSB7XG4gIHJldHVybiBhc3NpZ24oe30sIHJhd1Byb3BzLCB7XG4gICAgXCJkYXRhLXByZWNlZGVuY2VcIjogcmF3UHJvcHMucHJlY2VkZW5jZSxcbiAgICBwcmVjZWRlbmNlOiBudWxsXG4gIH0pO1xufVxuZnVuY3Rpb24gcHJlbG9hZFN0eWxlc2hlZXQob3duZXJEb2N1bWVudCwga2V5LCBwcmVsb2FkUHJvcHMsIHN0YXRlKSB7XG4gIG93bmVyRG9jdW1lbnQucXVlcnlTZWxlY3RvcignbGlua1tyZWw9XCJwcmVsb2FkXCJdW2FzPVwic3R5bGVcIl1bJyArIGtleSArIFwiXVwiKVxuICAgID8gKHN0YXRlLmxvYWRpbmcgPSAxKVxuICAgIDogKChrZXkgPSBvd25lckRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaW5rXCIpKSxcbiAgICAgIChzdGF0ZS5wcmVsb2FkID0ga2V5KSxcbiAgICAgIGtleS5hZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAoc3RhdGUubG9hZGluZyB8PSAxKTtcbiAgICAgIH0pLFxuICAgICAga2V5LmFkZEV2ZW50TGlzdGVuZXIoXCJlcnJvclwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAoc3RhdGUubG9hZGluZyB8PSAyKTtcbiAgICAgIH0pLFxuICAgICAgc2V0SW5pdGlhbFByb3BlcnRpZXMoa2V5LCBcImxpbmtcIiwgcHJlbG9hZFByb3BzKSxcbiAgICAgIG1hcmtOb2RlQXNIb2lzdGFibGUoa2V5KSxcbiAgICAgIG93bmVyRG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChrZXkpKTtcbn1cbmZ1bmN0aW9uIGdldFNjcmlwdEtleShzcmMpIHtcbiAgcmV0dXJuICdbc3JjPVwiJyArIGVzY2FwZVNlbGVjdG9yQXR0cmlidXRlVmFsdWVJbnNpZGVEb3VibGVRdW90ZXMoc3JjKSArICdcIl0nO1xufVxuZnVuY3Rpb24gZ2V0U2NyaXB0U2VsZWN0b3JGcm9tS2V5KGtleSkge1xuICByZXR1cm4gXCJzY3JpcHRbYXN5bmNdXCIgKyBrZXk7XG59XG5mdW5jdGlvbiBhY3F1aXJlUmVzb3VyY2UoaG9pc3RhYmxlUm9vdCwgcmVzb3VyY2UsIHByb3BzKSB7XG4gIHJlc291cmNlLmNvdW50Kys7XG4gIGlmIChudWxsID09PSByZXNvdXJjZS5pbnN0YW5jZSlcbiAgICBzd2l0Y2ggKHJlc291cmNlLnR5cGUpIHtcbiAgICAgIGNhc2UgXCJzdHlsZVwiOlxuICAgICAgICB2YXIgaW5zdGFuY2UgPSBob2lzdGFibGVSb290LnF1ZXJ5U2VsZWN0b3IoXG4gICAgICAgICAgJ3N0eWxlW2RhdGEtaHJlZn49XCInICtcbiAgICAgICAgICAgIGVzY2FwZVNlbGVjdG9yQXR0cmlidXRlVmFsdWVJbnNpZGVEb3VibGVRdW90ZXMocHJvcHMuaHJlZikgK1xuICAgICAgICAgICAgJ1wiXSdcbiAgICAgICAgKTtcbiAgICAgICAgaWYgKGluc3RhbmNlKVxuICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAocmVzb3VyY2UuaW5zdGFuY2UgPSBpbnN0YW5jZSksXG4gICAgICAgICAgICBtYXJrTm9kZUFzSG9pc3RhYmxlKGluc3RhbmNlKSxcbiAgICAgICAgICAgIGluc3RhbmNlXG4gICAgICAgICAgKTtcbiAgICAgICAgdmFyIHN0eWxlUHJvcHMgPSBhc3NpZ24oe30sIHByb3BzLCB7XG4gICAgICAgICAgXCJkYXRhLWhyZWZcIjogcHJvcHMuaHJlZixcbiAgICAgICAgICBcImRhdGEtcHJlY2VkZW5jZVwiOiBwcm9wcy5wcmVjZWRlbmNlLFxuICAgICAgICAgIGhyZWY6IG51bGwsXG4gICAgICAgICAgcHJlY2VkZW5jZTogbnVsbFxuICAgICAgICB9KTtcbiAgICAgICAgaW5zdGFuY2UgPSAoaG9pc3RhYmxlUm9vdC5vd25lckRvY3VtZW50IHx8IGhvaXN0YWJsZVJvb3QpLmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgXCJzdHlsZVwiXG4gICAgICAgICk7XG4gICAgICAgIG1hcmtOb2RlQXNIb2lzdGFibGUoaW5zdGFuY2UpO1xuICAgICAgICBzZXRJbml0aWFsUHJvcGVydGllcyhpbnN0YW5jZSwgXCJzdHlsZVwiLCBzdHlsZVByb3BzKTtcbiAgICAgICAgaW5zZXJ0U3R5bGVzaGVldChpbnN0YW5jZSwgcHJvcHMucHJlY2VkZW5jZSwgaG9pc3RhYmxlUm9vdCk7XG4gICAgICAgIHJldHVybiAocmVzb3VyY2UuaW5zdGFuY2UgPSBpbnN0YW5jZSk7XG4gICAgICBjYXNlIFwic3R5bGVzaGVldFwiOlxuICAgICAgICBzdHlsZVByb3BzID0gZ2V0U3R5bGVLZXkocHJvcHMuaHJlZik7XG4gICAgICAgIHZhciBpbnN0YW5jZSQyNDggPSBob2lzdGFibGVSb290LnF1ZXJ5U2VsZWN0b3IoXG4gICAgICAgICAgZ2V0U3R5bGVzaGVldFNlbGVjdG9yRnJvbUtleShzdHlsZVByb3BzKVxuICAgICAgICApO1xuICAgICAgICBpZiAoaW5zdGFuY2UkMjQ4KVxuICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAocmVzb3VyY2Uuc3RhdGUubG9hZGluZyB8PSA0KSxcbiAgICAgICAgICAgIChyZXNvdXJjZS5pbnN0YW5jZSA9IGluc3RhbmNlJDI0OCksXG4gICAgICAgICAgICBtYXJrTm9kZUFzSG9pc3RhYmxlKGluc3RhbmNlJDI0OCksXG4gICAgICAgICAgICBpbnN0YW5jZSQyNDhcbiAgICAgICAgICApO1xuICAgICAgICBpbnN0YW5jZSA9IHN0eWxlc2hlZXRQcm9wc0Zyb21SYXdQcm9wcyhwcm9wcyk7XG4gICAgICAgIChzdHlsZVByb3BzID0gcHJlbG9hZFByb3BzTWFwLmdldChzdHlsZVByb3BzKSkgJiZcbiAgICAgICAgICBhZG9wdFByZWxvYWRQcm9wc0ZvclN0eWxlc2hlZXQoaW5zdGFuY2UsIHN0eWxlUHJvcHMpO1xuICAgICAgICBpbnN0YW5jZSQyNDggPSAoXG4gICAgICAgICAgaG9pc3RhYmxlUm9vdC5vd25lckRvY3VtZW50IHx8IGhvaXN0YWJsZVJvb3RcbiAgICAgICAgKS5jcmVhdGVFbGVtZW50KFwibGlua1wiKTtcbiAgICAgICAgbWFya05vZGVBc0hvaXN0YWJsZShpbnN0YW5jZSQyNDgpO1xuICAgICAgICB2YXIgbGlua0luc3RhbmNlID0gaW5zdGFuY2UkMjQ4O1xuICAgICAgICBsaW5rSW5zdGFuY2UuX3AgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgbGlua0luc3RhbmNlLm9ubG9hZCA9IHJlc29sdmU7XG4gICAgICAgICAgbGlua0luc3RhbmNlLm9uZXJyb3IgPSByZWplY3Q7XG4gICAgICAgIH0pO1xuICAgICAgICBzZXRJbml0aWFsUHJvcGVydGllcyhpbnN0YW5jZSQyNDgsIFwibGlua1wiLCBpbnN0YW5jZSk7XG4gICAgICAgIHJlc291cmNlLnN0YXRlLmxvYWRpbmcgfD0gNDtcbiAgICAgICAgaW5zZXJ0U3R5bGVzaGVldChpbnN0YW5jZSQyNDgsIHByb3BzLnByZWNlZGVuY2UsIGhvaXN0YWJsZVJvb3QpO1xuICAgICAgICByZXR1cm4gKHJlc291cmNlLmluc3RhbmNlID0gaW5zdGFuY2UkMjQ4KTtcbiAgICAgIGNhc2UgXCJzY3JpcHRcIjpcbiAgICAgICAgaW5zdGFuY2UkMjQ4ID0gZ2V0U2NyaXB0S2V5KHByb3BzLnNyYyk7XG4gICAgICAgIGlmIChcbiAgICAgICAgICAoc3R5bGVQcm9wcyA9IGhvaXN0YWJsZVJvb3QucXVlcnlTZWxlY3RvcihcbiAgICAgICAgICAgIGdldFNjcmlwdFNlbGVjdG9yRnJvbUtleShpbnN0YW5jZSQyNDgpXG4gICAgICAgICAgKSlcbiAgICAgICAgKVxuICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAocmVzb3VyY2UuaW5zdGFuY2UgPSBzdHlsZVByb3BzKSxcbiAgICAgICAgICAgIG1hcmtOb2RlQXNIb2lzdGFibGUoc3R5bGVQcm9wcyksXG4gICAgICAgICAgICBzdHlsZVByb3BzXG4gICAgICAgICAgKTtcbiAgICAgICAgaW5zdGFuY2UgPSBwcm9wcztcbiAgICAgICAgaWYgKChzdHlsZVByb3BzID0gcHJlbG9hZFByb3BzTWFwLmdldChpbnN0YW5jZSQyNDgpKSlcbiAgICAgICAgICAoaW5zdGFuY2UgPSBhc3NpZ24oe30sIHByb3BzKSksXG4gICAgICAgICAgICBhZG9wdFByZWxvYWRQcm9wc0ZvclNjcmlwdChpbnN0YW5jZSwgc3R5bGVQcm9wcyk7XG4gICAgICAgIGhvaXN0YWJsZVJvb3QgPSBob2lzdGFibGVSb290Lm93bmVyRG9jdW1lbnQgfHwgaG9pc3RhYmxlUm9vdDtcbiAgICAgICAgc3R5bGVQcm9wcyA9IGhvaXN0YWJsZVJvb3QuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKTtcbiAgICAgICAgbWFya05vZGVBc0hvaXN0YWJsZShzdHlsZVByb3BzKTtcbiAgICAgICAgc2V0SW5pdGlhbFByb3BlcnRpZXMoc3R5bGVQcm9wcywgXCJsaW5rXCIsIGluc3RhbmNlKTtcbiAgICAgICAgaG9pc3RhYmxlUm9vdC5oZWFkLmFwcGVuZENoaWxkKHN0eWxlUHJvcHMpO1xuICAgICAgICByZXR1cm4gKHJlc291cmNlLmluc3RhbmNlID0gc3R5bGVQcm9wcyk7XG4gICAgICBjYXNlIFwidm9pZFwiOlxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNDQzLCByZXNvdXJjZS50eXBlKSk7XG4gICAgfVxuICBlbHNlXG4gICAgXCJzdHlsZXNoZWV0XCIgPT09IHJlc291cmNlLnR5cGUgJiZcbiAgICAgIDAgPT09IChyZXNvdXJjZS5zdGF0ZS5sb2FkaW5nICYgNCkgJiZcbiAgICAgICgoaW5zdGFuY2UgPSByZXNvdXJjZS5pbnN0YW5jZSksXG4gICAgICAocmVzb3VyY2Uuc3RhdGUubG9hZGluZyB8PSA0KSxcbiAgICAgIGluc2VydFN0eWxlc2hlZXQoaW5zdGFuY2UsIHByb3BzLnByZWNlZGVuY2UsIGhvaXN0YWJsZVJvb3QpKTtcbiAgcmV0dXJuIHJlc291cmNlLmluc3RhbmNlO1xufVxuZnVuY3Rpb24gaW5zZXJ0U3R5bGVzaGVldChpbnN0YW5jZSwgcHJlY2VkZW5jZSwgcm9vdCkge1xuICBmb3IgKFxuICAgIHZhciBub2RlcyA9IHJvb3QucXVlcnlTZWxlY3RvckFsbChcbiAgICAgICAgJ2xpbmtbcmVsPVwic3R5bGVzaGVldFwiXVtkYXRhLXByZWNlZGVuY2VdLHN0eWxlW2RhdGEtcHJlY2VkZW5jZV0nXG4gICAgICApLFxuICAgICAgbGFzdCA9IG5vZGVzLmxlbmd0aCA/IG5vZGVzW25vZGVzLmxlbmd0aCAtIDFdIDogbnVsbCxcbiAgICAgIHByaW9yID0gbGFzdCxcbiAgICAgIGkgPSAwO1xuICAgIGkgPCBub2Rlcy5sZW5ndGg7XG4gICAgaSsrXG4gICkge1xuICAgIHZhciBub2RlID0gbm9kZXNbaV07XG4gICAgaWYgKG5vZGUuZGF0YXNldC5wcmVjZWRlbmNlID09PSBwcmVjZWRlbmNlKSBwcmlvciA9IG5vZGU7XG4gICAgZWxzZSBpZiAocHJpb3IgIT09IGxhc3QpIGJyZWFrO1xuICB9XG4gIHByaW9yXG4gICAgPyBwcmlvci5wYXJlbnROb2RlLmluc2VydEJlZm9yZShpbnN0YW5jZSwgcHJpb3IubmV4dFNpYmxpbmcpXG4gICAgOiAoKHByZWNlZGVuY2UgPSA5ID09PSByb290Lm5vZGVUeXBlID8gcm9vdC5oZWFkIDogcm9vdCksXG4gICAgICBwcmVjZWRlbmNlLmluc2VydEJlZm9yZShpbnN0YW5jZSwgcHJlY2VkZW5jZS5maXJzdENoaWxkKSk7XG59XG5mdW5jdGlvbiBhZG9wdFByZWxvYWRQcm9wc0ZvclN0eWxlc2hlZXQoc3R5bGVzaGVldFByb3BzLCBwcmVsb2FkUHJvcHMpIHtcbiAgbnVsbCA9PSBzdHlsZXNoZWV0UHJvcHMuY3Jvc3NPcmlnaW4gJiZcbiAgICAoc3R5bGVzaGVldFByb3BzLmNyb3NzT3JpZ2luID0gcHJlbG9hZFByb3BzLmNyb3NzT3JpZ2luKTtcbiAgbnVsbCA9PSBzdHlsZXNoZWV0UHJvcHMucmVmZXJyZXJQb2xpY3kgJiZcbiAgICAoc3R5bGVzaGVldFByb3BzLnJlZmVycmVyUG9saWN5ID0gcHJlbG9hZFByb3BzLnJlZmVycmVyUG9saWN5KTtcbiAgbnVsbCA9PSBzdHlsZXNoZWV0UHJvcHMudGl0bGUgJiYgKHN0eWxlc2hlZXRQcm9wcy50aXRsZSA9IHByZWxvYWRQcm9wcy50aXRsZSk7XG59XG5mdW5jdGlvbiBhZG9wdFByZWxvYWRQcm9wc0ZvclNjcmlwdChzY3JpcHRQcm9wcywgcHJlbG9hZFByb3BzKSB7XG4gIG51bGwgPT0gc2NyaXB0UHJvcHMuY3Jvc3NPcmlnaW4gJiZcbiAgICAoc2NyaXB0UHJvcHMuY3Jvc3NPcmlnaW4gPSBwcmVsb2FkUHJvcHMuY3Jvc3NPcmlnaW4pO1xuICBudWxsID09IHNjcmlwdFByb3BzLnJlZmVycmVyUG9saWN5ICYmXG4gICAgKHNjcmlwdFByb3BzLnJlZmVycmVyUG9saWN5ID0gcHJlbG9hZFByb3BzLnJlZmVycmVyUG9saWN5KTtcbiAgbnVsbCA9PSBzY3JpcHRQcm9wcy5pbnRlZ3JpdHkgJiZcbiAgICAoc2NyaXB0UHJvcHMuaW50ZWdyaXR5ID0gcHJlbG9hZFByb3BzLmludGVncml0eSk7XG59XG52YXIgdGFnQ2FjaGVzID0gbnVsbDtcbmZ1bmN0aW9uIGdldEh5ZHJhdGFibGVIb2lzdGFibGVDYWNoZSh0eXBlLCBrZXlBdHRyaWJ1dGUsIG93bmVyRG9jdW1lbnQpIHtcbiAgaWYgKG51bGwgPT09IHRhZ0NhY2hlcykge1xuICAgIHZhciBjYWNoZSA9IG5ldyBNYXAoKTtcbiAgICB2YXIgY2FjaGVzID0gKHRhZ0NhY2hlcyA9IG5ldyBNYXAoKSk7XG4gICAgY2FjaGVzLnNldChvd25lckRvY3VtZW50LCBjYWNoZSk7XG4gIH0gZWxzZVxuICAgIChjYWNoZXMgPSB0YWdDYWNoZXMpLFxuICAgICAgKGNhY2hlID0gY2FjaGVzLmdldChvd25lckRvY3VtZW50KSksXG4gICAgICBjYWNoZSB8fCAoKGNhY2hlID0gbmV3IE1hcCgpKSwgY2FjaGVzLnNldChvd25lckRvY3VtZW50LCBjYWNoZSkpO1xuICBpZiAoY2FjaGUuaGFzKHR5cGUpKSByZXR1cm4gY2FjaGU7XG4gIGNhY2hlLnNldCh0eXBlLCBudWxsKTtcbiAgb3duZXJEb2N1bWVudCA9IG93bmVyRG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUodHlwZSk7XG4gIGZvciAoY2FjaGVzID0gMDsgY2FjaGVzIDwgb3duZXJEb2N1bWVudC5sZW5ndGg7IGNhY2hlcysrKSB7XG4gICAgdmFyIG5vZGUgPSBvd25lckRvY3VtZW50W2NhY2hlc107XG4gICAgaWYgKFxuICAgICAgIShcbiAgICAgICAgbm9kZVtpbnRlcm5hbEhvaXN0YWJsZU1hcmtlcl0gfHxcbiAgICAgICAgbm9kZVtpbnRlcm5hbEluc3RhbmNlS2V5XSB8fFxuICAgICAgICAoXCJsaW5rXCIgPT09IHR5cGUgJiYgXCJzdHlsZXNoZWV0XCIgPT09IG5vZGUuZ2V0QXR0cmlidXRlKFwicmVsXCIpKVxuICAgICAgKSAmJlxuICAgICAgXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiICE9PSBub2RlLm5hbWVzcGFjZVVSSVxuICAgICkge1xuICAgICAgdmFyIG5vZGVLZXkgPSBub2RlLmdldEF0dHJpYnV0ZShrZXlBdHRyaWJ1dGUpIHx8IFwiXCI7XG4gICAgICBub2RlS2V5ID0gdHlwZSArIG5vZGVLZXk7XG4gICAgICB2YXIgZXhpc3RpbmcgPSBjYWNoZS5nZXQobm9kZUtleSk7XG4gICAgICBleGlzdGluZyA/IGV4aXN0aW5nLnB1c2gobm9kZSkgOiBjYWNoZS5zZXQobm9kZUtleSwgW25vZGVdKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGNhY2hlO1xufVxuZnVuY3Rpb24gbW91bnRIb2lzdGFibGUoaG9pc3RhYmxlUm9vdCwgdHlwZSwgaW5zdGFuY2UpIHtcbiAgaG9pc3RhYmxlUm9vdCA9IGhvaXN0YWJsZVJvb3Qub3duZXJEb2N1bWVudCB8fCBob2lzdGFibGVSb290O1xuICBob2lzdGFibGVSb290LmhlYWQuaW5zZXJ0QmVmb3JlKFxuICAgIGluc3RhbmNlLFxuICAgIFwidGl0bGVcIiA9PT0gdHlwZSA/IGhvaXN0YWJsZVJvb3QucXVlcnlTZWxlY3RvcihcImhlYWQgPiB0aXRsZVwiKSA6IG51bGxcbiAgKTtcbn1cbmZ1bmN0aW9uIGlzSG9zdEhvaXN0YWJsZVR5cGUodHlwZSwgcHJvcHMsIGhvc3RDb250ZXh0KSB7XG4gIGlmICgxID09PSBob3N0Q29udGV4dCB8fCBudWxsICE9IHByb3BzLml0ZW1Qcm9wKSByZXR1cm4gITE7XG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgXCJtZXRhXCI6XG4gICAgY2FzZSBcInRpdGxlXCI6XG4gICAgICByZXR1cm4gITA7XG4gICAgY2FzZSBcInN0eWxlXCI6XG4gICAgICBpZiAoXG4gICAgICAgIFwic3RyaW5nXCIgIT09IHR5cGVvZiBwcm9wcy5wcmVjZWRlbmNlIHx8XG4gICAgICAgIFwic3RyaW5nXCIgIT09IHR5cGVvZiBwcm9wcy5ocmVmIHx8XG4gICAgICAgIFwiXCIgPT09IHByb3BzLmhyZWZcbiAgICAgIClcbiAgICAgICAgYnJlYWs7XG4gICAgICByZXR1cm4gITA7XG4gICAgY2FzZSBcImxpbmtcIjpcbiAgICAgIGlmIChcbiAgICAgICAgXCJzdHJpbmdcIiAhPT0gdHlwZW9mIHByb3BzLnJlbCB8fFxuICAgICAgICBcInN0cmluZ1wiICE9PSB0eXBlb2YgcHJvcHMuaHJlZiB8fFxuICAgICAgICBcIlwiID09PSBwcm9wcy5ocmVmIHx8XG4gICAgICAgIHByb3BzLm9uTG9hZCB8fFxuICAgICAgICBwcm9wcy5vbkVycm9yXG4gICAgICApXG4gICAgICAgIGJyZWFrO1xuICAgICAgc3dpdGNoIChwcm9wcy5yZWwpIHtcbiAgICAgICAgY2FzZSBcInN0eWxlc2hlZXRcIjpcbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgKHR5cGUgPSBwcm9wcy5kaXNhYmxlZCksXG4gICAgICAgICAgICBcInN0cmluZ1wiID09PSB0eXBlb2YgcHJvcHMucHJlY2VkZW5jZSAmJiBudWxsID09IHR5cGVcbiAgICAgICAgICApO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiAhMDtcbiAgICAgIH1cbiAgICBjYXNlIFwic2NyaXB0XCI6XG4gICAgICBpZiAoXG4gICAgICAgIHByb3BzLmFzeW5jICYmXG4gICAgICAgIFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIHByb3BzLmFzeW5jICYmXG4gICAgICAgIFwic3ltYm9sXCIgIT09IHR5cGVvZiBwcm9wcy5hc3luYyAmJlxuICAgICAgICAhcHJvcHMub25Mb2FkICYmXG4gICAgICAgICFwcm9wcy5vbkVycm9yICYmXG4gICAgICAgIHByb3BzLnNyYyAmJlxuICAgICAgICBcInN0cmluZ1wiID09PSB0eXBlb2YgcHJvcHMuc3JjXG4gICAgICApXG4gICAgICAgIHJldHVybiAhMDtcbiAgfVxuICByZXR1cm4gITE7XG59XG5mdW5jdGlvbiBwcmVsb2FkUmVzb3VyY2UocmVzb3VyY2UpIHtcbiAgcmV0dXJuIFwic3R5bGVzaGVldFwiID09PSByZXNvdXJjZS50eXBlICYmIDAgPT09IChyZXNvdXJjZS5zdGF0ZS5sb2FkaW5nICYgMylcbiAgICA/ICExXG4gICAgOiAhMDtcbn1cbnZhciBzdXNwZW5kZWRTdGF0ZSA9IG51bGw7XG5mdW5jdGlvbiBub29wKCkge31cbmZ1bmN0aW9uIHN1c3BlbmRSZXNvdXJjZShob2lzdGFibGVSb290LCByZXNvdXJjZSwgcHJvcHMpIHtcbiAgaWYgKG51bGwgPT09IHN1c3BlbmRlZFN0YXRlKSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDQ3NSkpO1xuICB2YXIgc3RhdGUgPSBzdXNwZW5kZWRTdGF0ZTtcbiAgaWYgKFxuICAgIFwic3R5bGVzaGVldFwiID09PSByZXNvdXJjZS50eXBlICYmXG4gICAgKFwic3RyaW5nXCIgIT09IHR5cGVvZiBwcm9wcy5tZWRpYSB8fFxuICAgICAgITEgIT09IG1hdGNoTWVkaWEocHJvcHMubWVkaWEpLm1hdGNoZXMpICYmXG4gICAgMCA9PT0gKHJlc291cmNlLnN0YXRlLmxvYWRpbmcgJiA0KVxuICApIHtcbiAgICBpZiAobnVsbCA9PT0gcmVzb3VyY2UuaW5zdGFuY2UpIHtcbiAgICAgIHZhciBrZXkgPSBnZXRTdHlsZUtleShwcm9wcy5ocmVmKSxcbiAgICAgICAgaW5zdGFuY2UgPSBob2lzdGFibGVSb290LnF1ZXJ5U2VsZWN0b3IoXG4gICAgICAgICAgZ2V0U3R5bGVzaGVldFNlbGVjdG9yRnJvbUtleShrZXkpXG4gICAgICAgICk7XG4gICAgICBpZiAoaW5zdGFuY2UpIHtcbiAgICAgICAgaG9pc3RhYmxlUm9vdCA9IGluc3RhbmNlLl9wO1xuICAgICAgICBudWxsICE9PSBob2lzdGFibGVSb290ICYmXG4gICAgICAgICAgXCJvYmplY3RcIiA9PT0gdHlwZW9mIGhvaXN0YWJsZVJvb3QgJiZcbiAgICAgICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBob2lzdGFibGVSb290LnRoZW4gJiZcbiAgICAgICAgICAoc3RhdGUuY291bnQrKyxcbiAgICAgICAgICAoc3RhdGUgPSBvblVuc3VzcGVuZC5iaW5kKHN0YXRlKSksXG4gICAgICAgICAgaG9pc3RhYmxlUm9vdC50aGVuKHN0YXRlLCBzdGF0ZSkpO1xuICAgICAgICByZXNvdXJjZS5zdGF0ZS5sb2FkaW5nIHw9IDQ7XG4gICAgICAgIHJlc291cmNlLmluc3RhbmNlID0gaW5zdGFuY2U7XG4gICAgICAgIG1hcmtOb2RlQXNIb2lzdGFibGUoaW5zdGFuY2UpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpbnN0YW5jZSA9IGhvaXN0YWJsZVJvb3Qub3duZXJEb2N1bWVudCB8fCBob2lzdGFibGVSb290O1xuICAgICAgcHJvcHMgPSBzdHlsZXNoZWV0UHJvcHNGcm9tUmF3UHJvcHMocHJvcHMpO1xuICAgICAgKGtleSA9IHByZWxvYWRQcm9wc01hcC5nZXQoa2V5KSkgJiZcbiAgICAgICAgYWRvcHRQcmVsb2FkUHJvcHNGb3JTdHlsZXNoZWV0KHByb3BzLCBrZXkpO1xuICAgICAgaW5zdGFuY2UgPSBpbnN0YW5jZS5jcmVhdGVFbGVtZW50KFwibGlua1wiKTtcbiAgICAgIG1hcmtOb2RlQXNIb2lzdGFibGUoaW5zdGFuY2UpO1xuICAgICAgdmFyIGxpbmtJbnN0YW5jZSA9IGluc3RhbmNlO1xuICAgICAgbGlua0luc3RhbmNlLl9wID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBsaW5rSW5zdGFuY2Uub25sb2FkID0gcmVzb2x2ZTtcbiAgICAgICAgbGlua0luc3RhbmNlLm9uZXJyb3IgPSByZWplY3Q7XG4gICAgICB9KTtcbiAgICAgIHNldEluaXRpYWxQcm9wZXJ0aWVzKGluc3RhbmNlLCBcImxpbmtcIiwgcHJvcHMpO1xuICAgICAgcmVzb3VyY2UuaW5zdGFuY2UgPSBpbnN0YW5jZTtcbiAgICB9XG4gICAgbnVsbCA9PT0gc3RhdGUuc3R5bGVzaGVldHMgJiYgKHN0YXRlLnN0eWxlc2hlZXRzID0gbmV3IE1hcCgpKTtcbiAgICBzdGF0ZS5zdHlsZXNoZWV0cy5zZXQocmVzb3VyY2UsIGhvaXN0YWJsZVJvb3QpO1xuICAgIChob2lzdGFibGVSb290ID0gcmVzb3VyY2Uuc3RhdGUucHJlbG9hZCkgJiZcbiAgICAgIDAgPT09IChyZXNvdXJjZS5zdGF0ZS5sb2FkaW5nICYgMykgJiZcbiAgICAgIChzdGF0ZS5jb3VudCsrLFxuICAgICAgKHJlc291cmNlID0gb25VbnN1c3BlbmQuYmluZChzdGF0ZSkpLFxuICAgICAgaG9pc3RhYmxlUm9vdC5hZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLCByZXNvdXJjZSksXG4gICAgICBob2lzdGFibGVSb290LmFkZEV2ZW50TGlzdGVuZXIoXCJlcnJvclwiLCByZXNvdXJjZSkpO1xuICB9XG59XG5mdW5jdGlvbiB3YWl0Rm9yQ29tbWl0VG9CZVJlYWR5KCkge1xuICBpZiAobnVsbCA9PT0gc3VzcGVuZGVkU3RhdGUpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNDc1KSk7XG4gIHZhciBzdGF0ZSA9IHN1c3BlbmRlZFN0YXRlO1xuICBzdGF0ZS5zdHlsZXNoZWV0cyAmJlxuICAgIDAgPT09IHN0YXRlLmNvdW50ICYmXG4gICAgaW5zZXJ0U3VzcGVuZGVkU3R5bGVzaGVldHMoc3RhdGUsIHN0YXRlLnN0eWxlc2hlZXRzKTtcbiAgcmV0dXJuIDAgPCBzdGF0ZS5jb3VudFxuICAgID8gZnVuY3Rpb24gKGNvbW1pdCkge1xuICAgICAgICB2YXIgc3R5bGVzaGVldFRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgc3RhdGUuc3R5bGVzaGVldHMgJiZcbiAgICAgICAgICAgIGluc2VydFN1c3BlbmRlZFN0eWxlc2hlZXRzKHN0YXRlLCBzdGF0ZS5zdHlsZXNoZWV0cyk7XG4gICAgICAgICAgaWYgKHN0YXRlLnVuc3VzcGVuZCkge1xuICAgICAgICAgICAgdmFyIHVuc3VzcGVuZCA9IHN0YXRlLnVuc3VzcGVuZDtcbiAgICAgICAgICAgIHN0YXRlLnVuc3VzcGVuZCA9IG51bGw7XG4gICAgICAgICAgICB1bnN1c3BlbmQoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sIDZlNCk7XG4gICAgICAgIHN0YXRlLnVuc3VzcGVuZCA9IGNvbW1pdDtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBzdGF0ZS51bnN1c3BlbmQgPSBudWxsO1xuICAgICAgICAgIGNsZWFyVGltZW91dChzdHlsZXNoZWV0VGltZXIpO1xuICAgICAgICB9O1xuICAgICAgfVxuICAgIDogbnVsbDtcbn1cbmZ1bmN0aW9uIG9uVW5zdXNwZW5kKCkge1xuICB0aGlzLmNvdW50LS07XG4gIGlmICgwID09PSB0aGlzLmNvdW50KVxuICAgIGlmICh0aGlzLnN0eWxlc2hlZXRzKSBpbnNlcnRTdXNwZW5kZWRTdHlsZXNoZWV0cyh0aGlzLCB0aGlzLnN0eWxlc2hlZXRzKTtcbiAgICBlbHNlIGlmICh0aGlzLnVuc3VzcGVuZCkge1xuICAgICAgdmFyIHVuc3VzcGVuZCA9IHRoaXMudW5zdXNwZW5kO1xuICAgICAgdGhpcy51bnN1c3BlbmQgPSBudWxsO1xuICAgICAgdW5zdXNwZW5kKCk7XG4gICAgfVxufVxudmFyIHByZWNlZGVuY2VzQnlSb290ID0gbnVsbDtcbmZ1bmN0aW9uIGluc2VydFN1c3BlbmRlZFN0eWxlc2hlZXRzKHN0YXRlLCByZXNvdXJjZXMpIHtcbiAgc3RhdGUuc3R5bGVzaGVldHMgPSBudWxsO1xuICBudWxsICE9PSBzdGF0ZS51bnN1c3BlbmQgJiZcbiAgICAoc3RhdGUuY291bnQrKyxcbiAgICAocHJlY2VkZW5jZXNCeVJvb3QgPSBuZXcgTWFwKCkpLFxuICAgIHJlc291cmNlcy5mb3JFYWNoKGluc2VydFN0eWxlc2hlZXRJbnRvUm9vdCwgc3RhdGUpLFxuICAgIChwcmVjZWRlbmNlc0J5Um9vdCA9IG51bGwpLFxuICAgIG9uVW5zdXNwZW5kLmNhbGwoc3RhdGUpKTtcbn1cbmZ1bmN0aW9uIGluc2VydFN0eWxlc2hlZXRJbnRvUm9vdChyb290LCByZXNvdXJjZSkge1xuICBpZiAoIShyZXNvdXJjZS5zdGF0ZS5sb2FkaW5nICYgNCkpIHtcbiAgICB2YXIgcHJlY2VkZW5jZXMgPSBwcmVjZWRlbmNlc0J5Um9vdC5nZXQocm9vdCk7XG4gICAgaWYgKHByZWNlZGVuY2VzKSB2YXIgbGFzdCA9IHByZWNlZGVuY2VzLmdldChudWxsKTtcbiAgICBlbHNlIHtcbiAgICAgIHByZWNlZGVuY2VzID0gbmV3IE1hcCgpO1xuICAgICAgcHJlY2VkZW5jZXNCeVJvb3Quc2V0KHJvb3QsIHByZWNlZGVuY2VzKTtcbiAgICAgIGZvciAoXG4gICAgICAgIHZhciBub2RlcyA9IHJvb3QucXVlcnlTZWxlY3RvckFsbChcbiAgICAgICAgICAgIFwibGlua1tkYXRhLXByZWNlZGVuY2VdLHN0eWxlW2RhdGEtcHJlY2VkZW5jZV1cIlxuICAgICAgICAgICksXG4gICAgICAgICAgaSA9IDA7XG4gICAgICAgIGkgPCBub2Rlcy5sZW5ndGg7XG4gICAgICAgIGkrK1xuICAgICAgKSB7XG4gICAgICAgIHZhciBub2RlID0gbm9kZXNbaV07XG4gICAgICAgIGlmIChcbiAgICAgICAgICBcIkxJTktcIiA9PT0gbm9kZS5ub2RlTmFtZSB8fFxuICAgICAgICAgIFwibm90IGFsbFwiICE9PSBub2RlLmdldEF0dHJpYnV0ZShcIm1lZGlhXCIpXG4gICAgICAgIClcbiAgICAgICAgICBwcmVjZWRlbmNlcy5zZXQobm9kZS5kYXRhc2V0LnByZWNlZGVuY2UsIG5vZGUpLCAobGFzdCA9IG5vZGUpO1xuICAgICAgfVxuICAgICAgbGFzdCAmJiBwcmVjZWRlbmNlcy5zZXQobnVsbCwgbGFzdCk7XG4gICAgfVxuICAgIG5vZGVzID0gcmVzb3VyY2UuaW5zdGFuY2U7XG4gICAgbm9kZSA9IG5vZGVzLmdldEF0dHJpYnV0ZShcImRhdGEtcHJlY2VkZW5jZVwiKTtcbiAgICBpID0gcHJlY2VkZW5jZXMuZ2V0KG5vZGUpIHx8IGxhc3Q7XG4gICAgaSA9PT0gbGFzdCAmJiBwcmVjZWRlbmNlcy5zZXQobnVsbCwgbm9kZXMpO1xuICAgIHByZWNlZGVuY2VzLnNldChub2RlLCBub2Rlcyk7XG4gICAgdGhpcy5jb3VudCsrO1xuICAgIGxhc3QgPSBvblVuc3VzcGVuZC5iaW5kKHRoaXMpO1xuICAgIG5vZGVzLmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsIGxhc3QpO1xuICAgIG5vZGVzLmFkZEV2ZW50TGlzdGVuZXIoXCJlcnJvclwiLCBsYXN0KTtcbiAgICBpXG4gICAgICA/IGkucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobm9kZXMsIGkubmV4dFNpYmxpbmcpXG4gICAgICA6ICgocm9vdCA9IDkgPT09IHJvb3Qubm9kZVR5cGUgPyByb290LmhlYWQgOiByb290KSxcbiAgICAgICAgcm9vdC5pbnNlcnRCZWZvcmUobm9kZXMsIHJvb3QuZmlyc3RDaGlsZCkpO1xuICAgIHJlc291cmNlLnN0YXRlLmxvYWRpbmcgfD0gNDtcbiAgfVxufVxudmFyIEhvc3RUcmFuc2l0aW9uQ29udGV4dCA9IHtcbiAgJCR0eXBlb2Y6IFJFQUNUX0NPTlRFWFRfVFlQRSxcbiAgUHJvdmlkZXI6IG51bGwsXG4gIENvbnN1bWVyOiBudWxsLFxuICBfY3VycmVudFZhbHVlOiBzaGFyZWROb3RQZW5kaW5nT2JqZWN0LFxuICBfY3VycmVudFZhbHVlMjogc2hhcmVkTm90UGVuZGluZ09iamVjdCxcbiAgX3RocmVhZENvdW50OiAwXG59O1xuZnVuY3Rpb24gRmliZXJSb290Tm9kZShcbiAgY29udGFpbmVySW5mbyxcbiAgdGFnLFxuICBoeWRyYXRlLFxuICBpZGVudGlmaWVyUHJlZml4LFxuICBvblVuY2F1Z2h0RXJyb3IsXG4gIG9uQ2F1Z2h0RXJyb3IsXG4gIG9uUmVjb3ZlcmFibGVFcnJvcixcbiAgZm9ybVN0YXRlXG4pIHtcbiAgdGhpcy50YWcgPSAxO1xuICB0aGlzLmNvbnRhaW5lckluZm8gPSBjb250YWluZXJJbmZvO1xuICB0aGlzLmZpbmlzaGVkV29yayA9XG4gICAgdGhpcy5waW5nQ2FjaGUgPVxuICAgIHRoaXMuY3VycmVudCA9XG4gICAgdGhpcy5wZW5kaW5nQ2hpbGRyZW4gPVxuICAgICAgbnVsbDtcbiAgdGhpcy50aW1lb3V0SGFuZGxlID0gLTE7XG4gIHRoaXMuY2FsbGJhY2tOb2RlID1cbiAgICB0aGlzLm5leHQgPVxuICAgIHRoaXMucGVuZGluZ0NvbnRleHQgPVxuICAgIHRoaXMuY29udGV4dCA9XG4gICAgdGhpcy5jYW5jZWxQZW5kaW5nQ29tbWl0ID1cbiAgICAgIG51bGw7XG4gIHRoaXMuY2FsbGJhY2tQcmlvcml0eSA9IDA7XG4gIHRoaXMuZXhwaXJhdGlvblRpbWVzID0gY3JlYXRlTGFuZU1hcCgtMSk7XG4gIHRoaXMuZW50YW5nbGVkTGFuZXMgPVxuICAgIHRoaXMuc2hlbGxTdXNwZW5kQ291bnRlciA9XG4gICAgdGhpcy5lcnJvclJlY292ZXJ5RGlzYWJsZWRMYW5lcyA9XG4gICAgdGhpcy5maW5pc2hlZExhbmVzID1cbiAgICB0aGlzLmV4cGlyZWRMYW5lcyA9XG4gICAgdGhpcy53YXJtTGFuZXMgPVxuICAgIHRoaXMucGluZ2VkTGFuZXMgPVxuICAgIHRoaXMuc3VzcGVuZGVkTGFuZXMgPVxuICAgIHRoaXMucGVuZGluZ0xhbmVzID1cbiAgICAgIDA7XG4gIHRoaXMuZW50YW5nbGVtZW50cyA9IGNyZWF0ZUxhbmVNYXAoMCk7XG4gIHRoaXMuaGlkZGVuVXBkYXRlcyA9IGNyZWF0ZUxhbmVNYXAobnVsbCk7XG4gIHRoaXMuaWRlbnRpZmllclByZWZpeCA9IGlkZW50aWZpZXJQcmVmaXg7XG4gIHRoaXMub25VbmNhdWdodEVycm9yID0gb25VbmNhdWdodEVycm9yO1xuICB0aGlzLm9uQ2F1Z2h0RXJyb3IgPSBvbkNhdWdodEVycm9yO1xuICB0aGlzLm9uUmVjb3ZlcmFibGVFcnJvciA9IG9uUmVjb3ZlcmFibGVFcnJvcjtcbiAgdGhpcy5wb29sZWRDYWNoZSA9IG51bGw7XG4gIHRoaXMucG9vbGVkQ2FjaGVMYW5lcyA9IDA7XG4gIHRoaXMuZm9ybVN0YXRlID0gZm9ybVN0YXRlO1xuICB0aGlzLmluY29tcGxldGVUcmFuc2l0aW9ucyA9IG5ldyBNYXAoKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUZpYmVyUm9vdChcbiAgY29udGFpbmVySW5mbyxcbiAgdGFnLFxuICBoeWRyYXRlLFxuICBpbml0aWFsQ2hpbGRyZW4sXG4gIGh5ZHJhdGlvbkNhbGxiYWNrcyxcbiAgaXNTdHJpY3RNb2RlLFxuICBpZGVudGlmaWVyUHJlZml4LFxuICBvblVuY2F1Z2h0RXJyb3IsXG4gIG9uQ2F1Z2h0RXJyb3IsXG4gIG9uUmVjb3ZlcmFibGVFcnJvcixcbiAgdHJhbnNpdGlvbkNhbGxiYWNrcyxcbiAgZm9ybVN0YXRlXG4pIHtcbiAgY29udGFpbmVySW5mbyA9IG5ldyBGaWJlclJvb3ROb2RlKFxuICAgIGNvbnRhaW5lckluZm8sXG4gICAgdGFnLFxuICAgIGh5ZHJhdGUsXG4gICAgaWRlbnRpZmllclByZWZpeCxcbiAgICBvblVuY2F1Z2h0RXJyb3IsXG4gICAgb25DYXVnaHRFcnJvcixcbiAgICBvblJlY292ZXJhYmxlRXJyb3IsXG4gICAgZm9ybVN0YXRlXG4gICk7XG4gIHRhZyA9IDE7XG4gICEwID09PSBpc1N0cmljdE1vZGUgJiYgKHRhZyB8PSAyNCk7XG4gIGlzU3RyaWN0TW9kZSA9IGNyZWF0ZUZpYmVySW1wbENsYXNzKDMsIG51bGwsIG51bGwsIHRhZyk7XG4gIGNvbnRhaW5lckluZm8uY3VycmVudCA9IGlzU3RyaWN0TW9kZTtcbiAgaXNTdHJpY3RNb2RlLnN0YXRlTm9kZSA9IGNvbnRhaW5lckluZm87XG4gIHRhZyA9IGNyZWF0ZUNhY2hlKCk7XG4gIHRhZy5yZWZDb3VudCsrO1xuICBjb250YWluZXJJbmZvLnBvb2xlZENhY2hlID0gdGFnO1xuICB0YWcucmVmQ291bnQrKztcbiAgaXNTdHJpY3RNb2RlLm1lbW9pemVkU3RhdGUgPSB7XG4gICAgZWxlbWVudDogaW5pdGlhbENoaWxkcmVuLFxuICAgIGlzRGVoeWRyYXRlZDogaHlkcmF0ZSxcbiAgICBjYWNoZTogdGFnXG4gIH07XG4gIGluaXRpYWxpemVVcGRhdGVRdWV1ZShpc1N0cmljdE1vZGUpO1xuICByZXR1cm4gY29udGFpbmVySW5mbztcbn1cbmZ1bmN0aW9uIGdldENvbnRleHRGb3JTdWJ0cmVlKHBhcmVudENvbXBvbmVudCkge1xuICBpZiAoIXBhcmVudENvbXBvbmVudCkgcmV0dXJuIGVtcHR5Q29udGV4dE9iamVjdDtcbiAgcGFyZW50Q29tcG9uZW50ID0gZW1wdHlDb250ZXh0T2JqZWN0O1xuICByZXR1cm4gcGFyZW50Q29tcG9uZW50O1xufVxuZnVuY3Rpb24gdXBkYXRlQ29udGFpbmVySW1wbChcbiAgcm9vdEZpYmVyLFxuICBsYW5lLFxuICBlbGVtZW50LFxuICBjb250YWluZXIsXG4gIHBhcmVudENvbXBvbmVudCxcbiAgY2FsbGJhY2tcbikge1xuICBwYXJlbnRDb21wb25lbnQgPSBnZXRDb250ZXh0Rm9yU3VidHJlZShwYXJlbnRDb21wb25lbnQpO1xuICBudWxsID09PSBjb250YWluZXIuY29udGV4dFxuICAgID8gKGNvbnRhaW5lci5jb250ZXh0ID0gcGFyZW50Q29tcG9uZW50KVxuICAgIDogKGNvbnRhaW5lci5wZW5kaW5nQ29udGV4dCA9IHBhcmVudENvbXBvbmVudCk7XG4gIGNvbnRhaW5lciA9IGNyZWF0ZVVwZGF0ZShsYW5lKTtcbiAgY29udGFpbmVyLnBheWxvYWQgPSB7IGVsZW1lbnQ6IGVsZW1lbnQgfTtcbiAgY2FsbGJhY2sgPSB2b2lkIDAgPT09IGNhbGxiYWNrID8gbnVsbCA6IGNhbGxiYWNrO1xuICBudWxsICE9PSBjYWxsYmFjayAmJiAoY29udGFpbmVyLmNhbGxiYWNrID0gY2FsbGJhY2spO1xuICBlbGVtZW50ID0gZW5xdWV1ZVVwZGF0ZShyb290RmliZXIsIGNvbnRhaW5lciwgbGFuZSk7XG4gIG51bGwgIT09IGVsZW1lbnQgJiZcbiAgICAoc2NoZWR1bGVVcGRhdGVPbkZpYmVyKGVsZW1lbnQsIHJvb3RGaWJlciwgbGFuZSksXG4gICAgZW50YW5nbGVUcmFuc2l0aW9ucyhlbGVtZW50LCByb290RmliZXIsIGxhbmUpKTtcbn1cbmZ1bmN0aW9uIG1hcmtSZXRyeUxhbmVJbXBsKGZpYmVyLCByZXRyeUxhbmUpIHtcbiAgZmliZXIgPSBmaWJlci5tZW1vaXplZFN0YXRlO1xuICBpZiAobnVsbCAhPT0gZmliZXIgJiYgbnVsbCAhPT0gZmliZXIuZGVoeWRyYXRlZCkge1xuICAgIHZhciBhID0gZmliZXIucmV0cnlMYW5lO1xuICAgIGZpYmVyLnJldHJ5TGFuZSA9IDAgIT09IGEgJiYgYSA8IHJldHJ5TGFuZSA/IGEgOiByZXRyeUxhbmU7XG4gIH1cbn1cbmZ1bmN0aW9uIG1hcmtSZXRyeUxhbmVJZk5vdEh5ZHJhdGVkKGZpYmVyLCByZXRyeUxhbmUpIHtcbiAgbWFya1JldHJ5TGFuZUltcGwoZmliZXIsIHJldHJ5TGFuZSk7XG4gIChmaWJlciA9IGZpYmVyLmFsdGVybmF0ZSkgJiYgbWFya1JldHJ5TGFuZUltcGwoZmliZXIsIHJldHJ5TGFuZSk7XG59XG5mdW5jdGlvbiBhdHRlbXB0Q29udGludW91c0h5ZHJhdGlvbihmaWJlcikge1xuICBpZiAoMTMgPT09IGZpYmVyLnRhZykge1xuICAgIHZhciByb290ID0gZW5xdWV1ZUNvbmN1cnJlbnRSZW5kZXJGb3JMYW5lKGZpYmVyLCA2NzEwODg2NCk7XG4gICAgbnVsbCAhPT0gcm9vdCAmJiBzY2hlZHVsZVVwZGF0ZU9uRmliZXIocm9vdCwgZmliZXIsIDY3MTA4ODY0KTtcbiAgICBtYXJrUmV0cnlMYW5lSWZOb3RIeWRyYXRlZChmaWJlciwgNjcxMDg4NjQpO1xuICB9XG59XG52YXIgX2VuYWJsZWQgPSAhMDtcbmZ1bmN0aW9uIGRpc3BhdGNoRGlzY3JldGVFdmVudChcbiAgZG9tRXZlbnROYW1lLFxuICBldmVudFN5c3RlbUZsYWdzLFxuICBjb250YWluZXIsXG4gIG5hdGl2ZUV2ZW50XG4pIHtcbiAgdmFyIHByZXZUcmFuc2l0aW9uID0gUmVhY3RTaGFyZWRJbnRlcm5hbHMuVDtcbiAgUmVhY3RTaGFyZWRJbnRlcm5hbHMuVCA9IG51bGw7XG4gIHZhciBwcmV2aW91c1ByaW9yaXR5ID0gUmVhY3RET01TaGFyZWRJbnRlcm5hbHMucDtcbiAgdHJ5IHtcbiAgICAoUmVhY3RET01TaGFyZWRJbnRlcm5hbHMucCA9IDIpLFxuICAgICAgZGlzcGF0Y2hFdmVudChkb21FdmVudE5hbWUsIGV2ZW50U3lzdGVtRmxhZ3MsIGNvbnRhaW5lciwgbmF0aXZlRXZlbnQpO1xuICB9IGZpbmFsbHkge1xuICAgIChSZWFjdERPTVNoYXJlZEludGVybmFscy5wID0gcHJldmlvdXNQcmlvcml0eSksXG4gICAgICAoUmVhY3RTaGFyZWRJbnRlcm5hbHMuVCA9IHByZXZUcmFuc2l0aW9uKTtcbiAgfVxufVxuZnVuY3Rpb24gZGlzcGF0Y2hDb250aW51b3VzRXZlbnQoXG4gIGRvbUV2ZW50TmFtZSxcbiAgZXZlbnRTeXN0ZW1GbGFncyxcbiAgY29udGFpbmVyLFxuICBuYXRpdmVFdmVudFxuKSB7XG4gIHZhciBwcmV2VHJhbnNpdGlvbiA9IFJlYWN0U2hhcmVkSW50ZXJuYWxzLlQ7XG4gIFJlYWN0U2hhcmVkSW50ZXJuYWxzLlQgPSBudWxsO1xuICB2YXIgcHJldmlvdXNQcmlvcml0eSA9IFJlYWN0RE9NU2hhcmVkSW50ZXJuYWxzLnA7XG4gIHRyeSB7XG4gICAgKFJlYWN0RE9NU2hhcmVkSW50ZXJuYWxzLnAgPSA4KSxcbiAgICAgIGRpc3BhdGNoRXZlbnQoZG9tRXZlbnROYW1lLCBldmVudFN5c3RlbUZsYWdzLCBjb250YWluZXIsIG5hdGl2ZUV2ZW50KTtcbiAgfSBmaW5hbGx5IHtcbiAgICAoUmVhY3RET01TaGFyZWRJbnRlcm5hbHMucCA9IHByZXZpb3VzUHJpb3JpdHkpLFxuICAgICAgKFJlYWN0U2hhcmVkSW50ZXJuYWxzLlQgPSBwcmV2VHJhbnNpdGlvbik7XG4gIH1cbn1cbmZ1bmN0aW9uIGRpc3BhdGNoRXZlbnQoXG4gIGRvbUV2ZW50TmFtZSxcbiAgZXZlbnRTeXN0ZW1GbGFncyxcbiAgdGFyZ2V0Q29udGFpbmVyLFxuICBuYXRpdmVFdmVudFxuKSB7XG4gIGlmIChfZW5hYmxlZCkge1xuICAgIHZhciBibG9ja2VkT24gPSBmaW5kSW5zdGFuY2VCbG9ja2luZ0V2ZW50KG5hdGl2ZUV2ZW50KTtcbiAgICBpZiAobnVsbCA9PT0gYmxvY2tlZE9uKVxuICAgICAgZGlzcGF0Y2hFdmVudEZvclBsdWdpbkV2ZW50U3lzdGVtKFxuICAgICAgICBkb21FdmVudE5hbWUsXG4gICAgICAgIGV2ZW50U3lzdGVtRmxhZ3MsXG4gICAgICAgIG5hdGl2ZUV2ZW50LFxuICAgICAgICByZXR1cm5fdGFyZ2V0SW5zdCxcbiAgICAgICAgdGFyZ2V0Q29udGFpbmVyXG4gICAgICApLFxuICAgICAgICBjbGVhcklmQ29udGludW91c0V2ZW50KGRvbUV2ZW50TmFtZSwgbmF0aXZlRXZlbnQpO1xuICAgIGVsc2UgaWYgKFxuICAgICAgcXVldWVJZkNvbnRpbnVvdXNFdmVudChcbiAgICAgICAgYmxvY2tlZE9uLFxuICAgICAgICBkb21FdmVudE5hbWUsXG4gICAgICAgIGV2ZW50U3lzdGVtRmxhZ3MsXG4gICAgICAgIHRhcmdldENvbnRhaW5lcixcbiAgICAgICAgbmF0aXZlRXZlbnRcbiAgICAgIClcbiAgICApXG4gICAgICBuYXRpdmVFdmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICBlbHNlIGlmIChcbiAgICAgIChjbGVhcklmQ29udGludW91c0V2ZW50KGRvbUV2ZW50TmFtZSwgbmF0aXZlRXZlbnQpLFxuICAgICAgZXZlbnRTeXN0ZW1GbGFncyAmIDQgJiZcbiAgICAgICAgLTEgPCBkaXNjcmV0ZVJlcGxheWFibGVFdmVudHMuaW5kZXhPZihkb21FdmVudE5hbWUpKVxuICAgICkge1xuICAgICAgZm9yICg7IG51bGwgIT09IGJsb2NrZWRPbjsgKSB7XG4gICAgICAgIHZhciBmaWJlciA9IGdldEluc3RhbmNlRnJvbU5vZGUoYmxvY2tlZE9uKTtcbiAgICAgICAgaWYgKG51bGwgIT09IGZpYmVyKVxuICAgICAgICAgIHN3aXRjaCAoZmliZXIudGFnKSB7XG4gICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgIGZpYmVyID0gZmliZXIuc3RhdGVOb2RlO1xuICAgICAgICAgICAgICBpZiAoZmliZXIuY3VycmVudC5tZW1vaXplZFN0YXRlLmlzRGVoeWRyYXRlZCkge1xuICAgICAgICAgICAgICAgIHZhciBsYW5lcyA9IGdldEhpZ2hlc3RQcmlvcml0eUxhbmVzKGZpYmVyLnBlbmRpbmdMYW5lcyk7XG4gICAgICAgICAgICAgICAgaWYgKDAgIT09IGxhbmVzKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgcm9vdCA9IGZpYmVyO1xuICAgICAgICAgICAgICAgICAgcm9vdC5wZW5kaW5nTGFuZXMgfD0gMjtcbiAgICAgICAgICAgICAgICAgIGZvciAocm9vdC5lbnRhbmdsZWRMYW5lcyB8PSAyOyBsYW5lczsgKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBsYW5lID0gMSA8PCAoMzEgLSBjbHozMihsYW5lcykpO1xuICAgICAgICAgICAgICAgICAgICByb290LmVudGFuZ2xlbWVudHNbMV0gfD0gbGFuZTtcbiAgICAgICAgICAgICAgICAgICAgbGFuZXMgJj0gfmxhbmU7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBlbnN1cmVSb290SXNTY2hlZHVsZWQoZmliZXIpO1xuICAgICAgICAgICAgICAgICAgMCA9PT0gKGV4ZWN1dGlvbkNvbnRleHQgJiA2KSAmJlxuICAgICAgICAgICAgICAgICAgICAoKHdvcmtJblByb2dyZXNzUm9vdFJlbmRlclRhcmdldFRpbWUgPSBub3coKSArIDUwMCksXG4gICAgICAgICAgICAgICAgICAgIGZsdXNoU3luY1dvcmtBY3Jvc3NSb290c19pbXBsKDAsICExKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAxMzpcbiAgICAgICAgICAgICAgKHJvb3QgPSBlbnF1ZXVlQ29uY3VycmVudFJlbmRlckZvckxhbmUoZmliZXIsIDIpKSxcbiAgICAgICAgICAgICAgICBudWxsICE9PSByb290ICYmIHNjaGVkdWxlVXBkYXRlT25GaWJlcihyb290LCBmaWJlciwgMiksXG4gICAgICAgICAgICAgICAgZmx1c2hTeW5jV29yayQxKCksXG4gICAgICAgICAgICAgICAgbWFya1JldHJ5TGFuZUlmTm90SHlkcmF0ZWQoZmliZXIsIDIpO1xuICAgICAgICAgIH1cbiAgICAgICAgZmliZXIgPSBmaW5kSW5zdGFuY2VCbG9ja2luZ0V2ZW50KG5hdGl2ZUV2ZW50KTtcbiAgICAgICAgbnVsbCA9PT0gZmliZXIgJiZcbiAgICAgICAgICBkaXNwYXRjaEV2ZW50Rm9yUGx1Z2luRXZlbnRTeXN0ZW0oXG4gICAgICAgICAgICBkb21FdmVudE5hbWUsXG4gICAgICAgICAgICBldmVudFN5c3RlbUZsYWdzLFxuICAgICAgICAgICAgbmF0aXZlRXZlbnQsXG4gICAgICAgICAgICByZXR1cm5fdGFyZ2V0SW5zdCxcbiAgICAgICAgICAgIHRhcmdldENvbnRhaW5lclxuICAgICAgICAgICk7XG4gICAgICAgIGlmIChmaWJlciA9PT0gYmxvY2tlZE9uKSBicmVhaztcbiAgICAgICAgYmxvY2tlZE9uID0gZmliZXI7XG4gICAgICB9XG4gICAgICBudWxsICE9PSBibG9ja2VkT24gJiYgbmF0aXZlRXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgfSBlbHNlXG4gICAgICBkaXNwYXRjaEV2ZW50Rm9yUGx1Z2luRXZlbnRTeXN0ZW0oXG4gICAgICAgIGRvbUV2ZW50TmFtZSxcbiAgICAgICAgZXZlbnRTeXN0ZW1GbGFncyxcbiAgICAgICAgbmF0aXZlRXZlbnQsXG4gICAgICAgIG51bGwsXG4gICAgICAgIHRhcmdldENvbnRhaW5lclxuICAgICAgKTtcbiAgfVxufVxuZnVuY3Rpb24gZmluZEluc3RhbmNlQmxvY2tpbmdFdmVudChuYXRpdmVFdmVudCkge1xuICBuYXRpdmVFdmVudCA9IGdldEV2ZW50VGFyZ2V0KG5hdGl2ZUV2ZW50KTtcbiAgcmV0dXJuIGZpbmRJbnN0YW5jZUJsb2NraW5nVGFyZ2V0KG5hdGl2ZUV2ZW50KTtcbn1cbnZhciByZXR1cm5fdGFyZ2V0SW5zdCA9IG51bGw7XG5mdW5jdGlvbiBmaW5kSW5zdGFuY2VCbG9ja2luZ1RhcmdldCh0YXJnZXROb2RlKSB7XG4gIHJldHVybl90YXJnZXRJbnN0ID0gbnVsbDtcbiAgdGFyZ2V0Tm9kZSA9IGdldENsb3Nlc3RJbnN0YW5jZUZyb21Ob2RlKHRhcmdldE5vZGUpO1xuICBpZiAobnVsbCAhPT0gdGFyZ2V0Tm9kZSkge1xuICAgIHZhciBuZWFyZXN0TW91bnRlZCA9IGdldE5lYXJlc3RNb3VudGVkRmliZXIodGFyZ2V0Tm9kZSk7XG4gICAgaWYgKG51bGwgPT09IG5lYXJlc3RNb3VudGVkKSB0YXJnZXROb2RlID0gbnVsbDtcbiAgICBlbHNlIHtcbiAgICAgIHZhciB0YWcgPSBuZWFyZXN0TW91bnRlZC50YWc7XG4gICAgICBpZiAoMTMgPT09IHRhZykge1xuICAgICAgICB0YXJnZXROb2RlID0gZ2V0U3VzcGVuc2VJbnN0YW5jZUZyb21GaWJlcihuZWFyZXN0TW91bnRlZCk7XG4gICAgICAgIGlmIChudWxsICE9PSB0YXJnZXROb2RlKSByZXR1cm4gdGFyZ2V0Tm9kZTtcbiAgICAgICAgdGFyZ2V0Tm9kZSA9IG51bGw7XG4gICAgICB9IGVsc2UgaWYgKDMgPT09IHRhZykge1xuICAgICAgICBpZiAobmVhcmVzdE1vdW50ZWQuc3RhdGVOb2RlLmN1cnJlbnQubWVtb2l6ZWRTdGF0ZS5pc0RlaHlkcmF0ZWQpXG4gICAgICAgICAgcmV0dXJuIDMgPT09IG5lYXJlc3RNb3VudGVkLnRhZ1xuICAgICAgICAgICAgPyBuZWFyZXN0TW91bnRlZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mb1xuICAgICAgICAgICAgOiBudWxsO1xuICAgICAgICB0YXJnZXROb2RlID0gbnVsbDtcbiAgICAgIH0gZWxzZSBuZWFyZXN0TW91bnRlZCAhPT0gdGFyZ2V0Tm9kZSAmJiAodGFyZ2V0Tm9kZSA9IG51bGwpO1xuICAgIH1cbiAgfVxuICByZXR1cm5fdGFyZ2V0SW5zdCA9IHRhcmdldE5vZGU7XG4gIHJldHVybiBudWxsO1xufVxuZnVuY3Rpb24gZ2V0RXZlbnRQcmlvcml0eShkb21FdmVudE5hbWUpIHtcbiAgc3dpdGNoIChkb21FdmVudE5hbWUpIHtcbiAgICBjYXNlIFwiYmVmb3JldG9nZ2xlXCI6XG4gICAgY2FzZSBcImNhbmNlbFwiOlxuICAgIGNhc2UgXCJjbGlja1wiOlxuICAgIGNhc2UgXCJjbG9zZVwiOlxuICAgIGNhc2UgXCJjb250ZXh0bWVudVwiOlxuICAgIGNhc2UgXCJjb3B5XCI6XG4gICAgY2FzZSBcImN1dFwiOlxuICAgIGNhc2UgXCJhdXhjbGlja1wiOlxuICAgIGNhc2UgXCJkYmxjbGlja1wiOlxuICAgIGNhc2UgXCJkcmFnZW5kXCI6XG4gICAgY2FzZSBcImRyYWdzdGFydFwiOlxuICAgIGNhc2UgXCJkcm9wXCI6XG4gICAgY2FzZSBcImZvY3VzaW5cIjpcbiAgICBjYXNlIFwiZm9jdXNvdXRcIjpcbiAgICBjYXNlIFwiaW5wdXRcIjpcbiAgICBjYXNlIFwiaW52YWxpZFwiOlxuICAgIGNhc2UgXCJrZXlkb3duXCI6XG4gICAgY2FzZSBcImtleXByZXNzXCI6XG4gICAgY2FzZSBcImtleXVwXCI6XG4gICAgY2FzZSBcIm1vdXNlZG93blwiOlxuICAgIGNhc2UgXCJtb3VzZXVwXCI6XG4gICAgY2FzZSBcInBhc3RlXCI6XG4gICAgY2FzZSBcInBhdXNlXCI6XG4gICAgY2FzZSBcInBsYXlcIjpcbiAgICBjYXNlIFwicG9pbnRlcmNhbmNlbFwiOlxuICAgIGNhc2UgXCJwb2ludGVyZG93blwiOlxuICAgIGNhc2UgXCJwb2ludGVydXBcIjpcbiAgICBjYXNlIFwicmF0ZWNoYW5nZVwiOlxuICAgIGNhc2UgXCJyZXNldFwiOlxuICAgIGNhc2UgXCJyZXNpemVcIjpcbiAgICBjYXNlIFwic2Vla2VkXCI6XG4gICAgY2FzZSBcInN1Ym1pdFwiOlxuICAgIGNhc2UgXCJ0b2dnbGVcIjpcbiAgICBjYXNlIFwidG91Y2hjYW5jZWxcIjpcbiAgICBjYXNlIFwidG91Y2hlbmRcIjpcbiAgICBjYXNlIFwidG91Y2hzdGFydFwiOlxuICAgIGNhc2UgXCJ2b2x1bWVjaGFuZ2VcIjpcbiAgICBjYXNlIFwiY2hhbmdlXCI6XG4gICAgY2FzZSBcInNlbGVjdGlvbmNoYW5nZVwiOlxuICAgIGNhc2UgXCJ0ZXh0SW5wdXRcIjpcbiAgICBjYXNlIFwiY29tcG9zaXRpb25zdGFydFwiOlxuICAgIGNhc2UgXCJjb21wb3NpdGlvbmVuZFwiOlxuICAgIGNhc2UgXCJjb21wb3NpdGlvbnVwZGF0ZVwiOlxuICAgIGNhc2UgXCJiZWZvcmVibHVyXCI6XG4gICAgY2FzZSBcImFmdGVyYmx1clwiOlxuICAgIGNhc2UgXCJiZWZvcmVpbnB1dFwiOlxuICAgIGNhc2UgXCJibHVyXCI6XG4gICAgY2FzZSBcImZ1bGxzY3JlZW5jaGFuZ2VcIjpcbiAgICBjYXNlIFwiZm9jdXNcIjpcbiAgICBjYXNlIFwiaGFzaGNoYW5nZVwiOlxuICAgIGNhc2UgXCJwb3BzdGF0ZVwiOlxuICAgIGNhc2UgXCJzZWxlY3RcIjpcbiAgICBjYXNlIFwic2VsZWN0c3RhcnRcIjpcbiAgICAgIHJldHVybiAyO1xuICAgIGNhc2UgXCJkcmFnXCI6XG4gICAgY2FzZSBcImRyYWdlbnRlclwiOlxuICAgIGNhc2UgXCJkcmFnZXhpdFwiOlxuICAgIGNhc2UgXCJkcmFnbGVhdmVcIjpcbiAgICBjYXNlIFwiZHJhZ292ZXJcIjpcbiAgICBjYXNlIFwibW91c2Vtb3ZlXCI6XG4gICAgY2FzZSBcIm1vdXNlb3V0XCI6XG4gICAgY2FzZSBcIm1vdXNlb3ZlclwiOlxuICAgIGNhc2UgXCJwb2ludGVybW92ZVwiOlxuICAgIGNhc2UgXCJwb2ludGVyb3V0XCI6XG4gICAgY2FzZSBcInBvaW50ZXJvdmVyXCI6XG4gICAgY2FzZSBcInNjcm9sbFwiOlxuICAgIGNhc2UgXCJ0b3VjaG1vdmVcIjpcbiAgICBjYXNlIFwid2hlZWxcIjpcbiAgICBjYXNlIFwibW91c2VlbnRlclwiOlxuICAgIGNhc2UgXCJtb3VzZWxlYXZlXCI6XG4gICAgY2FzZSBcInBvaW50ZXJlbnRlclwiOlxuICAgIGNhc2UgXCJwb2ludGVybGVhdmVcIjpcbiAgICAgIHJldHVybiA4O1xuICAgIGNhc2UgXCJtZXNzYWdlXCI6XG4gICAgICBzd2l0Y2ggKGdldEN1cnJlbnRQcmlvcml0eUxldmVsKCkpIHtcbiAgICAgICAgY2FzZSBJbW1lZGlhdGVQcmlvcml0eTpcbiAgICAgICAgICByZXR1cm4gMjtcbiAgICAgICAgY2FzZSBVc2VyQmxvY2tpbmdQcmlvcml0eTpcbiAgICAgICAgICByZXR1cm4gODtcbiAgICAgICAgY2FzZSBOb3JtYWxQcmlvcml0eSQxOlxuICAgICAgICBjYXNlIExvd1ByaW9yaXR5OlxuICAgICAgICAgIHJldHVybiAzMjtcbiAgICAgICAgY2FzZSBJZGxlUHJpb3JpdHk6XG4gICAgICAgICAgcmV0dXJuIDI2ODQzNTQ1NjtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gMzI7XG4gICAgICB9XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiAzMjtcbiAgfVxufVxudmFyIGhhc1NjaGVkdWxlZFJlcGxheUF0dGVtcHQgPSAhMSxcbiAgcXVldWVkRm9jdXMgPSBudWxsLFxuICBxdWV1ZWREcmFnID0gbnVsbCxcbiAgcXVldWVkTW91c2UgPSBudWxsLFxuICBxdWV1ZWRQb2ludGVycyA9IG5ldyBNYXAoKSxcbiAgcXVldWVkUG9pbnRlckNhcHR1cmVzID0gbmV3IE1hcCgpLFxuICBxdWV1ZWRFeHBsaWNpdEh5ZHJhdGlvblRhcmdldHMgPSBbXSxcbiAgZGlzY3JldGVSZXBsYXlhYmxlRXZlbnRzID1cbiAgICBcIm1vdXNlZG93biBtb3VzZXVwIHRvdWNoY2FuY2VsIHRvdWNoZW5kIHRvdWNoc3RhcnQgYXV4Y2xpY2sgZGJsY2xpY2sgcG9pbnRlcmNhbmNlbCBwb2ludGVyZG93biBwb2ludGVydXAgZHJhZ2VuZCBkcmFnc3RhcnQgZHJvcCBjb21wb3NpdGlvbmVuZCBjb21wb3NpdGlvbnN0YXJ0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgaW5wdXQgdGV4dElucHV0IGNvcHkgY3V0IHBhc3RlIGNsaWNrIGNoYW5nZSBjb250ZXh0bWVudSByZXNldFwiLnNwbGl0KFxuICAgICAgXCIgXCJcbiAgICApO1xuZnVuY3Rpb24gY2xlYXJJZkNvbnRpbnVvdXNFdmVudChkb21FdmVudE5hbWUsIG5hdGl2ZUV2ZW50KSB7XG4gIHN3aXRjaCAoZG9tRXZlbnROYW1lKSB7XG4gICAgY2FzZSBcImZvY3VzaW5cIjpcbiAgICBjYXNlIFwiZm9jdXNvdXRcIjpcbiAgICAgIHF1ZXVlZEZvY3VzID0gbnVsbDtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJkcmFnZW50ZXJcIjpcbiAgICBjYXNlIFwiZHJhZ2xlYXZlXCI6XG4gICAgICBxdWV1ZWREcmFnID0gbnVsbDtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJtb3VzZW92ZXJcIjpcbiAgICBjYXNlIFwibW91c2VvdXRcIjpcbiAgICAgIHF1ZXVlZE1vdXNlID0gbnVsbDtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJwb2ludGVyb3ZlclwiOlxuICAgIGNhc2UgXCJwb2ludGVyb3V0XCI6XG4gICAgICBxdWV1ZWRQb2ludGVycy5kZWxldGUobmF0aXZlRXZlbnQucG9pbnRlcklkKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOlxuICAgIGNhc2UgXCJsb3N0cG9pbnRlcmNhcHR1cmVcIjpcbiAgICAgIHF1ZXVlZFBvaW50ZXJDYXB0dXJlcy5kZWxldGUobmF0aXZlRXZlbnQucG9pbnRlcklkKTtcbiAgfVxufVxuZnVuY3Rpb24gYWNjdW11bGF0ZU9yQ3JlYXRlQ29udGludW91c1F1ZXVlZFJlcGxheWFibGVFdmVudChcbiAgZXhpc3RpbmdRdWV1ZWRFdmVudCxcbiAgYmxvY2tlZE9uLFxuICBkb21FdmVudE5hbWUsXG4gIGV2ZW50U3lzdGVtRmxhZ3MsXG4gIHRhcmdldENvbnRhaW5lcixcbiAgbmF0aXZlRXZlbnRcbikge1xuICBpZiAoXG4gICAgbnVsbCA9PT0gZXhpc3RpbmdRdWV1ZWRFdmVudCB8fFxuICAgIGV4aXN0aW5nUXVldWVkRXZlbnQubmF0aXZlRXZlbnQgIT09IG5hdGl2ZUV2ZW50XG4gIClcbiAgICByZXR1cm4gKFxuICAgICAgKGV4aXN0aW5nUXVldWVkRXZlbnQgPSB7XG4gICAgICAgIGJsb2NrZWRPbjogYmxvY2tlZE9uLFxuICAgICAgICBkb21FdmVudE5hbWU6IGRvbUV2ZW50TmFtZSxcbiAgICAgICAgZXZlbnRTeXN0ZW1GbGFnczogZXZlbnRTeXN0ZW1GbGFncyxcbiAgICAgICAgbmF0aXZlRXZlbnQ6IG5hdGl2ZUV2ZW50LFxuICAgICAgICB0YXJnZXRDb250YWluZXJzOiBbdGFyZ2V0Q29udGFpbmVyXVxuICAgICAgfSksXG4gICAgICBudWxsICE9PSBibG9ja2VkT24gJiZcbiAgICAgICAgKChibG9ja2VkT24gPSBnZXRJbnN0YW5jZUZyb21Ob2RlKGJsb2NrZWRPbikpLFxuICAgICAgICBudWxsICE9PSBibG9ja2VkT24gJiYgYXR0ZW1wdENvbnRpbnVvdXNIeWRyYXRpb24oYmxvY2tlZE9uKSksXG4gICAgICBleGlzdGluZ1F1ZXVlZEV2ZW50XG4gICAgKTtcbiAgZXhpc3RpbmdRdWV1ZWRFdmVudC5ldmVudFN5c3RlbUZsYWdzIHw9IGV2ZW50U3lzdGVtRmxhZ3M7XG4gIGJsb2NrZWRPbiA9IGV4aXN0aW5nUXVldWVkRXZlbnQudGFyZ2V0Q29udGFpbmVycztcbiAgbnVsbCAhPT0gdGFyZ2V0Q29udGFpbmVyICYmXG4gICAgLTEgPT09IGJsb2NrZWRPbi5pbmRleE9mKHRhcmdldENvbnRhaW5lcikgJiZcbiAgICBibG9ja2VkT24ucHVzaCh0YXJnZXRDb250YWluZXIpO1xuICByZXR1cm4gZXhpc3RpbmdRdWV1ZWRFdmVudDtcbn1cbmZ1bmN0aW9uIHF1ZXVlSWZDb250aW51b3VzRXZlbnQoXG4gIGJsb2NrZWRPbixcbiAgZG9tRXZlbnROYW1lLFxuICBldmVudFN5c3RlbUZsYWdzLFxuICB0YXJnZXRDb250YWluZXIsXG4gIG5hdGl2ZUV2ZW50XG4pIHtcbiAgc3dpdGNoIChkb21FdmVudE5hbWUpIHtcbiAgICBjYXNlIFwiZm9jdXNpblwiOlxuICAgICAgcmV0dXJuIChcbiAgICAgICAgKHF1ZXVlZEZvY3VzID0gYWNjdW11bGF0ZU9yQ3JlYXRlQ29udGludW91c1F1ZXVlZFJlcGxheWFibGVFdmVudChcbiAgICAgICAgICBxdWV1ZWRGb2N1cyxcbiAgICAgICAgICBibG9ja2VkT24sXG4gICAgICAgICAgZG9tRXZlbnROYW1lLFxuICAgICAgICAgIGV2ZW50U3lzdGVtRmxhZ3MsXG4gICAgICAgICAgdGFyZ2V0Q29udGFpbmVyLFxuICAgICAgICAgIG5hdGl2ZUV2ZW50XG4gICAgICAgICkpLFxuICAgICAgICAhMFxuICAgICAgKTtcbiAgICBjYXNlIFwiZHJhZ2VudGVyXCI6XG4gICAgICByZXR1cm4gKFxuICAgICAgICAocXVldWVkRHJhZyA9IGFjY3VtdWxhdGVPckNyZWF0ZUNvbnRpbnVvdXNRdWV1ZWRSZXBsYXlhYmxlRXZlbnQoXG4gICAgICAgICAgcXVldWVkRHJhZyxcbiAgICAgICAgICBibG9ja2VkT24sXG4gICAgICAgICAgZG9tRXZlbnROYW1lLFxuICAgICAgICAgIGV2ZW50U3lzdGVtRmxhZ3MsXG4gICAgICAgICAgdGFyZ2V0Q29udGFpbmVyLFxuICAgICAgICAgIG5hdGl2ZUV2ZW50XG4gICAgICAgICkpLFxuICAgICAgICAhMFxuICAgICAgKTtcbiAgICBjYXNlIFwibW91c2VvdmVyXCI6XG4gICAgICByZXR1cm4gKFxuICAgICAgICAocXVldWVkTW91c2UgPSBhY2N1bXVsYXRlT3JDcmVhdGVDb250aW51b3VzUXVldWVkUmVwbGF5YWJsZUV2ZW50KFxuICAgICAgICAgIHF1ZXVlZE1vdXNlLFxuICAgICAgICAgIGJsb2NrZWRPbixcbiAgICAgICAgICBkb21FdmVudE5hbWUsXG4gICAgICAgICAgZXZlbnRTeXN0ZW1GbGFncyxcbiAgICAgICAgICB0YXJnZXRDb250YWluZXIsXG4gICAgICAgICAgbmF0aXZlRXZlbnRcbiAgICAgICAgKSksXG4gICAgICAgICEwXG4gICAgICApO1xuICAgIGNhc2UgXCJwb2ludGVyb3ZlclwiOlxuICAgICAgdmFyIHBvaW50ZXJJZCA9IG5hdGl2ZUV2ZW50LnBvaW50ZXJJZDtcbiAgICAgIHF1ZXVlZFBvaW50ZXJzLnNldChcbiAgICAgICAgcG9pbnRlcklkLFxuICAgICAgICBhY2N1bXVsYXRlT3JDcmVhdGVDb250aW51b3VzUXVldWVkUmVwbGF5YWJsZUV2ZW50KFxuICAgICAgICAgIHF1ZXVlZFBvaW50ZXJzLmdldChwb2ludGVySWQpIHx8IG51bGwsXG4gICAgICAgICAgYmxvY2tlZE9uLFxuICAgICAgICAgIGRvbUV2ZW50TmFtZSxcbiAgICAgICAgICBldmVudFN5c3RlbUZsYWdzLFxuICAgICAgICAgIHRhcmdldENvbnRhaW5lcixcbiAgICAgICAgICBuYXRpdmVFdmVudFxuICAgICAgICApXG4gICAgICApO1xuICAgICAgcmV0dXJuICEwO1xuICAgIGNhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOlxuICAgICAgcmV0dXJuIChcbiAgICAgICAgKHBvaW50ZXJJZCA9IG5hdGl2ZUV2ZW50LnBvaW50ZXJJZCksXG4gICAgICAgIHF1ZXVlZFBvaW50ZXJDYXB0dXJlcy5zZXQoXG4gICAgICAgICAgcG9pbnRlcklkLFxuICAgICAgICAgIGFjY3VtdWxhdGVPckNyZWF0ZUNvbnRpbnVvdXNRdWV1ZWRSZXBsYXlhYmxlRXZlbnQoXG4gICAgICAgICAgICBxdWV1ZWRQb2ludGVyQ2FwdHVyZXMuZ2V0KHBvaW50ZXJJZCkgfHwgbnVsbCxcbiAgICAgICAgICAgIGJsb2NrZWRPbixcbiAgICAgICAgICAgIGRvbUV2ZW50TmFtZSxcbiAgICAgICAgICAgIGV2ZW50U3lzdGVtRmxhZ3MsXG4gICAgICAgICAgICB0YXJnZXRDb250YWluZXIsXG4gICAgICAgICAgICBuYXRpdmVFdmVudFxuICAgICAgICAgIClcbiAgICAgICAgKSxcbiAgICAgICAgITBcbiAgICAgICk7XG4gIH1cbiAgcmV0dXJuICExO1xufVxuZnVuY3Rpb24gYXR0ZW1wdEV4cGxpY2l0SHlkcmF0aW9uVGFyZ2V0KHF1ZXVlZFRhcmdldCkge1xuICB2YXIgdGFyZ2V0SW5zdCA9IGdldENsb3Nlc3RJbnN0YW5jZUZyb21Ob2RlKHF1ZXVlZFRhcmdldC50YXJnZXQpO1xuICBpZiAobnVsbCAhPT0gdGFyZ2V0SW5zdCkge1xuICAgIHZhciBuZWFyZXN0TW91bnRlZCA9IGdldE5lYXJlc3RNb3VudGVkRmliZXIodGFyZ2V0SW5zdCk7XG4gICAgaWYgKG51bGwgIT09IG5lYXJlc3RNb3VudGVkKVxuICAgICAgaWYgKCgodGFyZ2V0SW5zdCA9IG5lYXJlc3RNb3VudGVkLnRhZyksIDEzID09PSB0YXJnZXRJbnN0KSkge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgKCh0YXJnZXRJbnN0ID0gZ2V0U3VzcGVuc2VJbnN0YW5jZUZyb21GaWJlcihuZWFyZXN0TW91bnRlZCkpLFxuICAgICAgICAgIG51bGwgIT09IHRhcmdldEluc3QpXG4gICAgICAgICkge1xuICAgICAgICAgIHF1ZXVlZFRhcmdldC5ibG9ja2VkT24gPSB0YXJnZXRJbnN0O1xuICAgICAgICAgIHJ1bldpdGhQcmlvcml0eShxdWV1ZWRUYXJnZXQucHJpb3JpdHksIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICgxMyA9PT0gbmVhcmVzdE1vdW50ZWQudGFnKSB7XG4gICAgICAgICAgICAgIHZhciBsYW5lID0gcmVxdWVzdFVwZGF0ZUxhbmUoKSxcbiAgICAgICAgICAgICAgICByb290ID0gZW5xdWV1ZUNvbmN1cnJlbnRSZW5kZXJGb3JMYW5lKG5lYXJlc3RNb3VudGVkLCBsYW5lKTtcbiAgICAgICAgICAgICAgbnVsbCAhPT0gcm9vdCAmJlxuICAgICAgICAgICAgICAgIHNjaGVkdWxlVXBkYXRlT25GaWJlcihyb290LCBuZWFyZXN0TW91bnRlZCwgbGFuZSk7XG4gICAgICAgICAgICAgIG1hcmtSZXRyeUxhbmVJZk5vdEh5ZHJhdGVkKG5lYXJlc3RNb3VudGVkLCBsYW5lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgIDMgPT09IHRhcmdldEluc3QgJiZcbiAgICAgICAgbmVhcmVzdE1vdW50ZWQuc3RhdGVOb2RlLmN1cnJlbnQubWVtb2l6ZWRTdGF0ZS5pc0RlaHlkcmF0ZWRcbiAgICAgICkge1xuICAgICAgICBxdWV1ZWRUYXJnZXQuYmxvY2tlZE9uID1cbiAgICAgICAgICAzID09PSBuZWFyZXN0TW91bnRlZC50YWdcbiAgICAgICAgICAgID8gbmVhcmVzdE1vdW50ZWQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm9cbiAgICAgICAgICAgIDogbnVsbDtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICB9XG4gIHF1ZXVlZFRhcmdldC5ibG9ja2VkT24gPSBudWxsO1xufVxuZnVuY3Rpb24gYXR0ZW1wdFJlcGxheUNvbnRpbnVvdXNRdWV1ZWRFdmVudChxdWV1ZWRFdmVudCkge1xuICBpZiAobnVsbCAhPT0gcXVldWVkRXZlbnQuYmxvY2tlZE9uKSByZXR1cm4gITE7XG4gIGZvciAoXG4gICAgdmFyIHRhcmdldENvbnRhaW5lcnMgPSBxdWV1ZWRFdmVudC50YXJnZXRDb250YWluZXJzO1xuICAgIDAgPCB0YXJnZXRDb250YWluZXJzLmxlbmd0aDtcblxuICApIHtcbiAgICB2YXIgbmV4dEJsb2NrZWRPbiA9IGZpbmRJbnN0YW5jZUJsb2NraW5nRXZlbnQocXVldWVkRXZlbnQubmF0aXZlRXZlbnQpO1xuICAgIGlmIChudWxsID09PSBuZXh0QmxvY2tlZE9uKSB7XG4gICAgICBuZXh0QmxvY2tlZE9uID0gcXVldWVkRXZlbnQubmF0aXZlRXZlbnQ7XG4gICAgICB2YXIgbmF0aXZlRXZlbnRDbG9uZSA9IG5ldyBuZXh0QmxvY2tlZE9uLmNvbnN0cnVjdG9yKFxuICAgICAgICBuZXh0QmxvY2tlZE9uLnR5cGUsXG4gICAgICAgIG5leHRCbG9ja2VkT25cbiAgICAgICk7XG4gICAgICBjdXJyZW50UmVwbGF5aW5nRXZlbnQgPSBuYXRpdmVFdmVudENsb25lO1xuICAgICAgbmV4dEJsb2NrZWRPbi50YXJnZXQuZGlzcGF0Y2hFdmVudChuYXRpdmVFdmVudENsb25lKTtcbiAgICAgIGN1cnJlbnRSZXBsYXlpbmdFdmVudCA9IG51bGw7XG4gICAgfSBlbHNlXG4gICAgICByZXR1cm4gKFxuICAgICAgICAodGFyZ2V0Q29udGFpbmVycyA9IGdldEluc3RhbmNlRnJvbU5vZGUobmV4dEJsb2NrZWRPbikpLFxuICAgICAgICBudWxsICE9PSB0YXJnZXRDb250YWluZXJzICYmXG4gICAgICAgICAgYXR0ZW1wdENvbnRpbnVvdXNIeWRyYXRpb24odGFyZ2V0Q29udGFpbmVycyksXG4gICAgICAgIChxdWV1ZWRFdmVudC5ibG9ja2VkT24gPSBuZXh0QmxvY2tlZE9uKSxcbiAgICAgICAgITFcbiAgICAgICk7XG4gICAgdGFyZ2V0Q29udGFpbmVycy5zaGlmdCgpO1xuICB9XG4gIHJldHVybiAhMDtcbn1cbmZ1bmN0aW9uIGF0dGVtcHRSZXBsYXlDb250aW51b3VzUXVldWVkRXZlbnRJbk1hcChxdWV1ZWRFdmVudCwga2V5LCBtYXApIHtcbiAgYXR0ZW1wdFJlcGxheUNvbnRpbnVvdXNRdWV1ZWRFdmVudChxdWV1ZWRFdmVudCkgJiYgbWFwLmRlbGV0ZShrZXkpO1xufVxuZnVuY3Rpb24gcmVwbGF5VW5ibG9ja2VkRXZlbnRzKCkge1xuICBoYXNTY2hlZHVsZWRSZXBsYXlBdHRlbXB0ID0gITE7XG4gIG51bGwgIT09IHF1ZXVlZEZvY3VzICYmXG4gICAgYXR0ZW1wdFJlcGxheUNvbnRpbnVvdXNRdWV1ZWRFdmVudChxdWV1ZWRGb2N1cykgJiZcbiAgICAocXVldWVkRm9jdXMgPSBudWxsKTtcbiAgbnVsbCAhPT0gcXVldWVkRHJhZyAmJlxuICAgIGF0dGVtcHRSZXBsYXlDb250aW51b3VzUXVldWVkRXZlbnQocXVldWVkRHJhZykgJiZcbiAgICAocXVldWVkRHJhZyA9IG51bGwpO1xuICBudWxsICE9PSBxdWV1ZWRNb3VzZSAmJlxuICAgIGF0dGVtcHRSZXBsYXlDb250aW51b3VzUXVldWVkRXZlbnQocXVldWVkTW91c2UpICYmXG4gICAgKHF1ZXVlZE1vdXNlID0gbnVsbCk7XG4gIHF1ZXVlZFBvaW50ZXJzLmZvckVhY2goYXR0ZW1wdFJlcGxheUNvbnRpbnVvdXNRdWV1ZWRFdmVudEluTWFwKTtcbiAgcXVldWVkUG9pbnRlckNhcHR1cmVzLmZvckVhY2goYXR0ZW1wdFJlcGxheUNvbnRpbnVvdXNRdWV1ZWRFdmVudEluTWFwKTtcbn1cbmZ1bmN0aW9uIHNjaGVkdWxlQ2FsbGJhY2tJZlVuYmxvY2tlZChxdWV1ZWRFdmVudCwgdW5ibG9ja2VkKSB7XG4gIHF1ZXVlZEV2ZW50LmJsb2NrZWRPbiA9PT0gdW5ibG9ja2VkICYmXG4gICAgKChxdWV1ZWRFdmVudC5ibG9ja2VkT24gPSBudWxsKSxcbiAgICBoYXNTY2hlZHVsZWRSZXBsYXlBdHRlbXB0IHx8XG4gICAgICAoKGhhc1NjaGVkdWxlZFJlcGxheUF0dGVtcHQgPSAhMCksXG4gICAgICBTY2hlZHVsZXIudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayhcbiAgICAgICAgU2NoZWR1bGVyLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5LFxuICAgICAgICByZXBsYXlVbmJsb2NrZWRFdmVudHNcbiAgICAgICkpKTtcbn1cbnZhciBsYXN0U2NoZWR1bGVkUmVwbGF5UXVldWUgPSBudWxsO1xuZnVuY3Rpb24gc2NoZWR1bGVSZXBsYXlRdWV1ZUlmTmVlZGVkKGZvcm1SZXBsYXlpbmdRdWV1ZSkge1xuICBsYXN0U2NoZWR1bGVkUmVwbGF5UXVldWUgIT09IGZvcm1SZXBsYXlpbmdRdWV1ZSAmJlxuICAgICgobGFzdFNjaGVkdWxlZFJlcGxheVF1ZXVlID0gZm9ybVJlcGxheWluZ1F1ZXVlKSxcbiAgICBTY2hlZHVsZXIudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayhcbiAgICAgIFNjaGVkdWxlci51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSxcbiAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgbGFzdFNjaGVkdWxlZFJlcGxheVF1ZXVlID09PSBmb3JtUmVwbGF5aW5nUXVldWUgJiZcbiAgICAgICAgICAobGFzdFNjaGVkdWxlZFJlcGxheVF1ZXVlID0gbnVsbCk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZm9ybVJlcGxheWluZ1F1ZXVlLmxlbmd0aDsgaSArPSAzKSB7XG4gICAgICAgICAgdmFyIGZvcm0gPSBmb3JtUmVwbGF5aW5nUXVldWVbaV0sXG4gICAgICAgICAgICBzdWJtaXR0ZXJPckFjdGlvbiA9IGZvcm1SZXBsYXlpbmdRdWV1ZVtpICsgMV0sXG4gICAgICAgICAgICBmb3JtRGF0YSA9IGZvcm1SZXBsYXlpbmdRdWV1ZVtpICsgMl07XG4gICAgICAgICAgaWYgKFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIHN1Ym1pdHRlck9yQWN0aW9uKVxuICAgICAgICAgICAgaWYgKG51bGwgPT09IGZpbmRJbnN0YW5jZUJsb2NraW5nVGFyZ2V0KHN1Ym1pdHRlck9yQWN0aW9uIHx8IGZvcm0pKVxuICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIGVsc2UgYnJlYWs7XG4gICAgICAgICAgdmFyIGZvcm1JbnN0ID0gZ2V0SW5zdGFuY2VGcm9tTm9kZShmb3JtKTtcbiAgICAgICAgICBudWxsICE9PSBmb3JtSW5zdCAmJlxuICAgICAgICAgICAgKGZvcm1SZXBsYXlpbmdRdWV1ZS5zcGxpY2UoaSwgMyksXG4gICAgICAgICAgICAoaSAtPSAzKSxcbiAgICAgICAgICAgIHN0YXJ0SG9zdFRyYW5zaXRpb24oXG4gICAgICAgICAgICAgIGZvcm1JbnN0LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcGVuZGluZzogITAsXG4gICAgICAgICAgICAgICAgZGF0YTogZm9ybURhdGEsXG4gICAgICAgICAgICAgICAgbWV0aG9kOiBmb3JtLm1ldGhvZCxcbiAgICAgICAgICAgICAgICBhY3Rpb246IHN1Ym1pdHRlck9yQWN0aW9uXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHN1Ym1pdHRlck9yQWN0aW9uLFxuICAgICAgICAgICAgICBmb3JtRGF0YVxuICAgICAgICAgICAgKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICApKTtcbn1cbmZ1bmN0aW9uIHJldHJ5SWZCbG9ja2VkT24odW5ibG9ja2VkKSB7XG4gIGZ1bmN0aW9uIHVuYmxvY2socXVldWVkRXZlbnQpIHtcbiAgICByZXR1cm4gc2NoZWR1bGVDYWxsYmFja0lmVW5ibG9ja2VkKHF1ZXVlZEV2ZW50LCB1bmJsb2NrZWQpO1xuICB9XG4gIG51bGwgIT09IHF1ZXVlZEZvY3VzICYmIHNjaGVkdWxlQ2FsbGJhY2tJZlVuYmxvY2tlZChxdWV1ZWRGb2N1cywgdW5ibG9ja2VkKTtcbiAgbnVsbCAhPT0gcXVldWVkRHJhZyAmJiBzY2hlZHVsZUNhbGxiYWNrSWZVbmJsb2NrZWQocXVldWVkRHJhZywgdW5ibG9ja2VkKTtcbiAgbnVsbCAhPT0gcXVldWVkTW91c2UgJiYgc2NoZWR1bGVDYWxsYmFja0lmVW5ibG9ja2VkKHF1ZXVlZE1vdXNlLCB1bmJsb2NrZWQpO1xuICBxdWV1ZWRQb2ludGVycy5mb3JFYWNoKHVuYmxvY2spO1xuICBxdWV1ZWRQb2ludGVyQ2FwdHVyZXMuZm9yRWFjaCh1bmJsb2NrKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBxdWV1ZWRFeHBsaWNpdEh5ZHJhdGlvblRhcmdldHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgcXVldWVkVGFyZ2V0ID0gcXVldWVkRXhwbGljaXRIeWRyYXRpb25UYXJnZXRzW2ldO1xuICAgIHF1ZXVlZFRhcmdldC5ibG9ja2VkT24gPT09IHVuYmxvY2tlZCAmJiAocXVldWVkVGFyZ2V0LmJsb2NrZWRPbiA9IG51bGwpO1xuICB9XG4gIGZvciAoXG4gICAgO1xuICAgIDAgPCBxdWV1ZWRFeHBsaWNpdEh5ZHJhdGlvblRhcmdldHMubGVuZ3RoICYmXG4gICAgKChpID0gcXVldWVkRXhwbGljaXRIeWRyYXRpb25UYXJnZXRzWzBdKSwgbnVsbCA9PT0gaS5ibG9ja2VkT24pO1xuXG4gIClcbiAgICBhdHRlbXB0RXhwbGljaXRIeWRyYXRpb25UYXJnZXQoaSksXG4gICAgICBudWxsID09PSBpLmJsb2NrZWRPbiAmJiBxdWV1ZWRFeHBsaWNpdEh5ZHJhdGlvblRhcmdldHMuc2hpZnQoKTtcbiAgaSA9ICh1bmJsb2NrZWQub3duZXJEb2N1bWVudCB8fCB1bmJsb2NrZWQpLiQkcmVhY3RGb3JtUmVwbGF5O1xuICBpZiAobnVsbCAhPSBpKVxuICAgIGZvciAocXVldWVkVGFyZ2V0ID0gMDsgcXVldWVkVGFyZ2V0IDwgaS5sZW5ndGg7IHF1ZXVlZFRhcmdldCArPSAzKSB7XG4gICAgICB2YXIgZm9ybSA9IGlbcXVldWVkVGFyZ2V0XSxcbiAgICAgICAgc3VibWl0dGVyT3JBY3Rpb24gPSBpW3F1ZXVlZFRhcmdldCArIDFdLFxuICAgICAgICBmb3JtUHJvcHMgPSBmb3JtW2ludGVybmFsUHJvcHNLZXldIHx8IG51bGw7XG4gICAgICBpZiAoXCJmdW5jdGlvblwiID09PSB0eXBlb2Ygc3VibWl0dGVyT3JBY3Rpb24pXG4gICAgICAgIGZvcm1Qcm9wcyB8fCBzY2hlZHVsZVJlcGxheVF1ZXVlSWZOZWVkZWQoaSk7XG4gICAgICBlbHNlIGlmIChmb3JtUHJvcHMpIHtcbiAgICAgICAgdmFyIGFjdGlvbiA9IG51bGw7XG4gICAgICAgIGlmIChzdWJtaXR0ZXJPckFjdGlvbiAmJiBzdWJtaXR0ZXJPckFjdGlvbi5oYXNBdHRyaWJ1dGUoXCJmb3JtQWN0aW9uXCIpKVxuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICgoZm9ybSA9IHN1Ym1pdHRlck9yQWN0aW9uKSxcbiAgICAgICAgICAgIChmb3JtUHJvcHMgPSBzdWJtaXR0ZXJPckFjdGlvbltpbnRlcm5hbFByb3BzS2V5XSB8fCBudWxsKSlcbiAgICAgICAgICApXG4gICAgICAgICAgICBhY3Rpb24gPSBmb3JtUHJvcHMuZm9ybUFjdGlvbjtcbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmIChudWxsICE9PSBmaW5kSW5zdGFuY2VCbG9ja2luZ1RhcmdldChmb3JtKSkgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICBlbHNlIGFjdGlvbiA9IGZvcm1Qcm9wcy5hY3Rpb247XG4gICAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGFjdGlvblxuICAgICAgICAgID8gKGlbcXVldWVkVGFyZ2V0ICsgMV0gPSBhY3Rpb24pXG4gICAgICAgICAgOiAoaS5zcGxpY2UocXVldWVkVGFyZ2V0LCAzKSwgKHF1ZXVlZFRhcmdldCAtPSAzKSk7XG4gICAgICAgIHNjaGVkdWxlUmVwbGF5UXVldWVJZk5lZWRlZChpKTtcbiAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiBSZWFjdERPTVJvb3QoaW50ZXJuYWxSb290KSB7XG4gIHRoaXMuX2ludGVybmFsUm9vdCA9IGludGVybmFsUm9vdDtcbn1cblJlYWN0RE9NSHlkcmF0aW9uUm9vdC5wcm90b3R5cGUucmVuZGVyID0gUmVhY3RET01Sb290LnByb3RvdHlwZS5yZW5kZXIgPVxuICBmdW5jdGlvbiAoY2hpbGRyZW4pIHtcbiAgICB2YXIgcm9vdCA9IHRoaXMuX2ludGVybmFsUm9vdDtcbiAgICBpZiAobnVsbCA9PT0gcm9vdCkgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg0MDkpKTtcbiAgICB2YXIgY3VycmVudCA9IHJvb3QuY3VycmVudCxcbiAgICAgIGxhbmUgPSByZXF1ZXN0VXBkYXRlTGFuZSgpO1xuICAgIHVwZGF0ZUNvbnRhaW5lckltcGwoY3VycmVudCwgbGFuZSwgY2hpbGRyZW4sIHJvb3QsIG51bGwsIG51bGwpO1xuICB9O1xuUmVhY3RET01IeWRyYXRpb25Sb290LnByb3RvdHlwZS51bm1vdW50ID0gUmVhY3RET01Sb290LnByb3RvdHlwZS51bm1vdW50ID1cbiAgZnVuY3Rpb24gKCkge1xuICAgIHZhciByb290ID0gdGhpcy5faW50ZXJuYWxSb290O1xuICAgIGlmIChudWxsICE9PSByb290KSB7XG4gICAgICB0aGlzLl9pbnRlcm5hbFJvb3QgPSBudWxsO1xuICAgICAgdmFyIGNvbnRhaW5lciA9IHJvb3QuY29udGFpbmVySW5mbztcbiAgICAgIDAgPT09IHJvb3QudGFnICYmIGZsdXNoUGFzc2l2ZUVmZmVjdHMoKTtcbiAgICAgIHVwZGF0ZUNvbnRhaW5lckltcGwocm9vdC5jdXJyZW50LCAyLCBudWxsLCByb290LCBudWxsLCBudWxsKTtcbiAgICAgIGZsdXNoU3luY1dvcmskMSgpO1xuICAgICAgY29udGFpbmVyW2ludGVybmFsQ29udGFpbmVySW5zdGFuY2VLZXldID0gbnVsbDtcbiAgICB9XG4gIH07XG5mdW5jdGlvbiBSZWFjdERPTUh5ZHJhdGlvblJvb3QoaW50ZXJuYWxSb290KSB7XG4gIHRoaXMuX2ludGVybmFsUm9vdCA9IGludGVybmFsUm9vdDtcbn1cblJlYWN0RE9NSHlkcmF0aW9uUm9vdC5wcm90b3R5cGUudW5zdGFibGVfc2NoZWR1bGVIeWRyYXRpb24gPSBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gIGlmICh0YXJnZXQpIHtcbiAgICB2YXIgdXBkYXRlUHJpb3JpdHkgPSByZXNvbHZlVXBkYXRlUHJpb3JpdHkoKTtcbiAgICB0YXJnZXQgPSB7IGJsb2NrZWRPbjogbnVsbCwgdGFyZ2V0OiB0YXJnZXQsIHByaW9yaXR5OiB1cGRhdGVQcmlvcml0eSB9O1xuICAgIGZvciAoXG4gICAgICB2YXIgaSA9IDA7XG4gICAgICBpIDwgcXVldWVkRXhwbGljaXRIeWRyYXRpb25UYXJnZXRzLmxlbmd0aCAmJlxuICAgICAgMCAhPT0gdXBkYXRlUHJpb3JpdHkgJiZcbiAgICAgIHVwZGF0ZVByaW9yaXR5IDwgcXVldWVkRXhwbGljaXRIeWRyYXRpb25UYXJnZXRzW2ldLnByaW9yaXR5O1xuICAgICAgaSsrXG4gICAgKTtcbiAgICBxdWV1ZWRFeHBsaWNpdEh5ZHJhdGlvblRhcmdldHMuc3BsaWNlKGksIDAsIHRhcmdldCk7XG4gICAgMCA9PT0gaSAmJiBhdHRlbXB0RXhwbGljaXRIeWRyYXRpb25UYXJnZXQodGFyZ2V0KTtcbiAgfVxufTtcbnZhciBpc29tb3JwaGljUmVhY3RQYWNrYWdlVmVyc2lvbiRqc2NvbXAkaW5saW5lXzE2ODYgPSBSZWFjdC52ZXJzaW9uO1xuaWYgKFxuICBcIjE5LjAuMFwiICE9PVxuICBpc29tb3JwaGljUmVhY3RQYWNrYWdlVmVyc2lvbiRqc2NvbXAkaW5saW5lXzE2ODZcbilcbiAgdGhyb3cgRXJyb3IoXG4gICAgZm9ybWF0UHJvZEVycm9yTWVzc2FnZShcbiAgICAgIDUyNyxcbiAgICAgIGlzb21vcnBoaWNSZWFjdFBhY2thZ2VWZXJzaW9uJGpzY29tcCRpbmxpbmVfMTY4NixcbiAgICAgIFwiMTkuMC4wXCJcbiAgICApXG4gICk7XG5SZWFjdERPTVNoYXJlZEludGVybmFscy5maW5kRE9NTm9kZSA9IGZ1bmN0aW9uIChjb21wb25lbnRPckVsZW1lbnQpIHtcbiAgdmFyIGZpYmVyID0gY29tcG9uZW50T3JFbGVtZW50Ll9yZWFjdEludGVybmFscztcbiAgaWYgKHZvaWQgMCA9PT0gZmliZXIpIHtcbiAgICBpZiAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgY29tcG9uZW50T3JFbGVtZW50LnJlbmRlcilcbiAgICAgIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTg4KSk7XG4gICAgY29tcG9uZW50T3JFbGVtZW50ID0gT2JqZWN0LmtleXMoY29tcG9uZW50T3JFbGVtZW50KS5qb2luKFwiLFwiKTtcbiAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDI2OCwgY29tcG9uZW50T3JFbGVtZW50KSk7XG4gIH1cbiAgY29tcG9uZW50T3JFbGVtZW50ID0gZmluZEN1cnJlbnRGaWJlclVzaW5nU2xvd1BhdGgoZmliZXIpO1xuICBjb21wb25lbnRPckVsZW1lbnQgPVxuICAgIG51bGwgIT09IGNvbXBvbmVudE9yRWxlbWVudFxuICAgICAgPyBmaW5kQ3VycmVudEhvc3RGaWJlckltcGwoY29tcG9uZW50T3JFbGVtZW50KVxuICAgICAgOiBudWxsO1xuICBjb21wb25lbnRPckVsZW1lbnQgPVxuICAgIG51bGwgPT09IGNvbXBvbmVudE9yRWxlbWVudCA/IG51bGwgOiBjb21wb25lbnRPckVsZW1lbnQuc3RhdGVOb2RlO1xuICByZXR1cm4gY29tcG9uZW50T3JFbGVtZW50O1xufTtcbnZhciBpbnRlcm5hbHMkanNjb21wJGlubGluZV8yMTY1ID0ge1xuICBidW5kbGVUeXBlOiAwLFxuICB2ZXJzaW9uOiBcIjE5LjAuMFwiLFxuICByZW5kZXJlclBhY2thZ2VOYW1lOiBcInJlYWN0LWRvbVwiLFxuICBjdXJyZW50RGlzcGF0Y2hlclJlZjogUmVhY3RTaGFyZWRJbnRlcm5hbHMsXG4gIGZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOiBnZXRDbG9zZXN0SW5zdGFuY2VGcm9tTm9kZSxcbiAgcmVjb25jaWxlclZlcnNpb246IFwiMTkuMC4wXCJcbn07XG5pZiAoXCJ1bmRlZmluZWRcIiAhPT0gdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXykge1xuICB2YXIgaG9vayRqc2NvbXAkaW5saW5lXzIxNjYgPSBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX187XG4gIGlmIChcbiAgICAhaG9vayRqc2NvbXAkaW5saW5lXzIxNjYuaXNEaXNhYmxlZCAmJlxuICAgIGhvb2skanNjb21wJGlubGluZV8yMTY2LnN1cHBvcnRzRmliZXJcbiAgKVxuICAgIHRyeSB7XG4gICAgICAocmVuZGVyZXJJRCA9IGhvb2skanNjb21wJGlubGluZV8yMTY2LmluamVjdChcbiAgICAgICAgaW50ZXJuYWxzJGpzY29tcCRpbmxpbmVfMjE2NVxuICAgICAgKSksXG4gICAgICAgIChpbmplY3RlZEhvb2sgPSBob29rJGpzY29tcCRpbmxpbmVfMjE2Nik7XG4gICAgfSBjYXRjaCAoZXJyKSB7fVxufVxuZXhwb3J0cy5jcmVhdGVSb290ID0gZnVuY3Rpb24gKGNvbnRhaW5lciwgb3B0aW9ucykge1xuICBpZiAoIWlzVmFsaWRDb250YWluZXIoY29udGFpbmVyKSkgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgyOTkpKTtcbiAgdmFyIGlzU3RyaWN0TW9kZSA9ICExLFxuICAgIGlkZW50aWZpZXJQcmVmaXggPSBcIlwiLFxuICAgIG9uVW5jYXVnaHRFcnJvciA9IGRlZmF1bHRPblVuY2F1Z2h0RXJyb3IsXG4gICAgb25DYXVnaHRFcnJvciA9IGRlZmF1bHRPbkNhdWdodEVycm9yLFxuICAgIG9uUmVjb3ZlcmFibGVFcnJvciA9IGRlZmF1bHRPblJlY292ZXJhYmxlRXJyb3IsXG4gICAgdHJhbnNpdGlvbkNhbGxiYWNrcyA9IG51bGw7XG4gIG51bGwgIT09IG9wdGlvbnMgJiZcbiAgICB2b2lkIDAgIT09IG9wdGlvbnMgJiZcbiAgICAoITAgPT09IG9wdGlvbnMudW5zdGFibGVfc3RyaWN0TW9kZSAmJiAoaXNTdHJpY3RNb2RlID0gITApLFxuICAgIHZvaWQgMCAhPT0gb3B0aW9ucy5pZGVudGlmaWVyUHJlZml4ICYmXG4gICAgICAoaWRlbnRpZmllclByZWZpeCA9IG9wdGlvbnMuaWRlbnRpZmllclByZWZpeCksXG4gICAgdm9pZCAwICE9PSBvcHRpb25zLm9uVW5jYXVnaHRFcnJvciAmJlxuICAgICAgKG9uVW5jYXVnaHRFcnJvciA9IG9wdGlvbnMub25VbmNhdWdodEVycm9yKSxcbiAgICB2b2lkIDAgIT09IG9wdGlvbnMub25DYXVnaHRFcnJvciAmJiAob25DYXVnaHRFcnJvciA9IG9wdGlvbnMub25DYXVnaHRFcnJvciksXG4gICAgdm9pZCAwICE9PSBvcHRpb25zLm9uUmVjb3ZlcmFibGVFcnJvciAmJlxuICAgICAgKG9uUmVjb3ZlcmFibGVFcnJvciA9IG9wdGlvbnMub25SZWNvdmVyYWJsZUVycm9yKSxcbiAgICB2b2lkIDAgIT09IG9wdGlvbnMudW5zdGFibGVfdHJhbnNpdGlvbkNhbGxiYWNrcyAmJlxuICAgICAgKHRyYW5zaXRpb25DYWxsYmFja3MgPSBvcHRpb25zLnVuc3RhYmxlX3RyYW5zaXRpb25DYWxsYmFja3MpKTtcbiAgb3B0aW9ucyA9IGNyZWF0ZUZpYmVyUm9vdChcbiAgICBjb250YWluZXIsXG4gICAgMSxcbiAgICAhMSxcbiAgICBudWxsLFxuICAgIG51bGwsXG4gICAgaXNTdHJpY3RNb2RlLFxuICAgIGlkZW50aWZpZXJQcmVmaXgsXG4gICAgb25VbmNhdWdodEVycm9yLFxuICAgIG9uQ2F1Z2h0RXJyb3IsXG4gICAgb25SZWNvdmVyYWJsZUVycm9yLFxuICAgIHRyYW5zaXRpb25DYWxsYmFja3MsXG4gICAgbnVsbFxuICApO1xuICBjb250YWluZXJbaW50ZXJuYWxDb250YWluZXJJbnN0YW5jZUtleV0gPSBvcHRpb25zLmN1cnJlbnQ7XG4gIGxpc3RlblRvQWxsU3VwcG9ydGVkRXZlbnRzKFxuICAgIDggPT09IGNvbnRhaW5lci5ub2RlVHlwZSA/IGNvbnRhaW5lci5wYXJlbnROb2RlIDogY29udGFpbmVyXG4gICk7XG4gIHJldHVybiBuZXcgUmVhY3RET01Sb290KG9wdGlvbnMpO1xufTtcbmV4cG9ydHMuaHlkcmF0ZVJvb3QgPSBmdW5jdGlvbiAoY29udGFpbmVyLCBpbml0aWFsQ2hpbGRyZW4sIG9wdGlvbnMpIHtcbiAgaWYgKCFpc1ZhbGlkQ29udGFpbmVyKGNvbnRhaW5lcikpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMjk5KSk7XG4gIHZhciBpc1N0cmljdE1vZGUgPSAhMSxcbiAgICBpZGVudGlmaWVyUHJlZml4ID0gXCJcIixcbiAgICBvblVuY2F1Z2h0RXJyb3IgPSBkZWZhdWx0T25VbmNhdWdodEVycm9yLFxuICAgIG9uQ2F1Z2h0RXJyb3IgPSBkZWZhdWx0T25DYXVnaHRFcnJvcixcbiAgICBvblJlY292ZXJhYmxlRXJyb3IgPSBkZWZhdWx0T25SZWNvdmVyYWJsZUVycm9yLFxuICAgIHRyYW5zaXRpb25DYWxsYmFja3MgPSBudWxsLFxuICAgIGZvcm1TdGF0ZSA9IG51bGw7XG4gIG51bGwgIT09IG9wdGlvbnMgJiZcbiAgICB2b2lkIDAgIT09IG9wdGlvbnMgJiZcbiAgICAoITAgPT09IG9wdGlvbnMudW5zdGFibGVfc3RyaWN0TW9kZSAmJiAoaXNTdHJpY3RNb2RlID0gITApLFxuICAgIHZvaWQgMCAhPT0gb3B0aW9ucy5pZGVudGlmaWVyUHJlZml4ICYmXG4gICAgICAoaWRlbnRpZmllclByZWZpeCA9IG9wdGlvbnMuaWRlbnRpZmllclByZWZpeCksXG4gICAgdm9pZCAwICE9PSBvcHRpb25zLm9uVW5jYXVnaHRFcnJvciAmJlxuICAgICAgKG9uVW5jYXVnaHRFcnJvciA9IG9wdGlvbnMub25VbmNhdWdodEVycm9yKSxcbiAgICB2b2lkIDAgIT09IG9wdGlvbnMub25DYXVnaHRFcnJvciAmJiAob25DYXVnaHRFcnJvciA9IG9wdGlvbnMub25DYXVnaHRFcnJvciksXG4gICAgdm9pZCAwICE9PSBvcHRpb25zLm9uUmVjb3ZlcmFibGVFcnJvciAmJlxuICAgICAgKG9uUmVjb3ZlcmFibGVFcnJvciA9IG9wdGlvbnMub25SZWNvdmVyYWJsZUVycm9yKSxcbiAgICB2b2lkIDAgIT09IG9wdGlvbnMudW5zdGFibGVfdHJhbnNpdGlvbkNhbGxiYWNrcyAmJlxuICAgICAgKHRyYW5zaXRpb25DYWxsYmFja3MgPSBvcHRpb25zLnVuc3RhYmxlX3RyYW5zaXRpb25DYWxsYmFja3MpLFxuICAgIHZvaWQgMCAhPT0gb3B0aW9ucy5mb3JtU3RhdGUgJiYgKGZvcm1TdGF0ZSA9IG9wdGlvbnMuZm9ybVN0YXRlKSk7XG4gIGluaXRpYWxDaGlsZHJlbiA9IGNyZWF0ZUZpYmVyUm9vdChcbiAgICBjb250YWluZXIsXG4gICAgMSxcbiAgICAhMCxcbiAgICBpbml0aWFsQ2hpbGRyZW4sXG4gICAgbnVsbCAhPSBvcHRpb25zID8gb3B0aW9ucyA6IG51bGwsXG4gICAgaXNTdHJpY3RNb2RlLFxuICAgIGlkZW50aWZpZXJQcmVmaXgsXG4gICAgb25VbmNhdWdodEVycm9yLFxuICAgIG9uQ2F1Z2h0RXJyb3IsXG4gICAgb25SZWNvdmVyYWJsZUVycm9yLFxuICAgIHRyYW5zaXRpb25DYWxsYmFja3MsXG4gICAgZm9ybVN0YXRlXG4gICk7XG4gIGluaXRpYWxDaGlsZHJlbi5jb250ZXh0ID0gZ2V0Q29udGV4dEZvclN1YnRyZWUobnVsbCk7XG4gIG9wdGlvbnMgPSBpbml0aWFsQ2hpbGRyZW4uY3VycmVudDtcbiAgaXNTdHJpY3RNb2RlID0gcmVxdWVzdFVwZGF0ZUxhbmUoKTtcbiAgaWRlbnRpZmllclByZWZpeCA9IGNyZWF0ZVVwZGF0ZShpc1N0cmljdE1vZGUpO1xuICBpZGVudGlmaWVyUHJlZml4LmNhbGxiYWNrID0gbnVsbDtcbiAgZW5xdWV1ZVVwZGF0ZShvcHRpb25zLCBpZGVudGlmaWVyUHJlZml4LCBpc1N0cmljdE1vZGUpO1xuICBpbml0aWFsQ2hpbGRyZW4uY3VycmVudC5sYW5lcyA9IGlzU3RyaWN0TW9kZTtcbiAgbWFya1Jvb3RVcGRhdGVkJDEoaW5pdGlhbENoaWxkcmVuLCBpc1N0cmljdE1vZGUpO1xuICBlbnN1cmVSb290SXNTY2hlZHVsZWQoaW5pdGlhbENoaWxkcmVuKTtcbiAgY29udGFpbmVyW2ludGVybmFsQ29udGFpbmVySW5zdGFuY2VLZXldID0gaW5pdGlhbENoaWxkcmVuLmN1cnJlbnQ7XG4gIGxpc3RlblRvQWxsU3VwcG9ydGVkRXZlbnRzKGNvbnRhaW5lcik7XG4gIHJldHVybiBuZXcgUmVhY3RET01IeWRyYXRpb25Sb290KGluaXRpYWxDaGlsZHJlbik7XG59O1xuZXhwb3J0cy52ZXJzaW9uID0gXCIxOS4wLjBcIjtcbiIsIi8qKlxuICogQGxpY2Vuc2UgUmVhY3RcbiAqIHJlYWN0LWRvbS5wcm9kdWN0aW9uLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcbnZhciBSZWFjdCA9IHJlcXVpcmUoXCJyZWFjdFwiKTtcbmZ1bmN0aW9uIGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoY29kZSkge1xuICB2YXIgdXJsID0gXCJodHRwczovL3JlYWN0LmRldi9lcnJvcnMvXCIgKyBjb2RlO1xuICBpZiAoMSA8IGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICB1cmwgKz0gXCI/YXJnc1tdPVwiICsgZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1sxXSk7XG4gICAgZm9yICh2YXIgaSA9IDI7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspXG4gICAgICB1cmwgKz0gXCImYXJnc1tdPVwiICsgZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tpXSk7XG4gIH1cbiAgcmV0dXJuIChcbiAgICBcIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIiArXG4gICAgY29kZSArXG4gICAgXCI7IHZpc2l0IFwiICtcbiAgICB1cmwgK1xuICAgIFwiIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy5cIlxuICApO1xufVxuZnVuY3Rpb24gbm9vcCgpIHt9XG52YXIgSW50ZXJuYWxzID0ge1xuICAgIGQ6IHtcbiAgICAgIGY6IG5vb3AsXG4gICAgICByOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNTIyKSk7XG4gICAgICB9LFxuICAgICAgRDogbm9vcCxcbiAgICAgIEM6IG5vb3AsXG4gICAgICBMOiBub29wLFxuICAgICAgbTogbm9vcCxcbiAgICAgIFg6IG5vb3AsXG4gICAgICBTOiBub29wLFxuICAgICAgTTogbm9vcFxuICAgIH0sXG4gICAgcDogMCxcbiAgICBmaW5kRE9NTm9kZTogbnVsbFxuICB9LFxuICBSRUFDVF9QT1JUQUxfVFlQRSA9IFN5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik7XG5mdW5jdGlvbiBjcmVhdGVQb3J0YWwkMShjaGlsZHJlbiwgY29udGFpbmVySW5mbywgaW1wbGVtZW50YXRpb24pIHtcbiAgdmFyIGtleSA9XG4gICAgMyA8IGFyZ3VtZW50cy5sZW5ndGggJiYgdm9pZCAwICE9PSBhcmd1bWVudHNbM10gPyBhcmd1bWVudHNbM10gOiBudWxsO1xuICByZXR1cm4ge1xuICAgICQkdHlwZW9mOiBSRUFDVF9QT1JUQUxfVFlQRSxcbiAgICBrZXk6IG51bGwgPT0ga2V5ID8gbnVsbCA6IFwiXCIgKyBrZXksXG4gICAgY2hpbGRyZW46IGNoaWxkcmVuLFxuICAgIGNvbnRhaW5lckluZm86IGNvbnRhaW5lckluZm8sXG4gICAgaW1wbGVtZW50YXRpb246IGltcGxlbWVudGF0aW9uXG4gIH07XG59XG52YXIgUmVhY3RTaGFyZWRJbnRlcm5hbHMgPVxuICBSZWFjdC5fX0NMSUVOVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9XQVJOX1VTRVJTX1RIRVlfQ0FOTk9UX1VQR1JBREU7XG5mdW5jdGlvbiBnZXRDcm9zc09yaWdpblN0cmluZ0FzKGFzLCBpbnB1dCkge1xuICBpZiAoXCJmb250XCIgPT09IGFzKSByZXR1cm4gXCJcIjtcbiAgaWYgKFwic3RyaW5nXCIgPT09IHR5cGVvZiBpbnB1dClcbiAgICByZXR1cm4gXCJ1c2UtY3JlZGVudGlhbHNcIiA9PT0gaW5wdXQgPyBpbnB1dCA6IFwiXCI7XG59XG5leHBvcnRzLl9fRE9NX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1dBUk5fVVNFUlNfVEhFWV9DQU5OT1RfVVBHUkFERSA9XG4gIEludGVybmFscztcbmV4cG9ydHMuY3JlYXRlUG9ydGFsID0gZnVuY3Rpb24gKGNoaWxkcmVuLCBjb250YWluZXIpIHtcbiAgdmFyIGtleSA9XG4gICAgMiA8IGFyZ3VtZW50cy5sZW5ndGggJiYgdm9pZCAwICE9PSBhcmd1bWVudHNbMl0gPyBhcmd1bWVudHNbMl0gOiBudWxsO1xuICBpZiAoXG4gICAgIWNvbnRhaW5lciB8fFxuICAgICgxICE9PSBjb250YWluZXIubm9kZVR5cGUgJiZcbiAgICAgIDkgIT09IGNvbnRhaW5lci5ub2RlVHlwZSAmJlxuICAgICAgMTEgIT09IGNvbnRhaW5lci5ub2RlVHlwZSlcbiAgKVxuICAgIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMjk5KSk7XG4gIHJldHVybiBjcmVhdGVQb3J0YWwkMShjaGlsZHJlbiwgY29udGFpbmVyLCBudWxsLCBrZXkpO1xufTtcbmV4cG9ydHMuZmx1c2hTeW5jID0gZnVuY3Rpb24gKGZuKSB7XG4gIHZhciBwcmV2aW91c1RyYW5zaXRpb24gPSBSZWFjdFNoYXJlZEludGVybmFscy5ULFxuICAgIHByZXZpb3VzVXBkYXRlUHJpb3JpdHkgPSBJbnRlcm5hbHMucDtcbiAgdHJ5IHtcbiAgICBpZiAoKChSZWFjdFNoYXJlZEludGVybmFscy5UID0gbnVsbCksIChJbnRlcm5hbHMucCA9IDIpLCBmbikpIHJldHVybiBmbigpO1xuICB9IGZpbmFsbHkge1xuICAgIChSZWFjdFNoYXJlZEludGVybmFscy5UID0gcHJldmlvdXNUcmFuc2l0aW9uKSxcbiAgICAgIChJbnRlcm5hbHMucCA9IHByZXZpb3VzVXBkYXRlUHJpb3JpdHkpLFxuICAgICAgSW50ZXJuYWxzLmQuZigpO1xuICB9XG59O1xuZXhwb3J0cy5wcmVjb25uZWN0ID0gZnVuY3Rpb24gKGhyZWYsIG9wdGlvbnMpIHtcbiAgXCJzdHJpbmdcIiA9PT0gdHlwZW9mIGhyZWYgJiZcbiAgICAob3B0aW9uc1xuICAgICAgPyAoKG9wdGlvbnMgPSBvcHRpb25zLmNyb3NzT3JpZ2luKSxcbiAgICAgICAgKG9wdGlvbnMgPVxuICAgICAgICAgIFwic3RyaW5nXCIgPT09IHR5cGVvZiBvcHRpb25zXG4gICAgICAgICAgICA/IFwidXNlLWNyZWRlbnRpYWxzXCIgPT09IG9wdGlvbnNcbiAgICAgICAgICAgICAgPyBvcHRpb25zXG4gICAgICAgICAgICAgIDogXCJcIlxuICAgICAgICAgICAgOiB2b2lkIDApKVxuICAgICAgOiAob3B0aW9ucyA9IG51bGwpLFxuICAgIEludGVybmFscy5kLkMoaHJlZiwgb3B0aW9ucykpO1xufTtcbmV4cG9ydHMucHJlZmV0Y2hETlMgPSBmdW5jdGlvbiAoaHJlZikge1xuICBcInN0cmluZ1wiID09PSB0eXBlb2YgaHJlZiAmJiBJbnRlcm5hbHMuZC5EKGhyZWYpO1xufTtcbmV4cG9ydHMucHJlaW5pdCA9IGZ1bmN0aW9uIChocmVmLCBvcHRpb25zKSB7XG4gIGlmIChcInN0cmluZ1wiID09PSB0eXBlb2YgaHJlZiAmJiBvcHRpb25zICYmIFwic3RyaW5nXCIgPT09IHR5cGVvZiBvcHRpb25zLmFzKSB7XG4gICAgdmFyIGFzID0gb3B0aW9ucy5hcyxcbiAgICAgIGNyb3NzT3JpZ2luID0gZ2V0Q3Jvc3NPcmlnaW5TdHJpbmdBcyhhcywgb3B0aW9ucy5jcm9zc09yaWdpbiksXG4gICAgICBpbnRlZ3JpdHkgPVxuICAgICAgICBcInN0cmluZ1wiID09PSB0eXBlb2Ygb3B0aW9ucy5pbnRlZ3JpdHkgPyBvcHRpb25zLmludGVncml0eSA6IHZvaWQgMCxcbiAgICAgIGZldGNoUHJpb3JpdHkgPVxuICAgICAgICBcInN0cmluZ1wiID09PSB0eXBlb2Ygb3B0aW9ucy5mZXRjaFByaW9yaXR5XG4gICAgICAgICAgPyBvcHRpb25zLmZldGNoUHJpb3JpdHlcbiAgICAgICAgICA6IHZvaWQgMDtcbiAgICBcInN0eWxlXCIgPT09IGFzXG4gICAgICA/IEludGVybmFscy5kLlMoXG4gICAgICAgICAgaHJlZixcbiAgICAgICAgICBcInN0cmluZ1wiID09PSB0eXBlb2Ygb3B0aW9ucy5wcmVjZWRlbmNlID8gb3B0aW9ucy5wcmVjZWRlbmNlIDogdm9pZCAwLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGNyb3NzT3JpZ2luOiBjcm9zc09yaWdpbixcbiAgICAgICAgICAgIGludGVncml0eTogaW50ZWdyaXR5LFxuICAgICAgICAgICAgZmV0Y2hQcmlvcml0eTogZmV0Y2hQcmlvcml0eVxuICAgICAgICAgIH1cbiAgICAgICAgKVxuICAgICAgOiBcInNjcmlwdFwiID09PSBhcyAmJlxuICAgICAgICBJbnRlcm5hbHMuZC5YKGhyZWYsIHtcbiAgICAgICAgICBjcm9zc09yaWdpbjogY3Jvc3NPcmlnaW4sXG4gICAgICAgICAgaW50ZWdyaXR5OiBpbnRlZ3JpdHksXG4gICAgICAgICAgZmV0Y2hQcmlvcml0eTogZmV0Y2hQcmlvcml0eSxcbiAgICAgICAgICBub25jZTogXCJzdHJpbmdcIiA9PT0gdHlwZW9mIG9wdGlvbnMubm9uY2UgPyBvcHRpb25zLm5vbmNlIDogdm9pZCAwXG4gICAgICAgIH0pO1xuICB9XG59O1xuZXhwb3J0cy5wcmVpbml0TW9kdWxlID0gZnVuY3Rpb24gKGhyZWYsIG9wdGlvbnMpIHtcbiAgaWYgKFwic3RyaW5nXCIgPT09IHR5cGVvZiBocmVmKVxuICAgIGlmIChcIm9iamVjdFwiID09PSB0eXBlb2Ygb3B0aW9ucyAmJiBudWxsICE9PSBvcHRpb25zKSB7XG4gICAgICBpZiAobnVsbCA9PSBvcHRpb25zLmFzIHx8IFwic2NyaXB0XCIgPT09IG9wdGlvbnMuYXMpIHtcbiAgICAgICAgdmFyIGNyb3NzT3JpZ2luID0gZ2V0Q3Jvc3NPcmlnaW5TdHJpbmdBcyhcbiAgICAgICAgICBvcHRpb25zLmFzLFxuICAgICAgICAgIG9wdGlvbnMuY3Jvc3NPcmlnaW5cbiAgICAgICAgKTtcbiAgICAgICAgSW50ZXJuYWxzLmQuTShocmVmLCB7XG4gICAgICAgICAgY3Jvc3NPcmlnaW46IGNyb3NzT3JpZ2luLFxuICAgICAgICAgIGludGVncml0eTpcbiAgICAgICAgICAgIFwic3RyaW5nXCIgPT09IHR5cGVvZiBvcHRpb25zLmludGVncml0eSA/IG9wdGlvbnMuaW50ZWdyaXR5IDogdm9pZCAwLFxuICAgICAgICAgIG5vbmNlOiBcInN0cmluZ1wiID09PSB0eXBlb2Ygb3B0aW9ucy5ub25jZSA/IG9wdGlvbnMubm9uY2UgOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSBlbHNlIG51bGwgPT0gb3B0aW9ucyAmJiBJbnRlcm5hbHMuZC5NKGhyZWYpO1xufTtcbmV4cG9ydHMucHJlbG9hZCA9IGZ1bmN0aW9uIChocmVmLCBvcHRpb25zKSB7XG4gIGlmIChcbiAgICBcInN0cmluZ1wiID09PSB0eXBlb2YgaHJlZiAmJlxuICAgIFwib2JqZWN0XCIgPT09IHR5cGVvZiBvcHRpb25zICYmXG4gICAgbnVsbCAhPT0gb3B0aW9ucyAmJlxuICAgIFwic3RyaW5nXCIgPT09IHR5cGVvZiBvcHRpb25zLmFzXG4gICkge1xuICAgIHZhciBhcyA9IG9wdGlvbnMuYXMsXG4gICAgICBjcm9zc09yaWdpbiA9IGdldENyb3NzT3JpZ2luU3RyaW5nQXMoYXMsIG9wdGlvbnMuY3Jvc3NPcmlnaW4pO1xuICAgIEludGVybmFscy5kLkwoaHJlZiwgYXMsIHtcbiAgICAgIGNyb3NzT3JpZ2luOiBjcm9zc09yaWdpbixcbiAgICAgIGludGVncml0eTpcbiAgICAgICAgXCJzdHJpbmdcIiA9PT0gdHlwZW9mIG9wdGlvbnMuaW50ZWdyaXR5ID8gb3B0aW9ucy5pbnRlZ3JpdHkgOiB2b2lkIDAsXG4gICAgICBub25jZTogXCJzdHJpbmdcIiA9PT0gdHlwZW9mIG9wdGlvbnMubm9uY2UgPyBvcHRpb25zLm5vbmNlIDogdm9pZCAwLFxuICAgICAgdHlwZTogXCJzdHJpbmdcIiA9PT0gdHlwZW9mIG9wdGlvbnMudHlwZSA/IG9wdGlvbnMudHlwZSA6IHZvaWQgMCxcbiAgICAgIGZldGNoUHJpb3JpdHk6XG4gICAgICAgIFwic3RyaW5nXCIgPT09IHR5cGVvZiBvcHRpb25zLmZldGNoUHJpb3JpdHlcbiAgICAgICAgICA/IG9wdGlvbnMuZmV0Y2hQcmlvcml0eVxuICAgICAgICAgIDogdm9pZCAwLFxuICAgICAgcmVmZXJyZXJQb2xpY3k6XG4gICAgICAgIFwic3RyaW5nXCIgPT09IHR5cGVvZiBvcHRpb25zLnJlZmVycmVyUG9saWN5XG4gICAgICAgICAgPyBvcHRpb25zLnJlZmVycmVyUG9saWN5XG4gICAgICAgICAgOiB2b2lkIDAsXG4gICAgICBpbWFnZVNyY1NldDpcbiAgICAgICAgXCJzdHJpbmdcIiA9PT0gdHlwZW9mIG9wdGlvbnMuaW1hZ2VTcmNTZXQgPyBvcHRpb25zLmltYWdlU3JjU2V0IDogdm9pZCAwLFxuICAgICAgaW1hZ2VTaXplczpcbiAgICAgICAgXCJzdHJpbmdcIiA9PT0gdHlwZW9mIG9wdGlvbnMuaW1hZ2VTaXplcyA/IG9wdGlvbnMuaW1hZ2VTaXplcyA6IHZvaWQgMCxcbiAgICAgIG1lZGlhOiBcInN0cmluZ1wiID09PSB0eXBlb2Ygb3B0aW9ucy5tZWRpYSA/IG9wdGlvbnMubWVkaWEgOiB2b2lkIDBcbiAgICB9KTtcbiAgfVxufTtcbmV4cG9ydHMucHJlbG9hZE1vZHVsZSA9IGZ1bmN0aW9uIChocmVmLCBvcHRpb25zKSB7XG4gIGlmIChcInN0cmluZ1wiID09PSB0eXBlb2YgaHJlZilcbiAgICBpZiAob3B0aW9ucykge1xuICAgICAgdmFyIGNyb3NzT3JpZ2luID0gZ2V0Q3Jvc3NPcmlnaW5TdHJpbmdBcyhvcHRpb25zLmFzLCBvcHRpb25zLmNyb3NzT3JpZ2luKTtcbiAgICAgIEludGVybmFscy5kLm0oaHJlZiwge1xuICAgICAgICBhczpcbiAgICAgICAgICBcInN0cmluZ1wiID09PSB0eXBlb2Ygb3B0aW9ucy5hcyAmJiBcInNjcmlwdFwiICE9PSBvcHRpb25zLmFzXG4gICAgICAgICAgICA/IG9wdGlvbnMuYXNcbiAgICAgICAgICAgIDogdm9pZCAwLFxuICAgICAgICBjcm9zc09yaWdpbjogY3Jvc3NPcmlnaW4sXG4gICAgICAgIGludGVncml0eTpcbiAgICAgICAgICBcInN0cmluZ1wiID09PSB0eXBlb2Ygb3B0aW9ucy5pbnRlZ3JpdHkgPyBvcHRpb25zLmludGVncml0eSA6IHZvaWQgMFxuICAgICAgfSk7XG4gICAgfSBlbHNlIEludGVybmFscy5kLm0oaHJlZik7XG59O1xuZXhwb3J0cy5yZXF1ZXN0Rm9ybVJlc2V0ID0gZnVuY3Rpb24gKGZvcm0pIHtcbiAgSW50ZXJuYWxzLmQucihmb3JtKTtcbn07XG5leHBvcnRzLnVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzID0gZnVuY3Rpb24gKGZuLCBhKSB7XG4gIHJldHVybiBmbihhKTtcbn07XG5leHBvcnRzLnVzZUZvcm1TdGF0ZSA9IGZ1bmN0aW9uIChhY3Rpb24sIGluaXRpYWxTdGF0ZSwgcGVybWFsaW5rKSB7XG4gIHJldHVybiBSZWFjdFNoYXJlZEludGVybmFscy5ILnVzZUZvcm1TdGF0ZShhY3Rpb24sIGluaXRpYWxTdGF0ZSwgcGVybWFsaW5rKTtcbn07XG5leHBvcnRzLnVzZUZvcm1TdGF0dXMgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBSZWFjdFNoYXJlZEludGVybmFscy5ILnVzZUhvc3RUcmFuc2l0aW9uU3RhdHVzKCk7XG59O1xuZXhwb3J0cy52ZXJzaW9uID0gXCIxOS4wLjBcIjtcbiIsIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gY2hlY2tEQ0UoKSB7XG4gIC8qIGdsb2JhbCBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gKi9cbiAgaWYgKFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gPT09ICd1bmRlZmluZWQnIHx8XG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRSAhPT0gJ2Z1bmN0aW9uJ1xuICApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBUaGlzIGJyYW5jaCBpcyB1bnJlYWNoYWJsZSBiZWNhdXNlIHRoaXMgZnVuY3Rpb24gaXMgb25seSBjYWxsZWRcbiAgICAvLyBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGNvbmRpdGlvbiBpcyB0cnVlIG9ubHkgaW4gZGV2ZWxvcG1lbnQuXG4gICAgLy8gVGhlcmVmb3JlIGlmIHRoZSBicmFuY2ggaXMgc3RpbGwgaGVyZSwgZGVhZCBjb2RlIGVsaW1pbmF0aW9uIHdhc24ndFxuICAgIC8vIHByb3Blcmx5IGFwcGxpZWQuXG4gICAgLy8gRG9uJ3QgY2hhbmdlIHRoZSBtZXNzYWdlLiBSZWFjdCBEZXZUb29scyByZWxpZXMgb24gaXQuIEFsc28gbWFrZSBzdXJlXG4gICAgLy8gdGhpcyBtZXNzYWdlIGRvZXNuJ3Qgb2NjdXIgZWxzZXdoZXJlIGluIHRoaXMgZnVuY3Rpb24sIG9yIGl0IHdpbGwgY2F1c2VcbiAgICAvLyBhIGZhbHNlIHBvc2l0aXZlLlxuICAgIHRocm93IG5ldyBFcnJvcignXl9eJyk7XG4gIH1cbiAgdHJ5IHtcbiAgICAvLyBWZXJpZnkgdGhhdCB0aGUgY29kZSBhYm92ZSBoYXMgYmVlbiBkZWFkIGNvZGUgZWxpbWluYXRlZCAoRENFJ2QpLlxuICAgIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRShjaGVja0RDRSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIERldlRvb2xzIHNob3VsZG4ndCBjcmFzaCBSZWFjdCwgbm8gbWF0dGVyIHdoYXQuXG4gICAgLy8gV2Ugc2hvdWxkIHN0aWxsIHJlcG9ydCBpbiBjYXNlIHdlIGJyZWFrIHRoaXMgY29kZS5cbiAgICBjb25zb2xlLmVycm9yKGVycik7XG4gIH1cbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgLy8gRENFIGNoZWNrIHNob3VsZCBoYXBwZW4gYmVmb3JlIFJlYWN0RE9NIGJ1bmRsZSBleGVjdXRlcyBzbyB0aGF0XG4gIC8vIERldlRvb2xzIGNhbiByZXBvcnQgYmFkIG1pbmlmaWNhdGlvbiBkdXJpbmcgaW5qZWN0aW9uLlxuICBjaGVja0RDRSgpO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS1jbGllbnQucHJvZHVjdGlvbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20tY2xpZW50LmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGNoZWNrRENFKCkge1xuICAvKiBnbG9iYWwgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fICovXG4gIGlmIChcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fID09PSAndW5kZWZpbmVkJyB8fFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UgIT09ICdmdW5jdGlvbidcbiAgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gVGhpcyBicmFuY2ggaXMgdW5yZWFjaGFibGUgYmVjYXVzZSB0aGlzIGZ1bmN0aW9uIGlzIG9ubHkgY2FsbGVkXG4gICAgLy8gaW4gcHJvZHVjdGlvbiwgYnV0IHRoZSBjb25kaXRpb24gaXMgdHJ1ZSBvbmx5IGluIGRldmVsb3BtZW50LlxuICAgIC8vIFRoZXJlZm9yZSBpZiB0aGUgYnJhbmNoIGlzIHN0aWxsIGhlcmUsIGRlYWQgY29kZSBlbGltaW5hdGlvbiB3YXNuJ3RcbiAgICAvLyBwcm9wZXJseSBhcHBsaWVkLlxuICAgIC8vIERvbid0IGNoYW5nZSB0aGUgbWVzc2FnZS4gUmVhY3QgRGV2VG9vbHMgcmVsaWVzIG9uIGl0LiBBbHNvIG1ha2Ugc3VyZVxuICAgIC8vIHRoaXMgbWVzc2FnZSBkb2Vzbid0IG9jY3VyIGVsc2V3aGVyZSBpbiB0aGlzIGZ1bmN0aW9uLCBvciBpdCB3aWxsIGNhdXNlXG4gICAgLy8gYSBmYWxzZSBwb3NpdGl2ZS5cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ15fXicpO1xuICB9XG4gIHRyeSB7XG4gICAgLy8gVmVyaWZ5IHRoYXQgdGhlIGNvZGUgYWJvdmUgaGFzIGJlZW4gZGVhZCBjb2RlIGVsaW1pbmF0ZWQgKERDRSdkKS5cbiAgICBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UoY2hlY2tEQ0UpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICAvLyBEZXZUb29scyBzaG91bGRuJ3QgY3Jhc2ggUmVhY3QsIG5vIG1hdHRlciB3aGF0LlxuICAgIC8vIFdlIHNob3VsZCBzdGlsbCByZXBvcnQgaW4gY2FzZSB3ZSBicmVhayB0aGlzIGNvZGUuXG4gICAgY29uc29sZS5lcnJvcihlcnIpO1xuICB9XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIC8vIERDRSBjaGVjayBzaG91bGQgaGFwcGVuIGJlZm9yZSBSZWFjdERPTSBidW5kbGUgZXhlY3V0ZXMgc28gdGhhdFxuICAvLyBEZXZUb29scyBjYW4gcmVwb3J0IGJhZCBtaW5pZmljYXRpb24gZHVyaW5nIGluamVjdGlvbi5cbiAgY2hlY2tEQ0UoKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20uZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKlxuICogQGxpY2Vuc2UgUmVhY3RcbiAqIHJlYWN0LnByb2R1Y3Rpb24uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cblwidXNlIHN0cmljdFwiO1xudmFyIFJFQUNUX0VMRU1FTlRfVFlQRSA9IFN5bWJvbC5mb3IoXCJyZWFjdC50cmFuc2l0aW9uYWwuZWxlbWVudFwiKSxcbiAgUkVBQ1RfUE9SVEFMX1RZUEUgPSBTeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpLFxuICBSRUFDVF9GUkFHTUVOVF9UWVBFID0gU3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpLFxuICBSRUFDVF9TVFJJQ1RfTU9ERV9UWVBFID0gU3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpLFxuICBSRUFDVF9QUk9GSUxFUl9UWVBFID0gU3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpLFxuICBSRUFDVF9DT05TVU1FUl9UWVBFID0gU3ltYm9sLmZvcihcInJlYWN0LmNvbnN1bWVyXCIpLFxuICBSRUFDVF9DT05URVhUX1RZUEUgPSBTeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKSxcbiAgUkVBQ1RfRk9SV0FSRF9SRUZfVFlQRSA9IFN5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKSxcbiAgUkVBQ1RfU1VTUEVOU0VfVFlQRSA9IFN5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKSxcbiAgUkVBQ1RfTUVNT19UWVBFID0gU3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIiksXG4gIFJFQUNUX0xBWllfVFlQRSA9IFN5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpLFxuICBNQVlCRV9JVEVSQVRPUl9TWU1CT0wgPSBTeW1ib2wuaXRlcmF0b3I7XG5mdW5jdGlvbiBnZXRJdGVyYXRvckZuKG1heWJlSXRlcmFibGUpIHtcbiAgaWYgKG51bGwgPT09IG1heWJlSXRlcmFibGUgfHwgXCJvYmplY3RcIiAhPT0gdHlwZW9mIG1heWJlSXRlcmFibGUpIHJldHVybiBudWxsO1xuICBtYXliZUl0ZXJhYmxlID1cbiAgICAoTUFZQkVfSVRFUkFUT1JfU1lNQk9MICYmIG1heWJlSXRlcmFibGVbTUFZQkVfSVRFUkFUT1JfU1lNQk9MXSkgfHxcbiAgICBtYXliZUl0ZXJhYmxlW1wiQEBpdGVyYXRvclwiXTtcbiAgcmV0dXJuIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIG1heWJlSXRlcmFibGUgPyBtYXliZUl0ZXJhYmxlIDogbnVsbDtcbn1cbnZhciBSZWFjdE5vb3BVcGRhdGVRdWV1ZSA9IHtcbiAgICBpc01vdW50ZWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiAhMTtcbiAgICB9LFxuICAgIGVucXVldWVGb3JjZVVwZGF0ZTogZnVuY3Rpb24gKCkge30sXG4gICAgZW5xdWV1ZVJlcGxhY2VTdGF0ZTogZnVuY3Rpb24gKCkge30sXG4gICAgZW5xdWV1ZVNldFN0YXRlOiBmdW5jdGlvbiAoKSB7fVxuICB9LFxuICBhc3NpZ24gPSBPYmplY3QuYXNzaWduLFxuICBlbXB0eU9iamVjdCA9IHt9O1xuZnVuY3Rpb24gQ29tcG9uZW50KHByb3BzLCBjb250ZXh0LCB1cGRhdGVyKSB7XG4gIHRoaXMucHJvcHMgPSBwcm9wcztcbiAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcbiAgdGhpcy5yZWZzID0gZW1wdHlPYmplY3Q7XG4gIHRoaXMudXBkYXRlciA9IHVwZGF0ZXIgfHwgUmVhY3ROb29wVXBkYXRlUXVldWU7XG59XG5Db21wb25lbnQucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQgPSB7fTtcbkNvbXBvbmVudC5wcm90b3R5cGUuc2V0U3RhdGUgPSBmdW5jdGlvbiAocGFydGlhbFN0YXRlLCBjYWxsYmFjaykge1xuICBpZiAoXG4gICAgXCJvYmplY3RcIiAhPT0gdHlwZW9mIHBhcnRpYWxTdGF0ZSAmJlxuICAgIFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIHBhcnRpYWxTdGF0ZSAmJlxuICAgIG51bGwgIT0gcGFydGlhbFN0YXRlXG4gIClcbiAgICB0aHJvdyBFcnJvcihcbiAgICAgIFwidGFrZXMgYW4gb2JqZWN0IG9mIHN0YXRlIHZhcmlhYmxlcyB0byB1cGRhdGUgb3IgYSBmdW5jdGlvbiB3aGljaCByZXR1cm5zIGFuIG9iamVjdCBvZiBzdGF0ZSB2YXJpYWJsZXMuXCJcbiAgICApO1xuICB0aGlzLnVwZGF0ZXIuZW5xdWV1ZVNldFN0YXRlKHRoaXMsIHBhcnRpYWxTdGF0ZSwgY2FsbGJhY2ssIFwic2V0U3RhdGVcIik7XG59O1xuQ29tcG9uZW50LnByb3RvdHlwZS5mb3JjZVVwZGF0ZSA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICB0aGlzLnVwZGF0ZXIuZW5xdWV1ZUZvcmNlVXBkYXRlKHRoaXMsIGNhbGxiYWNrLCBcImZvcmNlVXBkYXRlXCIpO1xufTtcbmZ1bmN0aW9uIENvbXBvbmVudER1bW15KCkge31cbkNvbXBvbmVudER1bW15LnByb3RvdHlwZSA9IENvbXBvbmVudC5wcm90b3R5cGU7XG5mdW5jdGlvbiBQdXJlQ29tcG9uZW50KHByb3BzLCBjb250ZXh0LCB1cGRhdGVyKSB7XG4gIHRoaXMucHJvcHMgPSBwcm9wcztcbiAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcbiAgdGhpcy5yZWZzID0gZW1wdHlPYmplY3Q7XG4gIHRoaXMudXBkYXRlciA9IHVwZGF0ZXIgfHwgUmVhY3ROb29wVXBkYXRlUXVldWU7XG59XG52YXIgcHVyZUNvbXBvbmVudFByb3RvdHlwZSA9IChQdXJlQ29tcG9uZW50LnByb3RvdHlwZSA9IG5ldyBDb21wb25lbnREdW1teSgpKTtcbnB1cmVDb21wb25lbnRQcm90b3R5cGUuY29uc3RydWN0b3IgPSBQdXJlQ29tcG9uZW50O1xuYXNzaWduKHB1cmVDb21wb25lbnRQcm90b3R5cGUsIENvbXBvbmVudC5wcm90b3R5cGUpO1xucHVyZUNvbXBvbmVudFByb3RvdHlwZS5pc1B1cmVSZWFjdENvbXBvbmVudCA9ICEwO1xudmFyIGlzQXJyYXlJbXBsID0gQXJyYXkuaXNBcnJheSxcbiAgUmVhY3RTaGFyZWRJbnRlcm5hbHMgPSB7IEg6IG51bGwsIEE6IG51bGwsIFQ6IG51bGwsIFM6IG51bGwgfSxcbiAgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuZnVuY3Rpb24gUmVhY3RFbGVtZW50KHR5cGUsIGtleSwgc2VsZiwgc291cmNlLCBvd25lciwgcHJvcHMpIHtcbiAgc2VsZiA9IHByb3BzLnJlZjtcbiAgcmV0dXJuIHtcbiAgICAkJHR5cGVvZjogUkVBQ1RfRUxFTUVOVF9UWVBFLFxuICAgIHR5cGU6IHR5cGUsXG4gICAga2V5OiBrZXksXG4gICAgcmVmOiB2b2lkIDAgIT09IHNlbGYgPyBzZWxmIDogbnVsbCxcbiAgICBwcm9wczogcHJvcHNcbiAgfTtcbn1cbmZ1bmN0aW9uIGNsb25lQW5kUmVwbGFjZUtleShvbGRFbGVtZW50LCBuZXdLZXkpIHtcbiAgcmV0dXJuIFJlYWN0RWxlbWVudChcbiAgICBvbGRFbGVtZW50LnR5cGUsXG4gICAgbmV3S2V5LFxuICAgIHZvaWQgMCxcbiAgICB2b2lkIDAsXG4gICAgdm9pZCAwLFxuICAgIG9sZEVsZW1lbnQucHJvcHNcbiAgKTtcbn1cbmZ1bmN0aW9uIGlzVmFsaWRFbGVtZW50KG9iamVjdCkge1xuICByZXR1cm4gKFxuICAgIFwib2JqZWN0XCIgPT09IHR5cGVvZiBvYmplY3QgJiZcbiAgICBudWxsICE9PSBvYmplY3QgJiZcbiAgICBvYmplY3QuJCR0eXBlb2YgPT09IFJFQUNUX0VMRU1FTlRfVFlQRVxuICApO1xufVxuZnVuY3Rpb24gZXNjYXBlKGtleSkge1xuICB2YXIgZXNjYXBlckxvb2t1cCA9IHsgXCI9XCI6IFwiPTBcIiwgXCI6XCI6IFwiPTJcIiB9O1xuICByZXR1cm4gKFxuICAgIFwiJFwiICtcbiAgICBrZXkucmVwbGFjZSgvWz06XS9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgIHJldHVybiBlc2NhcGVyTG9va3VwW21hdGNoXTtcbiAgICB9KVxuICApO1xufVxudmFyIHVzZXJQcm92aWRlZEtleUVzY2FwZVJlZ2V4ID0gL1xcLysvZztcbmZ1bmN0aW9uIGdldEVsZW1lbnRLZXkoZWxlbWVudCwgaW5kZXgpIHtcbiAgcmV0dXJuIFwib2JqZWN0XCIgPT09IHR5cGVvZiBlbGVtZW50ICYmIG51bGwgIT09IGVsZW1lbnQgJiYgbnVsbCAhPSBlbGVtZW50LmtleVxuICAgID8gZXNjYXBlKFwiXCIgKyBlbGVtZW50LmtleSlcbiAgICA6IGluZGV4LnRvU3RyaW5nKDM2KTtcbn1cbmZ1bmN0aW9uIG5vb3AkMSgpIHt9XG5mdW5jdGlvbiByZXNvbHZlVGhlbmFibGUodGhlbmFibGUpIHtcbiAgc3dpdGNoICh0aGVuYWJsZS5zdGF0dXMpIHtcbiAgICBjYXNlIFwiZnVsZmlsbGVkXCI6XG4gICAgICByZXR1cm4gdGhlbmFibGUudmFsdWU7XG4gICAgY2FzZSBcInJlamVjdGVkXCI6XG4gICAgICB0aHJvdyB0aGVuYWJsZS5yZWFzb247XG4gICAgZGVmYXVsdDpcbiAgICAgIHN3aXRjaCAoXG4gICAgICAgIChcInN0cmluZ1wiID09PSB0eXBlb2YgdGhlbmFibGUuc3RhdHVzXG4gICAgICAgICAgPyB0aGVuYWJsZS50aGVuKG5vb3AkMSwgbm9vcCQxKVxuICAgICAgICAgIDogKCh0aGVuYWJsZS5zdGF0dXMgPSBcInBlbmRpbmdcIiksXG4gICAgICAgICAgICB0aGVuYWJsZS50aGVuKFxuICAgICAgICAgICAgICBmdW5jdGlvbiAoZnVsZmlsbGVkVmFsdWUpIHtcbiAgICAgICAgICAgICAgICBcInBlbmRpbmdcIiA9PT0gdGhlbmFibGUuc3RhdHVzICYmXG4gICAgICAgICAgICAgICAgICAoKHRoZW5hYmxlLnN0YXR1cyA9IFwiZnVsZmlsbGVkXCIpLFxuICAgICAgICAgICAgICAgICAgKHRoZW5hYmxlLnZhbHVlID0gZnVsZmlsbGVkVmFsdWUpKTtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgXCJwZW5kaW5nXCIgPT09IHRoZW5hYmxlLnN0YXR1cyAmJlxuICAgICAgICAgICAgICAgICAgKCh0aGVuYWJsZS5zdGF0dXMgPSBcInJlamVjdGVkXCIpLCAodGhlbmFibGUucmVhc29uID0gZXJyb3IpKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKSksXG4gICAgICAgIHRoZW5hYmxlLnN0YXR1cylcbiAgICAgICkge1xuICAgICAgICBjYXNlIFwiZnVsZmlsbGVkXCI6XG4gICAgICAgICAgcmV0dXJuIHRoZW5hYmxlLnZhbHVlO1xuICAgICAgICBjYXNlIFwicmVqZWN0ZWRcIjpcbiAgICAgICAgICB0aHJvdyB0aGVuYWJsZS5yZWFzb247XG4gICAgICB9XG4gIH1cbiAgdGhyb3cgdGhlbmFibGU7XG59XG5mdW5jdGlvbiBtYXBJbnRvQXJyYXkoY2hpbGRyZW4sIGFycmF5LCBlc2NhcGVkUHJlZml4LCBuYW1lU29GYXIsIGNhbGxiYWNrKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIGNoaWxkcmVuO1xuICBpZiAoXCJ1bmRlZmluZWRcIiA9PT0gdHlwZSB8fCBcImJvb2xlYW5cIiA9PT0gdHlwZSkgY2hpbGRyZW4gPSBudWxsO1xuICB2YXIgaW52b2tlQ2FsbGJhY2sgPSAhMTtcbiAgaWYgKG51bGwgPT09IGNoaWxkcmVuKSBpbnZva2VDYWxsYmFjayA9ICEwO1xuICBlbHNlXG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICBjYXNlIFwiYmlnaW50XCI6XG4gICAgICBjYXNlIFwic3RyaW5nXCI6XG4gICAgICBjYXNlIFwibnVtYmVyXCI6XG4gICAgICAgIGludm9rZUNhbGxiYWNrID0gITA7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcIm9iamVjdFwiOlxuICAgICAgICBzd2l0Y2ggKGNoaWxkcmVuLiQkdHlwZW9mKSB7XG4gICAgICAgICAgY2FzZSBSRUFDVF9FTEVNRU5UX1RZUEU6XG4gICAgICAgICAgY2FzZSBSRUFDVF9QT1JUQUxfVFlQRTpcbiAgICAgICAgICAgIGludm9rZUNhbGxiYWNrID0gITA7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFJFQUNUX0xBWllfVFlQRTpcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgIChpbnZva2VDYWxsYmFjayA9IGNoaWxkcmVuLl9pbml0KSxcbiAgICAgICAgICAgICAgbWFwSW50b0FycmF5KFxuICAgICAgICAgICAgICAgIGludm9rZUNhbGxiYWNrKGNoaWxkcmVuLl9wYXlsb2FkKSxcbiAgICAgICAgICAgICAgICBhcnJheSxcbiAgICAgICAgICAgICAgICBlc2NhcGVkUHJlZml4LFxuICAgICAgICAgICAgICAgIG5hbWVTb0ZhcixcbiAgICAgICAgICAgICAgICBjYWxsYmFja1xuICAgICAgICAgICAgICApXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfVxuICBpZiAoaW52b2tlQ2FsbGJhY2spXG4gICAgcmV0dXJuIChcbiAgICAgIChjYWxsYmFjayA9IGNhbGxiYWNrKGNoaWxkcmVuKSksXG4gICAgICAoaW52b2tlQ2FsbGJhY2sgPVxuICAgICAgICBcIlwiID09PSBuYW1lU29GYXIgPyBcIi5cIiArIGdldEVsZW1lbnRLZXkoY2hpbGRyZW4sIDApIDogbmFtZVNvRmFyKSxcbiAgICAgIGlzQXJyYXlJbXBsKGNhbGxiYWNrKVxuICAgICAgICA/ICgoZXNjYXBlZFByZWZpeCA9IFwiXCIpLFxuICAgICAgICAgIG51bGwgIT0gaW52b2tlQ2FsbGJhY2sgJiZcbiAgICAgICAgICAgIChlc2NhcGVkUHJlZml4ID1cbiAgICAgICAgICAgICAgaW52b2tlQ2FsbGJhY2sucmVwbGFjZSh1c2VyUHJvdmlkZWRLZXlFc2NhcGVSZWdleCwgXCIkJi9cIikgKyBcIi9cIiksXG4gICAgICAgICAgbWFwSW50b0FycmF5KGNhbGxiYWNrLCBhcnJheSwgZXNjYXBlZFByZWZpeCwgXCJcIiwgZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgICAgIHJldHVybiBjO1xuICAgICAgICAgIH0pKVxuICAgICAgICA6IG51bGwgIT0gY2FsbGJhY2sgJiZcbiAgICAgICAgICAoaXNWYWxpZEVsZW1lbnQoY2FsbGJhY2spICYmXG4gICAgICAgICAgICAoY2FsbGJhY2sgPSBjbG9uZUFuZFJlcGxhY2VLZXkoXG4gICAgICAgICAgICAgIGNhbGxiYWNrLFxuICAgICAgICAgICAgICBlc2NhcGVkUHJlZml4ICtcbiAgICAgICAgICAgICAgICAobnVsbCA9PSBjYWxsYmFjay5rZXkgfHxcbiAgICAgICAgICAgICAgICAoY2hpbGRyZW4gJiYgY2hpbGRyZW4ua2V5ID09PSBjYWxsYmFjay5rZXkpXG4gICAgICAgICAgICAgICAgICA/IFwiXCJcbiAgICAgICAgICAgICAgICAgIDogKFwiXCIgKyBjYWxsYmFjay5rZXkpLnJlcGxhY2UoXG4gICAgICAgICAgICAgICAgICAgICAgdXNlclByb3ZpZGVkS2V5RXNjYXBlUmVnZXgsXG4gICAgICAgICAgICAgICAgICAgICAgXCIkJi9cIlxuICAgICAgICAgICAgICAgICAgICApICsgXCIvXCIpICtcbiAgICAgICAgICAgICAgICBpbnZva2VDYWxsYmFja1xuICAgICAgICAgICAgKSksXG4gICAgICAgICAgYXJyYXkucHVzaChjYWxsYmFjaykpLFxuICAgICAgMVxuICAgICk7XG4gIGludm9rZUNhbGxiYWNrID0gMDtcbiAgdmFyIG5leHROYW1lUHJlZml4ID0gXCJcIiA9PT0gbmFtZVNvRmFyID8gXCIuXCIgOiBuYW1lU29GYXIgKyBcIjpcIjtcbiAgaWYgKGlzQXJyYXlJbXBsKGNoaWxkcmVuKSlcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKVxuICAgICAgKG5hbWVTb0ZhciA9IGNoaWxkcmVuW2ldKSxcbiAgICAgICAgKHR5cGUgPSBuZXh0TmFtZVByZWZpeCArIGdldEVsZW1lbnRLZXkobmFtZVNvRmFyLCBpKSksXG4gICAgICAgIChpbnZva2VDYWxsYmFjayArPSBtYXBJbnRvQXJyYXkoXG4gICAgICAgICAgbmFtZVNvRmFyLFxuICAgICAgICAgIGFycmF5LFxuICAgICAgICAgIGVzY2FwZWRQcmVmaXgsXG4gICAgICAgICAgdHlwZSxcbiAgICAgICAgICBjYWxsYmFja1xuICAgICAgICApKTtcbiAgZWxzZSBpZiAoKChpID0gZ2V0SXRlcmF0b3JGbihjaGlsZHJlbikpLCBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBpKSlcbiAgICBmb3IgKFxuICAgICAgY2hpbGRyZW4gPSBpLmNhbGwoY2hpbGRyZW4pLCBpID0gMDtcbiAgICAgICEobmFtZVNvRmFyID0gY2hpbGRyZW4ubmV4dCgpKS5kb25lO1xuXG4gICAgKVxuICAgICAgKG5hbWVTb0ZhciA9IG5hbWVTb0Zhci52YWx1ZSksXG4gICAgICAgICh0eXBlID0gbmV4dE5hbWVQcmVmaXggKyBnZXRFbGVtZW50S2V5KG5hbWVTb0ZhciwgaSsrKSksXG4gICAgICAgIChpbnZva2VDYWxsYmFjayArPSBtYXBJbnRvQXJyYXkoXG4gICAgICAgICAgbmFtZVNvRmFyLFxuICAgICAgICAgIGFycmF5LFxuICAgICAgICAgIGVzY2FwZWRQcmVmaXgsXG4gICAgICAgICAgdHlwZSxcbiAgICAgICAgICBjYWxsYmFja1xuICAgICAgICApKTtcbiAgZWxzZSBpZiAoXCJvYmplY3RcIiA9PT0gdHlwZSkge1xuICAgIGlmIChcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBjaGlsZHJlbi50aGVuKVxuICAgICAgcmV0dXJuIG1hcEludG9BcnJheShcbiAgICAgICAgcmVzb2x2ZVRoZW5hYmxlKGNoaWxkcmVuKSxcbiAgICAgICAgYXJyYXksXG4gICAgICAgIGVzY2FwZWRQcmVmaXgsXG4gICAgICAgIG5hbWVTb0ZhcixcbiAgICAgICAgY2FsbGJhY2tcbiAgICAgICk7XG4gICAgYXJyYXkgPSBTdHJpbmcoY2hpbGRyZW4pO1xuICAgIHRocm93IEVycm9yKFxuICAgICAgXCJPYmplY3RzIGFyZSBub3QgdmFsaWQgYXMgYSBSZWFjdCBjaGlsZCAoZm91bmQ6IFwiICtcbiAgICAgICAgKFwiW29iamVjdCBPYmplY3RdXCIgPT09IGFycmF5XG4gICAgICAgICAgPyBcIm9iamVjdCB3aXRoIGtleXMge1wiICsgT2JqZWN0LmtleXMoY2hpbGRyZW4pLmpvaW4oXCIsIFwiKSArIFwifVwiXG4gICAgICAgICAgOiBhcnJheSkgK1xuICAgICAgICBcIikuIElmIHlvdSBtZWFudCB0byByZW5kZXIgYSBjb2xsZWN0aW9uIG9mIGNoaWxkcmVuLCB1c2UgYW4gYXJyYXkgaW5zdGVhZC5cIlxuICAgICk7XG4gIH1cbiAgcmV0dXJuIGludm9rZUNhbGxiYWNrO1xufVxuZnVuY3Rpb24gbWFwQ2hpbGRyZW4oY2hpbGRyZW4sIGZ1bmMsIGNvbnRleHQpIHtcbiAgaWYgKG51bGwgPT0gY2hpbGRyZW4pIHJldHVybiBjaGlsZHJlbjtcbiAgdmFyIHJlc3VsdCA9IFtdLFxuICAgIGNvdW50ID0gMDtcbiAgbWFwSW50b0FycmF5KGNoaWxkcmVuLCByZXN1bHQsIFwiXCIsIFwiXCIsIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgIHJldHVybiBmdW5jLmNhbGwoY29udGV4dCwgY2hpbGQsIGNvdW50KyspO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIGxhenlJbml0aWFsaXplcihwYXlsb2FkKSB7XG4gIGlmICgtMSA9PT0gcGF5bG9hZC5fc3RhdHVzKSB7XG4gICAgdmFyIGN0b3IgPSBwYXlsb2FkLl9yZXN1bHQ7XG4gICAgY3RvciA9IGN0b3IoKTtcbiAgICBjdG9yLnRoZW4oXG4gICAgICBmdW5jdGlvbiAobW9kdWxlT2JqZWN0KSB7XG4gICAgICAgIGlmICgwID09PSBwYXlsb2FkLl9zdGF0dXMgfHwgLTEgPT09IHBheWxvYWQuX3N0YXR1cylcbiAgICAgICAgICAocGF5bG9hZC5fc3RhdHVzID0gMSksIChwYXlsb2FkLl9yZXN1bHQgPSBtb2R1bGVPYmplY3QpO1xuICAgICAgfSxcbiAgICAgIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICBpZiAoMCA9PT0gcGF5bG9hZC5fc3RhdHVzIHx8IC0xID09PSBwYXlsb2FkLl9zdGF0dXMpXG4gICAgICAgICAgKHBheWxvYWQuX3N0YXR1cyA9IDIpLCAocGF5bG9hZC5fcmVzdWx0ID0gZXJyb3IpO1xuICAgICAgfVxuICAgICk7XG4gICAgLTEgPT09IHBheWxvYWQuX3N0YXR1cyAmJiAoKHBheWxvYWQuX3N0YXR1cyA9IDApLCAocGF5bG9hZC5fcmVzdWx0ID0gY3RvcikpO1xuICB9XG4gIGlmICgxID09PSBwYXlsb2FkLl9zdGF0dXMpIHJldHVybiBwYXlsb2FkLl9yZXN1bHQuZGVmYXVsdDtcbiAgdGhyb3cgcGF5bG9hZC5fcmVzdWx0O1xufVxudmFyIHJlcG9ydEdsb2JhbEVycm9yID1cbiAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgcmVwb3J0RXJyb3JcbiAgICA/IHJlcG9ydEVycm9yXG4gICAgOiBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIFwib2JqZWN0XCIgPT09IHR5cGVvZiB3aW5kb3cgJiZcbiAgICAgICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiB3aW5kb3cuRXJyb3JFdmVudFxuICAgICAgICApIHtcbiAgICAgICAgICB2YXIgZXZlbnQgPSBuZXcgd2luZG93LkVycm9yRXZlbnQoXCJlcnJvclwiLCB7XG4gICAgICAgICAgICBidWJibGVzOiAhMCxcbiAgICAgICAgICAgIGNhbmNlbGFibGU6ICEwLFxuICAgICAgICAgICAgbWVzc2FnZTpcbiAgICAgICAgICAgICAgXCJvYmplY3RcIiA9PT0gdHlwZW9mIGVycm9yICYmXG4gICAgICAgICAgICAgIG51bGwgIT09IGVycm9yICYmXG4gICAgICAgICAgICAgIFwic3RyaW5nXCIgPT09IHR5cGVvZiBlcnJvci5tZXNzYWdlXG4gICAgICAgICAgICAgICAgPyBTdHJpbmcoZXJyb3IubWVzc2FnZSlcbiAgICAgICAgICAgICAgICA6IFN0cmluZyhlcnJvciksXG4gICAgICAgICAgICBlcnJvcjogZXJyb3JcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBpZiAoIXdpbmRvdy5kaXNwYXRjaEV2ZW50KGV2ZW50KSkgcmV0dXJuO1xuICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgIFwib2JqZWN0XCIgPT09IHR5cGVvZiBwcm9jZXNzICYmXG4gICAgICAgICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgcHJvY2Vzcy5lbWl0XG4gICAgICAgICkge1xuICAgICAgICAgIHByb2Nlc3MuZW1pdChcInVuY2F1Z2h0RXhjZXB0aW9uXCIsIGVycm9yKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gICAgICB9O1xuZnVuY3Rpb24gbm9vcCgpIHt9XG5leHBvcnRzLkNoaWxkcmVuID0ge1xuICBtYXA6IG1hcENoaWxkcmVuLFxuICBmb3JFYWNoOiBmdW5jdGlvbiAoY2hpbGRyZW4sIGZvckVhY2hGdW5jLCBmb3JFYWNoQ29udGV4dCkge1xuICAgIG1hcENoaWxkcmVuKFxuICAgICAgY2hpbGRyZW4sXG4gICAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZvckVhY2hGdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9LFxuICAgICAgZm9yRWFjaENvbnRleHRcbiAgICApO1xuICB9LFxuICBjb3VudDogZnVuY3Rpb24gKGNoaWxkcmVuKSB7XG4gICAgdmFyIG4gPSAwO1xuICAgIG1hcENoaWxkcmVuKGNoaWxkcmVuLCBmdW5jdGlvbiAoKSB7XG4gICAgICBuKys7XG4gICAgfSk7XG4gICAgcmV0dXJuIG47XG4gIH0sXG4gIHRvQXJyYXk6IGZ1bmN0aW9uIChjaGlsZHJlbikge1xuICAgIHJldHVybiAoXG4gICAgICBtYXBDaGlsZHJlbihjaGlsZHJlbiwgZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICAgIHJldHVybiBjaGlsZDtcbiAgICAgIH0pIHx8IFtdXG4gICAgKTtcbiAgfSxcbiAgb25seTogZnVuY3Rpb24gKGNoaWxkcmVuKSB7XG4gICAgaWYgKCFpc1ZhbGlkRWxlbWVudChjaGlsZHJlbikpXG4gICAgICB0aHJvdyBFcnJvcihcbiAgICAgICAgXCJSZWFjdC5DaGlsZHJlbi5vbmx5IGV4cGVjdGVkIHRvIHJlY2VpdmUgYSBzaW5nbGUgUmVhY3QgZWxlbWVudCBjaGlsZC5cIlxuICAgICAgKTtcbiAgICByZXR1cm4gY2hpbGRyZW47XG4gIH1cbn07XG5leHBvcnRzLkNvbXBvbmVudCA9IENvbXBvbmVudDtcbmV4cG9ydHMuRnJhZ21lbnQgPSBSRUFDVF9GUkFHTUVOVF9UWVBFO1xuZXhwb3J0cy5Qcm9maWxlciA9IFJFQUNUX1BST0ZJTEVSX1RZUEU7XG5leHBvcnRzLlB1cmVDb21wb25lbnQgPSBQdXJlQ29tcG9uZW50O1xuZXhwb3J0cy5TdHJpY3RNb2RlID0gUkVBQ1RfU1RSSUNUX01PREVfVFlQRTtcbmV4cG9ydHMuU3VzcGVuc2UgPSBSRUFDVF9TVVNQRU5TRV9UWVBFO1xuZXhwb3J0cy5fX0NMSUVOVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9XQVJOX1VTRVJTX1RIRVlfQ0FOTk9UX1VQR1JBREUgPVxuICBSZWFjdFNoYXJlZEludGVybmFscztcbmV4cG9ydHMuYWN0ID0gZnVuY3Rpb24gKCkge1xuICB0aHJvdyBFcnJvcihcImFjdCguLi4pIGlzIG5vdCBzdXBwb3J0ZWQgaW4gcHJvZHVjdGlvbiBidWlsZHMgb2YgUmVhY3QuXCIpO1xufTtcbmV4cG9ydHMuY2FjaGUgPSBmdW5jdGlvbiAoZm4pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZm4uYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgfTtcbn07XG5leHBvcnRzLmNsb25lRWxlbWVudCA9IGZ1bmN0aW9uIChlbGVtZW50LCBjb25maWcsIGNoaWxkcmVuKSB7XG4gIGlmIChudWxsID09PSBlbGVtZW50IHx8IHZvaWQgMCA9PT0gZWxlbWVudClcbiAgICB0aHJvdyBFcnJvcihcbiAgICAgIFwiVGhlIGFyZ3VtZW50IG11c3QgYmUgYSBSZWFjdCBlbGVtZW50LCBidXQgeW91IHBhc3NlZCBcIiArIGVsZW1lbnQgKyBcIi5cIlxuICAgICk7XG4gIHZhciBwcm9wcyA9IGFzc2lnbih7fSwgZWxlbWVudC5wcm9wcyksXG4gICAga2V5ID0gZWxlbWVudC5rZXksXG4gICAgb3duZXIgPSB2b2lkIDA7XG4gIGlmIChudWxsICE9IGNvbmZpZylcbiAgICBmb3IgKHByb3BOYW1lIGluICh2b2lkIDAgIT09IGNvbmZpZy5yZWYgJiYgKG93bmVyID0gdm9pZCAwKSxcbiAgICB2b2lkIDAgIT09IGNvbmZpZy5rZXkgJiYgKGtleSA9IFwiXCIgKyBjb25maWcua2V5KSxcbiAgICBjb25maWcpKVxuICAgICAgIWhhc093blByb3BlcnR5LmNhbGwoY29uZmlnLCBwcm9wTmFtZSkgfHxcbiAgICAgICAgXCJrZXlcIiA9PT0gcHJvcE5hbWUgfHxcbiAgICAgICAgXCJfX3NlbGZcIiA9PT0gcHJvcE5hbWUgfHxcbiAgICAgICAgXCJfX3NvdXJjZVwiID09PSBwcm9wTmFtZSB8fFxuICAgICAgICAoXCJyZWZcIiA9PT0gcHJvcE5hbWUgJiYgdm9pZCAwID09PSBjb25maWcucmVmKSB8fFxuICAgICAgICAocHJvcHNbcHJvcE5hbWVdID0gY29uZmlnW3Byb3BOYW1lXSk7XG4gIHZhciBwcm9wTmFtZSA9IGFyZ3VtZW50cy5sZW5ndGggLSAyO1xuICBpZiAoMSA9PT0gcHJvcE5hbWUpIHByb3BzLmNoaWxkcmVuID0gY2hpbGRyZW47XG4gIGVsc2UgaWYgKDEgPCBwcm9wTmFtZSkge1xuICAgIGZvciAodmFyIGNoaWxkQXJyYXkgPSBBcnJheShwcm9wTmFtZSksIGkgPSAwOyBpIDwgcHJvcE5hbWU7IGkrKylcbiAgICAgIGNoaWxkQXJyYXlbaV0gPSBhcmd1bWVudHNbaSArIDJdO1xuICAgIHByb3BzLmNoaWxkcmVuID0gY2hpbGRBcnJheTtcbiAgfVxuICByZXR1cm4gUmVhY3RFbGVtZW50KGVsZW1lbnQudHlwZSwga2V5LCB2b2lkIDAsIHZvaWQgMCwgb3duZXIsIHByb3BzKTtcbn07XG5leHBvcnRzLmNyZWF0ZUNvbnRleHQgPSBmdW5jdGlvbiAoZGVmYXVsdFZhbHVlKSB7XG4gIGRlZmF1bHRWYWx1ZSA9IHtcbiAgICAkJHR5cGVvZjogUkVBQ1RfQ09OVEVYVF9UWVBFLFxuICAgIF9jdXJyZW50VmFsdWU6IGRlZmF1bHRWYWx1ZSxcbiAgICBfY3VycmVudFZhbHVlMjogZGVmYXVsdFZhbHVlLFxuICAgIF90aHJlYWRDb3VudDogMCxcbiAgICBQcm92aWRlcjogbnVsbCxcbiAgICBDb25zdW1lcjogbnVsbFxuICB9O1xuICBkZWZhdWx0VmFsdWUuUHJvdmlkZXIgPSBkZWZhdWx0VmFsdWU7XG4gIGRlZmF1bHRWYWx1ZS5Db25zdW1lciA9IHtcbiAgICAkJHR5cGVvZjogUkVBQ1RfQ09OU1VNRVJfVFlQRSxcbiAgICBfY29udGV4dDogZGVmYXVsdFZhbHVlXG4gIH07XG4gIHJldHVybiBkZWZhdWx0VmFsdWU7XG59O1xuZXhwb3J0cy5jcmVhdGVFbGVtZW50ID0gZnVuY3Rpb24gKHR5cGUsIGNvbmZpZywgY2hpbGRyZW4pIHtcbiAgdmFyIHByb3BOYW1lLFxuICAgIHByb3BzID0ge30sXG4gICAga2V5ID0gbnVsbDtcbiAgaWYgKG51bGwgIT0gY29uZmlnKVxuICAgIGZvciAocHJvcE5hbWUgaW4gKHZvaWQgMCAhPT0gY29uZmlnLmtleSAmJiAoa2V5ID0gXCJcIiArIGNvbmZpZy5rZXkpLCBjb25maWcpKVxuICAgICAgaGFzT3duUHJvcGVydHkuY2FsbChjb25maWcsIHByb3BOYW1lKSAmJlxuICAgICAgICBcImtleVwiICE9PSBwcm9wTmFtZSAmJlxuICAgICAgICBcIl9fc2VsZlwiICE9PSBwcm9wTmFtZSAmJlxuICAgICAgICBcIl9fc291cmNlXCIgIT09IHByb3BOYW1lICYmXG4gICAgICAgIChwcm9wc1twcm9wTmFtZV0gPSBjb25maWdbcHJvcE5hbWVdKTtcbiAgdmFyIGNoaWxkcmVuTGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCAtIDI7XG4gIGlmICgxID09PSBjaGlsZHJlbkxlbmd0aCkgcHJvcHMuY2hpbGRyZW4gPSBjaGlsZHJlbjtcbiAgZWxzZSBpZiAoMSA8IGNoaWxkcmVuTGVuZ3RoKSB7XG4gICAgZm9yICh2YXIgY2hpbGRBcnJheSA9IEFycmF5KGNoaWxkcmVuTGVuZ3RoKSwgaSA9IDA7IGkgPCBjaGlsZHJlbkxlbmd0aDsgaSsrKVxuICAgICAgY2hpbGRBcnJheVtpXSA9IGFyZ3VtZW50c1tpICsgMl07XG4gICAgcHJvcHMuY2hpbGRyZW4gPSBjaGlsZEFycmF5O1xuICB9XG4gIGlmICh0eXBlICYmIHR5cGUuZGVmYXVsdFByb3BzKVxuICAgIGZvciAocHJvcE5hbWUgaW4gKChjaGlsZHJlbkxlbmd0aCA9IHR5cGUuZGVmYXVsdFByb3BzKSwgY2hpbGRyZW5MZW5ndGgpKVxuICAgICAgdm9pZCAwID09PSBwcm9wc1twcm9wTmFtZV0gJiZcbiAgICAgICAgKHByb3BzW3Byb3BOYW1lXSA9IGNoaWxkcmVuTGVuZ3RoW3Byb3BOYW1lXSk7XG4gIHJldHVybiBSZWFjdEVsZW1lbnQodHlwZSwga2V5LCB2b2lkIDAsIHZvaWQgMCwgbnVsbCwgcHJvcHMpO1xufTtcbmV4cG9ydHMuY3JlYXRlUmVmID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4geyBjdXJyZW50OiBudWxsIH07XG59O1xuZXhwb3J0cy5mb3J3YXJkUmVmID0gZnVuY3Rpb24gKHJlbmRlcikge1xuICByZXR1cm4geyAkJHR5cGVvZjogUkVBQ1RfRk9SV0FSRF9SRUZfVFlQRSwgcmVuZGVyOiByZW5kZXIgfTtcbn07XG5leHBvcnRzLmlzVmFsaWRFbGVtZW50ID0gaXNWYWxpZEVsZW1lbnQ7XG5leHBvcnRzLmxhenkgPSBmdW5jdGlvbiAoY3Rvcikge1xuICByZXR1cm4ge1xuICAgICQkdHlwZW9mOiBSRUFDVF9MQVpZX1RZUEUsXG4gICAgX3BheWxvYWQ6IHsgX3N0YXR1czogLTEsIF9yZXN1bHQ6IGN0b3IgfSxcbiAgICBfaW5pdDogbGF6eUluaXRpYWxpemVyXG4gIH07XG59O1xuZXhwb3J0cy5tZW1vID0gZnVuY3Rpb24gKHR5cGUsIGNvbXBhcmUpIHtcbiAgcmV0dXJuIHtcbiAgICAkJHR5cGVvZjogUkVBQ1RfTUVNT19UWVBFLFxuICAgIHR5cGU6IHR5cGUsXG4gICAgY29tcGFyZTogdm9pZCAwID09PSBjb21wYXJlID8gbnVsbCA6IGNvbXBhcmVcbiAgfTtcbn07XG5leHBvcnRzLnN0YXJ0VHJhbnNpdGlvbiA9IGZ1bmN0aW9uIChzY29wZSkge1xuICB2YXIgcHJldlRyYW5zaXRpb24gPSBSZWFjdFNoYXJlZEludGVybmFscy5ULFxuICAgIGN1cnJlbnRUcmFuc2l0aW9uID0ge307XG4gIFJlYWN0U2hhcmVkSW50ZXJuYWxzLlQgPSBjdXJyZW50VHJhbnNpdGlvbjtcbiAgdHJ5IHtcbiAgICB2YXIgcmV0dXJuVmFsdWUgPSBzY29wZSgpLFxuICAgICAgb25TdGFydFRyYW5zaXRpb25GaW5pc2ggPSBSZWFjdFNoYXJlZEludGVybmFscy5TO1xuICAgIG51bGwgIT09IG9uU3RhcnRUcmFuc2l0aW9uRmluaXNoICYmXG4gICAgICBvblN0YXJ0VHJhbnNpdGlvbkZpbmlzaChjdXJyZW50VHJhbnNpdGlvbiwgcmV0dXJuVmFsdWUpO1xuICAgIFwib2JqZWN0XCIgPT09IHR5cGVvZiByZXR1cm5WYWx1ZSAmJlxuICAgICAgbnVsbCAhPT0gcmV0dXJuVmFsdWUgJiZcbiAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHJldHVyblZhbHVlLnRoZW4gJiZcbiAgICAgIHJldHVyblZhbHVlLnRoZW4obm9vcCwgcmVwb3J0R2xvYmFsRXJyb3IpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJlcG9ydEdsb2JhbEVycm9yKGVycm9yKTtcbiAgfSBmaW5hbGx5IHtcbiAgICBSZWFjdFNoYXJlZEludGVybmFscy5UID0gcHJldlRyYW5zaXRpb247XG4gIH1cbn07XG5leHBvcnRzLnVuc3RhYmxlX3VzZUNhY2hlUmVmcmVzaCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIFJlYWN0U2hhcmVkSW50ZXJuYWxzLkgudXNlQ2FjaGVSZWZyZXNoKCk7XG59O1xuZXhwb3J0cy51c2UgPSBmdW5jdGlvbiAodXNhYmxlKSB7XG4gIHJldHVybiBSZWFjdFNoYXJlZEludGVybmFscy5ILnVzZSh1c2FibGUpO1xufTtcbmV4cG9ydHMudXNlQWN0aW9uU3RhdGUgPSBmdW5jdGlvbiAoYWN0aW9uLCBpbml0aWFsU3RhdGUsIHBlcm1hbGluaykge1xuICByZXR1cm4gUmVhY3RTaGFyZWRJbnRlcm5hbHMuSC51c2VBY3Rpb25TdGF0ZShhY3Rpb24sIGluaXRpYWxTdGF0ZSwgcGVybWFsaW5rKTtcbn07XG5leHBvcnRzLnVzZUNhbGxiYWNrID0gZnVuY3Rpb24gKGNhbGxiYWNrLCBkZXBzKSB7XG4gIHJldHVybiBSZWFjdFNoYXJlZEludGVybmFscy5ILnVzZUNhbGxiYWNrKGNhbGxiYWNrLCBkZXBzKTtcbn07XG5leHBvcnRzLnVzZUNvbnRleHQgPSBmdW5jdGlvbiAoQ29udGV4dCkge1xuICByZXR1cm4gUmVhY3RTaGFyZWRJbnRlcm5hbHMuSC51c2VDb250ZXh0KENvbnRleHQpO1xufTtcbmV4cG9ydHMudXNlRGVidWdWYWx1ZSA9IGZ1bmN0aW9uICgpIHt9O1xuZXhwb3J0cy51c2VEZWZlcnJlZFZhbHVlID0gZnVuY3Rpb24gKHZhbHVlLCBpbml0aWFsVmFsdWUpIHtcbiAgcmV0dXJuIFJlYWN0U2hhcmVkSW50ZXJuYWxzLkgudXNlRGVmZXJyZWRWYWx1ZSh2YWx1ZSwgaW5pdGlhbFZhbHVlKTtcbn07XG5leHBvcnRzLnVzZUVmZmVjdCA9IGZ1bmN0aW9uIChjcmVhdGUsIGRlcHMpIHtcbiAgcmV0dXJuIFJlYWN0U2hhcmVkSW50ZXJuYWxzLkgudXNlRWZmZWN0KGNyZWF0ZSwgZGVwcyk7XG59O1xuZXhwb3J0cy51c2VJZCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIFJlYWN0U2hhcmVkSW50ZXJuYWxzLkgudXNlSWQoKTtcbn07XG5leHBvcnRzLnVzZUltcGVyYXRpdmVIYW5kbGUgPSBmdW5jdGlvbiAocmVmLCBjcmVhdGUsIGRlcHMpIHtcbiAgcmV0dXJuIFJlYWN0U2hhcmVkSW50ZXJuYWxzLkgudXNlSW1wZXJhdGl2ZUhhbmRsZShyZWYsIGNyZWF0ZSwgZGVwcyk7XG59O1xuZXhwb3J0cy51c2VJbnNlcnRpb25FZmZlY3QgPSBmdW5jdGlvbiAoY3JlYXRlLCBkZXBzKSB7XG4gIHJldHVybiBSZWFjdFNoYXJlZEludGVybmFscy5ILnVzZUluc2VydGlvbkVmZmVjdChjcmVhdGUsIGRlcHMpO1xufTtcbmV4cG9ydHMudXNlTGF5b3V0RWZmZWN0ID0gZnVuY3Rpb24gKGNyZWF0ZSwgZGVwcykge1xuICByZXR1cm4gUmVhY3RTaGFyZWRJbnRlcm5hbHMuSC51c2VMYXlvdXRFZmZlY3QoY3JlYXRlLCBkZXBzKTtcbn07XG5leHBvcnRzLnVzZU1lbW8gPSBmdW5jdGlvbiAoY3JlYXRlLCBkZXBzKSB7XG4gIHJldHVybiBSZWFjdFNoYXJlZEludGVybmFscy5ILnVzZU1lbW8oY3JlYXRlLCBkZXBzKTtcbn07XG5leHBvcnRzLnVzZU9wdGltaXN0aWMgPSBmdW5jdGlvbiAocGFzc3Rocm91Z2gsIHJlZHVjZXIpIHtcbiAgcmV0dXJuIFJlYWN0U2hhcmVkSW50ZXJuYWxzLkgudXNlT3B0aW1pc3RpYyhwYXNzdGhyb3VnaCwgcmVkdWNlcik7XG59O1xuZXhwb3J0cy51c2VSZWR1Y2VyID0gZnVuY3Rpb24gKHJlZHVjZXIsIGluaXRpYWxBcmcsIGluaXQpIHtcbiAgcmV0dXJuIFJlYWN0U2hhcmVkSW50ZXJuYWxzLkgudXNlUmVkdWNlcihyZWR1Y2VyLCBpbml0aWFsQXJnLCBpbml0KTtcbn07XG5leHBvcnRzLnVzZVJlZiA9IGZ1bmN0aW9uIChpbml0aWFsVmFsdWUpIHtcbiAgcmV0dXJuIFJlYWN0U2hhcmVkSW50ZXJuYWxzLkgudXNlUmVmKGluaXRpYWxWYWx1ZSk7XG59O1xuZXhwb3J0cy51c2VTdGF0ZSA9IGZ1bmN0aW9uIChpbml0aWFsU3RhdGUpIHtcbiAgcmV0dXJuIFJlYWN0U2hhcmVkSW50ZXJuYWxzLkgudXNlU3RhdGUoaW5pdGlhbFN0YXRlKTtcbn07XG5leHBvcnRzLnVzZVN5bmNFeHRlcm5hbFN0b3JlID0gZnVuY3Rpb24gKFxuICBzdWJzY3JpYmUsXG4gIGdldFNuYXBzaG90LFxuICBnZXRTZXJ2ZXJTbmFwc2hvdFxuKSB7XG4gIHJldHVybiBSZWFjdFNoYXJlZEludGVybmFscy5ILnVzZVN5bmNFeHRlcm5hbFN0b3JlKFxuICAgIHN1YnNjcmliZSxcbiAgICBnZXRTbmFwc2hvdCxcbiAgICBnZXRTZXJ2ZXJTbmFwc2hvdFxuICApO1xufTtcbmV4cG9ydHMudXNlVHJhbnNpdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIFJlYWN0U2hhcmVkSW50ZXJuYWxzLkgudXNlVHJhbnNpdGlvbigpO1xufTtcbmV4cG9ydHMudmVyc2lvbiA9IFwiMTkuMC4wXCI7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QucHJvZHVjdGlvbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLyoqXG4gKiBAbGljZW5zZSBSZWFjdFxuICogc2NoZWR1bGVyLnByb2R1Y3Rpb24uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cblwidXNlIHN0cmljdFwiO1xuZnVuY3Rpb24gcHVzaChoZWFwLCBub2RlKSB7XG4gIHZhciBpbmRleCA9IGhlYXAubGVuZ3RoO1xuICBoZWFwLnB1c2gobm9kZSk7XG4gIGE6IGZvciAoOyAwIDwgaW5kZXg7ICkge1xuICAgIHZhciBwYXJlbnRJbmRleCA9IChpbmRleCAtIDEpID4+PiAxLFxuICAgICAgcGFyZW50ID0gaGVhcFtwYXJlbnRJbmRleF07XG4gICAgaWYgKDAgPCBjb21wYXJlKHBhcmVudCwgbm9kZSkpXG4gICAgICAoaGVhcFtwYXJlbnRJbmRleF0gPSBub2RlKSwgKGhlYXBbaW5kZXhdID0gcGFyZW50KSwgKGluZGV4ID0gcGFyZW50SW5kZXgpO1xuICAgIGVsc2UgYnJlYWsgYTtcbiAgfVxufVxuZnVuY3Rpb24gcGVlayhoZWFwKSB7XG4gIHJldHVybiAwID09PSBoZWFwLmxlbmd0aCA/IG51bGwgOiBoZWFwWzBdO1xufVxuZnVuY3Rpb24gcG9wKGhlYXApIHtcbiAgaWYgKDAgPT09IGhlYXAubGVuZ3RoKSByZXR1cm4gbnVsbDtcbiAgdmFyIGZpcnN0ID0gaGVhcFswXSxcbiAgICBsYXN0ID0gaGVhcC5wb3AoKTtcbiAgaWYgKGxhc3QgIT09IGZpcnN0KSB7XG4gICAgaGVhcFswXSA9IGxhc3Q7XG4gICAgYTogZm9yIChcbiAgICAgIHZhciBpbmRleCA9IDAsIGxlbmd0aCA9IGhlYXAubGVuZ3RoLCBoYWxmTGVuZ3RoID0gbGVuZ3RoID4+PiAxO1xuICAgICAgaW5kZXggPCBoYWxmTGVuZ3RoO1xuXG4gICAgKSB7XG4gICAgICB2YXIgbGVmdEluZGV4ID0gMiAqIChpbmRleCArIDEpIC0gMSxcbiAgICAgICAgbGVmdCA9IGhlYXBbbGVmdEluZGV4XSxcbiAgICAgICAgcmlnaHRJbmRleCA9IGxlZnRJbmRleCArIDEsXG4gICAgICAgIHJpZ2h0ID0gaGVhcFtyaWdodEluZGV4XTtcbiAgICAgIGlmICgwID4gY29tcGFyZShsZWZ0LCBsYXN0KSlcbiAgICAgICAgcmlnaHRJbmRleCA8IGxlbmd0aCAmJiAwID4gY29tcGFyZShyaWdodCwgbGVmdClcbiAgICAgICAgICA/ICgoaGVhcFtpbmRleF0gPSByaWdodCksXG4gICAgICAgICAgICAoaGVhcFtyaWdodEluZGV4XSA9IGxhc3QpLFxuICAgICAgICAgICAgKGluZGV4ID0gcmlnaHRJbmRleCkpXG4gICAgICAgICAgOiAoKGhlYXBbaW5kZXhdID0gbGVmdCksXG4gICAgICAgICAgICAoaGVhcFtsZWZ0SW5kZXhdID0gbGFzdCksXG4gICAgICAgICAgICAoaW5kZXggPSBsZWZ0SW5kZXgpKTtcbiAgICAgIGVsc2UgaWYgKHJpZ2h0SW5kZXggPCBsZW5ndGggJiYgMCA+IGNvbXBhcmUocmlnaHQsIGxhc3QpKVxuICAgICAgICAoaGVhcFtpbmRleF0gPSByaWdodCksIChoZWFwW3JpZ2h0SW5kZXhdID0gbGFzdCksIChpbmRleCA9IHJpZ2h0SW5kZXgpO1xuICAgICAgZWxzZSBicmVhayBhO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmlyc3Q7XG59XG5mdW5jdGlvbiBjb21wYXJlKGEsIGIpIHtcbiAgdmFyIGRpZmYgPSBhLnNvcnRJbmRleCAtIGIuc29ydEluZGV4O1xuICByZXR1cm4gMCAhPT0gZGlmZiA/IGRpZmYgOiBhLmlkIC0gYi5pZDtcbn1cbmV4cG9ydHMudW5zdGFibGVfbm93ID0gdm9pZCAwO1xuaWYgKFwib2JqZWN0XCIgPT09IHR5cGVvZiBwZXJmb3JtYW5jZSAmJiBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBwZXJmb3JtYW5jZS5ub3cpIHtcbiAgdmFyIGxvY2FsUGVyZm9ybWFuY2UgPSBwZXJmb3JtYW5jZTtcbiAgZXhwb3J0cy51bnN0YWJsZV9ub3cgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGxvY2FsUGVyZm9ybWFuY2Uubm93KCk7XG4gIH07XG59IGVsc2Uge1xuICB2YXIgbG9jYWxEYXRlID0gRGF0ZSxcbiAgICBpbml0aWFsVGltZSA9IGxvY2FsRGF0ZS5ub3coKTtcbiAgZXhwb3J0cy51bnN0YWJsZV9ub3cgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGxvY2FsRGF0ZS5ub3coKSAtIGluaXRpYWxUaW1lO1xuICB9O1xufVxudmFyIHRhc2tRdWV1ZSA9IFtdLFxuICB0aW1lclF1ZXVlID0gW10sXG4gIHRhc2tJZENvdW50ZXIgPSAxLFxuICBjdXJyZW50VGFzayA9IG51bGwsXG4gIGN1cnJlbnRQcmlvcml0eUxldmVsID0gMyxcbiAgaXNQZXJmb3JtaW5nV29yayA9ICExLFxuICBpc0hvc3RDYWxsYmFja1NjaGVkdWxlZCA9ICExLFxuICBpc0hvc3RUaW1lb3V0U2NoZWR1bGVkID0gITEsXG4gIGxvY2FsU2V0VGltZW91dCA9IFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHNldFRpbWVvdXQgPyBzZXRUaW1lb3V0IDogbnVsbCxcbiAgbG9jYWxDbGVhclRpbWVvdXQgPSBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBjbGVhclRpbWVvdXQgPyBjbGVhclRpbWVvdXQgOiBudWxsLFxuICBsb2NhbFNldEltbWVkaWF0ZSA9IFwidW5kZWZpbmVkXCIgIT09IHR5cGVvZiBzZXRJbW1lZGlhdGUgPyBzZXRJbW1lZGlhdGUgOiBudWxsO1xuZnVuY3Rpb24gYWR2YW5jZVRpbWVycyhjdXJyZW50VGltZSkge1xuICBmb3IgKHZhciB0aW1lciA9IHBlZWsodGltZXJRdWV1ZSk7IG51bGwgIT09IHRpbWVyOyApIHtcbiAgICBpZiAobnVsbCA9PT0gdGltZXIuY2FsbGJhY2spIHBvcCh0aW1lclF1ZXVlKTtcbiAgICBlbHNlIGlmICh0aW1lci5zdGFydFRpbWUgPD0gY3VycmVudFRpbWUpXG4gICAgICBwb3AodGltZXJRdWV1ZSksXG4gICAgICAgICh0aW1lci5zb3J0SW5kZXggPSB0aW1lci5leHBpcmF0aW9uVGltZSksXG4gICAgICAgIHB1c2godGFza1F1ZXVlLCB0aW1lcik7XG4gICAgZWxzZSBicmVhaztcbiAgICB0aW1lciA9IHBlZWsodGltZXJRdWV1ZSk7XG4gIH1cbn1cbmZ1bmN0aW9uIGhhbmRsZVRpbWVvdXQoY3VycmVudFRpbWUpIHtcbiAgaXNIb3N0VGltZW91dFNjaGVkdWxlZCA9ICExO1xuICBhZHZhbmNlVGltZXJzKGN1cnJlbnRUaW1lKTtcbiAgaWYgKCFpc0hvc3RDYWxsYmFja1NjaGVkdWxlZClcbiAgICBpZiAobnVsbCAhPT0gcGVlayh0YXNrUXVldWUpKVxuICAgICAgKGlzSG9zdENhbGxiYWNrU2NoZWR1bGVkID0gITApLCByZXF1ZXN0SG9zdENhbGxiYWNrKCk7XG4gICAgZWxzZSB7XG4gICAgICB2YXIgZmlyc3RUaW1lciA9IHBlZWsodGltZXJRdWV1ZSk7XG4gICAgICBudWxsICE9PSBmaXJzdFRpbWVyICYmXG4gICAgICAgIHJlcXVlc3RIb3N0VGltZW91dChoYW5kbGVUaW1lb3V0LCBmaXJzdFRpbWVyLnN0YXJ0VGltZSAtIGN1cnJlbnRUaW1lKTtcbiAgICB9XG59XG52YXIgaXNNZXNzYWdlTG9vcFJ1bm5pbmcgPSAhMSxcbiAgdGFza1RpbWVvdXRJRCA9IC0xLFxuICBmcmFtZUludGVydmFsID0gNSxcbiAgc3RhcnRUaW1lID0gLTE7XG5mdW5jdGlvbiBzaG91bGRZaWVsZFRvSG9zdCgpIHtcbiAgcmV0dXJuIGV4cG9ydHMudW5zdGFibGVfbm93KCkgLSBzdGFydFRpbWUgPCBmcmFtZUludGVydmFsID8gITEgOiAhMDtcbn1cbmZ1bmN0aW9uIHBlcmZvcm1Xb3JrVW50aWxEZWFkbGluZSgpIHtcbiAgaWYgKGlzTWVzc2FnZUxvb3BSdW5uaW5nKSB7XG4gICAgdmFyIGN1cnJlbnRUaW1lID0gZXhwb3J0cy51bnN0YWJsZV9ub3coKTtcbiAgICBzdGFydFRpbWUgPSBjdXJyZW50VGltZTtcbiAgICB2YXIgaGFzTW9yZVdvcmsgPSAhMDtcbiAgICB0cnkge1xuICAgICAgYToge1xuICAgICAgICBpc0hvc3RDYWxsYmFja1NjaGVkdWxlZCA9ICExO1xuICAgICAgICBpc0hvc3RUaW1lb3V0U2NoZWR1bGVkICYmXG4gICAgICAgICAgKChpc0hvc3RUaW1lb3V0U2NoZWR1bGVkID0gITEpLFxuICAgICAgICAgIGxvY2FsQ2xlYXJUaW1lb3V0KHRhc2tUaW1lb3V0SUQpLFxuICAgICAgICAgICh0YXNrVGltZW91dElEID0gLTEpKTtcbiAgICAgICAgaXNQZXJmb3JtaW5nV29yayA9ICEwO1xuICAgICAgICB2YXIgcHJldmlvdXNQcmlvcml0eUxldmVsID0gY3VycmVudFByaW9yaXR5TGV2ZWw7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgYjoge1xuICAgICAgICAgICAgYWR2YW5jZVRpbWVycyhjdXJyZW50VGltZSk7XG4gICAgICAgICAgICBmb3IgKFxuICAgICAgICAgICAgICBjdXJyZW50VGFzayA9IHBlZWsodGFza1F1ZXVlKTtcbiAgICAgICAgICAgICAgbnVsbCAhPT0gY3VycmVudFRhc2sgJiZcbiAgICAgICAgICAgICAgIShcbiAgICAgICAgICAgICAgICBjdXJyZW50VGFzay5leHBpcmF0aW9uVGltZSA+IGN1cnJlbnRUaW1lICYmIHNob3VsZFlpZWxkVG9Ib3N0KClcbiAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgIHZhciBjYWxsYmFjayA9IGN1cnJlbnRUYXNrLmNhbGxiYWNrO1xuICAgICAgICAgICAgICBpZiAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50VGFzay5jYWxsYmFjayA9IG51bGw7XG4gICAgICAgICAgICAgICAgY3VycmVudFByaW9yaXR5TGV2ZWwgPSBjdXJyZW50VGFzay5wcmlvcml0eUxldmVsO1xuICAgICAgICAgICAgICAgIHZhciBjb250aW51YXRpb25DYWxsYmFjayA9IGNhbGxiYWNrKFxuICAgICAgICAgICAgICAgICAgY3VycmVudFRhc2suZXhwaXJhdGlvblRpbWUgPD0gY3VycmVudFRpbWVcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGN1cnJlbnRUaW1lID0gZXhwb3J0cy51bnN0YWJsZV9ub3coKTtcbiAgICAgICAgICAgICAgICBpZiAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgY29udGludWF0aW9uQ2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAgIGN1cnJlbnRUYXNrLmNhbGxiYWNrID0gY29udGludWF0aW9uQ2FsbGJhY2s7XG4gICAgICAgICAgICAgICAgICBhZHZhbmNlVGltZXJzKGN1cnJlbnRUaW1lKTtcbiAgICAgICAgICAgICAgICAgIGhhc01vcmVXb3JrID0gITA7XG4gICAgICAgICAgICAgICAgICBicmVhayBiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjdXJyZW50VGFzayA9PT0gcGVlayh0YXNrUXVldWUpICYmIHBvcCh0YXNrUXVldWUpO1xuICAgICAgICAgICAgICAgIGFkdmFuY2VUaW1lcnMoY3VycmVudFRpbWUpO1xuICAgICAgICAgICAgICB9IGVsc2UgcG9wKHRhc2tRdWV1ZSk7XG4gICAgICAgICAgICAgIGN1cnJlbnRUYXNrID0gcGVlayh0YXNrUXVldWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG51bGwgIT09IGN1cnJlbnRUYXNrKSBoYXNNb3JlV29yayA9ICEwO1xuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgIHZhciBmaXJzdFRpbWVyID0gcGVlayh0aW1lclF1ZXVlKTtcbiAgICAgICAgICAgICAgbnVsbCAhPT0gZmlyc3RUaW1lciAmJlxuICAgICAgICAgICAgICAgIHJlcXVlc3RIb3N0VGltZW91dChcbiAgICAgICAgICAgICAgICAgIGhhbmRsZVRpbWVvdXQsXG4gICAgICAgICAgICAgICAgICBmaXJzdFRpbWVyLnN0YXJ0VGltZSAtIGN1cnJlbnRUaW1lXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgaGFzTW9yZVdvcmsgPSAhMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAoY3VycmVudFRhc2sgPSBudWxsKSxcbiAgICAgICAgICAgIChjdXJyZW50UHJpb3JpdHlMZXZlbCA9IHByZXZpb3VzUHJpb3JpdHlMZXZlbCksXG4gICAgICAgICAgICAoaXNQZXJmb3JtaW5nV29yayA9ICExKTtcbiAgICAgICAgfVxuICAgICAgICBoYXNNb3JlV29yayA9IHZvaWQgMDtcbiAgICAgIH1cbiAgICB9IGZpbmFsbHkge1xuICAgICAgaGFzTW9yZVdvcmtcbiAgICAgICAgPyBzY2hlZHVsZVBlcmZvcm1Xb3JrVW50aWxEZWFkbGluZSgpXG4gICAgICAgIDogKGlzTWVzc2FnZUxvb3BSdW5uaW5nID0gITEpO1xuICAgIH1cbiAgfVxufVxudmFyIHNjaGVkdWxlUGVyZm9ybVdvcmtVbnRpbERlYWRsaW5lO1xuaWYgKFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGxvY2FsU2V0SW1tZWRpYXRlKVxuICBzY2hlZHVsZVBlcmZvcm1Xb3JrVW50aWxEZWFkbGluZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBsb2NhbFNldEltbWVkaWF0ZShwZXJmb3JtV29ya1VudGlsRGVhZGxpbmUpO1xuICB9O1xuZWxzZSBpZiAoXCJ1bmRlZmluZWRcIiAhPT0gdHlwZW9mIE1lc3NhZ2VDaGFubmVsKSB7XG4gIHZhciBjaGFubmVsID0gbmV3IE1lc3NhZ2VDaGFubmVsKCksXG4gICAgcG9ydCA9IGNoYW5uZWwucG9ydDI7XG4gIGNoYW5uZWwucG9ydDEub25tZXNzYWdlID0gcGVyZm9ybVdvcmtVbnRpbERlYWRsaW5lO1xuICBzY2hlZHVsZVBlcmZvcm1Xb3JrVW50aWxEZWFkbGluZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBwb3J0LnBvc3RNZXNzYWdlKG51bGwpO1xuICB9O1xufSBlbHNlXG4gIHNjaGVkdWxlUGVyZm9ybVdvcmtVbnRpbERlYWRsaW5lID0gZnVuY3Rpb24gKCkge1xuICAgIGxvY2FsU2V0VGltZW91dChwZXJmb3JtV29ya1VudGlsRGVhZGxpbmUsIDApO1xuICB9O1xuZnVuY3Rpb24gcmVxdWVzdEhvc3RDYWxsYmFjaygpIHtcbiAgaXNNZXNzYWdlTG9vcFJ1bm5pbmcgfHxcbiAgICAoKGlzTWVzc2FnZUxvb3BSdW5uaW5nID0gITApLCBzY2hlZHVsZVBlcmZvcm1Xb3JrVW50aWxEZWFkbGluZSgpKTtcbn1cbmZ1bmN0aW9uIHJlcXVlc3RIb3N0VGltZW91dChjYWxsYmFjaywgbXMpIHtcbiAgdGFza1RpbWVvdXRJRCA9IGxvY2FsU2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgY2FsbGJhY2soZXhwb3J0cy51bnN0YWJsZV9ub3coKSk7XG4gIH0sIG1zKTtcbn1cbmV4cG9ydHMudW5zdGFibGVfSWRsZVByaW9yaXR5ID0gNTtcbmV4cG9ydHMudW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHkgPSAxO1xuZXhwb3J0cy51bnN0YWJsZV9Mb3dQcmlvcml0eSA9IDQ7XG5leHBvcnRzLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5ID0gMztcbmV4cG9ydHMudW5zdGFibGVfUHJvZmlsaW5nID0gbnVsbDtcbmV4cG9ydHMudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHkgPSAyO1xuZXhwb3J0cy51bnN0YWJsZV9jYW5jZWxDYWxsYmFjayA9IGZ1bmN0aW9uICh0YXNrKSB7XG4gIHRhc2suY2FsbGJhY2sgPSBudWxsO1xufTtcbmV4cG9ydHMudW5zdGFibGVfY29udGludWVFeGVjdXRpb24gPSBmdW5jdGlvbiAoKSB7XG4gIGlzSG9zdENhbGxiYWNrU2NoZWR1bGVkIHx8XG4gICAgaXNQZXJmb3JtaW5nV29yayB8fFxuICAgICgoaXNIb3N0Q2FsbGJhY2tTY2hlZHVsZWQgPSAhMCksIHJlcXVlc3RIb3N0Q2FsbGJhY2soKSk7XG59O1xuZXhwb3J0cy51bnN0YWJsZV9mb3JjZUZyYW1lUmF0ZSA9IGZ1bmN0aW9uIChmcHMpIHtcbiAgMCA+IGZwcyB8fCAxMjUgPCBmcHNcbiAgICA/IGNvbnNvbGUuZXJyb3IoXG4gICAgICAgIFwiZm9yY2VGcmFtZVJhdGUgdGFrZXMgYSBwb3NpdGl2ZSBpbnQgYmV0d2VlbiAwIGFuZCAxMjUsIGZvcmNpbmcgZnJhbWUgcmF0ZXMgaGlnaGVyIHRoYW4gMTI1IGZwcyBpcyBub3Qgc3VwcG9ydGVkXCJcbiAgICAgIClcbiAgICA6IChmcmFtZUludGVydmFsID0gMCA8IGZwcyA/IE1hdGguZmxvb3IoMWUzIC8gZnBzKSA6IDUpO1xufTtcbmV4cG9ydHMudW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWwgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBjdXJyZW50UHJpb3JpdHlMZXZlbDtcbn07XG5leHBvcnRzLnVuc3RhYmxlX2dldEZpcnN0Q2FsbGJhY2tOb2RlID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gcGVlayh0YXNrUXVldWUpO1xufTtcbmV4cG9ydHMudW5zdGFibGVfbmV4dCA9IGZ1bmN0aW9uIChldmVudEhhbmRsZXIpIHtcbiAgc3dpdGNoIChjdXJyZW50UHJpb3JpdHlMZXZlbCkge1xuICAgIGNhc2UgMTpcbiAgICBjYXNlIDI6XG4gICAgY2FzZSAzOlxuICAgICAgdmFyIHByaW9yaXR5TGV2ZWwgPSAzO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHByaW9yaXR5TGV2ZWwgPSBjdXJyZW50UHJpb3JpdHlMZXZlbDtcbiAgfVxuICB2YXIgcHJldmlvdXNQcmlvcml0eUxldmVsID0gY3VycmVudFByaW9yaXR5TGV2ZWw7XG4gIGN1cnJlbnRQcmlvcml0eUxldmVsID0gcHJpb3JpdHlMZXZlbDtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZXZlbnRIYW5kbGVyKCk7XG4gIH0gZmluYWxseSB7XG4gICAgY3VycmVudFByaW9yaXR5TGV2ZWwgPSBwcmV2aW91c1ByaW9yaXR5TGV2ZWw7XG4gIH1cbn07XG5leHBvcnRzLnVuc3RhYmxlX3BhdXNlRXhlY3V0aW9uID0gZnVuY3Rpb24gKCkge307XG5leHBvcnRzLnVuc3RhYmxlX3JlcXVlc3RQYWludCA9IGZ1bmN0aW9uICgpIHt9O1xuZXhwb3J0cy51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHkgPSBmdW5jdGlvbiAocHJpb3JpdHlMZXZlbCwgZXZlbnRIYW5kbGVyKSB7XG4gIHN3aXRjaCAocHJpb3JpdHlMZXZlbCkge1xuICAgIGNhc2UgMTpcbiAgICBjYXNlIDI6XG4gICAgY2FzZSAzOlxuICAgIGNhc2UgNDpcbiAgICBjYXNlIDU6XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgcHJpb3JpdHlMZXZlbCA9IDM7XG4gIH1cbiAgdmFyIHByZXZpb3VzUHJpb3JpdHlMZXZlbCA9IGN1cnJlbnRQcmlvcml0eUxldmVsO1xuICBjdXJyZW50UHJpb3JpdHlMZXZlbCA9IHByaW9yaXR5TGV2ZWw7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGV2ZW50SGFuZGxlcigpO1xuICB9IGZpbmFsbHkge1xuICAgIGN1cnJlbnRQcmlvcml0eUxldmVsID0gcHJldmlvdXNQcmlvcml0eUxldmVsO1xuICB9XG59O1xuZXhwb3J0cy51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrID0gZnVuY3Rpb24gKFxuICBwcmlvcml0eUxldmVsLFxuICBjYWxsYmFjayxcbiAgb3B0aW9uc1xuKSB7XG4gIHZhciBjdXJyZW50VGltZSA9IGV4cG9ydHMudW5zdGFibGVfbm93KCk7XG4gIFwib2JqZWN0XCIgPT09IHR5cGVvZiBvcHRpb25zICYmIG51bGwgIT09IG9wdGlvbnNcbiAgICA/ICgob3B0aW9ucyA9IG9wdGlvbnMuZGVsYXkpLFxuICAgICAgKG9wdGlvbnMgPVxuICAgICAgICBcIm51bWJlclwiID09PSB0eXBlb2Ygb3B0aW9ucyAmJiAwIDwgb3B0aW9uc1xuICAgICAgICAgID8gY3VycmVudFRpbWUgKyBvcHRpb25zXG4gICAgICAgICAgOiBjdXJyZW50VGltZSkpXG4gICAgOiAob3B0aW9ucyA9IGN1cnJlbnRUaW1lKTtcbiAgc3dpdGNoIChwcmlvcml0eUxldmVsKSB7XG4gICAgY2FzZSAxOlxuICAgICAgdmFyIHRpbWVvdXQgPSAtMTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMjpcbiAgICAgIHRpbWVvdXQgPSAyNTA7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDU6XG4gICAgICB0aW1lb3V0ID0gMTA3Mzc0MTgyMztcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgNDpcbiAgICAgIHRpbWVvdXQgPSAxZTQ7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgdGltZW91dCA9IDVlMztcbiAgfVxuICB0aW1lb3V0ID0gb3B0aW9ucyArIHRpbWVvdXQ7XG4gIHByaW9yaXR5TGV2ZWwgPSB7XG4gICAgaWQ6IHRhc2tJZENvdW50ZXIrKyxcbiAgICBjYWxsYmFjazogY2FsbGJhY2ssXG4gICAgcHJpb3JpdHlMZXZlbDogcHJpb3JpdHlMZXZlbCxcbiAgICBzdGFydFRpbWU6IG9wdGlvbnMsXG4gICAgZXhwaXJhdGlvblRpbWU6IHRpbWVvdXQsXG4gICAgc29ydEluZGV4OiAtMVxuICB9O1xuICBvcHRpb25zID4gY3VycmVudFRpbWVcbiAgICA/ICgocHJpb3JpdHlMZXZlbC5zb3J0SW5kZXggPSBvcHRpb25zKSxcbiAgICAgIHB1c2godGltZXJRdWV1ZSwgcHJpb3JpdHlMZXZlbCksXG4gICAgICBudWxsID09PSBwZWVrKHRhc2tRdWV1ZSkgJiZcbiAgICAgICAgcHJpb3JpdHlMZXZlbCA9PT0gcGVlayh0aW1lclF1ZXVlKSAmJlxuICAgICAgICAoaXNIb3N0VGltZW91dFNjaGVkdWxlZFxuICAgICAgICAgID8gKGxvY2FsQ2xlYXJUaW1lb3V0KHRhc2tUaW1lb3V0SUQpLCAodGFza1RpbWVvdXRJRCA9IC0xKSlcbiAgICAgICAgICA6IChpc0hvc3RUaW1lb3V0U2NoZWR1bGVkID0gITApLFxuICAgICAgICByZXF1ZXN0SG9zdFRpbWVvdXQoaGFuZGxlVGltZW91dCwgb3B0aW9ucyAtIGN1cnJlbnRUaW1lKSkpXG4gICAgOiAoKHByaW9yaXR5TGV2ZWwuc29ydEluZGV4ID0gdGltZW91dCksXG4gICAgICBwdXNoKHRhc2tRdWV1ZSwgcHJpb3JpdHlMZXZlbCksXG4gICAgICBpc0hvc3RDYWxsYmFja1NjaGVkdWxlZCB8fFxuICAgICAgICBpc1BlcmZvcm1pbmdXb3JrIHx8XG4gICAgICAgICgoaXNIb3N0Q2FsbGJhY2tTY2hlZHVsZWQgPSAhMCksIHJlcXVlc3RIb3N0Q2FsbGJhY2soKSkpO1xuICByZXR1cm4gcHJpb3JpdHlMZXZlbDtcbn07XG5leHBvcnRzLnVuc3RhYmxlX3Nob3VsZFlpZWxkID0gc2hvdWxkWWllbGRUb0hvc3Q7XG5leHBvcnRzLnVuc3RhYmxlX3dyYXBDYWxsYmFjayA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICB2YXIgcGFyZW50UHJpb3JpdHlMZXZlbCA9IGN1cnJlbnRQcmlvcml0eUxldmVsO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHZhciBwcmV2aW91c1ByaW9yaXR5TGV2ZWwgPSBjdXJyZW50UHJpb3JpdHlMZXZlbDtcbiAgICBjdXJyZW50UHJpb3JpdHlMZXZlbCA9IHBhcmVudFByaW9yaXR5TGV2ZWw7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBjYWxsYmFjay5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBjdXJyZW50UHJpb3JpdHlMZXZlbCA9IHByZXZpb3VzUHJpb3JpdHlMZXZlbDtcbiAgICB9XG4gIH07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3NjaGVkdWxlci5wcm9kdWN0aW9uLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3NjaGVkdWxlci5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBzdHlsZXNJbkRPTSA9IFtdO1xuZnVuY3Rpb24gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICB2YXIgcmVzdWx0ID0gLTE7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzSW5ET00ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoc3R5bGVzSW5ET01baV0uaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xuICAgICAgcmVzdWx0ID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpIHtcbiAgdmFyIGlkQ291bnRNYXAgPSB7fTtcbiAgdmFyIGlkZW50aWZpZXJzID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXTtcbiAgICB2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcbiAgICB2YXIgY291bnQgPSBpZENvdW50TWFwW2lkXSB8fCAwO1xuICAgIHZhciBpZGVudGlmaWVyID0gXCJcIi5jb25jYXQoaWQsIFwiIFwiKS5jb25jYXQoY291bnQpO1xuICAgIGlkQ291bnRNYXBbaWRdID0gY291bnQgKyAxO1xuICAgIHZhciBpbmRleEJ5SWRlbnRpZmllciA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgIHZhciBvYmogPSB7XG4gICAgICBjc3M6IGl0ZW1bMV0sXG4gICAgICBtZWRpYTogaXRlbVsyXSxcbiAgICAgIHNvdXJjZU1hcDogaXRlbVszXSxcbiAgICAgIHN1cHBvcnRzOiBpdGVtWzRdLFxuICAgICAgbGF5ZXI6IGl0ZW1bNV1cbiAgICB9O1xuICAgIGlmIChpbmRleEJ5SWRlbnRpZmllciAhPT0gLTEpIHtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS5yZWZlcmVuY2VzKys7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0udXBkYXRlcihvYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgdXBkYXRlciA9IGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpO1xuICAgICAgb3B0aW9ucy5ieUluZGV4ID0gaTtcbiAgICAgIHN0eWxlc0luRE9NLnNwbGljZShpLCAwLCB7XG4gICAgICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXIsXG4gICAgICAgIHVwZGF0ZXI6IHVwZGF0ZXIsXG4gICAgICAgIHJlZmVyZW5jZXM6IDFcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZGVudGlmaWVycy5wdXNoKGlkZW50aWZpZXIpO1xuICB9XG4gIHJldHVybiBpZGVudGlmaWVycztcbn1cbmZ1bmN0aW9uIGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpIHtcbiAgdmFyIGFwaSA9IG9wdGlvbnMuZG9tQVBJKG9wdGlvbnMpO1xuICBhcGkudXBkYXRlKG9iaik7XG4gIHZhciB1cGRhdGVyID0gZnVuY3Rpb24gdXBkYXRlcihuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwICYmIG5ld09iai5zdXBwb3J0cyA9PT0gb2JqLnN1cHBvcnRzICYmIG5ld09iai5sYXllciA9PT0gb2JqLmxheWVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGFwaS51cGRhdGUob2JqID0gbmV3T2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbW92ZSgpO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIHVwZGF0ZXI7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsaXN0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBsaXN0ID0gbGlzdCB8fCBbXTtcbiAgdmFyIGxhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XG4gICAgbmV3TGlzdCA9IG5ld0xpc3QgfHwgW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW2ldO1xuICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleF0ucmVmZXJlbmNlcy0tO1xuICAgIH1cbiAgICB2YXIgbmV3TGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKG5ld0xpc3QsIG9wdGlvbnMpO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2lkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbX2ldO1xuICAgICAgdmFyIF9pbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKF9pZGVudGlmaWVyKTtcbiAgICAgIGlmIChzdHlsZXNJbkRPTVtfaW5kZXhdLnJlZmVyZW5jZXMgPT09IDApIHtcbiAgICAgICAgc3R5bGVzSW5ET01bX2luZGV4XS51cGRhdGVyKCk7XG4gICAgICAgIHN0eWxlc0luRE9NLnNwbGljZShfaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cbiAgICBsYXN0SWRlbnRpZmllcnMgPSBuZXdMYXN0SWRlbnRpZmllcnM7XG4gIH07XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgbWVtbyA9IHt9O1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGdldFRhcmdldCh0YXJnZXQpIHtcbiAgaWYgKHR5cGVvZiBtZW1vW3RhcmdldF0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICB2YXIgc3R5bGVUYXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7XG5cbiAgICAvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuICAgIGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgIC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gICAgbWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG4gIH1cbiAgcmV0dXJuIG1lbW9bdGFyZ2V0XTtcbn1cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRCeVNlbGVjdG9yKGluc2VydCwgc3R5bGUpIHtcbiAgdmFyIHRhcmdldCA9IGdldFRhcmdldChpbnNlcnQpO1xuICBpZiAoIXRhcmdldCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0JyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG4gIH1cbiAgdGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0QnlTZWxlY3RvcjsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgb3B0aW9ucy5zZXRBdHRyaWJ1dGVzKGVsZW1lbnQsIG9wdGlvbnMuYXR0cmlidXRlcyk7XG4gIG9wdGlvbnMuaW5zZXJ0KGVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG4gIHJldHVybiBlbGVtZW50O1xufVxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzKHN0eWxlRWxlbWVudCkge1xuICB2YXIgbm9uY2UgPSB0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gIT09IFwidW5kZWZpbmVkXCIgPyBfX3dlYnBhY2tfbm9uY2VfXyA6IG51bGw7XG4gIGlmIChub25jZSkge1xuICAgIHN0eWxlRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJub25jZVwiLCBub25jZSk7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKSB7XG4gIHZhciBjc3MgPSBcIlwiO1xuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQob2JqLnN1cHBvcnRzLCBcIikge1wiKTtcbiAgfVxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwiQG1lZGlhIFwiLmNvbmNhdChvYmoubWVkaWEsIFwiIHtcIik7XG4gIH1cbiAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBvYmoubGF5ZXIgIT09IFwidW5kZWZpbmVkXCI7XG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJAbGF5ZXJcIi5jb25jYXQob2JqLmxheWVyLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQob2JqLmxheWVyKSA6IFwiXCIsIFwiIHtcIik7XG4gIH1cbiAgY3NzICs9IG9iai5jc3M7XG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuICBpZiAoc291cmNlTWFwICYmIHR5cGVvZiBidG9hICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgY3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIi5jb25jYXQoYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSwgXCIgKi9cIik7XG4gIH1cblxuICAvLyBGb3Igb2xkIElFXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cbiAgb3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbn1cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpIHtcbiAgLy8gaXN0YW5idWwgaWdub3JlIGlmXG4gIGlmIChzdHlsZUVsZW1lbnQucGFyZW50Tm9kZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBzdHlsZUVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQpO1xufVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGRvbUFQSShvcHRpb25zKSB7XG4gIGlmICh0eXBlb2YgZG9jdW1lbnQgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUoKSB7fSxcbiAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge31cbiAgICB9O1xuICB9XG4gIHZhciBzdHlsZUVsZW1lbnQgPSBvcHRpb25zLmluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgcmV0dXJuIHtcbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShvYmopIHtcbiAgICAgIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKTtcbiAgICB9LFxuICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCk7XG4gICAgfVxuICB9O1xufVxubW9kdWxlLmV4cG9ydHMgPSBkb21BUEk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQpIHtcbiAgaWYgKHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpIHtcbiAgICAgIHN0eWxlRWxlbWVudC5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCk7XG4gICAgfVxuICAgIHN0eWxlRWxlbWVudC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBzdHlsZVRhZ1RyYW5zZm9ybTsiLCIvKipcbiAqIEBsaWNlbnNlIFJlYWN0XG4gKiB1c2Utc3luYy1leHRlcm5hbC1zdG9yZS13aXRoLXNlbGVjdG9yLnByb2R1Y3Rpb24uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cblwidXNlIHN0cmljdFwiO1xudmFyIFJlYWN0ID0gcmVxdWlyZShcInJlYWN0XCIpO1xuZnVuY3Rpb24gaXMoeCwgeSkge1xuICByZXR1cm4gKHggPT09IHkgJiYgKDAgIT09IHggfHwgMSAvIHggPT09IDEgLyB5KSkgfHwgKHggIT09IHggJiYgeSAhPT0geSk7XG59XG52YXIgb2JqZWN0SXMgPSBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBPYmplY3QuaXMgPyBPYmplY3QuaXMgOiBpcyxcbiAgdXNlU3luY0V4dGVybmFsU3RvcmUgPSBSZWFjdC51c2VTeW5jRXh0ZXJuYWxTdG9yZSxcbiAgdXNlUmVmID0gUmVhY3QudXNlUmVmLFxuICB1c2VFZmZlY3QgPSBSZWFjdC51c2VFZmZlY3QsXG4gIHVzZU1lbW8gPSBSZWFjdC51c2VNZW1vLFxuICB1c2VEZWJ1Z1ZhbHVlID0gUmVhY3QudXNlRGVidWdWYWx1ZTtcbmV4cG9ydHMudXNlU3luY0V4dGVybmFsU3RvcmVXaXRoU2VsZWN0b3IgPSBmdW5jdGlvbiAoXG4gIHN1YnNjcmliZSxcbiAgZ2V0U25hcHNob3QsXG4gIGdldFNlcnZlclNuYXBzaG90LFxuICBzZWxlY3RvcixcbiAgaXNFcXVhbFxuKSB7XG4gIHZhciBpbnN0UmVmID0gdXNlUmVmKG51bGwpO1xuICBpZiAobnVsbCA9PT0gaW5zdFJlZi5jdXJyZW50KSB7XG4gICAgdmFyIGluc3QgPSB7IGhhc1ZhbHVlOiAhMSwgdmFsdWU6IG51bGwgfTtcbiAgICBpbnN0UmVmLmN1cnJlbnQgPSBpbnN0O1xuICB9IGVsc2UgaW5zdCA9IGluc3RSZWYuY3VycmVudDtcbiAgaW5zdFJlZiA9IHVzZU1lbW8oXG4gICAgZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gbWVtb2l6ZWRTZWxlY3RvcihuZXh0U25hcHNob3QpIHtcbiAgICAgICAgaWYgKCFoYXNNZW1vKSB7XG4gICAgICAgICAgaGFzTWVtbyA9ICEwO1xuICAgICAgICAgIG1lbW9pemVkU25hcHNob3QgPSBuZXh0U25hcHNob3Q7XG4gICAgICAgICAgbmV4dFNuYXBzaG90ID0gc2VsZWN0b3IobmV4dFNuYXBzaG90KTtcbiAgICAgICAgICBpZiAodm9pZCAwICE9PSBpc0VxdWFsICYmIGluc3QuaGFzVmFsdWUpIHtcbiAgICAgICAgICAgIHZhciBjdXJyZW50U2VsZWN0aW9uID0gaW5zdC52YWx1ZTtcbiAgICAgICAgICAgIGlmIChpc0VxdWFsKGN1cnJlbnRTZWxlY3Rpb24sIG5leHRTbmFwc2hvdCkpXG4gICAgICAgICAgICAgIHJldHVybiAobWVtb2l6ZWRTZWxlY3Rpb24gPSBjdXJyZW50U2VsZWN0aW9uKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIChtZW1vaXplZFNlbGVjdGlvbiA9IG5leHRTbmFwc2hvdCk7XG4gICAgICAgIH1cbiAgICAgICAgY3VycmVudFNlbGVjdGlvbiA9IG1lbW9pemVkU2VsZWN0aW9uO1xuICAgICAgICBpZiAob2JqZWN0SXMobWVtb2l6ZWRTbmFwc2hvdCwgbmV4dFNuYXBzaG90KSkgcmV0dXJuIGN1cnJlbnRTZWxlY3Rpb247XG4gICAgICAgIHZhciBuZXh0U2VsZWN0aW9uID0gc2VsZWN0b3IobmV4dFNuYXBzaG90KTtcbiAgICAgICAgaWYgKHZvaWQgMCAhPT0gaXNFcXVhbCAmJiBpc0VxdWFsKGN1cnJlbnRTZWxlY3Rpb24sIG5leHRTZWxlY3Rpb24pKVxuICAgICAgICAgIHJldHVybiAobWVtb2l6ZWRTbmFwc2hvdCA9IG5leHRTbmFwc2hvdCksIGN1cnJlbnRTZWxlY3Rpb247XG4gICAgICAgIG1lbW9pemVkU25hcHNob3QgPSBuZXh0U25hcHNob3Q7XG4gICAgICAgIHJldHVybiAobWVtb2l6ZWRTZWxlY3Rpb24gPSBuZXh0U2VsZWN0aW9uKTtcbiAgICAgIH1cbiAgICAgIHZhciBoYXNNZW1vID0gITEsXG4gICAgICAgIG1lbW9pemVkU25hcHNob3QsXG4gICAgICAgIG1lbW9pemVkU2VsZWN0aW9uLFxuICAgICAgICBtYXliZUdldFNlcnZlclNuYXBzaG90ID1cbiAgICAgICAgICB2b2lkIDAgPT09IGdldFNlcnZlclNuYXBzaG90ID8gbnVsbCA6IGdldFNlcnZlclNuYXBzaG90O1xuICAgICAgcmV0dXJuIFtcbiAgICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBtZW1vaXplZFNlbGVjdG9yKGdldFNuYXBzaG90KCkpO1xuICAgICAgICB9LFxuICAgICAgICBudWxsID09PSBtYXliZUdldFNlcnZlclNuYXBzaG90XG4gICAgICAgICAgPyB2b2lkIDBcbiAgICAgICAgICA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIG1lbW9pemVkU2VsZWN0b3IobWF5YmVHZXRTZXJ2ZXJTbmFwc2hvdCgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgIF07XG4gICAgfSxcbiAgICBbZ2V0U25hcHNob3QsIGdldFNlcnZlclNuYXBzaG90LCBzZWxlY3RvciwgaXNFcXVhbF1cbiAgKTtcbiAgdmFyIHZhbHVlID0gdXNlU3luY0V4dGVybmFsU3RvcmUoc3Vic2NyaWJlLCBpbnN0UmVmWzBdLCBpbnN0UmVmWzFdKTtcbiAgdXNlRWZmZWN0KFxuICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgIGluc3QuaGFzVmFsdWUgPSAhMDtcbiAgICAgIGluc3QudmFsdWUgPSB2YWx1ZTtcbiAgICB9LFxuICAgIFt2YWx1ZV1cbiAgKTtcbiAgdXNlRGVidWdWYWx1ZSh2YWx1ZSk7XG4gIHJldHVybiB2YWx1ZTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvdXNlLXN5bmMtZXh0ZXJuYWwtc3RvcmUtd2l0aC1zZWxlY3Rvci5wcm9kdWN0aW9uLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3VzZS1zeW5jLWV4dGVybmFsLXN0b3JlLXdpdGgtc2VsZWN0b3IuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0aWQ6IG1vZHVsZUlkLFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18uZyA9IChmdW5jdGlvbigpIHtcblx0aWYgKHR5cGVvZiBnbG9iYWxUaGlzID09PSAnb2JqZWN0JykgcmV0dXJuIGdsb2JhbFRoaXM7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIHRoaXMgfHwgbmV3IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHJldHVybiB3aW5kb3c7XG5cdH1cbn0pKCk7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIl9fd2VicGFja19yZXF1aXJlX18ubmMgPSB1bmRlZmluZWQ7IiwiLy8gc3JjL3V0aWxzL3JlYWN0LnRzXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIjtcblxuLy8gc3JjL3V0aWxzL3JlYWN0LWlzLnRzXG52YXIgSVNfUkVBQ1RfMTkgPSAvKiBAX19QVVJFX18gKi8gUmVhY3QudmVyc2lvbi5zdGFydHNXaXRoKFwiMTlcIik7XG52YXIgUkVBQ1RfRUxFTUVOVF9UWVBFID0gLyogQF9fUFVSRV9fICovIFN5bWJvbC5mb3IoXG4gIElTX1JFQUNUXzE5ID8gXCJyZWFjdC50cmFuc2l0aW9uYWwuZWxlbWVudFwiIDogXCJyZWFjdC5lbGVtZW50XCJcbik7XG52YXIgUkVBQ1RfUE9SVEFMX1RZUEUgPSAvKiBAX19QVVJFX18gKi8gU3ltYm9sLmZvcihcInJlYWN0LnBvcnRhbFwiKTtcbnZhciBSRUFDVF9GUkFHTUVOVF9UWVBFID0gLyogQF9fUFVSRV9fICovIFN5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTtcbnZhciBSRUFDVF9TVFJJQ1RfTU9ERV9UWVBFID0gLyogQF9fUFVSRV9fICovIFN5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTtcbnZhciBSRUFDVF9QUk9GSUxFUl9UWVBFID0gLyogQF9fUFVSRV9fICovIFN5bWJvbC5mb3IoXCJyZWFjdC5wcm9maWxlclwiKTtcbnZhciBSRUFDVF9DT05TVU1FUl9UWVBFID0gLyogQF9fUFVSRV9fICovIFN5bWJvbC5mb3IoXCJyZWFjdC5jb25zdW1lclwiKTtcbnZhciBSRUFDVF9DT05URVhUX1RZUEUgPSAvKiBAX19QVVJFX18gKi8gU3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIik7XG52YXIgUkVBQ1RfRk9SV0FSRF9SRUZfVFlQRSA9IC8qIEBfX1BVUkVfXyAqLyBTeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIik7XG52YXIgUkVBQ1RfU1VTUEVOU0VfVFlQRSA9IC8qIEBfX1BVUkVfXyAqLyBTeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIik7XG52YXIgUkVBQ1RfU1VTUEVOU0VfTElTVF9UWVBFID0gLyogQF9fUFVSRV9fICovIFN5bWJvbC5mb3IoXG4gIFwicmVhY3Quc3VzcGVuc2VfbGlzdFwiXG4pO1xudmFyIFJFQUNUX01FTU9fVFlQRSA9IC8qIEBfX1BVUkVfXyAqLyBTeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKTtcbnZhciBSRUFDVF9MQVpZX1RZUEUgPSAvKiBAX19QVVJFX18gKi8gU3ltYm9sLmZvcihcInJlYWN0LmxhenlcIik7XG52YXIgUkVBQ1RfT0ZGU0NSRUVOX1RZUEUgPSAvKiBAX19QVVJFX18gKi8gU3ltYm9sLmZvcihcInJlYWN0Lm9mZnNjcmVlblwiKTtcbnZhciBSRUFDVF9DTElFTlRfUkVGRVJFTkNFID0gLyogQF9fUFVSRV9fICovIFN5bWJvbC5mb3IoXG4gIFwicmVhY3QuY2xpZW50LnJlZmVyZW5jZVwiXG4pO1xudmFyIEZvcndhcmRSZWYgPSBSRUFDVF9GT1JXQVJEX1JFRl9UWVBFO1xudmFyIE1lbW8gPSBSRUFDVF9NRU1PX1RZUEU7XG5mdW5jdGlvbiBpc1ZhbGlkRWxlbWVudFR5cGUodHlwZSkge1xuICByZXR1cm4gdHlwZW9mIHR5cGUgPT09IFwic3RyaW5nXCIgfHwgdHlwZW9mIHR5cGUgPT09IFwiZnVuY3Rpb25cIiB8fCB0eXBlID09PSBSRUFDVF9GUkFHTUVOVF9UWVBFIHx8IHR5cGUgPT09IFJFQUNUX1BST0ZJTEVSX1RZUEUgfHwgdHlwZSA9PT0gUkVBQ1RfU1RSSUNUX01PREVfVFlQRSB8fCB0eXBlID09PSBSRUFDVF9TVVNQRU5TRV9UWVBFIHx8IHR5cGUgPT09IFJFQUNUX1NVU1BFTlNFX0xJU1RfVFlQRSB8fCB0eXBlID09PSBSRUFDVF9PRkZTQ1JFRU5fVFlQRSB8fCB0eXBlb2YgdHlwZSA9PT0gXCJvYmplY3RcIiAmJiB0eXBlICE9PSBudWxsICYmICh0eXBlLiQkdHlwZW9mID09PSBSRUFDVF9MQVpZX1RZUEUgfHwgdHlwZS4kJHR5cGVvZiA9PT0gUkVBQ1RfTUVNT19UWVBFIHx8IHR5cGUuJCR0eXBlb2YgPT09IFJFQUNUX0NPTlRFWFRfVFlQRSB8fCB0eXBlLiQkdHlwZW9mID09PSBSRUFDVF9DT05TVU1FUl9UWVBFIHx8IHR5cGUuJCR0eXBlb2YgPT09IFJFQUNUX0ZPUldBUkRfUkVGX1RZUEUgfHwgdHlwZS4kJHR5cGVvZiA9PT0gUkVBQ1RfQ0xJRU5UX1JFRkVSRU5DRSB8fCB0eXBlLmdldE1vZHVsZUlkICE9PSB2b2lkIDApID8gdHJ1ZSA6IGZhbHNlO1xufVxuZnVuY3Rpb24gdHlwZU9mKG9iamVjdCkge1xuICBpZiAodHlwZW9mIG9iamVjdCA9PT0gXCJvYmplY3RcIiAmJiBvYmplY3QgIT09IG51bGwpIHtcbiAgICBjb25zdCB7ICQkdHlwZW9mIH0gPSBvYmplY3Q7XG4gICAgc3dpdGNoICgkJHR5cGVvZikge1xuICAgICAgY2FzZSBSRUFDVF9FTEVNRU5UX1RZUEU6XG4gICAgICAgIHN3aXRjaCAob2JqZWN0ID0gb2JqZWN0LnR5cGUsIG9iamVjdCkge1xuICAgICAgICAgIGNhc2UgUkVBQ1RfRlJBR01FTlRfVFlQRTpcbiAgICAgICAgICBjYXNlIFJFQUNUX1BST0ZJTEVSX1RZUEU6XG4gICAgICAgICAgY2FzZSBSRUFDVF9TVFJJQ1RfTU9ERV9UWVBFOlxuICAgICAgICAgIGNhc2UgUkVBQ1RfU1VTUEVOU0VfVFlQRTpcbiAgICAgICAgICBjYXNlIFJFQUNUX1NVU1BFTlNFX0xJU1RfVFlQRTpcbiAgICAgICAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHN3aXRjaCAob2JqZWN0ID0gb2JqZWN0ICYmIG9iamVjdC4kJHR5cGVvZiwgb2JqZWN0KSB7XG4gICAgICAgICAgICAgIGNhc2UgUkVBQ1RfQ09OVEVYVF9UWVBFOlxuICAgICAgICAgICAgICBjYXNlIFJFQUNUX0ZPUldBUkRfUkVGX1RZUEU6XG4gICAgICAgICAgICAgIGNhc2UgUkVBQ1RfTEFaWV9UWVBFOlxuICAgICAgICAgICAgICBjYXNlIFJFQUNUX01FTU9fVFlQRTpcbiAgICAgICAgICAgICAgICByZXR1cm4gb2JqZWN0O1xuICAgICAgICAgICAgICBjYXNlIFJFQUNUX0NPTlNVTUVSX1RZUEU6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gJCR0eXBlb2Y7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIGNhc2UgUkVBQ1RfUE9SVEFMX1RZUEU6XG4gICAgICAgIHJldHVybiAkJHR5cGVvZjtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIGlzQ29udGV4dENvbnN1bWVyKG9iamVjdCkge1xuICByZXR1cm4gSVNfUkVBQ1RfMTkgPyB0eXBlT2Yob2JqZWN0KSA9PT0gUkVBQ1RfQ09OU1VNRVJfVFlQRSA6IHR5cGVPZihvYmplY3QpID09PSBSRUFDVF9DT05URVhUX1RZUEU7XG59XG5mdW5jdGlvbiBpc01lbW8ob2JqZWN0KSB7XG4gIHJldHVybiB0eXBlT2Yob2JqZWN0KSA9PT0gUkVBQ1RfTUVNT19UWVBFO1xufVxuXG4vLyBzcmMvdXRpbHMvd2FybmluZy50c1xuZnVuY3Rpb24gd2FybmluZyhtZXNzYWdlKSB7XG4gIGlmICh0eXBlb2YgY29uc29sZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiB0eXBlb2YgY29uc29sZS5lcnJvciA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgY29uc29sZS5lcnJvcihtZXNzYWdlKTtcbiAgfVxuICB0cnkge1xuICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgfSBjYXRjaCAoZSkge1xuICB9XG59XG5cbi8vIHNyYy9jb25uZWN0L3ZlcmlmeVN1YnNlbGVjdG9ycy50c1xuZnVuY3Rpb24gdmVyaWZ5KHNlbGVjdG9yLCBtZXRob2ROYW1lKSB7XG4gIGlmICghc2VsZWN0b3IpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYFVuZXhwZWN0ZWQgdmFsdWUgZm9yICR7bWV0aG9kTmFtZX0gaW4gY29ubmVjdC5gKTtcbiAgfSBlbHNlIGlmIChtZXRob2ROYW1lID09PSBcIm1hcFN0YXRlVG9Qcm9wc1wiIHx8IG1ldGhvZE5hbWUgPT09IFwibWFwRGlzcGF0Y2hUb1Byb3BzXCIpIHtcbiAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzZWxlY3RvciwgXCJkZXBlbmRzT25Pd25Qcm9wc1wiKSkge1xuICAgICAgd2FybmluZyhcbiAgICAgICAgYFRoZSBzZWxlY3RvciBmb3IgJHttZXRob2ROYW1lfSBvZiBjb25uZWN0IGRpZCBub3Qgc3BlY2lmeSBhIHZhbHVlIGZvciBkZXBlbmRzT25Pd25Qcm9wcy5gXG4gICAgICApO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gdmVyaWZ5U3Vic2VsZWN0b3JzKG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzKSB7XG4gIHZlcmlmeShtYXBTdGF0ZVRvUHJvcHMsIFwibWFwU3RhdGVUb1Byb3BzXCIpO1xuICB2ZXJpZnkobWFwRGlzcGF0Y2hUb1Byb3BzLCBcIm1hcERpc3BhdGNoVG9Qcm9wc1wiKTtcbiAgdmVyaWZ5KG1lcmdlUHJvcHMsIFwibWVyZ2VQcm9wc1wiKTtcbn1cblxuLy8gc3JjL2Nvbm5lY3Qvc2VsZWN0b3JGYWN0b3J5LnRzXG5mdW5jdGlvbiBwdXJlRmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeShtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWVyZ2VQcm9wcywgZGlzcGF0Y2gsIHtcbiAgYXJlU3RhdGVzRXF1YWwsXG4gIGFyZU93blByb3BzRXF1YWwsXG4gIGFyZVN0YXRlUHJvcHNFcXVhbFxufSkge1xuICBsZXQgaGFzUnVuQXRMZWFzdE9uY2UgPSBmYWxzZTtcbiAgbGV0IHN0YXRlO1xuICBsZXQgb3duUHJvcHM7XG4gIGxldCBzdGF0ZVByb3BzO1xuICBsZXQgZGlzcGF0Y2hQcm9wcztcbiAgbGV0IG1lcmdlZFByb3BzO1xuICBmdW5jdGlvbiBoYW5kbGVGaXJzdENhbGwoZmlyc3RTdGF0ZSwgZmlyc3RPd25Qcm9wcykge1xuICAgIHN0YXRlID0gZmlyc3RTdGF0ZTtcbiAgICBvd25Qcm9wcyA9IGZpcnN0T3duUHJvcHM7XG4gICAgc3RhdGVQcm9wcyA9IG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSwgb3duUHJvcHMpO1xuICAgIGRpc3BhdGNoUHJvcHMgPSBtYXBEaXNwYXRjaFRvUHJvcHMoZGlzcGF0Y2gsIG93blByb3BzKTtcbiAgICBtZXJnZWRQcm9wcyA9IG1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpO1xuICAgIGhhc1J1bkF0TGVhc3RPbmNlID0gdHJ1ZTtcbiAgICByZXR1cm4gbWVyZ2VkUHJvcHM7XG4gIH1cbiAgZnVuY3Rpb24gaGFuZGxlTmV3UHJvcHNBbmROZXdTdGF0ZSgpIHtcbiAgICBzdGF0ZVByb3BzID0gbWFwU3RhdGVUb1Byb3BzKHN0YXRlLCBvd25Qcm9wcyk7XG4gICAgaWYgKG1hcERpc3BhdGNoVG9Qcm9wcy5kZXBlbmRzT25Pd25Qcm9wcylcbiAgICAgIGRpc3BhdGNoUHJvcHMgPSBtYXBEaXNwYXRjaFRvUHJvcHMoZGlzcGF0Y2gsIG93blByb3BzKTtcbiAgICBtZXJnZWRQcm9wcyA9IG1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpO1xuICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgfVxuICBmdW5jdGlvbiBoYW5kbGVOZXdQcm9wcygpIHtcbiAgICBpZiAobWFwU3RhdGVUb1Byb3BzLmRlcGVuZHNPbk93blByb3BzKVxuICAgICAgc3RhdGVQcm9wcyA9IG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSwgb3duUHJvcHMpO1xuICAgIGlmIChtYXBEaXNwYXRjaFRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMpXG4gICAgICBkaXNwYXRjaFByb3BzID0gbWFwRGlzcGF0Y2hUb1Byb3BzKGRpc3BhdGNoLCBvd25Qcm9wcyk7XG4gICAgbWVyZ2VkUHJvcHMgPSBtZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKTtcbiAgICByZXR1cm4gbWVyZ2VkUHJvcHM7XG4gIH1cbiAgZnVuY3Rpb24gaGFuZGxlTmV3U3RhdGUoKSB7XG4gICAgY29uc3QgbmV4dFN0YXRlUHJvcHMgPSBtYXBTdGF0ZVRvUHJvcHMoc3RhdGUsIG93blByb3BzKTtcbiAgICBjb25zdCBzdGF0ZVByb3BzQ2hhbmdlZCA9ICFhcmVTdGF0ZVByb3BzRXF1YWwobmV4dFN0YXRlUHJvcHMsIHN0YXRlUHJvcHMpO1xuICAgIHN0YXRlUHJvcHMgPSBuZXh0U3RhdGVQcm9wcztcbiAgICBpZiAoc3RhdGVQcm9wc0NoYW5nZWQpXG4gICAgICBtZXJnZWRQcm9wcyA9IG1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpO1xuICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgfVxuICBmdW5jdGlvbiBoYW5kbGVTdWJzZXF1ZW50Q2FsbHMobmV4dFN0YXRlLCBuZXh0T3duUHJvcHMpIHtcbiAgICBjb25zdCBwcm9wc0NoYW5nZWQgPSAhYXJlT3duUHJvcHNFcXVhbChuZXh0T3duUHJvcHMsIG93blByb3BzKTtcbiAgICBjb25zdCBzdGF0ZUNoYW5nZWQgPSAhYXJlU3RhdGVzRXF1YWwoXG4gICAgICBuZXh0U3RhdGUsXG4gICAgICBzdGF0ZSxcbiAgICAgIG5leHRPd25Qcm9wcyxcbiAgICAgIG93blByb3BzXG4gICAgKTtcbiAgICBzdGF0ZSA9IG5leHRTdGF0ZTtcbiAgICBvd25Qcm9wcyA9IG5leHRPd25Qcm9wcztcbiAgICBpZiAocHJvcHNDaGFuZ2VkICYmIHN0YXRlQ2hhbmdlZCkgcmV0dXJuIGhhbmRsZU5ld1Byb3BzQW5kTmV3U3RhdGUoKTtcbiAgICBpZiAocHJvcHNDaGFuZ2VkKSByZXR1cm4gaGFuZGxlTmV3UHJvcHMoKTtcbiAgICBpZiAoc3RhdGVDaGFuZ2VkKSByZXR1cm4gaGFuZGxlTmV3U3RhdGUoKTtcbiAgICByZXR1cm4gbWVyZ2VkUHJvcHM7XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uIHB1cmVGaW5hbFByb3BzU2VsZWN0b3IobmV4dFN0YXRlLCBuZXh0T3duUHJvcHMpIHtcbiAgICByZXR1cm4gaGFzUnVuQXRMZWFzdE9uY2UgPyBoYW5kbGVTdWJzZXF1ZW50Q2FsbHMobmV4dFN0YXRlLCBuZXh0T3duUHJvcHMpIDogaGFuZGxlRmlyc3RDYWxsKG5leHRTdGF0ZSwgbmV4dE93blByb3BzKTtcbiAgfTtcbn1cbmZ1bmN0aW9uIGZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkoZGlzcGF0Y2gsIHtcbiAgaW5pdE1hcFN0YXRlVG9Qcm9wcyxcbiAgaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyxcbiAgaW5pdE1lcmdlUHJvcHMsXG4gIC4uLm9wdGlvbnNcbn0pIHtcbiAgY29uc3QgbWFwU3RhdGVUb1Byb3BzID0gaW5pdE1hcFN0YXRlVG9Qcm9wcyhkaXNwYXRjaCwgb3B0aW9ucyk7XG4gIGNvbnN0IG1hcERpc3BhdGNoVG9Qcm9wcyA9IGluaXRNYXBEaXNwYXRjaFRvUHJvcHMoZGlzcGF0Y2gsIG9wdGlvbnMpO1xuICBjb25zdCBtZXJnZVByb3BzID0gaW5pdE1lcmdlUHJvcHMoZGlzcGF0Y2gsIG9wdGlvbnMpO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgdmVyaWZ5U3Vic2VsZWN0b3JzKG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzKTtcbiAgfVxuICByZXR1cm4gcHVyZUZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMsIG1lcmdlUHJvcHMsIGRpc3BhdGNoLCBvcHRpb25zKTtcbn1cblxuLy8gc3JjL3V0aWxzL2JpbmRBY3Rpb25DcmVhdG9ycy50c1xuZnVuY3Rpb24gYmluZEFjdGlvbkNyZWF0b3JzKGFjdGlvbkNyZWF0b3JzLCBkaXNwYXRjaCkge1xuICBjb25zdCBib3VuZEFjdGlvbkNyZWF0b3JzID0ge307XG4gIGZvciAoY29uc3Qga2V5IGluIGFjdGlvbkNyZWF0b3JzKSB7XG4gICAgY29uc3QgYWN0aW9uQ3JlYXRvciA9IGFjdGlvbkNyZWF0b3JzW2tleV07XG4gICAgaWYgKHR5cGVvZiBhY3Rpb25DcmVhdG9yID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIGJvdW5kQWN0aW9uQ3JlYXRvcnNba2V5XSA9ICguLi5hcmdzKSA9PiBkaXNwYXRjaChhY3Rpb25DcmVhdG9yKC4uLmFyZ3MpKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGJvdW5kQWN0aW9uQ3JlYXRvcnM7XG59XG5cbi8vIHNyYy91dGlscy9pc1BsYWluT2JqZWN0LnRzXG5mdW5jdGlvbiBpc1BsYWluT2JqZWN0KG9iaikge1xuICBpZiAodHlwZW9mIG9iaiAhPT0gXCJvYmplY3RcIiB8fCBvYmogPT09IG51bGwpIHJldHVybiBmYWxzZTtcbiAgY29uc3QgcHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqKTtcbiAgaWYgKHByb3RvID09PSBudWxsKSByZXR1cm4gdHJ1ZTtcbiAgbGV0IGJhc2VQcm90byA9IHByb3RvO1xuICB3aGlsZSAoT2JqZWN0LmdldFByb3RvdHlwZU9mKGJhc2VQcm90bykgIT09IG51bGwpIHtcbiAgICBiYXNlUHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YoYmFzZVByb3RvKTtcbiAgfVxuICByZXR1cm4gcHJvdG8gPT09IGJhc2VQcm90bztcbn1cblxuLy8gc3JjL3V0aWxzL3ZlcmlmeVBsYWluT2JqZWN0LnRzXG5mdW5jdGlvbiB2ZXJpZnlQbGFpbk9iamVjdCh2YWx1ZSwgZGlzcGxheU5hbWUsIG1ldGhvZE5hbWUpIHtcbiAgaWYgKCFpc1BsYWluT2JqZWN0KHZhbHVlKSkge1xuICAgIHdhcm5pbmcoXG4gICAgICBgJHttZXRob2ROYW1lfSgpIGluICR7ZGlzcGxheU5hbWV9IG11c3QgcmV0dXJuIGEgcGxhaW4gb2JqZWN0LiBJbnN0ZWFkIHJlY2VpdmVkICR7dmFsdWV9LmBcbiAgICApO1xuICB9XG59XG5cbi8vIHNyYy9jb25uZWN0L3dyYXBNYXBUb1Byb3BzLnRzXG5mdW5jdGlvbiB3cmFwTWFwVG9Qcm9wc0NvbnN0YW50KGdldENvbnN0YW50KSB7XG4gIHJldHVybiBmdW5jdGlvbiBpbml0Q29uc3RhbnRTZWxlY3RvcihkaXNwYXRjaCkge1xuICAgIGNvbnN0IGNvbnN0YW50ID0gZ2V0Q29uc3RhbnQoZGlzcGF0Y2gpO1xuICAgIGZ1bmN0aW9uIGNvbnN0YW50U2VsZWN0b3IoKSB7XG4gICAgICByZXR1cm4gY29uc3RhbnQ7XG4gICAgfVxuICAgIGNvbnN0YW50U2VsZWN0b3IuZGVwZW5kc09uT3duUHJvcHMgPSBmYWxzZTtcbiAgICByZXR1cm4gY29uc3RhbnRTZWxlY3RvcjtcbiAgfTtcbn1cbmZ1bmN0aW9uIGdldERlcGVuZHNPbk93blByb3BzKG1hcFRvUHJvcHMpIHtcbiAgcmV0dXJuIG1hcFRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMgPyBCb29sZWFuKG1hcFRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMpIDogbWFwVG9Qcm9wcy5sZW5ndGggIT09IDE7XG59XG5mdW5jdGlvbiB3cmFwTWFwVG9Qcm9wc0Z1bmMobWFwVG9Qcm9wcywgbWV0aG9kTmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24gaW5pdFByb3h5U2VsZWN0b3IoZGlzcGF0Y2gsIHsgZGlzcGxheU5hbWUgfSkge1xuICAgIGNvbnN0IHByb3h5ID0gZnVuY3Rpb24gbWFwVG9Qcm9wc1Byb3h5KHN0YXRlT3JEaXNwYXRjaCwgb3duUHJvcHMpIHtcbiAgICAgIHJldHVybiBwcm94eS5kZXBlbmRzT25Pd25Qcm9wcyA/IHByb3h5Lm1hcFRvUHJvcHMoc3RhdGVPckRpc3BhdGNoLCBvd25Qcm9wcykgOiBwcm94eS5tYXBUb1Byb3BzKHN0YXRlT3JEaXNwYXRjaCwgdm9pZCAwKTtcbiAgICB9O1xuICAgIHByb3h5LmRlcGVuZHNPbk93blByb3BzID0gdHJ1ZTtcbiAgICBwcm94eS5tYXBUb1Byb3BzID0gZnVuY3Rpb24gZGV0ZWN0RmFjdG9yeUFuZFZlcmlmeShzdGF0ZU9yRGlzcGF0Y2gsIG93blByb3BzKSB7XG4gICAgICBwcm94eS5tYXBUb1Byb3BzID0gbWFwVG9Qcm9wcztcbiAgICAgIHByb3h5LmRlcGVuZHNPbk93blByb3BzID0gZ2V0RGVwZW5kc09uT3duUHJvcHMobWFwVG9Qcm9wcyk7XG4gICAgICBsZXQgcHJvcHMgPSBwcm94eShzdGF0ZU9yRGlzcGF0Y2gsIG93blByb3BzKTtcbiAgICAgIGlmICh0eXBlb2YgcHJvcHMgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICBwcm94eS5tYXBUb1Byb3BzID0gcHJvcHM7XG4gICAgICAgIHByb3h5LmRlcGVuZHNPbk93blByb3BzID0gZ2V0RGVwZW5kc09uT3duUHJvcHMocHJvcHMpO1xuICAgICAgICBwcm9wcyA9IHByb3h5KHN0YXRlT3JEaXNwYXRjaCwgb3duUHJvcHMpO1xuICAgICAgfVxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIilcbiAgICAgICAgdmVyaWZ5UGxhaW5PYmplY3QocHJvcHMsIGRpc3BsYXlOYW1lLCBtZXRob2ROYW1lKTtcbiAgICAgIHJldHVybiBwcm9wcztcbiAgICB9O1xuICAgIHJldHVybiBwcm94eTtcbiAgfTtcbn1cblxuLy8gc3JjL2Nvbm5lY3QvaW52YWxpZEFyZ0ZhY3RvcnkudHNcbmZ1bmN0aW9uIGNyZWF0ZUludmFsaWRBcmdGYWN0b3J5KGFyZywgbmFtZSkge1xuICByZXR1cm4gKGRpc3BhdGNoLCBvcHRpb25zKSA9PiB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgYEludmFsaWQgdmFsdWUgb2YgdHlwZSAke3R5cGVvZiBhcmd9IGZvciAke25hbWV9IGFyZ3VtZW50IHdoZW4gY29ubmVjdGluZyBjb21wb25lbnQgJHtvcHRpb25zLndyYXBwZWRDb21wb25lbnROYW1lfS5gXG4gICAgKTtcbiAgfTtcbn1cblxuLy8gc3JjL2Nvbm5lY3QvbWFwRGlzcGF0Y2hUb1Byb3BzLnRzXG5mdW5jdGlvbiBtYXBEaXNwYXRjaFRvUHJvcHNGYWN0b3J5KG1hcERpc3BhdGNoVG9Qcm9wcykge1xuICByZXR1cm4gbWFwRGlzcGF0Y2hUb1Byb3BzICYmIHR5cGVvZiBtYXBEaXNwYXRjaFRvUHJvcHMgPT09IFwib2JqZWN0XCIgPyB3cmFwTWFwVG9Qcm9wc0NvbnN0YW50KFxuICAgIChkaXNwYXRjaCkgPT4gKFxuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgYmluZEFjdGlvbkNyZWF0b3JzKG1hcERpc3BhdGNoVG9Qcm9wcywgZGlzcGF0Y2gpXG4gICAgKVxuICApIDogIW1hcERpc3BhdGNoVG9Qcm9wcyA/IHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQoKGRpc3BhdGNoKSA9PiAoe1xuICAgIGRpc3BhdGNoXG4gIH0pKSA6IHR5cGVvZiBtYXBEaXNwYXRjaFRvUHJvcHMgPT09IFwiZnVuY3Rpb25cIiA/IChcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgd3JhcE1hcFRvUHJvcHNGdW5jKG1hcERpc3BhdGNoVG9Qcm9wcywgXCJtYXBEaXNwYXRjaFRvUHJvcHNcIilcbiAgKSA6IGNyZWF0ZUludmFsaWRBcmdGYWN0b3J5KG1hcERpc3BhdGNoVG9Qcm9wcywgXCJtYXBEaXNwYXRjaFRvUHJvcHNcIik7XG59XG5cbi8vIHNyYy9jb25uZWN0L21hcFN0YXRlVG9Qcm9wcy50c1xuZnVuY3Rpb24gbWFwU3RhdGVUb1Byb3BzRmFjdG9yeShtYXBTdGF0ZVRvUHJvcHMpIHtcbiAgcmV0dXJuICFtYXBTdGF0ZVRvUHJvcHMgPyB3cmFwTWFwVG9Qcm9wc0NvbnN0YW50KCgpID0+ICh7fSkpIDogdHlwZW9mIG1hcFN0YXRlVG9Qcm9wcyA9PT0gXCJmdW5jdGlvblwiID8gKFxuICAgIC8vIEB0cy1pZ25vcmVcbiAgICB3cmFwTWFwVG9Qcm9wc0Z1bmMobWFwU3RhdGVUb1Byb3BzLCBcIm1hcFN0YXRlVG9Qcm9wc1wiKVxuICApIDogY3JlYXRlSW52YWxpZEFyZ0ZhY3RvcnkobWFwU3RhdGVUb1Byb3BzLCBcIm1hcFN0YXRlVG9Qcm9wc1wiKTtcbn1cblxuLy8gc3JjL2Nvbm5lY3QvbWVyZ2VQcm9wcy50c1xuZnVuY3Rpb24gZGVmYXVsdE1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpIHtcbiAgcmV0dXJuIHsgLi4ub3duUHJvcHMsIC4uLnN0YXRlUHJvcHMsIC4uLmRpc3BhdGNoUHJvcHMgfTtcbn1cbmZ1bmN0aW9uIHdyYXBNZXJnZVByb3BzRnVuYyhtZXJnZVByb3BzKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpbml0TWVyZ2VQcm9wc1Byb3h5KGRpc3BhdGNoLCB7IGRpc3BsYXlOYW1lLCBhcmVNZXJnZWRQcm9wc0VxdWFsIH0pIHtcbiAgICBsZXQgaGFzUnVuT25jZSA9IGZhbHNlO1xuICAgIGxldCBtZXJnZWRQcm9wcztcbiAgICByZXR1cm4gZnVuY3Rpb24gbWVyZ2VQcm9wc1Byb3h5KHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKSB7XG4gICAgICBjb25zdCBuZXh0TWVyZ2VkUHJvcHMgPSBtZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKTtcbiAgICAgIGlmIChoYXNSdW5PbmNlKSB7XG4gICAgICAgIGlmICghYXJlTWVyZ2VkUHJvcHNFcXVhbChuZXh0TWVyZ2VkUHJvcHMsIG1lcmdlZFByb3BzKSlcbiAgICAgICAgICBtZXJnZWRQcm9wcyA9IG5leHRNZXJnZWRQcm9wcztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGhhc1J1bk9uY2UgPSB0cnVlO1xuICAgICAgICBtZXJnZWRQcm9wcyA9IG5leHRNZXJnZWRQcm9wcztcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIilcbiAgICAgICAgICB2ZXJpZnlQbGFpbk9iamVjdChtZXJnZWRQcm9wcywgZGlzcGxheU5hbWUsIFwibWVyZ2VQcm9wc1wiKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgICB9O1xuICB9O1xufVxuZnVuY3Rpb24gbWVyZ2VQcm9wc0ZhY3RvcnkobWVyZ2VQcm9wcykge1xuICByZXR1cm4gIW1lcmdlUHJvcHMgPyAoKSA9PiBkZWZhdWx0TWVyZ2VQcm9wcyA6IHR5cGVvZiBtZXJnZVByb3BzID09PSBcImZ1bmN0aW9uXCIgPyB3cmFwTWVyZ2VQcm9wc0Z1bmMobWVyZ2VQcm9wcykgOiBjcmVhdGVJbnZhbGlkQXJnRmFjdG9yeShtZXJnZVByb3BzLCBcIm1lcmdlUHJvcHNcIik7XG59XG5cbi8vIHNyYy91dGlscy9iYXRjaC50c1xuZnVuY3Rpb24gZGVmYXVsdE5vb3BCYXRjaChjYWxsYmFjaykge1xuICBjYWxsYmFjaygpO1xufVxuXG4vLyBzcmMvdXRpbHMvU3Vic2NyaXB0aW9uLnRzXG5mdW5jdGlvbiBjcmVhdGVMaXN0ZW5lckNvbGxlY3Rpb24oKSB7XG4gIGxldCBmaXJzdCA9IG51bGw7XG4gIGxldCBsYXN0ID0gbnVsbDtcbiAgcmV0dXJuIHtcbiAgICBjbGVhcigpIHtcbiAgICAgIGZpcnN0ID0gbnVsbDtcbiAgICAgIGxhc3QgPSBudWxsO1xuICAgIH0sXG4gICAgbm90aWZ5KCkge1xuICAgICAgZGVmYXVsdE5vb3BCYXRjaCgoKSA9PiB7XG4gICAgICAgIGxldCBsaXN0ZW5lciA9IGZpcnN0O1xuICAgICAgICB3aGlsZSAobGlzdGVuZXIpIHtcbiAgICAgICAgICBsaXN0ZW5lci5jYWxsYmFjaygpO1xuICAgICAgICAgIGxpc3RlbmVyID0gbGlzdGVuZXIubmV4dDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSxcbiAgICBnZXQoKSB7XG4gICAgICBjb25zdCBsaXN0ZW5lcnMgPSBbXTtcbiAgICAgIGxldCBsaXN0ZW5lciA9IGZpcnN0O1xuICAgICAgd2hpbGUgKGxpc3RlbmVyKSB7XG4gICAgICAgIGxpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcbiAgICAgICAgbGlzdGVuZXIgPSBsaXN0ZW5lci5uZXh0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIGxpc3RlbmVycztcbiAgICB9LFxuICAgIHN1YnNjcmliZShjYWxsYmFjaykge1xuICAgICAgbGV0IGlzU3Vic2NyaWJlZCA9IHRydWU7XG4gICAgICBjb25zdCBsaXN0ZW5lciA9IGxhc3QgPSB7XG4gICAgICAgIGNhbGxiYWNrLFxuICAgICAgICBuZXh0OiBudWxsLFxuICAgICAgICBwcmV2OiBsYXN0XG4gICAgICB9O1xuICAgICAgaWYgKGxpc3RlbmVyLnByZXYpIHtcbiAgICAgICAgbGlzdGVuZXIucHJldi5uZXh0ID0gbGlzdGVuZXI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmaXJzdCA9IGxpc3RlbmVyO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIHVuc3Vic2NyaWJlKCkge1xuICAgICAgICBpZiAoIWlzU3Vic2NyaWJlZCB8fCBmaXJzdCA9PT0gbnVsbCkgcmV0dXJuO1xuICAgICAgICBpc1N1YnNjcmliZWQgPSBmYWxzZTtcbiAgICAgICAgaWYgKGxpc3RlbmVyLm5leHQpIHtcbiAgICAgICAgICBsaXN0ZW5lci5uZXh0LnByZXYgPSBsaXN0ZW5lci5wcmV2O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxhc3QgPSBsaXN0ZW5lci5wcmV2O1xuICAgICAgICB9XG4gICAgICAgIGlmIChsaXN0ZW5lci5wcmV2KSB7XG4gICAgICAgICAgbGlzdGVuZXIucHJldi5uZXh0ID0gbGlzdGVuZXIubmV4dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBmaXJzdCA9IGxpc3RlbmVyLm5leHQ7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuICB9O1xufVxudmFyIG51bGxMaXN0ZW5lcnMgPSB7XG4gIG5vdGlmeSgpIHtcbiAgfSxcbiAgZ2V0OiAoKSA9PiBbXVxufTtcbmZ1bmN0aW9uIGNyZWF0ZVN1YnNjcmlwdGlvbihzdG9yZSwgcGFyZW50U3ViKSB7XG4gIGxldCB1bnN1YnNjcmliZTtcbiAgbGV0IGxpc3RlbmVycyA9IG51bGxMaXN0ZW5lcnM7XG4gIGxldCBzdWJzY3JpcHRpb25zQW1vdW50ID0gMDtcbiAgbGV0IHNlbGZTdWJzY3JpYmVkID0gZmFsc2U7XG4gIGZ1bmN0aW9uIGFkZE5lc3RlZFN1YihsaXN0ZW5lcikge1xuICAgIHRyeVN1YnNjcmliZSgpO1xuICAgIGNvbnN0IGNsZWFudXBMaXN0ZW5lciA9IGxpc3RlbmVycy5zdWJzY3JpYmUobGlzdGVuZXIpO1xuICAgIGxldCByZW1vdmVkID0gZmFsc2U7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGlmICghcmVtb3ZlZCkge1xuICAgICAgICByZW1vdmVkID0gdHJ1ZTtcbiAgICAgICAgY2xlYW51cExpc3RlbmVyKCk7XG4gICAgICAgIHRyeVVuc3Vic2NyaWJlKCk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuICBmdW5jdGlvbiBub3RpZnlOZXN0ZWRTdWJzKCkge1xuICAgIGxpc3RlbmVycy5ub3RpZnkoKTtcbiAgfVxuICBmdW5jdGlvbiBoYW5kbGVDaGFuZ2VXcmFwcGVyKCkge1xuICAgIGlmIChzdWJzY3JpcHRpb24ub25TdGF0ZUNoYW5nZSkge1xuICAgICAgc3Vic2NyaXB0aW9uLm9uU3RhdGVDaGFuZ2UoKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gaXNTdWJzY3JpYmVkKCkge1xuICAgIHJldHVybiBzZWxmU3Vic2NyaWJlZDtcbiAgfVxuICBmdW5jdGlvbiB0cnlTdWJzY3JpYmUoKSB7XG4gICAgc3Vic2NyaXB0aW9uc0Ftb3VudCsrO1xuICAgIGlmICghdW5zdWJzY3JpYmUpIHtcbiAgICAgIHVuc3Vic2NyaWJlID0gcGFyZW50U3ViID8gcGFyZW50U3ViLmFkZE5lc3RlZFN1YihoYW5kbGVDaGFuZ2VXcmFwcGVyKSA6IHN0b3JlLnN1YnNjcmliZShoYW5kbGVDaGFuZ2VXcmFwcGVyKTtcbiAgICAgIGxpc3RlbmVycyA9IGNyZWF0ZUxpc3RlbmVyQ29sbGVjdGlvbigpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiB0cnlVbnN1YnNjcmliZSgpIHtcbiAgICBzdWJzY3JpcHRpb25zQW1vdW50LS07XG4gICAgaWYgKHVuc3Vic2NyaWJlICYmIHN1YnNjcmlwdGlvbnNBbW91bnQgPT09IDApIHtcbiAgICAgIHVuc3Vic2NyaWJlKCk7XG4gICAgICB1bnN1YnNjcmliZSA9IHZvaWQgMDtcbiAgICAgIGxpc3RlbmVycy5jbGVhcigpO1xuICAgICAgbGlzdGVuZXJzID0gbnVsbExpc3RlbmVycztcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gdHJ5U3Vic2NyaWJlU2VsZigpIHtcbiAgICBpZiAoIXNlbGZTdWJzY3JpYmVkKSB7XG4gICAgICBzZWxmU3Vic2NyaWJlZCA9IHRydWU7XG4gICAgICB0cnlTdWJzY3JpYmUoKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gdHJ5VW5zdWJzY3JpYmVTZWxmKCkge1xuICAgIGlmIChzZWxmU3Vic2NyaWJlZCkge1xuICAgICAgc2VsZlN1YnNjcmliZWQgPSBmYWxzZTtcbiAgICAgIHRyeVVuc3Vic2NyaWJlKCk7XG4gICAgfVxuICB9XG4gIGNvbnN0IHN1YnNjcmlwdGlvbiA9IHtcbiAgICBhZGROZXN0ZWRTdWIsXG4gICAgbm90aWZ5TmVzdGVkU3VicyxcbiAgICBoYW5kbGVDaGFuZ2VXcmFwcGVyLFxuICAgIGlzU3Vic2NyaWJlZCxcbiAgICB0cnlTdWJzY3JpYmU6IHRyeVN1YnNjcmliZVNlbGYsXG4gICAgdHJ5VW5zdWJzY3JpYmU6IHRyeVVuc3Vic2NyaWJlU2VsZixcbiAgICBnZXRMaXN0ZW5lcnM6ICgpID0+IGxpc3RlbmVyc1xuICB9O1xuICByZXR1cm4gc3Vic2NyaXB0aW9uO1xufVxuXG4vLyBzcmMvdXRpbHMvdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdC50c1xudmFyIGNhblVzZURPTSA9ICgpID0+ICEhKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgdHlwZW9mIHdpbmRvdy5kb2N1bWVudCAhPT0gXCJ1bmRlZmluZWRcIiAmJiB0eXBlb2Ygd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgIT09IFwidW5kZWZpbmVkXCIpO1xudmFyIGlzRE9NID0gLyogQF9fUFVSRV9fICovIGNhblVzZURPTSgpO1xudmFyIGlzUnVubmluZ0luUmVhY3ROYXRpdmUgPSAoKSA9PiB0eXBlb2YgbmF2aWdhdG9yICE9PSBcInVuZGVmaW5lZFwiICYmIG5hdmlnYXRvci5wcm9kdWN0ID09PSBcIlJlYWN0TmF0aXZlXCI7XG52YXIgaXNSZWFjdE5hdGl2ZSA9IC8qIEBfX1BVUkVfXyAqLyBpc1J1bm5pbmdJblJlYWN0TmF0aXZlKCk7XG52YXIgZ2V0VXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCA9ICgpID0+IGlzRE9NIHx8IGlzUmVhY3ROYXRpdmUgPyBSZWFjdC51c2VMYXlvdXRFZmZlY3QgOiBSZWFjdC51c2VFZmZlY3Q7XG52YXIgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCA9IC8qIEBfX1BVUkVfXyAqLyBnZXRVc2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KCk7XG5cbi8vIHNyYy91dGlscy9zaGFsbG93RXF1YWwudHNcbmZ1bmN0aW9uIGlzKHgsIHkpIHtcbiAgaWYgKHggPT09IHkpIHtcbiAgICByZXR1cm4geCAhPT0gMCB8fCB5ICE9PSAwIHx8IDEgLyB4ID09PSAxIC8geTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geCAhPT0geCAmJiB5ICE9PSB5O1xuICB9XG59XG5mdW5jdGlvbiBzaGFsbG93RXF1YWwob2JqQSwgb2JqQikge1xuICBpZiAoaXMob2JqQSwgb2JqQikpIHJldHVybiB0cnVlO1xuICBpZiAodHlwZW9mIG9iakEgIT09IFwib2JqZWN0XCIgfHwgb2JqQSA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqQiAhPT0gXCJvYmplY3RcIiB8fCBvYmpCID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGNvbnN0IGtleXNBID0gT2JqZWN0LmtleXMob2JqQSk7XG4gIGNvbnN0IGtleXNCID0gT2JqZWN0LmtleXMob2JqQik7XG4gIGlmIChrZXlzQS5sZW5ndGggIT09IGtleXNCLmxlbmd0aCkgcmV0dXJuIGZhbHNlO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGtleXNBLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqQiwga2V5c0FbaV0pIHx8ICFpcyhvYmpBW2tleXNBW2ldXSwgb2JqQltrZXlzQVtpXV0pKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlO1xufVxuXG4vLyBzcmMvdXRpbHMvaG9pc3RTdGF0aWNzLnRzXG52YXIgUkVBQ1RfU1RBVElDUyA9IHtcbiAgY2hpbGRDb250ZXh0VHlwZXM6IHRydWUsXG4gIGNvbnRleHRUeXBlOiB0cnVlLFxuICBjb250ZXh0VHlwZXM6IHRydWUsXG4gIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZGlzcGxheU5hbWU6IHRydWUsXG4gIGdldERlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yOiB0cnVlLFxuICBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM6IHRydWUsXG4gIG1peGluczogdHJ1ZSxcbiAgcHJvcFR5cGVzOiB0cnVlLFxuICB0eXBlOiB0cnVlXG59O1xudmFyIEtOT1dOX1NUQVRJQ1MgPSB7XG4gIG5hbWU6IHRydWUsXG4gIGxlbmd0aDogdHJ1ZSxcbiAgcHJvdG90eXBlOiB0cnVlLFxuICBjYWxsZXI6IHRydWUsXG4gIGNhbGxlZTogdHJ1ZSxcbiAgYXJndW1lbnRzOiB0cnVlLFxuICBhcml0eTogdHJ1ZVxufTtcbnZhciBGT1JXQVJEX1JFRl9TVEFUSUNTID0ge1xuICAkJHR5cGVvZjogdHJ1ZSxcbiAgcmVuZGVyOiB0cnVlLFxuICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gIGRpc3BsYXlOYW1lOiB0cnVlLFxuICBwcm9wVHlwZXM6IHRydWVcbn07XG52YXIgTUVNT19TVEFUSUNTID0ge1xuICAkJHR5cGVvZjogdHJ1ZSxcbiAgY29tcGFyZTogdHJ1ZSxcbiAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgcHJvcFR5cGVzOiB0cnVlLFxuICB0eXBlOiB0cnVlXG59O1xudmFyIFRZUEVfU1RBVElDUyA9IHtcbiAgW0ZvcndhcmRSZWZdOiBGT1JXQVJEX1JFRl9TVEFUSUNTLFxuICBbTWVtb106IE1FTU9fU1RBVElDU1xufTtcbmZ1bmN0aW9uIGdldFN0YXRpY3MoY29tcG9uZW50KSB7XG4gIGlmIChpc01lbW8oY29tcG9uZW50KSkge1xuICAgIHJldHVybiBNRU1PX1NUQVRJQ1M7XG4gIH1cbiAgcmV0dXJuIFRZUEVfU1RBVElDU1tjb21wb25lbnRbXCIkJHR5cGVvZlwiXV0gfHwgUkVBQ1RfU1RBVElDUztcbn1cbnZhciBkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIGdldFByb3RvdHlwZU9mID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xudmFyIG9iamVjdFByb3RvdHlwZSA9IE9iamVjdC5wcm90b3R5cGU7XG5mdW5jdGlvbiBob2lzdE5vblJlYWN0U3RhdGljcyh0YXJnZXRDb21wb25lbnQsIHNvdXJjZUNvbXBvbmVudCkge1xuICBpZiAodHlwZW9mIHNvdXJjZUNvbXBvbmVudCAhPT0gXCJzdHJpbmdcIikge1xuICAgIGlmIChvYmplY3RQcm90b3R5cGUpIHtcbiAgICAgIGNvbnN0IGluaGVyaXRlZENvbXBvbmVudCA9IGdldFByb3RvdHlwZU9mKHNvdXJjZUNvbXBvbmVudCk7XG4gICAgICBpZiAoaW5oZXJpdGVkQ29tcG9uZW50ICYmIGluaGVyaXRlZENvbXBvbmVudCAhPT0gb2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICAgIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKHRhcmdldENvbXBvbmVudCwgaW5oZXJpdGVkQ29tcG9uZW50KTtcbiAgICAgIH1cbiAgICB9XG4gICAgbGV0IGtleXMgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzKHNvdXJjZUNvbXBvbmVudCk7XG4gICAgaWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgICAga2V5cyA9IGtleXMuY29uY2F0KGdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2VDb21wb25lbnQpKTtcbiAgICB9XG4gICAgY29uc3QgdGFyZ2V0U3RhdGljcyA9IGdldFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50KTtcbiAgICBjb25zdCBzb3VyY2VTdGF0aWNzID0gZ2V0U3RhdGljcyhzb3VyY2VDb21wb25lbnQpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgY29uc3Qga2V5ID0ga2V5c1tpXTtcbiAgICAgIGlmICghS05PV05fU1RBVElDU1trZXldICYmICEoc291cmNlU3RhdGljcyAmJiBzb3VyY2VTdGF0aWNzW2tleV0pICYmICEodGFyZ2V0U3RhdGljcyAmJiB0YXJnZXRTdGF0aWNzW2tleV0pKSB7XG4gICAgICAgIGNvbnN0IGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlQ29tcG9uZW50LCBrZXkpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGRlZmluZVByb3BlcnR5KHRhcmdldENvbXBvbmVudCwga2V5LCBkZXNjcmlwdG9yKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiB0YXJnZXRDb21wb25lbnQ7XG59XG5cbi8vIHNyYy9jb21wb25lbnRzL0NvbnRleHQudHNcbnZhciBDb250ZXh0S2V5ID0gLyogQF9fUFVSRV9fICovIFN5bWJvbC5mb3IoYHJlYWN0LXJlZHV4LWNvbnRleHRgKTtcbnZhciBnVCA9IHR5cGVvZiBnbG9iYWxUaGlzICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsVGhpcyA6IChcbiAgLyogZmFsbCBiYWNrIHRvIGEgcGVyLW1vZHVsZSBzY29wZSAocHJlLTguMSBiZWhhdmlvdXIpIGlmIGBnbG9iYWxUaGlzYCBpcyBub3QgYXZhaWxhYmxlICovXG4gIHt9XG4pO1xuZnVuY3Rpb24gZ2V0Q29udGV4dCgpIHtcbiAgaWYgKCFSZWFjdC5jcmVhdGVDb250ZXh0KSByZXR1cm4ge307XG4gIGNvbnN0IGNvbnRleHRNYXAgPSBnVFtDb250ZXh0S2V5XSA/Pz0gLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKTtcbiAgbGV0IHJlYWxDb250ZXh0ID0gY29udGV4dE1hcC5nZXQoUmVhY3QuY3JlYXRlQ29udGV4dCk7XG4gIGlmICghcmVhbENvbnRleHQpIHtcbiAgICByZWFsQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQoXG4gICAgICBudWxsXG4gICAgKTtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICByZWFsQ29udGV4dC5kaXNwbGF5TmFtZSA9IFwiUmVhY3RSZWR1eFwiO1xuICAgIH1cbiAgICBjb250ZXh0TWFwLnNldChSZWFjdC5jcmVhdGVDb250ZXh0LCByZWFsQ29udGV4dCk7XG4gIH1cbiAgcmV0dXJuIHJlYWxDb250ZXh0O1xufVxudmFyIFJlYWN0UmVkdXhDb250ZXh0ID0gLyogQF9fUFVSRV9fICovIGdldENvbnRleHQoKTtcblxuLy8gc3JjL2NvbXBvbmVudHMvY29ubmVjdC50c3hcbnZhciBOT19TVUJTQ1JJUFRJT05fQVJSQVkgPSBbbnVsbCwgbnVsbF07XG52YXIgc3RyaW5naWZ5Q29tcG9uZW50ID0gKENvbXApID0+IHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoQ29tcCk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHJldHVybiBTdHJpbmcoQ29tcCk7XG4gIH1cbn07XG5mdW5jdGlvbiB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0V2l0aEFyZ3MoZWZmZWN0RnVuYywgZWZmZWN0QXJncywgZGVwZW5kZW5jaWVzKSB7XG4gIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoKCkgPT4gZWZmZWN0RnVuYyguLi5lZmZlY3RBcmdzKSwgZGVwZW5kZW5jaWVzKTtcbn1cbmZ1bmN0aW9uIGNhcHR1cmVXcmFwcGVyUHJvcHMobGFzdFdyYXBwZXJQcm9wcywgbGFzdENoaWxkUHJvcHMsIHJlbmRlcklzU2NoZWR1bGVkLCB3cmFwcGVyUHJvcHMsIGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUsIG5vdGlmeU5lc3RlZFN1YnMpIHtcbiAgbGFzdFdyYXBwZXJQcm9wcy5jdXJyZW50ID0gd3JhcHBlclByb3BzO1xuICByZW5kZXJJc1NjaGVkdWxlZC5jdXJyZW50ID0gZmFsc2U7XG4gIGlmIChjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlLmN1cnJlbnQpIHtcbiAgICBjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlLmN1cnJlbnQgPSBudWxsO1xuICAgIG5vdGlmeU5lc3RlZFN1YnMoKTtcbiAgfVxufVxuZnVuY3Rpb24gc3Vic2NyaWJlVXBkYXRlcyhzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMsIHN0b3JlLCBzdWJzY3JpcHRpb24sIGNoaWxkUHJvcHNTZWxlY3RvciwgbGFzdFdyYXBwZXJQcm9wcywgbGFzdENoaWxkUHJvcHMsIHJlbmRlcklzU2NoZWR1bGVkLCBpc01vdW50ZWQsIGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUsIG5vdGlmeU5lc3RlZFN1YnMsIGFkZGl0aW9uYWxTdWJzY3JpYmVMaXN0ZW5lcikge1xuICBpZiAoIXNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcykgcmV0dXJuICgpID0+IHtcbiAgfTtcbiAgbGV0IGRpZFVuc3Vic2NyaWJlID0gZmFsc2U7XG4gIGxldCBsYXN0VGhyb3duRXJyb3IgPSBudWxsO1xuICBjb25zdCBjaGVja0ZvclVwZGF0ZXMgPSAoKSA9PiB7XG4gICAgaWYgKGRpZFVuc3Vic2NyaWJlIHx8ICFpc01vdW50ZWQuY3VycmVudCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBsYXRlc3RTdG9yZVN0YXRlID0gc3RvcmUuZ2V0U3RhdGUoKTtcbiAgICBsZXQgbmV3Q2hpbGRQcm9wcywgZXJyb3I7XG4gICAgdHJ5IHtcbiAgICAgIG5ld0NoaWxkUHJvcHMgPSBjaGlsZFByb3BzU2VsZWN0b3IoXG4gICAgICAgIGxhdGVzdFN0b3JlU3RhdGUsXG4gICAgICAgIGxhc3RXcmFwcGVyUHJvcHMuY3VycmVudFxuICAgICAgKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBlcnJvciA9IGU7XG4gICAgICBsYXN0VGhyb3duRXJyb3IgPSBlO1xuICAgIH1cbiAgICBpZiAoIWVycm9yKSB7XG4gICAgICBsYXN0VGhyb3duRXJyb3IgPSBudWxsO1xuICAgIH1cbiAgICBpZiAobmV3Q2hpbGRQcm9wcyA9PT0gbGFzdENoaWxkUHJvcHMuY3VycmVudCkge1xuICAgICAgaWYgKCFyZW5kZXJJc1NjaGVkdWxlZC5jdXJyZW50KSB7XG4gICAgICAgIG5vdGlmeU5lc3RlZFN1YnMoKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbGFzdENoaWxkUHJvcHMuY3VycmVudCA9IG5ld0NoaWxkUHJvcHM7XG4gICAgICBjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlLmN1cnJlbnQgPSBuZXdDaGlsZFByb3BzO1xuICAgICAgcmVuZGVySXNTY2hlZHVsZWQuY3VycmVudCA9IHRydWU7XG4gICAgICBhZGRpdGlvbmFsU3Vic2NyaWJlTGlzdGVuZXIoKTtcbiAgICB9XG4gIH07XG4gIHN1YnNjcmlwdGlvbi5vblN0YXRlQ2hhbmdlID0gY2hlY2tGb3JVcGRhdGVzO1xuICBzdWJzY3JpcHRpb24udHJ5U3Vic2NyaWJlKCk7XG4gIGNoZWNrRm9yVXBkYXRlcygpO1xuICBjb25zdCB1bnN1YnNjcmliZVdyYXBwZXIgPSAoKSA9PiB7XG4gICAgZGlkVW5zdWJzY3JpYmUgPSB0cnVlO1xuICAgIHN1YnNjcmlwdGlvbi50cnlVbnN1YnNjcmliZSgpO1xuICAgIHN1YnNjcmlwdGlvbi5vblN0YXRlQ2hhbmdlID0gbnVsbDtcbiAgICBpZiAobGFzdFRocm93bkVycm9yKSB7XG4gICAgICB0aHJvdyBsYXN0VGhyb3duRXJyb3I7XG4gICAgfVxuICB9O1xuICByZXR1cm4gdW5zdWJzY3JpYmVXcmFwcGVyO1xufVxuZnVuY3Rpb24gc3RyaWN0RXF1YWwoYSwgYikge1xuICByZXR1cm4gYSA9PT0gYjtcbn1cbnZhciBoYXNXYXJuZWRBYm91dERlcHJlY2F0ZWRQdXJlT3B0aW9uID0gZmFsc2U7XG5mdW5jdGlvbiBjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzLCB7XG4gIC8vIFRoZSBgcHVyZWAgb3B0aW9uIGhhcyBiZWVuIHJlbW92ZWQsIHNvIFRTIGRvZXNuJ3QgbGlrZSB1cyBkZXN0cnVjdHVyaW5nIHRoaXMgdG8gY2hlY2sgaXRzIGV4aXN0ZW5jZS5cbiAgLy8gQHRzLWlnbm9yZVxuICBwdXJlLFxuICBhcmVTdGF0ZXNFcXVhbCA9IHN0cmljdEVxdWFsLFxuICBhcmVPd25Qcm9wc0VxdWFsID0gc2hhbGxvd0VxdWFsLFxuICBhcmVTdGF0ZVByb3BzRXF1YWwgPSBzaGFsbG93RXF1YWwsXG4gIGFyZU1lcmdlZFByb3BzRXF1YWwgPSBzaGFsbG93RXF1YWwsXG4gIC8vIHVzZSBSZWFjdCdzIGZvcndhcmRSZWYgdG8gZXhwb3NlIGEgcmVmIG9mIHRoZSB3cmFwcGVkIGNvbXBvbmVudFxuICBmb3J3YXJkUmVmID0gZmFsc2UsXG4gIC8vIHRoZSBjb250ZXh0IGNvbnN1bWVyIHRvIHVzZVxuICBjb250ZXh0ID0gUmVhY3RSZWR1eENvbnRleHRcbn0gPSB7fSkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgaWYgKHB1cmUgIT09IHZvaWQgMCAmJiAhaGFzV2FybmVkQWJvdXREZXByZWNhdGVkUHVyZU9wdGlvbikge1xuICAgICAgaGFzV2FybmVkQWJvdXREZXByZWNhdGVkUHVyZU9wdGlvbiA9IHRydWU7XG4gICAgICB3YXJuaW5nKFxuICAgICAgICAnVGhlIGBwdXJlYCBvcHRpb24gaGFzIGJlZW4gcmVtb3ZlZC4gYGNvbm5lY3RgIGlzIG5vdyBhbHdheXMgYSBcInB1cmUvbWVtb2l6ZWRcIiBjb21wb25lbnQnXG4gICAgICApO1xuICAgIH1cbiAgfVxuICBjb25zdCBDb250ZXh0ID0gY29udGV4dDtcbiAgY29uc3QgaW5pdE1hcFN0YXRlVG9Qcm9wcyA9IG1hcFN0YXRlVG9Qcm9wc0ZhY3RvcnkobWFwU3RhdGVUb1Byb3BzKTtcbiAgY29uc3QgaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyA9IG1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcnkobWFwRGlzcGF0Y2hUb1Byb3BzKTtcbiAgY29uc3QgaW5pdE1lcmdlUHJvcHMgPSBtZXJnZVByb3BzRmFjdG9yeShtZXJnZVByb3BzKTtcbiAgY29uc3Qgc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzID0gQm9vbGVhbihtYXBTdGF0ZVRvUHJvcHMpO1xuICBjb25zdCB3cmFwV2l0aENvbm5lY3QgPSAoV3JhcHBlZENvbXBvbmVudCkgPT4ge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgIGNvbnN0IGlzVmFsaWQgPSAvKiBAX19QVVJFX18gKi8gaXNWYWxpZEVsZW1lbnRUeXBlKFdyYXBwZWRDb21wb25lbnQpO1xuICAgICAgaWYgKCFpc1ZhbGlkKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgYFlvdSBtdXN0IHBhc3MgYSBjb21wb25lbnQgdG8gdGhlIGZ1bmN0aW9uIHJldHVybmVkIGJ5IGNvbm5lY3QuIEluc3RlYWQgcmVjZWl2ZWQgJHtzdHJpbmdpZnlDb21wb25lbnQoXG4gICAgICAgICAgICBXcmFwcGVkQ29tcG9uZW50XG4gICAgICAgICAgKX1gXG4gICAgICAgICk7XG4gICAgfVxuICAgIGNvbnN0IHdyYXBwZWRDb21wb25lbnROYW1lID0gV3JhcHBlZENvbXBvbmVudC5kaXNwbGF5TmFtZSB8fCBXcmFwcGVkQ29tcG9uZW50Lm5hbWUgfHwgXCJDb21wb25lbnRcIjtcbiAgICBjb25zdCBkaXNwbGF5TmFtZSA9IGBDb25uZWN0KCR7d3JhcHBlZENvbXBvbmVudE5hbWV9KWA7XG4gICAgY29uc3Qgc2VsZWN0b3JGYWN0b3J5T3B0aW9ucyA9IHtcbiAgICAgIHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcyxcbiAgICAgIGRpc3BsYXlOYW1lLFxuICAgICAgd3JhcHBlZENvbXBvbmVudE5hbWUsXG4gICAgICBXcmFwcGVkQ29tcG9uZW50LFxuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgaW5pdE1hcFN0YXRlVG9Qcm9wcyxcbiAgICAgIGluaXRNYXBEaXNwYXRjaFRvUHJvcHMsXG4gICAgICBpbml0TWVyZ2VQcm9wcyxcbiAgICAgIGFyZVN0YXRlc0VxdWFsLFxuICAgICAgYXJlU3RhdGVQcm9wc0VxdWFsLFxuICAgICAgYXJlT3duUHJvcHNFcXVhbCxcbiAgICAgIGFyZU1lcmdlZFByb3BzRXF1YWxcbiAgICB9O1xuICAgIGZ1bmN0aW9uIENvbm5lY3RGdW5jdGlvbihwcm9wcykge1xuICAgICAgY29uc3QgW3Byb3BzQ29udGV4dCwgcmVhY3RSZWR1eEZvcndhcmRlZFJlZiwgd3JhcHBlclByb3BzXSA9IFJlYWN0LnVzZU1lbW8oKCkgPT4ge1xuICAgICAgICBjb25zdCB7IHJlYWN0UmVkdXhGb3J3YXJkZWRSZWY6IHJlYWN0UmVkdXhGb3J3YXJkZWRSZWYyLCAuLi53cmFwcGVyUHJvcHMyIH0gPSBwcm9wcztcbiAgICAgICAgcmV0dXJuIFtwcm9wcy5jb250ZXh0LCByZWFjdFJlZHV4Rm9yd2FyZGVkUmVmMiwgd3JhcHBlclByb3BzMl07XG4gICAgICB9LCBbcHJvcHNdKTtcbiAgICAgIGNvbnN0IENvbnRleHRUb1VzZSA9IFJlYWN0LnVzZU1lbW8oKCkgPT4ge1xuICAgICAgICBsZXQgUmVzdWx0Q29udGV4dCA9IENvbnRleHQ7XG4gICAgICAgIGlmIChwcm9wc0NvbnRleHQ/LkNvbnN1bWVyKSB7XG4gICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICAgICAgY29uc3QgaXNWYWxpZCA9IC8qIEBfX1BVUkVfXyAqLyBpc0NvbnRleHRDb25zdW1lcihcbiAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgICAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChwcm9wc0NvbnRleHQuQ29uc3VtZXIsIG51bGwpXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgaWYgKCFpc1ZhbGlkKSB7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgICAgICBcIllvdSBtdXN0IHBhc3MgYSB2YWxpZCBSZWFjdCBjb250ZXh0IGNvbnN1bWVyIGFzIGBwcm9wcy5jb250ZXh0YFwiXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBSZXN1bHRDb250ZXh0ID0gcHJvcHNDb250ZXh0O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gUmVzdWx0Q29udGV4dDtcbiAgICAgIH0sIFtwcm9wc0NvbnRleHQsIENvbnRleHRdKTtcbiAgICAgIGNvbnN0IGNvbnRleHRWYWx1ZSA9IFJlYWN0LnVzZUNvbnRleHQoQ29udGV4dFRvVXNlKTtcbiAgICAgIGNvbnN0IGRpZFN0b3JlQ29tZUZyb21Qcm9wcyA9IEJvb2xlYW4ocHJvcHMuc3RvcmUpICYmIEJvb2xlYW4ocHJvcHMuc3RvcmUuZ2V0U3RhdGUpICYmIEJvb2xlYW4ocHJvcHMuc3RvcmUuZGlzcGF0Y2gpO1xuICAgICAgY29uc3QgZGlkU3RvcmVDb21lRnJvbUNvbnRleHQgPSBCb29sZWFuKGNvbnRleHRWYWx1ZSkgJiYgQm9vbGVhbihjb250ZXh0VmFsdWUuc3RvcmUpO1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiAmJiAhZGlkU3RvcmVDb21lRnJvbVByb3BzICYmICFkaWRTdG9yZUNvbWVGcm9tQ29udGV4dCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgYENvdWxkIG5vdCBmaW5kIFwic3RvcmVcIiBpbiB0aGUgY29udGV4dCBvZiBcIiR7ZGlzcGxheU5hbWV9XCIuIEVpdGhlciB3cmFwIHRoZSByb290IGNvbXBvbmVudCBpbiBhIDxQcm92aWRlcj4sIG9yIHBhc3MgYSBjdXN0b20gUmVhY3QgY29udGV4dCBwcm92aWRlciB0byA8UHJvdmlkZXI+IGFuZCB0aGUgY29ycmVzcG9uZGluZyBSZWFjdCBjb250ZXh0IGNvbnN1bWVyIHRvICR7ZGlzcGxheU5hbWV9IGluIGNvbm5lY3Qgb3B0aW9ucy5gXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBjb25zdCBzdG9yZSA9IGRpZFN0b3JlQ29tZUZyb21Qcm9wcyA/IHByb3BzLnN0b3JlIDogY29udGV4dFZhbHVlLnN0b3JlO1xuICAgICAgY29uc3QgZ2V0U2VydmVyU3RhdGUgPSBkaWRTdG9yZUNvbWVGcm9tQ29udGV4dCA/IGNvbnRleHRWYWx1ZS5nZXRTZXJ2ZXJTdGF0ZSA6IHN0b3JlLmdldFN0YXRlO1xuICAgICAgY29uc3QgY2hpbGRQcm9wc1NlbGVjdG9yID0gUmVhY3QudXNlTWVtbygoKSA9PiB7XG4gICAgICAgIHJldHVybiBmaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5KHN0b3JlLmRpc3BhdGNoLCBzZWxlY3RvckZhY3RvcnlPcHRpb25zKTtcbiAgICAgIH0sIFtzdG9yZV0pO1xuICAgICAgY29uc3QgW3N1YnNjcmlwdGlvbiwgbm90aWZ5TmVzdGVkU3Vic10gPSBSZWFjdC51c2VNZW1vKCgpID0+IHtcbiAgICAgICAgaWYgKCFzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMpIHJldHVybiBOT19TVUJTQ1JJUFRJT05fQVJSQVk7XG4gICAgICAgIGNvbnN0IHN1YnNjcmlwdGlvbjIgPSBjcmVhdGVTdWJzY3JpcHRpb24oXG4gICAgICAgICAgc3RvcmUsXG4gICAgICAgICAgZGlkU3RvcmVDb21lRnJvbVByb3BzID8gdm9pZCAwIDogY29udGV4dFZhbHVlLnN1YnNjcmlwdGlvblxuICAgICAgICApO1xuICAgICAgICBjb25zdCBub3RpZnlOZXN0ZWRTdWJzMiA9IHN1YnNjcmlwdGlvbjIubm90aWZ5TmVzdGVkU3Vicy5iaW5kKHN1YnNjcmlwdGlvbjIpO1xuICAgICAgICByZXR1cm4gW3N1YnNjcmlwdGlvbjIsIG5vdGlmeU5lc3RlZFN1YnMyXTtcbiAgICAgIH0sIFtzdG9yZSwgZGlkU3RvcmVDb21lRnJvbVByb3BzLCBjb250ZXh0VmFsdWVdKTtcbiAgICAgIGNvbnN0IG92ZXJyaWRkZW5Db250ZXh0VmFsdWUgPSBSZWFjdC51c2VNZW1vKCgpID0+IHtcbiAgICAgICAgaWYgKGRpZFN0b3JlQ29tZUZyb21Qcm9wcykge1xuICAgICAgICAgIHJldHVybiBjb250ZXh0VmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAuLi5jb250ZXh0VmFsdWUsXG4gICAgICAgICAgc3Vic2NyaXB0aW9uXG4gICAgICAgIH07XG4gICAgICB9LCBbZGlkU3RvcmVDb21lRnJvbVByb3BzLCBjb250ZXh0VmFsdWUsIHN1YnNjcmlwdGlvbl0pO1xuICAgICAgY29uc3QgbGFzdENoaWxkUHJvcHMgPSBSZWFjdC51c2VSZWYodm9pZCAwKTtcbiAgICAgIGNvbnN0IGxhc3RXcmFwcGVyUHJvcHMgPSBSZWFjdC51c2VSZWYod3JhcHBlclByb3BzKTtcbiAgICAgIGNvbnN0IGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUgPSBSZWFjdC51c2VSZWYodm9pZCAwKTtcbiAgICAgIGNvbnN0IHJlbmRlcklzU2NoZWR1bGVkID0gUmVhY3QudXNlUmVmKGZhbHNlKTtcbiAgICAgIGNvbnN0IGlzTW91bnRlZCA9IFJlYWN0LnVzZVJlZihmYWxzZSk7XG4gICAgICBjb25zdCBsYXRlc3RTdWJzY3JpcHRpb25DYWxsYmFja0Vycm9yID0gUmVhY3QudXNlUmVmKFxuICAgICAgICB2b2lkIDBcbiAgICAgICk7XG4gICAgICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KCgpID0+IHtcbiAgICAgICAgaXNNb3VudGVkLmN1cnJlbnQgPSB0cnVlO1xuICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgIGlzTW91bnRlZC5jdXJyZW50ID0gZmFsc2U7XG4gICAgICAgIH07XG4gICAgICB9LCBbXSk7XG4gICAgICBjb25zdCBhY3R1YWxDaGlsZFByb3BzU2VsZWN0b3IgPSBSZWFjdC51c2VNZW1vKCgpID0+IHtcbiAgICAgICAgY29uc3Qgc2VsZWN0b3IgPSAoKSA9PiB7XG4gICAgICAgICAgaWYgKGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUuY3VycmVudCAmJiB3cmFwcGVyUHJvcHMgPT09IGxhc3RXcmFwcGVyUHJvcHMuY3VycmVudCkge1xuICAgICAgICAgICAgcmV0dXJuIGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUuY3VycmVudDtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGNoaWxkUHJvcHNTZWxlY3RvcihzdG9yZS5nZXRTdGF0ZSgpLCB3cmFwcGVyUHJvcHMpO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gc2VsZWN0b3I7XG4gICAgICB9LCBbc3RvcmUsIHdyYXBwZXJQcm9wc10pO1xuICAgICAgY29uc3Qgc3Vic2NyaWJlRm9yUmVhY3QgPSBSZWFjdC51c2VNZW1vKCgpID0+IHtcbiAgICAgICAgY29uc3Qgc3Vic2NyaWJlID0gKHJlYWN0TGlzdGVuZXIpID0+IHtcbiAgICAgICAgICBpZiAoIXN1YnNjcmlwdGlvbikge1xuICAgICAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBzdWJzY3JpYmVVcGRhdGVzKFxuICAgICAgICAgICAgc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzLFxuICAgICAgICAgICAgc3RvcmUsXG4gICAgICAgICAgICBzdWJzY3JpcHRpb24sXG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICBjaGlsZFByb3BzU2VsZWN0b3IsXG4gICAgICAgICAgICBsYXN0V3JhcHBlclByb3BzLFxuICAgICAgICAgICAgbGFzdENoaWxkUHJvcHMsXG4gICAgICAgICAgICByZW5kZXJJc1NjaGVkdWxlZCxcbiAgICAgICAgICAgIGlzTW91bnRlZCxcbiAgICAgICAgICAgIGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUsXG4gICAgICAgICAgICBub3RpZnlOZXN0ZWRTdWJzLFxuICAgICAgICAgICAgcmVhY3RMaXN0ZW5lclxuICAgICAgICAgICk7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBzdWJzY3JpYmU7XG4gICAgICB9LCBbc3Vic2NyaXB0aW9uXSk7XG4gICAgICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0V2l0aEFyZ3MoY2FwdHVyZVdyYXBwZXJQcm9wcywgW1xuICAgICAgICBsYXN0V3JhcHBlclByb3BzLFxuICAgICAgICBsYXN0Q2hpbGRQcm9wcyxcbiAgICAgICAgcmVuZGVySXNTY2hlZHVsZWQsXG4gICAgICAgIHdyYXBwZXJQcm9wcyxcbiAgICAgICAgY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZSxcbiAgICAgICAgbm90aWZ5TmVzdGVkU3Vic1xuICAgICAgXSk7XG4gICAgICBsZXQgYWN0dWFsQ2hpbGRQcm9wcztcbiAgICAgIHRyeSB7XG4gICAgICAgIGFjdHVhbENoaWxkUHJvcHMgPSBSZWFjdC51c2VTeW5jRXh0ZXJuYWxTdG9yZShcbiAgICAgICAgICAvLyBUT0RPIFdlJ3JlIHBhc3NpbmcgdGhyb3VnaCBhIGJpZyB3cmFwcGVyIHRoYXQgZG9lcyBhIGJ1bmNoIG9mIGV4dHJhIHNpZGUgZWZmZWN0cyBiZXNpZGVzIHN1YnNjcmliaW5nXG4gICAgICAgICAgc3Vic2NyaWJlRm9yUmVhY3QsXG4gICAgICAgICAgLy8gVE9ETyBUaGlzIGlzIGluY3JlZGlibHkgaGFja3kuIFdlJ3ZlIGFscmVhZHkgcHJvY2Vzc2VkIHRoZSBzdG9yZSB1cGRhdGUgYW5kIGNhbGN1bGF0ZWQgbmV3IGNoaWxkIHByb3BzLFxuICAgICAgICAgIC8vIFRPRE8gYW5kIHdlJ3JlIGp1c3QgcGFzc2luZyB0aGF0IHRocm91Z2ggc28gaXQgdHJpZ2dlcnMgYSByZS1yZW5kZXIgZm9yIHVzIHJhdGhlciB0aGFuIHJlbHlpbmcgb24gYHVTRVNgLlxuICAgICAgICAgIGFjdHVhbENoaWxkUHJvcHNTZWxlY3RvcixcbiAgICAgICAgICBnZXRTZXJ2ZXJTdGF0ZSA/ICgpID0+IGNoaWxkUHJvcHNTZWxlY3RvcihnZXRTZXJ2ZXJTdGF0ZSgpLCB3cmFwcGVyUHJvcHMpIDogYWN0dWFsQ2hpbGRQcm9wc1NlbGVjdG9yXG4gICAgICAgICk7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgaWYgKGxhdGVzdFN1YnNjcmlwdGlvbkNhbGxiYWNrRXJyb3IuY3VycmVudCkge1xuICAgICAgICAgIDtcbiAgICAgICAgICBlcnIubWVzc2FnZSArPSBgXG5UaGUgZXJyb3IgbWF5IGJlIGNvcnJlbGF0ZWQgd2l0aCB0aGlzIHByZXZpb3VzIGVycm9yOlxuJHtsYXRlc3RTdWJzY3JpcHRpb25DYWxsYmFja0Vycm9yLmN1cnJlbnQuc3RhY2t9XG5cbmA7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgfVxuICAgICAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGxhdGVzdFN1YnNjcmlwdGlvbkNhbGxiYWNrRXJyb3IuY3VycmVudCA9IHZvaWQgMDtcbiAgICAgICAgY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZS5jdXJyZW50ID0gdm9pZCAwO1xuICAgICAgICBsYXN0Q2hpbGRQcm9wcy5jdXJyZW50ID0gYWN0dWFsQ2hpbGRQcm9wcztcbiAgICAgIH0pO1xuICAgICAgY29uc3QgcmVuZGVyZWRXcmFwcGVkQ29tcG9uZW50ID0gUmVhY3QudXNlTWVtbygoKSA9PiB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgV3JhcHBlZENvbXBvbmVudCxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgLi4uYWN0dWFsQ2hpbGRQcm9wcyxcbiAgICAgICAgICAgICAgcmVmOiByZWFjdFJlZHV4Rm9yd2FyZGVkUmVmXG4gICAgICAgICAgICB9XG4gICAgICAgICAgKVxuICAgICAgICApO1xuICAgICAgfSwgW3JlYWN0UmVkdXhGb3J3YXJkZWRSZWYsIFdyYXBwZWRDb21wb25lbnQsIGFjdHVhbENoaWxkUHJvcHNdKTtcbiAgICAgIGNvbnN0IHJlbmRlcmVkQ2hpbGQgPSBSZWFjdC51c2VNZW1vKCgpID0+IHtcbiAgICAgICAgaWYgKHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcykge1xuICAgICAgICAgIHJldHVybiAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChDb250ZXh0VG9Vc2UuUHJvdmlkZXIsIHsgdmFsdWU6IG92ZXJyaWRkZW5Db250ZXh0VmFsdWUgfSwgcmVuZGVyZWRXcmFwcGVkQ29tcG9uZW50KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVuZGVyZWRXcmFwcGVkQ29tcG9uZW50O1xuICAgICAgfSwgW0NvbnRleHRUb1VzZSwgcmVuZGVyZWRXcmFwcGVkQ29tcG9uZW50LCBvdmVycmlkZGVuQ29udGV4dFZhbHVlXSk7XG4gICAgICByZXR1cm4gcmVuZGVyZWRDaGlsZDtcbiAgICB9XG4gICAgY29uc3QgX0Nvbm5lY3QgPSBSZWFjdC5tZW1vKENvbm5lY3RGdW5jdGlvbik7XG4gICAgY29uc3QgQ29ubmVjdCA9IF9Db25uZWN0O1xuICAgIENvbm5lY3QuV3JhcHBlZENvbXBvbmVudCA9IFdyYXBwZWRDb21wb25lbnQ7XG4gICAgQ29ubmVjdC5kaXNwbGF5TmFtZSA9IENvbm5lY3RGdW5jdGlvbi5kaXNwbGF5TmFtZSA9IGRpc3BsYXlOYW1lO1xuICAgIGlmIChmb3J3YXJkUmVmKSB7XG4gICAgICBjb25zdCBfZm9yd2FyZGVkID0gUmVhY3QuZm9yd2FyZFJlZihcbiAgICAgICAgZnVuY3Rpb24gZm9yd2FyZENvbm5lY3RSZWYocHJvcHMsIHJlZikge1xuICAgICAgICAgIHJldHVybiAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChDb25uZWN0LCB7IC4uLnByb3BzLCByZWFjdFJlZHV4Rm9yd2FyZGVkUmVmOiByZWYgfSk7XG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgICBjb25zdCBmb3J3YXJkZWQgPSBfZm9yd2FyZGVkO1xuICAgICAgZm9yd2FyZGVkLmRpc3BsYXlOYW1lID0gZGlzcGxheU5hbWU7XG4gICAgICBmb3J3YXJkZWQuV3JhcHBlZENvbXBvbmVudCA9IFdyYXBwZWRDb21wb25lbnQ7XG4gICAgICByZXR1cm4gLyogQF9fUFVSRV9fICovIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKGZvcndhcmRlZCwgV3JhcHBlZENvbXBvbmVudCk7XG4gICAgfVxuICAgIHJldHVybiAvKiBAX19QVVJFX18gKi8gaG9pc3ROb25SZWFjdFN0YXRpY3MoQ29ubmVjdCwgV3JhcHBlZENvbXBvbmVudCk7XG4gIH07XG4gIHJldHVybiB3cmFwV2l0aENvbm5lY3Q7XG59XG52YXIgY29ubmVjdF9kZWZhdWx0ID0gY29ubmVjdDtcblxuLy8gc3JjL2NvbXBvbmVudHMvUHJvdmlkZXIudHN4XG5mdW5jdGlvbiBQcm92aWRlcihwcm92aWRlclByb3BzKSB7XG4gIGNvbnN0IHsgY2hpbGRyZW4sIGNvbnRleHQsIHNlcnZlclN0YXRlLCBzdG9yZSB9ID0gcHJvdmlkZXJQcm9wcztcbiAgY29uc3QgY29udGV4dFZhbHVlID0gUmVhY3QudXNlTWVtbygoKSA9PiB7XG4gICAgY29uc3Qgc3Vic2NyaXB0aW9uID0gY3JlYXRlU3Vic2NyaXB0aW9uKHN0b3JlKTtcbiAgICBjb25zdCBiYXNlQ29udGV4dFZhbHVlID0ge1xuICAgICAgc3RvcmUsXG4gICAgICBzdWJzY3JpcHRpb24sXG4gICAgICBnZXRTZXJ2ZXJTdGF0ZTogc2VydmVyU3RhdGUgPyAoKSA9PiBzZXJ2ZXJTdGF0ZSA6IHZvaWQgMFxuICAgIH07XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgcmV0dXJuIGJhc2VDb250ZXh0VmFsdWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHsgaWRlbnRpdHlGdW5jdGlvbkNoZWNrID0gXCJvbmNlXCIsIHN0YWJpbGl0eUNoZWNrID0gXCJvbmNlXCIgfSA9IHByb3ZpZGVyUHJvcHM7XG4gICAgICByZXR1cm4gLyogQF9fUFVSRV9fICovIE9iamVjdC5hc3NpZ24oYmFzZUNvbnRleHRWYWx1ZSwge1xuICAgICAgICBzdGFiaWxpdHlDaGVjayxcbiAgICAgICAgaWRlbnRpdHlGdW5jdGlvbkNoZWNrXG4gICAgICB9KTtcbiAgICB9XG4gIH0sIFtzdG9yZSwgc2VydmVyU3RhdGVdKTtcbiAgY29uc3QgcHJldmlvdXNTdGF0ZSA9IFJlYWN0LnVzZU1lbW8oKCkgPT4gc3RvcmUuZ2V0U3RhdGUoKSwgW3N0b3JlXSk7XG4gIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoKCkgPT4ge1xuICAgIGNvbnN0IHsgc3Vic2NyaXB0aW9uIH0gPSBjb250ZXh0VmFsdWU7XG4gICAgc3Vic2NyaXB0aW9uLm9uU3RhdGVDaGFuZ2UgPSBzdWJzY3JpcHRpb24ubm90aWZ5TmVzdGVkU3VicztcbiAgICBzdWJzY3JpcHRpb24udHJ5U3Vic2NyaWJlKCk7XG4gICAgaWYgKHByZXZpb3VzU3RhdGUgIT09IHN0b3JlLmdldFN0YXRlKCkpIHtcbiAgICAgIHN1YnNjcmlwdGlvbi5ub3RpZnlOZXN0ZWRTdWJzKCk7XG4gICAgfVxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBzdWJzY3JpcHRpb24udHJ5VW5zdWJzY3JpYmUoKTtcbiAgICAgIHN1YnNjcmlwdGlvbi5vblN0YXRlQ2hhbmdlID0gdm9pZCAwO1xuICAgIH07XG4gIH0sIFtjb250ZXh0VmFsdWUsIHByZXZpb3VzU3RhdGVdKTtcbiAgY29uc3QgQ29udGV4dCA9IGNvbnRleHQgfHwgUmVhY3RSZWR1eENvbnRleHQ7XG4gIHJldHVybiAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChDb250ZXh0LlByb3ZpZGVyLCB7IHZhbHVlOiBjb250ZXh0VmFsdWUgfSwgY2hpbGRyZW4pO1xufVxudmFyIFByb3ZpZGVyX2RlZmF1bHQgPSBQcm92aWRlcjtcblxuLy8gc3JjL2hvb2tzL3VzZVJlZHV4Q29udGV4dC50c1xuZnVuY3Rpb24gY3JlYXRlUmVkdXhDb250ZXh0SG9vayhjb250ZXh0ID0gUmVhY3RSZWR1eENvbnRleHQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVzZVJlZHV4Q29udGV4dDIoKSB7XG4gICAgY29uc3QgY29udGV4dFZhbHVlID0gUmVhY3QudXNlQ29udGV4dChjb250ZXh0KTtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmICFjb250ZXh0VmFsdWUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgXCJjb3VsZCBub3QgZmluZCByZWFjdC1yZWR1eCBjb250ZXh0IHZhbHVlOyBwbGVhc2UgZW5zdXJlIHRoZSBjb21wb25lbnQgaXMgd3JhcHBlZCBpbiBhIDxQcm92aWRlcj5cIlxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRleHRWYWx1ZTtcbiAgfTtcbn1cbnZhciB1c2VSZWR1eENvbnRleHQgPSAvKiBAX19QVVJFX18gKi8gY3JlYXRlUmVkdXhDb250ZXh0SG9vaygpO1xuXG4vLyBzcmMvaG9va3MvdXNlU3RvcmUudHNcbmZ1bmN0aW9uIGNyZWF0ZVN0b3JlSG9vayhjb250ZXh0ID0gUmVhY3RSZWR1eENvbnRleHQpIHtcbiAgY29uc3QgdXNlUmVkdXhDb250ZXh0MiA9IGNvbnRleHQgPT09IFJlYWN0UmVkdXhDb250ZXh0ID8gdXNlUmVkdXhDb250ZXh0IDogKFxuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBjcmVhdGVSZWR1eENvbnRleHRIb29rKGNvbnRleHQpXG4gICk7XG4gIGNvbnN0IHVzZVN0b3JlMiA9ICgpID0+IHtcbiAgICBjb25zdCB7IHN0b3JlIH0gPSB1c2VSZWR1eENvbnRleHQyKCk7XG4gICAgcmV0dXJuIHN0b3JlO1xuICB9O1xuICBPYmplY3QuYXNzaWduKHVzZVN0b3JlMiwge1xuICAgIHdpdGhUeXBlczogKCkgPT4gdXNlU3RvcmUyXG4gIH0pO1xuICByZXR1cm4gdXNlU3RvcmUyO1xufVxudmFyIHVzZVN0b3JlID0gLyogQF9fUFVSRV9fICovIGNyZWF0ZVN0b3JlSG9vaygpO1xuXG4vLyBzcmMvaG9va3MvdXNlRGlzcGF0Y2gudHNcbmZ1bmN0aW9uIGNyZWF0ZURpc3BhdGNoSG9vayhjb250ZXh0ID0gUmVhY3RSZWR1eENvbnRleHQpIHtcbiAgY29uc3QgdXNlU3RvcmUyID0gY29udGV4dCA9PT0gUmVhY3RSZWR1eENvbnRleHQgPyB1c2VTdG9yZSA6IGNyZWF0ZVN0b3JlSG9vayhjb250ZXh0KTtcbiAgY29uc3QgdXNlRGlzcGF0Y2gyID0gKCkgPT4ge1xuICAgIGNvbnN0IHN0b3JlID0gdXNlU3RvcmUyKCk7XG4gICAgcmV0dXJuIHN0b3JlLmRpc3BhdGNoO1xuICB9O1xuICBPYmplY3QuYXNzaWduKHVzZURpc3BhdGNoMiwge1xuICAgIHdpdGhUeXBlczogKCkgPT4gdXNlRGlzcGF0Y2gyXG4gIH0pO1xuICByZXR1cm4gdXNlRGlzcGF0Y2gyO1xufVxudmFyIHVzZURpc3BhdGNoID0gLyogQF9fUFVSRV9fICovIGNyZWF0ZURpc3BhdGNoSG9vaygpO1xuXG4vLyBzcmMvaG9va3MvdXNlU2VsZWN0b3IudHNcbmltcG9ydCB7IHVzZVN5bmNFeHRlcm5hbFN0b3JlV2l0aFNlbGVjdG9yIH0gZnJvbSBcInVzZS1zeW5jLWV4dGVybmFsLXN0b3JlL3dpdGgtc2VsZWN0b3IuanNcIjtcbnZhciByZWZFcXVhbGl0eSA9IChhLCBiKSA9PiBhID09PSBiO1xuZnVuY3Rpb24gY3JlYXRlU2VsZWN0b3JIb29rKGNvbnRleHQgPSBSZWFjdFJlZHV4Q29udGV4dCkge1xuICBjb25zdCB1c2VSZWR1eENvbnRleHQyID0gY29udGV4dCA9PT0gUmVhY3RSZWR1eENvbnRleHQgPyB1c2VSZWR1eENvbnRleHQgOiBjcmVhdGVSZWR1eENvbnRleHRIb29rKGNvbnRleHQpO1xuICBjb25zdCB1c2VTZWxlY3RvcjIgPSAoc2VsZWN0b3IsIGVxdWFsaXR5Rm5Pck9wdGlvbnMgPSB7fSkgPT4ge1xuICAgIGNvbnN0IHsgZXF1YWxpdHlGbiA9IHJlZkVxdWFsaXR5IH0gPSB0eXBlb2YgZXF1YWxpdHlGbk9yT3B0aW9ucyA9PT0gXCJmdW5jdGlvblwiID8geyBlcXVhbGl0eUZuOiBlcXVhbGl0eUZuT3JPcHRpb25zIH0gOiBlcXVhbGl0eUZuT3JPcHRpb25zO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgIGlmICghc2VsZWN0b3IpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBZb3UgbXVzdCBwYXNzIGEgc2VsZWN0b3IgdG8gdXNlU2VsZWN0b3JgKTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2Ygc2VsZWN0b3IgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFlvdSBtdXN0IHBhc3MgYSBmdW5jdGlvbiBhcyBhIHNlbGVjdG9yIHRvIHVzZVNlbGVjdG9yYCk7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIGVxdWFsaXR5Rm4gIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgYFlvdSBtdXN0IHBhc3MgYSBmdW5jdGlvbiBhcyBhbiBlcXVhbGl0eSBmdW5jdGlvbiB0byB1c2VTZWxlY3RvcmBcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgcmVkdXhDb250ZXh0ID0gdXNlUmVkdXhDb250ZXh0MigpO1xuICAgIGNvbnN0IHsgc3RvcmUsIHN1YnNjcmlwdGlvbiwgZ2V0U2VydmVyU3RhdGUgfSA9IHJlZHV4Q29udGV4dDtcbiAgICBjb25zdCBmaXJzdFJ1biA9IFJlYWN0LnVzZVJlZih0cnVlKTtcbiAgICBjb25zdCB3cmFwcGVkU2VsZWN0b3IgPSBSZWFjdC51c2VDYWxsYmFjayhcbiAgICAgIHtcbiAgICAgICAgW3NlbGVjdG9yLm5hbWVdKHN0YXRlKSB7XG4gICAgICAgICAgY29uc3Qgc2VsZWN0ZWQgPSBzZWxlY3RvcihzdGF0ZSk7XG4gICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICAgICAgY29uc3QgeyBkZXZNb2RlQ2hlY2tzID0ge30gfSA9IHR5cGVvZiBlcXVhbGl0eUZuT3JPcHRpb25zID09PSBcImZ1bmN0aW9uXCIgPyB7fSA6IGVxdWFsaXR5Rm5Pck9wdGlvbnM7XG4gICAgICAgICAgICBjb25zdCB7IGlkZW50aXR5RnVuY3Rpb25DaGVjaywgc3RhYmlsaXR5Q2hlY2sgfSA9IHJlZHV4Q29udGV4dDtcbiAgICAgICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgICAgaWRlbnRpdHlGdW5jdGlvbkNoZWNrOiBmaW5hbElkZW50aXR5RnVuY3Rpb25DaGVjayxcbiAgICAgICAgICAgICAgc3RhYmlsaXR5Q2hlY2s6IGZpbmFsU3RhYmlsaXR5Q2hlY2tcbiAgICAgICAgICAgIH0gPSB7XG4gICAgICAgICAgICAgIHN0YWJpbGl0eUNoZWNrLFxuICAgICAgICAgICAgICBpZGVudGl0eUZ1bmN0aW9uQ2hlY2ssXG4gICAgICAgICAgICAgIC4uLmRldk1vZGVDaGVja3NcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAoZmluYWxTdGFiaWxpdHlDaGVjayA9PT0gXCJhbHdheXNcIiB8fCBmaW5hbFN0YWJpbGl0eUNoZWNrID09PSBcIm9uY2VcIiAmJiBmaXJzdFJ1bi5jdXJyZW50KSB7XG4gICAgICAgICAgICAgIGNvbnN0IHRvQ29tcGFyZSA9IHNlbGVjdG9yKHN0YXRlKTtcbiAgICAgICAgICAgICAgaWYgKCFlcXVhbGl0eUZuKHNlbGVjdGVkLCB0b0NvbXBhcmUpKSB7XG4gICAgICAgICAgICAgICAgbGV0IHN0YWNrID0gdm9pZCAwO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoKTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICA7XG4gICAgICAgICAgICAgICAgICAoeyBzdGFjayB9ID0gZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICAgICAgICAgIFwiU2VsZWN0b3IgXCIgKyAoc2VsZWN0b3IubmFtZSB8fCBcInVua25vd25cIikgKyBcIiByZXR1cm5lZCBhIGRpZmZlcmVudCByZXN1bHQgd2hlbiBjYWxsZWQgd2l0aCB0aGUgc2FtZSBwYXJhbWV0ZXJzLiBUaGlzIGNhbiBsZWFkIHRvIHVubmVjZXNzYXJ5IHJlcmVuZGVycy5cXG5TZWxlY3RvcnMgdGhhdCByZXR1cm4gYSBuZXcgcmVmZXJlbmNlIChzdWNoIGFzIGFuIG9iamVjdCBvciBhbiBhcnJheSkgc2hvdWxkIGJlIG1lbW9pemVkOiBodHRwczovL3JlZHV4LmpzLm9yZy91c2FnZS9kZXJpdmluZy1kYXRhLXNlbGVjdG9ycyNvcHRpbWl6aW5nLXNlbGVjdG9ycy13aXRoLW1lbW9pemF0aW9uXCIsXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXRlLFxuICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZCxcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWQyOiB0b0NvbXBhcmUsXG4gICAgICAgICAgICAgICAgICAgIHN0YWNrXG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGZpbmFsSWRlbnRpdHlGdW5jdGlvbkNoZWNrID09PSBcImFsd2F5c1wiIHx8IGZpbmFsSWRlbnRpdHlGdW5jdGlvbkNoZWNrID09PSBcIm9uY2VcIiAmJiBmaXJzdFJ1bi5jdXJyZW50KSB7XG4gICAgICAgICAgICAgIGlmIChzZWxlY3RlZCA9PT0gc3RhdGUpIHtcbiAgICAgICAgICAgICAgICBsZXQgc3RhY2sgPSB2b2lkIDA7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigpO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgIDtcbiAgICAgICAgICAgICAgICAgICh7IHN0YWNrIH0gPSBlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAgICAgICAgICAgXCJTZWxlY3RvciBcIiArIChzZWxlY3Rvci5uYW1lIHx8IFwidW5rbm93blwiKSArIFwiIHJldHVybmVkIHRoZSByb290IHN0YXRlIHdoZW4gY2FsbGVkLiBUaGlzIGNhbiBsZWFkIHRvIHVubmVjZXNzYXJ5IHJlcmVuZGVycy5cXG5TZWxlY3RvcnMgdGhhdCByZXR1cm4gdGhlIGVudGlyZSBzdGF0ZSBhcmUgYWxtb3N0IGNlcnRhaW5seSBhIG1pc3Rha2UsIGFzIHRoZXkgd2lsbCBjYXVzZSBhIHJlcmVuZGVyIHdoZW5ldmVyICphbnl0aGluZyogaW4gc3RhdGUgY2hhbmdlcy5cIixcbiAgICAgICAgICAgICAgICAgIHsgc3RhY2sgfVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChmaXJzdFJ1bi5jdXJyZW50KSBmaXJzdFJ1bi5jdXJyZW50ID0gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBzZWxlY3RlZDtcbiAgICAgICAgfVxuICAgICAgfVtzZWxlY3Rvci5uYW1lXSxcbiAgICAgIFtzZWxlY3Rvcl1cbiAgICApO1xuICAgIGNvbnN0IHNlbGVjdGVkU3RhdGUgPSB1c2VTeW5jRXh0ZXJuYWxTdG9yZVdpdGhTZWxlY3RvcihcbiAgICAgIHN1YnNjcmlwdGlvbi5hZGROZXN0ZWRTdWIsXG4gICAgICBzdG9yZS5nZXRTdGF0ZSxcbiAgICAgIGdldFNlcnZlclN0YXRlIHx8IHN0b3JlLmdldFN0YXRlLFxuICAgICAgd3JhcHBlZFNlbGVjdG9yLFxuICAgICAgZXF1YWxpdHlGblxuICAgICk7XG4gICAgUmVhY3QudXNlRGVidWdWYWx1ZShzZWxlY3RlZFN0YXRlKTtcbiAgICByZXR1cm4gc2VsZWN0ZWRTdGF0ZTtcbiAgfTtcbiAgT2JqZWN0LmFzc2lnbih1c2VTZWxlY3RvcjIsIHtcbiAgICB3aXRoVHlwZXM6ICgpID0+IHVzZVNlbGVjdG9yMlxuICB9KTtcbiAgcmV0dXJuIHVzZVNlbGVjdG9yMjtcbn1cbnZhciB1c2VTZWxlY3RvciA9IC8qIEBfX1BVUkVfXyAqLyBjcmVhdGVTZWxlY3Rvckhvb2soKTtcblxuLy8gc3JjL2V4cG9ydHMudHNcbnZhciBiYXRjaCA9IGRlZmF1bHROb29wQmF0Y2g7XG5leHBvcnQge1xuICBQcm92aWRlcl9kZWZhdWx0IGFzIFByb3ZpZGVyLFxuICBSZWFjdFJlZHV4Q29udGV4dCxcbiAgYmF0Y2gsXG4gIGNvbm5lY3RfZGVmYXVsdCBhcyBjb25uZWN0LFxuICBjcmVhdGVEaXNwYXRjaEhvb2ssXG4gIGNyZWF0ZVNlbGVjdG9ySG9vayxcbiAgY3JlYXRlU3RvcmVIb29rLFxuICBzaGFsbG93RXF1YWwsXG4gIHVzZURpc3BhdGNoLFxuICB1c2VTZWxlY3RvcixcbiAgdXNlU3RvcmVcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWFjdC1yZWR1eC5tanMubWFwIiwiLy8gc3JjL3V0aWxzL2Zvcm1hdFByb2RFcnJvck1lc3NhZ2UudHNcbmZ1bmN0aW9uIGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoY29kZSkge1xuICByZXR1cm4gYE1pbmlmaWVkIFJlZHV4IGVycm9yICMke2NvZGV9OyB2aXNpdCBodHRwczovL3JlZHV4LmpzLm9yZy9FcnJvcnM/Y29kZT0ke2NvZGV9IGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMuIGA7XG59XG5cbi8vIHNyYy91dGlscy9zeW1ib2wtb2JzZXJ2YWJsZS50c1xudmFyICQkb2JzZXJ2YWJsZSA9IC8qIEBfX1BVUkVfXyAqLyAoKCkgPT4gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIFN5bWJvbC5vYnNlcnZhYmxlIHx8IFwiQEBvYnNlcnZhYmxlXCIpKCk7XG52YXIgc3ltYm9sX29ic2VydmFibGVfZGVmYXVsdCA9ICQkb2JzZXJ2YWJsZTtcblxuLy8gc3JjL3V0aWxzL2FjdGlvblR5cGVzLnRzXG52YXIgcmFuZG9tU3RyaW5nID0gKCkgPT4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyaW5nKDcpLnNwbGl0KFwiXCIpLmpvaW4oXCIuXCIpO1xudmFyIEFjdGlvblR5cGVzID0ge1xuICBJTklUOiBgQEByZWR1eC9JTklUJHsvKiBAX19QVVJFX18gKi8gcmFuZG9tU3RyaW5nKCl9YCxcbiAgUkVQTEFDRTogYEBAcmVkdXgvUkVQTEFDRSR7LyogQF9fUFVSRV9fICovIHJhbmRvbVN0cmluZygpfWAsXG4gIFBST0JFX1VOS05PV05fQUNUSU9OOiAoKSA9PiBgQEByZWR1eC9QUk9CRV9VTktOT1dOX0FDVElPTiR7cmFuZG9tU3RyaW5nKCl9YFxufTtcbnZhciBhY3Rpb25UeXBlc19kZWZhdWx0ID0gQWN0aW9uVHlwZXM7XG5cbi8vIHNyYy91dGlscy9pc1BsYWluT2JqZWN0LnRzXG5mdW5jdGlvbiBpc1BsYWluT2JqZWN0KG9iaikge1xuICBpZiAodHlwZW9mIG9iaiAhPT0gXCJvYmplY3RcIiB8fCBvYmogPT09IG51bGwpXG4gICAgcmV0dXJuIGZhbHNlO1xuICBsZXQgcHJvdG8gPSBvYmo7XG4gIHdoaWxlIChPYmplY3QuZ2V0UHJvdG90eXBlT2YocHJvdG8pICE9PSBudWxsKSB7XG4gICAgcHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YocHJvdG8pO1xuICB9XG4gIHJldHVybiBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqKSA9PT0gcHJvdG8gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iaikgPT09IG51bGw7XG59XG5cbi8vIHNyYy91dGlscy9raW5kT2YudHNcbmZ1bmN0aW9uIG1pbmlLaW5kT2YodmFsKSB7XG4gIGlmICh2YWwgPT09IHZvaWQgMClcbiAgICByZXR1cm4gXCJ1bmRlZmluZWRcIjtcbiAgaWYgKHZhbCA9PT0gbnVsbClcbiAgICByZXR1cm4gXCJudWxsXCI7XG4gIGNvbnN0IHR5cGUgPSB0eXBlb2YgdmFsO1xuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlIFwiYm9vbGVhblwiOlxuICAgIGNhc2UgXCJzdHJpbmdcIjpcbiAgICBjYXNlIFwibnVtYmVyXCI6XG4gICAgY2FzZSBcInN5bWJvbFwiOlxuICAgIGNhc2UgXCJmdW5jdGlvblwiOiB7XG4gICAgICByZXR1cm4gdHlwZTtcbiAgICB9XG4gIH1cbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsKSlcbiAgICByZXR1cm4gXCJhcnJheVwiO1xuICBpZiAoaXNEYXRlKHZhbCkpXG4gICAgcmV0dXJuIFwiZGF0ZVwiO1xuICBpZiAoaXNFcnJvcih2YWwpKVxuICAgIHJldHVybiBcImVycm9yXCI7XG4gIGNvbnN0IGNvbnN0cnVjdG9yTmFtZSA9IGN0b3JOYW1lKHZhbCk7XG4gIHN3aXRjaCAoY29uc3RydWN0b3JOYW1lKSB7XG4gICAgY2FzZSBcIlN5bWJvbFwiOlxuICAgIGNhc2UgXCJQcm9taXNlXCI6XG4gICAgY2FzZSBcIldlYWtNYXBcIjpcbiAgICBjYXNlIFwiV2Vha1NldFwiOlxuICAgIGNhc2UgXCJNYXBcIjpcbiAgICBjYXNlIFwiU2V0XCI6XG4gICAgICByZXR1cm4gY29uc3RydWN0b3JOYW1lO1xuICB9XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsKS5zbGljZSg4LCAtMSkudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC9cXHMvZywgXCJcIik7XG59XG5mdW5jdGlvbiBjdG9yTmFtZSh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwuY29uc3RydWN0b3IgPT09IFwiZnVuY3Rpb25cIiA/IHZhbC5jb25zdHJ1Y3Rvci5uYW1lIDogbnVsbDtcbn1cbmZ1bmN0aW9uIGlzRXJyb3IodmFsKSB7XG4gIHJldHVybiB2YWwgaW5zdGFuY2VvZiBFcnJvciB8fCB0eXBlb2YgdmFsLm1lc3NhZ2UgPT09IFwic3RyaW5nXCIgJiYgdmFsLmNvbnN0cnVjdG9yICYmIHR5cGVvZiB2YWwuY29uc3RydWN0b3Iuc3RhY2tUcmFjZUxpbWl0ID09PSBcIm51bWJlclwiO1xufVxuZnVuY3Rpb24gaXNEYXRlKHZhbCkge1xuICBpZiAodmFsIGluc3RhbmNlb2YgRGF0ZSlcbiAgICByZXR1cm4gdHJ1ZTtcbiAgcmV0dXJuIHR5cGVvZiB2YWwudG9EYXRlU3RyaW5nID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIHZhbC5nZXREYXRlID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIHZhbC5zZXREYXRlID09PSBcImZ1bmN0aW9uXCI7XG59XG5mdW5jdGlvbiBraW5kT2YodmFsKSB7XG4gIGxldCB0eXBlT2ZWYWwgPSB0eXBlb2YgdmFsO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgdHlwZU9mVmFsID0gbWluaUtpbmRPZih2YWwpO1xuICB9XG4gIHJldHVybiB0eXBlT2ZWYWw7XG59XG5cbi8vIHNyYy9jcmVhdGVTdG9yZS50c1xuZnVuY3Rpb24gY3JlYXRlU3RvcmUocmVkdWNlciwgcHJlbG9hZGVkU3RhdGUsIGVuaGFuY2VyKSB7XG4gIGlmICh0eXBlb2YgcmVkdWNlciAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMikgOiBgRXhwZWN0ZWQgdGhlIHJvb3QgcmVkdWNlciB0byBiZSBhIGZ1bmN0aW9uLiBJbnN0ZWFkLCByZWNlaXZlZDogJyR7a2luZE9mKHJlZHVjZXIpfSdgKTtcbiAgfVxuICBpZiAodHlwZW9mIHByZWxvYWRlZFN0YXRlID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIGVuaGFuY2VyID09PSBcImZ1bmN0aW9uXCIgfHwgdHlwZW9mIGVuaGFuY2VyID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIGFyZ3VtZW50c1szXSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMCkgOiBcIkl0IGxvb2tzIGxpa2UgeW91IGFyZSBwYXNzaW5nIHNldmVyYWwgc3RvcmUgZW5oYW5jZXJzIHRvIGNyZWF0ZVN0b3JlKCkuIFRoaXMgaXMgbm90IHN1cHBvcnRlZC4gSW5zdGVhZCwgY29tcG9zZSB0aGVtIHRvZ2V0aGVyIHRvIGEgc2luZ2xlIGZ1bmN0aW9uLiBTZWUgaHR0cHM6Ly9yZWR1eC5qcy5vcmcvdHV0b3JpYWxzL2Z1bmRhbWVudGFscy9wYXJ0LTQtc3RvcmUjY3JlYXRpbmctYS1zdG9yZS13aXRoLWVuaGFuY2VycyBmb3IgYW4gZXhhbXBsZS5cIik7XG4gIH1cbiAgaWYgKHR5cGVvZiBwcmVsb2FkZWRTdGF0ZSA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBlbmhhbmNlciA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGVuaGFuY2VyID0gcHJlbG9hZGVkU3RhdGU7XG4gICAgcHJlbG9hZGVkU3RhdGUgPSB2b2lkIDA7XG4gIH1cbiAgaWYgKHR5cGVvZiBlbmhhbmNlciAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGlmICh0eXBlb2YgZW5oYW5jZXIgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMSkgOiBgRXhwZWN0ZWQgdGhlIGVuaGFuY2VyIHRvIGJlIGEgZnVuY3Rpb24uIEluc3RlYWQsIHJlY2VpdmVkOiAnJHtraW5kT2YoZW5oYW5jZXIpfSdgKTtcbiAgICB9XG4gICAgcmV0dXJuIGVuaGFuY2VyKGNyZWF0ZVN0b3JlKShyZWR1Y2VyLCBwcmVsb2FkZWRTdGF0ZSk7XG4gIH1cbiAgbGV0IGN1cnJlbnRSZWR1Y2VyID0gcmVkdWNlcjtcbiAgbGV0IGN1cnJlbnRTdGF0ZSA9IHByZWxvYWRlZFN0YXRlO1xuICBsZXQgY3VycmVudExpc3RlbmVycyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCk7XG4gIGxldCBuZXh0TGlzdGVuZXJzID0gY3VycmVudExpc3RlbmVycztcbiAgbGV0IGxpc3RlbmVySWRDb3VudGVyID0gMDtcbiAgbGV0IGlzRGlzcGF0Y2hpbmcgPSBmYWxzZTtcbiAgZnVuY3Rpb24gZW5zdXJlQ2FuTXV0YXRlTmV4dExpc3RlbmVycygpIHtcbiAgICBpZiAobmV4dExpc3RlbmVycyA9PT0gY3VycmVudExpc3RlbmVycykge1xuICAgICAgbmV4dExpc3RlbmVycyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCk7XG4gICAgICBjdXJyZW50TGlzdGVuZXJzLmZvckVhY2goKGxpc3RlbmVyLCBrZXkpID0+IHtcbiAgICAgICAgbmV4dExpc3RlbmVycy5zZXQoa2V5LCBsaXN0ZW5lcik7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gZ2V0U3RhdGUoKSB7XG4gICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDMpIDogXCJZb3UgbWF5IG5vdCBjYWxsIHN0b3JlLmdldFN0YXRlKCkgd2hpbGUgdGhlIHJlZHVjZXIgaXMgZXhlY3V0aW5nLiBUaGUgcmVkdWNlciBoYXMgYWxyZWFkeSByZWNlaXZlZCB0aGUgc3RhdGUgYXMgYW4gYXJndW1lbnQuIFBhc3MgaXQgZG93biBmcm9tIHRoZSB0b3AgcmVkdWNlciBpbnN0ZWFkIG9mIHJlYWRpbmcgaXQgZnJvbSB0aGUgc3RvcmUuXCIpO1xuICAgIH1cbiAgICByZXR1cm4gY3VycmVudFN0YXRlO1xuICB9XG4gIGZ1bmN0aW9uIHN1YnNjcmliZShsaXN0ZW5lcikge1xuICAgIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNCkgOiBgRXhwZWN0ZWQgdGhlIGxpc3RlbmVyIHRvIGJlIGEgZnVuY3Rpb24uIEluc3RlYWQsIHJlY2VpdmVkOiAnJHtraW5kT2YobGlzdGVuZXIpfSdgKTtcbiAgICB9XG4gICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDUpIDogXCJZb3UgbWF5IG5vdCBjYWxsIHN0b3JlLnN1YnNjcmliZSgpIHdoaWxlIHRoZSByZWR1Y2VyIGlzIGV4ZWN1dGluZy4gSWYgeW91IHdvdWxkIGxpa2UgdG8gYmUgbm90aWZpZWQgYWZ0ZXIgdGhlIHN0b3JlIGhhcyBiZWVuIHVwZGF0ZWQsIHN1YnNjcmliZSBmcm9tIGEgY29tcG9uZW50IGFuZCBpbnZva2Ugc3RvcmUuZ2V0U3RhdGUoKSBpbiB0aGUgY2FsbGJhY2sgdG8gYWNjZXNzIHRoZSBsYXRlc3Qgc3RhdGUuIFNlZSBodHRwczovL3JlZHV4LmpzLm9yZy9hcGkvc3RvcmUjc3Vic2NyaWJlbGlzdGVuZXIgZm9yIG1vcmUgZGV0YWlscy5cIik7XG4gICAgfVxuICAgIGxldCBpc1N1YnNjcmliZWQgPSB0cnVlO1xuICAgIGVuc3VyZUNhbk11dGF0ZU5leHRMaXN0ZW5lcnMoKTtcbiAgICBjb25zdCBsaXN0ZW5lcklkID0gbGlzdGVuZXJJZENvdW50ZXIrKztcbiAgICBuZXh0TGlzdGVuZXJzLnNldChsaXN0ZW5lcklkLCBsaXN0ZW5lcik7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHVuc3Vic2NyaWJlKCkge1xuICAgICAgaWYgKCFpc1N1YnNjcmliZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNikgOiBcIllvdSBtYXkgbm90IHVuc3Vic2NyaWJlIGZyb20gYSBzdG9yZSBsaXN0ZW5lciB3aGlsZSB0aGUgcmVkdWNlciBpcyBleGVjdXRpbmcuIFNlZSBodHRwczovL3JlZHV4LmpzLm9yZy9hcGkvc3RvcmUjc3Vic2NyaWJlbGlzdGVuZXIgZm9yIG1vcmUgZGV0YWlscy5cIik7XG4gICAgICB9XG4gICAgICBpc1N1YnNjcmliZWQgPSBmYWxzZTtcbiAgICAgIGVuc3VyZUNhbk11dGF0ZU5leHRMaXN0ZW5lcnMoKTtcbiAgICAgIG5leHRMaXN0ZW5lcnMuZGVsZXRlKGxpc3RlbmVySWQpO1xuICAgICAgY3VycmVudExpc3RlbmVycyA9IG51bGw7XG4gICAgfTtcbiAgfVxuICBmdW5jdGlvbiBkaXNwYXRjaChhY3Rpb24pIHtcbiAgICBpZiAoIWlzUGxhaW5PYmplY3QoYWN0aW9uKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNykgOiBgQWN0aW9ucyBtdXN0IGJlIHBsYWluIG9iamVjdHMuIEluc3RlYWQsIHRoZSBhY3R1YWwgdHlwZSB3YXM6ICcke2tpbmRPZihhY3Rpb24pfScuIFlvdSBtYXkgbmVlZCB0byBhZGQgbWlkZGxld2FyZSB0byB5b3VyIHN0b3JlIHNldHVwIHRvIGhhbmRsZSBkaXNwYXRjaGluZyBvdGhlciB2YWx1ZXMsIHN1Y2ggYXMgJ3JlZHV4LXRodW5rJyB0byBoYW5kbGUgZGlzcGF0Y2hpbmcgZnVuY3Rpb25zLiBTZWUgaHR0cHM6Ly9yZWR1eC5qcy5vcmcvdHV0b3JpYWxzL2Z1bmRhbWVudGFscy9wYXJ0LTQtc3RvcmUjbWlkZGxld2FyZSBhbmQgaHR0cHM6Ly9yZWR1eC5qcy5vcmcvdHV0b3JpYWxzL2Z1bmRhbWVudGFscy9wYXJ0LTYtYXN5bmMtbG9naWMjdXNpbmctdGhlLXJlZHV4LXRodW5rLW1pZGRsZXdhcmUgZm9yIGV4YW1wbGVzLmApO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGFjdGlvbi50eXBlID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg4KSA6ICdBY3Rpb25zIG1heSBub3QgaGF2ZSBhbiB1bmRlZmluZWQgXCJ0eXBlXCIgcHJvcGVydHkuIFlvdSBtYXkgaGF2ZSBtaXNzcGVsbGVkIGFuIGFjdGlvbiB0eXBlIHN0cmluZyBjb25zdGFudC4nKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBhY3Rpb24udHlwZSAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTcpIDogYEFjdGlvbiBcInR5cGVcIiBwcm9wZXJ0eSBtdXN0IGJlIGEgc3RyaW5nLiBJbnN0ZWFkLCB0aGUgYWN0dWFsIHR5cGUgd2FzOiAnJHtraW5kT2YoYWN0aW9uLnR5cGUpfScuIFZhbHVlIHdhczogJyR7YWN0aW9uLnR5cGV9JyAoc3RyaW5naWZpZWQpYCk7XG4gICAgfVxuICAgIGlmIChpc0Rpc3BhdGNoaW5nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg5KSA6IFwiUmVkdWNlcnMgbWF5IG5vdCBkaXNwYXRjaCBhY3Rpb25zLlwiKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIGlzRGlzcGF0Y2hpbmcgPSB0cnVlO1xuICAgICAgY3VycmVudFN0YXRlID0gY3VycmVudFJlZHVjZXIoY3VycmVudFN0YXRlLCBhY3Rpb24pO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpc0Rpc3BhdGNoaW5nID0gZmFsc2U7XG4gICAgfVxuICAgIGNvbnN0IGxpc3RlbmVycyA9IGN1cnJlbnRMaXN0ZW5lcnMgPSBuZXh0TGlzdGVuZXJzO1xuICAgIGxpc3RlbmVycy5mb3JFYWNoKChsaXN0ZW5lcikgPT4ge1xuICAgICAgbGlzdGVuZXIoKTtcbiAgICB9KTtcbiAgICByZXR1cm4gYWN0aW9uO1xuICB9XG4gIGZ1bmN0aW9uIHJlcGxhY2VSZWR1Y2VyKG5leHRSZWR1Y2VyKSB7XG4gICAgaWYgKHR5cGVvZiBuZXh0UmVkdWNlciAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxMCkgOiBgRXhwZWN0ZWQgdGhlIG5leHRSZWR1Y2VyIHRvIGJlIGEgZnVuY3Rpb24uIEluc3RlYWQsIHJlY2VpdmVkOiAnJHtraW5kT2YobmV4dFJlZHVjZXIpfWApO1xuICAgIH1cbiAgICBjdXJyZW50UmVkdWNlciA9IG5leHRSZWR1Y2VyO1xuICAgIGRpc3BhdGNoKHtcbiAgICAgIHR5cGU6IGFjdGlvblR5cGVzX2RlZmF1bHQuUkVQTEFDRVxuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIG9ic2VydmFibGUoKSB7XG4gICAgY29uc3Qgb3V0ZXJTdWJzY3JpYmUgPSBzdWJzY3JpYmU7XG4gICAgcmV0dXJuIHtcbiAgICAgIC8qKlxuICAgICAgICogVGhlIG1pbmltYWwgb2JzZXJ2YWJsZSBzdWJzY3JpcHRpb24gbWV0aG9kLlxuICAgICAgICogQHBhcmFtIG9ic2VydmVyIEFueSBvYmplY3QgdGhhdCBjYW4gYmUgdXNlZCBhcyBhbiBvYnNlcnZlci5cbiAgICAgICAqIFRoZSBvYnNlcnZlciBvYmplY3Qgc2hvdWxkIGhhdmUgYSBgbmV4dGAgbWV0aG9kLlxuICAgICAgICogQHJldHVybnMgQW4gb2JqZWN0IHdpdGggYW4gYHVuc3Vic2NyaWJlYCBtZXRob2QgdGhhdCBjYW5cbiAgICAgICAqIGJlIHVzZWQgdG8gdW5zdWJzY3JpYmUgdGhlIG9ic2VydmFibGUgZnJvbSB0aGUgc3RvcmUsIGFuZCBwcmV2ZW50IGZ1cnRoZXJcbiAgICAgICAqIGVtaXNzaW9uIG9mIHZhbHVlcyBmcm9tIHRoZSBvYnNlcnZhYmxlLlxuICAgICAgICovXG4gICAgICBzdWJzY3JpYmUob2JzZXJ2ZXIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBvYnNlcnZlciAhPT0gXCJvYmplY3RcIiB8fCBvYnNlcnZlciA9PT0gbnVsbCkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDExKSA6IGBFeHBlY3RlZCB0aGUgb2JzZXJ2ZXIgdG8gYmUgYW4gb2JqZWN0LiBJbnN0ZWFkLCByZWNlaXZlZDogJyR7a2luZE9mKG9ic2VydmVyKX0nYCk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gb2JzZXJ2ZVN0YXRlKCkge1xuICAgICAgICAgIGNvbnN0IG9ic2VydmVyQXNPYnNlcnZlciA9IG9ic2VydmVyO1xuICAgICAgICAgIGlmIChvYnNlcnZlckFzT2JzZXJ2ZXIubmV4dCkge1xuICAgICAgICAgICAgb2JzZXJ2ZXJBc09ic2VydmVyLm5leHQoZ2V0U3RhdGUoKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIG9ic2VydmVTdGF0ZSgpO1xuICAgICAgICBjb25zdCB1bnN1YnNjcmliZSA9IG91dGVyU3Vic2NyaWJlKG9ic2VydmVTdGF0ZSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdW5zdWJzY3JpYmVcbiAgICAgICAgfTtcbiAgICAgIH0sXG4gICAgICBbc3ltYm9sX29ic2VydmFibGVfZGVmYXVsdF0oKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgIH07XG4gIH1cbiAgZGlzcGF0Y2goe1xuICAgIHR5cGU6IGFjdGlvblR5cGVzX2RlZmF1bHQuSU5JVFxuICB9KTtcbiAgY29uc3Qgc3RvcmUgPSB7XG4gICAgZGlzcGF0Y2gsXG4gICAgc3Vic2NyaWJlLFxuICAgIGdldFN0YXRlLFxuICAgIHJlcGxhY2VSZWR1Y2VyLFxuICAgIFtzeW1ib2xfb2JzZXJ2YWJsZV9kZWZhdWx0XTogb2JzZXJ2YWJsZVxuICB9O1xuICByZXR1cm4gc3RvcmU7XG59XG5mdW5jdGlvbiBsZWdhY3lfY3JlYXRlU3RvcmUocmVkdWNlciwgcHJlbG9hZGVkU3RhdGUsIGVuaGFuY2VyKSB7XG4gIHJldHVybiBjcmVhdGVTdG9yZShyZWR1Y2VyLCBwcmVsb2FkZWRTdGF0ZSwgZW5oYW5jZXIpO1xufVxuXG4vLyBzcmMvdXRpbHMvd2FybmluZy50c1xuZnVuY3Rpb24gd2FybmluZyhtZXNzYWdlKSB7XG4gIGlmICh0eXBlb2YgY29uc29sZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiB0eXBlb2YgY29uc29sZS5lcnJvciA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgY29uc29sZS5lcnJvcihtZXNzYWdlKTtcbiAgfVxuICB0cnkge1xuICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgfSBjYXRjaCAoZSkge1xuICB9XG59XG5cbi8vIHNyYy9jb21iaW5lUmVkdWNlcnMudHNcbmZ1bmN0aW9uIGdldFVuZXhwZWN0ZWRTdGF0ZVNoYXBlV2FybmluZ01lc3NhZ2UoaW5wdXRTdGF0ZSwgcmVkdWNlcnMsIGFjdGlvbiwgdW5leHBlY3RlZEtleUNhY2hlKSB7XG4gIGNvbnN0IHJlZHVjZXJLZXlzID0gT2JqZWN0LmtleXMocmVkdWNlcnMpO1xuICBjb25zdCBhcmd1bWVudE5hbWUgPSBhY3Rpb24gJiYgYWN0aW9uLnR5cGUgPT09IGFjdGlvblR5cGVzX2RlZmF1bHQuSU5JVCA/IFwicHJlbG9hZGVkU3RhdGUgYXJndW1lbnQgcGFzc2VkIHRvIGNyZWF0ZVN0b3JlXCIgOiBcInByZXZpb3VzIHN0YXRlIHJlY2VpdmVkIGJ5IHRoZSByZWR1Y2VyXCI7XG4gIGlmIChyZWR1Y2VyS2V5cy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gXCJTdG9yZSBkb2VzIG5vdCBoYXZlIGEgdmFsaWQgcmVkdWNlci4gTWFrZSBzdXJlIHRoZSBhcmd1bWVudCBwYXNzZWQgdG8gY29tYmluZVJlZHVjZXJzIGlzIGFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgYXJlIHJlZHVjZXJzLlwiO1xuICB9XG4gIGlmICghaXNQbGFpbk9iamVjdChpbnB1dFN0YXRlKSkge1xuICAgIHJldHVybiBgVGhlICR7YXJndW1lbnROYW1lfSBoYXMgdW5leHBlY3RlZCB0eXBlIG9mIFwiJHtraW5kT2YoaW5wdXRTdGF0ZSl9XCIuIEV4cGVjdGVkIGFyZ3VtZW50IHRvIGJlIGFuIG9iamVjdCB3aXRoIHRoZSBmb2xsb3dpbmcga2V5czogXCIke3JlZHVjZXJLZXlzLmpvaW4oJ1wiLCBcIicpfVwiYDtcbiAgfVxuICBjb25zdCB1bmV4cGVjdGVkS2V5cyA9IE9iamVjdC5rZXlzKGlucHV0U3RhdGUpLmZpbHRlcigoa2V5KSA9PiAhcmVkdWNlcnMuaGFzT3duUHJvcGVydHkoa2V5KSAmJiAhdW5leHBlY3RlZEtleUNhY2hlW2tleV0pO1xuICB1bmV4cGVjdGVkS2V5cy5mb3JFYWNoKChrZXkpID0+IHtcbiAgICB1bmV4cGVjdGVkS2V5Q2FjaGVba2V5XSA9IHRydWU7XG4gIH0pO1xuICBpZiAoYWN0aW9uICYmIGFjdGlvbi50eXBlID09PSBhY3Rpb25UeXBlc19kZWZhdWx0LlJFUExBQ0UpXG4gICAgcmV0dXJuO1xuICBpZiAodW5leHBlY3RlZEtleXMubGVuZ3RoID4gMCkge1xuICAgIHJldHVybiBgVW5leHBlY3RlZCAke3VuZXhwZWN0ZWRLZXlzLmxlbmd0aCA+IDEgPyBcImtleXNcIiA6IFwia2V5XCJ9IFwiJHt1bmV4cGVjdGVkS2V5cy5qb2luKCdcIiwgXCInKX1cIiBmb3VuZCBpbiAke2FyZ3VtZW50TmFtZX0uIEV4cGVjdGVkIHRvIGZpbmQgb25lIG9mIHRoZSBrbm93biByZWR1Y2VyIGtleXMgaW5zdGVhZDogXCIke3JlZHVjZXJLZXlzLmpvaW4oJ1wiLCBcIicpfVwiLiBVbmV4cGVjdGVkIGtleXMgd2lsbCBiZSBpZ25vcmVkLmA7XG4gIH1cbn1cbmZ1bmN0aW9uIGFzc2VydFJlZHVjZXJTaGFwZShyZWR1Y2Vycykge1xuICBPYmplY3Qua2V5cyhyZWR1Y2VycykuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgY29uc3QgcmVkdWNlciA9IHJlZHVjZXJzW2tleV07XG4gICAgY29uc3QgaW5pdGlhbFN0YXRlID0gcmVkdWNlcih2b2lkIDAsIHtcbiAgICAgIHR5cGU6IGFjdGlvblR5cGVzX2RlZmF1bHQuSU5JVFxuICAgIH0pO1xuICAgIGlmICh0eXBlb2YgaW5pdGlhbFN0YXRlID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxMikgOiBgVGhlIHNsaWNlIHJlZHVjZXIgZm9yIGtleSBcIiR7a2V5fVwiIHJldHVybmVkIHVuZGVmaW5lZCBkdXJpbmcgaW5pdGlhbGl6YXRpb24uIElmIHRoZSBzdGF0ZSBwYXNzZWQgdG8gdGhlIHJlZHVjZXIgaXMgdW5kZWZpbmVkLCB5b3UgbXVzdCBleHBsaWNpdGx5IHJldHVybiB0aGUgaW5pdGlhbCBzdGF0ZS4gVGhlIGluaXRpYWwgc3RhdGUgbWF5IG5vdCBiZSB1bmRlZmluZWQuIElmIHlvdSBkb24ndCB3YW50IHRvIHNldCBhIHZhbHVlIGZvciB0aGlzIHJlZHVjZXIsIHlvdSBjYW4gdXNlIG51bGwgaW5zdGVhZCBvZiB1bmRlZmluZWQuYCk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgcmVkdWNlcih2b2lkIDAsIHtcbiAgICAgIHR5cGU6IGFjdGlvblR5cGVzX2RlZmF1bHQuUFJPQkVfVU5LTk9XTl9BQ1RJT04oKVxuICAgIH0pID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxMykgOiBgVGhlIHNsaWNlIHJlZHVjZXIgZm9yIGtleSBcIiR7a2V5fVwiIHJldHVybmVkIHVuZGVmaW5lZCB3aGVuIHByb2JlZCB3aXRoIGEgcmFuZG9tIHR5cGUuIERvbid0IHRyeSB0byBoYW5kbGUgJyR7YWN0aW9uVHlwZXNfZGVmYXVsdC5JTklUfScgb3Igb3RoZXIgYWN0aW9ucyBpbiBcInJlZHV4LypcIiBuYW1lc3BhY2UuIFRoZXkgYXJlIGNvbnNpZGVyZWQgcHJpdmF0ZS4gSW5zdGVhZCwgeW91IG11c3QgcmV0dXJuIHRoZSBjdXJyZW50IHN0YXRlIGZvciBhbnkgdW5rbm93biBhY3Rpb25zLCB1bmxlc3MgaXQgaXMgdW5kZWZpbmVkLCBpbiB3aGljaCBjYXNlIHlvdSBtdXN0IHJldHVybiB0aGUgaW5pdGlhbCBzdGF0ZSwgcmVnYXJkbGVzcyBvZiB0aGUgYWN0aW9uIHR5cGUuIFRoZSBpbml0aWFsIHN0YXRlIG1heSBub3QgYmUgdW5kZWZpbmVkLCBidXQgY2FuIGJlIG51bGwuYCk7XG4gICAgfVxuICB9KTtcbn1cbmZ1bmN0aW9uIGNvbWJpbmVSZWR1Y2VycyhyZWR1Y2Vycykge1xuICBjb25zdCByZWR1Y2VyS2V5cyA9IE9iamVjdC5rZXlzKHJlZHVjZXJzKTtcbiAgY29uc3QgZmluYWxSZWR1Y2VycyA9IHt9O1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHJlZHVjZXJLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3Qga2V5ID0gcmVkdWNlcktleXNbaV07XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgaWYgKHR5cGVvZiByZWR1Y2Vyc1trZXldID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIHdhcm5pbmcoYE5vIHJlZHVjZXIgcHJvdmlkZWQgZm9yIGtleSBcIiR7a2V5fVwiYCk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICh0eXBlb2YgcmVkdWNlcnNba2V5XSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICBmaW5hbFJlZHVjZXJzW2tleV0gPSByZWR1Y2Vyc1trZXldO1xuICAgIH1cbiAgfVxuICBjb25zdCBmaW5hbFJlZHVjZXJLZXlzID0gT2JqZWN0LmtleXMoZmluYWxSZWR1Y2Vycyk7XG4gIGxldCB1bmV4cGVjdGVkS2V5Q2FjaGU7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICB1bmV4cGVjdGVkS2V5Q2FjaGUgPSB7fTtcbiAgfVxuICBsZXQgc2hhcGVBc3NlcnRpb25FcnJvcjtcbiAgdHJ5IHtcbiAgICBhc3NlcnRSZWR1Y2VyU2hhcGUoZmluYWxSZWR1Y2Vycyk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBzaGFwZUFzc2VydGlvbkVycm9yID0gZTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24gY29tYmluYXRpb24oc3RhdGUgPSB7fSwgYWN0aW9uKSB7XG4gICAgaWYgKHNoYXBlQXNzZXJ0aW9uRXJyb3IpIHtcbiAgICAgIHRocm93IHNoYXBlQXNzZXJ0aW9uRXJyb3I7XG4gICAgfVxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgIGNvbnN0IHdhcm5pbmdNZXNzYWdlID0gZ2V0VW5leHBlY3RlZFN0YXRlU2hhcGVXYXJuaW5nTWVzc2FnZShzdGF0ZSwgZmluYWxSZWR1Y2VycywgYWN0aW9uLCB1bmV4cGVjdGVkS2V5Q2FjaGUpO1xuICAgICAgaWYgKHdhcm5pbmdNZXNzYWdlKSB7XG4gICAgICAgIHdhcm5pbmcod2FybmluZ01lc3NhZ2UpO1xuICAgICAgfVxuICAgIH1cbiAgICBsZXQgaGFzQ2hhbmdlZCA9IGZhbHNlO1xuICAgIGNvbnN0IG5leHRTdGF0ZSA9IHt9O1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZmluYWxSZWR1Y2VyS2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3Qga2V5ID0gZmluYWxSZWR1Y2VyS2V5c1tpXTtcbiAgICAgIGNvbnN0IHJlZHVjZXIgPSBmaW5hbFJlZHVjZXJzW2tleV07XG4gICAgICBjb25zdCBwcmV2aW91c1N0YXRlRm9yS2V5ID0gc3RhdGVba2V5XTtcbiAgICAgIGNvbnN0IG5leHRTdGF0ZUZvcktleSA9IHJlZHVjZXIocHJldmlvdXNTdGF0ZUZvcktleSwgYWN0aW9uKTtcbiAgICAgIGlmICh0eXBlb2YgbmV4dFN0YXRlRm9yS2V5ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGNvbnN0IGFjdGlvblR5cGUgPSBhY3Rpb24gJiYgYWN0aW9uLnR5cGU7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDE0KSA6IGBXaGVuIGNhbGxlZCB3aXRoIGFuIGFjdGlvbiBvZiB0eXBlICR7YWN0aW9uVHlwZSA/IGBcIiR7U3RyaW5nKGFjdGlvblR5cGUpfVwiYCA6IFwiKHVua25vd24gdHlwZSlcIn0sIHRoZSBzbGljZSByZWR1Y2VyIGZvciBrZXkgXCIke2tleX1cIiByZXR1cm5lZCB1bmRlZmluZWQuIFRvIGlnbm9yZSBhbiBhY3Rpb24sIHlvdSBtdXN0IGV4cGxpY2l0bHkgcmV0dXJuIHRoZSBwcmV2aW91cyBzdGF0ZS4gSWYgeW91IHdhbnQgdGhpcyByZWR1Y2VyIHRvIGhvbGQgbm8gdmFsdWUsIHlvdSBjYW4gcmV0dXJuIG51bGwgaW5zdGVhZCBvZiB1bmRlZmluZWQuYCk7XG4gICAgICB9XG4gICAgICBuZXh0U3RhdGVba2V5XSA9IG5leHRTdGF0ZUZvcktleTtcbiAgICAgIGhhc0NoYW5nZWQgPSBoYXNDaGFuZ2VkIHx8IG5leHRTdGF0ZUZvcktleSAhPT0gcHJldmlvdXNTdGF0ZUZvcktleTtcbiAgICB9XG4gICAgaGFzQ2hhbmdlZCA9IGhhc0NoYW5nZWQgfHwgZmluYWxSZWR1Y2VyS2V5cy5sZW5ndGggIT09IE9iamVjdC5rZXlzKHN0YXRlKS5sZW5ndGg7XG4gICAgcmV0dXJuIGhhc0NoYW5nZWQgPyBuZXh0U3RhdGUgOiBzdGF0ZTtcbiAgfTtcbn1cblxuLy8gc3JjL2JpbmRBY3Rpb25DcmVhdG9ycy50c1xuZnVuY3Rpb24gYmluZEFjdGlvbkNyZWF0b3IoYWN0aW9uQ3JlYXRvciwgZGlzcGF0Y2gpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKC4uLmFyZ3MpIHtcbiAgICByZXR1cm4gZGlzcGF0Y2goYWN0aW9uQ3JlYXRvci5hcHBseSh0aGlzLCBhcmdzKSk7XG4gIH07XG59XG5mdW5jdGlvbiBiaW5kQWN0aW9uQ3JlYXRvcnMoYWN0aW9uQ3JlYXRvcnMsIGRpc3BhdGNoKSB7XG4gIGlmICh0eXBlb2YgYWN0aW9uQ3JlYXRvcnMgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHJldHVybiBiaW5kQWN0aW9uQ3JlYXRvcihhY3Rpb25DcmVhdG9ycywgZGlzcGF0Y2gpO1xuICB9XG4gIGlmICh0eXBlb2YgYWN0aW9uQ3JlYXRvcnMgIT09IFwib2JqZWN0XCIgfHwgYWN0aW9uQ3JlYXRvcnMgPT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxNikgOiBgYmluZEFjdGlvbkNyZWF0b3JzIGV4cGVjdGVkIGFuIG9iamVjdCBvciBhIGZ1bmN0aW9uLCBidXQgaW5zdGVhZCByZWNlaXZlZDogJyR7a2luZE9mKGFjdGlvbkNyZWF0b3JzKX0nLiBEaWQgeW91IHdyaXRlIFwiaW1wb3J0IEFjdGlvbkNyZWF0b3JzIGZyb21cIiBpbnN0ZWFkIG9mIFwiaW1wb3J0ICogYXMgQWN0aW9uQ3JlYXRvcnMgZnJvbVwiP2ApO1xuICB9XG4gIGNvbnN0IGJvdW5kQWN0aW9uQ3JlYXRvcnMgPSB7fTtcbiAgZm9yIChjb25zdCBrZXkgaW4gYWN0aW9uQ3JlYXRvcnMpIHtcbiAgICBjb25zdCBhY3Rpb25DcmVhdG9yID0gYWN0aW9uQ3JlYXRvcnNba2V5XTtcbiAgICBpZiAodHlwZW9mIGFjdGlvbkNyZWF0b3IgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgYm91bmRBY3Rpb25DcmVhdG9yc1trZXldID0gYmluZEFjdGlvbkNyZWF0b3IoYWN0aW9uQ3JlYXRvciwgZGlzcGF0Y2gpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gYm91bmRBY3Rpb25DcmVhdG9ycztcbn1cblxuLy8gc3JjL2NvbXBvc2UudHNcbmZ1bmN0aW9uIGNvbXBvc2UoLi4uZnVuY3MpIHtcbiAgaWYgKGZ1bmNzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiAoYXJnKSA9PiBhcmc7XG4gIH1cbiAgaWYgKGZ1bmNzLmxlbmd0aCA9PT0gMSkge1xuICAgIHJldHVybiBmdW5jc1swXTtcbiAgfVxuICByZXR1cm4gZnVuY3MucmVkdWNlKChhLCBiKSA9PiAoLi4uYXJncykgPT4gYShiKC4uLmFyZ3MpKSk7XG59XG5cbi8vIHNyYy9hcHBseU1pZGRsZXdhcmUudHNcbmZ1bmN0aW9uIGFwcGx5TWlkZGxld2FyZSguLi5taWRkbGV3YXJlcykge1xuICByZXR1cm4gKGNyZWF0ZVN0b3JlMikgPT4gKHJlZHVjZXIsIHByZWxvYWRlZFN0YXRlKSA9PiB7XG4gICAgY29uc3Qgc3RvcmUgPSBjcmVhdGVTdG9yZTIocmVkdWNlciwgcHJlbG9hZGVkU3RhdGUpO1xuICAgIGxldCBkaXNwYXRjaCA9ICgpID0+IHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDE1KSA6IFwiRGlzcGF0Y2hpbmcgd2hpbGUgY29uc3RydWN0aW5nIHlvdXIgbWlkZGxld2FyZSBpcyBub3QgYWxsb3dlZC4gT3RoZXIgbWlkZGxld2FyZSB3b3VsZCBub3QgYmUgYXBwbGllZCB0byB0aGlzIGRpc3BhdGNoLlwiKTtcbiAgICB9O1xuICAgIGNvbnN0IG1pZGRsZXdhcmVBUEkgPSB7XG4gICAgICBnZXRTdGF0ZTogc3RvcmUuZ2V0U3RhdGUsXG4gICAgICBkaXNwYXRjaDogKGFjdGlvbiwgLi4uYXJncykgPT4gZGlzcGF0Y2goYWN0aW9uLCAuLi5hcmdzKVxuICAgIH07XG4gICAgY29uc3QgY2hhaW4gPSBtaWRkbGV3YXJlcy5tYXAoKG1pZGRsZXdhcmUpID0+IG1pZGRsZXdhcmUobWlkZGxld2FyZUFQSSkpO1xuICAgIGRpc3BhdGNoID0gY29tcG9zZSguLi5jaGFpbikoc3RvcmUuZGlzcGF0Y2gpO1xuICAgIHJldHVybiB7XG4gICAgICAuLi5zdG9yZSxcbiAgICAgIGRpc3BhdGNoXG4gICAgfTtcbiAgfTtcbn1cblxuLy8gc3JjL3V0aWxzL2lzQWN0aW9uLnRzXG5mdW5jdGlvbiBpc0FjdGlvbihhY3Rpb24pIHtcbiAgcmV0dXJuIGlzUGxhaW5PYmplY3QoYWN0aW9uKSAmJiBcInR5cGVcIiBpbiBhY3Rpb24gJiYgdHlwZW9mIGFjdGlvbi50eXBlID09PSBcInN0cmluZ1wiO1xufVxuZXhwb3J0IHtcbiAgYWN0aW9uVHlwZXNfZGVmYXVsdCBhcyBfX0RPX05PVF9VU0VfX0FjdGlvblR5cGVzLFxuICBhcHBseU1pZGRsZXdhcmUsXG4gIGJpbmRBY3Rpb25DcmVhdG9ycyxcbiAgY29tYmluZVJlZHVjZXJzLFxuICBjb21wb3NlLFxuICBjcmVhdGVTdG9yZSxcbiAgaXNBY3Rpb24sXG4gIGlzUGxhaW5PYmplY3QsXG4gIGxlZ2FjeV9jcmVhdGVTdG9yZVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlZHV4Lm1qcy5tYXAiLCIvLyBzcmMvaW5kZXgudHNcbmZ1bmN0aW9uIGNyZWF0ZVRodW5rTWlkZGxld2FyZShleHRyYUFyZ3VtZW50KSB7XG4gIGNvbnN0IG1pZGRsZXdhcmUgPSAoeyBkaXNwYXRjaCwgZ2V0U3RhdGUgfSkgPT4gKG5leHQpID0+IChhY3Rpb24pID0+IHtcbiAgICBpZiAodHlwZW9mIGFjdGlvbiA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICByZXR1cm4gYWN0aW9uKGRpc3BhdGNoLCBnZXRTdGF0ZSwgZXh0cmFBcmd1bWVudCk7XG4gICAgfVxuICAgIHJldHVybiBuZXh0KGFjdGlvbik7XG4gIH07XG4gIHJldHVybiBtaWRkbGV3YXJlO1xufVxudmFyIHRodW5rID0gY3JlYXRlVGh1bmtNaWRkbGV3YXJlKCk7XG52YXIgd2l0aEV4dHJhQXJndW1lbnQgPSBjcmVhdGVUaHVua01pZGRsZXdhcmU7XG5leHBvcnQge1xuICB0aHVuayxcbiAgd2l0aEV4dHJhQXJndW1lbnRcbn07XG4iLCIvLyBzcmMvdXRpbHMvZW52LnRzXG52YXIgTk9USElORyA9IFN5bWJvbC5mb3IoXCJpbW1lci1ub3RoaW5nXCIpO1xudmFyIERSQUZUQUJMRSA9IFN5bWJvbC5mb3IoXCJpbW1lci1kcmFmdGFibGVcIik7XG52YXIgRFJBRlRfU1RBVEUgPSBTeW1ib2wuZm9yKFwiaW1tZXItc3RhdGVcIik7XG5cbi8vIHNyYy91dGlscy9lcnJvcnMudHNcbnZhciBlcnJvcnMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBbXG4gIC8vIEFsbCBlcnJvciBjb2Rlcywgc3RhcnRpbmcgYnkgMDpcbiAgZnVuY3Rpb24ocGx1Z2luKSB7XG4gICAgcmV0dXJuIGBUaGUgcGx1Z2luIGZvciAnJHtwbHVnaW59JyBoYXMgbm90IGJlZW4gbG9hZGVkIGludG8gSW1tZXIuIFRvIGVuYWJsZSB0aGUgcGx1Z2luLCBpbXBvcnQgYW5kIGNhbGwgXFxgZW5hYmxlJHtwbHVnaW59KClcXGAgd2hlbiBpbml0aWFsaXppbmcgeW91ciBhcHBsaWNhdGlvbi5gO1xuICB9LFxuICBmdW5jdGlvbih0aGluZykge1xuICAgIHJldHVybiBgcHJvZHVjZSBjYW4gb25seSBiZSBjYWxsZWQgb24gdGhpbmdzIHRoYXQgYXJlIGRyYWZ0YWJsZTogcGxhaW4gb2JqZWN0cywgYXJyYXlzLCBNYXAsIFNldCBvciBjbGFzc2VzIHRoYXQgYXJlIG1hcmtlZCB3aXRoICdbaW1tZXJhYmxlXTogdHJ1ZScuIEdvdCAnJHt0aGluZ30nYDtcbiAgfSxcbiAgXCJUaGlzIG9iamVjdCBoYXMgYmVlbiBmcm96ZW4gYW5kIHNob3VsZCBub3QgYmUgbXV0YXRlZFwiLFxuICBmdW5jdGlvbihkYXRhKSB7XG4gICAgcmV0dXJuIFwiQ2Fubm90IHVzZSBhIHByb3h5IHRoYXQgaGFzIGJlZW4gcmV2b2tlZC4gRGlkIHlvdSBwYXNzIGFuIG9iamVjdCBmcm9tIGluc2lkZSBhbiBpbW1lciBmdW5jdGlvbiB0byBhbiBhc3luYyBwcm9jZXNzPyBcIiArIGRhdGE7XG4gIH0sXG4gIFwiQW4gaW1tZXIgcHJvZHVjZXIgcmV0dXJuZWQgYSBuZXcgdmFsdWUgKmFuZCogbW9kaWZpZWQgaXRzIGRyYWZ0LiBFaXRoZXIgcmV0dXJuIGEgbmV3IHZhbHVlICpvciogbW9kaWZ5IHRoZSBkcmFmdC5cIixcbiAgXCJJbW1lciBmb3JiaWRzIGNpcmN1bGFyIHJlZmVyZW5jZXNcIixcbiAgXCJUaGUgZmlyc3Qgb3Igc2Vjb25kIGFyZ3VtZW50IHRvIGBwcm9kdWNlYCBtdXN0IGJlIGEgZnVuY3Rpb25cIixcbiAgXCJUaGUgdGhpcmQgYXJndW1lbnQgdG8gYHByb2R1Y2VgIG11c3QgYmUgYSBmdW5jdGlvbiBvciB1bmRlZmluZWRcIixcbiAgXCJGaXJzdCBhcmd1bWVudCB0byBgY3JlYXRlRHJhZnRgIG11c3QgYmUgYSBwbGFpbiBvYmplY3QsIGFuIGFycmF5LCBvciBhbiBpbW1lcmFibGUgb2JqZWN0XCIsXG4gIFwiRmlyc3QgYXJndW1lbnQgdG8gYGZpbmlzaERyYWZ0YCBtdXN0IGJlIGEgZHJhZnQgcmV0dXJuZWQgYnkgYGNyZWF0ZURyYWZ0YFwiLFxuICBmdW5jdGlvbih0aGluZykge1xuICAgIHJldHVybiBgJ2N1cnJlbnQnIGV4cGVjdHMgYSBkcmFmdCwgZ290OiAke3RoaW5nfWA7XG4gIH0sXG4gIFwiT2JqZWN0LmRlZmluZVByb3BlcnR5KCkgY2Fubm90IGJlIHVzZWQgb24gYW4gSW1tZXIgZHJhZnRcIixcbiAgXCJPYmplY3Quc2V0UHJvdG90eXBlT2YoKSBjYW5ub3QgYmUgdXNlZCBvbiBhbiBJbW1lciBkcmFmdFwiLFxuICBcIkltbWVyIG9ubHkgc3VwcG9ydHMgZGVsZXRpbmcgYXJyYXkgaW5kaWNlc1wiLFxuICBcIkltbWVyIG9ubHkgc3VwcG9ydHMgc2V0dGluZyBhcnJheSBpbmRpY2VzIGFuZCB0aGUgJ2xlbmd0aCcgcHJvcGVydHlcIixcbiAgZnVuY3Rpb24odGhpbmcpIHtcbiAgICByZXR1cm4gYCdvcmlnaW5hbCcgZXhwZWN0cyBhIGRyYWZ0LCBnb3Q6ICR7dGhpbmd9YDtcbiAgfVxuICAvLyBOb3RlOiBpZiBtb3JlIGVycm9ycyBhcmUgYWRkZWQsIHRoZSBlcnJvck9mZnNldCBpbiBQYXRjaGVzLnRzIHNob3VsZCBiZSBpbmNyZWFzZWRcbiAgLy8gU2VlIFBhdGNoZXMudHMgZm9yIGFkZGl0aW9uYWwgZXJyb3JzXG5dIDogW107XG5mdW5jdGlvbiBkaWUoZXJyb3IsIC4uLmFyZ3MpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgIGNvbnN0IGUgPSBlcnJvcnNbZXJyb3JdO1xuICAgIGNvbnN0IG1zZyA9IHR5cGVvZiBlID09PSBcImZ1bmN0aW9uXCIgPyBlLmFwcGx5KG51bGwsIGFyZ3MpIDogZTtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYFtJbW1lcl0gJHttc2d9YCk7XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKFxuICAgIGBbSW1tZXJdIG1pbmlmaWVkIGVycm9yIG5yOiAke2Vycm9yfS4gRnVsbCBlcnJvciBhdDogaHR0cHM6Ly9iaXQubHkvM2NYRUtXZmBcbiAgKTtcbn1cblxuLy8gc3JjL3V0aWxzL2NvbW1vbi50c1xudmFyIGdldFByb3RvdHlwZU9mID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuZnVuY3Rpb24gaXNEcmFmdCh2YWx1ZSkge1xuICByZXR1cm4gISF2YWx1ZSAmJiAhIXZhbHVlW0RSQUZUX1NUQVRFXTtcbn1cbmZ1bmN0aW9uIGlzRHJhZnRhYmxlKHZhbHVlKSB7XG4gIGlmICghdmFsdWUpXG4gICAgcmV0dXJuIGZhbHNlO1xuICByZXR1cm4gaXNQbGFpbk9iamVjdCh2YWx1ZSkgfHwgQXJyYXkuaXNBcnJheSh2YWx1ZSkgfHwgISF2YWx1ZVtEUkFGVEFCTEVdIHx8ICEhdmFsdWUuY29uc3RydWN0b3I/LltEUkFGVEFCTEVdIHx8IGlzTWFwKHZhbHVlKSB8fCBpc1NldCh2YWx1ZSk7XG59XG52YXIgb2JqZWN0Q3RvclN0cmluZyA9IE9iamVjdC5wcm90b3R5cGUuY29uc3RydWN0b3IudG9TdHJpbmcoKTtcbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3QodmFsdWUpIHtcbiAgaWYgKCF2YWx1ZSB8fCB0eXBlb2YgdmFsdWUgIT09IFwib2JqZWN0XCIpXG4gICAgcmV0dXJuIGZhbHNlO1xuICBjb25zdCBwcm90byA9IGdldFByb3RvdHlwZU9mKHZhbHVlKTtcbiAgaWYgKHByb3RvID09PSBudWxsKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgY29uc3QgQ3RvciA9IE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKHByb3RvLCBcImNvbnN0cnVjdG9yXCIpICYmIHByb3RvLmNvbnN0cnVjdG9yO1xuICBpZiAoQ3RvciA9PT0gT2JqZWN0KVxuICAgIHJldHVybiB0cnVlO1xuICByZXR1cm4gdHlwZW9mIEN0b3IgPT0gXCJmdW5jdGlvblwiICYmIEZ1bmN0aW9uLnRvU3RyaW5nLmNhbGwoQ3RvcikgPT09IG9iamVjdEN0b3JTdHJpbmc7XG59XG5mdW5jdGlvbiBvcmlnaW5hbCh2YWx1ZSkge1xuICBpZiAoIWlzRHJhZnQodmFsdWUpKVxuICAgIGRpZSgxNSwgdmFsdWUpO1xuICByZXR1cm4gdmFsdWVbRFJBRlRfU1RBVEVdLmJhc2VfO1xufVxuZnVuY3Rpb24gZWFjaChvYmosIGl0ZXIpIHtcbiAgaWYgKGdldEFyY2h0eXBlKG9iaikgPT09IDAgLyogT2JqZWN0ICovKSB7XG4gICAgUmVmbGVjdC5vd25LZXlzKG9iaikuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICBpdGVyKGtleSwgb2JqW2tleV0sIG9iaik7XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqLmZvckVhY2goKGVudHJ5LCBpbmRleCkgPT4gaXRlcihpbmRleCwgZW50cnksIG9iaikpO1xuICB9XG59XG5mdW5jdGlvbiBnZXRBcmNodHlwZSh0aGluZykge1xuICBjb25zdCBzdGF0ZSA9IHRoaW5nW0RSQUZUX1NUQVRFXTtcbiAgcmV0dXJuIHN0YXRlID8gc3RhdGUudHlwZV8gOiBBcnJheS5pc0FycmF5KHRoaW5nKSA/IDEgLyogQXJyYXkgKi8gOiBpc01hcCh0aGluZykgPyAyIC8qIE1hcCAqLyA6IGlzU2V0KHRoaW5nKSA/IDMgLyogU2V0ICovIDogMCAvKiBPYmplY3QgKi87XG59XG5mdW5jdGlvbiBoYXModGhpbmcsIHByb3ApIHtcbiAgcmV0dXJuIGdldEFyY2h0eXBlKHRoaW5nKSA9PT0gMiAvKiBNYXAgKi8gPyB0aGluZy5oYXMocHJvcCkgOiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodGhpbmcsIHByb3ApO1xufVxuZnVuY3Rpb24gZ2V0KHRoaW5nLCBwcm9wKSB7XG4gIHJldHVybiBnZXRBcmNodHlwZSh0aGluZykgPT09IDIgLyogTWFwICovID8gdGhpbmcuZ2V0KHByb3ApIDogdGhpbmdbcHJvcF07XG59XG5mdW5jdGlvbiBzZXQodGhpbmcsIHByb3BPck9sZFZhbHVlLCB2YWx1ZSkge1xuICBjb25zdCB0ID0gZ2V0QXJjaHR5cGUodGhpbmcpO1xuICBpZiAodCA9PT0gMiAvKiBNYXAgKi8pXG4gICAgdGhpbmcuc2V0KHByb3BPck9sZFZhbHVlLCB2YWx1ZSk7XG4gIGVsc2UgaWYgKHQgPT09IDMgLyogU2V0ICovKSB7XG4gICAgdGhpbmcuYWRkKHZhbHVlKTtcbiAgfSBlbHNlXG4gICAgdGhpbmdbcHJvcE9yT2xkVmFsdWVdID0gdmFsdWU7XG59XG5mdW5jdGlvbiBpcyh4LCB5KSB7XG4gIGlmICh4ID09PSB5KSB7XG4gICAgcmV0dXJuIHggIT09IDAgfHwgMSAvIHggPT09IDEgLyB5O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB4ICE9PSB4ICYmIHkgIT09IHk7XG4gIH1cbn1cbmZ1bmN0aW9uIGlzTWFwKHRhcmdldCkge1xuICByZXR1cm4gdGFyZ2V0IGluc3RhbmNlb2YgTWFwO1xufVxuZnVuY3Rpb24gaXNTZXQodGFyZ2V0KSB7XG4gIHJldHVybiB0YXJnZXQgaW5zdGFuY2VvZiBTZXQ7XG59XG5mdW5jdGlvbiBsYXRlc3Qoc3RhdGUpIHtcbiAgcmV0dXJuIHN0YXRlLmNvcHlfIHx8IHN0YXRlLmJhc2VfO1xufVxuZnVuY3Rpb24gc2hhbGxvd0NvcHkoYmFzZSwgc3RyaWN0KSB7XG4gIGlmIChpc01hcChiYXNlKSkge1xuICAgIHJldHVybiBuZXcgTWFwKGJhc2UpO1xuICB9XG4gIGlmIChpc1NldChiYXNlKSkge1xuICAgIHJldHVybiBuZXcgU2V0KGJhc2UpO1xuICB9XG4gIGlmIChBcnJheS5pc0FycmF5KGJhc2UpKVxuICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChiYXNlKTtcbiAgY29uc3QgaXNQbGFpbiA9IGlzUGxhaW5PYmplY3QoYmFzZSk7XG4gIGlmIChzdHJpY3QgPT09IHRydWUgfHwgc3RyaWN0ID09PSBcImNsYXNzX29ubHlcIiAmJiAhaXNQbGFpbikge1xuICAgIGNvbnN0IGRlc2NyaXB0b3JzID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoYmFzZSk7XG4gICAgZGVsZXRlIGRlc2NyaXB0b3JzW0RSQUZUX1NUQVRFXTtcbiAgICBsZXQga2V5cyA9IFJlZmxlY3Qub3duS2V5cyhkZXNjcmlwdG9ycyk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBrZXkgPSBrZXlzW2ldO1xuICAgICAgY29uc3QgZGVzYyA9IGRlc2NyaXB0b3JzW2tleV07XG4gICAgICBpZiAoZGVzYy53cml0YWJsZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgZGVzYy53cml0YWJsZSA9IHRydWU7XG4gICAgICAgIGRlc2MuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChkZXNjLmdldCB8fCBkZXNjLnNldClcbiAgICAgICAgZGVzY3JpcHRvcnNba2V5XSA9IHtcbiAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgLy8gY291bGQgbGl2ZSB3aXRoICEhZGVzYy5zZXQgYXMgd2VsbCBoZXJlLi4uXG4gICAgICAgICAgZW51bWVyYWJsZTogZGVzYy5lbnVtZXJhYmxlLFxuICAgICAgICAgIHZhbHVlOiBiYXNlW2tleV1cbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIE9iamVjdC5jcmVhdGUoZ2V0UHJvdG90eXBlT2YoYmFzZSksIGRlc2NyaXB0b3JzKTtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCBwcm90byA9IGdldFByb3RvdHlwZU9mKGJhc2UpO1xuICAgIGlmIChwcm90byAhPT0gbnVsbCAmJiBpc1BsYWluKSB7XG4gICAgICByZXR1cm4geyAuLi5iYXNlIH07XG4gICAgfVxuICAgIGNvbnN0IG9iaiA9IE9iamVjdC5jcmVhdGUocHJvdG8pO1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKG9iaiwgYmFzZSk7XG4gIH1cbn1cbmZ1bmN0aW9uIGZyZWV6ZShvYmosIGRlZXAgPSBmYWxzZSkge1xuICBpZiAoaXNGcm96ZW4ob2JqKSB8fCBpc0RyYWZ0KG9iaikgfHwgIWlzRHJhZnRhYmxlKG9iaikpXG4gICAgcmV0dXJuIG9iajtcbiAgaWYgKGdldEFyY2h0eXBlKG9iaikgPiAxKSB7XG4gICAgb2JqLnNldCA9IG9iai5hZGQgPSBvYmouY2xlYXIgPSBvYmouZGVsZXRlID0gZG9udE11dGF0ZUZyb3plbkNvbGxlY3Rpb25zO1xuICB9XG4gIE9iamVjdC5mcmVlemUob2JqKTtcbiAgaWYgKGRlZXApXG4gICAgT2JqZWN0LmVudHJpZXMob2JqKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IGZyZWV6ZSh2YWx1ZSwgdHJ1ZSkpO1xuICByZXR1cm4gb2JqO1xufVxuZnVuY3Rpb24gZG9udE11dGF0ZUZyb3plbkNvbGxlY3Rpb25zKCkge1xuICBkaWUoMik7XG59XG5mdW5jdGlvbiBpc0Zyb3plbihvYmopIHtcbiAgcmV0dXJuIE9iamVjdC5pc0Zyb3plbihvYmopO1xufVxuXG4vLyBzcmMvdXRpbHMvcGx1Z2lucy50c1xudmFyIHBsdWdpbnMgPSB7fTtcbmZ1bmN0aW9uIGdldFBsdWdpbihwbHVnaW5LZXkpIHtcbiAgY29uc3QgcGx1Z2luID0gcGx1Z2luc1twbHVnaW5LZXldO1xuICBpZiAoIXBsdWdpbikge1xuICAgIGRpZSgwLCBwbHVnaW5LZXkpO1xuICB9XG4gIHJldHVybiBwbHVnaW47XG59XG5mdW5jdGlvbiBsb2FkUGx1Z2luKHBsdWdpbktleSwgaW1wbGVtZW50YXRpb24pIHtcbiAgaWYgKCFwbHVnaW5zW3BsdWdpbktleV0pXG4gICAgcGx1Z2luc1twbHVnaW5LZXldID0gaW1wbGVtZW50YXRpb247XG59XG5cbi8vIHNyYy9jb3JlL3Njb3BlLnRzXG52YXIgY3VycmVudFNjb3BlO1xuZnVuY3Rpb24gZ2V0Q3VycmVudFNjb3BlKCkge1xuICByZXR1cm4gY3VycmVudFNjb3BlO1xufVxuZnVuY3Rpb24gY3JlYXRlU2NvcGUocGFyZW50XywgaW1tZXJfKSB7XG4gIHJldHVybiB7XG4gICAgZHJhZnRzXzogW10sXG4gICAgcGFyZW50XyxcbiAgICBpbW1lcl8sXG4gICAgLy8gV2hlbmV2ZXIgdGhlIG1vZGlmaWVkIGRyYWZ0IGNvbnRhaW5zIGEgZHJhZnQgZnJvbSBhbm90aGVyIHNjb3BlLCB3ZVxuICAgIC8vIG5lZWQgdG8gcHJldmVudCBhdXRvLWZyZWV6aW5nIHNvIHRoZSB1bm93bmVkIGRyYWZ0IGNhbiBiZSBmaW5hbGl6ZWQuXG4gICAgY2FuQXV0b0ZyZWV6ZV86IHRydWUsXG4gICAgdW5maW5hbGl6ZWREcmFmdHNfOiAwXG4gIH07XG59XG5mdW5jdGlvbiB1c2VQYXRjaGVzSW5TY29wZShzY29wZSwgcGF0Y2hMaXN0ZW5lcikge1xuICBpZiAocGF0Y2hMaXN0ZW5lcikge1xuICAgIGdldFBsdWdpbihcIlBhdGNoZXNcIik7XG4gICAgc2NvcGUucGF0Y2hlc18gPSBbXTtcbiAgICBzY29wZS5pbnZlcnNlUGF0Y2hlc18gPSBbXTtcbiAgICBzY29wZS5wYXRjaExpc3RlbmVyXyA9IHBhdGNoTGlzdGVuZXI7XG4gIH1cbn1cbmZ1bmN0aW9uIHJldm9rZVNjb3BlKHNjb3BlKSB7XG4gIGxlYXZlU2NvcGUoc2NvcGUpO1xuICBzY29wZS5kcmFmdHNfLmZvckVhY2gocmV2b2tlRHJhZnQpO1xuICBzY29wZS5kcmFmdHNfID0gbnVsbDtcbn1cbmZ1bmN0aW9uIGxlYXZlU2NvcGUoc2NvcGUpIHtcbiAgaWYgKHNjb3BlID09PSBjdXJyZW50U2NvcGUpIHtcbiAgICBjdXJyZW50U2NvcGUgPSBzY29wZS5wYXJlbnRfO1xuICB9XG59XG5mdW5jdGlvbiBlbnRlclNjb3BlKGltbWVyMikge1xuICByZXR1cm4gY3VycmVudFNjb3BlID0gY3JlYXRlU2NvcGUoY3VycmVudFNjb3BlLCBpbW1lcjIpO1xufVxuZnVuY3Rpb24gcmV2b2tlRHJhZnQoZHJhZnQpIHtcbiAgY29uc3Qgc3RhdGUgPSBkcmFmdFtEUkFGVF9TVEFURV07XG4gIGlmIChzdGF0ZS50eXBlXyA9PT0gMCAvKiBPYmplY3QgKi8gfHwgc3RhdGUudHlwZV8gPT09IDEgLyogQXJyYXkgKi8pXG4gICAgc3RhdGUucmV2b2tlXygpO1xuICBlbHNlXG4gICAgc3RhdGUucmV2b2tlZF8gPSB0cnVlO1xufVxuXG4vLyBzcmMvY29yZS9maW5hbGl6ZS50c1xuZnVuY3Rpb24gcHJvY2Vzc1Jlc3VsdChyZXN1bHQsIHNjb3BlKSB7XG4gIHNjb3BlLnVuZmluYWxpemVkRHJhZnRzXyA9IHNjb3BlLmRyYWZ0c18ubGVuZ3RoO1xuICBjb25zdCBiYXNlRHJhZnQgPSBzY29wZS5kcmFmdHNfWzBdO1xuICBjb25zdCBpc1JlcGxhY2VkID0gcmVzdWx0ICE9PSB2b2lkIDAgJiYgcmVzdWx0ICE9PSBiYXNlRHJhZnQ7XG4gIGlmIChpc1JlcGxhY2VkKSB7XG4gICAgaWYgKGJhc2VEcmFmdFtEUkFGVF9TVEFURV0ubW9kaWZpZWRfKSB7XG4gICAgICByZXZva2VTY29wZShzY29wZSk7XG4gICAgICBkaWUoNCk7XG4gICAgfVxuICAgIGlmIChpc0RyYWZ0YWJsZShyZXN1bHQpKSB7XG4gICAgICByZXN1bHQgPSBmaW5hbGl6ZShzY29wZSwgcmVzdWx0KTtcbiAgICAgIGlmICghc2NvcGUucGFyZW50XylcbiAgICAgICAgbWF5YmVGcmVlemUoc2NvcGUsIHJlc3VsdCk7XG4gICAgfVxuICAgIGlmIChzY29wZS5wYXRjaGVzXykge1xuICAgICAgZ2V0UGx1Z2luKFwiUGF0Y2hlc1wiKS5nZW5lcmF0ZVJlcGxhY2VtZW50UGF0Y2hlc18oXG4gICAgICAgIGJhc2VEcmFmdFtEUkFGVF9TVEFURV0uYmFzZV8sXG4gICAgICAgIHJlc3VsdCxcbiAgICAgICAgc2NvcGUucGF0Y2hlc18sXG4gICAgICAgIHNjb3BlLmludmVyc2VQYXRjaGVzX1xuICAgICAgKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmVzdWx0ID0gZmluYWxpemUoc2NvcGUsIGJhc2VEcmFmdCwgW10pO1xuICB9XG4gIHJldm9rZVNjb3BlKHNjb3BlKTtcbiAgaWYgKHNjb3BlLnBhdGNoZXNfKSB7XG4gICAgc2NvcGUucGF0Y2hMaXN0ZW5lcl8oc2NvcGUucGF0Y2hlc18sIHNjb3BlLmludmVyc2VQYXRjaGVzXyk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdCAhPT0gTk9USElORyA/IHJlc3VsdCA6IHZvaWQgMDtcbn1cbmZ1bmN0aW9uIGZpbmFsaXplKHJvb3RTY29wZSwgdmFsdWUsIHBhdGgpIHtcbiAgaWYgKGlzRnJvemVuKHZhbHVlKSlcbiAgICByZXR1cm4gdmFsdWU7XG4gIGNvbnN0IHN0YXRlID0gdmFsdWVbRFJBRlRfU1RBVEVdO1xuICBpZiAoIXN0YXRlKSB7XG4gICAgZWFjaChcbiAgICAgIHZhbHVlLFxuICAgICAgKGtleSwgY2hpbGRWYWx1ZSkgPT4gZmluYWxpemVQcm9wZXJ0eShyb290U2NvcGUsIHN0YXRlLCB2YWx1ZSwga2V5LCBjaGlsZFZhbHVlLCBwYXRoKVxuICAgICk7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIGlmIChzdGF0ZS5zY29wZV8gIT09IHJvb3RTY29wZSlcbiAgICByZXR1cm4gdmFsdWU7XG4gIGlmICghc3RhdGUubW9kaWZpZWRfKSB7XG4gICAgbWF5YmVGcmVlemUocm9vdFNjb3BlLCBzdGF0ZS5iYXNlXywgdHJ1ZSk7XG4gICAgcmV0dXJuIHN0YXRlLmJhc2VfO1xuICB9XG4gIGlmICghc3RhdGUuZmluYWxpemVkXykge1xuICAgIHN0YXRlLmZpbmFsaXplZF8gPSB0cnVlO1xuICAgIHN0YXRlLnNjb3BlXy51bmZpbmFsaXplZERyYWZ0c18tLTtcbiAgICBjb25zdCByZXN1bHQgPSBzdGF0ZS5jb3B5XztcbiAgICBsZXQgcmVzdWx0RWFjaCA9IHJlc3VsdDtcbiAgICBsZXQgaXNTZXQyID0gZmFsc2U7XG4gICAgaWYgKHN0YXRlLnR5cGVfID09PSAzIC8qIFNldCAqLykge1xuICAgICAgcmVzdWx0RWFjaCA9IG5ldyBTZXQocmVzdWx0KTtcbiAgICAgIHJlc3VsdC5jbGVhcigpO1xuICAgICAgaXNTZXQyID0gdHJ1ZTtcbiAgICB9XG4gICAgZWFjaChcbiAgICAgIHJlc3VsdEVhY2gsXG4gICAgICAoa2V5LCBjaGlsZFZhbHVlKSA9PiBmaW5hbGl6ZVByb3BlcnR5KHJvb3RTY29wZSwgc3RhdGUsIHJlc3VsdCwga2V5LCBjaGlsZFZhbHVlLCBwYXRoLCBpc1NldDIpXG4gICAgKTtcbiAgICBtYXliZUZyZWV6ZShyb290U2NvcGUsIHJlc3VsdCwgZmFsc2UpO1xuICAgIGlmIChwYXRoICYmIHJvb3RTY29wZS5wYXRjaGVzXykge1xuICAgICAgZ2V0UGx1Z2luKFwiUGF0Y2hlc1wiKS5nZW5lcmF0ZVBhdGNoZXNfKFxuICAgICAgICBzdGF0ZSxcbiAgICAgICAgcGF0aCxcbiAgICAgICAgcm9vdFNjb3BlLnBhdGNoZXNfLFxuICAgICAgICByb290U2NvcGUuaW52ZXJzZVBhdGNoZXNfXG4gICAgICApO1xuICAgIH1cbiAgfVxuICByZXR1cm4gc3RhdGUuY29weV87XG59XG5mdW5jdGlvbiBmaW5hbGl6ZVByb3BlcnR5KHJvb3RTY29wZSwgcGFyZW50U3RhdGUsIHRhcmdldE9iamVjdCwgcHJvcCwgY2hpbGRWYWx1ZSwgcm9vdFBhdGgsIHRhcmdldElzU2V0KSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiYgY2hpbGRWYWx1ZSA9PT0gdGFyZ2V0T2JqZWN0KVxuICAgIGRpZSg1KTtcbiAgaWYgKGlzRHJhZnQoY2hpbGRWYWx1ZSkpIHtcbiAgICBjb25zdCBwYXRoID0gcm9vdFBhdGggJiYgcGFyZW50U3RhdGUgJiYgcGFyZW50U3RhdGUudHlwZV8gIT09IDMgLyogU2V0ICovICYmIC8vIFNldCBvYmplY3RzIGFyZSBhdG9taWMgc2luY2UgdGhleSBoYXZlIG5vIGtleXMuXG4gICAgIWhhcyhwYXJlbnRTdGF0ZS5hc3NpZ25lZF8sIHByb3ApID8gcm9vdFBhdGguY29uY2F0KHByb3ApIDogdm9pZCAwO1xuICAgIGNvbnN0IHJlcyA9IGZpbmFsaXplKHJvb3RTY29wZSwgY2hpbGRWYWx1ZSwgcGF0aCk7XG4gICAgc2V0KHRhcmdldE9iamVjdCwgcHJvcCwgcmVzKTtcbiAgICBpZiAoaXNEcmFmdChyZXMpKSB7XG4gICAgICByb290U2NvcGUuY2FuQXV0b0ZyZWV6ZV8gPSBmYWxzZTtcbiAgICB9IGVsc2VcbiAgICAgIHJldHVybjtcbiAgfSBlbHNlIGlmICh0YXJnZXRJc1NldCkge1xuICAgIHRhcmdldE9iamVjdC5hZGQoY2hpbGRWYWx1ZSk7XG4gIH1cbiAgaWYgKGlzRHJhZnRhYmxlKGNoaWxkVmFsdWUpICYmICFpc0Zyb3plbihjaGlsZFZhbHVlKSkge1xuICAgIGlmICghcm9vdFNjb3BlLmltbWVyXy5hdXRvRnJlZXplXyAmJiByb290U2NvcGUudW5maW5hbGl6ZWREcmFmdHNfIDwgMSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBmaW5hbGl6ZShyb290U2NvcGUsIGNoaWxkVmFsdWUpO1xuICAgIGlmICgoIXBhcmVudFN0YXRlIHx8ICFwYXJlbnRTdGF0ZS5zY29wZV8ucGFyZW50XykgJiYgdHlwZW9mIHByb3AgIT09IFwic3ltYm9sXCIgJiYgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHRhcmdldE9iamVjdCwgcHJvcCkpXG4gICAgICBtYXliZUZyZWV6ZShyb290U2NvcGUsIGNoaWxkVmFsdWUpO1xuICB9XG59XG5mdW5jdGlvbiBtYXliZUZyZWV6ZShzY29wZSwgdmFsdWUsIGRlZXAgPSBmYWxzZSkge1xuICBpZiAoIXNjb3BlLnBhcmVudF8gJiYgc2NvcGUuaW1tZXJfLmF1dG9GcmVlemVfICYmIHNjb3BlLmNhbkF1dG9GcmVlemVfKSB7XG4gICAgZnJlZXplKHZhbHVlLCBkZWVwKTtcbiAgfVxufVxuXG4vLyBzcmMvY29yZS9wcm94eS50c1xuZnVuY3Rpb24gY3JlYXRlUHJveHlQcm94eShiYXNlLCBwYXJlbnQpIHtcbiAgY29uc3QgaXNBcnJheSA9IEFycmF5LmlzQXJyYXkoYmFzZSk7XG4gIGNvbnN0IHN0YXRlID0ge1xuICAgIHR5cGVfOiBpc0FycmF5ID8gMSAvKiBBcnJheSAqLyA6IDAgLyogT2JqZWN0ICovLFxuICAgIC8vIFRyYWNrIHdoaWNoIHByb2R1Y2UgY2FsbCB0aGlzIGlzIGFzc29jaWF0ZWQgd2l0aC5cbiAgICBzY29wZV86IHBhcmVudCA/IHBhcmVudC5zY29wZV8gOiBnZXRDdXJyZW50U2NvcGUoKSxcbiAgICAvLyBUcnVlIGZvciBib3RoIHNoYWxsb3cgYW5kIGRlZXAgY2hhbmdlcy5cbiAgICBtb2RpZmllZF86IGZhbHNlLFxuICAgIC8vIFVzZWQgZHVyaW5nIGZpbmFsaXphdGlvbi5cbiAgICBmaW5hbGl6ZWRfOiBmYWxzZSxcbiAgICAvLyBUcmFjayB3aGljaCBwcm9wZXJ0aWVzIGhhdmUgYmVlbiBhc3NpZ25lZCAodHJ1ZSkgb3IgZGVsZXRlZCAoZmFsc2UpLlxuICAgIGFzc2lnbmVkXzoge30sXG4gICAgLy8gVGhlIHBhcmVudCBkcmFmdCBzdGF0ZS5cbiAgICBwYXJlbnRfOiBwYXJlbnQsXG4gICAgLy8gVGhlIGJhc2Ugc3RhdGUuXG4gICAgYmFzZV86IGJhc2UsXG4gICAgLy8gVGhlIGJhc2UgcHJveHkuXG4gICAgZHJhZnRfOiBudWxsLFxuICAgIC8vIHNldCBiZWxvd1xuICAgIC8vIFRoZSBiYXNlIGNvcHkgd2l0aCBhbnkgdXBkYXRlZCB2YWx1ZXMuXG4gICAgY29weV86IG51bGwsXG4gICAgLy8gQ2FsbGVkIGJ5IHRoZSBgcHJvZHVjZWAgZnVuY3Rpb24uXG4gICAgcmV2b2tlXzogbnVsbCxcbiAgICBpc01hbnVhbF86IGZhbHNlXG4gIH07XG4gIGxldCB0YXJnZXQgPSBzdGF0ZTtcbiAgbGV0IHRyYXBzID0gb2JqZWN0VHJhcHM7XG4gIGlmIChpc0FycmF5KSB7XG4gICAgdGFyZ2V0ID0gW3N0YXRlXTtcbiAgICB0cmFwcyA9IGFycmF5VHJhcHM7XG4gIH1cbiAgY29uc3QgeyByZXZva2UsIHByb3h5IH0gPSBQcm94eS5yZXZvY2FibGUodGFyZ2V0LCB0cmFwcyk7XG4gIHN0YXRlLmRyYWZ0XyA9IHByb3h5O1xuICBzdGF0ZS5yZXZva2VfID0gcmV2b2tlO1xuICByZXR1cm4gcHJveHk7XG59XG52YXIgb2JqZWN0VHJhcHMgPSB7XG4gIGdldChzdGF0ZSwgcHJvcCkge1xuICAgIGlmIChwcm9wID09PSBEUkFGVF9TVEFURSlcbiAgICAgIHJldHVybiBzdGF0ZTtcbiAgICBjb25zdCBzb3VyY2UgPSBsYXRlc3Qoc3RhdGUpO1xuICAgIGlmICghaGFzKHNvdXJjZSwgcHJvcCkpIHtcbiAgICAgIHJldHVybiByZWFkUHJvcEZyb21Qcm90byhzdGF0ZSwgc291cmNlLCBwcm9wKTtcbiAgICB9XG4gICAgY29uc3QgdmFsdWUgPSBzb3VyY2VbcHJvcF07XG4gICAgaWYgKHN0YXRlLmZpbmFsaXplZF8gfHwgIWlzRHJhZnRhYmxlKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICBpZiAodmFsdWUgPT09IHBlZWsoc3RhdGUuYmFzZV8sIHByb3ApKSB7XG4gICAgICBwcmVwYXJlQ29weShzdGF0ZSk7XG4gICAgICByZXR1cm4gc3RhdGUuY29weV9bcHJvcF0gPSBjcmVhdGVQcm94eSh2YWx1ZSwgc3RhdGUpO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG4gIH0sXG4gIGhhcyhzdGF0ZSwgcHJvcCkge1xuICAgIHJldHVybiBwcm9wIGluIGxhdGVzdChzdGF0ZSk7XG4gIH0sXG4gIG93bktleXMoc3RhdGUpIHtcbiAgICByZXR1cm4gUmVmbGVjdC5vd25LZXlzKGxhdGVzdChzdGF0ZSkpO1xuICB9LFxuICBzZXQoc3RhdGUsIHByb3AsIHZhbHVlKSB7XG4gICAgY29uc3QgZGVzYyA9IGdldERlc2NyaXB0b3JGcm9tUHJvdG8obGF0ZXN0KHN0YXRlKSwgcHJvcCk7XG4gICAgaWYgKGRlc2M/LnNldCkge1xuICAgICAgZGVzYy5zZXQuY2FsbChzdGF0ZS5kcmFmdF8sIHZhbHVlKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAoIXN0YXRlLm1vZGlmaWVkXykge1xuICAgICAgY29uc3QgY3VycmVudDIgPSBwZWVrKGxhdGVzdChzdGF0ZSksIHByb3ApO1xuICAgICAgY29uc3QgY3VycmVudFN0YXRlID0gY3VycmVudDI/LltEUkFGVF9TVEFURV07XG4gICAgICBpZiAoY3VycmVudFN0YXRlICYmIGN1cnJlbnRTdGF0ZS5iYXNlXyA9PT0gdmFsdWUpIHtcbiAgICAgICAgc3RhdGUuY29weV9bcHJvcF0gPSB2YWx1ZTtcbiAgICAgICAgc3RhdGUuYXNzaWduZWRfW3Byb3BdID0gZmFsc2U7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKGlzKHZhbHVlLCBjdXJyZW50MikgJiYgKHZhbHVlICE9PSB2b2lkIDAgfHwgaGFzKHN0YXRlLmJhc2VfLCBwcm9wKSkpXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgcHJlcGFyZUNvcHkoc3RhdGUpO1xuICAgICAgbWFya0NoYW5nZWQoc3RhdGUpO1xuICAgIH1cbiAgICBpZiAoc3RhdGUuY29weV9bcHJvcF0gPT09IHZhbHVlICYmIC8vIHNwZWNpYWwgY2FzZTogaGFuZGxlIG5ldyBwcm9wcyB3aXRoIHZhbHVlICd1bmRlZmluZWQnXG4gICAgKHZhbHVlICE9PSB2b2lkIDAgfHwgcHJvcCBpbiBzdGF0ZS5jb3B5XykgfHwgLy8gc3BlY2lhbCBjYXNlOiBOYU5cbiAgICBOdW1iZXIuaXNOYU4odmFsdWUpICYmIE51bWJlci5pc05hTihzdGF0ZS5jb3B5X1twcm9wXSkpXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICBzdGF0ZS5jb3B5X1twcm9wXSA9IHZhbHVlO1xuICAgIHN0YXRlLmFzc2lnbmVkX1twcm9wXSA9IHRydWU7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0sXG4gIGRlbGV0ZVByb3BlcnR5KHN0YXRlLCBwcm9wKSB7XG4gICAgaWYgKHBlZWsoc3RhdGUuYmFzZV8sIHByb3ApICE9PSB2b2lkIDAgfHwgcHJvcCBpbiBzdGF0ZS5iYXNlXykge1xuICAgICAgc3RhdGUuYXNzaWduZWRfW3Byb3BdID0gZmFsc2U7XG4gICAgICBwcmVwYXJlQ29weShzdGF0ZSk7XG4gICAgICBtYXJrQ2hhbmdlZChzdGF0ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlbGV0ZSBzdGF0ZS5hc3NpZ25lZF9bcHJvcF07XG4gICAgfVxuICAgIGlmIChzdGF0ZS5jb3B5Xykge1xuICAgICAgZGVsZXRlIHN0YXRlLmNvcHlfW3Byb3BdO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSxcbiAgLy8gTm90ZTogV2UgbmV2ZXIgY29lcmNlIGBkZXNjLnZhbHVlYCBpbnRvIGFuIEltbWVyIGRyYWZ0LCBiZWNhdXNlIHdlIGNhbid0IG1ha2VcbiAgLy8gdGhlIHNhbWUgZ3VhcmFudGVlIGluIEVTNSBtb2RlLlxuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc3RhdGUsIHByb3ApIHtcbiAgICBjb25zdCBvd25lciA9IGxhdGVzdChzdGF0ZSk7XG4gICAgY29uc3QgZGVzYyA9IFJlZmxlY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG93bmVyLCBwcm9wKTtcbiAgICBpZiAoIWRlc2MpXG4gICAgICByZXR1cm4gZGVzYztcbiAgICByZXR1cm4ge1xuICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHN0YXRlLnR5cGVfICE9PSAxIC8qIEFycmF5ICovIHx8IHByb3AgIT09IFwibGVuZ3RoXCIsXG4gICAgICBlbnVtZXJhYmxlOiBkZXNjLmVudW1lcmFibGUsXG4gICAgICB2YWx1ZTogb3duZXJbcHJvcF1cbiAgICB9O1xuICB9LFxuICBkZWZpbmVQcm9wZXJ0eSgpIHtcbiAgICBkaWUoMTEpO1xuICB9LFxuICBnZXRQcm90b3R5cGVPZihzdGF0ZSkge1xuICAgIHJldHVybiBnZXRQcm90b3R5cGVPZihzdGF0ZS5iYXNlXyk7XG4gIH0sXG4gIHNldFByb3RvdHlwZU9mKCkge1xuICAgIGRpZSgxMik7XG4gIH1cbn07XG52YXIgYXJyYXlUcmFwcyA9IHt9O1xuZWFjaChvYmplY3RUcmFwcywgKGtleSwgZm4pID0+IHtcbiAgYXJyYXlUcmFwc1trZXldID0gZnVuY3Rpb24oKSB7XG4gICAgYXJndW1lbnRzWzBdID0gYXJndW1lbnRzWzBdWzBdO1xuICAgIHJldHVybiBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9O1xufSk7XG5hcnJheVRyYXBzLmRlbGV0ZVByb3BlcnR5ID0gZnVuY3Rpb24oc3RhdGUsIHByb3ApIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiAmJiBpc05hTihwYXJzZUludChwcm9wKSkpXG4gICAgZGllKDEzKTtcbiAgcmV0dXJuIGFycmF5VHJhcHMuc2V0LmNhbGwodGhpcywgc3RhdGUsIHByb3AsIHZvaWQgMCk7XG59O1xuYXJyYXlUcmFwcy5zZXQgPSBmdW5jdGlvbihzdGF0ZSwgcHJvcCwgdmFsdWUpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiAmJiBwcm9wICE9PSBcImxlbmd0aFwiICYmIGlzTmFOKHBhcnNlSW50KHByb3ApKSlcbiAgICBkaWUoMTQpO1xuICByZXR1cm4gb2JqZWN0VHJhcHMuc2V0LmNhbGwodGhpcywgc3RhdGVbMF0sIHByb3AsIHZhbHVlLCBzdGF0ZVswXSk7XG59O1xuZnVuY3Rpb24gcGVlayhkcmFmdCwgcHJvcCkge1xuICBjb25zdCBzdGF0ZSA9IGRyYWZ0W0RSQUZUX1NUQVRFXTtcbiAgY29uc3Qgc291cmNlID0gc3RhdGUgPyBsYXRlc3Qoc3RhdGUpIDogZHJhZnQ7XG4gIHJldHVybiBzb3VyY2VbcHJvcF07XG59XG5mdW5jdGlvbiByZWFkUHJvcEZyb21Qcm90byhzdGF0ZSwgc291cmNlLCBwcm9wKSB7XG4gIGNvbnN0IGRlc2MgPSBnZXREZXNjcmlwdG9yRnJvbVByb3RvKHNvdXJjZSwgcHJvcCk7XG4gIHJldHVybiBkZXNjID8gYHZhbHVlYCBpbiBkZXNjID8gZGVzYy52YWx1ZSA6IChcbiAgICAvLyBUaGlzIGlzIGEgdmVyeSBzcGVjaWFsIGNhc2UsIGlmIHRoZSBwcm9wIGlzIGEgZ2V0dGVyIGRlZmluZWQgYnkgdGhlXG4gICAgLy8gcHJvdG90eXBlLCB3ZSBzaG91bGQgaW52b2tlIGl0IHdpdGggdGhlIGRyYWZ0IGFzIGNvbnRleHQhXG4gICAgZGVzYy5nZXQ/LmNhbGwoc3RhdGUuZHJhZnRfKVxuICApIDogdm9pZCAwO1xufVxuZnVuY3Rpb24gZ2V0RGVzY3JpcHRvckZyb21Qcm90byhzb3VyY2UsIHByb3ApIHtcbiAgaWYgKCEocHJvcCBpbiBzb3VyY2UpKVxuICAgIHJldHVybiB2b2lkIDA7XG4gIGxldCBwcm90byA9IGdldFByb3RvdHlwZU9mKHNvdXJjZSk7XG4gIHdoaWxlIChwcm90bykge1xuICAgIGNvbnN0IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHByb3RvLCBwcm9wKTtcbiAgICBpZiAoZGVzYylcbiAgICAgIHJldHVybiBkZXNjO1xuICAgIHByb3RvID0gZ2V0UHJvdG90eXBlT2YocHJvdG8pO1xuICB9XG4gIHJldHVybiB2b2lkIDA7XG59XG5mdW5jdGlvbiBtYXJrQ2hhbmdlZChzdGF0ZSkge1xuICBpZiAoIXN0YXRlLm1vZGlmaWVkXykge1xuICAgIHN0YXRlLm1vZGlmaWVkXyA9IHRydWU7XG4gICAgaWYgKHN0YXRlLnBhcmVudF8pIHtcbiAgICAgIG1hcmtDaGFuZ2VkKHN0YXRlLnBhcmVudF8pO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gcHJlcGFyZUNvcHkoc3RhdGUpIHtcbiAgaWYgKCFzdGF0ZS5jb3B5Xykge1xuICAgIHN0YXRlLmNvcHlfID0gc2hhbGxvd0NvcHkoXG4gICAgICBzdGF0ZS5iYXNlXyxcbiAgICAgIHN0YXRlLnNjb3BlXy5pbW1lcl8udXNlU3RyaWN0U2hhbGxvd0NvcHlfXG4gICAgKTtcbiAgfVxufVxuXG4vLyBzcmMvY29yZS9pbW1lckNsYXNzLnRzXG52YXIgSW1tZXIyID0gY2xhc3Mge1xuICBjb25zdHJ1Y3Rvcihjb25maWcpIHtcbiAgICB0aGlzLmF1dG9GcmVlemVfID0gdHJ1ZTtcbiAgICB0aGlzLnVzZVN0cmljdFNoYWxsb3dDb3B5XyA9IGZhbHNlO1xuICAgIC8qKlxuICAgICAqIFRoZSBgcHJvZHVjZWAgZnVuY3Rpb24gdGFrZXMgYSB2YWx1ZSBhbmQgYSBcInJlY2lwZSBmdW5jdGlvblwiICh3aG9zZVxuICAgICAqIHJldHVybiB2YWx1ZSBvZnRlbiBkZXBlbmRzIG9uIHRoZSBiYXNlIHN0YXRlKS4gVGhlIHJlY2lwZSBmdW5jdGlvbiBpc1xuICAgICAqIGZyZWUgdG8gbXV0YXRlIGl0cyBmaXJzdCBhcmd1bWVudCBob3dldmVyIGl0IHdhbnRzLiBBbGwgbXV0YXRpb25zIGFyZVxuICAgICAqIG9ubHkgZXZlciBhcHBsaWVkIHRvIGEgX19jb3B5X18gb2YgdGhlIGJhc2Ugc3RhdGUuXG4gICAgICpcbiAgICAgKiBQYXNzIG9ubHkgYSBmdW5jdGlvbiB0byBjcmVhdGUgYSBcImN1cnJpZWQgcHJvZHVjZXJcIiB3aGljaCByZWxpZXZlcyB5b3VcbiAgICAgKiBmcm9tIHBhc3NpbmcgdGhlIHJlY2lwZSBmdW5jdGlvbiBldmVyeSB0aW1lLlxuICAgICAqXG4gICAgICogT25seSBwbGFpbiBvYmplY3RzIGFuZCBhcnJheXMgYXJlIG1hZGUgbXV0YWJsZS4gQWxsIG90aGVyIG9iamVjdHMgYXJlXG4gICAgICogY29uc2lkZXJlZCB1bmNvcHlhYmxlLlxuICAgICAqXG4gICAgICogTm90ZTogVGhpcyBmdW5jdGlvbiBpcyBfX2JvdW5kX18gdG8gaXRzIGBJbW1lcmAgaW5zdGFuY2UuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge2FueX0gYmFzZSAtIHRoZSBpbml0aWFsIHN0YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcmVjaXBlIC0gZnVuY3Rpb24gdGhhdCByZWNlaXZlcyBhIHByb3h5IG9mIHRoZSBiYXNlIHN0YXRlIGFzIGZpcnN0IGFyZ3VtZW50IGFuZCB3aGljaCBjYW4gYmUgZnJlZWx5IG1vZGlmaWVkXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcGF0Y2hMaXN0ZW5lciAtIG9wdGlvbmFsIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBjYWxsZWQgd2l0aCBhbGwgdGhlIHBhdGNoZXMgcHJvZHVjZWQgaGVyZVxuICAgICAqIEByZXR1cm5zIHthbnl9IGEgbmV3IHN0YXRlLCBvciB0aGUgaW5pdGlhbCBzdGF0ZSBpZiBub3RoaW5nIHdhcyBtb2RpZmllZFxuICAgICAqL1xuICAgIHRoaXMucHJvZHVjZSA9IChiYXNlLCByZWNpcGUsIHBhdGNoTGlzdGVuZXIpID0+IHtcbiAgICAgIGlmICh0eXBlb2YgYmFzZSA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiByZWNpcGUgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICBjb25zdCBkZWZhdWx0QmFzZSA9IHJlY2lwZTtcbiAgICAgICAgcmVjaXBlID0gYmFzZTtcbiAgICAgICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiBjdXJyaWVkUHJvZHVjZShiYXNlMiA9IGRlZmF1bHRCYXNlLCAuLi5hcmdzKSB7XG4gICAgICAgICAgcmV0dXJuIHNlbGYucHJvZHVjZShiYXNlMiwgKGRyYWZ0KSA9PiByZWNpcGUuY2FsbCh0aGlzLCBkcmFmdCwgLi4uYXJncykpO1xuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiByZWNpcGUgIT09IFwiZnVuY3Rpb25cIilcbiAgICAgICAgZGllKDYpO1xuICAgICAgaWYgKHBhdGNoTGlzdGVuZXIgIT09IHZvaWQgMCAmJiB0eXBlb2YgcGF0Y2hMaXN0ZW5lciAhPT0gXCJmdW5jdGlvblwiKVxuICAgICAgICBkaWUoNyk7XG4gICAgICBsZXQgcmVzdWx0O1xuICAgICAgaWYgKGlzRHJhZnRhYmxlKGJhc2UpKSB7XG4gICAgICAgIGNvbnN0IHNjb3BlID0gZW50ZXJTY29wZSh0aGlzKTtcbiAgICAgICAgY29uc3QgcHJveHkgPSBjcmVhdGVQcm94eShiYXNlLCB2b2lkIDApO1xuICAgICAgICBsZXQgaGFzRXJyb3IgPSB0cnVlO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHJlc3VsdCA9IHJlY2lwZShwcm94eSk7XG4gICAgICAgICAgaGFzRXJyb3IgPSBmYWxzZTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICBpZiAoaGFzRXJyb3IpXG4gICAgICAgICAgICByZXZva2VTY29wZShzY29wZSk7XG4gICAgICAgICAgZWxzZVxuICAgICAgICAgICAgbGVhdmVTY29wZShzY29wZSk7XG4gICAgICAgIH1cbiAgICAgICAgdXNlUGF0Y2hlc0luU2NvcGUoc2NvcGUsIHBhdGNoTGlzdGVuZXIpO1xuICAgICAgICByZXR1cm4gcHJvY2Vzc1Jlc3VsdChyZXN1bHQsIHNjb3BlKTtcbiAgICAgIH0gZWxzZSBpZiAoIWJhc2UgfHwgdHlwZW9mIGJhc2UgIT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgcmVzdWx0ID0gcmVjaXBlKGJhc2UpO1xuICAgICAgICBpZiAocmVzdWx0ID09PSB2b2lkIDApXG4gICAgICAgICAgcmVzdWx0ID0gYmFzZTtcbiAgICAgICAgaWYgKHJlc3VsdCA9PT0gTk9USElORylcbiAgICAgICAgICByZXN1bHQgPSB2b2lkIDA7XG4gICAgICAgIGlmICh0aGlzLmF1dG9GcmVlemVfKVxuICAgICAgICAgIGZyZWV6ZShyZXN1bHQsIHRydWUpO1xuICAgICAgICBpZiAocGF0Y2hMaXN0ZW5lcikge1xuICAgICAgICAgIGNvbnN0IHAgPSBbXTtcbiAgICAgICAgICBjb25zdCBpcCA9IFtdO1xuICAgICAgICAgIGdldFBsdWdpbihcIlBhdGNoZXNcIikuZ2VuZXJhdGVSZXBsYWNlbWVudFBhdGNoZXNfKGJhc2UsIHJlc3VsdCwgcCwgaXApO1xuICAgICAgICAgIHBhdGNoTGlzdGVuZXIocCwgaXApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9IGVsc2VcbiAgICAgICAgZGllKDEsIGJhc2UpO1xuICAgIH07XG4gICAgdGhpcy5wcm9kdWNlV2l0aFBhdGNoZXMgPSAoYmFzZSwgcmVjaXBlKSA9PiB7XG4gICAgICBpZiAodHlwZW9mIGJhc2UgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICByZXR1cm4gKHN0YXRlLCAuLi5hcmdzKSA9PiB0aGlzLnByb2R1Y2VXaXRoUGF0Y2hlcyhzdGF0ZSwgKGRyYWZ0KSA9PiBiYXNlKGRyYWZ0LCAuLi5hcmdzKSk7XG4gICAgICB9XG4gICAgICBsZXQgcGF0Y2hlcywgaW52ZXJzZVBhdGNoZXM7XG4gICAgICBjb25zdCByZXN1bHQgPSB0aGlzLnByb2R1Y2UoYmFzZSwgcmVjaXBlLCAocCwgaXApID0+IHtcbiAgICAgICAgcGF0Y2hlcyA9IHA7XG4gICAgICAgIGludmVyc2VQYXRjaGVzID0gaXA7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBbcmVzdWx0LCBwYXRjaGVzLCBpbnZlcnNlUGF0Y2hlc107XG4gICAgfTtcbiAgICBpZiAodHlwZW9mIGNvbmZpZz8uYXV0b0ZyZWV6ZSA9PT0gXCJib29sZWFuXCIpXG4gICAgICB0aGlzLnNldEF1dG9GcmVlemUoY29uZmlnLmF1dG9GcmVlemUpO1xuICAgIGlmICh0eXBlb2YgY29uZmlnPy51c2VTdHJpY3RTaGFsbG93Q29weSA9PT0gXCJib29sZWFuXCIpXG4gICAgICB0aGlzLnNldFVzZVN0cmljdFNoYWxsb3dDb3B5KGNvbmZpZy51c2VTdHJpY3RTaGFsbG93Q29weSk7XG4gIH1cbiAgY3JlYXRlRHJhZnQoYmFzZSkge1xuICAgIGlmICghaXNEcmFmdGFibGUoYmFzZSkpXG4gICAgICBkaWUoOCk7XG4gICAgaWYgKGlzRHJhZnQoYmFzZSkpXG4gICAgICBiYXNlID0gY3VycmVudChiYXNlKTtcbiAgICBjb25zdCBzY29wZSA9IGVudGVyU2NvcGUodGhpcyk7XG4gICAgY29uc3QgcHJveHkgPSBjcmVhdGVQcm94eShiYXNlLCB2b2lkIDApO1xuICAgIHByb3h5W0RSQUZUX1NUQVRFXS5pc01hbnVhbF8gPSB0cnVlO1xuICAgIGxlYXZlU2NvcGUoc2NvcGUpO1xuICAgIHJldHVybiBwcm94eTtcbiAgfVxuICBmaW5pc2hEcmFmdChkcmFmdCwgcGF0Y2hMaXN0ZW5lcikge1xuICAgIGNvbnN0IHN0YXRlID0gZHJhZnQgJiYgZHJhZnRbRFJBRlRfU1RBVEVdO1xuICAgIGlmICghc3RhdGUgfHwgIXN0YXRlLmlzTWFudWFsXylcbiAgICAgIGRpZSg5KTtcbiAgICBjb25zdCB7IHNjb3BlXzogc2NvcGUgfSA9IHN0YXRlO1xuICAgIHVzZVBhdGNoZXNJblNjb3BlKHNjb3BlLCBwYXRjaExpc3RlbmVyKTtcbiAgICByZXR1cm4gcHJvY2Vzc1Jlc3VsdCh2b2lkIDAsIHNjb3BlKTtcbiAgfVxuICAvKipcbiAgICogUGFzcyB0cnVlIHRvIGF1dG9tYXRpY2FsbHkgZnJlZXplIGFsbCBjb3BpZXMgY3JlYXRlZCBieSBJbW1lci5cbiAgICpcbiAgICogQnkgZGVmYXVsdCwgYXV0by1mcmVlemluZyBpcyBlbmFibGVkLlxuICAgKi9cbiAgc2V0QXV0b0ZyZWV6ZSh2YWx1ZSkge1xuICAgIHRoaXMuYXV0b0ZyZWV6ZV8gPSB2YWx1ZTtcbiAgfVxuICAvKipcbiAgICogUGFzcyB0cnVlIHRvIGVuYWJsZSBzdHJpY3Qgc2hhbGxvdyBjb3B5LlxuICAgKlxuICAgKiBCeSBkZWZhdWx0LCBpbW1lciBkb2VzIG5vdCBjb3B5IHRoZSBvYmplY3QgZGVzY3JpcHRvcnMgc3VjaCBhcyBnZXR0ZXIsIHNldHRlciBhbmQgbm9uLWVudW1yYWJsZSBwcm9wZXJ0aWVzLlxuICAgKi9cbiAgc2V0VXNlU3RyaWN0U2hhbGxvd0NvcHkodmFsdWUpIHtcbiAgICB0aGlzLnVzZVN0cmljdFNoYWxsb3dDb3B5XyA9IHZhbHVlO1xuICB9XG4gIGFwcGx5UGF0Y2hlcyhiYXNlLCBwYXRjaGVzKSB7XG4gICAgbGV0IGk7XG4gICAgZm9yIChpID0gcGF0Y2hlcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgY29uc3QgcGF0Y2ggPSBwYXRjaGVzW2ldO1xuICAgICAgaWYgKHBhdGNoLnBhdGgubGVuZ3RoID09PSAwICYmIHBhdGNoLm9wID09PSBcInJlcGxhY2VcIikge1xuICAgICAgICBiYXNlID0gcGF0Y2gudmFsdWU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoaSA+IC0xKSB7XG4gICAgICBwYXRjaGVzID0gcGF0Y2hlcy5zbGljZShpICsgMSk7XG4gICAgfVxuICAgIGNvbnN0IGFwcGx5UGF0Y2hlc0ltcGwgPSBnZXRQbHVnaW4oXCJQYXRjaGVzXCIpLmFwcGx5UGF0Y2hlc187XG4gICAgaWYgKGlzRHJhZnQoYmFzZSkpIHtcbiAgICAgIHJldHVybiBhcHBseVBhdGNoZXNJbXBsKGJhc2UsIHBhdGNoZXMpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5wcm9kdWNlKFxuICAgICAgYmFzZSxcbiAgICAgIChkcmFmdCkgPT4gYXBwbHlQYXRjaGVzSW1wbChkcmFmdCwgcGF0Y2hlcylcbiAgICApO1xuICB9XG59O1xuZnVuY3Rpb24gY3JlYXRlUHJveHkodmFsdWUsIHBhcmVudCkge1xuICBjb25zdCBkcmFmdCA9IGlzTWFwKHZhbHVlKSA/IGdldFBsdWdpbihcIk1hcFNldFwiKS5wcm94eU1hcF8odmFsdWUsIHBhcmVudCkgOiBpc1NldCh2YWx1ZSkgPyBnZXRQbHVnaW4oXCJNYXBTZXRcIikucHJveHlTZXRfKHZhbHVlLCBwYXJlbnQpIDogY3JlYXRlUHJveHlQcm94eSh2YWx1ZSwgcGFyZW50KTtcbiAgY29uc3Qgc2NvcGUgPSBwYXJlbnQgPyBwYXJlbnQuc2NvcGVfIDogZ2V0Q3VycmVudFNjb3BlKCk7XG4gIHNjb3BlLmRyYWZ0c18ucHVzaChkcmFmdCk7XG4gIHJldHVybiBkcmFmdDtcbn1cblxuLy8gc3JjL2NvcmUvY3VycmVudC50c1xuZnVuY3Rpb24gY3VycmVudCh2YWx1ZSkge1xuICBpZiAoIWlzRHJhZnQodmFsdWUpKVxuICAgIGRpZSgxMCwgdmFsdWUpO1xuICByZXR1cm4gY3VycmVudEltcGwodmFsdWUpO1xufVxuZnVuY3Rpb24gY3VycmVudEltcGwodmFsdWUpIHtcbiAgaWYgKCFpc0RyYWZ0YWJsZSh2YWx1ZSkgfHwgaXNGcm96ZW4odmFsdWUpKVxuICAgIHJldHVybiB2YWx1ZTtcbiAgY29uc3Qgc3RhdGUgPSB2YWx1ZVtEUkFGVF9TVEFURV07XG4gIGxldCBjb3B5O1xuICBpZiAoc3RhdGUpIHtcbiAgICBpZiAoIXN0YXRlLm1vZGlmaWVkXylcbiAgICAgIHJldHVybiBzdGF0ZS5iYXNlXztcbiAgICBzdGF0ZS5maW5hbGl6ZWRfID0gdHJ1ZTtcbiAgICBjb3B5ID0gc2hhbGxvd0NvcHkodmFsdWUsIHN0YXRlLnNjb3BlXy5pbW1lcl8udXNlU3RyaWN0U2hhbGxvd0NvcHlfKTtcbiAgfSBlbHNlIHtcbiAgICBjb3B5ID0gc2hhbGxvd0NvcHkodmFsdWUsIHRydWUpO1xuICB9XG4gIGVhY2goY29weSwgKGtleSwgY2hpbGRWYWx1ZSkgPT4ge1xuICAgIHNldChjb3B5LCBrZXksIGN1cnJlbnRJbXBsKGNoaWxkVmFsdWUpKTtcbiAgfSk7XG4gIGlmIChzdGF0ZSkge1xuICAgIHN0YXRlLmZpbmFsaXplZF8gPSBmYWxzZTtcbiAgfVxuICByZXR1cm4gY29weTtcbn1cblxuLy8gc3JjL3BsdWdpbnMvcGF0Y2hlcy50c1xuZnVuY3Rpb24gZW5hYmxlUGF0Y2hlcygpIHtcbiAgY29uc3QgZXJyb3JPZmZzZXQgPSAxNjtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgIGVycm9ycy5wdXNoKFxuICAgICAgJ1NldHMgY2Fubm90IGhhdmUgXCJyZXBsYWNlXCIgcGF0Y2hlcy4nLFxuICAgICAgZnVuY3Rpb24ob3ApIHtcbiAgICAgICAgcmV0dXJuIFwiVW5zdXBwb3J0ZWQgcGF0Y2ggb3BlcmF0aW9uOiBcIiArIG9wO1xuICAgICAgfSxcbiAgICAgIGZ1bmN0aW9uKHBhdGgpIHtcbiAgICAgICAgcmV0dXJuIFwiQ2Fubm90IGFwcGx5IHBhdGNoLCBwYXRoIGRvZXNuJ3QgcmVzb2x2ZTogXCIgKyBwYXRoO1xuICAgICAgfSxcbiAgICAgIFwiUGF0Y2hpbmcgcmVzZXJ2ZWQgYXR0cmlidXRlcyBsaWtlIF9fcHJvdG9fXywgcHJvdG90eXBlIGFuZCBjb25zdHJ1Y3RvciBpcyBub3QgYWxsb3dlZFwiXG4gICAgKTtcbiAgfVxuICBjb25zdCBSRVBMQUNFID0gXCJyZXBsYWNlXCI7XG4gIGNvbnN0IEFERCA9IFwiYWRkXCI7XG4gIGNvbnN0IFJFTU9WRSA9IFwicmVtb3ZlXCI7XG4gIGZ1bmN0aW9uIGdlbmVyYXRlUGF0Y2hlc18oc3RhdGUsIGJhc2VQYXRoLCBwYXRjaGVzLCBpbnZlcnNlUGF0Y2hlcykge1xuICAgIHN3aXRjaCAoc3RhdGUudHlwZV8pIHtcbiAgICAgIGNhc2UgMCAvKiBPYmplY3QgKi86XG4gICAgICBjYXNlIDIgLyogTWFwICovOlxuICAgICAgICByZXR1cm4gZ2VuZXJhdGVQYXRjaGVzRnJvbUFzc2lnbmVkKFxuICAgICAgICAgIHN0YXRlLFxuICAgICAgICAgIGJhc2VQYXRoLFxuICAgICAgICAgIHBhdGNoZXMsXG4gICAgICAgICAgaW52ZXJzZVBhdGNoZXNcbiAgICAgICAgKTtcbiAgICAgIGNhc2UgMSAvKiBBcnJheSAqLzpcbiAgICAgICAgcmV0dXJuIGdlbmVyYXRlQXJyYXlQYXRjaGVzKHN0YXRlLCBiYXNlUGF0aCwgcGF0Y2hlcywgaW52ZXJzZVBhdGNoZXMpO1xuICAgICAgY2FzZSAzIC8qIFNldCAqLzpcbiAgICAgICAgcmV0dXJuIGdlbmVyYXRlU2V0UGF0Y2hlcyhcbiAgICAgICAgICBzdGF0ZSxcbiAgICAgICAgICBiYXNlUGF0aCxcbiAgICAgICAgICBwYXRjaGVzLFxuICAgICAgICAgIGludmVyc2VQYXRjaGVzXG4gICAgICAgICk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGdlbmVyYXRlQXJyYXlQYXRjaGVzKHN0YXRlLCBiYXNlUGF0aCwgcGF0Y2hlcywgaW52ZXJzZVBhdGNoZXMpIHtcbiAgICBsZXQgeyBiYXNlXywgYXNzaWduZWRfIH0gPSBzdGF0ZTtcbiAgICBsZXQgY29weV8gPSBzdGF0ZS5jb3B5XztcbiAgICBpZiAoY29weV8ubGVuZ3RoIDwgYmFzZV8ubGVuZ3RoKSB7XG4gICAgICA7XG4gICAgICBbYmFzZV8sIGNvcHlfXSA9IFtjb3B5XywgYmFzZV9dO1xuICAgICAgW3BhdGNoZXMsIGludmVyc2VQYXRjaGVzXSA9IFtpbnZlcnNlUGF0Y2hlcywgcGF0Y2hlc107XG4gICAgfVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYmFzZV8ubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChhc3NpZ25lZF9baV0gJiYgY29weV9baV0gIT09IGJhc2VfW2ldKSB7XG4gICAgICAgIGNvbnN0IHBhdGggPSBiYXNlUGF0aC5jb25jYXQoW2ldKTtcbiAgICAgICAgcGF0Y2hlcy5wdXNoKHtcbiAgICAgICAgICBvcDogUkVQTEFDRSxcbiAgICAgICAgICBwYXRoLFxuICAgICAgICAgIC8vIE5lZWQgdG8gbWF5YmUgY2xvbmUgaXQsIGFzIGl0IGNhbiBpbiBmYWN0IGJlIHRoZSBvcmlnaW5hbCB2YWx1ZVxuICAgICAgICAgIC8vIGR1ZSB0byB0aGUgYmFzZS9jb3B5IGludmVyc2lvbiBhdCB0aGUgc3RhcnQgb2YgdGhpcyBmdW5jdGlvblxuICAgICAgICAgIHZhbHVlOiBjbG9uZVBhdGNoVmFsdWVJZk5lZWRlZChjb3B5X1tpXSlcbiAgICAgICAgfSk7XG4gICAgICAgIGludmVyc2VQYXRjaGVzLnB1c2goe1xuICAgICAgICAgIG9wOiBSRVBMQUNFLFxuICAgICAgICAgIHBhdGgsXG4gICAgICAgICAgdmFsdWU6IGNsb25lUGF0Y2hWYWx1ZUlmTmVlZGVkKGJhc2VfW2ldKVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IGJhc2VfLmxlbmd0aDsgaSA8IGNvcHlfLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBwYXRoID0gYmFzZVBhdGguY29uY2F0KFtpXSk7XG4gICAgICBwYXRjaGVzLnB1c2goe1xuICAgICAgICBvcDogQURELFxuICAgICAgICBwYXRoLFxuICAgICAgICAvLyBOZWVkIHRvIG1heWJlIGNsb25lIGl0LCBhcyBpdCBjYW4gaW4gZmFjdCBiZSB0aGUgb3JpZ2luYWwgdmFsdWVcbiAgICAgICAgLy8gZHVlIHRvIHRoZSBiYXNlL2NvcHkgaW52ZXJzaW9uIGF0IHRoZSBzdGFydCBvZiB0aGlzIGZ1bmN0aW9uXG4gICAgICAgIHZhbHVlOiBjbG9uZVBhdGNoVmFsdWVJZk5lZWRlZChjb3B5X1tpXSlcbiAgICAgIH0pO1xuICAgIH1cbiAgICBmb3IgKGxldCBpID0gY29weV8ubGVuZ3RoIC0gMTsgYmFzZV8ubGVuZ3RoIDw9IGk7IC0taSkge1xuICAgICAgY29uc3QgcGF0aCA9IGJhc2VQYXRoLmNvbmNhdChbaV0pO1xuICAgICAgaW52ZXJzZVBhdGNoZXMucHVzaCh7XG4gICAgICAgIG9wOiBSRU1PVkUsXG4gICAgICAgIHBhdGhcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBnZW5lcmF0ZVBhdGNoZXNGcm9tQXNzaWduZWQoc3RhdGUsIGJhc2VQYXRoLCBwYXRjaGVzLCBpbnZlcnNlUGF0Y2hlcykge1xuICAgIGNvbnN0IHsgYmFzZV8sIGNvcHlfIH0gPSBzdGF0ZTtcbiAgICBlYWNoKHN0YXRlLmFzc2lnbmVkXywgKGtleSwgYXNzaWduZWRWYWx1ZSkgPT4ge1xuICAgICAgY29uc3Qgb3JpZ1ZhbHVlID0gZ2V0KGJhc2VfLCBrZXkpO1xuICAgICAgY29uc3QgdmFsdWUgPSBnZXQoY29weV8sIGtleSk7XG4gICAgICBjb25zdCBvcCA9ICFhc3NpZ25lZFZhbHVlID8gUkVNT1ZFIDogaGFzKGJhc2VfLCBrZXkpID8gUkVQTEFDRSA6IEFERDtcbiAgICAgIGlmIChvcmlnVmFsdWUgPT09IHZhbHVlICYmIG9wID09PSBSRVBMQUNFKVxuICAgICAgICByZXR1cm47XG4gICAgICBjb25zdCBwYXRoID0gYmFzZVBhdGguY29uY2F0KGtleSk7XG4gICAgICBwYXRjaGVzLnB1c2gob3AgPT09IFJFTU9WRSA/IHsgb3AsIHBhdGggfSA6IHsgb3AsIHBhdGgsIHZhbHVlIH0pO1xuICAgICAgaW52ZXJzZVBhdGNoZXMucHVzaChcbiAgICAgICAgb3AgPT09IEFERCA/IHsgb3A6IFJFTU9WRSwgcGF0aCB9IDogb3AgPT09IFJFTU9WRSA/IHsgb3A6IEFERCwgcGF0aCwgdmFsdWU6IGNsb25lUGF0Y2hWYWx1ZUlmTmVlZGVkKG9yaWdWYWx1ZSkgfSA6IHsgb3A6IFJFUExBQ0UsIHBhdGgsIHZhbHVlOiBjbG9uZVBhdGNoVmFsdWVJZk5lZWRlZChvcmlnVmFsdWUpIH1cbiAgICAgICk7XG4gICAgfSk7XG4gIH1cbiAgZnVuY3Rpb24gZ2VuZXJhdGVTZXRQYXRjaGVzKHN0YXRlLCBiYXNlUGF0aCwgcGF0Y2hlcywgaW52ZXJzZVBhdGNoZXMpIHtcbiAgICBsZXQgeyBiYXNlXywgY29weV8gfSA9IHN0YXRlO1xuICAgIGxldCBpID0gMDtcbiAgICBiYXNlXy5mb3JFYWNoKCh2YWx1ZSkgPT4ge1xuICAgICAgaWYgKCFjb3B5Xy5oYXModmFsdWUpKSB7XG4gICAgICAgIGNvbnN0IHBhdGggPSBiYXNlUGF0aC5jb25jYXQoW2ldKTtcbiAgICAgICAgcGF0Y2hlcy5wdXNoKHtcbiAgICAgICAgICBvcDogUkVNT1ZFLFxuICAgICAgICAgIHBhdGgsXG4gICAgICAgICAgdmFsdWVcbiAgICAgICAgfSk7XG4gICAgICAgIGludmVyc2VQYXRjaGVzLnVuc2hpZnQoe1xuICAgICAgICAgIG9wOiBBREQsXG4gICAgICAgICAgcGF0aCxcbiAgICAgICAgICB2YWx1ZVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGkrKztcbiAgICB9KTtcbiAgICBpID0gMDtcbiAgICBjb3B5Xy5mb3JFYWNoKCh2YWx1ZSkgPT4ge1xuICAgICAgaWYgKCFiYXNlXy5oYXModmFsdWUpKSB7XG4gICAgICAgIGNvbnN0IHBhdGggPSBiYXNlUGF0aC5jb25jYXQoW2ldKTtcbiAgICAgICAgcGF0Y2hlcy5wdXNoKHtcbiAgICAgICAgICBvcDogQURELFxuICAgICAgICAgIHBhdGgsXG4gICAgICAgICAgdmFsdWVcbiAgICAgICAgfSk7XG4gICAgICAgIGludmVyc2VQYXRjaGVzLnVuc2hpZnQoe1xuICAgICAgICAgIG9wOiBSRU1PVkUsXG4gICAgICAgICAgcGF0aCxcbiAgICAgICAgICB2YWx1ZVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGkrKztcbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiBnZW5lcmF0ZVJlcGxhY2VtZW50UGF0Y2hlc18oYmFzZVZhbHVlLCByZXBsYWNlbWVudCwgcGF0Y2hlcywgaW52ZXJzZVBhdGNoZXMpIHtcbiAgICBwYXRjaGVzLnB1c2goe1xuICAgICAgb3A6IFJFUExBQ0UsXG4gICAgICBwYXRoOiBbXSxcbiAgICAgIHZhbHVlOiByZXBsYWNlbWVudCA9PT0gTk9USElORyA/IHZvaWQgMCA6IHJlcGxhY2VtZW50XG4gICAgfSk7XG4gICAgaW52ZXJzZVBhdGNoZXMucHVzaCh7XG4gICAgICBvcDogUkVQTEFDRSxcbiAgICAgIHBhdGg6IFtdLFxuICAgICAgdmFsdWU6IGJhc2VWYWx1ZVxuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIGFwcGx5UGF0Y2hlc18oZHJhZnQsIHBhdGNoZXMpIHtcbiAgICBwYXRjaGVzLmZvckVhY2goKHBhdGNoKSA9PiB7XG4gICAgICBjb25zdCB7IHBhdGgsIG9wIH0gPSBwYXRjaDtcbiAgICAgIGxldCBiYXNlID0gZHJhZnQ7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhdGgubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgICAgIGNvbnN0IHBhcmVudFR5cGUgPSBnZXRBcmNodHlwZShiYXNlKTtcbiAgICAgICAgbGV0IHAgPSBwYXRoW2ldO1xuICAgICAgICBpZiAodHlwZW9mIHAgIT09IFwic3RyaW5nXCIgJiYgdHlwZW9mIHAgIT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICBwID0gXCJcIiArIHA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKChwYXJlbnRUeXBlID09PSAwIC8qIE9iamVjdCAqLyB8fCBwYXJlbnRUeXBlID09PSAxIC8qIEFycmF5ICovKSAmJiAocCA9PT0gXCJfX3Byb3RvX19cIiB8fCBwID09PSBcImNvbnN0cnVjdG9yXCIpKVxuICAgICAgICAgIGRpZShlcnJvck9mZnNldCArIDMpO1xuICAgICAgICBpZiAodHlwZW9mIGJhc2UgPT09IFwiZnVuY3Rpb25cIiAmJiBwID09PSBcInByb3RvdHlwZVwiKVxuICAgICAgICAgIGRpZShlcnJvck9mZnNldCArIDMpO1xuICAgICAgICBiYXNlID0gZ2V0KGJhc2UsIHApO1xuICAgICAgICBpZiAodHlwZW9mIGJhc2UgIT09IFwib2JqZWN0XCIpXG4gICAgICAgICAgZGllKGVycm9yT2Zmc2V0ICsgMiwgcGF0aC5qb2luKFwiL1wiKSk7XG4gICAgICB9XG4gICAgICBjb25zdCB0eXBlID0gZ2V0QXJjaHR5cGUoYmFzZSk7XG4gICAgICBjb25zdCB2YWx1ZSA9IGRlZXBDbG9uZVBhdGNoVmFsdWUocGF0Y2gudmFsdWUpO1xuICAgICAgY29uc3Qga2V5ID0gcGF0aFtwYXRoLmxlbmd0aCAtIDFdO1xuICAgICAgc3dpdGNoIChvcCkge1xuICAgICAgICBjYXNlIFJFUExBQ0U6XG4gICAgICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgICAgICBjYXNlIDIgLyogTWFwICovOlxuICAgICAgICAgICAgICByZXR1cm4gYmFzZS5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICAgICAgICBjYXNlIDMgLyogU2V0ICovOlxuICAgICAgICAgICAgICBkaWUoZXJyb3JPZmZzZXQpO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgcmV0dXJuIGJhc2Vba2V5XSA9IHZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgY2FzZSBBREQ6XG4gICAgICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgICAgICBjYXNlIDEgLyogQXJyYXkgKi86XG4gICAgICAgICAgICAgIHJldHVybiBrZXkgPT09IFwiLVwiID8gYmFzZS5wdXNoKHZhbHVlKSA6IGJhc2Uuc3BsaWNlKGtleSwgMCwgdmFsdWUpO1xuICAgICAgICAgICAgY2FzZSAyIC8qIE1hcCAqLzpcbiAgICAgICAgICAgICAgcmV0dXJuIGJhc2Uuc2V0KGtleSwgdmFsdWUpO1xuICAgICAgICAgICAgY2FzZSAzIC8qIFNldCAqLzpcbiAgICAgICAgICAgICAgcmV0dXJuIGJhc2UuYWRkKHZhbHVlKTtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgIHJldHVybiBiYXNlW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIGNhc2UgUkVNT1ZFOlxuICAgICAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICAgICAgY2FzZSAxIC8qIEFycmF5ICovOlxuICAgICAgICAgICAgICByZXR1cm4gYmFzZS5zcGxpY2Uoa2V5LCAxKTtcbiAgICAgICAgICAgIGNhc2UgMiAvKiBNYXAgKi86XG4gICAgICAgICAgICAgIHJldHVybiBiYXNlLmRlbGV0ZShrZXkpO1xuICAgICAgICAgICAgY2FzZSAzIC8qIFNldCAqLzpcbiAgICAgICAgICAgICAgcmV0dXJuIGJhc2UuZGVsZXRlKHBhdGNoLnZhbHVlKTtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgIHJldHVybiBkZWxldGUgYmFzZVtrZXldO1xuICAgICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBkaWUoZXJyb3JPZmZzZXQgKyAxLCBvcCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGRyYWZ0O1xuICB9XG4gIGZ1bmN0aW9uIGRlZXBDbG9uZVBhdGNoVmFsdWUob2JqKSB7XG4gICAgaWYgKCFpc0RyYWZ0YWJsZShvYmopKVxuICAgICAgcmV0dXJuIG9iajtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShvYmopKVxuICAgICAgcmV0dXJuIG9iai5tYXAoZGVlcENsb25lUGF0Y2hWYWx1ZSk7XG4gICAgaWYgKGlzTWFwKG9iaikpXG4gICAgICByZXR1cm4gbmV3IE1hcChcbiAgICAgICAgQXJyYXkuZnJvbShvYmouZW50cmllcygpKS5tYXAoKFtrLCB2XSkgPT4gW2ssIGRlZXBDbG9uZVBhdGNoVmFsdWUodildKVxuICAgICAgKTtcbiAgICBpZiAoaXNTZXQob2JqKSlcbiAgICAgIHJldHVybiBuZXcgU2V0KEFycmF5LmZyb20ob2JqKS5tYXAoZGVlcENsb25lUGF0Y2hWYWx1ZSkpO1xuICAgIGNvbnN0IGNsb25lZCA9IE9iamVjdC5jcmVhdGUoZ2V0UHJvdG90eXBlT2Yob2JqKSk7XG4gICAgZm9yIChjb25zdCBrZXkgaW4gb2JqKVxuICAgICAgY2xvbmVkW2tleV0gPSBkZWVwQ2xvbmVQYXRjaFZhbHVlKG9ialtrZXldKTtcbiAgICBpZiAoaGFzKG9iaiwgRFJBRlRBQkxFKSlcbiAgICAgIGNsb25lZFtEUkFGVEFCTEVdID0gb2JqW0RSQUZUQUJMRV07XG4gICAgcmV0dXJuIGNsb25lZDtcbiAgfVxuICBmdW5jdGlvbiBjbG9uZVBhdGNoVmFsdWVJZk5lZWRlZChvYmopIHtcbiAgICBpZiAoaXNEcmFmdChvYmopKSB7XG4gICAgICByZXR1cm4gZGVlcENsb25lUGF0Y2hWYWx1ZShvYmopO1xuICAgIH0gZWxzZVxuICAgICAgcmV0dXJuIG9iajtcbiAgfVxuICBsb2FkUGx1Z2luKFwiUGF0Y2hlc1wiLCB7XG4gICAgYXBwbHlQYXRjaGVzXyxcbiAgICBnZW5lcmF0ZVBhdGNoZXNfLFxuICAgIGdlbmVyYXRlUmVwbGFjZW1lbnRQYXRjaGVzX1xuICB9KTtcbn1cblxuLy8gc3JjL3BsdWdpbnMvbWFwc2V0LnRzXG5mdW5jdGlvbiBlbmFibGVNYXBTZXQoKSB7XG4gIGNsYXNzIERyYWZ0TWFwIGV4dGVuZHMgTWFwIHtcbiAgICBjb25zdHJ1Y3Rvcih0YXJnZXQsIHBhcmVudCkge1xuICAgICAgc3VwZXIoKTtcbiAgICAgIHRoaXNbRFJBRlRfU1RBVEVdID0ge1xuICAgICAgICB0eXBlXzogMiAvKiBNYXAgKi8sXG4gICAgICAgIHBhcmVudF86IHBhcmVudCxcbiAgICAgICAgc2NvcGVfOiBwYXJlbnQgPyBwYXJlbnQuc2NvcGVfIDogZ2V0Q3VycmVudFNjb3BlKCksXG4gICAgICAgIG1vZGlmaWVkXzogZmFsc2UsXG4gICAgICAgIGZpbmFsaXplZF86IGZhbHNlLFxuICAgICAgICBjb3B5Xzogdm9pZCAwLFxuICAgICAgICBhc3NpZ25lZF86IHZvaWQgMCxcbiAgICAgICAgYmFzZV86IHRhcmdldCxcbiAgICAgICAgZHJhZnRfOiB0aGlzLFxuICAgICAgICBpc01hbnVhbF86IGZhbHNlLFxuICAgICAgICByZXZva2VkXzogZmFsc2VcbiAgICAgIH07XG4gICAgfVxuICAgIGdldCBzaXplKCkge1xuICAgICAgcmV0dXJuIGxhdGVzdCh0aGlzW0RSQUZUX1NUQVRFXSkuc2l6ZTtcbiAgICB9XG4gICAgaGFzKGtleSkge1xuICAgICAgcmV0dXJuIGxhdGVzdCh0aGlzW0RSQUZUX1NUQVRFXSkuaGFzKGtleSk7XG4gICAgfVxuICAgIHNldChrZXksIHZhbHVlKSB7XG4gICAgICBjb25zdCBzdGF0ZSA9IHRoaXNbRFJBRlRfU1RBVEVdO1xuICAgICAgYXNzZXJ0VW5yZXZva2VkKHN0YXRlKTtcbiAgICAgIGlmICghbGF0ZXN0KHN0YXRlKS5oYXMoa2V5KSB8fCBsYXRlc3Qoc3RhdGUpLmdldChrZXkpICE9PSB2YWx1ZSkge1xuICAgICAgICBwcmVwYXJlTWFwQ29weShzdGF0ZSk7XG4gICAgICAgIG1hcmtDaGFuZ2VkKHN0YXRlKTtcbiAgICAgICAgc3RhdGUuYXNzaWduZWRfLnNldChrZXksIHRydWUpO1xuICAgICAgICBzdGF0ZS5jb3B5Xy5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICAgIHN0YXRlLmFzc2lnbmVkXy5zZXQoa2V5LCB0cnVlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBkZWxldGUoa2V5KSB7XG4gICAgICBpZiAoIXRoaXMuaGFzKGtleSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzW0RSQUZUX1NUQVRFXTtcbiAgICAgIGFzc2VydFVucmV2b2tlZChzdGF0ZSk7XG4gICAgICBwcmVwYXJlTWFwQ29weShzdGF0ZSk7XG4gICAgICBtYXJrQ2hhbmdlZChzdGF0ZSk7XG4gICAgICBpZiAoc3RhdGUuYmFzZV8uaGFzKGtleSkpIHtcbiAgICAgICAgc3RhdGUuYXNzaWduZWRfLnNldChrZXksIGZhbHNlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0YXRlLmFzc2lnbmVkXy5kZWxldGUoa2V5KTtcbiAgICAgIH1cbiAgICAgIHN0YXRlLmNvcHlfLmRlbGV0ZShrZXkpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGNsZWFyKCkge1xuICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzW0RSQUZUX1NUQVRFXTtcbiAgICAgIGFzc2VydFVucmV2b2tlZChzdGF0ZSk7XG4gICAgICBpZiAobGF0ZXN0KHN0YXRlKS5zaXplKSB7XG4gICAgICAgIHByZXBhcmVNYXBDb3B5KHN0YXRlKTtcbiAgICAgICAgbWFya0NoYW5nZWQoc3RhdGUpO1xuICAgICAgICBzdGF0ZS5hc3NpZ25lZF8gPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpO1xuICAgICAgICBlYWNoKHN0YXRlLmJhc2VfLCAoa2V5KSA9PiB7XG4gICAgICAgICAgc3RhdGUuYXNzaWduZWRfLnNldChrZXksIGZhbHNlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHN0YXRlLmNvcHlfLmNsZWFyKCk7XG4gICAgICB9XG4gICAgfVxuICAgIGZvckVhY2goY2IsIHRoaXNBcmcpIHtcbiAgICAgIGNvbnN0IHN0YXRlID0gdGhpc1tEUkFGVF9TVEFURV07XG4gICAgICBsYXRlc3Qoc3RhdGUpLmZvckVhY2goKF92YWx1ZSwga2V5LCBfbWFwKSA9PiB7XG4gICAgICAgIGNiLmNhbGwodGhpc0FyZywgdGhpcy5nZXQoa2V5KSwga2V5LCB0aGlzKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBnZXQoa2V5KSB7XG4gICAgICBjb25zdCBzdGF0ZSA9IHRoaXNbRFJBRlRfU1RBVEVdO1xuICAgICAgYXNzZXJ0VW5yZXZva2VkKHN0YXRlKTtcbiAgICAgIGNvbnN0IHZhbHVlID0gbGF0ZXN0KHN0YXRlKS5nZXQoa2V5KTtcbiAgICAgIGlmIChzdGF0ZS5maW5hbGl6ZWRfIHx8ICFpc0RyYWZ0YWJsZSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgICAgaWYgKHZhbHVlICE9PSBzdGF0ZS5iYXNlXy5nZXQoa2V5KSkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgICBjb25zdCBkcmFmdCA9IGNyZWF0ZVByb3h5KHZhbHVlLCBzdGF0ZSk7XG4gICAgICBwcmVwYXJlTWFwQ29weShzdGF0ZSk7XG4gICAgICBzdGF0ZS5jb3B5Xy5zZXQoa2V5LCBkcmFmdCk7XG4gICAgICByZXR1cm4gZHJhZnQ7XG4gICAgfVxuICAgIGtleXMoKSB7XG4gICAgICByZXR1cm4gbGF0ZXN0KHRoaXNbRFJBRlRfU1RBVEVdKS5rZXlzKCk7XG4gICAgfVxuICAgIHZhbHVlcygpIHtcbiAgICAgIGNvbnN0IGl0ZXJhdG9yID0gdGhpcy5rZXlzKCk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBbU3ltYm9sLml0ZXJhdG9yXTogKCkgPT4gdGhpcy52YWx1ZXMoKSxcbiAgICAgICAgbmV4dDogKCkgPT4ge1xuICAgICAgICAgIGNvbnN0IHIgPSBpdGVyYXRvci5uZXh0KCk7XG4gICAgICAgICAgaWYgKHIuZG9uZSlcbiAgICAgICAgICAgIHJldHVybiByO1xuICAgICAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy5nZXQoci52YWx1ZSk7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGRvbmU6IGZhbHNlLFxuICAgICAgICAgICAgdmFsdWVcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgICBlbnRyaWVzKCkge1xuICAgICAgY29uc3QgaXRlcmF0b3IgPSB0aGlzLmtleXMoKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIFtTeW1ib2wuaXRlcmF0b3JdOiAoKSA9PiB0aGlzLmVudHJpZXMoKSxcbiAgICAgICAgbmV4dDogKCkgPT4ge1xuICAgICAgICAgIGNvbnN0IHIgPSBpdGVyYXRvci5uZXh0KCk7XG4gICAgICAgICAgaWYgKHIuZG9uZSlcbiAgICAgICAgICAgIHJldHVybiByO1xuICAgICAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy5nZXQoci52YWx1ZSk7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGRvbmU6IGZhbHNlLFxuICAgICAgICAgICAgdmFsdWU6IFtyLnZhbHVlLCB2YWx1ZV1cbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgICBbKERSQUZUX1NUQVRFLCBTeW1ib2wuaXRlcmF0b3IpXSgpIHtcbiAgICAgIHJldHVybiB0aGlzLmVudHJpZXMoKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gcHJveHlNYXBfKHRhcmdldCwgcGFyZW50KSB7XG4gICAgcmV0dXJuIG5ldyBEcmFmdE1hcCh0YXJnZXQsIHBhcmVudCk7XG4gIH1cbiAgZnVuY3Rpb24gcHJlcGFyZU1hcENvcHkoc3RhdGUpIHtcbiAgICBpZiAoIXN0YXRlLmNvcHlfKSB7XG4gICAgICBzdGF0ZS5hc3NpZ25lZF8gPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpO1xuICAgICAgc3RhdGUuY29weV8gPSBuZXcgTWFwKHN0YXRlLmJhc2VfKTtcbiAgICB9XG4gIH1cbiAgY2xhc3MgRHJhZnRTZXQgZXh0ZW5kcyBTZXQge1xuICAgIGNvbnN0cnVjdG9yKHRhcmdldCwgcGFyZW50KSB7XG4gICAgICBzdXBlcigpO1xuICAgICAgdGhpc1tEUkFGVF9TVEFURV0gPSB7XG4gICAgICAgIHR5cGVfOiAzIC8qIFNldCAqLyxcbiAgICAgICAgcGFyZW50XzogcGFyZW50LFxuICAgICAgICBzY29wZV86IHBhcmVudCA/IHBhcmVudC5zY29wZV8gOiBnZXRDdXJyZW50U2NvcGUoKSxcbiAgICAgICAgbW9kaWZpZWRfOiBmYWxzZSxcbiAgICAgICAgZmluYWxpemVkXzogZmFsc2UsXG4gICAgICAgIGNvcHlfOiB2b2lkIDAsXG4gICAgICAgIGJhc2VfOiB0YXJnZXQsXG4gICAgICAgIGRyYWZ0XzogdGhpcyxcbiAgICAgICAgZHJhZnRzXzogLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKSxcbiAgICAgICAgcmV2b2tlZF86IGZhbHNlLFxuICAgICAgICBpc01hbnVhbF86IGZhbHNlXG4gICAgICB9O1xuICAgIH1cbiAgICBnZXQgc2l6ZSgpIHtcbiAgICAgIHJldHVybiBsYXRlc3QodGhpc1tEUkFGVF9TVEFURV0pLnNpemU7XG4gICAgfVxuICAgIGhhcyh2YWx1ZSkge1xuICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzW0RSQUZUX1NUQVRFXTtcbiAgICAgIGFzc2VydFVucmV2b2tlZChzdGF0ZSk7XG4gICAgICBpZiAoIXN0YXRlLmNvcHlfKSB7XG4gICAgICAgIHJldHVybiBzdGF0ZS5iYXNlXy5oYXModmFsdWUpO1xuICAgICAgfVxuICAgICAgaWYgKHN0YXRlLmNvcHlfLmhhcyh2YWx1ZSkpXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgaWYgKHN0YXRlLmRyYWZ0c18uaGFzKHZhbHVlKSAmJiBzdGF0ZS5jb3B5Xy5oYXMoc3RhdGUuZHJhZnRzXy5nZXQodmFsdWUpKSlcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGFkZCh2YWx1ZSkge1xuICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzW0RSQUZUX1NUQVRFXTtcbiAgICAgIGFzc2VydFVucmV2b2tlZChzdGF0ZSk7XG4gICAgICBpZiAoIXRoaXMuaGFzKHZhbHVlKSkge1xuICAgICAgICBwcmVwYXJlU2V0Q29weShzdGF0ZSk7XG4gICAgICAgIG1hcmtDaGFuZ2VkKHN0YXRlKTtcbiAgICAgICAgc3RhdGUuY29weV8uYWRkKHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBkZWxldGUodmFsdWUpIHtcbiAgICAgIGlmICghdGhpcy5oYXModmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHN0YXRlID0gdGhpc1tEUkFGVF9TVEFURV07XG4gICAgICBhc3NlcnRVbnJldm9rZWQoc3RhdGUpO1xuICAgICAgcHJlcGFyZVNldENvcHkoc3RhdGUpO1xuICAgICAgbWFya0NoYW5nZWQoc3RhdGUpO1xuICAgICAgcmV0dXJuIHN0YXRlLmNvcHlfLmRlbGV0ZSh2YWx1ZSkgfHwgKHN0YXRlLmRyYWZ0c18uaGFzKHZhbHVlKSA/IHN0YXRlLmNvcHlfLmRlbGV0ZShzdGF0ZS5kcmFmdHNfLmdldCh2YWx1ZSkpIDogKFxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICBmYWxzZVxuICAgICAgKSk7XG4gICAgfVxuICAgIGNsZWFyKCkge1xuICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzW0RSQUZUX1NUQVRFXTtcbiAgICAgIGFzc2VydFVucmV2b2tlZChzdGF0ZSk7XG4gICAgICBpZiAobGF0ZXN0KHN0YXRlKS5zaXplKSB7XG4gICAgICAgIHByZXBhcmVTZXRDb3B5KHN0YXRlKTtcbiAgICAgICAgbWFya0NoYW5nZWQoc3RhdGUpO1xuICAgICAgICBzdGF0ZS5jb3B5Xy5jbGVhcigpO1xuICAgICAgfVxuICAgIH1cbiAgICB2YWx1ZXMoKSB7XG4gICAgICBjb25zdCBzdGF0ZSA9IHRoaXNbRFJBRlRfU1RBVEVdO1xuICAgICAgYXNzZXJ0VW5yZXZva2VkKHN0YXRlKTtcbiAgICAgIHByZXBhcmVTZXRDb3B5KHN0YXRlKTtcbiAgICAgIHJldHVybiBzdGF0ZS5jb3B5Xy52YWx1ZXMoKTtcbiAgICB9XG4gICAgZW50cmllcygpIHtcbiAgICAgIGNvbnN0IHN0YXRlID0gdGhpc1tEUkFGVF9TVEFURV07XG4gICAgICBhc3NlcnRVbnJldm9rZWQoc3RhdGUpO1xuICAgICAgcHJlcGFyZVNldENvcHkoc3RhdGUpO1xuICAgICAgcmV0dXJuIHN0YXRlLmNvcHlfLmVudHJpZXMoKTtcbiAgICB9XG4gICAga2V5cygpIHtcbiAgICAgIHJldHVybiB0aGlzLnZhbHVlcygpO1xuICAgIH1cbiAgICBbKERSQUZUX1NUQVRFLCBTeW1ib2wuaXRlcmF0b3IpXSgpIHtcbiAgICAgIHJldHVybiB0aGlzLnZhbHVlcygpO1xuICAgIH1cbiAgICBmb3JFYWNoKGNiLCB0aGlzQXJnKSB7XG4gICAgICBjb25zdCBpdGVyYXRvciA9IHRoaXMudmFsdWVzKCk7XG4gICAgICBsZXQgcmVzdWx0ID0gaXRlcmF0b3IubmV4dCgpO1xuICAgICAgd2hpbGUgKCFyZXN1bHQuZG9uZSkge1xuICAgICAgICBjYi5jYWxsKHRoaXNBcmcsIHJlc3VsdC52YWx1ZSwgcmVzdWx0LnZhbHVlLCB0aGlzKTtcbiAgICAgICAgcmVzdWx0ID0gaXRlcmF0b3IubmV4dCgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBwcm94eVNldF8odGFyZ2V0LCBwYXJlbnQpIHtcbiAgICByZXR1cm4gbmV3IERyYWZ0U2V0KHRhcmdldCwgcGFyZW50KTtcbiAgfVxuICBmdW5jdGlvbiBwcmVwYXJlU2V0Q29weShzdGF0ZSkge1xuICAgIGlmICghc3RhdGUuY29weV8pIHtcbiAgICAgIHN0YXRlLmNvcHlfID0gLyogQF9fUFVSRV9fICovIG5ldyBTZXQoKTtcbiAgICAgIHN0YXRlLmJhc2VfLmZvckVhY2goKHZhbHVlKSA9PiB7XG4gICAgICAgIGlmIChpc0RyYWZ0YWJsZSh2YWx1ZSkpIHtcbiAgICAgICAgICBjb25zdCBkcmFmdCA9IGNyZWF0ZVByb3h5KHZhbHVlLCBzdGF0ZSk7XG4gICAgICAgICAgc3RhdGUuZHJhZnRzXy5zZXQodmFsdWUsIGRyYWZ0KTtcbiAgICAgICAgICBzdGF0ZS5jb3B5Xy5hZGQoZHJhZnQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN0YXRlLmNvcHlfLmFkZCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBhc3NlcnRVbnJldm9rZWQoc3RhdGUpIHtcbiAgICBpZiAoc3RhdGUucmV2b2tlZF8pXG4gICAgICBkaWUoMywgSlNPTi5zdHJpbmdpZnkobGF0ZXN0KHN0YXRlKSkpO1xuICB9XG4gIGxvYWRQbHVnaW4oXCJNYXBTZXRcIiwgeyBwcm94eU1hcF8sIHByb3h5U2V0XyB9KTtcbn1cblxuLy8gc3JjL2ltbWVyLnRzXG52YXIgaW1tZXIgPSBuZXcgSW1tZXIyKCk7XG52YXIgcHJvZHVjZSA9IGltbWVyLnByb2R1Y2U7XG52YXIgcHJvZHVjZVdpdGhQYXRjaGVzID0gaW1tZXIucHJvZHVjZVdpdGhQYXRjaGVzLmJpbmQoXG4gIGltbWVyXG4pO1xudmFyIHNldEF1dG9GcmVlemUgPSBpbW1lci5zZXRBdXRvRnJlZXplLmJpbmQoaW1tZXIpO1xudmFyIHNldFVzZVN0cmljdFNoYWxsb3dDb3B5ID0gaW1tZXIuc2V0VXNlU3RyaWN0U2hhbGxvd0NvcHkuYmluZChpbW1lcik7XG52YXIgYXBwbHlQYXRjaGVzID0gaW1tZXIuYXBwbHlQYXRjaGVzLmJpbmQoaW1tZXIpO1xudmFyIGNyZWF0ZURyYWZ0ID0gaW1tZXIuY3JlYXRlRHJhZnQuYmluZChpbW1lcik7XG52YXIgZmluaXNoRHJhZnQgPSBpbW1lci5maW5pc2hEcmFmdC5iaW5kKGltbWVyKTtcbmZ1bmN0aW9uIGNhc3REcmFmdCh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWU7XG59XG5mdW5jdGlvbiBjYXN0SW1tdXRhYmxlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZTtcbn1cbmV4cG9ydCB7XG4gIEltbWVyMiBhcyBJbW1lcixcbiAgYXBwbHlQYXRjaGVzLFxuICBjYXN0RHJhZnQsXG4gIGNhc3RJbW11dGFibGUsXG4gIGNyZWF0ZURyYWZ0LFxuICBjdXJyZW50LFxuICBlbmFibGVNYXBTZXQsXG4gIGVuYWJsZVBhdGNoZXMsXG4gIGZpbmlzaERyYWZ0LFxuICBmcmVlemUsXG4gIERSQUZUQUJMRSBhcyBpbW1lcmFibGUsXG4gIGlzRHJhZnQsXG4gIGlzRHJhZnRhYmxlLFxuICBOT1RISU5HIGFzIG5vdGhpbmcsXG4gIG9yaWdpbmFsLFxuICBwcm9kdWNlLFxuICBwcm9kdWNlV2l0aFBhdGNoZXMsXG4gIHNldEF1dG9GcmVlemUsXG4gIHNldFVzZVN0cmljdFNoYWxsb3dDb3B5XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW1tZXIubWpzLm1hcCIsIi8vIHNyYy9pbmRleC50c1xuZXhwb3J0ICogZnJvbSBcInJlZHV4XCI7XG5pbXBvcnQgeyBwcm9kdWNlLCBjdXJyZW50IGFzIGN1cnJlbnQzLCBmcmVlemUsIG9yaWdpbmFsIGFzIG9yaWdpbmFsMiwgaXNEcmFmdCBhcyBpc0RyYWZ0NSB9IGZyb20gXCJpbW1lclwiO1xuaW1wb3J0IHsgY3JlYXRlU2VsZWN0b3IsIGNyZWF0ZVNlbGVjdG9yQ3JlYXRvciBhcyBjcmVhdGVTZWxlY3RvckNyZWF0b3IyLCBscnVNZW1vaXplLCB3ZWFrTWFwTWVtb2l6ZSBhcyB3ZWFrTWFwTWVtb2l6ZTIgfSBmcm9tIFwicmVzZWxlY3RcIjtcblxuLy8gc3JjL2NyZWF0ZURyYWZ0U2FmZVNlbGVjdG9yLnRzXG5pbXBvcnQgeyBjdXJyZW50LCBpc0RyYWZ0IH0gZnJvbSBcImltbWVyXCI7XG5pbXBvcnQgeyBjcmVhdGVTZWxlY3RvckNyZWF0b3IsIHdlYWtNYXBNZW1vaXplIH0gZnJvbSBcInJlc2VsZWN0XCI7XG52YXIgY3JlYXRlRHJhZnRTYWZlU2VsZWN0b3JDcmVhdG9yID0gKC4uLmFyZ3MpID0+IHtcbiAgY29uc3QgY3JlYXRlU2VsZWN0b3IyID0gY3JlYXRlU2VsZWN0b3JDcmVhdG9yKC4uLmFyZ3MpO1xuICBjb25zdCBjcmVhdGVEcmFmdFNhZmVTZWxlY3RvcjIgPSBPYmplY3QuYXNzaWduKCguLi5hcmdzMikgPT4ge1xuICAgIGNvbnN0IHNlbGVjdG9yID0gY3JlYXRlU2VsZWN0b3IyKC4uLmFyZ3MyKTtcbiAgICBjb25zdCB3cmFwcGVkU2VsZWN0b3IgPSAodmFsdWUsIC4uLnJlc3QpID0+IHNlbGVjdG9yKGlzRHJhZnQodmFsdWUpID8gY3VycmVudCh2YWx1ZSkgOiB2YWx1ZSwgLi4ucmVzdCk7XG4gICAgT2JqZWN0LmFzc2lnbih3cmFwcGVkU2VsZWN0b3IsIHNlbGVjdG9yKTtcbiAgICByZXR1cm4gd3JhcHBlZFNlbGVjdG9yO1xuICB9LCB7XG4gICAgd2l0aFR5cGVzOiAoKSA9PiBjcmVhdGVEcmFmdFNhZmVTZWxlY3RvcjJcbiAgfSk7XG4gIHJldHVybiBjcmVhdGVEcmFmdFNhZmVTZWxlY3RvcjI7XG59O1xudmFyIGNyZWF0ZURyYWZ0U2FmZVNlbGVjdG9yID0gLyogQF9fUFVSRV9fICovIGNyZWF0ZURyYWZ0U2FmZVNlbGVjdG9yQ3JlYXRvcih3ZWFrTWFwTWVtb2l6ZSk7XG5cbi8vIHNyYy9jb25maWd1cmVTdG9yZS50c1xuaW1wb3J0IHsgYXBwbHlNaWRkbGV3YXJlLCBjcmVhdGVTdG9yZSwgY29tcG9zZSBhcyBjb21wb3NlMiwgY29tYmluZVJlZHVjZXJzLCBpc1BsYWluT2JqZWN0IGFzIGlzUGxhaW5PYmplY3QyIH0gZnJvbSBcInJlZHV4XCI7XG5cbi8vIHNyYy9kZXZ0b29sc0V4dGVuc2lvbi50c1xuaW1wb3J0IHsgY29tcG9zZSB9IGZyb20gXCJyZWR1eFwiO1xudmFyIGNvbXBvc2VXaXRoRGV2VG9vbHMgPSB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHdpbmRvdy5fX1JFRFVYX0RFVlRPT0xTX0VYVEVOU0lPTl9DT01QT1NFX18gPyB3aW5kb3cuX19SRURVWF9ERVZUT09MU19FWFRFTlNJT05fQ09NUE9TRV9fIDogZnVuY3Rpb24oKSB7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSByZXR1cm4gdm9pZCAwO1xuICBpZiAodHlwZW9mIGFyZ3VtZW50c1swXSA9PT0gXCJvYmplY3RcIikgcmV0dXJuIGNvbXBvc2U7XG4gIHJldHVybiBjb21wb3NlLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG59O1xudmFyIGRldlRvb2xzRW5oYW5jZXIgPSB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHdpbmRvdy5fX1JFRFVYX0RFVlRPT0xTX0VYVEVOU0lPTl9fID8gd2luZG93Ll9fUkVEVVhfREVWVE9PTFNfRVhURU5TSU9OX18gOiBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKG5vb3AzKSB7XG4gICAgcmV0dXJuIG5vb3AzO1xuICB9O1xufTtcblxuLy8gc3JjL2dldERlZmF1bHRNaWRkbGV3YXJlLnRzXG5pbXBvcnQgeyB0aHVuayBhcyB0aHVua01pZGRsZXdhcmUsIHdpdGhFeHRyYUFyZ3VtZW50IH0gZnJvbSBcInJlZHV4LXRodW5rXCI7XG5cbi8vIHNyYy9jcmVhdGVBY3Rpb24udHNcbmltcG9ydCB7IGlzQWN0aW9uIH0gZnJvbSBcInJlZHV4XCI7XG5cbi8vIHNyYy90c0hlbHBlcnMudHNcbnZhciBoYXNNYXRjaEZ1bmN0aW9uID0gKHYpID0+IHtcbiAgcmV0dXJuIHYgJiYgdHlwZW9mIHYubWF0Y2ggPT09IFwiZnVuY3Rpb25cIjtcbn07XG5cbi8vIHNyYy9jcmVhdGVBY3Rpb24udHNcbmZ1bmN0aW9uIGNyZWF0ZUFjdGlvbih0eXBlLCBwcmVwYXJlQWN0aW9uKSB7XG4gIGZ1bmN0aW9uIGFjdGlvbkNyZWF0b3IoLi4uYXJncykge1xuICAgIGlmIChwcmVwYXJlQWN0aW9uKSB7XG4gICAgICBsZXQgcHJlcGFyZWQgPSBwcmVwYXJlQWN0aW9uKC4uLmFyZ3MpO1xuICAgICAgaWYgKCFwcmVwYXJlZCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgwKSA6IFwicHJlcGFyZUFjdGlvbiBkaWQgbm90IHJldHVybiBhbiBvYmplY3RcIik7XG4gICAgICB9XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlLFxuICAgICAgICBwYXlsb2FkOiBwcmVwYXJlZC5wYXlsb2FkLFxuICAgICAgICAuLi5cIm1ldGFcIiBpbiBwcmVwYXJlZCAmJiB7XG4gICAgICAgICAgbWV0YTogcHJlcGFyZWQubWV0YVxuICAgICAgICB9LFxuICAgICAgICAuLi5cImVycm9yXCIgaW4gcHJlcGFyZWQgJiYge1xuICAgICAgICAgIGVycm9yOiBwcmVwYXJlZC5lcnJvclxuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgdHlwZSxcbiAgICAgIHBheWxvYWQ6IGFyZ3NbMF1cbiAgICB9O1xuICB9XG4gIGFjdGlvbkNyZWF0b3IudG9TdHJpbmcgPSAoKSA9PiBgJHt0eXBlfWA7XG4gIGFjdGlvbkNyZWF0b3IudHlwZSA9IHR5cGU7XG4gIGFjdGlvbkNyZWF0b3IubWF0Y2ggPSAoYWN0aW9uKSA9PiBpc0FjdGlvbihhY3Rpb24pICYmIGFjdGlvbi50eXBlID09PSB0eXBlO1xuICByZXR1cm4gYWN0aW9uQ3JlYXRvcjtcbn1cbmZ1bmN0aW9uIGlzQWN0aW9uQ3JlYXRvcihhY3Rpb24pIHtcbiAgcmV0dXJuIHR5cGVvZiBhY3Rpb24gPT09IFwiZnVuY3Rpb25cIiAmJiBcInR5cGVcIiBpbiBhY3Rpb24gJiYgLy8gaGFzTWF0Y2hGdW5jdGlvbiBvbmx5IHdhbnRzIE1hdGNoZXJzIGJ1dCBJIGRvbid0IHNlZSB0aGUgcG9pbnQgaW4gcmV3cml0aW5nIGl0XG4gIGhhc01hdGNoRnVuY3Rpb24oYWN0aW9uKTtcbn1cbmZ1bmN0aW9uIGlzRlNBKGFjdGlvbikge1xuICByZXR1cm4gaXNBY3Rpb24oYWN0aW9uKSAmJiBPYmplY3Qua2V5cyhhY3Rpb24pLmV2ZXJ5KGlzVmFsaWRLZXkpO1xufVxuZnVuY3Rpb24gaXNWYWxpZEtleShrZXkpIHtcbiAgcmV0dXJuIFtcInR5cGVcIiwgXCJwYXlsb2FkXCIsIFwiZXJyb3JcIiwgXCJtZXRhXCJdLmluZGV4T2Yoa2V5KSA+IC0xO1xufVxuXG4vLyBzcmMvYWN0aW9uQ3JlYXRvckludmFyaWFudE1pZGRsZXdhcmUudHNcbmZ1bmN0aW9uIGdldE1lc3NhZ2UodHlwZSkge1xuICBjb25zdCBzcGxpdFR5cGUgPSB0eXBlID8gYCR7dHlwZX1gLnNwbGl0KFwiL1wiKSA6IFtdO1xuICBjb25zdCBhY3Rpb25OYW1lID0gc3BsaXRUeXBlW3NwbGl0VHlwZS5sZW5ndGggLSAxXSB8fCBcImFjdGlvbkNyZWF0b3JcIjtcbiAgcmV0dXJuIGBEZXRlY3RlZCBhbiBhY3Rpb24gY3JlYXRvciB3aXRoIHR5cGUgXCIke3R5cGUgfHwgXCJ1bmtub3duXCJ9XCIgYmVpbmcgZGlzcGF0Y2hlZC4gXG5NYWtlIHN1cmUgeW91J3JlIGNhbGxpbmcgdGhlIGFjdGlvbiBjcmVhdG9yIGJlZm9yZSBkaXNwYXRjaGluZywgaS5lLiBcXGBkaXNwYXRjaCgke2FjdGlvbk5hbWV9KCkpXFxgIGluc3RlYWQgb2YgXFxgZGlzcGF0Y2goJHthY3Rpb25OYW1lfSlcXGAuIFRoaXMgaXMgbmVjZXNzYXJ5IGV2ZW4gaWYgdGhlIGFjdGlvbiBoYXMgbm8gcGF5bG9hZC5gO1xufVxuZnVuY3Rpb24gY3JlYXRlQWN0aW9uQ3JlYXRvckludmFyaWFudE1pZGRsZXdhcmUob3B0aW9ucyA9IHt9KSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICByZXR1cm4gKCkgPT4gKG5leHQpID0+IChhY3Rpb24pID0+IG5leHQoYWN0aW9uKTtcbiAgfVxuICBjb25zdCB7XG4gICAgaXNBY3Rpb25DcmVhdG9yOiBpc0FjdGlvbkNyZWF0b3IyID0gaXNBY3Rpb25DcmVhdG9yXG4gIH0gPSBvcHRpb25zO1xuICByZXR1cm4gKCkgPT4gKG5leHQpID0+IChhY3Rpb24pID0+IHtcbiAgICBpZiAoaXNBY3Rpb25DcmVhdG9yMihhY3Rpb24pKSB7XG4gICAgICBjb25zb2xlLndhcm4oZ2V0TWVzc2FnZShhY3Rpb24udHlwZSkpO1xuICAgIH1cbiAgICByZXR1cm4gbmV4dChhY3Rpb24pO1xuICB9O1xufVxuXG4vLyBzcmMvdXRpbHMudHNcbmltcG9ydCB7IHByb2R1Y2UgYXMgY3JlYXRlTmV4dFN0YXRlLCBpc0RyYWZ0YWJsZSB9IGZyb20gXCJpbW1lclwiO1xuZnVuY3Rpb24gZ2V0VGltZU1lYXN1cmVVdGlscyhtYXhEZWxheSwgZm5OYW1lKSB7XG4gIGxldCBlbGFwc2VkID0gMDtcbiAgcmV0dXJuIHtcbiAgICBtZWFzdXJlVGltZShmbikge1xuICAgICAgY29uc3Qgc3RhcnRlZCA9IERhdGUubm93KCk7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gZm4oKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIGNvbnN0IGZpbmlzaGVkID0gRGF0ZS5ub3coKTtcbiAgICAgICAgZWxhcHNlZCArPSBmaW5pc2hlZCAtIHN0YXJ0ZWQ7XG4gICAgICB9XG4gICAgfSxcbiAgICB3YXJuSWZFeGNlZWRlZCgpIHtcbiAgICAgIGlmIChlbGFwc2VkID4gbWF4RGVsYXkpIHtcbiAgICAgICAgY29uc29sZS53YXJuKGAke2ZuTmFtZX0gdG9vayAke2VsYXBzZWR9bXMsIHdoaWNoIGlzIG1vcmUgdGhhbiB0aGUgd2FybmluZyB0aHJlc2hvbGQgb2YgJHttYXhEZWxheX1tcy4gXG5JZiB5b3VyIHN0YXRlIG9yIGFjdGlvbnMgYXJlIHZlcnkgbGFyZ2UsIHlvdSBtYXkgd2FudCB0byBkaXNhYmxlIHRoZSBtaWRkbGV3YXJlIGFzIGl0IG1pZ2h0IGNhdXNlIHRvbyBtdWNoIG9mIGEgc2xvd2Rvd24gaW4gZGV2ZWxvcG1lbnQgbW9kZS4gU2VlIGh0dHBzOi8vcmVkdXgtdG9vbGtpdC5qcy5vcmcvYXBpL2dldERlZmF1bHRNaWRkbGV3YXJlIGZvciBpbnN0cnVjdGlvbnMuXG5JdCBpcyBkaXNhYmxlZCBpbiBwcm9kdWN0aW9uIGJ1aWxkcywgc28geW91IGRvbid0IG5lZWQgdG8gd29ycnkgYWJvdXQgdGhhdC5gKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG59XG52YXIgVHVwbGUgPSBjbGFzcyBfVHVwbGUgZXh0ZW5kcyBBcnJheSB7XG4gIGNvbnN0cnVjdG9yKC4uLml0ZW1zKSB7XG4gICAgc3VwZXIoLi4uaXRlbXMpO1xuICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBfVHVwbGUucHJvdG90eXBlKTtcbiAgfVxuICBzdGF0aWMgZ2V0IFtTeW1ib2wuc3BlY2llc10oKSB7XG4gICAgcmV0dXJuIF9UdXBsZTtcbiAgfVxuICBjb25jYXQoLi4uYXJyKSB7XG4gICAgcmV0dXJuIHN1cGVyLmNvbmNhdC5hcHBseSh0aGlzLCBhcnIpO1xuICB9XG4gIHByZXBlbmQoLi4uYXJyKSB7XG4gICAgaWYgKGFyci5sZW5ndGggPT09IDEgJiYgQXJyYXkuaXNBcnJheShhcnJbMF0pKSB7XG4gICAgICByZXR1cm4gbmV3IF9UdXBsZSguLi5hcnJbMF0uY29uY2F0KHRoaXMpKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBfVHVwbGUoLi4uYXJyLmNvbmNhdCh0aGlzKSk7XG4gIH1cbn07XG5mdW5jdGlvbiBmcmVlemVEcmFmdGFibGUodmFsKSB7XG4gIHJldHVybiBpc0RyYWZ0YWJsZSh2YWwpID8gY3JlYXRlTmV4dFN0YXRlKHZhbCwgKCkgPT4ge1xuICB9KSA6IHZhbDtcbn1cbmZ1bmN0aW9uIGdldE9ySW5zZXJ0Q29tcHV0ZWQobWFwLCBrZXksIGNvbXB1dGUpIHtcbiAgaWYgKG1hcC5oYXMoa2V5KSkgcmV0dXJuIG1hcC5nZXQoa2V5KTtcbiAgcmV0dXJuIG1hcC5zZXQoa2V5LCBjb21wdXRlKGtleSkpLmdldChrZXkpO1xufVxuXG4vLyBzcmMvaW1tdXRhYmxlU3RhdGVJbnZhcmlhbnRNaWRkbGV3YXJlLnRzXG5mdW5jdGlvbiBpc0ltbXV0YWJsZURlZmF1bHQodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSAhPT0gXCJvYmplY3RcIiB8fCB2YWx1ZSA9PSBudWxsIHx8IE9iamVjdC5pc0Zyb3plbih2YWx1ZSk7XG59XG5mdW5jdGlvbiB0cmFja0Zvck11dGF0aW9ucyhpc0ltbXV0YWJsZSwgaWdub3JlUGF0aHMsIG9iaikge1xuICBjb25zdCB0cmFja2VkUHJvcGVydGllcyA9IHRyYWNrUHJvcGVydGllcyhpc0ltbXV0YWJsZSwgaWdub3JlUGF0aHMsIG9iaik7XG4gIHJldHVybiB7XG4gICAgZGV0ZWN0TXV0YXRpb25zKCkge1xuICAgICAgcmV0dXJuIGRldGVjdE11dGF0aW9ucyhpc0ltbXV0YWJsZSwgaWdub3JlUGF0aHMsIHRyYWNrZWRQcm9wZXJ0aWVzLCBvYmopO1xuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIHRyYWNrUHJvcGVydGllcyhpc0ltbXV0YWJsZSwgaWdub3JlUGF0aHMgPSBbXSwgb2JqLCBwYXRoID0gXCJcIiwgY2hlY2tlZE9iamVjdHMgPSAvKiBAX19QVVJFX18gKi8gbmV3IFNldCgpKSB7XG4gIGNvbnN0IHRyYWNrZWQgPSB7XG4gICAgdmFsdWU6IG9ialxuICB9O1xuICBpZiAoIWlzSW1tdXRhYmxlKG9iaikgJiYgIWNoZWNrZWRPYmplY3RzLmhhcyhvYmopKSB7XG4gICAgY2hlY2tlZE9iamVjdHMuYWRkKG9iaik7XG4gICAgdHJhY2tlZC5jaGlsZHJlbiA9IHt9O1xuICAgIGZvciAoY29uc3Qga2V5IGluIG9iaikge1xuICAgICAgY29uc3QgY2hpbGRQYXRoID0gcGF0aCA/IHBhdGggKyBcIi5cIiArIGtleSA6IGtleTtcbiAgICAgIGlmIChpZ25vcmVQYXRocy5sZW5ndGggJiYgaWdub3JlUGF0aHMuaW5kZXhPZihjaGlsZFBhdGgpICE9PSAtMSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIHRyYWNrZWQuY2hpbGRyZW5ba2V5XSA9IHRyYWNrUHJvcGVydGllcyhpc0ltbXV0YWJsZSwgaWdub3JlUGF0aHMsIG9ialtrZXldLCBjaGlsZFBhdGgpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdHJhY2tlZDtcbn1cbmZ1bmN0aW9uIGRldGVjdE11dGF0aW9ucyhpc0ltbXV0YWJsZSwgaWdub3JlZFBhdGhzID0gW10sIHRyYWNrZWRQcm9wZXJ0eSwgb2JqLCBzYW1lUGFyZW50UmVmID0gZmFsc2UsIHBhdGggPSBcIlwiKSB7XG4gIGNvbnN0IHByZXZPYmogPSB0cmFja2VkUHJvcGVydHkgPyB0cmFja2VkUHJvcGVydHkudmFsdWUgOiB2b2lkIDA7XG4gIGNvbnN0IHNhbWVSZWYgPSBwcmV2T2JqID09PSBvYmo7XG4gIGlmIChzYW1lUGFyZW50UmVmICYmICFzYW1lUmVmICYmICFOdW1iZXIuaXNOYU4ob2JqKSkge1xuICAgIHJldHVybiB7XG4gICAgICB3YXNNdXRhdGVkOiB0cnVlLFxuICAgICAgcGF0aFxuICAgIH07XG4gIH1cbiAgaWYgKGlzSW1tdXRhYmxlKHByZXZPYmopIHx8IGlzSW1tdXRhYmxlKG9iaikpIHtcbiAgICByZXR1cm4ge1xuICAgICAgd2FzTXV0YXRlZDogZmFsc2VcbiAgICB9O1xuICB9XG4gIGNvbnN0IGtleXNUb0RldGVjdCA9IHt9O1xuICBmb3IgKGxldCBrZXkgaW4gdHJhY2tlZFByb3BlcnR5LmNoaWxkcmVuKSB7XG4gICAga2V5c1RvRGV0ZWN0W2tleV0gPSB0cnVlO1xuICB9XG4gIGZvciAobGV0IGtleSBpbiBvYmopIHtcbiAgICBrZXlzVG9EZXRlY3Rba2V5XSA9IHRydWU7XG4gIH1cbiAgY29uc3QgaGFzSWdub3JlZFBhdGhzID0gaWdub3JlZFBhdGhzLmxlbmd0aCA+IDA7XG4gIGZvciAobGV0IGtleSBpbiBrZXlzVG9EZXRlY3QpIHtcbiAgICBjb25zdCBuZXN0ZWRQYXRoID0gcGF0aCA/IHBhdGggKyBcIi5cIiArIGtleSA6IGtleTtcbiAgICBpZiAoaGFzSWdub3JlZFBhdGhzKSB7XG4gICAgICBjb25zdCBoYXNNYXRjaGVzID0gaWdub3JlZFBhdGhzLnNvbWUoKGlnbm9yZWQpID0+IHtcbiAgICAgICAgaWYgKGlnbm9yZWQgaW5zdGFuY2VvZiBSZWdFeHApIHtcbiAgICAgICAgICByZXR1cm4gaWdub3JlZC50ZXN0KG5lc3RlZFBhdGgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXN0ZWRQYXRoID09PSBpZ25vcmVkO1xuICAgICAgfSk7XG4gICAgICBpZiAoaGFzTWF0Y2hlcykge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgcmVzdWx0ID0gZGV0ZWN0TXV0YXRpb25zKGlzSW1tdXRhYmxlLCBpZ25vcmVkUGF0aHMsIHRyYWNrZWRQcm9wZXJ0eS5jaGlsZHJlbltrZXldLCBvYmpba2V5XSwgc2FtZVJlZiwgbmVzdGVkUGF0aCk7XG4gICAgaWYgKHJlc3VsdC53YXNNdXRhdGVkKSB7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgfVxuICByZXR1cm4ge1xuICAgIHdhc011dGF0ZWQ6IGZhbHNlXG4gIH07XG59XG5mdW5jdGlvbiBjcmVhdGVJbW11dGFibGVTdGF0ZUludmFyaWFudE1pZGRsZXdhcmUob3B0aW9ucyA9IHt9KSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICByZXR1cm4gKCkgPT4gKG5leHQpID0+IChhY3Rpb24pID0+IG5leHQoYWN0aW9uKTtcbiAgfSBlbHNlIHtcbiAgICBsZXQgc3RyaW5naWZ5MiA9IGZ1bmN0aW9uKG9iaiwgc2VyaWFsaXplciwgaW5kZW50LCBkZWN5Y2xlcikge1xuICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KG9iaiwgZ2V0U2VyaWFsaXplMihzZXJpYWxpemVyLCBkZWN5Y2xlciksIGluZGVudCk7XG4gICAgfSwgZ2V0U2VyaWFsaXplMiA9IGZ1bmN0aW9uKHNlcmlhbGl6ZXIsIGRlY3ljbGVyKSB7XG4gICAgICBsZXQgc3RhY2sgPSBbXSwga2V5cyA9IFtdO1xuICAgICAgaWYgKCFkZWN5Y2xlcikgZGVjeWNsZXIgPSBmdW5jdGlvbihfLCB2YWx1ZSkge1xuICAgICAgICBpZiAoc3RhY2tbMF0gPT09IHZhbHVlKSByZXR1cm4gXCJbQ2lyY3VsYXIgfl1cIjtcbiAgICAgICAgcmV0dXJuIFwiW0NpcmN1bGFyIH4uXCIgKyBrZXlzLnNsaWNlKDAsIHN0YWNrLmluZGV4T2YodmFsdWUpKS5qb2luKFwiLlwiKSArIFwiXVwiO1xuICAgICAgfTtcbiAgICAgIHJldHVybiBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG4gICAgICAgIGlmIChzdGFjay5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgdmFyIHRoaXNQb3MgPSBzdGFjay5pbmRleE9mKHRoaXMpO1xuICAgICAgICAgIH50aGlzUG9zID8gc3RhY2suc3BsaWNlKHRoaXNQb3MgKyAxKSA6IHN0YWNrLnB1c2godGhpcyk7XG4gICAgICAgICAgfnRoaXNQb3MgPyBrZXlzLnNwbGljZSh0aGlzUG9zLCBJbmZpbml0eSwga2V5KSA6IGtleXMucHVzaChrZXkpO1xuICAgICAgICAgIGlmICh+c3RhY2suaW5kZXhPZih2YWx1ZSkpIHZhbHVlID0gZGVjeWNsZXIuY2FsbCh0aGlzLCBrZXksIHZhbHVlKTtcbiAgICAgICAgfSBlbHNlIHN0YWNrLnB1c2godmFsdWUpO1xuICAgICAgICByZXR1cm4gc2VyaWFsaXplciA9PSBudWxsID8gdmFsdWUgOiBzZXJpYWxpemVyLmNhbGwodGhpcywga2V5LCB2YWx1ZSk7XG4gICAgICB9O1xuICAgIH07XG4gICAgdmFyIHN0cmluZ2lmeSA9IHN0cmluZ2lmeTIsIGdldFNlcmlhbGl6ZSA9IGdldFNlcmlhbGl6ZTI7XG4gICAgbGV0IHtcbiAgICAgIGlzSW1tdXRhYmxlID0gaXNJbW11dGFibGVEZWZhdWx0LFxuICAgICAgaWdub3JlZFBhdGhzLFxuICAgICAgd2FybkFmdGVyID0gMzJcbiAgICB9ID0gb3B0aW9ucztcbiAgICBjb25zdCB0cmFjayA9IHRyYWNrRm9yTXV0YXRpb25zLmJpbmQobnVsbCwgaXNJbW11dGFibGUsIGlnbm9yZWRQYXRocyk7XG4gICAgcmV0dXJuICh7XG4gICAgICBnZXRTdGF0ZVxuICAgIH0pID0+IHtcbiAgICAgIGxldCBzdGF0ZSA9IGdldFN0YXRlKCk7XG4gICAgICBsZXQgdHJhY2tlciA9IHRyYWNrKHN0YXRlKTtcbiAgICAgIGxldCByZXN1bHQ7XG4gICAgICByZXR1cm4gKG5leHQpID0+IChhY3Rpb24pID0+IHtcbiAgICAgICAgY29uc3QgbWVhc3VyZVV0aWxzID0gZ2V0VGltZU1lYXN1cmVVdGlscyh3YXJuQWZ0ZXIsIFwiSW1tdXRhYmxlU3RhdGVJbnZhcmlhbnRNaWRkbGV3YXJlXCIpO1xuICAgICAgICBtZWFzdXJlVXRpbHMubWVhc3VyZVRpbWUoKCkgPT4ge1xuICAgICAgICAgIHN0YXRlID0gZ2V0U3RhdGUoKTtcbiAgICAgICAgICByZXN1bHQgPSB0cmFja2VyLmRldGVjdE11dGF0aW9ucygpO1xuICAgICAgICAgIHRyYWNrZXIgPSB0cmFjayhzdGF0ZSk7XG4gICAgICAgICAgaWYgKHJlc3VsdC53YXNNdXRhdGVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxOSkgOiBgQSBzdGF0ZSBtdXRhdGlvbiB3YXMgZGV0ZWN0ZWQgYmV0d2VlbiBkaXNwYXRjaGVzLCBpbiB0aGUgcGF0aCAnJHtyZXN1bHQucGF0aCB8fCBcIlwifScuICBUaGlzIG1heSBjYXVzZSBpbmNvcnJlY3QgYmVoYXZpb3IuIChodHRwczovL3JlZHV4LmpzLm9yZy9zdHlsZS1ndWlkZS9zdHlsZS1ndWlkZSNkby1ub3QtbXV0YXRlLXN0YXRlKWApO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IGRpc3BhdGNoZWRBY3Rpb24gPSBuZXh0KGFjdGlvbik7XG4gICAgICAgIG1lYXN1cmVVdGlscy5tZWFzdXJlVGltZSgoKSA9PiB7XG4gICAgICAgICAgc3RhdGUgPSBnZXRTdGF0ZSgpO1xuICAgICAgICAgIHJlc3VsdCA9IHRyYWNrZXIuZGV0ZWN0TXV0YXRpb25zKCk7XG4gICAgICAgICAgdHJhY2tlciA9IHRyYWNrKHN0YXRlKTtcbiAgICAgICAgICBpZiAocmVzdWx0Lndhc011dGF0ZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDIwKSA6IGBBIHN0YXRlIG11dGF0aW9uIHdhcyBkZXRlY3RlZCBpbnNpZGUgYSBkaXNwYXRjaCwgaW4gdGhlIHBhdGg6ICR7cmVzdWx0LnBhdGggfHwgXCJcIn0uIFRha2UgYSBsb29rIGF0IHRoZSByZWR1Y2VyKHMpIGhhbmRsaW5nIHRoZSBhY3Rpb24gJHtzdHJpbmdpZnkyKGFjdGlvbil9LiAoaHR0cHM6Ly9yZWR1eC5qcy5vcmcvc3R5bGUtZ3VpZGUvc3R5bGUtZ3VpZGUjZG8tbm90LW11dGF0ZS1zdGF0ZSlgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBtZWFzdXJlVXRpbHMud2FybklmRXhjZWVkZWQoKTtcbiAgICAgICAgcmV0dXJuIGRpc3BhdGNoZWRBY3Rpb247XG4gICAgICB9O1xuICAgIH07XG4gIH1cbn1cblxuLy8gc3JjL3NlcmlhbGl6YWJsZVN0YXRlSW52YXJpYW50TWlkZGxld2FyZS50c1xuaW1wb3J0IHsgaXNBY3Rpb24gYXMgaXNBY3Rpb24yLCBpc1BsYWluT2JqZWN0IH0gZnJvbSBcInJlZHV4XCI7XG5mdW5jdGlvbiBpc1BsYWluKHZhbCkge1xuICBjb25zdCB0eXBlID0gdHlwZW9mIHZhbDtcbiAgcmV0dXJuIHZhbCA9PSBudWxsIHx8IHR5cGUgPT09IFwic3RyaW5nXCIgfHwgdHlwZSA9PT0gXCJib29sZWFuXCIgfHwgdHlwZSA9PT0gXCJudW1iZXJcIiB8fCBBcnJheS5pc0FycmF5KHZhbCkgfHwgaXNQbGFpbk9iamVjdCh2YWwpO1xufVxuZnVuY3Rpb24gZmluZE5vblNlcmlhbGl6YWJsZVZhbHVlKHZhbHVlLCBwYXRoID0gXCJcIiwgaXNTZXJpYWxpemFibGUgPSBpc1BsYWluLCBnZXRFbnRyaWVzLCBpZ25vcmVkUGF0aHMgPSBbXSwgY2FjaGUpIHtcbiAgbGV0IGZvdW5kTmVzdGVkU2VyaWFsaXphYmxlO1xuICBpZiAoIWlzU2VyaWFsaXphYmxlKHZhbHVlKSkge1xuICAgIHJldHVybiB7XG4gICAgICBrZXlQYXRoOiBwYXRoIHx8IFwiPHJvb3Q+XCIsXG4gICAgICB2YWx1ZVxuICAgIH07XG4gIH1cbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJvYmplY3RcIiB8fCB2YWx1ZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAoY2FjaGU/Lmhhcyh2YWx1ZSkpIHJldHVybiBmYWxzZTtcbiAgY29uc3QgZW50cmllcyA9IGdldEVudHJpZXMgIT0gbnVsbCA/IGdldEVudHJpZXModmFsdWUpIDogT2JqZWN0LmVudHJpZXModmFsdWUpO1xuICBjb25zdCBoYXNJZ25vcmVkUGF0aHMgPSBpZ25vcmVkUGF0aHMubGVuZ3RoID4gMDtcbiAgZm9yIChjb25zdCBba2V5LCBuZXN0ZWRWYWx1ZV0gb2YgZW50cmllcykge1xuICAgIGNvbnN0IG5lc3RlZFBhdGggPSBwYXRoID8gcGF0aCArIFwiLlwiICsga2V5IDoga2V5O1xuICAgIGlmIChoYXNJZ25vcmVkUGF0aHMpIHtcbiAgICAgIGNvbnN0IGhhc01hdGNoZXMgPSBpZ25vcmVkUGF0aHMuc29tZSgoaWdub3JlZCkgPT4ge1xuICAgICAgICBpZiAoaWdub3JlZCBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuICAgICAgICAgIHJldHVybiBpZ25vcmVkLnRlc3QobmVzdGVkUGF0aCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5lc3RlZFBhdGggPT09IGlnbm9yZWQ7XG4gICAgICB9KTtcbiAgICAgIGlmIChoYXNNYXRjaGVzKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoIWlzU2VyaWFsaXphYmxlKG5lc3RlZFZhbHVlKSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAga2V5UGF0aDogbmVzdGVkUGF0aCxcbiAgICAgICAgdmFsdWU6IG5lc3RlZFZhbHVlXG4gICAgICB9O1xuICAgIH1cbiAgICBpZiAodHlwZW9mIG5lc3RlZFZhbHVlID09PSBcIm9iamVjdFwiKSB7XG4gICAgICBmb3VuZE5lc3RlZFNlcmlhbGl6YWJsZSA9IGZpbmROb25TZXJpYWxpemFibGVWYWx1ZShuZXN0ZWRWYWx1ZSwgbmVzdGVkUGF0aCwgaXNTZXJpYWxpemFibGUsIGdldEVudHJpZXMsIGlnbm9yZWRQYXRocywgY2FjaGUpO1xuICAgICAgaWYgKGZvdW5kTmVzdGVkU2VyaWFsaXphYmxlKSB7XG4gICAgICAgIHJldHVybiBmb3VuZE5lc3RlZFNlcmlhbGl6YWJsZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaWYgKGNhY2hlICYmIGlzTmVzdGVkRnJvemVuKHZhbHVlKSkgY2FjaGUuYWRkKHZhbHVlKTtcbiAgcmV0dXJuIGZhbHNlO1xufVxuZnVuY3Rpb24gaXNOZXN0ZWRGcm96ZW4odmFsdWUpIHtcbiAgaWYgKCFPYmplY3QuaXNGcm96ZW4odmFsdWUpKSByZXR1cm4gZmFsc2U7XG4gIGZvciAoY29uc3QgbmVzdGVkVmFsdWUgb2YgT2JqZWN0LnZhbHVlcyh2YWx1ZSkpIHtcbiAgICBpZiAodHlwZW9mIG5lc3RlZFZhbHVlICE9PSBcIm9iamVjdFwiIHx8IG5lc3RlZFZhbHVlID09PSBudWxsKSBjb250aW51ZTtcbiAgICBpZiAoIWlzTmVzdGVkRnJvemVuKG5lc3RlZFZhbHVlKSkgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiB0cnVlO1xufVxuZnVuY3Rpb24gY3JlYXRlU2VyaWFsaXphYmxlU3RhdGVJbnZhcmlhbnRNaWRkbGV3YXJlKG9wdGlvbnMgPSB7fSkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgcmV0dXJuICgpID0+IChuZXh0KSA9PiAoYWN0aW9uKSA9PiBuZXh0KGFjdGlvbik7XG4gIH0gZWxzZSB7XG4gICAgY29uc3Qge1xuICAgICAgaXNTZXJpYWxpemFibGUgPSBpc1BsYWluLFxuICAgICAgZ2V0RW50cmllcyxcbiAgICAgIGlnbm9yZWRBY3Rpb25zID0gW10sXG4gICAgICBpZ25vcmVkQWN0aW9uUGF0aHMgPSBbXCJtZXRhLmFyZ1wiLCBcIm1ldGEuYmFzZVF1ZXJ5TWV0YVwiXSxcbiAgICAgIGlnbm9yZWRQYXRocyA9IFtdLFxuICAgICAgd2FybkFmdGVyID0gMzIsXG4gICAgICBpZ25vcmVTdGF0ZSA9IGZhbHNlLFxuICAgICAgaWdub3JlQWN0aW9ucyA9IGZhbHNlLFxuICAgICAgZGlzYWJsZUNhY2hlID0gZmFsc2VcbiAgICB9ID0gb3B0aW9ucztcbiAgICBjb25zdCBjYWNoZSA9ICFkaXNhYmxlQ2FjaGUgJiYgV2Vha1NldCA/IC8qIEBfX1BVUkVfXyAqLyBuZXcgV2Vha1NldCgpIDogdm9pZCAwO1xuICAgIHJldHVybiAoc3RvcmVBUEkpID0+IChuZXh0KSA9PiAoYWN0aW9uKSA9PiB7XG4gICAgICBpZiAoIWlzQWN0aW9uMihhY3Rpb24pKSB7XG4gICAgICAgIHJldHVybiBuZXh0KGFjdGlvbik7XG4gICAgICB9XG4gICAgICBjb25zdCByZXN1bHQgPSBuZXh0KGFjdGlvbik7XG4gICAgICBjb25zdCBtZWFzdXJlVXRpbHMgPSBnZXRUaW1lTWVhc3VyZVV0aWxzKHdhcm5BZnRlciwgXCJTZXJpYWxpemFibGVTdGF0ZUludmFyaWFudE1pZGRsZXdhcmVcIik7XG4gICAgICBpZiAoIWlnbm9yZUFjdGlvbnMgJiYgIShpZ25vcmVkQWN0aW9ucy5sZW5ndGggJiYgaWdub3JlZEFjdGlvbnMuaW5kZXhPZihhY3Rpb24udHlwZSkgIT09IC0xKSkge1xuICAgICAgICBtZWFzdXJlVXRpbHMubWVhc3VyZVRpbWUoKCkgPT4ge1xuICAgICAgICAgIGNvbnN0IGZvdW5kQWN0aW9uTm9uU2VyaWFsaXphYmxlVmFsdWUgPSBmaW5kTm9uU2VyaWFsaXphYmxlVmFsdWUoYWN0aW9uLCBcIlwiLCBpc1NlcmlhbGl6YWJsZSwgZ2V0RW50cmllcywgaWdub3JlZEFjdGlvblBhdGhzLCBjYWNoZSk7XG4gICAgICAgICAgaWYgKGZvdW5kQWN0aW9uTm9uU2VyaWFsaXphYmxlVmFsdWUpIHtcbiAgICAgICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgICAga2V5UGF0aCxcbiAgICAgICAgICAgICAgdmFsdWVcbiAgICAgICAgICAgIH0gPSBmb3VuZEFjdGlvbk5vblNlcmlhbGl6YWJsZVZhbHVlO1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihgQSBub24tc2VyaWFsaXphYmxlIHZhbHVlIHdhcyBkZXRlY3RlZCBpbiBhbiBhY3Rpb24sIGluIHRoZSBwYXRoOiBcXGAke2tleVBhdGh9XFxgLiBWYWx1ZTpgLCB2YWx1ZSwgXCJcXG5UYWtlIGEgbG9vayBhdCB0aGUgbG9naWMgdGhhdCBkaXNwYXRjaGVkIHRoaXMgYWN0aW9uOiBcIiwgYWN0aW9uLCBcIlxcbihTZWUgaHR0cHM6Ly9yZWR1eC5qcy5vcmcvZmFxL2FjdGlvbnMjd2h5LXNob3VsZC10eXBlLWJlLWEtc3RyaW5nLW9yLWF0LWxlYXN0LXNlcmlhbGl6YWJsZS13aHktc2hvdWxkLW15LWFjdGlvbi10eXBlcy1iZS1jb25zdGFudHMpXCIsIFwiXFxuKFRvIGFsbG93IG5vbi1zZXJpYWxpemFibGUgdmFsdWVzIHNlZTogaHR0cHM6Ly9yZWR1eC10b29sa2l0LmpzLm9yZy91c2FnZS91c2FnZS1ndWlkZSN3b3JraW5nLXdpdGgtbm9uLXNlcmlhbGl6YWJsZS1kYXRhKVwiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgaWYgKCFpZ25vcmVTdGF0ZSkge1xuICAgICAgICBtZWFzdXJlVXRpbHMubWVhc3VyZVRpbWUoKCkgPT4ge1xuICAgICAgICAgIGNvbnN0IHN0YXRlID0gc3RvcmVBUEkuZ2V0U3RhdGUoKTtcbiAgICAgICAgICBjb25zdCBmb3VuZFN0YXRlTm9uU2VyaWFsaXphYmxlVmFsdWUgPSBmaW5kTm9uU2VyaWFsaXphYmxlVmFsdWUoc3RhdGUsIFwiXCIsIGlzU2VyaWFsaXphYmxlLCBnZXRFbnRyaWVzLCBpZ25vcmVkUGF0aHMsIGNhY2hlKTtcbiAgICAgICAgICBpZiAoZm91bmRTdGF0ZU5vblNlcmlhbGl6YWJsZVZhbHVlKSB7XG4gICAgICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICAgIGtleVBhdGgsXG4gICAgICAgICAgICAgIHZhbHVlXG4gICAgICAgICAgICB9ID0gZm91bmRTdGF0ZU5vblNlcmlhbGl6YWJsZVZhbHVlO1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihgQSBub24tc2VyaWFsaXphYmxlIHZhbHVlIHdhcyBkZXRlY3RlZCBpbiB0aGUgc3RhdGUsIGluIHRoZSBwYXRoOiBcXGAke2tleVBhdGh9XFxgLiBWYWx1ZTpgLCB2YWx1ZSwgYFxuVGFrZSBhIGxvb2sgYXQgdGhlIHJlZHVjZXIocykgaGFuZGxpbmcgdGhpcyBhY3Rpb24gdHlwZTogJHthY3Rpb24udHlwZX0uXG4oU2VlIGh0dHBzOi8vcmVkdXguanMub3JnL2ZhcS9vcmdhbml6aW5nLXN0YXRlI2Nhbi1pLXB1dC1mdW5jdGlvbnMtcHJvbWlzZXMtb3Itb3RoZXItbm9uLXNlcmlhbGl6YWJsZS1pdGVtcy1pbi1teS1zdG9yZS1zdGF0ZSlgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBtZWFzdXJlVXRpbHMud2FybklmRXhjZWVkZWQoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbiAgfVxufVxuXG4vLyBzcmMvZ2V0RGVmYXVsdE1pZGRsZXdhcmUudHNcbmZ1bmN0aW9uIGlzQm9vbGVhbih4KSB7XG4gIHJldHVybiB0eXBlb2YgeCA9PT0gXCJib29sZWFuXCI7XG59XG52YXIgYnVpbGRHZXREZWZhdWx0TWlkZGxld2FyZSA9ICgpID0+IGZ1bmN0aW9uIGdldERlZmF1bHRNaWRkbGV3YXJlKG9wdGlvbnMpIHtcbiAgY29uc3Qge1xuICAgIHRodW5rID0gdHJ1ZSxcbiAgICBpbW11dGFibGVDaGVjayA9IHRydWUsXG4gICAgc2VyaWFsaXphYmxlQ2hlY2sgPSB0cnVlLFxuICAgIGFjdGlvbkNyZWF0b3JDaGVjayA9IHRydWVcbiAgfSA9IG9wdGlvbnMgPz8ge307XG4gIGxldCBtaWRkbGV3YXJlQXJyYXkgPSBuZXcgVHVwbGUoKTtcbiAgaWYgKHRodW5rKSB7XG4gICAgaWYgKGlzQm9vbGVhbih0aHVuaykpIHtcbiAgICAgIG1pZGRsZXdhcmVBcnJheS5wdXNoKHRodW5rTWlkZGxld2FyZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG1pZGRsZXdhcmVBcnJheS5wdXNoKHdpdGhFeHRyYUFyZ3VtZW50KHRodW5rLmV4dHJhQXJndW1lbnQpKTtcbiAgICB9XG4gIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgIGlmIChpbW11dGFibGVDaGVjaykge1xuICAgICAgbGV0IGltbXV0YWJsZU9wdGlvbnMgPSB7fTtcbiAgICAgIGlmICghaXNCb29sZWFuKGltbXV0YWJsZUNoZWNrKSkge1xuICAgICAgICBpbW11dGFibGVPcHRpb25zID0gaW1tdXRhYmxlQ2hlY2s7XG4gICAgICB9XG4gICAgICBtaWRkbGV3YXJlQXJyYXkudW5zaGlmdChjcmVhdGVJbW11dGFibGVTdGF0ZUludmFyaWFudE1pZGRsZXdhcmUoaW1tdXRhYmxlT3B0aW9ucykpO1xuICAgIH1cbiAgICBpZiAoc2VyaWFsaXphYmxlQ2hlY2spIHtcbiAgICAgIGxldCBzZXJpYWxpemFibGVPcHRpb25zID0ge307XG4gICAgICBpZiAoIWlzQm9vbGVhbihzZXJpYWxpemFibGVDaGVjaykpIHtcbiAgICAgICAgc2VyaWFsaXphYmxlT3B0aW9ucyA9IHNlcmlhbGl6YWJsZUNoZWNrO1xuICAgICAgfVxuICAgICAgbWlkZGxld2FyZUFycmF5LnB1c2goY3JlYXRlU2VyaWFsaXphYmxlU3RhdGVJbnZhcmlhbnRNaWRkbGV3YXJlKHNlcmlhbGl6YWJsZU9wdGlvbnMpKTtcbiAgICB9XG4gICAgaWYgKGFjdGlvbkNyZWF0b3JDaGVjaykge1xuICAgICAgbGV0IGFjdGlvbkNyZWF0b3JPcHRpb25zID0ge307XG4gICAgICBpZiAoIWlzQm9vbGVhbihhY3Rpb25DcmVhdG9yQ2hlY2spKSB7XG4gICAgICAgIGFjdGlvbkNyZWF0b3JPcHRpb25zID0gYWN0aW9uQ3JlYXRvckNoZWNrO1xuICAgICAgfVxuICAgICAgbWlkZGxld2FyZUFycmF5LnVuc2hpZnQoY3JlYXRlQWN0aW9uQ3JlYXRvckludmFyaWFudE1pZGRsZXdhcmUoYWN0aW9uQ3JlYXRvck9wdGlvbnMpKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG1pZGRsZXdhcmVBcnJheTtcbn07XG5cbi8vIHNyYy9hdXRvQmF0Y2hFbmhhbmNlci50c1xudmFyIFNIT1VMRF9BVVRPQkFUQ0ggPSBcIlJUS19hdXRvQmF0Y2hcIjtcbnZhciBwcmVwYXJlQXV0b0JhdGNoZWQgPSAoKSA9PiAocGF5bG9hZCkgPT4gKHtcbiAgcGF5bG9hZCxcbiAgbWV0YToge1xuICAgIFtTSE9VTERfQVVUT0JBVENIXTogdHJ1ZVxuICB9XG59KTtcbnZhciBjcmVhdGVRdWV1ZVdpdGhUaW1lciA9ICh0aW1lb3V0KSA9PiB7XG4gIHJldHVybiAobm90aWZ5KSA9PiB7XG4gICAgc2V0VGltZW91dChub3RpZnksIHRpbWVvdXQpO1xuICB9O1xufTtcbnZhciBhdXRvQmF0Y2hFbmhhbmNlciA9IChvcHRpb25zID0ge1xuICB0eXBlOiBcInJhZlwiXG59KSA9PiAobmV4dCkgPT4gKC4uLmFyZ3MpID0+IHtcbiAgY29uc3Qgc3RvcmUgPSBuZXh0KC4uLmFyZ3MpO1xuICBsZXQgbm90aWZ5aW5nID0gdHJ1ZTtcbiAgbGV0IHNob3VsZE5vdGlmeUF0RW5kT2ZUaWNrID0gZmFsc2U7XG4gIGxldCBub3RpZmljYXRpb25RdWV1ZWQgPSBmYWxzZTtcbiAgY29uc3QgbGlzdGVuZXJzID0gLyogQF9fUFVSRV9fICovIG5ldyBTZXQoKTtcbiAgY29uc3QgcXVldWVDYWxsYmFjayA9IG9wdGlvbnMudHlwZSA9PT0gXCJ0aWNrXCIgPyBxdWV1ZU1pY3JvdGFzayA6IG9wdGlvbnMudHlwZSA9PT0gXCJyYWZcIiA/IChcbiAgICAvLyByZXF1ZXN0QW5pbWF0aW9uRnJhbWUgd29uJ3QgZXhpc3QgaW4gU1NSIGVudmlyb25tZW50cy4gRmFsbCBiYWNrIHRvIGEgdmFndWUgYXBwcm94aW1hdGlvbiBqdXN0IHRvIGtlZXAgZnJvbSBlcnJvcmluZy5cbiAgICB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPyB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lIDogY3JlYXRlUXVldWVXaXRoVGltZXIoMTApXG4gICkgOiBvcHRpb25zLnR5cGUgPT09IFwiY2FsbGJhY2tcIiA/IG9wdGlvbnMucXVldWVOb3RpZmljYXRpb24gOiBjcmVhdGVRdWV1ZVdpdGhUaW1lcihvcHRpb25zLnRpbWVvdXQpO1xuICBjb25zdCBub3RpZnlMaXN0ZW5lcnMgPSAoKSA9PiB7XG4gICAgbm90aWZpY2F0aW9uUXVldWVkID0gZmFsc2U7XG4gICAgaWYgKHNob3VsZE5vdGlmeUF0RW5kT2ZUaWNrKSB7XG4gICAgICBzaG91bGROb3RpZnlBdEVuZE9mVGljayA9IGZhbHNlO1xuICAgICAgbGlzdGVuZXJzLmZvckVhY2goKGwpID0+IGwoKSk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgc3RvcmUsIHtcbiAgICAvLyBPdmVycmlkZSB0aGUgYmFzZSBgc3RvcmUuc3Vic2NyaWJlYCBtZXRob2QgdG8ga2VlcCBvcmlnaW5hbCBsaXN0ZW5lcnNcbiAgICAvLyBmcm9tIHJ1bm5pbmcgaWYgd2UncmUgZGVsYXlpbmcgbm90aWZpY2F0aW9uc1xuICAgIHN1YnNjcmliZShsaXN0ZW5lcjIpIHtcbiAgICAgIGNvbnN0IHdyYXBwZWRMaXN0ZW5lciA9ICgpID0+IG5vdGlmeWluZyAmJiBsaXN0ZW5lcjIoKTtcbiAgICAgIGNvbnN0IHVuc3Vic2NyaWJlID0gc3RvcmUuc3Vic2NyaWJlKHdyYXBwZWRMaXN0ZW5lcik7XG4gICAgICBsaXN0ZW5lcnMuYWRkKGxpc3RlbmVyMik7XG4gICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICB1bnN1YnNjcmliZSgpO1xuICAgICAgICBsaXN0ZW5lcnMuZGVsZXRlKGxpc3RlbmVyMik7XG4gICAgICB9O1xuICAgIH0sXG4gICAgLy8gT3ZlcnJpZGUgdGhlIGJhc2UgYHN0b3JlLmRpc3BhdGNoYCBtZXRob2Qgc28gdGhhdCB3ZSBjYW4gY2hlY2sgYWN0aW9uc1xuICAgIC8vIGZvciB0aGUgYHNob3VsZEF1dG9CYXRjaGAgZmxhZyBhbmQgZGV0ZXJtaW5lIGlmIGJhdGNoaW5nIGlzIGFjdGl2ZVxuICAgIGRpc3BhdGNoKGFjdGlvbikge1xuICAgICAgdHJ5IHtcbiAgICAgICAgbm90aWZ5aW5nID0gIWFjdGlvbj8ubWV0YT8uW1NIT1VMRF9BVVRPQkFUQ0hdO1xuICAgICAgICBzaG91bGROb3RpZnlBdEVuZE9mVGljayA9ICFub3RpZnlpbmc7XG4gICAgICAgIGlmIChzaG91bGROb3RpZnlBdEVuZE9mVGljaykge1xuICAgICAgICAgIGlmICghbm90aWZpY2F0aW9uUXVldWVkKSB7XG4gICAgICAgICAgICBub3RpZmljYXRpb25RdWV1ZWQgPSB0cnVlO1xuICAgICAgICAgICAgcXVldWVDYWxsYmFjayhub3RpZnlMaXN0ZW5lcnMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3RvcmUuZGlzcGF0Y2goYWN0aW9uKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIG5vdGlmeWluZyA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbn07XG5cbi8vIHNyYy9nZXREZWZhdWx0RW5oYW5jZXJzLnRzXG52YXIgYnVpbGRHZXREZWZhdWx0RW5oYW5jZXJzID0gKG1pZGRsZXdhcmVFbmhhbmNlcikgPT4gZnVuY3Rpb24gZ2V0RGVmYXVsdEVuaGFuY2VycyhvcHRpb25zKSB7XG4gIGNvbnN0IHtcbiAgICBhdXRvQmF0Y2ggPSB0cnVlXG4gIH0gPSBvcHRpb25zID8/IHt9O1xuICBsZXQgZW5oYW5jZXJBcnJheSA9IG5ldyBUdXBsZShtaWRkbGV3YXJlRW5oYW5jZXIpO1xuICBpZiAoYXV0b0JhdGNoKSB7XG4gICAgZW5oYW5jZXJBcnJheS5wdXNoKGF1dG9CYXRjaEVuaGFuY2VyKHR5cGVvZiBhdXRvQmF0Y2ggPT09IFwib2JqZWN0XCIgPyBhdXRvQmF0Y2ggOiB2b2lkIDApKTtcbiAgfVxuICByZXR1cm4gZW5oYW5jZXJBcnJheTtcbn07XG5cbi8vIHNyYy9jb25maWd1cmVTdG9yZS50c1xuZnVuY3Rpb24gY29uZmlndXJlU3RvcmUob3B0aW9ucykge1xuICBjb25zdCBnZXREZWZhdWx0TWlkZGxld2FyZSA9IGJ1aWxkR2V0RGVmYXVsdE1pZGRsZXdhcmUoKTtcbiAgY29uc3Qge1xuICAgIHJlZHVjZXIgPSB2b2lkIDAsXG4gICAgbWlkZGxld2FyZSxcbiAgICBkZXZUb29scyA9IHRydWUsXG4gICAgcHJlbG9hZGVkU3RhdGUgPSB2b2lkIDAsXG4gICAgZW5oYW5jZXJzID0gdm9pZCAwXG4gIH0gPSBvcHRpb25zIHx8IHt9O1xuICBsZXQgcm9vdFJlZHVjZXI7XG4gIGlmICh0eXBlb2YgcmVkdWNlciA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgcm9vdFJlZHVjZXIgPSByZWR1Y2VyO1xuICB9IGVsc2UgaWYgKGlzUGxhaW5PYmplY3QyKHJlZHVjZXIpKSB7XG4gICAgcm9vdFJlZHVjZXIgPSBjb21iaW5lUmVkdWNlcnMocmVkdWNlcik7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMSkgOiBcImByZWR1Y2VyYCBpcyBhIHJlcXVpcmVkIGFyZ3VtZW50LCBhbmQgbXVzdCBiZSBhIGZ1bmN0aW9uIG9yIGFuIG9iamVjdCBvZiBmdW5jdGlvbnMgdGhhdCBjYW4gYmUgcGFzc2VkIHRvIGNvbWJpbmVSZWR1Y2Vyc1wiKTtcbiAgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmIG1pZGRsZXdhcmUgJiYgdHlwZW9mIG1pZGRsZXdhcmUgIT09IFwiZnVuY3Rpb25cIikge1xuICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDIpIDogXCJgbWlkZGxld2FyZWAgZmllbGQgbXVzdCBiZSBhIGNhbGxiYWNrXCIpO1xuICB9XG4gIGxldCBmaW5hbE1pZGRsZXdhcmU7XG4gIGlmICh0eXBlb2YgbWlkZGxld2FyZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZmluYWxNaWRkbGV3YXJlID0gbWlkZGxld2FyZShnZXREZWZhdWx0TWlkZGxld2FyZSk7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiAmJiAhQXJyYXkuaXNBcnJheShmaW5hbE1pZGRsZXdhcmUpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgzKSA6IFwid2hlbiB1c2luZyBhIG1pZGRsZXdhcmUgYnVpbGRlciBmdW5jdGlvbiwgYW4gYXJyYXkgb2YgbWlkZGxld2FyZSBtdXN0IGJlIHJldHVybmVkXCIpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBmaW5hbE1pZGRsZXdhcmUgPSBnZXREZWZhdWx0TWlkZGxld2FyZSgpO1xuICB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiYgZmluYWxNaWRkbGV3YXJlLnNvbWUoKGl0ZW0pID0+IHR5cGVvZiBpdGVtICE9PSBcImZ1bmN0aW9uXCIpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNCkgOiBcImVhY2ggbWlkZGxld2FyZSBwcm92aWRlZCB0byBjb25maWd1cmVTdG9yZSBtdXN0IGJlIGEgZnVuY3Rpb25cIik7XG4gIH1cbiAgbGV0IGZpbmFsQ29tcG9zZSA9IGNvbXBvc2UyO1xuICBpZiAoZGV2VG9vbHMpIHtcbiAgICBmaW5hbENvbXBvc2UgPSBjb21wb3NlV2l0aERldlRvb2xzKHtcbiAgICAgIC8vIEVuYWJsZSBjYXB0dXJlIG9mIHN0YWNrIHRyYWNlcyBmb3IgZGlzcGF0Y2hlZCBSZWR1eCBhY3Rpb25zXG4gICAgICB0cmFjZTogcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiLFxuICAgICAgLi4udHlwZW9mIGRldlRvb2xzID09PSBcIm9iamVjdFwiICYmIGRldlRvb2xzXG4gICAgfSk7XG4gIH1cbiAgY29uc3QgbWlkZGxld2FyZUVuaGFuY2VyID0gYXBwbHlNaWRkbGV3YXJlKC4uLmZpbmFsTWlkZGxld2FyZSk7XG4gIGNvbnN0IGdldERlZmF1bHRFbmhhbmNlcnMgPSBidWlsZEdldERlZmF1bHRFbmhhbmNlcnMobWlkZGxld2FyZUVuaGFuY2VyKTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiAmJiBlbmhhbmNlcnMgJiYgdHlwZW9mIGVuaGFuY2VycyAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNSkgOiBcImBlbmhhbmNlcnNgIGZpZWxkIG11c3QgYmUgYSBjYWxsYmFja1wiKTtcbiAgfVxuICBsZXQgc3RvcmVFbmhhbmNlcnMgPSB0eXBlb2YgZW5oYW5jZXJzID09PSBcImZ1bmN0aW9uXCIgPyBlbmhhbmNlcnMoZ2V0RGVmYXVsdEVuaGFuY2VycykgOiBnZXREZWZhdWx0RW5oYW5jZXJzKCk7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiYgIUFycmF5LmlzQXJyYXkoc3RvcmVFbmhhbmNlcnMpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNikgOiBcImBlbmhhbmNlcnNgIGNhbGxiYWNrIG11c3QgcmV0dXJuIGFuIGFycmF5XCIpO1xuICB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiYgc3RvcmVFbmhhbmNlcnMuc29tZSgoaXRlbSkgPT4gdHlwZW9mIGl0ZW0gIT09IFwiZnVuY3Rpb25cIikpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg3KSA6IFwiZWFjaCBlbmhhbmNlciBwcm92aWRlZCB0byBjb25maWd1cmVTdG9yZSBtdXN0IGJlIGEgZnVuY3Rpb25cIik7XG4gIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiAmJiBmaW5hbE1pZGRsZXdhcmUubGVuZ3RoICYmICFzdG9yZUVuaGFuY2Vycy5pbmNsdWRlcyhtaWRkbGV3YXJlRW5oYW5jZXIpKSB7XG4gICAgY29uc29sZS5lcnJvcihcIm1pZGRsZXdhcmVzIHdlcmUgcHJvdmlkZWQsIGJ1dCBtaWRkbGV3YXJlIGVuaGFuY2VyIHdhcyBub3QgaW5jbHVkZWQgaW4gZmluYWwgZW5oYW5jZXJzIC0gbWFrZSBzdXJlIHRvIGNhbGwgYGdldERlZmF1bHRFbmhhbmNlcnNgXCIpO1xuICB9XG4gIGNvbnN0IGNvbXBvc2VkRW5oYW5jZXIgPSBmaW5hbENvbXBvc2UoLi4uc3RvcmVFbmhhbmNlcnMpO1xuICByZXR1cm4gY3JlYXRlU3RvcmUocm9vdFJlZHVjZXIsIHByZWxvYWRlZFN0YXRlLCBjb21wb3NlZEVuaGFuY2VyKTtcbn1cblxuLy8gc3JjL2NyZWF0ZVJlZHVjZXIudHNcbmltcG9ydCB7IHByb2R1Y2UgYXMgY3JlYXRlTmV4dFN0YXRlMiwgaXNEcmFmdCBhcyBpc0RyYWZ0MiwgaXNEcmFmdGFibGUgYXMgaXNEcmFmdGFibGUyIH0gZnJvbSBcImltbWVyXCI7XG5cbi8vIHNyYy9tYXBCdWlsZGVycy50c1xuZnVuY3Rpb24gZXhlY3V0ZVJlZHVjZXJCdWlsZGVyQ2FsbGJhY2soYnVpbGRlckNhbGxiYWNrKSB7XG4gIGNvbnN0IGFjdGlvbnNNYXAgPSB7fTtcbiAgY29uc3QgYWN0aW9uTWF0Y2hlcnMgPSBbXTtcbiAgbGV0IGRlZmF1bHRDYXNlUmVkdWNlcjtcbiAgY29uc3QgYnVpbGRlciA9IHtcbiAgICBhZGRDYXNlKHR5cGVPckFjdGlvbkNyZWF0b3IsIHJlZHVjZXIpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgaWYgKGFjdGlvbk1hdGNoZXJzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgyNikgOiBcImBidWlsZGVyLmFkZENhc2VgIHNob3VsZCBvbmx5IGJlIGNhbGxlZCBiZWZvcmUgY2FsbGluZyBgYnVpbGRlci5hZGRNYXRjaGVyYFwiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGVmYXVsdENhc2VSZWR1Y2VyKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMjcpIDogXCJgYnVpbGRlci5hZGRDYXNlYCBzaG91bGQgb25seSBiZSBjYWxsZWQgYmVmb3JlIGNhbGxpbmcgYGJ1aWxkZXIuYWRkRGVmYXVsdENhc2VgXCIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjb25zdCB0eXBlID0gdHlwZW9mIHR5cGVPckFjdGlvbkNyZWF0b3IgPT09IFwic3RyaW5nXCIgPyB0eXBlT3JBY3Rpb25DcmVhdG9yIDogdHlwZU9yQWN0aW9uQ3JlYXRvci50eXBlO1xuICAgICAgaWYgKCF0eXBlKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDI4KSA6IFwiYGJ1aWxkZXIuYWRkQ2FzZWAgY2Fubm90IGJlIGNhbGxlZCB3aXRoIGFuIGVtcHR5IGFjdGlvbiB0eXBlXCIpO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGUgaW4gYWN0aW9uc01hcCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgyOSkgOiBgXFxgYnVpbGRlci5hZGRDYXNlXFxgIGNhbm5vdCBiZSBjYWxsZWQgd2l0aCB0d28gcmVkdWNlcnMgZm9yIHRoZSBzYW1lIGFjdGlvbiB0eXBlICcke3R5cGV9J2ApO1xuICAgICAgfVxuICAgICAgYWN0aW9uc01hcFt0eXBlXSA9IHJlZHVjZXI7XG4gICAgICByZXR1cm4gYnVpbGRlcjtcbiAgICB9LFxuICAgIGFkZE1hdGNoZXIobWF0Y2hlciwgcmVkdWNlcikge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICBpZiAoZGVmYXVsdENhc2VSZWR1Y2VyKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMzApIDogXCJgYnVpbGRlci5hZGRNYXRjaGVyYCBzaG91bGQgb25seSBiZSBjYWxsZWQgYmVmb3JlIGNhbGxpbmcgYGJ1aWxkZXIuYWRkRGVmYXVsdENhc2VgXCIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBhY3Rpb25NYXRjaGVycy5wdXNoKHtcbiAgICAgICAgbWF0Y2hlcixcbiAgICAgICAgcmVkdWNlclxuICAgICAgfSk7XG4gICAgICByZXR1cm4gYnVpbGRlcjtcbiAgICB9LFxuICAgIGFkZERlZmF1bHRDYXNlKHJlZHVjZXIpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgaWYgKGRlZmF1bHRDYXNlUmVkdWNlcikge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDMxKSA6IFwiYGJ1aWxkZXIuYWRkRGVmYXVsdENhc2VgIGNhbiBvbmx5IGJlIGNhbGxlZCBvbmNlXCIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBkZWZhdWx0Q2FzZVJlZHVjZXIgPSByZWR1Y2VyO1xuICAgICAgcmV0dXJuIGJ1aWxkZXI7XG4gICAgfVxuICB9O1xuICBidWlsZGVyQ2FsbGJhY2soYnVpbGRlcik7XG4gIHJldHVybiBbYWN0aW9uc01hcCwgYWN0aW9uTWF0Y2hlcnMsIGRlZmF1bHRDYXNlUmVkdWNlcl07XG59XG5cbi8vIHNyYy9jcmVhdGVSZWR1Y2VyLnRzXG5mdW5jdGlvbiBpc1N0YXRlRnVuY3Rpb24oeCkge1xuICByZXR1cm4gdHlwZW9mIHggPT09IFwiZnVuY3Rpb25cIjtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVJlZHVjZXIoaW5pdGlhbFN0YXRlLCBtYXBPckJ1aWxkZXJDYWxsYmFjaykge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgaWYgKHR5cGVvZiBtYXBPckJ1aWxkZXJDYWxsYmFjayA9PT0gXCJvYmplY3RcIikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoOCkgOiBcIlRoZSBvYmplY3Qgbm90YXRpb24gZm9yIGBjcmVhdGVSZWR1Y2VyYCBoYXMgYmVlbiByZW1vdmVkLiBQbGVhc2UgdXNlIHRoZSAnYnVpbGRlciBjYWxsYmFjaycgbm90YXRpb24gaW5zdGVhZDogaHR0cHM6Ly9yZWR1eC10b29sa2l0LmpzLm9yZy9hcGkvY3JlYXRlUmVkdWNlclwiKTtcbiAgICB9XG4gIH1cbiAgbGV0IFthY3Rpb25zTWFwLCBmaW5hbEFjdGlvbk1hdGNoZXJzLCBmaW5hbERlZmF1bHRDYXNlUmVkdWNlcl0gPSBleGVjdXRlUmVkdWNlckJ1aWxkZXJDYWxsYmFjayhtYXBPckJ1aWxkZXJDYWxsYmFjayk7XG4gIGxldCBnZXRJbml0aWFsU3RhdGU7XG4gIGlmIChpc1N0YXRlRnVuY3Rpb24oaW5pdGlhbFN0YXRlKSkge1xuICAgIGdldEluaXRpYWxTdGF0ZSA9ICgpID0+IGZyZWV6ZURyYWZ0YWJsZShpbml0aWFsU3RhdGUoKSk7XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgZnJvemVuSW5pdGlhbFN0YXRlID0gZnJlZXplRHJhZnRhYmxlKGluaXRpYWxTdGF0ZSk7XG4gICAgZ2V0SW5pdGlhbFN0YXRlID0gKCkgPT4gZnJvemVuSW5pdGlhbFN0YXRlO1xuICB9XG4gIGZ1bmN0aW9uIHJlZHVjZXIoc3RhdGUgPSBnZXRJbml0aWFsU3RhdGUoKSwgYWN0aW9uKSB7XG4gICAgbGV0IGNhc2VSZWR1Y2VycyA9IFthY3Rpb25zTWFwW2FjdGlvbi50eXBlXSwgLi4uZmluYWxBY3Rpb25NYXRjaGVycy5maWx0ZXIoKHtcbiAgICAgIG1hdGNoZXJcbiAgICB9KSA9PiBtYXRjaGVyKGFjdGlvbikpLm1hcCgoe1xuICAgICAgcmVkdWNlcjogcmVkdWNlcjJcbiAgICB9KSA9PiByZWR1Y2VyMildO1xuICAgIGlmIChjYXNlUmVkdWNlcnMuZmlsdGVyKChjcikgPT4gISFjcikubGVuZ3RoID09PSAwKSB7XG4gICAgICBjYXNlUmVkdWNlcnMgPSBbZmluYWxEZWZhdWx0Q2FzZVJlZHVjZXJdO1xuICAgIH1cbiAgICByZXR1cm4gY2FzZVJlZHVjZXJzLnJlZHVjZSgocHJldmlvdXNTdGF0ZSwgY2FzZVJlZHVjZXIpID0+IHtcbiAgICAgIGlmIChjYXNlUmVkdWNlcikge1xuICAgICAgICBpZiAoaXNEcmFmdDIocHJldmlvdXNTdGF0ZSkpIHtcbiAgICAgICAgICBjb25zdCBkcmFmdCA9IHByZXZpb3VzU3RhdGU7XG4gICAgICAgICAgY29uc3QgcmVzdWx0ID0gY2FzZVJlZHVjZXIoZHJhZnQsIGFjdGlvbik7XG4gICAgICAgICAgaWYgKHJlc3VsdCA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgICByZXR1cm4gcHJldmlvdXNTdGF0ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfSBlbHNlIGlmICghaXNEcmFmdGFibGUyKHByZXZpb3VzU3RhdGUpKSB7XG4gICAgICAgICAgY29uc3QgcmVzdWx0ID0gY2FzZVJlZHVjZXIocHJldmlvdXNTdGF0ZSwgYWN0aW9uKTtcbiAgICAgICAgICBpZiAocmVzdWx0ID09PSB2b2lkIDApIHtcbiAgICAgICAgICAgIGlmIChwcmV2aW91c1N0YXRlID09PSBudWxsKSB7XG4gICAgICAgICAgICAgIHJldHVybiBwcmV2aW91c1N0YXRlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgRXJyb3IoXCJBIGNhc2UgcmVkdWNlciBvbiBhIG5vbi1kcmFmdGFibGUgdmFsdWUgbXVzdCBub3QgcmV0dXJuIHVuZGVmaW5lZFwiKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gY3JlYXRlTmV4dFN0YXRlMihwcmV2aW91c1N0YXRlLCAoZHJhZnQpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBjYXNlUmVkdWNlcihkcmFmdCwgYWN0aW9uKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHByZXZpb3VzU3RhdGU7XG4gICAgfSwgc3RhdGUpO1xuICB9XG4gIHJlZHVjZXIuZ2V0SW5pdGlhbFN0YXRlID0gZ2V0SW5pdGlhbFN0YXRlO1xuICByZXR1cm4gcmVkdWNlcjtcbn1cblxuLy8gc3JjL21hdGNoZXJzLnRzXG52YXIgbWF0Y2hlcyA9IChtYXRjaGVyLCBhY3Rpb24pID0+IHtcbiAgaWYgKGhhc01hdGNoRnVuY3Rpb24obWF0Y2hlcikpIHtcbiAgICByZXR1cm4gbWF0Y2hlci5tYXRjaChhY3Rpb24pO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBtYXRjaGVyKGFjdGlvbik7XG4gIH1cbn07XG5mdW5jdGlvbiBpc0FueU9mKC4uLm1hdGNoZXJzKSB7XG4gIHJldHVybiAoYWN0aW9uKSA9PiB7XG4gICAgcmV0dXJuIG1hdGNoZXJzLnNvbWUoKG1hdGNoZXIpID0+IG1hdGNoZXMobWF0Y2hlciwgYWN0aW9uKSk7XG4gIH07XG59XG5mdW5jdGlvbiBpc0FsbE9mKC4uLm1hdGNoZXJzKSB7XG4gIHJldHVybiAoYWN0aW9uKSA9PiB7XG4gICAgcmV0dXJuIG1hdGNoZXJzLmV2ZXJ5KChtYXRjaGVyKSA9PiBtYXRjaGVzKG1hdGNoZXIsIGFjdGlvbikpO1xuICB9O1xufVxuZnVuY3Rpb24gaGFzRXhwZWN0ZWRSZXF1ZXN0TWV0YWRhdGEoYWN0aW9uLCB2YWxpZFN0YXR1cykge1xuICBpZiAoIWFjdGlvbiB8fCAhYWN0aW9uLm1ldGEpIHJldHVybiBmYWxzZTtcbiAgY29uc3QgaGFzVmFsaWRSZXF1ZXN0SWQgPSB0eXBlb2YgYWN0aW9uLm1ldGEucmVxdWVzdElkID09PSBcInN0cmluZ1wiO1xuICBjb25zdCBoYXNWYWxpZFJlcXVlc3RTdGF0dXMgPSB2YWxpZFN0YXR1cy5pbmRleE9mKGFjdGlvbi5tZXRhLnJlcXVlc3RTdGF0dXMpID4gLTE7XG4gIHJldHVybiBoYXNWYWxpZFJlcXVlc3RJZCAmJiBoYXNWYWxpZFJlcXVlc3RTdGF0dXM7XG59XG5mdW5jdGlvbiBpc0FzeW5jVGh1bmtBcnJheShhKSB7XG4gIHJldHVybiB0eXBlb2YgYVswXSA9PT0gXCJmdW5jdGlvblwiICYmIFwicGVuZGluZ1wiIGluIGFbMF0gJiYgXCJmdWxmaWxsZWRcIiBpbiBhWzBdICYmIFwicmVqZWN0ZWRcIiBpbiBhWzBdO1xufVxuZnVuY3Rpb24gaXNQZW5kaW5nKC4uLmFzeW5jVGh1bmtzKSB7XG4gIGlmIChhc3luY1RodW5rcy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gKGFjdGlvbikgPT4gaGFzRXhwZWN0ZWRSZXF1ZXN0TWV0YWRhdGEoYWN0aW9uLCBbXCJwZW5kaW5nXCJdKTtcbiAgfVxuICBpZiAoIWlzQXN5bmNUaHVua0FycmF5KGFzeW5jVGh1bmtzKSkge1xuICAgIHJldHVybiBpc1BlbmRpbmcoKShhc3luY1RodW5rc1swXSk7XG4gIH1cbiAgcmV0dXJuIGlzQW55T2YoLi4uYXN5bmNUaHVua3MubWFwKChhc3luY1RodW5rKSA9PiBhc3luY1RodW5rLnBlbmRpbmcpKTtcbn1cbmZ1bmN0aW9uIGlzUmVqZWN0ZWQoLi4uYXN5bmNUaHVua3MpIHtcbiAgaWYgKGFzeW5jVGh1bmtzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiAoYWN0aW9uKSA9PiBoYXNFeHBlY3RlZFJlcXVlc3RNZXRhZGF0YShhY3Rpb24sIFtcInJlamVjdGVkXCJdKTtcbiAgfVxuICBpZiAoIWlzQXN5bmNUaHVua0FycmF5KGFzeW5jVGh1bmtzKSkge1xuICAgIHJldHVybiBpc1JlamVjdGVkKCkoYXN5bmNUaHVua3NbMF0pO1xuICB9XG4gIHJldHVybiBpc0FueU9mKC4uLmFzeW5jVGh1bmtzLm1hcCgoYXN5bmNUaHVuaykgPT4gYXN5bmNUaHVuay5yZWplY3RlZCkpO1xufVxuZnVuY3Rpb24gaXNSZWplY3RlZFdpdGhWYWx1ZSguLi5hc3luY1RodW5rcykge1xuICBjb25zdCBoYXNGbGFnID0gKGFjdGlvbikgPT4ge1xuICAgIHJldHVybiBhY3Rpb24gJiYgYWN0aW9uLm1ldGEgJiYgYWN0aW9uLm1ldGEucmVqZWN0ZWRXaXRoVmFsdWU7XG4gIH07XG4gIGlmIChhc3luY1RodW5rcy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gaXNBbGxPZihpc1JlamVjdGVkKC4uLmFzeW5jVGh1bmtzKSwgaGFzRmxhZyk7XG4gIH1cbiAgaWYgKCFpc0FzeW5jVGh1bmtBcnJheShhc3luY1RodW5rcykpIHtcbiAgICByZXR1cm4gaXNSZWplY3RlZFdpdGhWYWx1ZSgpKGFzeW5jVGh1bmtzWzBdKTtcbiAgfVxuICByZXR1cm4gaXNBbGxPZihpc1JlamVjdGVkKC4uLmFzeW5jVGh1bmtzKSwgaGFzRmxhZyk7XG59XG5mdW5jdGlvbiBpc0Z1bGZpbGxlZCguLi5hc3luY1RodW5rcykge1xuICBpZiAoYXN5bmNUaHVua3MubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIChhY3Rpb24pID0+IGhhc0V4cGVjdGVkUmVxdWVzdE1ldGFkYXRhKGFjdGlvbiwgW1wiZnVsZmlsbGVkXCJdKTtcbiAgfVxuICBpZiAoIWlzQXN5bmNUaHVua0FycmF5KGFzeW5jVGh1bmtzKSkge1xuICAgIHJldHVybiBpc0Z1bGZpbGxlZCgpKGFzeW5jVGh1bmtzWzBdKTtcbiAgfVxuICByZXR1cm4gaXNBbnlPZiguLi5hc3luY1RodW5rcy5tYXAoKGFzeW5jVGh1bmspID0+IGFzeW5jVGh1bmsuZnVsZmlsbGVkKSk7XG59XG5mdW5jdGlvbiBpc0FzeW5jVGh1bmtBY3Rpb24oLi4uYXN5bmNUaHVua3MpIHtcbiAgaWYgKGFzeW5jVGh1bmtzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiAoYWN0aW9uKSA9PiBoYXNFeHBlY3RlZFJlcXVlc3RNZXRhZGF0YShhY3Rpb24sIFtcInBlbmRpbmdcIiwgXCJmdWxmaWxsZWRcIiwgXCJyZWplY3RlZFwiXSk7XG4gIH1cbiAgaWYgKCFpc0FzeW5jVGh1bmtBcnJheShhc3luY1RodW5rcykpIHtcbiAgICByZXR1cm4gaXNBc3luY1RodW5rQWN0aW9uKCkoYXN5bmNUaHVua3NbMF0pO1xuICB9XG4gIHJldHVybiBpc0FueU9mKC4uLmFzeW5jVGh1bmtzLmZsYXRNYXAoKGFzeW5jVGh1bmspID0+IFthc3luY1RodW5rLnBlbmRpbmcsIGFzeW5jVGh1bmsucmVqZWN0ZWQsIGFzeW5jVGh1bmsuZnVsZmlsbGVkXSkpO1xufVxuXG4vLyBzcmMvbmFub2lkLnRzXG52YXIgdXJsQWxwaGFiZXQgPSBcIk1vZHVsZVN5bWJoYXNPd25Qci0wMTIzNDU2Nzg5QUJDREVGR0hOUlZmZ2N0aVV2el9LcVlUSmtMeHBaWElqUVdcIjtcbnZhciBuYW5vaWQgPSAoc2l6ZSA9IDIxKSA9PiB7XG4gIGxldCBpZCA9IFwiXCI7XG4gIGxldCBpID0gc2l6ZTtcbiAgd2hpbGUgKGktLSkge1xuICAgIGlkICs9IHVybEFscGhhYmV0W01hdGgucmFuZG9tKCkgKiA2NCB8IDBdO1xuICB9XG4gIHJldHVybiBpZDtcbn07XG5cbi8vIHNyYy9jcmVhdGVBc3luY1RodW5rLnRzXG52YXIgY29tbW9uUHJvcGVydGllcyA9IFtcIm5hbWVcIiwgXCJtZXNzYWdlXCIsIFwic3RhY2tcIiwgXCJjb2RlXCJdO1xudmFyIFJlamVjdFdpdGhWYWx1ZSA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3IocGF5bG9hZCwgbWV0YSkge1xuICAgIHRoaXMucGF5bG9hZCA9IHBheWxvYWQ7XG4gICAgdGhpcy5tZXRhID0gbWV0YTtcbiAgfVxuICAvKlxuICB0eXBlLW9ubHkgcHJvcGVydHkgdG8gZGlzdGluZ3Vpc2ggYmV0d2VlbiBSZWplY3RXaXRoVmFsdWUgYW5kIEZ1bGZpbGxXaXRoTWV0YVxuICBkb2VzIG5vdCBleGlzdCBhdCBydW50aW1lXG4gICovXG4gIF90eXBlO1xufTtcbnZhciBGdWxmaWxsV2l0aE1ldGEgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKHBheWxvYWQsIG1ldGEpIHtcbiAgICB0aGlzLnBheWxvYWQgPSBwYXlsb2FkO1xuICAgIHRoaXMubWV0YSA9IG1ldGE7XG4gIH1cbiAgLypcbiAgdHlwZS1vbmx5IHByb3BlcnR5IHRvIGRpc3Rpbmd1aXNoIGJldHdlZW4gUmVqZWN0V2l0aFZhbHVlIGFuZCBGdWxmaWxsV2l0aE1ldGFcbiAgZG9lcyBub3QgZXhpc3QgYXQgcnVudGltZVxuICAqL1xuICBfdHlwZTtcbn07XG52YXIgbWluaVNlcmlhbGl6ZUVycm9yID0gKHZhbHVlKSA9PiB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiYgdmFsdWUgIT09IG51bGwpIHtcbiAgICBjb25zdCBzaW1wbGVFcnJvciA9IHt9O1xuICAgIGZvciAoY29uc3QgcHJvcGVydHkgb2YgY29tbW9uUHJvcGVydGllcykge1xuICAgICAgaWYgKHR5cGVvZiB2YWx1ZVtwcm9wZXJ0eV0gPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgc2ltcGxlRXJyb3JbcHJvcGVydHldID0gdmFsdWVbcHJvcGVydHldO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc2ltcGxlRXJyb3I7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBtZXNzYWdlOiBTdHJpbmcodmFsdWUpXG4gIH07XG59O1xudmFyIGNyZWF0ZUFzeW5jVGh1bmsgPSAvKiBAX19QVVJFX18gKi8gKCgpID0+IHtcbiAgZnVuY3Rpb24gY3JlYXRlQXN5bmNUaHVuazIodHlwZVByZWZpeCwgcGF5bG9hZENyZWF0b3IsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBmdWxmaWxsZWQgPSBjcmVhdGVBY3Rpb24odHlwZVByZWZpeCArIFwiL2Z1bGZpbGxlZFwiLCAocGF5bG9hZCwgcmVxdWVzdElkLCBhcmcsIG1ldGEpID0+ICh7XG4gICAgICBwYXlsb2FkLFxuICAgICAgbWV0YToge1xuICAgICAgICAuLi5tZXRhIHx8IHt9LFxuICAgICAgICBhcmcsXG4gICAgICAgIHJlcXVlc3RJZCxcbiAgICAgICAgcmVxdWVzdFN0YXR1czogXCJmdWxmaWxsZWRcIlxuICAgICAgfVxuICAgIH0pKTtcbiAgICBjb25zdCBwZW5kaW5nID0gY3JlYXRlQWN0aW9uKHR5cGVQcmVmaXggKyBcIi9wZW5kaW5nXCIsIChyZXF1ZXN0SWQsIGFyZywgbWV0YSkgPT4gKHtcbiAgICAgIHBheWxvYWQ6IHZvaWQgMCxcbiAgICAgIG1ldGE6IHtcbiAgICAgICAgLi4ubWV0YSB8fCB7fSxcbiAgICAgICAgYXJnLFxuICAgICAgICByZXF1ZXN0SWQsXG4gICAgICAgIHJlcXVlc3RTdGF0dXM6IFwicGVuZGluZ1wiXG4gICAgICB9XG4gICAgfSkpO1xuICAgIGNvbnN0IHJlamVjdGVkID0gY3JlYXRlQWN0aW9uKHR5cGVQcmVmaXggKyBcIi9yZWplY3RlZFwiLCAoZXJyb3IsIHJlcXVlc3RJZCwgYXJnLCBwYXlsb2FkLCBtZXRhKSA9PiAoe1xuICAgICAgcGF5bG9hZCxcbiAgICAgIGVycm9yOiAob3B0aW9ucyAmJiBvcHRpb25zLnNlcmlhbGl6ZUVycm9yIHx8IG1pbmlTZXJpYWxpemVFcnJvcikoZXJyb3IgfHwgXCJSZWplY3RlZFwiKSxcbiAgICAgIG1ldGE6IHtcbiAgICAgICAgLi4ubWV0YSB8fCB7fSxcbiAgICAgICAgYXJnLFxuICAgICAgICByZXF1ZXN0SWQsXG4gICAgICAgIHJlamVjdGVkV2l0aFZhbHVlOiAhIXBheWxvYWQsXG4gICAgICAgIHJlcXVlc3RTdGF0dXM6IFwicmVqZWN0ZWRcIixcbiAgICAgICAgYWJvcnRlZDogZXJyb3I/Lm5hbWUgPT09IFwiQWJvcnRFcnJvclwiLFxuICAgICAgICBjb25kaXRpb246IGVycm9yPy5uYW1lID09PSBcIkNvbmRpdGlvbkVycm9yXCJcbiAgICAgIH1cbiAgICB9KSk7XG4gICAgZnVuY3Rpb24gYWN0aW9uQ3JlYXRvcihhcmcpIHtcbiAgICAgIHJldHVybiAoZGlzcGF0Y2gsIGdldFN0YXRlLCBleHRyYSkgPT4ge1xuICAgICAgICBjb25zdCByZXF1ZXN0SWQgPSBvcHRpb25zPy5pZEdlbmVyYXRvciA/IG9wdGlvbnMuaWRHZW5lcmF0b3IoYXJnKSA6IG5hbm9pZCgpO1xuICAgICAgICBjb25zdCBhYm9ydENvbnRyb2xsZXIgPSBuZXcgQWJvcnRDb250cm9sbGVyKCk7XG4gICAgICAgIGxldCBhYm9ydEhhbmRsZXI7XG4gICAgICAgIGxldCBhYm9ydFJlYXNvbjtcbiAgICAgICAgZnVuY3Rpb24gYWJvcnQocmVhc29uKSB7XG4gICAgICAgICAgYWJvcnRSZWFzb24gPSByZWFzb247XG4gICAgICAgICAgYWJvcnRDb250cm9sbGVyLmFib3J0KCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcHJvbWlzZSA9IGFzeW5jIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGxldCBmaW5hbEFjdGlvbjtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgbGV0IGNvbmRpdGlvblJlc3VsdCA9IG9wdGlvbnM/LmNvbmRpdGlvbj8uKGFyZywge1xuICAgICAgICAgICAgICBnZXRTdGF0ZSxcbiAgICAgICAgICAgICAgZXh0cmFcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKGlzVGhlbmFibGUoY29uZGl0aW9uUmVzdWx0KSkge1xuICAgICAgICAgICAgICBjb25kaXRpb25SZXN1bHQgPSBhd2FpdCBjb25kaXRpb25SZXN1bHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY29uZGl0aW9uUmVzdWx0ID09PSBmYWxzZSB8fCBhYm9ydENvbnRyb2xsZXIuc2lnbmFsLmFib3J0ZWQpIHtcbiAgICAgICAgICAgICAgdGhyb3cge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQ29uZGl0aW9uRXJyb3JcIixcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiBcIkFib3J0ZWQgZHVlIHRvIGNvbmRpdGlvbiBjYWxsYmFjayByZXR1cm5pbmcgZmFsc2UuXCJcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGFib3J0ZWRQcm9taXNlID0gbmV3IFByb21pc2UoKF8sIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgICBhYm9ydEhhbmRsZXIgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgcmVqZWN0KHtcbiAgICAgICAgICAgICAgICAgIG5hbWU6IFwiQWJvcnRFcnJvclwiLFxuICAgICAgICAgICAgICAgICAgbWVzc2FnZTogYWJvcnRSZWFzb24gfHwgXCJBYm9ydGVkXCJcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgYWJvcnRDb250cm9sbGVyLnNpZ25hbC5hZGRFdmVudExpc3RlbmVyKFwiYWJvcnRcIiwgYWJvcnRIYW5kbGVyKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZGlzcGF0Y2gocGVuZGluZyhyZXF1ZXN0SWQsIGFyZywgb3B0aW9ucz8uZ2V0UGVuZGluZ01ldGE/Lih7XG4gICAgICAgICAgICAgIHJlcXVlc3RJZCxcbiAgICAgICAgICAgICAgYXJnXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgIGdldFN0YXRlLFxuICAgICAgICAgICAgICBleHRyYVxuICAgICAgICAgICAgfSkpKTtcbiAgICAgICAgICAgIGZpbmFsQWN0aW9uID0gYXdhaXQgUHJvbWlzZS5yYWNlKFthYm9ydGVkUHJvbWlzZSwgUHJvbWlzZS5yZXNvbHZlKHBheWxvYWRDcmVhdG9yKGFyZywge1xuICAgICAgICAgICAgICBkaXNwYXRjaCxcbiAgICAgICAgICAgICAgZ2V0U3RhdGUsXG4gICAgICAgICAgICAgIGV4dHJhLFxuICAgICAgICAgICAgICByZXF1ZXN0SWQsXG4gICAgICAgICAgICAgIHNpZ25hbDogYWJvcnRDb250cm9sbGVyLnNpZ25hbCxcbiAgICAgICAgICAgICAgYWJvcnQsXG4gICAgICAgICAgICAgIHJlamVjdFdpdGhWYWx1ZTogKHZhbHVlLCBtZXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBSZWplY3RXaXRoVmFsdWUodmFsdWUsIG1ldGEpO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBmdWxmaWxsV2l0aFZhbHVlOiAodmFsdWUsIG1ldGEpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEZ1bGZpbGxXaXRoTWV0YSh2YWx1ZSwgbWV0YSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pKS50aGVuKChyZXN1bHQpID0+IHtcbiAgICAgICAgICAgICAgaWYgKHJlc3VsdCBpbnN0YW5jZW9mIFJlamVjdFdpdGhWYWx1ZSkge1xuICAgICAgICAgICAgICAgIHRocm93IHJlc3VsdDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAocmVzdWx0IGluc3RhbmNlb2YgRnVsZmlsbFdpdGhNZXRhKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZ1bGZpbGxlZChyZXN1bHQucGF5bG9hZCwgcmVxdWVzdElkLCBhcmcsIHJlc3VsdC5tZXRhKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4gZnVsZmlsbGVkKHJlc3VsdCwgcmVxdWVzdElkLCBhcmcpO1xuICAgICAgICAgICAgfSldKTtcbiAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIGZpbmFsQWN0aW9uID0gZXJyIGluc3RhbmNlb2YgUmVqZWN0V2l0aFZhbHVlID8gcmVqZWN0ZWQobnVsbCwgcmVxdWVzdElkLCBhcmcsIGVyci5wYXlsb2FkLCBlcnIubWV0YSkgOiByZWplY3RlZChlcnIsIHJlcXVlc3RJZCwgYXJnKTtcbiAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgaWYgKGFib3J0SGFuZGxlcikge1xuICAgICAgICAgICAgICBhYm9ydENvbnRyb2xsZXIuc2lnbmFsLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLCBhYm9ydEhhbmRsZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBjb25zdCBza2lwRGlzcGF0Y2ggPSBvcHRpb25zICYmICFvcHRpb25zLmRpc3BhdGNoQ29uZGl0aW9uUmVqZWN0aW9uICYmIHJlamVjdGVkLm1hdGNoKGZpbmFsQWN0aW9uKSAmJiBmaW5hbEFjdGlvbi5tZXRhLmNvbmRpdGlvbjtcbiAgICAgICAgICBpZiAoIXNraXBEaXNwYXRjaCkge1xuICAgICAgICAgICAgZGlzcGF0Y2goZmluYWxBY3Rpb24pO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gZmluYWxBY3Rpb247XG4gICAgICAgIH0oKTtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24ocHJvbWlzZSwge1xuICAgICAgICAgIGFib3J0LFxuICAgICAgICAgIHJlcXVlc3RJZCxcbiAgICAgICAgICBhcmcsXG4gICAgICAgICAgdW53cmFwKCkge1xuICAgICAgICAgICAgcmV0dXJuIHByb21pc2UudGhlbih1bndyYXBSZXN1bHQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihhY3Rpb25DcmVhdG9yLCB7XG4gICAgICBwZW5kaW5nLFxuICAgICAgcmVqZWN0ZWQsXG4gICAgICBmdWxmaWxsZWQsXG4gICAgICBzZXR0bGVkOiBpc0FueU9mKHJlamVjdGVkLCBmdWxmaWxsZWQpLFxuICAgICAgdHlwZVByZWZpeFxuICAgIH0pO1xuICB9XG4gIGNyZWF0ZUFzeW5jVGh1bmsyLndpdGhUeXBlcyA9ICgpID0+IGNyZWF0ZUFzeW5jVGh1bmsyO1xuICByZXR1cm4gY3JlYXRlQXN5bmNUaHVuazI7XG59KSgpO1xuZnVuY3Rpb24gdW53cmFwUmVzdWx0KGFjdGlvbikge1xuICBpZiAoYWN0aW9uLm1ldGEgJiYgYWN0aW9uLm1ldGEucmVqZWN0ZWRXaXRoVmFsdWUpIHtcbiAgICB0aHJvdyBhY3Rpb24ucGF5bG9hZDtcbiAgfVxuICBpZiAoYWN0aW9uLmVycm9yKSB7XG4gICAgdGhyb3cgYWN0aW9uLmVycm9yO1xuICB9XG4gIHJldHVybiBhY3Rpb24ucGF5bG9hZDtcbn1cbmZ1bmN0aW9uIGlzVGhlbmFibGUodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9PSBudWxsICYmIHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgdmFsdWUudGhlbiA9PT0gXCJmdW5jdGlvblwiO1xufVxuXG4vLyBzcmMvY3JlYXRlU2xpY2UudHNcbnZhciBhc3luY1RodW5rU3ltYm9sID0gLyogQF9fUFVSRV9fICovIFN5bWJvbC5mb3IoXCJydGstc2xpY2UtY3JlYXRlYXN5bmN0aHVua1wiKTtcbnZhciBhc3luY1RodW5rQ3JlYXRvciA9IHtcbiAgW2FzeW5jVGh1bmtTeW1ib2xdOiBjcmVhdGVBc3luY1RodW5rXG59O1xudmFyIFJlZHVjZXJUeXBlID0gLyogQF9fUFVSRV9fICovICgoUmVkdWNlclR5cGUyKSA9PiB7XG4gIFJlZHVjZXJUeXBlMltcInJlZHVjZXJcIl0gPSBcInJlZHVjZXJcIjtcbiAgUmVkdWNlclR5cGUyW1wicmVkdWNlcldpdGhQcmVwYXJlXCJdID0gXCJyZWR1Y2VyV2l0aFByZXBhcmVcIjtcbiAgUmVkdWNlclR5cGUyW1wiYXN5bmNUaHVua1wiXSA9IFwiYXN5bmNUaHVua1wiO1xuICByZXR1cm4gUmVkdWNlclR5cGUyO1xufSkoUmVkdWNlclR5cGUgfHwge30pO1xuZnVuY3Rpb24gZ2V0VHlwZShzbGljZSwgYWN0aW9uS2V5KSB7XG4gIHJldHVybiBgJHtzbGljZX0vJHthY3Rpb25LZXl9YDtcbn1cbmZ1bmN0aW9uIGJ1aWxkQ3JlYXRlU2xpY2Uoe1xuICBjcmVhdG9yc1xufSA9IHt9KSB7XG4gIGNvbnN0IGNBVCA9IGNyZWF0b3JzPy5hc3luY1RodW5rPy5bYXN5bmNUaHVua1N5bWJvbF07XG4gIHJldHVybiBmdW5jdGlvbiBjcmVhdGVTbGljZTIob3B0aW9ucykge1xuICAgIGNvbnN0IHtcbiAgICAgIG5hbWUsXG4gICAgICByZWR1Y2VyUGF0aCA9IG5hbWVcbiAgICB9ID0gb3B0aW9ucztcbiAgICBpZiAoIW5hbWUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDExKSA6IFwiYG5hbWVgIGlzIGEgcmVxdWlyZWQgb3B0aW9uIGZvciBjcmVhdGVTbGljZVwiKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBwcm9jZXNzICE9PSBcInVuZGVmaW5lZFwiICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcImRldmVsb3BtZW50XCIpIHtcbiAgICAgIGlmIChvcHRpb25zLmluaXRpYWxTdGF0ZSA9PT0gdm9pZCAwKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJZb3UgbXVzdCBwcm92aWRlIGFuIGBpbml0aWFsU3RhdGVgIHZhbHVlIHRoYXQgaXMgbm90IGB1bmRlZmluZWRgLiBZb3UgbWF5IGhhdmUgbWlzc3BlbGxlZCBgaW5pdGlhbFN0YXRlYFwiKTtcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgcmVkdWNlcnMgPSAodHlwZW9mIG9wdGlvbnMucmVkdWNlcnMgPT09IFwiZnVuY3Rpb25cIiA/IG9wdGlvbnMucmVkdWNlcnMoYnVpbGRSZWR1Y2VyQ3JlYXRvcnMoKSkgOiBvcHRpb25zLnJlZHVjZXJzKSB8fCB7fTtcbiAgICBjb25zdCByZWR1Y2VyTmFtZXMgPSBPYmplY3Qua2V5cyhyZWR1Y2Vycyk7XG4gICAgY29uc3QgY29udGV4dCA9IHtcbiAgICAgIHNsaWNlQ2FzZVJlZHVjZXJzQnlOYW1lOiB7fSxcbiAgICAgIHNsaWNlQ2FzZVJlZHVjZXJzQnlUeXBlOiB7fSxcbiAgICAgIGFjdGlvbkNyZWF0b3JzOiB7fSxcbiAgICAgIHNsaWNlTWF0Y2hlcnM6IFtdXG4gICAgfTtcbiAgICBjb25zdCBjb250ZXh0TWV0aG9kcyA9IHtcbiAgICAgIGFkZENhc2UodHlwZU9yQWN0aW9uQ3JlYXRvciwgcmVkdWNlcjIpIHtcbiAgICAgICAgY29uc3QgdHlwZSA9IHR5cGVvZiB0eXBlT3JBY3Rpb25DcmVhdG9yID09PSBcInN0cmluZ1wiID8gdHlwZU9yQWN0aW9uQ3JlYXRvciA6IHR5cGVPckFjdGlvbkNyZWF0b3IudHlwZTtcbiAgICAgICAgaWYgKCF0eXBlKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTIpIDogXCJgY29udGV4dC5hZGRDYXNlYCBjYW5ub3QgYmUgY2FsbGVkIHdpdGggYW4gZW1wdHkgYWN0aW9uIHR5cGVcIik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGUgaW4gY29udGV4dC5zbGljZUNhc2VSZWR1Y2Vyc0J5VHlwZSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDEzKSA6IFwiYGNvbnRleHQuYWRkQ2FzZWAgY2Fubm90IGJlIGNhbGxlZCB3aXRoIHR3byByZWR1Y2VycyBmb3IgdGhlIHNhbWUgYWN0aW9uIHR5cGU6IFwiICsgdHlwZSk7XG4gICAgICAgIH1cbiAgICAgICAgY29udGV4dC5zbGljZUNhc2VSZWR1Y2Vyc0J5VHlwZVt0eXBlXSA9IHJlZHVjZXIyO1xuICAgICAgICByZXR1cm4gY29udGV4dE1ldGhvZHM7XG4gICAgICB9LFxuICAgICAgYWRkTWF0Y2hlcihtYXRjaGVyLCByZWR1Y2VyMikge1xuICAgICAgICBjb250ZXh0LnNsaWNlTWF0Y2hlcnMucHVzaCh7XG4gICAgICAgICAgbWF0Y2hlcixcbiAgICAgICAgICByZWR1Y2VyOiByZWR1Y2VyMlxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGNvbnRleHRNZXRob2RzO1xuICAgICAgfSxcbiAgICAgIGV4cG9zZUFjdGlvbihuYW1lMiwgYWN0aW9uQ3JlYXRvcikge1xuICAgICAgICBjb250ZXh0LmFjdGlvbkNyZWF0b3JzW25hbWUyXSA9IGFjdGlvbkNyZWF0b3I7XG4gICAgICAgIHJldHVybiBjb250ZXh0TWV0aG9kcztcbiAgICAgIH0sXG4gICAgICBleHBvc2VDYXNlUmVkdWNlcihuYW1lMiwgcmVkdWNlcjIpIHtcbiAgICAgICAgY29udGV4dC5zbGljZUNhc2VSZWR1Y2Vyc0J5TmFtZVtuYW1lMl0gPSByZWR1Y2VyMjtcbiAgICAgICAgcmV0dXJuIGNvbnRleHRNZXRob2RzO1xuICAgICAgfVxuICAgIH07XG4gICAgcmVkdWNlck5hbWVzLmZvckVhY2goKHJlZHVjZXJOYW1lKSA9PiB7XG4gICAgICBjb25zdCByZWR1Y2VyRGVmaW5pdGlvbiA9IHJlZHVjZXJzW3JlZHVjZXJOYW1lXTtcbiAgICAgIGNvbnN0IHJlZHVjZXJEZXRhaWxzID0ge1xuICAgICAgICByZWR1Y2VyTmFtZSxcbiAgICAgICAgdHlwZTogZ2V0VHlwZShuYW1lLCByZWR1Y2VyTmFtZSksXG4gICAgICAgIGNyZWF0ZU5vdGF0aW9uOiB0eXBlb2Ygb3B0aW9ucy5yZWR1Y2VycyA9PT0gXCJmdW5jdGlvblwiXG4gICAgICB9O1xuICAgICAgaWYgKGlzQXN5bmNUaHVua1NsaWNlUmVkdWNlckRlZmluaXRpb24ocmVkdWNlckRlZmluaXRpb24pKSB7XG4gICAgICAgIGhhbmRsZVRodW5rQ2FzZVJlZHVjZXJEZWZpbml0aW9uKHJlZHVjZXJEZXRhaWxzLCByZWR1Y2VyRGVmaW5pdGlvbiwgY29udGV4dE1ldGhvZHMsIGNBVCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBoYW5kbGVOb3JtYWxSZWR1Y2VyRGVmaW5pdGlvbihyZWR1Y2VyRGV0YWlscywgcmVkdWNlckRlZmluaXRpb24sIGNvbnRleHRNZXRob2RzKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBmdW5jdGlvbiBidWlsZFJlZHVjZXIoKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5leHRyYVJlZHVjZXJzID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTQpIDogXCJUaGUgb2JqZWN0IG5vdGF0aW9uIGZvciBgY3JlYXRlU2xpY2UuZXh0cmFSZWR1Y2Vyc2AgaGFzIGJlZW4gcmVtb3ZlZC4gUGxlYXNlIHVzZSB0aGUgJ2J1aWxkZXIgY2FsbGJhY2snIG5vdGF0aW9uIGluc3RlYWQ6IGh0dHBzOi8vcmVkdXgtdG9vbGtpdC5qcy5vcmcvYXBpL2NyZWF0ZVNsaWNlXCIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjb25zdCBbZXh0cmFSZWR1Y2VycyA9IHt9LCBhY3Rpb25NYXRjaGVycyA9IFtdLCBkZWZhdWx0Q2FzZVJlZHVjZXIgPSB2b2lkIDBdID0gdHlwZW9mIG9wdGlvbnMuZXh0cmFSZWR1Y2VycyA9PT0gXCJmdW5jdGlvblwiID8gZXhlY3V0ZVJlZHVjZXJCdWlsZGVyQ2FsbGJhY2sob3B0aW9ucy5leHRyYVJlZHVjZXJzKSA6IFtvcHRpb25zLmV4dHJhUmVkdWNlcnNdO1xuICAgICAgY29uc3QgZmluYWxDYXNlUmVkdWNlcnMgPSB7XG4gICAgICAgIC4uLmV4dHJhUmVkdWNlcnMsXG4gICAgICAgIC4uLmNvbnRleHQuc2xpY2VDYXNlUmVkdWNlcnNCeVR5cGVcbiAgICAgIH07XG4gICAgICByZXR1cm4gY3JlYXRlUmVkdWNlcihvcHRpb25zLmluaXRpYWxTdGF0ZSwgKGJ1aWxkZXIpID0+IHtcbiAgICAgICAgZm9yIChsZXQga2V5IGluIGZpbmFsQ2FzZVJlZHVjZXJzKSB7XG4gICAgICAgICAgYnVpbGRlci5hZGRDYXNlKGtleSwgZmluYWxDYXNlUmVkdWNlcnNba2V5XSk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgc00gb2YgY29udGV4dC5zbGljZU1hdGNoZXJzKSB7XG4gICAgICAgICAgYnVpbGRlci5hZGRNYXRjaGVyKHNNLm1hdGNoZXIsIHNNLnJlZHVjZXIpO1xuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IG0gb2YgYWN0aW9uTWF0Y2hlcnMpIHtcbiAgICAgICAgICBidWlsZGVyLmFkZE1hdGNoZXIobS5tYXRjaGVyLCBtLnJlZHVjZXIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkZWZhdWx0Q2FzZVJlZHVjZXIpIHtcbiAgICAgICAgICBidWlsZGVyLmFkZERlZmF1bHRDYXNlKGRlZmF1bHRDYXNlUmVkdWNlcik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICBjb25zdCBzZWxlY3RTZWxmID0gKHN0YXRlKSA9PiBzdGF0ZTtcbiAgICBjb25zdCBpbmplY3RlZFNlbGVjdG9yQ2FjaGUgPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpO1xuICAgIGxldCBfcmVkdWNlcjtcbiAgICBmdW5jdGlvbiByZWR1Y2VyKHN0YXRlLCBhY3Rpb24pIHtcbiAgICAgIGlmICghX3JlZHVjZXIpIF9yZWR1Y2VyID0gYnVpbGRSZWR1Y2VyKCk7XG4gICAgICByZXR1cm4gX3JlZHVjZXIoc3RhdGUsIGFjdGlvbik7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldEluaXRpYWxTdGF0ZSgpIHtcbiAgICAgIGlmICghX3JlZHVjZXIpIF9yZWR1Y2VyID0gYnVpbGRSZWR1Y2VyKCk7XG4gICAgICByZXR1cm4gX3JlZHVjZXIuZ2V0SW5pdGlhbFN0YXRlKCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG1ha2VTZWxlY3RvclByb3BzKHJlZHVjZXJQYXRoMiwgaW5qZWN0ZWQgPSBmYWxzZSkge1xuICAgICAgZnVuY3Rpb24gc2VsZWN0U2xpY2Uoc3RhdGUpIHtcbiAgICAgICAgbGV0IHNsaWNlU3RhdGUgPSBzdGF0ZVtyZWR1Y2VyUGF0aDJdO1xuICAgICAgICBpZiAodHlwZW9mIHNsaWNlU3RhdGUgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICBpZiAoaW5qZWN0ZWQpIHtcbiAgICAgICAgICAgIHNsaWNlU3RhdGUgPSBnZXRJbml0aWFsU3RhdGUoKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTUpIDogXCJzZWxlY3RTbGljZSByZXR1cm5lZCB1bmRlZmluZWQgZm9yIGFuIHVuaW5qZWN0ZWQgc2xpY2UgcmVkdWNlclwiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNsaWNlU3RhdGU7XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBnZXRTZWxlY3RvcnMoc2VsZWN0U3RhdGUgPSBzZWxlY3RTZWxmKSB7XG4gICAgICAgIGNvbnN0IHNlbGVjdG9yQ2FjaGUgPSBnZXRPckluc2VydENvbXB1dGVkKGluamVjdGVkU2VsZWN0b3JDYWNoZSwgaW5qZWN0ZWQsICgpID0+IC8qIEBfX1BVUkVfXyAqLyBuZXcgV2Vha01hcCgpKTtcbiAgICAgICAgcmV0dXJuIGdldE9ySW5zZXJ0Q29tcHV0ZWQoc2VsZWN0b3JDYWNoZSwgc2VsZWN0U3RhdGUsICgpID0+IHtcbiAgICAgICAgICBjb25zdCBtYXAgPSB7fTtcbiAgICAgICAgICBmb3IgKGNvbnN0IFtuYW1lMiwgc2VsZWN0b3JdIG9mIE9iamVjdC5lbnRyaWVzKG9wdGlvbnMuc2VsZWN0b3JzID8/IHt9KSkge1xuICAgICAgICAgICAgbWFwW25hbWUyXSA9IHdyYXBTZWxlY3RvcihzZWxlY3Rvciwgc2VsZWN0U3RhdGUsIGdldEluaXRpYWxTdGF0ZSwgaW5qZWN0ZWQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gbWFwO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHJlZHVjZXJQYXRoOiByZWR1Y2VyUGF0aDIsXG4gICAgICAgIGdldFNlbGVjdG9ycyxcbiAgICAgICAgZ2V0IHNlbGVjdG9ycygpIHtcbiAgICAgICAgICByZXR1cm4gZ2V0U2VsZWN0b3JzKHNlbGVjdFNsaWNlKTtcbiAgICAgICAgfSxcbiAgICAgICAgc2VsZWN0U2xpY2VcbiAgICAgIH07XG4gICAgfVxuICAgIGNvbnN0IHNsaWNlID0ge1xuICAgICAgbmFtZSxcbiAgICAgIHJlZHVjZXIsXG4gICAgICBhY3Rpb25zOiBjb250ZXh0LmFjdGlvbkNyZWF0b3JzLFxuICAgICAgY2FzZVJlZHVjZXJzOiBjb250ZXh0LnNsaWNlQ2FzZVJlZHVjZXJzQnlOYW1lLFxuICAgICAgZ2V0SW5pdGlhbFN0YXRlLFxuICAgICAgLi4ubWFrZVNlbGVjdG9yUHJvcHMocmVkdWNlclBhdGgpLFxuICAgICAgaW5qZWN0SW50byhpbmplY3RhYmxlLCB7XG4gICAgICAgIHJlZHVjZXJQYXRoOiBwYXRoT3B0LFxuICAgICAgICAuLi5jb25maWdcbiAgICAgIH0gPSB7fSkge1xuICAgICAgICBjb25zdCBuZXdSZWR1Y2VyUGF0aCA9IHBhdGhPcHQgPz8gcmVkdWNlclBhdGg7XG4gICAgICAgIGluamVjdGFibGUuaW5qZWN0KHtcbiAgICAgICAgICByZWR1Y2VyUGF0aDogbmV3UmVkdWNlclBhdGgsXG4gICAgICAgICAgcmVkdWNlclxuICAgICAgICB9LCBjb25maWcpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIC4uLnNsaWNlLFxuICAgICAgICAgIC4uLm1ha2VTZWxlY3RvclByb3BzKG5ld1JlZHVjZXJQYXRoLCB0cnVlKVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIHNsaWNlO1xuICB9O1xufVxuZnVuY3Rpb24gd3JhcFNlbGVjdG9yKHNlbGVjdG9yLCBzZWxlY3RTdGF0ZSwgZ2V0SW5pdGlhbFN0YXRlLCBpbmplY3RlZCkge1xuICBmdW5jdGlvbiB3cmFwcGVyKHJvb3RTdGF0ZSwgLi4uYXJncykge1xuICAgIGxldCBzbGljZVN0YXRlID0gc2VsZWN0U3RhdGUocm9vdFN0YXRlKTtcbiAgICBpZiAodHlwZW9mIHNsaWNlU3RhdGUgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIGlmIChpbmplY3RlZCkge1xuICAgICAgICBzbGljZVN0YXRlID0gZ2V0SW5pdGlhbFN0YXRlKCk7XG4gICAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxNikgOiBcInNlbGVjdFN0YXRlIHJldHVybmVkIHVuZGVmaW5lZCBmb3IgYW4gdW5pbmplY3RlZCBzbGljZSByZWR1Y2VyXCIpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc2VsZWN0b3Ioc2xpY2VTdGF0ZSwgLi4uYXJncyk7XG4gIH1cbiAgd3JhcHBlci51bndyYXBwZWQgPSBzZWxlY3RvcjtcbiAgcmV0dXJuIHdyYXBwZXI7XG59XG52YXIgY3JlYXRlU2xpY2UgPSAvKiBAX19QVVJFX18gKi8gYnVpbGRDcmVhdGVTbGljZSgpO1xuZnVuY3Rpb24gYnVpbGRSZWR1Y2VyQ3JlYXRvcnMoKSB7XG4gIGZ1bmN0aW9uIGFzeW5jVGh1bmsocGF5bG9hZENyZWF0b3IsIGNvbmZpZykge1xuICAgIHJldHVybiB7XG4gICAgICBfcmVkdWNlckRlZmluaXRpb25UeXBlOiBcImFzeW5jVGh1bmtcIiAvKiBhc3luY1RodW5rICovLFxuICAgICAgcGF5bG9hZENyZWF0b3IsXG4gICAgICAuLi5jb25maWdcbiAgICB9O1xuICB9XG4gIGFzeW5jVGh1bmsud2l0aFR5cGVzID0gKCkgPT4gYXN5bmNUaHVuaztcbiAgcmV0dXJuIHtcbiAgICByZWR1Y2VyKGNhc2VSZWR1Y2VyKSB7XG4gICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7XG4gICAgICAgIC8vIGhhY2sgc28gdGhlIHdyYXBwaW5nIGZ1bmN0aW9uIGhhcyB0aGUgc2FtZSBuYW1lIGFzIHRoZSBvcmlnaW5hbFxuICAgICAgICAvLyB3ZSBuZWVkIHRvIGNyZWF0ZSBhIHdyYXBwZXIgc28gdGhlIGByZWR1Y2VyRGVmaW5pdGlvblR5cGVgIGlzIG5vdCBhc3NpZ25lZCB0byB0aGUgb3JpZ2luYWxcbiAgICAgICAgW2Nhc2VSZWR1Y2VyLm5hbWVdKC4uLmFyZ3MpIHtcbiAgICAgICAgICByZXR1cm4gY2FzZVJlZHVjZXIoLi4uYXJncyk7XG4gICAgICAgIH1cbiAgICAgIH1bY2FzZVJlZHVjZXIubmFtZV0sIHtcbiAgICAgICAgX3JlZHVjZXJEZWZpbml0aW9uVHlwZTogXCJyZWR1Y2VyXCIgLyogcmVkdWNlciAqL1xuICAgICAgfSk7XG4gICAgfSxcbiAgICBwcmVwYXJlZFJlZHVjZXIocHJlcGFyZSwgcmVkdWNlcikge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgX3JlZHVjZXJEZWZpbml0aW9uVHlwZTogXCJyZWR1Y2VyV2l0aFByZXBhcmVcIiAvKiByZWR1Y2VyV2l0aFByZXBhcmUgKi8sXG4gICAgICAgIHByZXBhcmUsXG4gICAgICAgIHJlZHVjZXJcbiAgICAgIH07XG4gICAgfSxcbiAgICBhc3luY1RodW5rXG4gIH07XG59XG5mdW5jdGlvbiBoYW5kbGVOb3JtYWxSZWR1Y2VyRGVmaW5pdGlvbih7XG4gIHR5cGUsXG4gIHJlZHVjZXJOYW1lLFxuICBjcmVhdGVOb3RhdGlvblxufSwgbWF5YmVSZWR1Y2VyV2l0aFByZXBhcmUsIGNvbnRleHQpIHtcbiAgbGV0IGNhc2VSZWR1Y2VyO1xuICBsZXQgcHJlcGFyZUNhbGxiYWNrO1xuICBpZiAoXCJyZWR1Y2VyXCIgaW4gbWF5YmVSZWR1Y2VyV2l0aFByZXBhcmUpIHtcbiAgICBpZiAoY3JlYXRlTm90YXRpb24gJiYgIWlzQ2FzZVJlZHVjZXJXaXRoUHJlcGFyZURlZmluaXRpb24obWF5YmVSZWR1Y2VyV2l0aFByZXBhcmUpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxNykgOiBcIlBsZWFzZSB1c2UgdGhlIGBjcmVhdGUucHJlcGFyZWRSZWR1Y2VyYCBub3RhdGlvbiBmb3IgcHJlcGFyZWQgYWN0aW9uIGNyZWF0b3JzIHdpdGggdGhlIGBjcmVhdGVgIG5vdGF0aW9uLlwiKTtcbiAgICB9XG4gICAgY2FzZVJlZHVjZXIgPSBtYXliZVJlZHVjZXJXaXRoUHJlcGFyZS5yZWR1Y2VyO1xuICAgIHByZXBhcmVDYWxsYmFjayA9IG1heWJlUmVkdWNlcldpdGhQcmVwYXJlLnByZXBhcmU7XG4gIH0gZWxzZSB7XG4gICAgY2FzZVJlZHVjZXIgPSBtYXliZVJlZHVjZXJXaXRoUHJlcGFyZTtcbiAgfVxuICBjb250ZXh0LmFkZENhc2UodHlwZSwgY2FzZVJlZHVjZXIpLmV4cG9zZUNhc2VSZWR1Y2VyKHJlZHVjZXJOYW1lLCBjYXNlUmVkdWNlcikuZXhwb3NlQWN0aW9uKHJlZHVjZXJOYW1lLCBwcmVwYXJlQ2FsbGJhY2sgPyBjcmVhdGVBY3Rpb24odHlwZSwgcHJlcGFyZUNhbGxiYWNrKSA6IGNyZWF0ZUFjdGlvbih0eXBlKSk7XG59XG5mdW5jdGlvbiBpc0FzeW5jVGh1bmtTbGljZVJlZHVjZXJEZWZpbml0aW9uKHJlZHVjZXJEZWZpbml0aW9uKSB7XG4gIHJldHVybiByZWR1Y2VyRGVmaW5pdGlvbi5fcmVkdWNlckRlZmluaXRpb25UeXBlID09PSBcImFzeW5jVGh1bmtcIiAvKiBhc3luY1RodW5rICovO1xufVxuZnVuY3Rpb24gaXNDYXNlUmVkdWNlcldpdGhQcmVwYXJlRGVmaW5pdGlvbihyZWR1Y2VyRGVmaW5pdGlvbikge1xuICByZXR1cm4gcmVkdWNlckRlZmluaXRpb24uX3JlZHVjZXJEZWZpbml0aW9uVHlwZSA9PT0gXCJyZWR1Y2VyV2l0aFByZXBhcmVcIiAvKiByZWR1Y2VyV2l0aFByZXBhcmUgKi87XG59XG5mdW5jdGlvbiBoYW5kbGVUaHVua0Nhc2VSZWR1Y2VyRGVmaW5pdGlvbih7XG4gIHR5cGUsXG4gIHJlZHVjZXJOYW1lXG59LCByZWR1Y2VyRGVmaW5pdGlvbiwgY29udGV4dCwgY0FUKSB7XG4gIGlmICghY0FUKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTgpIDogXCJDYW5ub3QgdXNlIGBjcmVhdGUuYXN5bmNUaHVua2AgaW4gdGhlIGJ1aWx0LWluIGBjcmVhdGVTbGljZWAuIFVzZSBgYnVpbGRDcmVhdGVTbGljZSh7IGNyZWF0b3JzOiB7IGFzeW5jVGh1bms6IGFzeW5jVGh1bmtDcmVhdG9yIH0gfSlgIHRvIGNyZWF0ZSBhIGN1c3RvbWlzZWQgdmVyc2lvbiBvZiBgY3JlYXRlU2xpY2VgLlwiKTtcbiAgfVxuICBjb25zdCB7XG4gICAgcGF5bG9hZENyZWF0b3IsXG4gICAgZnVsZmlsbGVkLFxuICAgIHBlbmRpbmcsXG4gICAgcmVqZWN0ZWQsXG4gICAgc2V0dGxlZCxcbiAgICBvcHRpb25zXG4gIH0gPSByZWR1Y2VyRGVmaW5pdGlvbjtcbiAgY29uc3QgdGh1bmsgPSBjQVQodHlwZSwgcGF5bG9hZENyZWF0b3IsIG9wdGlvbnMpO1xuICBjb250ZXh0LmV4cG9zZUFjdGlvbihyZWR1Y2VyTmFtZSwgdGh1bmspO1xuICBpZiAoZnVsZmlsbGVkKSB7XG4gICAgY29udGV4dC5hZGRDYXNlKHRodW5rLmZ1bGZpbGxlZCwgZnVsZmlsbGVkKTtcbiAgfVxuICBpZiAocGVuZGluZykge1xuICAgIGNvbnRleHQuYWRkQ2FzZSh0aHVuay5wZW5kaW5nLCBwZW5kaW5nKTtcbiAgfVxuICBpZiAocmVqZWN0ZWQpIHtcbiAgICBjb250ZXh0LmFkZENhc2UodGh1bmsucmVqZWN0ZWQsIHJlamVjdGVkKTtcbiAgfVxuICBpZiAoc2V0dGxlZCkge1xuICAgIGNvbnRleHQuYWRkTWF0Y2hlcih0aHVuay5zZXR0bGVkLCBzZXR0bGVkKTtcbiAgfVxuICBjb250ZXh0LmV4cG9zZUNhc2VSZWR1Y2VyKHJlZHVjZXJOYW1lLCB7XG4gICAgZnVsZmlsbGVkOiBmdWxmaWxsZWQgfHwgbm9vcCxcbiAgICBwZW5kaW5nOiBwZW5kaW5nIHx8IG5vb3AsXG4gICAgcmVqZWN0ZWQ6IHJlamVjdGVkIHx8IG5vb3AsXG4gICAgc2V0dGxlZDogc2V0dGxlZCB8fCBub29wXG4gIH0pO1xufVxuZnVuY3Rpb24gbm9vcCgpIHtcbn1cblxuLy8gc3JjL2VudGl0aWVzL2VudGl0eV9zdGF0ZS50c1xuZnVuY3Rpb24gZ2V0SW5pdGlhbEVudGl0eVN0YXRlKCkge1xuICByZXR1cm4ge1xuICAgIGlkczogW10sXG4gICAgZW50aXRpZXM6IHt9XG4gIH07XG59XG5mdW5jdGlvbiBjcmVhdGVJbml0aWFsU3RhdGVGYWN0b3J5KHN0YXRlQWRhcHRlcikge1xuICBmdW5jdGlvbiBnZXRJbml0aWFsU3RhdGUoYWRkaXRpb25hbFN0YXRlID0ge30sIGVudGl0aWVzKSB7XG4gICAgY29uc3Qgc3RhdGUgPSBPYmplY3QuYXNzaWduKGdldEluaXRpYWxFbnRpdHlTdGF0ZSgpLCBhZGRpdGlvbmFsU3RhdGUpO1xuICAgIHJldHVybiBlbnRpdGllcyA/IHN0YXRlQWRhcHRlci5zZXRBbGwoc3RhdGUsIGVudGl0aWVzKSA6IHN0YXRlO1xuICB9XG4gIHJldHVybiB7XG4gICAgZ2V0SW5pdGlhbFN0YXRlXG4gIH07XG59XG5cbi8vIHNyYy9lbnRpdGllcy9zdGF0ZV9zZWxlY3RvcnMudHNcbmZ1bmN0aW9uIGNyZWF0ZVNlbGVjdG9yc0ZhY3RvcnkoKSB7XG4gIGZ1bmN0aW9uIGdldFNlbGVjdG9ycyhzZWxlY3RTdGF0ZSwgb3B0aW9ucyA9IHt9KSB7XG4gICAgY29uc3Qge1xuICAgICAgY3JlYXRlU2VsZWN0b3I6IGNyZWF0ZVNlbGVjdG9yMiA9IGNyZWF0ZURyYWZ0U2FmZVNlbGVjdG9yXG4gICAgfSA9IG9wdGlvbnM7XG4gICAgY29uc3Qgc2VsZWN0SWRzID0gKHN0YXRlKSA9PiBzdGF0ZS5pZHM7XG4gICAgY29uc3Qgc2VsZWN0RW50aXRpZXMgPSAoc3RhdGUpID0+IHN0YXRlLmVudGl0aWVzO1xuICAgIGNvbnN0IHNlbGVjdEFsbCA9IGNyZWF0ZVNlbGVjdG9yMihzZWxlY3RJZHMsIHNlbGVjdEVudGl0aWVzLCAoaWRzLCBlbnRpdGllcykgPT4gaWRzLm1hcCgoaWQpID0+IGVudGl0aWVzW2lkXSkpO1xuICAgIGNvbnN0IHNlbGVjdElkID0gKF8sIGlkKSA9PiBpZDtcbiAgICBjb25zdCBzZWxlY3RCeUlkID0gKGVudGl0aWVzLCBpZCkgPT4gZW50aXRpZXNbaWRdO1xuICAgIGNvbnN0IHNlbGVjdFRvdGFsID0gY3JlYXRlU2VsZWN0b3IyKHNlbGVjdElkcywgKGlkcykgPT4gaWRzLmxlbmd0aCk7XG4gICAgaWYgKCFzZWxlY3RTdGF0ZSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc2VsZWN0SWRzLFxuICAgICAgICBzZWxlY3RFbnRpdGllcyxcbiAgICAgICAgc2VsZWN0QWxsLFxuICAgICAgICBzZWxlY3RUb3RhbCxcbiAgICAgICAgc2VsZWN0QnlJZDogY3JlYXRlU2VsZWN0b3IyKHNlbGVjdEVudGl0aWVzLCBzZWxlY3RJZCwgc2VsZWN0QnlJZClcbiAgICAgIH07XG4gICAgfVxuICAgIGNvbnN0IHNlbGVjdEdsb2JhbGl6ZWRFbnRpdGllcyA9IGNyZWF0ZVNlbGVjdG9yMihzZWxlY3RTdGF0ZSwgc2VsZWN0RW50aXRpZXMpO1xuICAgIHJldHVybiB7XG4gICAgICBzZWxlY3RJZHM6IGNyZWF0ZVNlbGVjdG9yMihzZWxlY3RTdGF0ZSwgc2VsZWN0SWRzKSxcbiAgICAgIHNlbGVjdEVudGl0aWVzOiBzZWxlY3RHbG9iYWxpemVkRW50aXRpZXMsXG4gICAgICBzZWxlY3RBbGw6IGNyZWF0ZVNlbGVjdG9yMihzZWxlY3RTdGF0ZSwgc2VsZWN0QWxsKSxcbiAgICAgIHNlbGVjdFRvdGFsOiBjcmVhdGVTZWxlY3RvcjIoc2VsZWN0U3RhdGUsIHNlbGVjdFRvdGFsKSxcbiAgICAgIHNlbGVjdEJ5SWQ6IGNyZWF0ZVNlbGVjdG9yMihzZWxlY3RHbG9iYWxpemVkRW50aXRpZXMsIHNlbGVjdElkLCBzZWxlY3RCeUlkKVxuICAgIH07XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBnZXRTZWxlY3RvcnNcbiAgfTtcbn1cblxuLy8gc3JjL2VudGl0aWVzL3N0YXRlX2FkYXB0ZXIudHNcbmltcG9ydCB7IHByb2R1Y2UgYXMgY3JlYXRlTmV4dFN0YXRlMywgaXNEcmFmdCBhcyBpc0RyYWZ0MyB9IGZyb20gXCJpbW1lclwiO1xudmFyIGlzRHJhZnRUeXBlZCA9IGlzRHJhZnQzO1xuZnVuY3Rpb24gY3JlYXRlU2luZ2xlQXJndW1lbnRTdGF0ZU9wZXJhdG9yKG11dGF0b3IpIHtcbiAgY29uc3Qgb3BlcmF0b3IgPSBjcmVhdGVTdGF0ZU9wZXJhdG9yKChfLCBzdGF0ZSkgPT4gbXV0YXRvcihzdGF0ZSkpO1xuICByZXR1cm4gZnVuY3Rpb24gb3BlcmF0aW9uKHN0YXRlKSB7XG4gICAgcmV0dXJuIG9wZXJhdG9yKHN0YXRlLCB2b2lkIDApO1xuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlU3RhdGVPcGVyYXRvcihtdXRhdG9yKSB7XG4gIHJldHVybiBmdW5jdGlvbiBvcGVyYXRpb24oc3RhdGUsIGFyZykge1xuICAgIGZ1bmN0aW9uIGlzUGF5bG9hZEFjdGlvbkFyZ3VtZW50KGFyZzIpIHtcbiAgICAgIHJldHVybiBpc0ZTQShhcmcyKTtcbiAgICB9XG4gICAgY29uc3QgcnVuTXV0YXRvciA9IChkcmFmdCkgPT4ge1xuICAgICAgaWYgKGlzUGF5bG9hZEFjdGlvbkFyZ3VtZW50KGFyZykpIHtcbiAgICAgICAgbXV0YXRvcihhcmcucGF5bG9hZCwgZHJhZnQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbXV0YXRvcihhcmcsIGRyYWZ0KTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGlmIChpc0RyYWZ0VHlwZWQoc3RhdGUpKSB7XG4gICAgICBydW5NdXRhdG9yKHN0YXRlKTtcbiAgICAgIHJldHVybiBzdGF0ZTtcbiAgICB9XG4gICAgcmV0dXJuIGNyZWF0ZU5leHRTdGF0ZTMoc3RhdGUsIHJ1bk11dGF0b3IpO1xuICB9O1xufVxuXG4vLyBzcmMvZW50aXRpZXMvdXRpbHMudHNcbmltcG9ydCB7IGN1cnJlbnQgYXMgY3VycmVudDIsIGlzRHJhZnQgYXMgaXNEcmFmdDQgfSBmcm9tIFwiaW1tZXJcIjtcbmZ1bmN0aW9uIHNlbGVjdElkVmFsdWUoZW50aXR5LCBzZWxlY3RJZCkge1xuICBjb25zdCBrZXkgPSBzZWxlY3RJZChlbnRpdHkpO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmIGtleSA9PT0gdm9pZCAwKSB7XG4gICAgY29uc29sZS53YXJuKFwiVGhlIGVudGl0eSBwYXNzZWQgdG8gdGhlIGBzZWxlY3RJZGAgaW1wbGVtZW50YXRpb24gcmV0dXJuZWQgdW5kZWZpbmVkLlwiLCBcIllvdSBzaG91bGQgcHJvYmFibHkgcHJvdmlkZSB5b3VyIG93biBgc2VsZWN0SWRgIGltcGxlbWVudGF0aW9uLlwiLCBcIlRoZSBlbnRpdHkgdGhhdCB3YXMgcGFzc2VkOlwiLCBlbnRpdHksIFwiVGhlIGBzZWxlY3RJZGAgaW1wbGVtZW50YXRpb246XCIsIHNlbGVjdElkLnRvU3RyaW5nKCkpO1xuICB9XG4gIHJldHVybiBrZXk7XG59XG5mdW5jdGlvbiBlbnN1cmVFbnRpdGllc0FycmF5KGVudGl0aWVzKSB7XG4gIGlmICghQXJyYXkuaXNBcnJheShlbnRpdGllcykpIHtcbiAgICBlbnRpdGllcyA9IE9iamVjdC52YWx1ZXMoZW50aXRpZXMpO1xuICB9XG4gIHJldHVybiBlbnRpdGllcztcbn1cbmZ1bmN0aW9uIGdldEN1cnJlbnQodmFsdWUpIHtcbiAgcmV0dXJuIGlzRHJhZnQ0KHZhbHVlKSA/IGN1cnJlbnQyKHZhbHVlKSA6IHZhbHVlO1xufVxuZnVuY3Rpb24gc3BsaXRBZGRlZFVwZGF0ZWRFbnRpdGllcyhuZXdFbnRpdGllcywgc2VsZWN0SWQsIHN0YXRlKSB7XG4gIG5ld0VudGl0aWVzID0gZW5zdXJlRW50aXRpZXNBcnJheShuZXdFbnRpdGllcyk7XG4gIGNvbnN0IGV4aXN0aW5nSWRzQXJyYXkgPSBnZXRDdXJyZW50KHN0YXRlLmlkcyk7XG4gIGNvbnN0IGV4aXN0aW5nSWRzID0gbmV3IFNldChleGlzdGluZ0lkc0FycmF5KTtcbiAgY29uc3QgYWRkZWQgPSBbXTtcbiAgY29uc3QgdXBkYXRlZCA9IFtdO1xuICBmb3IgKGNvbnN0IGVudGl0eSBvZiBuZXdFbnRpdGllcykge1xuICAgIGNvbnN0IGlkID0gc2VsZWN0SWRWYWx1ZShlbnRpdHksIHNlbGVjdElkKTtcbiAgICBpZiAoZXhpc3RpbmdJZHMuaGFzKGlkKSkge1xuICAgICAgdXBkYXRlZC5wdXNoKHtcbiAgICAgICAgaWQsXG4gICAgICAgIGNoYW5nZXM6IGVudGl0eVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFkZGVkLnB1c2goZW50aXR5KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIFthZGRlZCwgdXBkYXRlZCwgZXhpc3RpbmdJZHNBcnJheV07XG59XG5cbi8vIHNyYy9lbnRpdGllcy91bnNvcnRlZF9zdGF0ZV9hZGFwdGVyLnRzXG5mdW5jdGlvbiBjcmVhdGVVbnNvcnRlZFN0YXRlQWRhcHRlcihzZWxlY3RJZCkge1xuICBmdW5jdGlvbiBhZGRPbmVNdXRhYmx5KGVudGl0eSwgc3RhdGUpIHtcbiAgICBjb25zdCBrZXkgPSBzZWxlY3RJZFZhbHVlKGVudGl0eSwgc2VsZWN0SWQpO1xuICAgIGlmIChrZXkgaW4gc3RhdGUuZW50aXRpZXMpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgc3RhdGUuaWRzLnB1c2goa2V5KTtcbiAgICBzdGF0ZS5lbnRpdGllc1trZXldID0gZW50aXR5O1xuICB9XG4gIGZ1bmN0aW9uIGFkZE1hbnlNdXRhYmx5KG5ld0VudGl0aWVzLCBzdGF0ZSkge1xuICAgIG5ld0VudGl0aWVzID0gZW5zdXJlRW50aXRpZXNBcnJheShuZXdFbnRpdGllcyk7XG4gICAgZm9yIChjb25zdCBlbnRpdHkgb2YgbmV3RW50aXRpZXMpIHtcbiAgICAgIGFkZE9uZU11dGFibHkoZW50aXR5LCBzdGF0ZSk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIHNldE9uZU11dGFibHkoZW50aXR5LCBzdGF0ZSkge1xuICAgIGNvbnN0IGtleSA9IHNlbGVjdElkVmFsdWUoZW50aXR5LCBzZWxlY3RJZCk7XG4gICAgaWYgKCEoa2V5IGluIHN0YXRlLmVudGl0aWVzKSkge1xuICAgICAgc3RhdGUuaWRzLnB1c2goa2V5KTtcbiAgICB9XG4gICAgO1xuICAgIHN0YXRlLmVudGl0aWVzW2tleV0gPSBlbnRpdHk7XG4gIH1cbiAgZnVuY3Rpb24gc2V0TWFueU11dGFibHkobmV3RW50aXRpZXMsIHN0YXRlKSB7XG4gICAgbmV3RW50aXRpZXMgPSBlbnN1cmVFbnRpdGllc0FycmF5KG5ld0VudGl0aWVzKTtcbiAgICBmb3IgKGNvbnN0IGVudGl0eSBvZiBuZXdFbnRpdGllcykge1xuICAgICAgc2V0T25lTXV0YWJseShlbnRpdHksIHN0YXRlKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gc2V0QWxsTXV0YWJseShuZXdFbnRpdGllcywgc3RhdGUpIHtcbiAgICBuZXdFbnRpdGllcyA9IGVuc3VyZUVudGl0aWVzQXJyYXkobmV3RW50aXRpZXMpO1xuICAgIHN0YXRlLmlkcyA9IFtdO1xuICAgIHN0YXRlLmVudGl0aWVzID0ge307XG4gICAgYWRkTWFueU11dGFibHkobmV3RW50aXRpZXMsIHN0YXRlKTtcbiAgfVxuICBmdW5jdGlvbiByZW1vdmVPbmVNdXRhYmx5KGtleSwgc3RhdGUpIHtcbiAgICByZXR1cm4gcmVtb3ZlTWFueU11dGFibHkoW2tleV0sIHN0YXRlKTtcbiAgfVxuICBmdW5jdGlvbiByZW1vdmVNYW55TXV0YWJseShrZXlzLCBzdGF0ZSkge1xuICAgIGxldCBkaWRNdXRhdGUgPSBmYWxzZTtcbiAgICBrZXlzLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgaWYgKGtleSBpbiBzdGF0ZS5lbnRpdGllcykge1xuICAgICAgICBkZWxldGUgc3RhdGUuZW50aXRpZXNba2V5XTtcbiAgICAgICAgZGlkTXV0YXRlID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoZGlkTXV0YXRlKSB7XG4gICAgICBzdGF0ZS5pZHMgPSBzdGF0ZS5pZHMuZmlsdGVyKChpZCkgPT4gaWQgaW4gc3RhdGUuZW50aXRpZXMpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiByZW1vdmVBbGxNdXRhYmx5KHN0YXRlKSB7XG4gICAgT2JqZWN0LmFzc2lnbihzdGF0ZSwge1xuICAgICAgaWRzOiBbXSxcbiAgICAgIGVudGl0aWVzOiB7fVxuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIHRha2VOZXdLZXkoa2V5cywgdXBkYXRlLCBzdGF0ZSkge1xuICAgIGNvbnN0IG9yaWdpbmFsMyA9IHN0YXRlLmVudGl0aWVzW3VwZGF0ZS5pZF07XG4gICAgaWYgKG9yaWdpbmFsMyA9PT0gdm9pZCAwKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGNvbnN0IHVwZGF0ZWQgPSBPYmplY3QuYXNzaWduKHt9LCBvcmlnaW5hbDMsIHVwZGF0ZS5jaGFuZ2VzKTtcbiAgICBjb25zdCBuZXdLZXkgPSBzZWxlY3RJZFZhbHVlKHVwZGF0ZWQsIHNlbGVjdElkKTtcbiAgICBjb25zdCBoYXNOZXdLZXkgPSBuZXdLZXkgIT09IHVwZGF0ZS5pZDtcbiAgICBpZiAoaGFzTmV3S2V5KSB7XG4gICAgICBrZXlzW3VwZGF0ZS5pZF0gPSBuZXdLZXk7XG4gICAgICBkZWxldGUgc3RhdGUuZW50aXRpZXNbdXBkYXRlLmlkXTtcbiAgICB9XG4gICAgO1xuICAgIHN0YXRlLmVudGl0aWVzW25ld0tleV0gPSB1cGRhdGVkO1xuICAgIHJldHVybiBoYXNOZXdLZXk7XG4gIH1cbiAgZnVuY3Rpb24gdXBkYXRlT25lTXV0YWJseSh1cGRhdGUsIHN0YXRlKSB7XG4gICAgcmV0dXJuIHVwZGF0ZU1hbnlNdXRhYmx5KFt1cGRhdGVdLCBzdGF0ZSk7XG4gIH1cbiAgZnVuY3Rpb24gdXBkYXRlTWFueU11dGFibHkodXBkYXRlcywgc3RhdGUpIHtcbiAgICBjb25zdCBuZXdLZXlzID0ge307XG4gICAgY29uc3QgdXBkYXRlc1BlckVudGl0eSA9IHt9O1xuICAgIHVwZGF0ZXMuZm9yRWFjaCgodXBkYXRlKSA9PiB7XG4gICAgICBpZiAodXBkYXRlLmlkIGluIHN0YXRlLmVudGl0aWVzKSB7XG4gICAgICAgIHVwZGF0ZXNQZXJFbnRpdHlbdXBkYXRlLmlkXSA9IHtcbiAgICAgICAgICBpZDogdXBkYXRlLmlkLFxuICAgICAgICAgIC8vIFNwcmVhZHMgaWdub3JlIGZhbHN5IHZhbHVlcywgc28gdGhpcyB3b3JrcyBldmVuIGlmIHRoZXJlIGlzbid0XG4gICAgICAgICAgLy8gYW4gZXhpc3RpbmcgdXBkYXRlIGFscmVhZHkgYXQgdGhpcyBrZXlcbiAgICAgICAgICBjaGFuZ2VzOiB7XG4gICAgICAgICAgICAuLi51cGRhdGVzUGVyRW50aXR5W3VwZGF0ZS5pZF0/LmNoYW5nZXMsXG4gICAgICAgICAgICAuLi51cGRhdGUuY2hhbmdlc1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB1cGRhdGVzID0gT2JqZWN0LnZhbHVlcyh1cGRhdGVzUGVyRW50aXR5KTtcbiAgICBjb25zdCBkaWRNdXRhdGVFbnRpdGllcyA9IHVwZGF0ZXMubGVuZ3RoID4gMDtcbiAgICBpZiAoZGlkTXV0YXRlRW50aXRpZXMpIHtcbiAgICAgIGNvbnN0IGRpZE11dGF0ZUlkcyA9IHVwZGF0ZXMuZmlsdGVyKCh1cGRhdGUpID0+IHRha2VOZXdLZXkobmV3S2V5cywgdXBkYXRlLCBzdGF0ZSkpLmxlbmd0aCA+IDA7XG4gICAgICBpZiAoZGlkTXV0YXRlSWRzKSB7XG4gICAgICAgIHN0YXRlLmlkcyA9IE9iamVjdC52YWx1ZXMoc3RhdGUuZW50aXRpZXMpLm1hcCgoZSkgPT4gc2VsZWN0SWRWYWx1ZShlLCBzZWxlY3RJZCkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBmdW5jdGlvbiB1cHNlcnRPbmVNdXRhYmx5KGVudGl0eSwgc3RhdGUpIHtcbiAgICByZXR1cm4gdXBzZXJ0TWFueU11dGFibHkoW2VudGl0eV0sIHN0YXRlKTtcbiAgfVxuICBmdW5jdGlvbiB1cHNlcnRNYW55TXV0YWJseShuZXdFbnRpdGllcywgc3RhdGUpIHtcbiAgICBjb25zdCBbYWRkZWQsIHVwZGF0ZWRdID0gc3BsaXRBZGRlZFVwZGF0ZWRFbnRpdGllcyhuZXdFbnRpdGllcywgc2VsZWN0SWQsIHN0YXRlKTtcbiAgICB1cGRhdGVNYW55TXV0YWJseSh1cGRhdGVkLCBzdGF0ZSk7XG4gICAgYWRkTWFueU11dGFibHkoYWRkZWQsIHN0YXRlKTtcbiAgfVxuICByZXR1cm4ge1xuICAgIHJlbW92ZUFsbDogY3JlYXRlU2luZ2xlQXJndW1lbnRTdGF0ZU9wZXJhdG9yKHJlbW92ZUFsbE11dGFibHkpLFxuICAgIGFkZE9uZTogY3JlYXRlU3RhdGVPcGVyYXRvcihhZGRPbmVNdXRhYmx5KSxcbiAgICBhZGRNYW55OiBjcmVhdGVTdGF0ZU9wZXJhdG9yKGFkZE1hbnlNdXRhYmx5KSxcbiAgICBzZXRPbmU6IGNyZWF0ZVN0YXRlT3BlcmF0b3Ioc2V0T25lTXV0YWJseSksXG4gICAgc2V0TWFueTogY3JlYXRlU3RhdGVPcGVyYXRvcihzZXRNYW55TXV0YWJseSksXG4gICAgc2V0QWxsOiBjcmVhdGVTdGF0ZU9wZXJhdG9yKHNldEFsbE11dGFibHkpLFxuICAgIHVwZGF0ZU9uZTogY3JlYXRlU3RhdGVPcGVyYXRvcih1cGRhdGVPbmVNdXRhYmx5KSxcbiAgICB1cGRhdGVNYW55OiBjcmVhdGVTdGF0ZU9wZXJhdG9yKHVwZGF0ZU1hbnlNdXRhYmx5KSxcbiAgICB1cHNlcnRPbmU6IGNyZWF0ZVN0YXRlT3BlcmF0b3IodXBzZXJ0T25lTXV0YWJseSksXG4gICAgdXBzZXJ0TWFueTogY3JlYXRlU3RhdGVPcGVyYXRvcih1cHNlcnRNYW55TXV0YWJseSksXG4gICAgcmVtb3ZlT25lOiBjcmVhdGVTdGF0ZU9wZXJhdG9yKHJlbW92ZU9uZU11dGFibHkpLFxuICAgIHJlbW92ZU1hbnk6IGNyZWF0ZVN0YXRlT3BlcmF0b3IocmVtb3ZlTWFueU11dGFibHkpXG4gIH07XG59XG5cbi8vIHNyYy9lbnRpdGllcy9zb3J0ZWRfc3RhdGVfYWRhcHRlci50c1xuZnVuY3Rpb24gZmluZEluc2VydEluZGV4KHNvcnRlZEl0ZW1zLCBpdGVtLCBjb21wYXJpc29uRnVuY3Rpb24pIHtcbiAgbGV0IGxvd0luZGV4ID0gMDtcbiAgbGV0IGhpZ2hJbmRleCA9IHNvcnRlZEl0ZW1zLmxlbmd0aDtcbiAgd2hpbGUgKGxvd0luZGV4IDwgaGlnaEluZGV4KSB7XG4gICAgbGV0IG1pZGRsZUluZGV4ID0gbG93SW5kZXggKyBoaWdoSW5kZXggPj4+IDE7XG4gICAgY29uc3QgY3VycmVudEl0ZW0gPSBzb3J0ZWRJdGVtc1ttaWRkbGVJbmRleF07XG4gICAgY29uc3QgcmVzID0gY29tcGFyaXNvbkZ1bmN0aW9uKGl0ZW0sIGN1cnJlbnRJdGVtKTtcbiAgICBpZiAocmVzID49IDApIHtcbiAgICAgIGxvd0luZGV4ID0gbWlkZGxlSW5kZXggKyAxO1xuICAgIH0gZWxzZSB7XG4gICAgICBoaWdoSW5kZXggPSBtaWRkbGVJbmRleDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGxvd0luZGV4O1xufVxuZnVuY3Rpb24gaW5zZXJ0KHNvcnRlZEl0ZW1zLCBpdGVtLCBjb21wYXJpc29uRnVuY3Rpb24pIHtcbiAgY29uc3QgaW5zZXJ0QXRJbmRleCA9IGZpbmRJbnNlcnRJbmRleChzb3J0ZWRJdGVtcywgaXRlbSwgY29tcGFyaXNvbkZ1bmN0aW9uKTtcbiAgc29ydGVkSXRlbXMuc3BsaWNlKGluc2VydEF0SW5kZXgsIDAsIGl0ZW0pO1xuICByZXR1cm4gc29ydGVkSXRlbXM7XG59XG5mdW5jdGlvbiBjcmVhdGVTb3J0ZWRTdGF0ZUFkYXB0ZXIoc2VsZWN0SWQsIGNvbXBhcmVyKSB7XG4gIGNvbnN0IHtcbiAgICByZW1vdmVPbmUsXG4gICAgcmVtb3ZlTWFueSxcbiAgICByZW1vdmVBbGxcbiAgfSA9IGNyZWF0ZVVuc29ydGVkU3RhdGVBZGFwdGVyKHNlbGVjdElkKTtcbiAgZnVuY3Rpb24gYWRkT25lTXV0YWJseShlbnRpdHksIHN0YXRlKSB7XG4gICAgcmV0dXJuIGFkZE1hbnlNdXRhYmx5KFtlbnRpdHldLCBzdGF0ZSk7XG4gIH1cbiAgZnVuY3Rpb24gYWRkTWFueU11dGFibHkobmV3RW50aXRpZXMsIHN0YXRlLCBleGlzdGluZ0lkcykge1xuICAgIG5ld0VudGl0aWVzID0gZW5zdXJlRW50aXRpZXNBcnJheShuZXdFbnRpdGllcyk7XG4gICAgY29uc3QgZXhpc3RpbmdLZXlzID0gbmV3IFNldChleGlzdGluZ0lkcyA/PyBnZXRDdXJyZW50KHN0YXRlLmlkcykpO1xuICAgIGNvbnN0IG1vZGVscyA9IG5ld0VudGl0aWVzLmZpbHRlcigobW9kZWwpID0+ICFleGlzdGluZ0tleXMuaGFzKHNlbGVjdElkVmFsdWUobW9kZWwsIHNlbGVjdElkKSkpO1xuICAgIGlmIChtb2RlbHMubGVuZ3RoICE9PSAwKSB7XG4gICAgICBtZXJnZUZ1bmN0aW9uKHN0YXRlLCBtb2RlbHMpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBzZXRPbmVNdXRhYmx5KGVudGl0eSwgc3RhdGUpIHtcbiAgICByZXR1cm4gc2V0TWFueU11dGFibHkoW2VudGl0eV0sIHN0YXRlKTtcbiAgfVxuICBmdW5jdGlvbiBzZXRNYW55TXV0YWJseShuZXdFbnRpdGllcywgc3RhdGUpIHtcbiAgICBuZXdFbnRpdGllcyA9IGVuc3VyZUVudGl0aWVzQXJyYXkobmV3RW50aXRpZXMpO1xuICAgIGlmIChuZXdFbnRpdGllcy5sZW5ndGggIT09IDApIHtcbiAgICAgIGZvciAoY29uc3QgaXRlbSBvZiBuZXdFbnRpdGllcykge1xuICAgICAgICBkZWxldGUgc3RhdGUuZW50aXRpZXNbc2VsZWN0SWQoaXRlbSldO1xuICAgICAgfVxuICAgICAgbWVyZ2VGdW5jdGlvbihzdGF0ZSwgbmV3RW50aXRpZXMpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBzZXRBbGxNdXRhYmx5KG5ld0VudGl0aWVzLCBzdGF0ZSkge1xuICAgIG5ld0VudGl0aWVzID0gZW5zdXJlRW50aXRpZXNBcnJheShuZXdFbnRpdGllcyk7XG4gICAgc3RhdGUuZW50aXRpZXMgPSB7fTtcbiAgICBzdGF0ZS5pZHMgPSBbXTtcbiAgICBhZGRNYW55TXV0YWJseShuZXdFbnRpdGllcywgc3RhdGUsIFtdKTtcbiAgfVxuICBmdW5jdGlvbiB1cGRhdGVPbmVNdXRhYmx5KHVwZGF0ZSwgc3RhdGUpIHtcbiAgICByZXR1cm4gdXBkYXRlTWFueU11dGFibHkoW3VwZGF0ZV0sIHN0YXRlKTtcbiAgfVxuICBmdW5jdGlvbiB1cGRhdGVNYW55TXV0YWJseSh1cGRhdGVzLCBzdGF0ZSkge1xuICAgIGxldCBhcHBsaWVkVXBkYXRlcyA9IGZhbHNlO1xuICAgIGxldCByZXBsYWNlZElkcyA9IGZhbHNlO1xuICAgIGZvciAobGV0IHVwZGF0ZSBvZiB1cGRhdGVzKSB7XG4gICAgICBjb25zdCBlbnRpdHkgPSBzdGF0ZS5lbnRpdGllc1t1cGRhdGUuaWRdO1xuICAgICAgaWYgKCFlbnRpdHkpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBhcHBsaWVkVXBkYXRlcyA9IHRydWU7XG4gICAgICBPYmplY3QuYXNzaWduKGVudGl0eSwgdXBkYXRlLmNoYW5nZXMpO1xuICAgICAgY29uc3QgbmV3SWQgPSBzZWxlY3RJZChlbnRpdHkpO1xuICAgICAgaWYgKHVwZGF0ZS5pZCAhPT0gbmV3SWQpIHtcbiAgICAgICAgcmVwbGFjZWRJZHMgPSB0cnVlO1xuICAgICAgICBkZWxldGUgc3RhdGUuZW50aXRpZXNbdXBkYXRlLmlkXTtcbiAgICAgICAgY29uc3Qgb2xkSW5kZXggPSBzdGF0ZS5pZHMuaW5kZXhPZih1cGRhdGUuaWQpO1xuICAgICAgICBzdGF0ZS5pZHNbb2xkSW5kZXhdID0gbmV3SWQ7XG4gICAgICAgIHN0YXRlLmVudGl0aWVzW25ld0lkXSA9IGVudGl0eTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGFwcGxpZWRVcGRhdGVzKSB7XG4gICAgICBtZXJnZUZ1bmN0aW9uKHN0YXRlLCBbXSwgYXBwbGllZFVwZGF0ZXMsIHJlcGxhY2VkSWRzKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gdXBzZXJ0T25lTXV0YWJseShlbnRpdHksIHN0YXRlKSB7XG4gICAgcmV0dXJuIHVwc2VydE1hbnlNdXRhYmx5KFtlbnRpdHldLCBzdGF0ZSk7XG4gIH1cbiAgZnVuY3Rpb24gdXBzZXJ0TWFueU11dGFibHkobmV3RW50aXRpZXMsIHN0YXRlKSB7XG4gICAgY29uc3QgW2FkZGVkLCB1cGRhdGVkLCBleGlzdGluZ0lkc0FycmF5XSA9IHNwbGl0QWRkZWRVcGRhdGVkRW50aXRpZXMobmV3RW50aXRpZXMsIHNlbGVjdElkLCBzdGF0ZSk7XG4gICAgaWYgKHVwZGF0ZWQubGVuZ3RoKSB7XG4gICAgICB1cGRhdGVNYW55TXV0YWJseSh1cGRhdGVkLCBzdGF0ZSk7XG4gICAgfVxuICAgIGlmIChhZGRlZC5sZW5ndGgpIHtcbiAgICAgIGFkZE1hbnlNdXRhYmx5KGFkZGVkLCBzdGF0ZSwgZXhpc3RpbmdJZHNBcnJheSk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGFyZUFycmF5c0VxdWFsKGEsIGIpIHtcbiAgICBpZiAoYS5sZW5ndGggIT09IGIubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKGFbaV0gPT09IGJbaV0pIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGNvbnN0IG1lcmdlRnVuY3Rpb24gPSAoc3RhdGUsIGFkZGVkSXRlbXMsIGFwcGxpZWRVcGRhdGVzLCByZXBsYWNlZElkcykgPT4ge1xuICAgIGNvbnN0IGN1cnJlbnRFbnRpdGllcyA9IGdldEN1cnJlbnQoc3RhdGUuZW50aXRpZXMpO1xuICAgIGNvbnN0IGN1cnJlbnRJZHMgPSBnZXRDdXJyZW50KHN0YXRlLmlkcyk7XG4gICAgY29uc3Qgc3RhdGVFbnRpdGllcyA9IHN0YXRlLmVudGl0aWVzO1xuICAgIGxldCBpZHMgPSBjdXJyZW50SWRzO1xuICAgIGlmIChyZXBsYWNlZElkcykge1xuICAgICAgaWRzID0gbmV3IFNldChjdXJyZW50SWRzKTtcbiAgICB9XG4gICAgbGV0IHNvcnRlZEVudGl0aWVzID0gW107XG4gICAgZm9yIChjb25zdCBpZCBvZiBpZHMpIHtcbiAgICAgIGNvbnN0IGVudGl0eSA9IGN1cnJlbnRFbnRpdGllc1tpZF07XG4gICAgICBpZiAoZW50aXR5KSB7XG4gICAgICAgIHNvcnRlZEVudGl0aWVzLnB1c2goZW50aXR5KTtcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3Qgd2FzUHJldmlvdXNseUVtcHR5ID0gc29ydGVkRW50aXRpZXMubGVuZ3RoID09PSAwO1xuICAgIGZvciAoY29uc3QgaXRlbSBvZiBhZGRlZEl0ZW1zKSB7XG4gICAgICBzdGF0ZUVudGl0aWVzW3NlbGVjdElkKGl0ZW0pXSA9IGl0ZW07XG4gICAgICBpZiAoIXdhc1ByZXZpb3VzbHlFbXB0eSkge1xuICAgICAgICBpbnNlcnQoc29ydGVkRW50aXRpZXMsIGl0ZW0sIGNvbXBhcmVyKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHdhc1ByZXZpb3VzbHlFbXB0eSkge1xuICAgICAgc29ydGVkRW50aXRpZXMgPSBhZGRlZEl0ZW1zLnNsaWNlKCkuc29ydChjb21wYXJlcik7XG4gICAgfSBlbHNlIGlmIChhcHBsaWVkVXBkYXRlcykge1xuICAgICAgc29ydGVkRW50aXRpZXMuc29ydChjb21wYXJlcik7XG4gICAgfVxuICAgIGNvbnN0IG5ld1NvcnRlZElkcyA9IHNvcnRlZEVudGl0aWVzLm1hcChzZWxlY3RJZCk7XG4gICAgaWYgKCFhcmVBcnJheXNFcXVhbChjdXJyZW50SWRzLCBuZXdTb3J0ZWRJZHMpKSB7XG4gICAgICBzdGF0ZS5pZHMgPSBuZXdTb3J0ZWRJZHM7XG4gICAgfVxuICB9O1xuICByZXR1cm4ge1xuICAgIHJlbW92ZU9uZSxcbiAgICByZW1vdmVNYW55LFxuICAgIHJlbW92ZUFsbCxcbiAgICBhZGRPbmU6IGNyZWF0ZVN0YXRlT3BlcmF0b3IoYWRkT25lTXV0YWJseSksXG4gICAgdXBkYXRlT25lOiBjcmVhdGVTdGF0ZU9wZXJhdG9yKHVwZGF0ZU9uZU11dGFibHkpLFxuICAgIHVwc2VydE9uZTogY3JlYXRlU3RhdGVPcGVyYXRvcih1cHNlcnRPbmVNdXRhYmx5KSxcbiAgICBzZXRPbmU6IGNyZWF0ZVN0YXRlT3BlcmF0b3Ioc2V0T25lTXV0YWJseSksXG4gICAgc2V0TWFueTogY3JlYXRlU3RhdGVPcGVyYXRvcihzZXRNYW55TXV0YWJseSksXG4gICAgc2V0QWxsOiBjcmVhdGVTdGF0ZU9wZXJhdG9yKHNldEFsbE11dGFibHkpLFxuICAgIGFkZE1hbnk6IGNyZWF0ZVN0YXRlT3BlcmF0b3IoYWRkTWFueU11dGFibHkpLFxuICAgIHVwZGF0ZU1hbnk6IGNyZWF0ZVN0YXRlT3BlcmF0b3IodXBkYXRlTWFueU11dGFibHkpLFxuICAgIHVwc2VydE1hbnk6IGNyZWF0ZVN0YXRlT3BlcmF0b3IodXBzZXJ0TWFueU11dGFibHkpXG4gIH07XG59XG5cbi8vIHNyYy9lbnRpdGllcy9jcmVhdGVfYWRhcHRlci50c1xuZnVuY3Rpb24gY3JlYXRlRW50aXR5QWRhcHRlcihvcHRpb25zID0ge30pIHtcbiAgY29uc3Qge1xuICAgIHNlbGVjdElkLFxuICAgIHNvcnRDb21wYXJlclxuICB9ID0ge1xuICAgIHNvcnRDb21wYXJlcjogZmFsc2UsXG4gICAgc2VsZWN0SWQ6IChpbnN0YW5jZSkgPT4gaW5zdGFuY2UuaWQsXG4gICAgLi4ub3B0aW9uc1xuICB9O1xuICBjb25zdCBzdGF0ZUFkYXB0ZXIgPSBzb3J0Q29tcGFyZXIgPyBjcmVhdGVTb3J0ZWRTdGF0ZUFkYXB0ZXIoc2VsZWN0SWQsIHNvcnRDb21wYXJlcikgOiBjcmVhdGVVbnNvcnRlZFN0YXRlQWRhcHRlcihzZWxlY3RJZCk7XG4gIGNvbnN0IHN0YXRlRmFjdG9yeSA9IGNyZWF0ZUluaXRpYWxTdGF0ZUZhY3Rvcnkoc3RhdGVBZGFwdGVyKTtcbiAgY29uc3Qgc2VsZWN0b3JzRmFjdG9yeSA9IGNyZWF0ZVNlbGVjdG9yc0ZhY3RvcnkoKTtcbiAgcmV0dXJuIHtcbiAgICBzZWxlY3RJZCxcbiAgICBzb3J0Q29tcGFyZXIsXG4gICAgLi4uc3RhdGVGYWN0b3J5LFxuICAgIC4uLnNlbGVjdG9yc0ZhY3RvcnksXG4gICAgLi4uc3RhdGVBZGFwdGVyXG4gIH07XG59XG5cbi8vIHNyYy9saXN0ZW5lck1pZGRsZXdhcmUvaW5kZXgudHNcbmltcG9ydCB7IGlzQWN0aW9uIGFzIGlzQWN0aW9uMyB9IGZyb20gXCJyZWR1eFwiO1xuXG4vLyBzcmMvbGlzdGVuZXJNaWRkbGV3YXJlL2V4Y2VwdGlvbnMudHNcbnZhciB0YXNrID0gXCJ0YXNrXCI7XG52YXIgbGlzdGVuZXIgPSBcImxpc3RlbmVyXCI7XG52YXIgY29tcGxldGVkID0gXCJjb21wbGV0ZWRcIjtcbnZhciBjYW5jZWxsZWQgPSBcImNhbmNlbGxlZFwiO1xudmFyIHRhc2tDYW5jZWxsZWQgPSBgdGFzay0ke2NhbmNlbGxlZH1gO1xudmFyIHRhc2tDb21wbGV0ZWQgPSBgdGFzay0ke2NvbXBsZXRlZH1gO1xudmFyIGxpc3RlbmVyQ2FuY2VsbGVkID0gYCR7bGlzdGVuZXJ9LSR7Y2FuY2VsbGVkfWA7XG52YXIgbGlzdGVuZXJDb21wbGV0ZWQgPSBgJHtsaXN0ZW5lcn0tJHtjb21wbGV0ZWR9YDtcbnZhciBUYXNrQWJvcnRFcnJvciA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3IoY29kZSkge1xuICAgIHRoaXMuY29kZSA9IGNvZGU7XG4gICAgdGhpcy5tZXNzYWdlID0gYCR7dGFza30gJHtjYW5jZWxsZWR9IChyZWFzb246ICR7Y29kZX0pYDtcbiAgfVxuICBuYW1lID0gXCJUYXNrQWJvcnRFcnJvclwiO1xuICBtZXNzYWdlO1xufTtcblxuLy8gc3JjL2xpc3RlbmVyTWlkZGxld2FyZS91dGlscy50c1xudmFyIGFzc2VydEZ1bmN0aW9uID0gKGZ1bmMsIGV4cGVjdGVkKSA9PiB7XG4gIGlmICh0eXBlb2YgZnVuYyAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDMyKSA6IGAke2V4cGVjdGVkfSBpcyBub3QgYSBmdW5jdGlvbmApO1xuICB9XG59O1xudmFyIG5vb3AyID0gKCkgPT4ge1xufTtcbnZhciBjYXRjaFJlamVjdGlvbiA9IChwcm9taXNlLCBvbkVycm9yID0gbm9vcDIpID0+IHtcbiAgcHJvbWlzZS5jYXRjaChvbkVycm9yKTtcbiAgcmV0dXJuIHByb21pc2U7XG59O1xudmFyIGFkZEFib3J0U2lnbmFsTGlzdGVuZXIgPSAoYWJvcnRTaWduYWwsIGNhbGxiYWNrKSA9PiB7XG4gIGFib3J0U2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLCBjYWxsYmFjaywge1xuICAgIG9uY2U6IHRydWVcbiAgfSk7XG4gIHJldHVybiAoKSA9PiBhYm9ydFNpZ25hbC5yZW1vdmVFdmVudExpc3RlbmVyKFwiYWJvcnRcIiwgY2FsbGJhY2spO1xufTtcbnZhciBhYm9ydENvbnRyb2xsZXJXaXRoUmVhc29uID0gKGFib3J0Q29udHJvbGxlciwgcmVhc29uKSA9PiB7XG4gIGNvbnN0IHNpZ25hbCA9IGFib3J0Q29udHJvbGxlci5zaWduYWw7XG4gIGlmIChzaWduYWwuYWJvcnRlZCkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoIShcInJlYXNvblwiIGluIHNpZ25hbCkpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoc2lnbmFsLCBcInJlYXNvblwiLCB7XG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgdmFsdWU6IHJlYXNvbixcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH1cbiAgO1xuICBhYm9ydENvbnRyb2xsZXIuYWJvcnQocmVhc29uKTtcbn07XG5cbi8vIHNyYy9saXN0ZW5lck1pZGRsZXdhcmUvdGFzay50c1xudmFyIHZhbGlkYXRlQWN0aXZlID0gKHNpZ25hbCkgPT4ge1xuICBpZiAoc2lnbmFsLmFib3J0ZWQpIHtcbiAgICBjb25zdCB7XG4gICAgICByZWFzb25cbiAgICB9ID0gc2lnbmFsO1xuICAgIHRocm93IG5ldyBUYXNrQWJvcnRFcnJvcihyZWFzb24pO1xuICB9XG59O1xuZnVuY3Rpb24gcmFjZVdpdGhTaWduYWwoc2lnbmFsLCBwcm9taXNlKSB7XG4gIGxldCBjbGVhbnVwID0gbm9vcDI7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgY29uc3Qgbm90aWZ5UmVqZWN0aW9uID0gKCkgPT4gcmVqZWN0KG5ldyBUYXNrQWJvcnRFcnJvcihzaWduYWwucmVhc29uKSk7XG4gICAgaWYgKHNpZ25hbC5hYm9ydGVkKSB7XG4gICAgICBub3RpZnlSZWplY3Rpb24oKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY2xlYW51cCA9IGFkZEFib3J0U2lnbmFsTGlzdGVuZXIoc2lnbmFsLCBub3RpZnlSZWplY3Rpb24pO1xuICAgIHByb21pc2UuZmluYWxseSgoKSA9PiBjbGVhbnVwKCkpLnRoZW4ocmVzb2x2ZSwgcmVqZWN0KTtcbiAgfSkuZmluYWxseSgoKSA9PiB7XG4gICAgY2xlYW51cCA9IG5vb3AyO1xuICB9KTtcbn1cbnZhciBydW5UYXNrID0gYXN5bmMgKHRhc2syLCBjbGVhblVwKSA9PiB7XG4gIHRyeSB7XG4gICAgYXdhaXQgUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgY29uc3QgdmFsdWUgPSBhd2FpdCB0YXNrMigpO1xuICAgIHJldHVybiB7XG4gICAgICBzdGF0dXM6IFwib2tcIixcbiAgICAgIHZhbHVlXG4gICAgfTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4ge1xuICAgICAgc3RhdHVzOiBlcnJvciBpbnN0YW5jZW9mIFRhc2tBYm9ydEVycm9yID8gXCJjYW5jZWxsZWRcIiA6IFwicmVqZWN0ZWRcIixcbiAgICAgIGVycm9yXG4gICAgfTtcbiAgfSBmaW5hbGx5IHtcbiAgICBjbGVhblVwPy4oKTtcbiAgfVxufTtcbnZhciBjcmVhdGVQYXVzZSA9IChzaWduYWwpID0+IHtcbiAgcmV0dXJuIChwcm9taXNlKSA9PiB7XG4gICAgcmV0dXJuIGNhdGNoUmVqZWN0aW9uKHJhY2VXaXRoU2lnbmFsKHNpZ25hbCwgcHJvbWlzZSkudGhlbigob3V0cHV0KSA9PiB7XG4gICAgICB2YWxpZGF0ZUFjdGl2ZShzaWduYWwpO1xuICAgICAgcmV0dXJuIG91dHB1dDtcbiAgICB9KSk7XG4gIH07XG59O1xudmFyIGNyZWF0ZURlbGF5ID0gKHNpZ25hbCkgPT4ge1xuICBjb25zdCBwYXVzZSA9IGNyZWF0ZVBhdXNlKHNpZ25hbCk7XG4gIHJldHVybiAodGltZW91dE1zKSA9PiB7XG4gICAgcmV0dXJuIHBhdXNlKG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIHRpbWVvdXRNcykpKTtcbiAgfTtcbn07XG5cbi8vIHNyYy9saXN0ZW5lck1pZGRsZXdhcmUvaW5kZXgudHNcbnZhciB7XG4gIGFzc2lnblxufSA9IE9iamVjdDtcbnZhciBJTlRFUk5BTF9OSUxfVE9LRU4gPSB7fTtcbnZhciBhbG0gPSBcImxpc3RlbmVyTWlkZGxld2FyZVwiO1xudmFyIGNyZWF0ZUZvcmsgPSAocGFyZW50QWJvcnRTaWduYWwsIHBhcmVudEJsb2NraW5nUHJvbWlzZXMpID0+IHtcbiAgY29uc3QgbGlua0NvbnRyb2xsZXJzID0gKGNvbnRyb2xsZXIpID0+IGFkZEFib3J0U2lnbmFsTGlzdGVuZXIocGFyZW50QWJvcnRTaWduYWwsICgpID0+IGFib3J0Q29udHJvbGxlcldpdGhSZWFzb24oY29udHJvbGxlciwgcGFyZW50QWJvcnRTaWduYWwucmVhc29uKSk7XG4gIHJldHVybiAodGFza0V4ZWN1dG9yLCBvcHRzKSA9PiB7XG4gICAgYXNzZXJ0RnVuY3Rpb24odGFza0V4ZWN1dG9yLCBcInRhc2tFeGVjdXRvclwiKTtcbiAgICBjb25zdCBjaGlsZEFib3J0Q29udHJvbGxlciA9IG5ldyBBYm9ydENvbnRyb2xsZXIoKTtcbiAgICBsaW5rQ29udHJvbGxlcnMoY2hpbGRBYm9ydENvbnRyb2xsZXIpO1xuICAgIGNvbnN0IHJlc3VsdCA9IHJ1blRhc2soYXN5bmMgKCkgPT4ge1xuICAgICAgdmFsaWRhdGVBY3RpdmUocGFyZW50QWJvcnRTaWduYWwpO1xuICAgICAgdmFsaWRhdGVBY3RpdmUoY2hpbGRBYm9ydENvbnRyb2xsZXIuc2lnbmFsKTtcbiAgICAgIGNvbnN0IHJlc3VsdDIgPSBhd2FpdCB0YXNrRXhlY3V0b3Ioe1xuICAgICAgICBwYXVzZTogY3JlYXRlUGF1c2UoY2hpbGRBYm9ydENvbnRyb2xsZXIuc2lnbmFsKSxcbiAgICAgICAgZGVsYXk6IGNyZWF0ZURlbGF5KGNoaWxkQWJvcnRDb250cm9sbGVyLnNpZ25hbCksXG4gICAgICAgIHNpZ25hbDogY2hpbGRBYm9ydENvbnRyb2xsZXIuc2lnbmFsXG4gICAgICB9KTtcbiAgICAgIHZhbGlkYXRlQWN0aXZlKGNoaWxkQWJvcnRDb250cm9sbGVyLnNpZ25hbCk7XG4gICAgICByZXR1cm4gcmVzdWx0MjtcbiAgICB9LCAoKSA9PiBhYm9ydENvbnRyb2xsZXJXaXRoUmVhc29uKGNoaWxkQWJvcnRDb250cm9sbGVyLCB0YXNrQ29tcGxldGVkKSk7XG4gICAgaWYgKG9wdHM/LmF1dG9Kb2luKSB7XG4gICAgICBwYXJlbnRCbG9ja2luZ1Byb21pc2VzLnB1c2gocmVzdWx0LmNhdGNoKG5vb3AyKSk7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICByZXN1bHQ6IGNyZWF0ZVBhdXNlKHBhcmVudEFib3J0U2lnbmFsKShyZXN1bHQpLFxuICAgICAgY2FuY2VsKCkge1xuICAgICAgICBhYm9ydENvbnRyb2xsZXJXaXRoUmVhc29uKGNoaWxkQWJvcnRDb250cm9sbGVyLCB0YXNrQ2FuY2VsbGVkKTtcbiAgICAgIH1cbiAgICB9O1xuICB9O1xufTtcbnZhciBjcmVhdGVUYWtlUGF0dGVybiA9IChzdGFydExpc3RlbmluZywgc2lnbmFsKSA9PiB7XG4gIGNvbnN0IHRha2UgPSBhc3luYyAocHJlZGljYXRlLCB0aW1lb3V0KSA9PiB7XG4gICAgdmFsaWRhdGVBY3RpdmUoc2lnbmFsKTtcbiAgICBsZXQgdW5zdWJzY3JpYmUgPSAoKSA9PiB7XG4gICAgfTtcbiAgICBjb25zdCB0dXBsZVByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBsZXQgc3RvcExpc3RlbmluZyA9IHN0YXJ0TGlzdGVuaW5nKHtcbiAgICAgICAgcHJlZGljYXRlLFxuICAgICAgICBlZmZlY3Q6IChhY3Rpb24sIGxpc3RlbmVyQXBpKSA9PiB7XG4gICAgICAgICAgbGlzdGVuZXJBcGkudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICByZXNvbHZlKFthY3Rpb24sIGxpc3RlbmVyQXBpLmdldFN0YXRlKCksIGxpc3RlbmVyQXBpLmdldE9yaWdpbmFsU3RhdGUoKV0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHVuc3Vic2NyaWJlID0gKCkgPT4ge1xuICAgICAgICBzdG9wTGlzdGVuaW5nKCk7XG4gICAgICAgIHJlamVjdCgpO1xuICAgICAgfTtcbiAgICB9KTtcbiAgICBjb25zdCBwcm9taXNlcyA9IFt0dXBsZVByb21pc2VdO1xuICAgIGlmICh0aW1lb3V0ICE9IG51bGwpIHtcbiAgICAgIHByb21pc2VzLnB1c2gobmV3IFByb21pc2UoKHJlc29sdmUpID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgdGltZW91dCwgbnVsbCkpKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IG91dHB1dCA9IGF3YWl0IHJhY2VXaXRoU2lnbmFsKHNpZ25hbCwgUHJvbWlzZS5yYWNlKHByb21pc2VzKSk7XG4gICAgICB2YWxpZGF0ZUFjdGl2ZShzaWduYWwpO1xuICAgICAgcmV0dXJuIG91dHB1dDtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgdW5zdWJzY3JpYmUoKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiAocHJlZGljYXRlLCB0aW1lb3V0KSA9PiBjYXRjaFJlamVjdGlvbih0YWtlKHByZWRpY2F0ZSwgdGltZW91dCkpO1xufTtcbnZhciBnZXRMaXN0ZW5lckVudHJ5UHJvcHNGcm9tID0gKG9wdGlvbnMpID0+IHtcbiAgbGV0IHtcbiAgICB0eXBlLFxuICAgIGFjdGlvbkNyZWF0b3IsXG4gICAgbWF0Y2hlcixcbiAgICBwcmVkaWNhdGUsXG4gICAgZWZmZWN0XG4gIH0gPSBvcHRpb25zO1xuICBpZiAodHlwZSkge1xuICAgIHByZWRpY2F0ZSA9IGNyZWF0ZUFjdGlvbih0eXBlKS5tYXRjaDtcbiAgfSBlbHNlIGlmIChhY3Rpb25DcmVhdG9yKSB7XG4gICAgdHlwZSA9IGFjdGlvbkNyZWF0b3IudHlwZTtcbiAgICBwcmVkaWNhdGUgPSBhY3Rpb25DcmVhdG9yLm1hdGNoO1xuICB9IGVsc2UgaWYgKG1hdGNoZXIpIHtcbiAgICBwcmVkaWNhdGUgPSBtYXRjaGVyO1xuICB9IGVsc2UgaWYgKHByZWRpY2F0ZSkge1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDIxKSA6IFwiQ3JlYXRpbmcgb3IgcmVtb3ZpbmcgYSBsaXN0ZW5lciByZXF1aXJlcyBvbmUgb2YgdGhlIGtub3duIGZpZWxkcyBmb3IgbWF0Y2hpbmcgYW4gYWN0aW9uXCIpO1xuICB9XG4gIGFzc2VydEZ1bmN0aW9uKGVmZmVjdCwgXCJvcHRpb25zLmxpc3RlbmVyXCIpO1xuICByZXR1cm4ge1xuICAgIHByZWRpY2F0ZSxcbiAgICB0eXBlLFxuICAgIGVmZmVjdFxuICB9O1xufTtcbnZhciBjcmVhdGVMaXN0ZW5lckVudHJ5ID0gLyogQF9fUFVSRV9fICovIGFzc2lnbigob3B0aW9ucykgPT4ge1xuICBjb25zdCB7XG4gICAgdHlwZSxcbiAgICBwcmVkaWNhdGUsXG4gICAgZWZmZWN0XG4gIH0gPSBnZXRMaXN0ZW5lckVudHJ5UHJvcHNGcm9tKG9wdGlvbnMpO1xuICBjb25zdCBlbnRyeSA9IHtcbiAgICBpZDogbmFub2lkKCksXG4gICAgZWZmZWN0LFxuICAgIHR5cGUsXG4gICAgcHJlZGljYXRlLFxuICAgIHBlbmRpbmc6IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KCksXG4gICAgdW5zdWJzY3JpYmU6ICgpID0+IHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDIyKSA6IFwiVW5zdWJzY3JpYmUgbm90IGluaXRpYWxpemVkXCIpO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIGVudHJ5O1xufSwge1xuICB3aXRoVHlwZXM6ICgpID0+IGNyZWF0ZUxpc3RlbmVyRW50cnlcbn0pO1xudmFyIGZpbmRMaXN0ZW5lckVudHJ5ID0gKGxpc3RlbmVyTWFwLCBvcHRpb25zKSA9PiB7XG4gIGNvbnN0IHtcbiAgICB0eXBlLFxuICAgIGVmZmVjdCxcbiAgICBwcmVkaWNhdGVcbiAgfSA9IGdldExpc3RlbmVyRW50cnlQcm9wc0Zyb20ob3B0aW9ucyk7XG4gIHJldHVybiBBcnJheS5mcm9tKGxpc3RlbmVyTWFwLnZhbHVlcygpKS5maW5kKChlbnRyeSkgPT4ge1xuICAgIGNvbnN0IG1hdGNoUHJlZGljYXRlT3JUeXBlID0gdHlwZW9mIHR5cGUgPT09IFwic3RyaW5nXCIgPyBlbnRyeS50eXBlID09PSB0eXBlIDogZW50cnkucHJlZGljYXRlID09PSBwcmVkaWNhdGU7XG4gICAgcmV0dXJuIG1hdGNoUHJlZGljYXRlT3JUeXBlICYmIGVudHJ5LmVmZmVjdCA9PT0gZWZmZWN0O1xuICB9KTtcbn07XG52YXIgY2FuY2VsQWN0aXZlTGlzdGVuZXJzID0gKGVudHJ5KSA9PiB7XG4gIGVudHJ5LnBlbmRpbmcuZm9yRWFjaCgoY29udHJvbGxlcikgPT4ge1xuICAgIGFib3J0Q29udHJvbGxlcldpdGhSZWFzb24oY29udHJvbGxlciwgbGlzdGVuZXJDYW5jZWxsZWQpO1xuICB9KTtcbn07XG52YXIgY3JlYXRlQ2xlYXJMaXN0ZW5lck1pZGRsZXdhcmUgPSAobGlzdGVuZXJNYXApID0+IHtcbiAgcmV0dXJuICgpID0+IHtcbiAgICBsaXN0ZW5lck1hcC5mb3JFYWNoKGNhbmNlbEFjdGl2ZUxpc3RlbmVycyk7XG4gICAgbGlzdGVuZXJNYXAuY2xlYXIoKTtcbiAgfTtcbn07XG52YXIgc2FmZWx5Tm90aWZ5RXJyb3IgPSAoZXJyb3JIYW5kbGVyLCBlcnJvclRvTm90aWZ5LCBlcnJvckluZm8pID0+IHtcbiAgdHJ5IHtcbiAgICBlcnJvckhhbmRsZXIoZXJyb3JUb05vdGlmeSwgZXJyb3JJbmZvKTtcbiAgfSBjYXRjaCAoZXJyb3JIYW5kbGVyRXJyb3IpIHtcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHRocm93IGVycm9ySGFuZGxlckVycm9yO1xuICAgIH0sIDApO1xuICB9XG59O1xudmFyIGFkZExpc3RlbmVyID0gLyogQF9fUFVSRV9fICovIGFzc2lnbigvKiBAX19QVVJFX18gKi8gY3JlYXRlQWN0aW9uKGAke2FsbX0vYWRkYCksIHtcbiAgd2l0aFR5cGVzOiAoKSA9PiBhZGRMaXN0ZW5lclxufSk7XG52YXIgY2xlYXJBbGxMaXN0ZW5lcnMgPSAvKiBAX19QVVJFX18gKi8gY3JlYXRlQWN0aW9uKGAke2FsbX0vcmVtb3ZlQWxsYCk7XG52YXIgcmVtb3ZlTGlzdGVuZXIgPSAvKiBAX19QVVJFX18gKi8gYXNzaWduKC8qIEBfX1BVUkVfXyAqLyBjcmVhdGVBY3Rpb24oYCR7YWxtfS9yZW1vdmVgKSwge1xuICB3aXRoVHlwZXM6ICgpID0+IHJlbW92ZUxpc3RlbmVyXG59KTtcbnZhciBkZWZhdWx0RXJyb3JIYW5kbGVyID0gKC4uLmFyZ3MpID0+IHtcbiAgY29uc29sZS5lcnJvcihgJHthbG19L2Vycm9yYCwgLi4uYXJncyk7XG59O1xudmFyIGNyZWF0ZUxpc3RlbmVyTWlkZGxld2FyZSA9IChtaWRkbGV3YXJlT3B0aW9ucyA9IHt9KSA9PiB7XG4gIGNvbnN0IGxpc3RlbmVyTWFwID0gLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKTtcbiAgY29uc3Qge1xuICAgIGV4dHJhLFxuICAgIG9uRXJyb3IgPSBkZWZhdWx0RXJyb3JIYW5kbGVyXG4gIH0gPSBtaWRkbGV3YXJlT3B0aW9ucztcbiAgYXNzZXJ0RnVuY3Rpb24ob25FcnJvciwgXCJvbkVycm9yXCIpO1xuICBjb25zdCBpbnNlcnRFbnRyeSA9IChlbnRyeSkgPT4ge1xuICAgIGVudHJ5LnVuc3Vic2NyaWJlID0gKCkgPT4gbGlzdGVuZXJNYXAuZGVsZXRlKGVudHJ5LmlkKTtcbiAgICBsaXN0ZW5lck1hcC5zZXQoZW50cnkuaWQsIGVudHJ5KTtcbiAgICByZXR1cm4gKGNhbmNlbE9wdGlvbnMpID0+IHtcbiAgICAgIGVudHJ5LnVuc3Vic2NyaWJlKCk7XG4gICAgICBpZiAoY2FuY2VsT3B0aW9ucz8uY2FuY2VsQWN0aXZlKSB7XG4gICAgICAgIGNhbmNlbEFjdGl2ZUxpc3RlbmVycyhlbnRyeSk7XG4gICAgICB9XG4gICAgfTtcbiAgfTtcbiAgY29uc3Qgc3RhcnRMaXN0ZW5pbmcgPSAob3B0aW9ucykgPT4ge1xuICAgIGNvbnN0IGVudHJ5ID0gZmluZExpc3RlbmVyRW50cnkobGlzdGVuZXJNYXAsIG9wdGlvbnMpID8/IGNyZWF0ZUxpc3RlbmVyRW50cnkob3B0aW9ucyk7XG4gICAgcmV0dXJuIGluc2VydEVudHJ5KGVudHJ5KTtcbiAgfTtcbiAgYXNzaWduKHN0YXJ0TGlzdGVuaW5nLCB7XG4gICAgd2l0aFR5cGVzOiAoKSA9PiBzdGFydExpc3RlbmluZ1xuICB9KTtcbiAgY29uc3Qgc3RvcExpc3RlbmluZyA9IChvcHRpb25zKSA9PiB7XG4gICAgY29uc3QgZW50cnkgPSBmaW5kTGlzdGVuZXJFbnRyeShsaXN0ZW5lck1hcCwgb3B0aW9ucyk7XG4gICAgaWYgKGVudHJ5KSB7XG4gICAgICBlbnRyeS51bnN1YnNjcmliZSgpO1xuICAgICAgaWYgKG9wdGlvbnMuY2FuY2VsQWN0aXZlKSB7XG4gICAgICAgIGNhbmNlbEFjdGl2ZUxpc3RlbmVycyhlbnRyeSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiAhIWVudHJ5O1xuICB9O1xuICBhc3NpZ24oc3RvcExpc3RlbmluZywge1xuICAgIHdpdGhUeXBlczogKCkgPT4gc3RvcExpc3RlbmluZ1xuICB9KTtcbiAgY29uc3Qgbm90aWZ5TGlzdGVuZXIgPSBhc3luYyAoZW50cnksIGFjdGlvbiwgYXBpLCBnZXRPcmlnaW5hbFN0YXRlKSA9PiB7XG4gICAgY29uc3QgaW50ZXJuYWxUYXNrQ29udHJvbGxlciA9IG5ldyBBYm9ydENvbnRyb2xsZXIoKTtcbiAgICBjb25zdCB0YWtlID0gY3JlYXRlVGFrZVBhdHRlcm4oc3RhcnRMaXN0ZW5pbmcsIGludGVybmFsVGFza0NvbnRyb2xsZXIuc2lnbmFsKTtcbiAgICBjb25zdCBhdXRvSm9pblByb21pc2VzID0gW107XG4gICAgdHJ5IHtcbiAgICAgIGVudHJ5LnBlbmRpbmcuYWRkKGludGVybmFsVGFza0NvbnRyb2xsZXIpO1xuICAgICAgYXdhaXQgUHJvbWlzZS5yZXNvbHZlKGVudHJ5LmVmZmVjdChcbiAgICAgICAgYWN0aW9uLFxuICAgICAgICAvLyBVc2UgYXNzaWduKCkgcmF0aGVyIHRoYW4gLi4uIHRvIGF2b2lkIGV4dHJhIGhlbHBlciBmdW5jdGlvbnMgYWRkZWQgdG8gYnVuZGxlXG4gICAgICAgIGFzc2lnbih7fSwgYXBpLCB7XG4gICAgICAgICAgZ2V0T3JpZ2luYWxTdGF0ZSxcbiAgICAgICAgICBjb25kaXRpb246IChwcmVkaWNhdGUsIHRpbWVvdXQpID0+IHRha2UocHJlZGljYXRlLCB0aW1lb3V0KS50aGVuKEJvb2xlYW4pLFxuICAgICAgICAgIHRha2UsXG4gICAgICAgICAgZGVsYXk6IGNyZWF0ZURlbGF5KGludGVybmFsVGFza0NvbnRyb2xsZXIuc2lnbmFsKSxcbiAgICAgICAgICBwYXVzZTogY3JlYXRlUGF1c2UoaW50ZXJuYWxUYXNrQ29udHJvbGxlci5zaWduYWwpLFxuICAgICAgICAgIGV4dHJhLFxuICAgICAgICAgIHNpZ25hbDogaW50ZXJuYWxUYXNrQ29udHJvbGxlci5zaWduYWwsXG4gICAgICAgICAgZm9yazogY3JlYXRlRm9yayhpbnRlcm5hbFRhc2tDb250cm9sbGVyLnNpZ25hbCwgYXV0b0pvaW5Qcm9taXNlcyksXG4gICAgICAgICAgdW5zdWJzY3JpYmU6IGVudHJ5LnVuc3Vic2NyaWJlLFxuICAgICAgICAgIHN1YnNjcmliZTogKCkgPT4ge1xuICAgICAgICAgICAgbGlzdGVuZXJNYXAuc2V0KGVudHJ5LmlkLCBlbnRyeSk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBjYW5jZWxBY3RpdmVMaXN0ZW5lcnM6ICgpID0+IHtcbiAgICAgICAgICAgIGVudHJ5LnBlbmRpbmcuZm9yRWFjaCgoY29udHJvbGxlciwgXywgc2V0KSA9PiB7XG4gICAgICAgICAgICAgIGlmIChjb250cm9sbGVyICE9PSBpbnRlcm5hbFRhc2tDb250cm9sbGVyKSB7XG4gICAgICAgICAgICAgICAgYWJvcnRDb250cm9sbGVyV2l0aFJlYXNvbihjb250cm9sbGVyLCBsaXN0ZW5lckNhbmNlbGxlZCk7XG4gICAgICAgICAgICAgICAgc2V0LmRlbGV0ZShjb250cm9sbGVyKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBjYW5jZWw6ICgpID0+IHtcbiAgICAgICAgICAgIGFib3J0Q29udHJvbGxlcldpdGhSZWFzb24oaW50ZXJuYWxUYXNrQ29udHJvbGxlciwgbGlzdGVuZXJDYW5jZWxsZWQpO1xuICAgICAgICAgICAgZW50cnkucGVuZGluZy5kZWxldGUoaW50ZXJuYWxUYXNrQ29udHJvbGxlcik7XG4gICAgICAgICAgfSxcbiAgICAgICAgICB0aHJvd0lmQ2FuY2VsbGVkOiAoKSA9PiB7XG4gICAgICAgICAgICB2YWxpZGF0ZUFjdGl2ZShpbnRlcm5hbFRhc2tDb250cm9sbGVyLnNpZ25hbCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgKSk7XG4gICAgfSBjYXRjaCAobGlzdGVuZXJFcnJvcikge1xuICAgICAgaWYgKCEobGlzdGVuZXJFcnJvciBpbnN0YW5jZW9mIFRhc2tBYm9ydEVycm9yKSkge1xuICAgICAgICBzYWZlbHlOb3RpZnlFcnJvcihvbkVycm9yLCBsaXN0ZW5lckVycm9yLCB7XG4gICAgICAgICAgcmFpc2VkQnk6IFwiZWZmZWN0XCJcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGF3YWl0IFByb21pc2UuYWxsKGF1dG9Kb2luUHJvbWlzZXMpO1xuICAgICAgYWJvcnRDb250cm9sbGVyV2l0aFJlYXNvbihpbnRlcm5hbFRhc2tDb250cm9sbGVyLCBsaXN0ZW5lckNvbXBsZXRlZCk7XG4gICAgICBlbnRyeS5wZW5kaW5nLmRlbGV0ZShpbnRlcm5hbFRhc2tDb250cm9sbGVyKTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IGNsZWFyTGlzdGVuZXJNaWRkbGV3YXJlID0gY3JlYXRlQ2xlYXJMaXN0ZW5lck1pZGRsZXdhcmUobGlzdGVuZXJNYXApO1xuICBjb25zdCBtaWRkbGV3YXJlID0gKGFwaSkgPT4gKG5leHQpID0+IChhY3Rpb24pID0+IHtcbiAgICBpZiAoIWlzQWN0aW9uMyhhY3Rpb24pKSB7XG4gICAgICByZXR1cm4gbmV4dChhY3Rpb24pO1xuICAgIH1cbiAgICBpZiAoYWRkTGlzdGVuZXIubWF0Y2goYWN0aW9uKSkge1xuICAgICAgcmV0dXJuIHN0YXJ0TGlzdGVuaW5nKGFjdGlvbi5wYXlsb2FkKTtcbiAgICB9XG4gICAgaWYgKGNsZWFyQWxsTGlzdGVuZXJzLm1hdGNoKGFjdGlvbikpIHtcbiAgICAgIGNsZWFyTGlzdGVuZXJNaWRkbGV3YXJlKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChyZW1vdmVMaXN0ZW5lci5tYXRjaChhY3Rpb24pKSB7XG4gICAgICByZXR1cm4gc3RvcExpc3RlbmluZyhhY3Rpb24ucGF5bG9hZCk7XG4gICAgfVxuICAgIGxldCBvcmlnaW5hbFN0YXRlID0gYXBpLmdldFN0YXRlKCk7XG4gICAgY29uc3QgZ2V0T3JpZ2luYWxTdGF0ZSA9ICgpID0+IHtcbiAgICAgIGlmIChvcmlnaW5hbFN0YXRlID09PSBJTlRFUk5BTF9OSUxfVE9LRU4pIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMjMpIDogYCR7YWxtfTogZ2V0T3JpZ2luYWxTdGF0ZSBjYW4gb25seSBiZSBjYWxsZWQgc3luY2hyb25vdXNseWApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG9yaWdpbmFsU3RhdGU7XG4gICAgfTtcbiAgICBsZXQgcmVzdWx0O1xuICAgIHRyeSB7XG4gICAgICByZXN1bHQgPSBuZXh0KGFjdGlvbik7XG4gICAgICBpZiAobGlzdGVuZXJNYXAuc2l6ZSA+IDApIHtcbiAgICAgICAgY29uc3QgY3VycmVudFN0YXRlID0gYXBpLmdldFN0YXRlKCk7XG4gICAgICAgIGNvbnN0IGxpc3RlbmVyRW50cmllcyA9IEFycmF5LmZyb20obGlzdGVuZXJNYXAudmFsdWVzKCkpO1xuICAgICAgICBmb3IgKGNvbnN0IGVudHJ5IG9mIGxpc3RlbmVyRW50cmllcykge1xuICAgICAgICAgIGxldCBydW5MaXN0ZW5lciA9IGZhbHNlO1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBydW5MaXN0ZW5lciA9IGVudHJ5LnByZWRpY2F0ZShhY3Rpb24sIGN1cnJlbnRTdGF0ZSwgb3JpZ2luYWxTdGF0ZSk7XG4gICAgICAgICAgfSBjYXRjaCAocHJlZGljYXRlRXJyb3IpIHtcbiAgICAgICAgICAgIHJ1bkxpc3RlbmVyID0gZmFsc2U7XG4gICAgICAgICAgICBzYWZlbHlOb3RpZnlFcnJvcihvbkVycm9yLCBwcmVkaWNhdGVFcnJvciwge1xuICAgICAgICAgICAgICByYWlzZWRCeTogXCJwcmVkaWNhdGVcIlxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghcnVuTGlzdGVuZXIpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBub3RpZnlMaXN0ZW5lcihlbnRyeSwgYWN0aW9uLCBhcGksIGdldE9yaWdpbmFsU3RhdGUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIG9yaWdpbmFsU3RhdGUgPSBJTlRFUk5BTF9OSUxfVE9LRU47XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG4gIHJldHVybiB7XG4gICAgbWlkZGxld2FyZSxcbiAgICBzdGFydExpc3RlbmluZyxcbiAgICBzdG9wTGlzdGVuaW5nLFxuICAgIGNsZWFyTGlzdGVuZXJzOiBjbGVhckxpc3RlbmVyTWlkZGxld2FyZVxuICB9O1xufTtcblxuLy8gc3JjL2R5bmFtaWNNaWRkbGV3YXJlL2luZGV4LnRzXG5pbXBvcnQgeyBjb21wb3NlIGFzIGNvbXBvc2UzIH0gZnJvbSBcInJlZHV4XCI7XG52YXIgY3JlYXRlTWlkZGxld2FyZUVudHJ5ID0gKG1pZGRsZXdhcmUpID0+ICh7XG4gIG1pZGRsZXdhcmUsXG4gIGFwcGxpZWQ6IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKClcbn0pO1xudmFyIG1hdGNoSW5zdGFuY2UgPSAoaW5zdGFuY2VJZCkgPT4gKGFjdGlvbikgPT4gYWN0aW9uPy5tZXRhPy5pbnN0YW5jZUlkID09PSBpbnN0YW5jZUlkO1xudmFyIGNyZWF0ZUR5bmFtaWNNaWRkbGV3YXJlID0gKCkgPT4ge1xuICBjb25zdCBpbnN0YW5jZUlkID0gbmFub2lkKCk7XG4gIGNvbnN0IG1pZGRsZXdhcmVNYXAgPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpO1xuICBjb25zdCB3aXRoTWlkZGxld2FyZSA9IE9iamVjdC5hc3NpZ24oY3JlYXRlQWN0aW9uKFwiZHluYW1pY01pZGRsZXdhcmUvYWRkXCIsICguLi5taWRkbGV3YXJlcykgPT4gKHtcbiAgICBwYXlsb2FkOiBtaWRkbGV3YXJlcyxcbiAgICBtZXRhOiB7XG4gICAgICBpbnN0YW5jZUlkXG4gICAgfVxuICB9KSksIHtcbiAgICB3aXRoVHlwZXM6ICgpID0+IHdpdGhNaWRkbGV3YXJlXG4gIH0pO1xuICBjb25zdCBhZGRNaWRkbGV3YXJlID0gT2JqZWN0LmFzc2lnbihmdW5jdGlvbiBhZGRNaWRkbGV3YXJlMiguLi5taWRkbGV3YXJlcykge1xuICAgIG1pZGRsZXdhcmVzLmZvckVhY2goKG1pZGRsZXdhcmUyKSA9PiB7XG4gICAgICBnZXRPckluc2VydENvbXB1dGVkKG1pZGRsZXdhcmVNYXAsIG1pZGRsZXdhcmUyLCBjcmVhdGVNaWRkbGV3YXJlRW50cnkpO1xuICAgIH0pO1xuICB9LCB7XG4gICAgd2l0aFR5cGVzOiAoKSA9PiBhZGRNaWRkbGV3YXJlXG4gIH0pO1xuICBjb25zdCBnZXRGaW5hbE1pZGRsZXdhcmUgPSAoYXBpKSA9PiB7XG4gICAgY29uc3QgYXBwbGllZE1pZGRsZXdhcmUgPSBBcnJheS5mcm9tKG1pZGRsZXdhcmVNYXAudmFsdWVzKCkpLm1hcCgoZW50cnkpID0+IGdldE9ySW5zZXJ0Q29tcHV0ZWQoZW50cnkuYXBwbGllZCwgYXBpLCBlbnRyeS5taWRkbGV3YXJlKSk7XG4gICAgcmV0dXJuIGNvbXBvc2UzKC4uLmFwcGxpZWRNaWRkbGV3YXJlKTtcbiAgfTtcbiAgY29uc3QgaXNXaXRoTWlkZGxld2FyZSA9IGlzQWxsT2Yod2l0aE1pZGRsZXdhcmUsIG1hdGNoSW5zdGFuY2UoaW5zdGFuY2VJZCkpO1xuICBjb25zdCBtaWRkbGV3YXJlID0gKGFwaSkgPT4gKG5leHQpID0+IChhY3Rpb24pID0+IHtcbiAgICBpZiAoaXNXaXRoTWlkZGxld2FyZShhY3Rpb24pKSB7XG4gICAgICBhZGRNaWRkbGV3YXJlKC4uLmFjdGlvbi5wYXlsb2FkKTtcbiAgICAgIHJldHVybiBhcGkuZGlzcGF0Y2g7XG4gICAgfVxuICAgIHJldHVybiBnZXRGaW5hbE1pZGRsZXdhcmUoYXBpKShuZXh0KShhY3Rpb24pO1xuICB9O1xuICByZXR1cm4ge1xuICAgIG1pZGRsZXdhcmUsXG4gICAgYWRkTWlkZGxld2FyZSxcbiAgICB3aXRoTWlkZGxld2FyZSxcbiAgICBpbnN0YW5jZUlkXG4gIH07XG59O1xuXG4vLyBzcmMvY29tYmluZVNsaWNlcy50c1xuaW1wb3J0IHsgY29tYmluZVJlZHVjZXJzIGFzIGNvbWJpbmVSZWR1Y2VyczIgfSBmcm9tIFwicmVkdXhcIjtcbnZhciBpc1NsaWNlTGlrZSA9IChtYXliZVNsaWNlTGlrZSkgPT4gXCJyZWR1Y2VyUGF0aFwiIGluIG1heWJlU2xpY2VMaWtlICYmIHR5cGVvZiBtYXliZVNsaWNlTGlrZS5yZWR1Y2VyUGF0aCA9PT0gXCJzdHJpbmdcIjtcbnZhciBnZXRSZWR1Y2VycyA9IChzbGljZXMpID0+IHNsaWNlcy5mbGF0TWFwKChzbGljZU9yTWFwKSA9PiBpc1NsaWNlTGlrZShzbGljZU9yTWFwKSA/IFtbc2xpY2VPck1hcC5yZWR1Y2VyUGF0aCwgc2xpY2VPck1hcC5yZWR1Y2VyXV0gOiBPYmplY3QuZW50cmllcyhzbGljZU9yTWFwKSk7XG52YXIgT1JJR0lOQUxfU1RBVEUgPSBTeW1ib2wuZm9yKFwicnRrLXN0YXRlLXByb3h5LW9yaWdpbmFsXCIpO1xudmFyIGlzU3RhdGVQcm94eSA9ICh2YWx1ZSkgPT4gISF2YWx1ZSAmJiAhIXZhbHVlW09SSUdJTkFMX1NUQVRFXTtcbnZhciBzdGF0ZVByb3h5TWFwID0gLyogQF9fUFVSRV9fICovIG5ldyBXZWFrTWFwKCk7XG52YXIgY3JlYXRlU3RhdGVQcm94eSA9IChzdGF0ZSwgcmVkdWNlck1hcCkgPT4gZ2V0T3JJbnNlcnRDb21wdXRlZChzdGF0ZVByb3h5TWFwLCBzdGF0ZSwgKCkgPT4gbmV3IFByb3h5KHN0YXRlLCB7XG4gIGdldDogKHRhcmdldCwgcHJvcCwgcmVjZWl2ZXIpID0+IHtcbiAgICBpZiAocHJvcCA9PT0gT1JJR0lOQUxfU1RBVEUpIHJldHVybiB0YXJnZXQ7XG4gICAgY29uc3QgcmVzdWx0ID0gUmVmbGVjdC5nZXQodGFyZ2V0LCBwcm9wLCByZWNlaXZlcik7XG4gICAgaWYgKHR5cGVvZiByZXN1bHQgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIGNvbnN0IHJlZHVjZXIgPSByZWR1Y2VyTWFwW3Byb3AudG9TdHJpbmcoKV07XG4gICAgICBpZiAocmVkdWNlcikge1xuICAgICAgICBjb25zdCByZWR1Y2VyUmVzdWx0ID0gcmVkdWNlcih2b2lkIDAsIHtcbiAgICAgICAgICB0eXBlOiBuYW5vaWQoKVxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHR5cGVvZiByZWR1Y2VyUmVzdWx0ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMjQpIDogYFRoZSBzbGljZSByZWR1Y2VyIGZvciBrZXkgXCIke3Byb3AudG9TdHJpbmcoKX1cIiByZXR1cm5lZCB1bmRlZmluZWQgd2hlbiBjYWxsZWQgZm9yIHNlbGVjdG9yKCkuIElmIHRoZSBzdGF0ZSBwYXNzZWQgdG8gdGhlIHJlZHVjZXIgaXMgdW5kZWZpbmVkLCB5b3UgbXVzdCBleHBsaWNpdGx5IHJldHVybiB0aGUgaW5pdGlhbCBzdGF0ZS4gVGhlIGluaXRpYWwgc3RhdGUgbWF5IG5vdCBiZSB1bmRlZmluZWQuIElmIHlvdSBkb24ndCB3YW50IHRvIHNldCBhIHZhbHVlIGZvciB0aGlzIHJlZHVjZXIsIHlvdSBjYW4gdXNlIG51bGwgaW5zdGVhZCBvZiB1bmRlZmluZWQuYCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlZHVjZXJSZXN1bHQ7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn0pKTtcbnZhciBvcmlnaW5hbCA9IChzdGF0ZSkgPT4ge1xuICBpZiAoIWlzU3RhdGVQcm94eShzdGF0ZSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgyNSkgOiBcIm9yaWdpbmFsIG11c3QgYmUgdXNlZCBvbiBzdGF0ZSBQcm94eVwiKTtcbiAgfVxuICByZXR1cm4gc3RhdGVbT1JJR0lOQUxfU1RBVEVdO1xufTtcbnZhciBub29wUmVkdWNlciA9IChzdGF0ZSA9IHt9KSA9PiBzdGF0ZTtcbmZ1bmN0aW9uIGNvbWJpbmVTbGljZXMoLi4uc2xpY2VzKSB7XG4gIGNvbnN0IHJlZHVjZXJNYXAgPSBPYmplY3QuZnJvbUVudHJpZXMoZ2V0UmVkdWNlcnMoc2xpY2VzKSk7XG4gIGNvbnN0IGdldFJlZHVjZXIgPSAoKSA9PiBPYmplY3Qua2V5cyhyZWR1Y2VyTWFwKS5sZW5ndGggPyBjb21iaW5lUmVkdWNlcnMyKHJlZHVjZXJNYXApIDogbm9vcFJlZHVjZXI7XG4gIGxldCByZWR1Y2VyID0gZ2V0UmVkdWNlcigpO1xuICBmdW5jdGlvbiBjb21iaW5lZFJlZHVjZXIoc3RhdGUsIGFjdGlvbikge1xuICAgIHJldHVybiByZWR1Y2VyKHN0YXRlLCBhY3Rpb24pO1xuICB9XG4gIGNvbWJpbmVkUmVkdWNlci53aXRoTGF6eUxvYWRlZFNsaWNlcyA9ICgpID0+IGNvbWJpbmVkUmVkdWNlcjtcbiAgY29uc3QgaW5qZWN0ID0gKHNsaWNlLCBjb25maWcgPSB7fSkgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIHJlZHVjZXJQYXRoLFxuICAgICAgcmVkdWNlcjogcmVkdWNlclRvSW5qZWN0XG4gICAgfSA9IHNsaWNlO1xuICAgIGNvbnN0IGN1cnJlbnRSZWR1Y2VyID0gcmVkdWNlck1hcFtyZWR1Y2VyUGF0aF07XG4gICAgaWYgKCFjb25maWcub3ZlcnJpZGVFeGlzdGluZyAmJiBjdXJyZW50UmVkdWNlciAmJiBjdXJyZW50UmVkdWNlciAhPT0gcmVkdWNlclRvSW5qZWN0KSB7XG4gICAgICBpZiAodHlwZW9mIHByb2Nlc3MgIT09IFwidW5kZWZpbmVkXCIgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwiZGV2ZWxvcG1lbnRcIikge1xuICAgICAgICBjb25zb2xlLmVycm9yKGBjYWxsZWQgXFxgaW5qZWN0XFxgIHRvIG92ZXJyaWRlIGFscmVhZHktZXhpc3RpbmcgcmVkdWNlciAke3JlZHVjZXJQYXRofSB3aXRob3V0IHNwZWNpZnlpbmcgXFxgb3ZlcnJpZGVFeGlzdGluZzogdHJ1ZVxcYGApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNvbWJpbmVkUmVkdWNlcjtcbiAgICB9XG4gICAgcmVkdWNlck1hcFtyZWR1Y2VyUGF0aF0gPSByZWR1Y2VyVG9JbmplY3Q7XG4gICAgcmVkdWNlciA9IGdldFJlZHVjZXIoKTtcbiAgICByZXR1cm4gY29tYmluZWRSZWR1Y2VyO1xuICB9O1xuICBjb25zdCBzZWxlY3RvciA9IE9iamVjdC5hc3NpZ24oZnVuY3Rpb24gbWFrZVNlbGVjdG9yKHNlbGVjdG9yRm4sIHNlbGVjdFN0YXRlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHNlbGVjdG9yMihzdGF0ZSwgLi4uYXJncykge1xuICAgICAgcmV0dXJuIHNlbGVjdG9yRm4oY3JlYXRlU3RhdGVQcm94eShzZWxlY3RTdGF0ZSA/IHNlbGVjdFN0YXRlKHN0YXRlLCAuLi5hcmdzKSA6IHN0YXRlLCByZWR1Y2VyTWFwKSwgLi4uYXJncyk7XG4gICAgfTtcbiAgfSwge1xuICAgIG9yaWdpbmFsXG4gIH0pO1xuICByZXR1cm4gT2JqZWN0LmFzc2lnbihjb21iaW5lZFJlZHVjZXIsIHtcbiAgICBpbmplY3QsXG4gICAgc2VsZWN0b3JcbiAgfSk7XG59XG5cbi8vIHNyYy9mb3JtYXRQcm9kRXJyb3JNZXNzYWdlLnRzXG5mdW5jdGlvbiBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKGNvZGUpIHtcbiAgcmV0dXJuIGBNaW5pZmllZCBSZWR1eCBUb29sa2l0IGVycm9yICMke2NvZGV9OyB2aXNpdCBodHRwczovL3JlZHV4LXRvb2xraXQuanMub3JnL0Vycm9ycz9jb2RlPSR7Y29kZX0gZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciBmdWxsIGVycm9ycy4gYDtcbn1cbmV4cG9ydCB7XG4gIFJlZHVjZXJUeXBlLFxuICBTSE9VTERfQVVUT0JBVENILFxuICBUYXNrQWJvcnRFcnJvcixcbiAgVHVwbGUsXG4gIGFkZExpc3RlbmVyLFxuICBhc3luY1RodW5rQ3JlYXRvcixcbiAgYXV0b0JhdGNoRW5oYW5jZXIsXG4gIGJ1aWxkQ3JlYXRlU2xpY2UsXG4gIGNsZWFyQWxsTGlzdGVuZXJzLFxuICBjb21iaW5lU2xpY2VzLFxuICBjb25maWd1cmVTdG9yZSxcbiAgY3JlYXRlQWN0aW9uLFxuICBjcmVhdGVBY3Rpb25DcmVhdG9ySW52YXJpYW50TWlkZGxld2FyZSxcbiAgY3JlYXRlQXN5bmNUaHVuayxcbiAgY3JlYXRlRHJhZnRTYWZlU2VsZWN0b3IsXG4gIGNyZWF0ZURyYWZ0U2FmZVNlbGVjdG9yQ3JlYXRvcixcbiAgY3JlYXRlRHluYW1pY01pZGRsZXdhcmUsXG4gIGNyZWF0ZUVudGl0eUFkYXB0ZXIsXG4gIGNyZWF0ZUltbXV0YWJsZVN0YXRlSW52YXJpYW50TWlkZGxld2FyZSxcbiAgY3JlYXRlTGlzdGVuZXJNaWRkbGV3YXJlLFxuICBwcm9kdWNlIGFzIGNyZWF0ZU5leHRTdGF0ZSxcbiAgY3JlYXRlUmVkdWNlcixcbiAgY3JlYXRlU2VsZWN0b3IsXG4gIGNyZWF0ZVNlbGVjdG9yQ3JlYXRvcjIgYXMgY3JlYXRlU2VsZWN0b3JDcmVhdG9yLFxuICBjcmVhdGVTZXJpYWxpemFibGVTdGF0ZUludmFyaWFudE1pZGRsZXdhcmUsXG4gIGNyZWF0ZVNsaWNlLFxuICBjdXJyZW50MyBhcyBjdXJyZW50LFxuICBmaW5kTm9uU2VyaWFsaXphYmxlVmFsdWUsXG4gIGZvcm1hdFByb2RFcnJvck1lc3NhZ2UsXG4gIGZyZWV6ZSxcbiAgaXNBY3Rpb25DcmVhdG9yLFxuICBpc0FsbE9mLFxuICBpc0FueU9mLFxuICBpc0FzeW5jVGh1bmtBY3Rpb24sXG4gIGlzRHJhZnQ1IGFzIGlzRHJhZnQsXG4gIGlzRlNBIGFzIGlzRmx1eFN0YW5kYXJkQWN0aW9uLFxuICBpc0Z1bGZpbGxlZCxcbiAgaXNJbW11dGFibGVEZWZhdWx0LFxuICBpc1BlbmRpbmcsXG4gIGlzUGxhaW4sXG4gIGlzUmVqZWN0ZWQsXG4gIGlzUmVqZWN0ZWRXaXRoVmFsdWUsXG4gIGxydU1lbW9pemUsXG4gIG1pbmlTZXJpYWxpemVFcnJvcixcbiAgbmFub2lkLFxuICBvcmlnaW5hbDIgYXMgb3JpZ2luYWwsXG4gIHByZXBhcmVBdXRvQmF0Y2hlZCxcbiAgcmVtb3ZlTGlzdGVuZXIsXG4gIHVud3JhcFJlc3VsdCxcbiAgd2Vha01hcE1lbW9pemUyIGFzIHdlYWtNYXBNZW1vaXplXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVkdXgtdG9vbGtpdC5tb2Rlcm4ubWpzLm1hcCIsImltcG9ydCB7IENvbXBhbnkgfSBmcm9tIFwiQHNyYy9lbnRpdGllcy9Db21wYW55XCI7XG5pbXBvcnQgeyBjcmVhdGVTbGljZSwgUGF5bG9hZEFjdGlvbiB9IGZyb20gXCJAcmVkdXhqcy90b29sa2l0XCI7XG5cbmltcG9ydCBkYXRhIGZyb20gXCJAc3JjL2RhdGEvZGF0YWJhc2UuanNvblwiO1xuXG5leHBvcnQgaW50ZXJmYWNlIFRhYmxlU3RhdGUge1xuICBpdGVtczogQ29tcGFueVtdO1xufVxuXG5jb25zdCBpbml0aWFsU3RhdGU6IFRhYmxlU3RhdGUgPSB7XG4gIGl0ZW1zOiBkYXRhLm1hcCgoaXRlbSkgPT4gKHsgLi4uaXRlbSwgY2hlY2tlZDogZmFsc2UgfSkpLFxufTtcblxuZXhwb3J0IGNvbnN0IHRhYmxlU2xpY2UgPSBjcmVhdGVTbGljZSh7XG4gIG5hbWU6IFwidGFibGVcIixcbiAgaW5pdGlhbFN0YXRlLFxuICByZWR1Y2Vyczoge1xuICAgIGFkZEl0ZW06IChcbiAgICAgIHN0YXRlLFxuICAgICAgYWN0aW9uOiBQYXlsb2FkQWN0aW9uPE9taXQ8Q29tcGFueSwgXCJpZFwiIHwgXCJjaGVja2VkXCI+PixcbiAgICApID0+IHtcbiAgICAgIHN0YXRlLml0ZW1zLnB1c2goe1xuICAgICAgICAuLi5hY3Rpb24ucGF5bG9hZCxcbiAgICAgICAgaWQ6IERhdGUubm93KCkudG9TdHJpbmcoKSxcbiAgICAgICAgY2hlY2tlZDogZmFsc2UsXG4gICAgICB9KTtcbiAgICB9LFxuICAgIHJlbW92ZUl0ZW06IChzdGF0ZSwgYWN0aW9uOiBQYXlsb2FkQWN0aW9uPHN0cmluZz4pID0+IHtcbiAgICAgIHN0YXRlLml0ZW1zID0gc3RhdGUuaXRlbXMuZmlsdGVyKChpdGVtKSA9PiBpdGVtLmlkICE9PSBhY3Rpb24ucGF5bG9hZCk7XG4gICAgfSxcbiAgICB0b2dnbGVDaGVja2VkOiAoc3RhdGUsIGFjdGlvbjogUGF5bG9hZEFjdGlvbjxzdHJpbmc+KSA9PiB7XG4gICAgICBzdGF0ZS5pdGVtcyA9IHN0YXRlLml0ZW1zLm1hcCgoaXRlbSkgPT5cbiAgICAgICAgaXRlbS5pZCA9PT0gYWN0aW9uLnBheWxvYWQgPyB7IC4uLml0ZW0sIGNoZWNrZWQ6ICFpdGVtLmNoZWNrZWQgfSA6IGl0ZW0sXG4gICAgICApO1xuICAgIH0sXG4gICAgc2V0Q2hlY2tlZEJ5SWQ6IChcbiAgICAgIHN0YXRlLFxuICAgICAgYWN0aW9uOiBQYXlsb2FkQWN0aW9uPHsgaWQ6IHN0cmluZzsgY2hlY2tlZDogYm9vbGVhbiB9PixcbiAgICApID0+IHtcbiAgICAgIHN0YXRlLml0ZW1zID0gc3RhdGUuaXRlbXMubWFwKChpdGVtKSA9PlxuICAgICAgICBpdGVtLmlkID09PSBhY3Rpb24ucGF5bG9hZC5pZFxuICAgICAgICAgID8geyAuLi5pdGVtLCBjaGVja2VkOiBhY3Rpb24ucGF5bG9hZC5jaGVja2VkIH1cbiAgICAgICAgICA6IGl0ZW0sXG4gICAgICApO1xuICAgIH0sXG4gICAgc2VsZWN0QWxsOiAoc3RhdGUpID0+IHtcbiAgICAgIHN0YXRlLml0ZW1zID0gc3RhdGUuaXRlbXMubWFwKChpdGVtKSA9PiAoeyAuLi5pdGVtLCBjaGVja2VkOiB0cnVlIH0pKTtcbiAgICB9LFxuICAgIHVuc2VsZWN0QWxsOiAoc3RhdGUpID0+IHtcbiAgICAgIHN0YXRlLml0ZW1zID0gc3RhdGUuaXRlbXMubWFwKChpdGVtKSA9PiAoeyAuLi5pdGVtLCBjaGVja2VkOiBmYWxzZSB9KSk7XG4gICAgfSxcbiAgICByZW1vdmVTZWxlY3RlZDogKHN0YXRlKSA9PiB7XG4gICAgICBzdGF0ZS5pdGVtcyA9IHN0YXRlLml0ZW1zLmZpbHRlcigoaXRlbSkgPT4gIWl0ZW0uY2hlY2tlZCk7XG4gICAgfSxcbiAgICBzZXREYXRhOiAoXG4gICAgICBzdGF0ZSxcbiAgICAgIGFjdGlvbjogUGF5bG9hZEFjdGlvbjx7IGlkOiBzdHJpbmcgfSAmIFBhcnRpYWw8Q29tcGFueT4+LFxuICAgICkgPT4ge1xuICAgICAgc3RhdGUuaXRlbXMgPSBzdGF0ZS5pdGVtcy5tYXAoKGl0ZW0pID0+XG4gICAgICAgIGl0ZW0uaWQgPT09IGFjdGlvbi5wYXlsb2FkLmlkID8geyAuLi5pdGVtLCAuLi5hY3Rpb24ucGF5bG9hZCB9IDogaXRlbSxcbiAgICAgICk7XG4gICAgfSxcbiAgfSxcbn0pO1xuXG5leHBvcnQgY29uc3Qge1xuICBhZGRJdGVtLFxuICB0b2dnbGVDaGVja2VkLFxuICByZW1vdmVJdGVtLFxuICBzZWxlY3RBbGwsXG4gIHVuc2VsZWN0QWxsLFxuICByZW1vdmVTZWxlY3RlZCxcbiAgc2V0Q2hlY2tlZEJ5SWQsXG4gIHNldERhdGEsXG59ID0gdGFibGVTbGljZS5hY3Rpb25zO1xuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1szXS51c2VbMV0hLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vQ29tcGFuaWVzVGFibGUubW9kdWxlLnNjc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcbm9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbM10udXNlWzFdIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL0NvbXBhbmllc1RhYmxlLm1vZHVsZS5zY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0IHsgVHlwZWRVc2VTZWxlY3Rvckhvb2ssIHVzZURpc3BhdGNoLCB1c2VTZWxlY3RvciB9IGZyb20gXCJyZWFjdC1yZWR1eFwiO1xuaW1wb3J0IHsgQXBwRGlzcGF0Y2gsIFJvb3RTdGF0ZSB9IGZyb20gXCIuXCI7XG5cbmV4cG9ydCBjb25zdCB1c2VBcHBEaXNwYXRjaCA9ICgpID0+IHVzZURpc3BhdGNoPEFwcERpc3BhdGNoPigpO1xuZXhwb3J0IGNvbnN0IHVzZUFwcFNlbGVjdG9yOiBUeXBlZFVzZVNlbGVjdG9ySG9vazxSb290U3RhdGU+ID0gdXNlU2VsZWN0b3I7XG4iLCJpbXBvcnQgeyBSb290U3RhdGUgfSBmcm9tIFwiQHNyYy9zdG9yZVwiO1xuXG5leHBvcnQgY29uc3QgZ2V0Q29tcGFuaWVzID0gKHN0YXRlOiBSb290U3RhdGUpID0+IHN0YXRlLnRhYmxlLml0ZW1zO1xuXG5leHBvcnQgY29uc3QgZ2V0Q29tcGFueUJ5SWQgPSAoaWQ6IHN0cmluZykgPT4gKHN0YXRlOiBSb290U3RhdGUpID0+XG4gIHN0YXRlLnRhYmxlLml0ZW1zLmZpbmQoKGl0ZW0pID0+IGl0ZW0uaWQgPT09IGlkKTtcblxuZXhwb3J0IGNvbnN0IGdldENvbXBhbnlCeUluZGV4ID0gKGluZGV4OiBudW1iZXIpID0+IChzdGF0ZTogUm9vdFN0YXRlKSA9PlxuICBzdGF0ZS50YWJsZS5pdGVtc1tpbmRleF07XG5cbmV4cG9ydCBjb25zdCBpc0FsbENoZWNrZWQgPSAoc3RhdGU6IFJvb3RTdGF0ZSkgPT5cbiAgc3RhdGUudGFibGUuaXRlbXMubGVuZ3RoICYmIHN0YXRlLnRhYmxlLml0ZW1zLmV2ZXJ5KChpdGVtKSA9PiBpdGVtLmNoZWNrZWQpO1xuXG5leHBvcnQgY29uc3QgaXNBbnlDaGVja2VkID0gKHN0YXRlOiBSb290U3RhdGUpID0+XG4gIHN0YXRlLnRhYmxlLml0ZW1zLmxlbmd0aCAmJiBzdGF0ZS50YWJsZS5pdGVtcy5zb21lKChpdGVtKSA9PiBpdGVtLmNoZWNrZWQpO1xuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1szXS51c2VbMV0hLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vQXBwQnV0dG9uLm1vZHVsZS5zY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5vcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzNdLnVzZVsxXSEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9BcHBCdXR0b24ubW9kdWxlLnNjc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJpbXBvcnQgUmVhY3QsIHsgQnV0dG9uSFRNTEF0dHJpYnV0ZXMgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCAqIGFzIHN0eWxlcyBmcm9tIFwiLi9BcHBCdXR0b24ubW9kdWxlLnNjc3NcIjtcblxuaW50ZXJmYWNlIEFwcEJ1dHRvblByb3BzIGV4dGVuZHMgQnV0dG9uSFRNTEF0dHJpYnV0ZXM8SFRNTEJ1dHRvbkVsZW1lbnQ+IHtcbiAgc2l6ZT86IFwic21hbGxcIiB8IFwibWVkaXVtXCIgfCBcImxhcmdlXCI7XG4gIHZhcmlhbnQ/OiBcInByaW1hcnlcIiB8IFwic2Vjb25kYXJ5XCIgfCBcImRhbmdlclwiO1xufVxuZXhwb3J0IGNvbnN0IEFwcEJ1dHRvbiA9ICh7XG4gIGNoaWxkcmVuLFxuICBjbGFzc05hbWUsXG4gIHNpemUgPSBcIm1lZGl1bVwiLFxuICB2YXJpYW50ID0gXCJwcmltYXJ5XCIsXG4gIC4uLnByb3BzXG59OiBBcHBCdXR0b25Qcm9wcykgPT4ge1xuICBjb25zdCBnZXRTaXplQ2xhc3MgPSAoKSA9PiB7XG4gICAgc3dpdGNoIChzaXplKSB7XG4gICAgICBjYXNlIFwic21hbGxcIjpcbiAgICAgICAgcmV0dXJuIHN0eWxlcy5zbWFsbDtcbiAgICAgIGNhc2UgXCJtZWRpdW1cIjpcbiAgICAgICAgcmV0dXJuIHN0eWxlcy5tZWRpdW07XG4gICAgICBjYXNlIFwibGFyZ2VcIjpcbiAgICAgICAgcmV0dXJuIHN0eWxlcy5sYXJnZTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBcIlwiO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCBnZXRWYXJpYW50Q2xhc3MgPSAoKSA9PiB7XG4gICAgc3dpdGNoICh2YXJpYW50KSB7XG4gICAgICBjYXNlIFwicHJpbWFyeVwiOlxuICAgICAgICByZXR1cm4gc3R5bGVzLnByaW1hcnk7XG4gICAgICBjYXNlIFwic2Vjb25kYXJ5XCI6XG4gICAgICAgIHJldHVybiBzdHlsZXMuc2Vjb25kYXJ5O1xuICAgICAgY2FzZSBcImRhbmdlclwiOlxuICAgICAgICByZXR1cm4gc3R5bGVzLmRhbmdlcjtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBcIlwiO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gKFxuICAgIDxidXR0b25cbiAgICAgIGNsYXNzTmFtZT17XG4gICAgICAgIHN0eWxlcy5idXR0b24gK1xuICAgICAgICBcIiBcIiArXG4gICAgICAgIGNsYXNzTmFtZSArXG4gICAgICAgIFwiIFwiICtcbiAgICAgICAgZ2V0U2l6ZUNsYXNzKCkgK1xuICAgICAgICBcIiBcIiArXG4gICAgICAgIGdldFZhcmlhbnRDbGFzcygpXG4gICAgICB9XG4gICAgICB7Li4ucHJvcHN9XG4gICAgPlxuICAgICAge2NoaWxkcmVufVxuICAgIDwvYnV0dG9uPlxuICApO1xufTtcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbM10udXNlWzFdIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL0FwcFRleHRJbnB1dC5tb2R1bGUuc2Nzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xub3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1szXS51c2VbMV0hLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vQXBwVGV4dElucHV0Lm1vZHVsZS5zY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0IFJlYWN0LCB7IElucHV0SFRNTEF0dHJpYnV0ZXMsIFByb3BzV2l0aENoaWxkcmVuIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgKiBhcyBzdHlsZXMgZnJvbSBcIi4vQXBwVGV4dElucHV0Lm1vZHVsZS5zY3NzXCI7XG5cbmludGVyZmFjZSBBcHBUZXh0SW5wdXRQcm9wc1xuICBleHRlbmRzIE9taXQ8SW5wdXRIVE1MQXR0cmlidXRlczxIVE1MSW5wdXRFbGVtZW50PiwgXCJzaXplXCI+IHtcbiAgc2l6ZT86IFwic21hbGxcIiB8IFwibWVkaXVtXCIgfCBcImxhcmdlXCI7XG59XG5leHBvcnQgY29uc3QgQXBwVGV4dElucHV0ID0gKHtcbiAgY2hpbGRyZW4sXG4gIGNsYXNzTmFtZSxcbiAgc2l6ZSA9IFwibWVkaXVtXCIsXG4gIC4uLnByb3BzXG59OiBBcHBUZXh0SW5wdXRQcm9wcykgPT4ge1xuICBjb25zdCBnZXRTaXplQ2xhc3MgPSAoKSA9PiB7XG4gICAgc3dpdGNoIChzaXplKSB7XG4gICAgICBjYXNlIFwic21hbGxcIjpcbiAgICAgICAgcmV0dXJuIHN0eWxlcy5zbWFsbDtcbiAgICAgIGNhc2UgXCJtZWRpdW1cIjpcbiAgICAgICAgcmV0dXJuIHN0eWxlcy5tZWRpdW07XG4gICAgICBjYXNlIFwibGFyZ2VcIjpcbiAgICAgICAgcmV0dXJuIHN0eWxlcy5sYXJnZTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBcIlwiO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIChcbiAgICA8aW5wdXRcbiAgICAgIHR5cGU9XCJ0ZXh0XCJcbiAgICAgIGNsYXNzTmFtZT17c3R5bGVzLmlucHV0ICsgXCIgXCIgKyBjbGFzc05hbWUgKyBcIiBcIiArIGdldFNpemVDbGFzcygpfVxuICAgICAgey4uLnByb3BzfVxuICAgID5cbiAgICAgIHtjaGlsZHJlbn1cbiAgICA8L2lucHV0PlxuICApO1xufTtcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbM10udXNlWzFdIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL01vZGlmaWFibGVGaWVsZC5tb2R1bGUuc2Nzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xub3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1szXS51c2VbMV0hLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vTW9kaWZpYWJsZUZpZWxkLm1vZHVsZS5zY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0IHsgQXBwQnV0dG9uIH0gZnJvbSBcIkBzcmMvc2hhcmUvdWkvQXBwQnV0dG9uXCI7XG5pbXBvcnQgeyBBcHBUZXh0SW5wdXQgfSBmcm9tIFwiQHNyYy9zaGFyZS91aS9BcHBUZXh0SW5wdXRcIjtcbmltcG9ydCBSZWFjdCwgeyB1c2VFZmZlY3QgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgKiBhcyBzdHlsZXMgZnJvbSBcIi4vTW9kaWZpYWJsZUZpZWxkLm1vZHVsZS5zY3NzXCI7XG5cbmludGVyZmFjZSBNb2RpZmlhYmxlRmllbGRQcm9wcyB7XG4gIHRleHQ6IHN0cmluZztcbiAgb25DaGFuZ2U6ICh0ZXh0OiBzdHJpbmcpID0+IHZvaWQ7XG59XG5cbmV4cG9ydCBjb25zdCBNb2RpZmlhYmxlRmllbGQgPSAoeyB0ZXh0LCBvbkNoYW5nZSB9OiBNb2RpZmlhYmxlRmllbGRQcm9wcykgPT4ge1xuICBjb25zdCBbaXNDaGFuZ2luZywgc2V0SXNDaGFuZ2luZ10gPSB1c2VTdGF0ZShmYWxzZSk7XG4gIGNvbnN0IFtuZXdUZXh0LCBzZXROZXdUZXh0XSA9IHVzZVN0YXRlKHRleHQpO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgc2V0SXNDaGFuZ2luZyhmYWxzZSk7XG4gICAgc2V0TmV3VGV4dCh0ZXh0KTtcbiAgfSwgW3RleHRdKTtcbiAgY29uc3QgaGFuZGxlVGV4dENsaWNrID0gKCkgPT4ge1xuICAgIHNldElzQ2hhbmdpbmcodHJ1ZSk7XG4gIH07XG4gIGNvbnN0IGhhbmRsZVRleHRDaGFuZ2UgPSAoZTogUmVhY3QuQ2hhbmdlRXZlbnQ8SFRNTElucHV0RWxlbWVudD4pID0+IHtcbiAgICBzZXROZXdUZXh0KGUudGFyZ2V0LnZhbHVlKTtcbiAgfTtcbiAgY29uc3QgaGFuZGxlU2F2ZSA9ICgpID0+IHtcbiAgICBvbkNoYW5nZShuZXdUZXh0KTtcbiAgICBzZXRJc0NoYW5naW5nKGZhbHNlKTtcbiAgfTtcbiAgY29uc3QgaGFuZGxlQ2FuY2VsID0gKCkgPT4ge1xuICAgIHNldElzQ2hhbmdpbmcoZmFsc2UpO1xuICAgIHNldE5ld1RleHQodGV4dCk7XG4gIH07XG4gIGlmIChpc0NoYW5naW5nKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMud3JhcHBlcn0+XG4gICAgICAgIDxBcHBUZXh0SW5wdXRcbiAgICAgICAgICBjbGFzc05hbWU9e3N0eWxlcy5jaGlsZH1cbiAgICAgICAgICBzaXplPVwic21hbGxcIlxuICAgICAgICAgIHZhbHVlPXtuZXdUZXh0fVxuICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVUZXh0Q2hhbmdlfVxuICAgICAgICAvPlxuICAgICAgICA8QXBwQnV0dG9uIHNpemU9XCJzbWFsbFwiIGNsYXNzTmFtZT17c3R5bGVzLmNoaWxkfSBvbkNsaWNrPXtoYW5kbGVTYXZlfT5cbiAgICAgICAgICBTYXZlXG4gICAgICAgIDwvQXBwQnV0dG9uPlxuICAgICAgICA8QXBwQnV0dG9uXG4gICAgICAgICAgc2l6ZT1cInNtYWxsXCJcbiAgICAgICAgICB2YXJpYW50PVwiZGFuZ2VyXCJcbiAgICAgICAgICBjbGFzc05hbWU9e3N0eWxlcy5jaGlsZH1cbiAgICAgICAgICBvbkNsaWNrPXtoYW5kbGVDYW5jZWx9XG4gICAgICAgID5cbiAgICAgICAgICBDYW5jZWxcbiAgICAgICAgPC9BcHBCdXR0b24+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG4gIHJldHVybiA8ZGl2IG9uQ2xpY2s9e2hhbmRsZVRleHRDbGlja30+e3RleHR9PC9kaXY+O1xufTtcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbM10udXNlWzFdIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL0NvbXBhbnlSb3cubW9kdWxlLnNjc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcbm9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbM10udXNlWzFdIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL0NvbXBhbnlSb3cubW9kdWxlLnNjc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJpbXBvcnQgUmVhY3QsIHsgbWVtbywgUHJvcHNXaXRoQ2hpbGRyZW4sIHVzZUNhbGxiYWNrLCB1c2VSZWYgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IHVzZURpc3BhdGNoIH0gZnJvbSBcInJlYWN0LXJlZHV4XCI7XG5pbXBvcnQgeyBzZXRDaGVja2VkQnlJZCwgc2V0RGF0YSB9IGZyb20gXCIuLi9tb2RlbC9zbGljZVwiO1xuaW1wb3J0IHsgdXNlQXBwU2VsZWN0b3IgfSBmcm9tIFwiQHNyYy9zdG9yZS9ob29rc1wiO1xuaW1wb3J0IHsgZ2V0Q29tcGFueUJ5SWQgfSBmcm9tIFwiLi4vbW9kZWwvc2VsZWN0b3JzXCI7XG5pbXBvcnQgeyBNb2RpZmlhYmxlRmllbGQgfSBmcm9tIFwiQHNyYy93aWRnZXRzL01vZGlmaWFibGVGaWVsZFwiO1xuaW1wb3J0ICogYXMgc3R5bGVzIGZyb20gXCIuL0NvbXBhbnlSb3cubW9kdWxlLnNjc3NcIjtcblxuaW50ZXJmYWNlIENvbXBhbnlSb3dQcm9wcyB7XG4gIGNvbXBhbnlJZDogc3RyaW5nO1xufVxuXG5leHBvcnQgY29uc3QgQ29tcGFueVJvdyA9IG1lbW8oKHsgY29tcGFueUlkIH06IENvbXBhbnlSb3dQcm9wcykgPT4ge1xuICBjb25zdCBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKCk7XG5cbiAgY29uc3QgY29tcGFueSA9IHVzZUFwcFNlbGVjdG9yKGdldENvbXBhbnlCeUlkKGNvbXBhbnlJZCkpO1xuICBpZiAoIWNvbXBhbnkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYENvbXBhbnkgd2l0aCBpZCAke2NvbXBhbnlJZH0gbm90IGZvdW5kYCk7XG4gIH1cblxuICBjb25zdCBoYW5kbGVDaGVja2JveENoYW5nZSA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICBkaXNwYXRjaChcbiAgICAgIHNldENoZWNrZWRCeUlkKHtcbiAgICAgICAgaWQ6IGNvbXBhbnkuaWQsXG4gICAgICAgIGNoZWNrZWQ6ICFjb21wYW55LmNoZWNrZWQsXG4gICAgICB9KSxcbiAgICApO1xuICB9LCBbY29tcGFueV0pO1xuXG4gIGNvbnN0IGhhbmRsZU5hbWVDaGFuZ2UgPSB1c2VDYWxsYmFjayhcbiAgICAodGV4dDogc3RyaW5nKSA9PiB7XG4gICAgICBkaXNwYXRjaChcbiAgICAgICAgc2V0RGF0YSh7XG4gICAgICAgICAgaWQ6IGNvbXBhbnkuaWQsXG4gICAgICAgICAgbmFtZTogdGV4dCxcbiAgICAgICAgfSksXG4gICAgICApO1xuICAgIH0sXG4gICAgW2NvbXBhbnldLFxuICApO1xuICBjb25zdCBoYW5kbGVBZGRyZXNzQ2hhbmdlID0gdXNlQ2FsbGJhY2soXG4gICAgKHRleHQ6IHN0cmluZykgPT4ge1xuICAgICAgZGlzcGF0Y2goXG4gICAgICAgIHNldERhdGEoe1xuICAgICAgICAgIGlkOiBjb21wYW55LmlkLFxuICAgICAgICAgIGFkZHJlc3M6IHRleHQsXG4gICAgICAgIH0pLFxuICAgICAgKTtcbiAgICB9LFxuICAgIFtjb21wYW55XSxcbiAgKTtcblxuICBjb25zdCBjaGVja2JveFJlZiA9IHVzZVJlZjxIVE1MSW5wdXRFbGVtZW50PihudWxsKTtcbiAgcmV0dXJuIChcbiAgICA8VGFibGVSb3c+XG4gICAgICA8ZGl2IG9uQ2xpY2s9eygpID0+IGNoZWNrYm94UmVmLmN1cnJlbnQ/LmNsaWNrKCl9PlxuICAgICAgICA8aW5wdXRcbiAgICAgICAgICByZWY9e2NoZWNrYm94UmVmfVxuICAgICAgICAgIHR5cGU9XCJjaGVja2JveFwiXG4gICAgICAgICAgY2hlY2tlZD17Y29tcGFueS5jaGVja2VkfVxuICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVDaGVja2JveENoYW5nZX1cbiAgICAgICAgLz5cbiAgICAgIDwvZGl2PlxuICAgICAgPE1vZGlmaWFibGVGaWVsZCB0ZXh0PXtjb21wYW55Lm5hbWV9IG9uQ2hhbmdlPXtoYW5kbGVOYW1lQ2hhbmdlfSAvPlxuICAgICAgPE1vZGlmaWFibGVGaWVsZCB0ZXh0PXtjb21wYW55LmFkZHJlc3N9IG9uQ2hhbmdlPXtoYW5kbGVBZGRyZXNzQ2hhbmdlfSAvPlxuICAgIDwvVGFibGVSb3c+XG4gICk7XG59KTtcblxuZXhwb3J0IGNvbnN0IFRhYmxlUm93ID0gKHsgY2hpbGRyZW4gfTogUHJvcHNXaXRoQ2hpbGRyZW4pID0+IHtcbiAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMudGFibGVfcm93fT57Y2hpbGRyZW59PC9kaXY+O1xufTtcbiIsImZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhhLCBuKSB7XG4gIGlmICghKGEgaW5zdGFuY2VvZiBuKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbn1cbmV4cG9ydCB7IF9jbGFzc0NhbGxDaGVjayBhcyBkZWZhdWx0IH07IiwiZnVuY3Rpb24gX3R5cGVvZihvKSB7XG4gIFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjtcblxuICByZXR1cm4gX3R5cGVvZiA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFwic3ltYm9sXCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA/IGZ1bmN0aW9uIChvKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBvO1xuICB9IDogZnVuY3Rpb24gKG8pIHtcbiAgICByZXR1cm4gbyAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBvLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgbyAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2YgbztcbiAgfSwgX3R5cGVvZihvKTtcbn1cbmV4cG9ydCB7IF90eXBlb2YgYXMgZGVmYXVsdCB9OyIsImltcG9ydCBfdHlwZW9mIGZyb20gXCIuL3R5cGVvZi5qc1wiO1xuaW1wb3J0IHRvUHJpbWl0aXZlIGZyb20gXCIuL3RvUHJpbWl0aXZlLmpzXCI7XG5mdW5jdGlvbiB0b1Byb3BlcnR5S2V5KHQpIHtcbiAgdmFyIGkgPSB0b1ByaW1pdGl2ZSh0LCBcInN0cmluZ1wiKTtcbiAgcmV0dXJuIFwic3ltYm9sXCIgPT0gX3R5cGVvZihpKSA/IGkgOiBpICsgXCJcIjtcbn1cbmV4cG9ydCB7IHRvUHJvcGVydHlLZXkgYXMgZGVmYXVsdCB9OyIsImltcG9ydCBfdHlwZW9mIGZyb20gXCIuL3R5cGVvZi5qc1wiO1xuZnVuY3Rpb24gdG9QcmltaXRpdmUodCwgcikge1xuICBpZiAoXCJvYmplY3RcIiAhPSBfdHlwZW9mKHQpIHx8ICF0KSByZXR1cm4gdDtcbiAgdmFyIGUgPSB0W1N5bWJvbC50b1ByaW1pdGl2ZV07XG4gIGlmICh2b2lkIDAgIT09IGUpIHtcbiAgICB2YXIgaSA9IGUuY2FsbCh0LCByIHx8IFwiZGVmYXVsdFwiKTtcbiAgICBpZiAoXCJvYmplY3RcIiAhPSBfdHlwZW9mKGkpKSByZXR1cm4gaTtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS5cIik7XG4gIH1cbiAgcmV0dXJuIChcInN0cmluZ1wiID09PSByID8gU3RyaW5nIDogTnVtYmVyKSh0KTtcbn1cbmV4cG9ydCB7IHRvUHJpbWl0aXZlIGFzIGRlZmF1bHQgfTsiLCJpbXBvcnQgdG9Qcm9wZXJ0eUtleSBmcm9tIFwiLi90b1Byb3BlcnR5S2V5LmpzXCI7XG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyhlLCByKSB7XG4gIGZvciAodmFyIHQgPSAwOyB0IDwgci5sZW5ndGg7IHQrKykge1xuICAgIHZhciBvID0gclt0XTtcbiAgICBvLmVudW1lcmFibGUgPSBvLmVudW1lcmFibGUgfHwgITEsIG8uY29uZmlndXJhYmxlID0gITAsIFwidmFsdWVcIiBpbiBvICYmIChvLndyaXRhYmxlID0gITApLCBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgdG9Qcm9wZXJ0eUtleShvLmtleSksIG8pO1xuICB9XG59XG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoZSwgciwgdCkge1xuICByZXR1cm4gciAmJiBfZGVmaW5lUHJvcGVydGllcyhlLnByb3RvdHlwZSwgciksIHQgJiYgX2RlZmluZVByb3BlcnRpZXMoZSwgdCksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCBcInByb3RvdHlwZVwiLCB7XG4gICAgd3JpdGFibGU6ICExXG4gIH0pLCBlO1xufVxuZXhwb3J0IHsgX2NyZWF0ZUNsYXNzIGFzIGRlZmF1bHQgfTsiLCJpbXBvcnQgX3R5cGVvZiBmcm9tIFwiLi90eXBlb2YuanNcIjtcbmltcG9ydCBhc3NlcnRUaGlzSW5pdGlhbGl6ZWQgZnJvbSBcIi4vYXNzZXJ0VGhpc0luaXRpYWxpemVkLmpzXCI7XG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0LCBlKSB7XG4gIGlmIChlICYmIChcIm9iamVjdFwiID09IF90eXBlb2YoZSkgfHwgXCJmdW5jdGlvblwiID09IHR5cGVvZiBlKSkgcmV0dXJuIGU7XG4gIGlmICh2b2lkIDAgIT09IGUpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJEZXJpdmVkIGNvbnN0cnVjdG9ycyBtYXkgb25seSByZXR1cm4gb2JqZWN0IG9yIHVuZGVmaW5lZFwiKTtcbiAgcmV0dXJuIGFzc2VydFRoaXNJbml0aWFsaXplZCh0KTtcbn1cbmV4cG9ydCB7IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIGFzIGRlZmF1bHQgfTsiLCJmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKGUpIHtcbiAgaWYgKHZvaWQgMCA9PT0gZSkgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO1xuICByZXR1cm4gZTtcbn1cbmV4cG9ydCB7IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQgYXMgZGVmYXVsdCB9OyIsImZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZih0KSB7XG4gIHJldHVybiBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YuYmluZCgpIDogZnVuY3Rpb24gKHQpIHtcbiAgICByZXR1cm4gdC5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKHQpO1xuICB9LCBfZ2V0UHJvdG90eXBlT2YodCk7XG59XG5leHBvcnQgeyBfZ2V0UHJvdG90eXBlT2YgYXMgZGVmYXVsdCB9OyIsImZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZih0LCBlKSB7XG4gIHJldHVybiBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2YuYmluZCgpIDogZnVuY3Rpb24gKHQsIGUpIHtcbiAgICByZXR1cm4gdC5fX3Byb3RvX18gPSBlLCB0O1xuICB9LCBfc2V0UHJvdG90eXBlT2YodCwgZSk7XG59XG5leHBvcnQgeyBfc2V0UHJvdG90eXBlT2YgYXMgZGVmYXVsdCB9OyIsImltcG9ydCBzZXRQcm90b3R5cGVPZiBmcm9tIFwiLi9zZXRQcm90b3R5cGVPZi5qc1wiO1xuZnVuY3Rpb24gX2luaGVyaXRzKHQsIGUpIHtcbiAgaWYgKFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgZSAmJiBudWxsICE9PSBlKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7XG4gIHQucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShlICYmIGUucHJvdG90eXBlLCB7XG4gICAgY29uc3RydWN0b3I6IHtcbiAgICAgIHZhbHVlOiB0LFxuICAgICAgd3JpdGFibGU6ICEwLFxuICAgICAgY29uZmlndXJhYmxlOiAhMFxuICAgIH1cbiAgfSksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCBcInByb3RvdHlwZVwiLCB7XG4gICAgd3JpdGFibGU6ICExXG4gIH0pLCBlICYmIHNldFByb3RvdHlwZU9mKHQsIGUpO1xufVxuZXhwb3J0IHsgX2luaGVyaXRzIGFzIGRlZmF1bHQgfTsiLCJpbXBvcnQgdG9Qcm9wZXJ0eUtleSBmcm9tIFwiLi90b1Byb3BlcnR5S2V5LmpzXCI7XG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkoZSwgciwgdCkge1xuICByZXR1cm4gKHIgPSB0b1Byb3BlcnR5S2V5KHIpKSBpbiBlID8gT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIHIsIHtcbiAgICB2YWx1ZTogdCxcbiAgICBlbnVtZXJhYmxlOiAhMCxcbiAgICBjb25maWd1cmFibGU6ICEwLFxuICAgIHdyaXRhYmxlOiAhMFxuICB9KSA6IGVbcl0gPSB0LCBlO1xufVxuZXhwb3J0IHsgX2RlZmluZVByb3BlcnR5IGFzIGRlZmF1bHQgfTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgLy8gQ2FsbCB0aGlzLmNvbnN0cnVjdG9yLmdEU0ZQIHRvIHN1cHBvcnQgc3ViLWNsYXNzZXMuXG4gIHZhciBzdGF0ZSA9IHRoaXMuY29uc3RydWN0b3IuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKHRoaXMucHJvcHMsIHRoaXMuc3RhdGUpO1xuICBpZiAoc3RhdGUgIT09IG51bGwgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCkge1xuICAgIHRoaXMuc2V0U3RhdGUoc3RhdGUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gIC8vIENhbGwgdGhpcy5jb25zdHJ1Y3Rvci5nRFNGUCB0byBzdXBwb3J0IHN1Yi1jbGFzc2VzLlxuICAvLyBVc2UgdGhlIHNldFN0YXRlKCkgdXBkYXRlciB0byBlbnN1cmUgc3RhdGUgaXNuJ3Qgc3RhbGUgaW4gY2VydGFpbiBlZGdlIGNhc2VzLlxuICBmdW5jdGlvbiB1cGRhdGVyKHByZXZTdGF0ZSkge1xuICAgIHZhciBzdGF0ZSA9IHRoaXMuY29uc3RydWN0b3IuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKG5leHRQcm9wcywgcHJldlN0YXRlKTtcbiAgICByZXR1cm4gc3RhdGUgIT09IG51bGwgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCA/IHN0YXRlIDogbnVsbDtcbiAgfVxuICAvLyBCaW5kaW5nIFwidGhpc1wiIGlzIGltcG9ydGFudCBmb3Igc2hhbGxvdyByZW5kZXJlciBzdXBwb3J0LlxuICB0aGlzLnNldFN0YXRlKHVwZGF0ZXIuYmluZCh0aGlzKSk7XG59XG5cbmZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVcGRhdGUobmV4dFByb3BzLCBuZXh0U3RhdGUpIHtcbiAgdHJ5IHtcbiAgICB2YXIgcHJldlByb3BzID0gdGhpcy5wcm9wcztcbiAgICB2YXIgcHJldlN0YXRlID0gdGhpcy5zdGF0ZTtcbiAgICB0aGlzLnByb3BzID0gbmV4dFByb3BzO1xuICAgIHRoaXMuc3RhdGUgPSBuZXh0U3RhdGU7XG4gICAgdGhpcy5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEZsYWcgPSB0cnVlO1xuICAgIHRoaXMuX19yZWFjdEludGVybmFsU25hcHNob3QgPSB0aGlzLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKFxuICAgICAgcHJldlByb3BzLFxuICAgICAgcHJldlN0YXRlXG4gICAgKTtcbiAgfSBmaW5hbGx5IHtcbiAgICB0aGlzLnByb3BzID0gcHJldlByb3BzO1xuICAgIHRoaXMuc3RhdGUgPSBwcmV2U3RhdGU7XG4gIH1cbn1cblxuLy8gUmVhY3QgbWF5IHdhcm4gYWJvdXQgY1dNL2NXUlAvY1dVIG1ldGhvZHMgYmVpbmcgZGVwcmVjYXRlZC5cbi8vIEFkZCBhIGZsYWcgdG8gc3VwcHJlc3MgdGhlc2Ugd2FybmluZ3MgZm9yIHRoaXMgc3BlY2lhbCBjYXNlLlxuY29tcG9uZW50V2lsbE1vdW50Ll9fc3VwcHJlc3NEZXByZWNhdGlvbldhcm5pbmcgPSB0cnVlO1xuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcy5fX3N1cHByZXNzRGVwcmVjYXRpb25XYXJuaW5nID0gdHJ1ZTtcbmNvbXBvbmVudFdpbGxVcGRhdGUuX19zdXBwcmVzc0RlcHJlY2F0aW9uV2FybmluZyA9IHRydWU7XG5cbmZ1bmN0aW9uIHBvbHlmaWxsKENvbXBvbmVudCkge1xuICB2YXIgcHJvdG90eXBlID0gQ29tcG9uZW50LnByb3RvdHlwZTtcblxuICBpZiAoIXByb3RvdHlwZSB8fCAhcHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0NhbiBvbmx5IHBvbHlmaWxsIGNsYXNzIGNvbXBvbmVudHMnKTtcbiAgfVxuXG4gIGlmIChcbiAgICB0eXBlb2YgQ29tcG9uZW50LmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyAhPT0gJ2Z1bmN0aW9uJyAmJlxuICAgIHR5cGVvZiBwcm90b3R5cGUuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUgIT09ICdmdW5jdGlvbidcbiAgKSB7XG4gICAgcmV0dXJuIENvbXBvbmVudDtcbiAgfVxuXG4gIC8vIElmIG5ldyBjb21wb25lbnQgQVBJcyBhcmUgZGVmaW5lZCwgXCJ1bnNhZmVcIiBsaWZlY3ljbGVzIHdvbid0IGJlIGNhbGxlZC5cbiAgLy8gRXJyb3IgaWYgYW55IG9mIHRoZXNlIGxpZmVjeWNsZXMgYXJlIHByZXNlbnQsXG4gIC8vIEJlY2F1c2UgdGhleSB3b3VsZCB3b3JrIGRpZmZlcmVudGx5IGJldHdlZW4gb2xkZXIgYW5kIG5ld2VyICgxNi4zKykgdmVyc2lvbnMgb2YgUmVhY3QuXG4gIHZhciBmb3VuZFdpbGxNb3VudE5hbWUgPSBudWxsO1xuICB2YXIgZm91bmRXaWxsUmVjZWl2ZVByb3BzTmFtZSA9IG51bGw7XG4gIHZhciBmb3VuZFdpbGxVcGRhdGVOYW1lID0gbnVsbDtcbiAgaWYgKHR5cGVvZiBwcm90b3R5cGUuY29tcG9uZW50V2lsbE1vdW50ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgZm91bmRXaWxsTW91bnROYW1lID0gJ2NvbXBvbmVudFdpbGxNb3VudCc7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHByb3RvdHlwZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgZm91bmRXaWxsTW91bnROYW1lID0gJ1VOU0FGRV9jb21wb25lbnRXaWxsTW91bnQnO1xuICB9XG4gIGlmICh0eXBlb2YgcHJvdG90eXBlLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICBmb3VuZFdpbGxSZWNlaXZlUHJvcHNOYW1lID0gJ2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMnO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBwcm90b3R5cGUuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICBmb3VuZFdpbGxSZWNlaXZlUHJvcHNOYW1lID0gJ1VOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJztcbiAgfVxuICBpZiAodHlwZW9mIHByb3RvdHlwZS5jb21wb25lbnRXaWxsVXBkYXRlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgZm91bmRXaWxsVXBkYXRlTmFtZSA9ICdjb21wb25lbnRXaWxsVXBkYXRlJztcbiAgfSBlbHNlIGlmICh0eXBlb2YgcHJvdG90eXBlLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgZm91bmRXaWxsVXBkYXRlTmFtZSA9ICdVTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSc7XG4gIH1cbiAgaWYgKFxuICAgIGZvdW5kV2lsbE1vdW50TmFtZSAhPT0gbnVsbCB8fFxuICAgIGZvdW5kV2lsbFJlY2VpdmVQcm9wc05hbWUgIT09IG51bGwgfHxcbiAgICBmb3VuZFdpbGxVcGRhdGVOYW1lICE9PSBudWxsXG4gICkge1xuICAgIHZhciBjb21wb25lbnROYW1lID0gQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IENvbXBvbmVudC5uYW1lO1xuICAgIHZhciBuZXdBcGlOYW1lID1cbiAgICAgIHR5cGVvZiBDb21wb25lbnQuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzID09PSAnZnVuY3Rpb24nXG4gICAgICAgID8gJ2dldERlcml2ZWRTdGF0ZUZyb21Qcm9wcygpJ1xuICAgICAgICA6ICdnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSgpJztcblxuICAgIHRocm93IEVycm9yKFxuICAgICAgJ1Vuc2FmZSBsZWdhY3kgbGlmZWN5Y2xlcyB3aWxsIG5vdCBiZSBjYWxsZWQgZm9yIGNvbXBvbmVudHMgdXNpbmcgbmV3IGNvbXBvbmVudCBBUElzLlxcblxcbicgK1xuICAgICAgICBjb21wb25lbnROYW1lICtcbiAgICAgICAgJyB1c2VzICcgK1xuICAgICAgICBuZXdBcGlOYW1lICtcbiAgICAgICAgJyBidXQgYWxzbyBjb250YWlucyB0aGUgZm9sbG93aW5nIGxlZ2FjeSBsaWZlY3ljbGVzOicgK1xuICAgICAgICAoZm91bmRXaWxsTW91bnROYW1lICE9PSBudWxsID8gJ1xcbiAgJyArIGZvdW5kV2lsbE1vdW50TmFtZSA6ICcnKSArXG4gICAgICAgIChmb3VuZFdpbGxSZWNlaXZlUHJvcHNOYW1lICE9PSBudWxsXG4gICAgICAgICAgPyAnXFxuICAnICsgZm91bmRXaWxsUmVjZWl2ZVByb3BzTmFtZVxuICAgICAgICAgIDogJycpICtcbiAgICAgICAgKGZvdW5kV2lsbFVwZGF0ZU5hbWUgIT09IG51bGwgPyAnXFxuICAnICsgZm91bmRXaWxsVXBkYXRlTmFtZSA6ICcnKSArXG4gICAgICAgICdcXG5cXG5UaGUgYWJvdmUgbGlmZWN5Y2xlcyBzaG91bGQgYmUgcmVtb3ZlZC4gTGVhcm4gbW9yZSBhYm91dCB0aGlzIHdhcm5pbmcgaGVyZTpcXG4nICtcbiAgICAgICAgJ2h0dHBzOi8vZmIubWUvcmVhY3QtYXN5bmMtY29tcG9uZW50LWxpZmVjeWNsZS1ob29rcydcbiAgICApO1xuICB9XG5cbiAgLy8gUmVhY3QgPD0gMTYuMiBkb2VzIG5vdCBzdXBwb3J0IHN0YXRpYyBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMuXG4gIC8vIEFzIGEgd29ya2Fyb3VuZCwgdXNlIGNXTSBhbmQgY1dSUCB0byBpbnZva2UgdGhlIG5ldyBzdGF0aWMgbGlmZWN5Y2xlLlxuICAvLyBOZXdlciB2ZXJzaW9ucyBvZiBSZWFjdCB3aWxsIGlnbm9yZSB0aGVzZSBsaWZlY3ljbGVzIGlmIGdEU0ZQIGV4aXN0cy5cbiAgaWYgKHR5cGVvZiBDb21wb25lbnQuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcHJvdG90eXBlLmNvbXBvbmVudFdpbGxNb3VudCA9IGNvbXBvbmVudFdpbGxNb3VudDtcbiAgICBwcm90b3R5cGUuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHM7XG4gIH1cblxuICAvLyBSZWFjdCA8PSAxNi4yIGRvZXMgbm90IHN1cHBvcnQgZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUuXG4gIC8vIEFzIGEgd29ya2Fyb3VuZCwgdXNlIGNXVSB0byBpbnZva2UgdGhlIG5ldyBsaWZlY3ljbGUuXG4gIC8vIE5ld2VyIHZlcnNpb25zIG9mIFJlYWN0IHdpbGwgaWdub3JlIHRoYXQgbGlmZWN5Y2xlIGlmIGdTQlUgZXhpc3RzLlxuICBpZiAodHlwZW9mIHByb3RvdHlwZS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGlmICh0eXBlb2YgcHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnQ2Fubm90IHBvbHlmaWxsIGdldFNuYXBzaG90QmVmb3JlVXBkYXRlKCkgZm9yIGNvbXBvbmVudHMgdGhhdCBkbyBub3QgZGVmaW5lIGNvbXBvbmVudERpZFVwZGF0ZSgpIG9uIHRoZSBwcm90b3R5cGUnXG4gICAgICApO1xuICAgIH1cblxuICAgIHByb3RvdHlwZS5jb21wb25lbnRXaWxsVXBkYXRlID0gY29tcG9uZW50V2lsbFVwZGF0ZTtcblxuICAgIHZhciBjb21wb25lbnREaWRVcGRhdGUgPSBwcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlO1xuXG4gICAgcHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZVBvbHlmaWxsKFxuICAgICAgcHJldlByb3BzLFxuICAgICAgcHJldlN0YXRlLFxuICAgICAgbWF5YmVTbmFwc2hvdFxuICAgICkge1xuICAgICAgLy8gMTYuMysgd2lsbCBub3QgZXhlY3V0ZSBvdXIgd2lsbC11cGRhdGUgbWV0aG9kO1xuICAgICAgLy8gSXQgd2lsbCBwYXNzIGEgc25hcHNob3QgdmFsdWUgdG8gZGlkLXVwZGF0ZSB0aG91Z2guXG4gICAgICAvLyBPbGRlciB2ZXJzaW9ucyB3aWxsIHJlcXVpcmUgb3VyIHBvbHlmaWxsZWQgd2lsbC11cGRhdGUgdmFsdWUuXG4gICAgICAvLyBXZSBuZWVkIHRvIGhhbmRsZSBib3RoIGNhc2VzLCBidXQgY2FuJ3QganVzdCBjaGVjayBmb3IgdGhlIHByZXNlbmNlIG9mIFwibWF5YmVTbmFwc2hvdFwiLFxuICAgICAgLy8gQmVjYXVzZSBmb3IgPD0gMTUueCB2ZXJzaW9ucyB0aGlzIG1pZ2h0IGJlIGEgXCJwcmV2Q29udGV4dFwiIG9iamVjdC5cbiAgICAgIC8vIFdlIGFsc28gY2FuJ3QganVzdCBjaGVjayBcIl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90XCIsXG4gICAgICAvLyBCZWNhdXNlIGdldC1zbmFwc2hvdCBtaWdodCByZXR1cm4gYSBmYWxzeSB2YWx1ZS5cbiAgICAgIC8vIFNvIGNoZWNrIGZvciB0aGUgZXhwbGljaXQgX19yZWFjdEludGVybmFsU25hcHNob3RGbGFnIGZsYWcgdG8gZGV0ZXJtaW5lIGJlaGF2aW9yLlxuICAgICAgdmFyIHNuYXBzaG90ID0gdGhpcy5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEZsYWdcbiAgICAgICAgPyB0aGlzLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90XG4gICAgICAgIDogbWF5YmVTbmFwc2hvdDtcblxuICAgICAgY29tcG9uZW50RGlkVXBkYXRlLmNhbGwodGhpcywgcHJldlByb3BzLCBwcmV2U3RhdGUsIHNuYXBzaG90KTtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIENvbXBvbmVudDtcbn1cblxuZXhwb3J0IHsgcG9seWZpbGwgfTtcbiIsImltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIjtcbmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3NcIjtcbmltcG9ydCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCI7XG5pbXBvcnQgX2dldFByb3RvdHlwZU9mIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mXCI7XG5pbXBvcnQgX2luaGVyaXRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCI7XG5pbXBvcnQgX2RlZmluZVByb3BlcnR5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5XCI7XG5mdW5jdGlvbiBvd25LZXlzKGUsIHIpIHsgdmFyIHQgPSBPYmplY3Qua2V5cyhlKTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIG8gPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKGUpOyByICYmIChvID0gby5maWx0ZXIoZnVuY3Rpb24gKHIpIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZSwgcikuZW51bWVyYWJsZTsgfSkpLCB0LnB1c2guYXBwbHkodCwgbyk7IH0gcmV0dXJuIHQ7IH1cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQoZSkgeyBmb3IgKHZhciByID0gMTsgciA8IGFyZ3VtZW50cy5sZW5ndGg7IHIrKykgeyB2YXIgdCA9IG51bGwgIT0gYXJndW1lbnRzW3JdID8gYXJndW1lbnRzW3JdIDoge307IHIgJSAyID8gb3duS2V5cyhPYmplY3QodCksICEwKS5mb3JFYWNoKGZ1bmN0aW9uIChyKSB7IF9kZWZpbmVQcm9wZXJ0eShlLCByLCB0W3JdKTsgfSkgOiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGUsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHQpKSA6IG93bktleXMoT2JqZWN0KHQpKS5mb3JFYWNoKGZ1bmN0aW9uIChyKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCByLCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHQsIHIpKTsgfSk7IH0gcmV0dXJuIGU7IH1cbmZ1bmN0aW9uIF9jYWxsU3VwZXIodCwgbywgZSkgeyByZXR1cm4gbyA9IF9nZXRQcm90b3R5cGVPZihvKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odCwgX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpID8gUmVmbGVjdC5jb25zdHJ1Y3QobywgZSB8fCBbXSwgX2dldFByb3RvdHlwZU9mKHQpLmNvbnN0cnVjdG9yKSA6IG8uYXBwbHkodCwgZSkpOyB9XG5mdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyB0cnkgeyB2YXIgdCA9ICFCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbiwgW10sIGZ1bmN0aW9uICgpIHt9KSk7IH0gY2F0Y2ggKHQpIHt9IHJldHVybiAoX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCA9IGZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IHJldHVybiAhIXQ7IH0pKCk7IH1cbi8qOjogaW1wb3J0IHR5cGUge1JlbmRlcmVkU2VjdGlvbn0gZnJvbSAnLi4vR3JpZCc7Ki9cbi8qOjogaW1wb3J0IHR5cGUge1Njcm9sbEluZGljZXN9IGZyb20gJy4vdHlwZXMnOyovXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBwb2x5ZmlsbCB9IGZyb20gJ3JlYWN0LWxpZmVjeWNsZXMtY29tcGF0JztcblxuLyoqXG4gKiBUaGlzIEhPQyBkZWNvcmF0ZXMgYSB2aXJ0dWFsaXplZCBjb21wb25lbnQgYW5kIHJlc3BvbmRzIHRvIGFycm93LWtleSBldmVudHMgYnkgc2Nyb2xsaW5nIG9uZSByb3cgb3IgY29sdW1uIGF0IGEgdGltZS5cbiAqL1xuLyo6OiB0eXBlIENoaWxkcmVuUGFyYW1zID0ge1xuICBvblNlY3Rpb25SZW5kZXJlZDogKHBhcmFtczogUmVuZGVyZWRTZWN0aW9uKSA9PiB2b2lkLFxuICBzY3JvbGxUb0NvbHVtbjogbnVtYmVyLFxuICBzY3JvbGxUb1JvdzogbnVtYmVyLFxufTsqL1xuLyo6OiB0eXBlIFByb3BzID0ge1xuICBjaGlsZHJlbjogKHBhcmFtczogQ2hpbGRyZW5QYXJhbXMpID0+IFJlYWN0LkVsZW1lbnQ8Kj4sXG4gIGNsYXNzTmFtZT86IHN0cmluZyxcbiAgY29sdW1uQ291bnQ6IG51bWJlcixcbiAgZGlzYWJsZWQ6IGJvb2xlYW4sXG4gIGlzQ29udHJvbGxlZDogYm9vbGVhbixcbiAgbW9kZTogJ2NlbGxzJyB8ICdlZGdlcycsXG4gIG9uU2Nyb2xsVG9DaGFuZ2U/OiAocGFyYW1zOiBTY3JvbGxJbmRpY2VzKSA9PiB2b2lkLFxuICByb3dDb3VudDogbnVtYmVyLFxuICBzY3JvbGxUb0NvbHVtbjogbnVtYmVyLFxuICBzY3JvbGxUb1JvdzogbnVtYmVyLFxufTsqL1xuLyo6OiB0eXBlIFN0YXRlID0gU2Nyb2xsSW5kaWNlcyAmIHtcbiAgaW5zdGFuY2VQcm9wczoge1xuICAgIHByZXZTY3JvbGxUb0NvbHVtbjogbnVtYmVyLFxuICAgIHByZXZTY3JvbGxUb1JvdzogbnVtYmVyLFxuICB9LFxufTsqL1xudmFyIEFycm93S2V5U3RlcHBlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1JlYWN0JFB1cmVDb21wb25lbnQpIHtcbiAgZnVuY3Rpb24gQXJyb3dLZXlTdGVwcGVyKCkge1xuICAgIHZhciBfdGhpcztcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQXJyb3dLZXlTdGVwcGVyKTtcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuICAgIF90aGlzID0gX2NhbGxTdXBlcih0aGlzLCBBcnJvd0tleVN0ZXBwZXIsIFtdLmNvbmNhdChhcmdzKSk7XG4gICAgX2RlZmluZVByb3BlcnR5KF90aGlzLCBcInN0YXRlXCIsIHtcbiAgICAgIHNjcm9sbFRvQ29sdW1uOiAwLFxuICAgICAgc2Nyb2xsVG9Sb3c6IDAsXG4gICAgICBpbnN0YW5jZVByb3BzOiB7XG4gICAgICAgIHByZXZTY3JvbGxUb0NvbHVtbjogMCxcbiAgICAgICAgcHJldlNjcm9sbFRvUm93OiAwXG4gICAgICB9XG4gICAgfSk7XG4gICAgX2RlZmluZVByb3BlcnR5KF90aGlzLCBcIl9jb2x1bW5TdGFydEluZGV4XCIsIDApO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJfY29sdW1uU3RvcEluZGV4XCIsIDApO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJfcm93U3RhcnRJbmRleFwiLCAwKTtcbiAgICBfZGVmaW5lUHJvcGVydHkoX3RoaXMsIFwiX3Jvd1N0b3BJbmRleFwiLCAwKTtcbiAgICBfZGVmaW5lUHJvcGVydHkoX3RoaXMsIFwiX29uS2V5RG93blwiLCBmdW5jdGlvbiAoZXZlbnQgLyo6IEtleWJvYXJkRXZlbnQqLykge1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMsXG4gICAgICAgIGNvbHVtbkNvdW50ID0gX3RoaXMkcHJvcHMuY29sdW1uQ291bnQsXG4gICAgICAgIGRpc2FibGVkID0gX3RoaXMkcHJvcHMuZGlzYWJsZWQsXG4gICAgICAgIG1vZGUgPSBfdGhpcyRwcm9wcy5tb2RlLFxuICAgICAgICByb3dDb3VudCA9IF90aGlzJHByb3BzLnJvd0NvdW50O1xuICAgICAgaWYgKGRpc2FibGVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciBfdGhpcyRfZ2V0U2Nyb2xsU3RhdGUgPSBfdGhpcy5fZ2V0U2Nyb2xsU3RhdGUoKSxcbiAgICAgICAgc2Nyb2xsVG9Db2x1bW5QcmV2aW91cyA9IF90aGlzJF9nZXRTY3JvbGxTdGF0ZS5zY3JvbGxUb0NvbHVtbixcbiAgICAgICAgc2Nyb2xsVG9Sb3dQcmV2aW91cyA9IF90aGlzJF9nZXRTY3JvbGxTdGF0ZS5zY3JvbGxUb1JvdztcbiAgICAgIHZhciBfdGhpcyRfZ2V0U2Nyb2xsU3RhdGUyID0gX3RoaXMuX2dldFNjcm9sbFN0YXRlKCksXG4gICAgICAgIHNjcm9sbFRvQ29sdW1uID0gX3RoaXMkX2dldFNjcm9sbFN0YXRlMi5zY3JvbGxUb0NvbHVtbixcbiAgICAgICAgc2Nyb2xsVG9Sb3cgPSBfdGhpcyRfZ2V0U2Nyb2xsU3RhdGUyLnNjcm9sbFRvUm93O1xuXG4gICAgICAvLyBUaGUgYWJvdmUgY2FzZXMgYWxsIHByZXZlbnQgZGVmYXVsdCBldmVudCBldmVudCBiZWhhdmlvci5cbiAgICAgIC8vIFRoaXMgaXMgdG8ga2VlcCB0aGUgZ3JpZCBmcm9tIHNjcm9sbGluZyBhZnRlciB0aGUgc25hcC10byB1cGRhdGUuXG4gICAgICBzd2l0Y2ggKGV2ZW50LmtleSkge1xuICAgICAgICBjYXNlICdBcnJvd0Rvd24nOlxuICAgICAgICAgIHNjcm9sbFRvUm93ID0gbW9kZSA9PT0gJ2NlbGxzJyA/IE1hdGgubWluKHNjcm9sbFRvUm93ICsgMSwgcm93Q291bnQgLSAxKSA6IE1hdGgubWluKF90aGlzLl9yb3dTdG9wSW5kZXggKyAxLCByb3dDb3VudCAtIDEpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdBcnJvd0xlZnQnOlxuICAgICAgICAgIHNjcm9sbFRvQ29sdW1uID0gbW9kZSA9PT0gJ2NlbGxzJyA/IE1hdGgubWF4KHNjcm9sbFRvQ29sdW1uIC0gMSwgMCkgOiBNYXRoLm1heChfdGhpcy5fY29sdW1uU3RhcnRJbmRleCAtIDEsIDApO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdBcnJvd1JpZ2h0JzpcbiAgICAgICAgICBzY3JvbGxUb0NvbHVtbiA9IG1vZGUgPT09ICdjZWxscycgPyBNYXRoLm1pbihzY3JvbGxUb0NvbHVtbiArIDEsIGNvbHVtbkNvdW50IC0gMSkgOiBNYXRoLm1pbihfdGhpcy5fY29sdW1uU3RvcEluZGV4ICsgMSwgY29sdW1uQ291bnQgLSAxKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnQXJyb3dVcCc6XG4gICAgICAgICAgc2Nyb2xsVG9Sb3cgPSBtb2RlID09PSAnY2VsbHMnID8gTWF0aC5tYXgoc2Nyb2xsVG9Sb3cgLSAxLCAwKSA6IE1hdGgubWF4KF90aGlzLl9yb3dTdGFydEluZGV4IC0gMSwgMCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBpZiAoc2Nyb2xsVG9Db2x1bW4gIT09IHNjcm9sbFRvQ29sdW1uUHJldmlvdXMgfHwgc2Nyb2xsVG9Sb3cgIT09IHNjcm9sbFRvUm93UHJldmlvdXMpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgX3RoaXMuX3VwZGF0ZVNjcm9sbFN0YXRlKHtcbiAgICAgICAgICBzY3JvbGxUb0NvbHVtbjogc2Nyb2xsVG9Db2x1bW4sXG4gICAgICAgICAgc2Nyb2xsVG9Sb3c6IHNjcm9sbFRvUm93XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJfb25TZWN0aW9uUmVuZGVyZWRcIiwgZnVuY3Rpb24gKF9yZWYgLyo6OiAqLykge1xuICAgICAgdmFyIGNvbHVtblN0YXJ0SW5kZXggPSBfcmVmIC8qOjogKi8uY29sdW1uU3RhcnRJbmRleCxcbiAgICAgICAgY29sdW1uU3RvcEluZGV4ID0gX3JlZiAvKjo6ICovLmNvbHVtblN0b3BJbmRleCxcbiAgICAgICAgcm93U3RhcnRJbmRleCA9IF9yZWYgLyo6OiAqLy5yb3dTdGFydEluZGV4LFxuICAgICAgICByb3dTdG9wSW5kZXggPSBfcmVmIC8qOjogKi8ucm93U3RvcEluZGV4O1xuICAgICAgX3RoaXMuX2NvbHVtblN0YXJ0SW5kZXggPSBjb2x1bW5TdGFydEluZGV4O1xuICAgICAgX3RoaXMuX2NvbHVtblN0b3BJbmRleCA9IGNvbHVtblN0b3BJbmRleDtcbiAgICAgIF90aGlzLl9yb3dTdGFydEluZGV4ID0gcm93U3RhcnRJbmRleDtcbiAgICAgIF90aGlzLl9yb3dTdG9wSW5kZXggPSByb3dTdG9wSW5kZXg7XG4gICAgfSk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG4gIF9pbmhlcml0cyhBcnJvd0tleVN0ZXBwZXIsIF9SZWFjdCRQdXJlQ29tcG9uZW50KTtcbiAgcmV0dXJuIF9jcmVhdGVDbGFzcyhBcnJvd0tleVN0ZXBwZXIsIFt7XG4gICAga2V5OiBcInNldFNjcm9sbEluZGV4ZXNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0U2Nyb2xsSW5kZXhlcyhfcmVmMiAvKjo6ICovKSB7XG4gICAgICB2YXIgc2Nyb2xsVG9Db2x1bW4gPSBfcmVmMiAvKjo6ICovLnNjcm9sbFRvQ29sdW1uLFxuICAgICAgICBzY3JvbGxUb1JvdyA9IF9yZWYyIC8qOjogKi8uc2Nyb2xsVG9Sb3c7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgc2Nyb2xsVG9Sb3c6IHNjcm9sbFRvUm93LFxuICAgICAgICBzY3JvbGxUb0NvbHVtbjogc2Nyb2xsVG9Db2x1bW5cbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzMiA9IHRoaXMucHJvcHMsXG4gICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJHByb3BzMi5jbGFzc05hbWUsXG4gICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHMyLmNoaWxkcmVuO1xuICAgICAgdmFyIF90aGlzJF9nZXRTY3JvbGxTdGF0ZTMgPSB0aGlzLl9nZXRTY3JvbGxTdGF0ZSgpLFxuICAgICAgICBzY3JvbGxUb0NvbHVtbiA9IF90aGlzJF9nZXRTY3JvbGxTdGF0ZTMuc2Nyb2xsVG9Db2x1bW4sXG4gICAgICAgIHNjcm9sbFRvUm93ID0gX3RoaXMkX2dldFNjcm9sbFN0YXRlMy5zY3JvbGxUb1JvdztcbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lLFxuICAgICAgICBvbktleURvd246IHRoaXMuX29uS2V5RG93blxuICAgICAgfSwgY2hpbGRyZW4oe1xuICAgICAgICBvblNlY3Rpb25SZW5kZXJlZDogdGhpcy5fb25TZWN0aW9uUmVuZGVyZWQsXG4gICAgICAgIHNjcm9sbFRvQ29sdW1uOiBzY3JvbGxUb0NvbHVtbixcbiAgICAgICAgc2Nyb2xsVG9Sb3c6IHNjcm9sbFRvUm93XG4gICAgICB9KSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIl9nZXRTY3JvbGxTdGF0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZ2V0U2Nyb2xsU3RhdGUoKSB7XG4gICAgICByZXR1cm4gdGhpcy5wcm9wcy5pc0NvbnRyb2xsZWQgPyB0aGlzLnByb3BzIDogdGhpcy5zdGF0ZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiX3VwZGF0ZVNjcm9sbFN0YXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF91cGRhdGVTY3JvbGxTdGF0ZShfcmVmMyAvKjo6ICovKSB7XG4gICAgICB2YXIgc2Nyb2xsVG9Db2x1bW4gPSBfcmVmMyAvKjo6ICovLnNjcm9sbFRvQ29sdW1uLFxuICAgICAgICBzY3JvbGxUb1JvdyA9IF9yZWYzIC8qOjogKi8uc2Nyb2xsVG9Sb3c7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgaXNDb250cm9sbGVkID0gX3RoaXMkcHJvcHMzLmlzQ29udHJvbGxlZCxcbiAgICAgICAgb25TY3JvbGxUb0NoYW5nZSA9IF90aGlzJHByb3BzMy5vblNjcm9sbFRvQ2hhbmdlO1xuICAgICAgaWYgKHR5cGVvZiBvblNjcm9sbFRvQ2hhbmdlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIG9uU2Nyb2xsVG9DaGFuZ2Uoe1xuICAgICAgICAgIHNjcm9sbFRvQ29sdW1uOiBzY3JvbGxUb0NvbHVtbixcbiAgICAgICAgICBzY3JvbGxUb1Jvdzogc2Nyb2xsVG9Sb3dcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBpZiAoIWlzQ29udHJvbGxlZCkge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBzY3JvbGxUb0NvbHVtbjogc2Nyb2xsVG9Db2x1bW4sXG4gICAgICAgICAgc2Nyb2xsVG9Sb3c6IHNjcm9sbFRvUm93XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfV0sIFt7XG4gICAga2V5OiBcImdldERlcml2ZWRTdGF0ZUZyb21Qcm9wc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMobmV4dFByb3BzIC8qOiBQcm9wcyovLCBwcmV2U3RhdGUgLyo6IFN0YXRlKi8pIC8qOiAkU2hhcGU8U3RhdGU+Ki97XG4gICAgICBpZiAobmV4dFByb3BzLmlzQ29udHJvbGxlZCkge1xuICAgICAgICByZXR1cm4ge307XG4gICAgICB9XG4gICAgICBpZiAobmV4dFByb3BzLnNjcm9sbFRvQ29sdW1uICE9PSBwcmV2U3RhdGUuaW5zdGFuY2VQcm9wcy5wcmV2U2Nyb2xsVG9Db2x1bW4gfHwgbmV4dFByb3BzLnNjcm9sbFRvUm93ICE9PSBwcmV2U3RhdGUuaW5zdGFuY2VQcm9wcy5wcmV2U2Nyb2xsVG9Sb3cpIHtcbiAgICAgICAgcmV0dXJuIF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgcHJldlN0YXRlKSwge30sIHtcbiAgICAgICAgICBzY3JvbGxUb0NvbHVtbjogbmV4dFByb3BzLnNjcm9sbFRvQ29sdW1uLFxuICAgICAgICAgIHNjcm9sbFRvUm93OiBuZXh0UHJvcHMuc2Nyb2xsVG9Sb3csXG4gICAgICAgICAgaW5zdGFuY2VQcm9wczoge1xuICAgICAgICAgICAgcHJldlNjcm9sbFRvQ29sdW1uOiBuZXh0UHJvcHMuc2Nyb2xsVG9Db2x1bW4sXG4gICAgICAgICAgICBwcmV2U2Nyb2xsVG9Sb3c6IG5leHRQcm9wcy5zY3JvbGxUb1Jvd1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICByZXR1cm4ge307XG4gICAgfVxuICB9XSk7XG59KFJlYWN0LlB1cmVDb21wb25lbnQpO1xuX2RlZmluZVByb3BlcnR5KEFycm93S2V5U3RlcHBlciwgXCJkZWZhdWx0UHJvcHNcIiwge1xuICBkaXNhYmxlZDogZmFsc2UsXG4gIGlzQ29udHJvbGxlZDogZmFsc2UsXG4gIG1vZGU6ICdlZGdlcycsXG4gIHNjcm9sbFRvQ29sdW1uOiAwLFxuICBzY3JvbGxUb1JvdzogMFxufSk7XG5wb2x5ZmlsbChBcnJvd0tleVN0ZXBwZXIpO1xuZXhwb3J0IGRlZmF1bHQgQXJyb3dLZXlTdGVwcGVyOyIsIi8qKlxuICogRGV0ZWN0IEVsZW1lbnQgUmVzaXplLlxuICogaHR0cHM6Ly9naXRodWIuY29tL3NkZWNpbWEvamF2YXNjcmlwdC1kZXRlY3QtZWxlbWVudC1yZXNpemVcbiAqIFNlYmFzdGlhbiBEZWNpbWFcbiAqXG4gKiBGb3JrZWQgZnJvbSB2ZXJzaW9uIDAuNS4zOyBpbmNsdWRlcyB0aGUgZm9sbG93aW5nIG1vZGlmaWNhdGlvbnM6XG4gKiAxKcKgR3VhcmQgYWdhaW5zdCB1bnNhZmUgJ3dpbmRvdycgYW5kICdkb2N1bWVudCcgcmVmZXJlbmNlcyAodG8gc3VwcG9ydCBTU1IpLlxuICogMinCoERlZmVyIGluaXRpYWxpemF0aW9uIGNvZGUgdmlhIGEgdG9wLWxldmVsIGZ1bmN0aW9uIHdyYXBwZXIgKHRvIHN1cHBvcnQgU1NSKS5cbiAqIDMpIEF2b2lkIHVubmVjZXNzYXJ5IHJlZmxvd3MgYnkgbm90IG1lYXN1cmluZyBzaXplIGZvciBzY3JvbGwgZXZlbnRzIGJ1YmJsaW5nIGZyb20gY2hpbGRyZW4uXG4gKiA0KSBBZGQgbm9uY2UgZm9yIHN0eWxlIGVsZW1lbnQuXG4gKiA1KSBBZGRlZCBzdXBwb3J0IGZvciBpbmplY3RpbmcgY3VzdG9tIHdpbmRvdyBvYmplY3RcbiAqKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlRGV0ZWN0RWxlbWVudFJlc2l6ZShub25jZSwgaG9zdFdpbmRvdykge1xuICAvLyBDaGVjayBgZG9jdW1lbnRgIGFuZCBgd2luZG93YCBpbiBjYXNlIG9mIHNlcnZlci1zaWRlIHJlbmRlcmluZ1xuICB2YXIgX3dpbmRvdztcbiAgaWYgKHR5cGVvZiBob3N0V2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAgIF93aW5kb3cgPSBob3N0V2luZG93O1xuICB9IGVsc2UgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgX3dpbmRvdyA9IHdpbmRvdztcbiAgfSBlbHNlIGlmICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBfd2luZG93ID0gc2VsZjtcbiAgfSBlbHNlIHtcbiAgICBfd2luZG93ID0gZ2xvYmFsO1xuICB9XG4gIHZhciBhdHRhY2hFdmVudCA9IHR5cGVvZiBfd2luZG93LmRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyAmJiBfd2luZG93LmRvY3VtZW50LmF0dGFjaEV2ZW50O1xuICBpZiAoIWF0dGFjaEV2ZW50KSB7XG4gICAgdmFyIHJlcXVlc3RGcmFtZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciByYWYgPSBfd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSB8fCBfd2luZG93Lm1velJlcXVlc3RBbmltYXRpb25GcmFtZSB8fCBfd2luZG93LndlYmtpdFJlcXVlc3RBbmltYXRpb25GcmFtZSB8fCBmdW5jdGlvbiAoZm4pIHtcbiAgICAgICAgcmV0dXJuIF93aW5kb3cuc2V0VGltZW91dChmbiwgMjApO1xuICAgICAgfTtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoZm4pIHtcbiAgICAgICAgcmV0dXJuIHJhZihmbik7XG4gICAgICB9O1xuICAgIH0oKTtcbiAgICB2YXIgY2FuY2VsRnJhbWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgY2FuY2VsID0gX3dpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSB8fCBfd2luZG93Lm1vekNhbmNlbEFuaW1hdGlvbkZyYW1lIHx8IF93aW5kb3cud2Via2l0Q2FuY2VsQW5pbWF0aW9uRnJhbWUgfHwgX3dpbmRvdy5jbGVhclRpbWVvdXQ7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKGlkKSB7XG4gICAgICAgIHJldHVybiBjYW5jZWwoaWQpO1xuICAgICAgfTtcbiAgICB9KCk7XG4gICAgdmFyIHJlc2V0VHJpZ2dlcnMgPSBmdW5jdGlvbiByZXNldFRyaWdnZXJzKGVsZW1lbnQpIHtcbiAgICAgIHZhciB0cmlnZ2VycyA9IGVsZW1lbnQuX19yZXNpemVUcmlnZ2Vyc19fLFxuICAgICAgICBleHBhbmQgPSB0cmlnZ2Vycy5maXJzdEVsZW1lbnRDaGlsZCxcbiAgICAgICAgY29udHJhY3QgPSB0cmlnZ2Vycy5sYXN0RWxlbWVudENoaWxkLFxuICAgICAgICBleHBhbmRDaGlsZCA9IGV4cGFuZC5maXJzdEVsZW1lbnRDaGlsZDtcbiAgICAgIGNvbnRyYWN0LnNjcm9sbExlZnQgPSBjb250cmFjdC5zY3JvbGxXaWR0aDtcbiAgICAgIGNvbnRyYWN0LnNjcm9sbFRvcCA9IGNvbnRyYWN0LnNjcm9sbEhlaWdodDtcbiAgICAgIGV4cGFuZENoaWxkLnN0eWxlLndpZHRoID0gZXhwYW5kLm9mZnNldFdpZHRoICsgMSArICdweCc7XG4gICAgICBleHBhbmRDaGlsZC5zdHlsZS5oZWlnaHQgPSBleHBhbmQub2Zmc2V0SGVpZ2h0ICsgMSArICdweCc7XG4gICAgICBleHBhbmQuc2Nyb2xsTGVmdCA9IGV4cGFuZC5zY3JvbGxXaWR0aDtcbiAgICAgIGV4cGFuZC5zY3JvbGxUb3AgPSBleHBhbmQuc2Nyb2xsSGVpZ2h0O1xuICAgIH07XG4gICAgdmFyIGNoZWNrVHJpZ2dlcnMgPSBmdW5jdGlvbiBjaGVja1RyaWdnZXJzKGVsZW1lbnQpIHtcbiAgICAgIHJldHVybiBlbGVtZW50Lm9mZnNldFdpZHRoICE9IGVsZW1lbnQuX19yZXNpemVMYXN0X18ud2lkdGggfHwgZWxlbWVudC5vZmZzZXRIZWlnaHQgIT0gZWxlbWVudC5fX3Jlc2l6ZUxhc3RfXy5oZWlnaHQ7XG4gICAgfTtcbiAgICB2YXIgc2Nyb2xsTGlzdGVuZXIgPSBmdW5jdGlvbiBzY3JvbGxMaXN0ZW5lcihlKSB7XG4gICAgICAvLyBEb24ndCBtZWFzdXJlICh3aGljaCBmb3JjZXMpIHJlZmxvdyBmb3Igc2Nyb2xscyB0aGF0IGhhcHBlbiBpbnNpZGUgb2YgY2hpbGRyZW4hXG4gICAgICBpZiAoZS50YXJnZXQuY2xhc3NOYW1lICYmIHR5cGVvZiBlLnRhcmdldC5jbGFzc05hbWUuaW5kZXhPZiA9PT0gJ2Z1bmN0aW9uJyAmJiBlLnRhcmdldC5jbGFzc05hbWUuaW5kZXhPZignY29udHJhY3QtdHJpZ2dlcicpIDwgMCAmJiBlLnRhcmdldC5jbGFzc05hbWUuaW5kZXhPZignZXhwYW5kLXRyaWdnZXInKSA8IDApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIGVsZW1lbnQgPSB0aGlzO1xuICAgICAgcmVzZXRUcmlnZ2Vycyh0aGlzKTtcbiAgICAgIGlmICh0aGlzLl9fcmVzaXplUkFGX18pIHtcbiAgICAgICAgY2FuY2VsRnJhbWUodGhpcy5fX3Jlc2l6ZVJBRl9fKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX19yZXNpemVSQUZfXyA9IHJlcXVlc3RGcmFtZShmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChjaGVja1RyaWdnZXJzKGVsZW1lbnQpKSB7XG4gICAgICAgICAgZWxlbWVudC5fX3Jlc2l6ZUxhc3RfXy53aWR0aCA9IGVsZW1lbnQub2Zmc2V0V2lkdGg7XG4gICAgICAgICAgZWxlbWVudC5fX3Jlc2l6ZUxhc3RfXy5oZWlnaHQgPSBlbGVtZW50Lm9mZnNldEhlaWdodDtcbiAgICAgICAgICBlbGVtZW50Ll9fcmVzaXplTGlzdGVuZXJzX18uZm9yRWFjaChmdW5jdGlvbiAoZm4pIHtcbiAgICAgICAgICAgIGZuLmNhbGwoZWxlbWVudCwgZSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICAvKiBEZXRlY3QgQ1NTIEFuaW1hdGlvbnMgc3VwcG9ydCB0byBkZXRlY3QgZWxlbWVudCBkaXNwbGF5L3JlLWF0dGFjaCAqL1xuICAgIHZhciBhbmltYXRpb24gPSBmYWxzZSxcbiAgICAgIGtleWZyYW1lcHJlZml4ID0gJycsXG4gICAgICBhbmltYXRpb25zdGFydGV2ZW50ID0gJ2FuaW1hdGlvbnN0YXJ0JyxcbiAgICAgIGRvbVByZWZpeGVzID0gJ1dlYmtpdCBNb3ogTyBtcycuc3BsaXQoJyAnKSxcbiAgICAgIHN0YXJ0RXZlbnRzID0gJ3dlYmtpdEFuaW1hdGlvblN0YXJ0IGFuaW1hdGlvbnN0YXJ0IG9BbmltYXRpb25TdGFydCBNU0FuaW1hdGlvblN0YXJ0Jy5zcGxpdCgnICcpLFxuICAgICAgcGZ4ID0gJyc7XG4gICAge1xuICAgICAgdmFyIGVsbSA9IF93aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZmFrZWVsZW1lbnQnKTtcbiAgICAgIGlmIChlbG0uc3R5bGUuYW5pbWF0aW9uTmFtZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGFuaW1hdGlvbiA9IHRydWU7XG4gICAgICB9XG4gICAgICBpZiAoYW5pbWF0aW9uID09PSBmYWxzZSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRvbVByZWZpeGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgaWYgKGVsbS5zdHlsZVtkb21QcmVmaXhlc1tpXSArICdBbmltYXRpb25OYW1lJ10gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcGZ4ID0gZG9tUHJlZml4ZXNbaV07XG4gICAgICAgICAgICBrZXlmcmFtZXByZWZpeCA9ICctJyArIHBmeC50b0xvd2VyQ2FzZSgpICsgJy0nO1xuICAgICAgICAgICAgYW5pbWF0aW9uc3RhcnRldmVudCA9IHN0YXJ0RXZlbnRzW2ldO1xuICAgICAgICAgICAgYW5pbWF0aW9uID0gdHJ1ZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICB2YXIgYW5pbWF0aW9uTmFtZSA9ICdyZXNpemVhbmltJztcbiAgICB2YXIgYW5pbWF0aW9uS2V5ZnJhbWVzID0gJ0AnICsga2V5ZnJhbWVwcmVmaXggKyAna2V5ZnJhbWVzICcgKyBhbmltYXRpb25OYW1lICsgJyB7IGZyb20geyBvcGFjaXR5OiAwOyB9IHRvIHsgb3BhY2l0eTogMDsgfSB9ICc7XG4gICAgdmFyIGFuaW1hdGlvblN0eWxlID0ga2V5ZnJhbWVwcmVmaXggKyAnYW5pbWF0aW9uOiAxbXMgJyArIGFuaW1hdGlvbk5hbWUgKyAnOyAnO1xuICB9XG4gIHZhciBjcmVhdGVTdHlsZXMgPSBmdW5jdGlvbiBjcmVhdGVTdHlsZXMoZG9jKSB7XG4gICAgaWYgKCFkb2MuZ2V0RWxlbWVudEJ5SWQoJ2RldGVjdEVsZW1lbnRSZXNpemUnKSkge1xuICAgICAgLy9vcGFjaXR5OjAgd29ya3MgYXJvdW5kIGEgY2hyb21lIGJ1ZyBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9Mjg2MzYwXG4gICAgICB2YXIgY3NzID0gKGFuaW1hdGlvbktleWZyYW1lcyA/IGFuaW1hdGlvbktleWZyYW1lcyA6ICcnKSArICcucmVzaXplLXRyaWdnZXJzIHsgJyArIChhbmltYXRpb25TdHlsZSA/IGFuaW1hdGlvblN0eWxlIDogJycpICsgJ3Zpc2liaWxpdHk6IGhpZGRlbjsgb3BhY2l0eTogMDsgfSAnICsgJy5yZXNpemUtdHJpZ2dlcnMsIC5yZXNpemUtdHJpZ2dlcnMgPiBkaXYsIC5jb250cmFjdC10cmlnZ2VyOmJlZm9yZSB7IGNvbnRlbnQ6IFwiIFwiOyBkaXNwbGF5OiBibG9jazsgcG9zaXRpb246IGFic29sdXRlOyB0b3A6IDA7IGxlZnQ6IDA7IGhlaWdodDogMTAwJTsgd2lkdGg6IDEwMCU7IG92ZXJmbG93OiBoaWRkZW47IHotaW5kZXg6IC0xOyB9IC5yZXNpemUtdHJpZ2dlcnMgPiBkaXYgeyBiYWNrZ3JvdW5kOiAjZWVlOyBvdmVyZmxvdzogYXV0bzsgfSAuY29udHJhY3QtdHJpZ2dlcjpiZWZvcmUgeyB3aWR0aDogMjAwJTsgaGVpZ2h0OiAyMDAlOyB9JyxcbiAgICAgICAgaGVhZCA9IGRvYy5oZWFkIHx8IGRvYy5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaGVhZCcpWzBdLFxuICAgICAgICBzdHlsZSA9IGRvYy5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICAgICAgc3R5bGUuaWQgPSAnZGV0ZWN0RWxlbWVudFJlc2l6ZSc7XG4gICAgICBzdHlsZS50eXBlID0gJ3RleHQvY3NzJztcbiAgICAgIGlmIChub25jZSAhPSBudWxsKSB7XG4gICAgICAgIHN0eWxlLnNldEF0dHJpYnV0ZSgnbm9uY2UnLCBub25jZSk7XG4gICAgICB9XG4gICAgICBpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuICAgICAgICBzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdHlsZS5hcHBlbmRDaGlsZChkb2MuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gICAgICB9XG4gICAgICBoZWFkLmFwcGVuZENoaWxkKHN0eWxlKTtcbiAgICB9XG4gIH07XG4gIHZhciBhZGRSZXNpemVMaXN0ZW5lciA9IGZ1bmN0aW9uIGFkZFJlc2l6ZUxpc3RlbmVyKGVsZW1lbnQsIGZuKSB7XG4gICAgaWYgKGF0dGFjaEV2ZW50KSB7XG4gICAgICBlbGVtZW50LmF0dGFjaEV2ZW50KCdvbnJlc2l6ZScsIGZuKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKCFlbGVtZW50Ll9fcmVzaXplVHJpZ2dlcnNfXykge1xuICAgICAgICB2YXIgZG9jID0gZWxlbWVudC5vd25lckRvY3VtZW50O1xuICAgICAgICB2YXIgZWxlbWVudFN0eWxlID0gX3dpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpO1xuICAgICAgICBpZiAoZWxlbWVudFN0eWxlICYmIGVsZW1lbnRTdHlsZS5wb3NpdGlvbiA9PSAnc3RhdGljJykge1xuICAgICAgICAgIGVsZW1lbnQuc3R5bGUucG9zaXRpb24gPSAncmVsYXRpdmUnO1xuICAgICAgICB9XG4gICAgICAgIGNyZWF0ZVN0eWxlcyhkb2MpO1xuICAgICAgICBlbGVtZW50Ll9fcmVzaXplTGFzdF9fID0ge307XG4gICAgICAgIGVsZW1lbnQuX19yZXNpemVMaXN0ZW5lcnNfXyA9IFtdO1xuICAgICAgICAoZWxlbWVudC5fX3Jlc2l6ZVRyaWdnZXJzX18gPSBkb2MuY3JlYXRlRWxlbWVudCgnZGl2JykpLmNsYXNzTmFtZSA9ICdyZXNpemUtdHJpZ2dlcnMnO1xuICAgICAgICB2YXIgZXhwYW5kVHJpZ2dlciA9IGRvYy5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgZXhwYW5kVHJpZ2dlci5jbGFzc05hbWUgPSAnZXhwYW5kLXRyaWdnZXInO1xuICAgICAgICBleHBhbmRUcmlnZ2VyLmFwcGVuZENoaWxkKGRvYy5jcmVhdGVFbGVtZW50KCdkaXYnKSk7XG4gICAgICAgIHZhciBjb250cmFjdFRyaWdnZXIgPSBkb2MuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIGNvbnRyYWN0VHJpZ2dlci5jbGFzc05hbWUgPSAnY29udHJhY3QtdHJpZ2dlcic7XG4gICAgICAgIGVsZW1lbnQuX19yZXNpemVUcmlnZ2Vyc19fLmFwcGVuZENoaWxkKGV4cGFuZFRyaWdnZXIpO1xuICAgICAgICBlbGVtZW50Ll9fcmVzaXplVHJpZ2dlcnNfXy5hcHBlbmRDaGlsZChjb250cmFjdFRyaWdnZXIpO1xuICAgICAgICBlbGVtZW50LmFwcGVuZENoaWxkKGVsZW1lbnQuX19yZXNpemVUcmlnZ2Vyc19fKTtcbiAgICAgICAgcmVzZXRUcmlnZ2VycyhlbGVtZW50KTtcbiAgICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBzY3JvbGxMaXN0ZW5lciwgdHJ1ZSk7XG5cbiAgICAgICAgLyogTGlzdGVuIGZvciBhIGNzcyBhbmltYXRpb24gdG8gZGV0ZWN0IGVsZW1lbnQgZGlzcGxheS9yZS1hdHRhY2ggKi9cbiAgICAgICAgaWYgKGFuaW1hdGlvbnN0YXJ0ZXZlbnQpIHtcbiAgICAgICAgICBlbGVtZW50Ll9fcmVzaXplVHJpZ2dlcnNfXy5fX2FuaW1hdGlvbkxpc3RlbmVyX18gPSBmdW5jdGlvbiBhbmltYXRpb25MaXN0ZW5lcihlKSB7XG4gICAgICAgICAgICBpZiAoZS5hbmltYXRpb25OYW1lID09IGFuaW1hdGlvbk5hbWUpIHtcbiAgICAgICAgICAgICAgcmVzZXRUcmlnZ2VycyhlbGVtZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuICAgICAgICAgIGVsZW1lbnQuX19yZXNpemVUcmlnZ2Vyc19fLmFkZEV2ZW50TGlzdGVuZXIoYW5pbWF0aW9uc3RhcnRldmVudCwgZWxlbWVudC5fX3Jlc2l6ZVRyaWdnZXJzX18uX19hbmltYXRpb25MaXN0ZW5lcl9fKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZWxlbWVudC5fX3Jlc2l6ZUxpc3RlbmVyc19fLnB1c2goZm4pO1xuICAgIH1cbiAgfTtcbiAgdmFyIHJlbW92ZVJlc2l6ZUxpc3RlbmVyID0gZnVuY3Rpb24gcmVtb3ZlUmVzaXplTGlzdGVuZXIoZWxlbWVudCwgZm4pIHtcbiAgICBpZiAoYXR0YWNoRXZlbnQpIHtcbiAgICAgIGVsZW1lbnQuZGV0YWNoRXZlbnQoJ29ucmVzaXplJywgZm4pO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbGVtZW50Ll9fcmVzaXplTGlzdGVuZXJzX18uc3BsaWNlKGVsZW1lbnQuX19yZXNpemVMaXN0ZW5lcnNfXy5pbmRleE9mKGZuKSwgMSk7XG4gICAgICBpZiAoIWVsZW1lbnQuX19yZXNpemVMaXN0ZW5lcnNfXy5sZW5ndGgpIHtcbiAgICAgICAgZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBzY3JvbGxMaXN0ZW5lciwgdHJ1ZSk7XG4gICAgICAgIGlmIChlbGVtZW50Ll9fcmVzaXplVHJpZ2dlcnNfXy5fX2FuaW1hdGlvbkxpc3RlbmVyX18pIHtcbiAgICAgICAgICBlbGVtZW50Ll9fcmVzaXplVHJpZ2dlcnNfXy5yZW1vdmVFdmVudExpc3RlbmVyKGFuaW1hdGlvbnN0YXJ0ZXZlbnQsIGVsZW1lbnQuX19yZXNpemVUcmlnZ2Vyc19fLl9fYW5pbWF0aW9uTGlzdGVuZXJfXyk7XG4gICAgICAgICAgZWxlbWVudC5fX3Jlc2l6ZVRyaWdnZXJzX18uX19hbmltYXRpb25MaXN0ZW5lcl9fID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICB0cnkge1xuICAgICAgICAgIGVsZW1lbnQuX19yZXNpemVUcmlnZ2Vyc19fID0gIWVsZW1lbnQucmVtb3ZlQ2hpbGQoZWxlbWVudC5fX3Jlc2l6ZVRyaWdnZXJzX18pO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgLy8gUHJlYWN0IGNvbXBhdDsgc2VlIGRldmVsb3BpdC9wcmVhY3QtY29tcGF0L2lzc3Vlcy8yMjhcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgcmV0dXJuIHtcbiAgICBhZGRSZXNpemVMaXN0ZW5lcjogYWRkUmVzaXplTGlzdGVuZXIsXG4gICAgcmVtb3ZlUmVzaXplTGlzdGVuZXI6IHJlbW92ZVJlc2l6ZUxpc3RlbmVyXG4gIH07XG59IiwiaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiO1xuaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzc1wiO1xuaW1wb3J0IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIjtcbmltcG9ydCBfZ2V0UHJvdG90eXBlT2YgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2ZcIjtcbmltcG9ydCBfaW5oZXJpdHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIjtcbmltcG9ydCBfZGVmaW5lUHJvcGVydHkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHlcIjtcbmZ1bmN0aW9uIG93bktleXMoZSwgcikgeyB2YXIgdCA9IE9iamVjdC5rZXlzKGUpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgbyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZSk7IHIgJiYgKG8gPSBvLmZpbHRlcihmdW5jdGlvbiAocikgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihlLCByKS5lbnVtZXJhYmxlOyB9KSksIHQucHVzaC5hcHBseSh0LCBvKTsgfSByZXR1cm4gdDsgfVxuZnVuY3Rpb24gX29iamVjdFNwcmVhZChlKSB7IGZvciAodmFyIHIgPSAxOyByIDwgYXJndW1lbnRzLmxlbmd0aDsgcisrKSB7IHZhciB0ID0gbnVsbCAhPSBhcmd1bWVudHNbcl0gPyBhcmd1bWVudHNbcl0gOiB7fTsgciAlIDIgPyBvd25LZXlzKE9iamVjdCh0KSwgITApLmZvckVhY2goZnVuY3Rpb24gKHIpIHsgX2RlZmluZVByb3BlcnR5KGUsIHIsIHRbcl0pOyB9KSA6IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoZSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnModCkpIDogb3duS2V5cyhPYmplY3QodCkpLmZvckVhY2goZnVuY3Rpb24gKHIpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIHIsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodCwgcikpOyB9KTsgfSByZXR1cm4gZTsgfVxuZnVuY3Rpb24gX2NhbGxTdXBlcih0LCBvLCBlKSB7IHJldHVybiBvID0gX2dldFByb3RvdHlwZU9mKG8pLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0LCBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgPyBSZWZsZWN0LmNvbnN0cnVjdChvLCBlIHx8IFtdLCBfZ2V0UHJvdG90eXBlT2YodCkuY29uc3RydWN0b3IpIDogby5hcHBseSh0LCBlKSk7IH1cbmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IHRyeSB7IHZhciB0ID0gIUJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgfSBjYXRjaCAodCkge30gcmV0dXJuIChfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgcmV0dXJuICEhdDsgfSkoKTsgfVxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNyZWF0ZURldGVjdEVsZW1lbnRSZXNpemUgZnJvbSAnLi4vdmVuZG9yL2RldGVjdEVsZW1lbnRSZXNpemUnO1xuLyo6OiB0eXBlIFNpemUgPSB7XG4gIGhlaWdodDogbnVtYmVyLFxuICB3aWR0aDogbnVtYmVyLFxufTsqL1xuLyo6OiB0eXBlIFByb3BzID0ge1xuICAvKiogRnVuY3Rpb24gcmVzcG9uc2libGUgZm9yIHJlbmRlcmluZyBjaGlsZHJlbi4qLS9cbiAgY2hpbGRyZW46IFNpemUgPT4gUmVhY3QuRWxlbWVudDwqPixcblxuICAvKiogT3B0aW9uYWwgY3VzdG9tIENTUyBjbGFzcyBuYW1lIHRvIGF0dGFjaCB0byByb290IEF1dG9TaXplciBlbGVtZW50LiAgKi0vXG4gIGNsYXNzTmFtZT86IHN0cmluZyxcblxuICAvKiogRGVmYXVsdCBoZWlnaHQgdG8gdXNlIGZvciBpbml0aWFsIHJlbmRlcjsgdXNlZnVsIGZvciBTU1IgKi0vXG4gIGRlZmF1bHRIZWlnaHQ/OiBudW1iZXIsXG5cbiAgLyoqIERlZmF1bHQgd2lkdGggdG8gdXNlIGZvciBpbml0aWFsIHJlbmRlcjsgdXNlZnVsIGZvciBTU1IgKi0vXG4gIGRlZmF1bHRXaWR0aD86IG51bWJlcixcblxuICAvKiogRGlzYWJsZSBkeW5hbWljIDpoZWlnaHQgcHJvcGVydHkgKi0vXG4gIGRpc2FibGVIZWlnaHQ6IGJvb2xlYW4sXG5cbiAgLyoqIERpc2FibGUgZHluYW1pYyA6d2lkdGggcHJvcGVydHkgKi0vXG4gIGRpc2FibGVXaWR0aDogYm9vbGVhbixcblxuICAvKiogTm9uY2Ugb2YgdGhlIGlubGluZWQgc3R5bGVzaGVldCBmb3IgQ29udGVudCBTZWN1cml0eSBQb2xpY3kgKi0vXG4gIG5vbmNlPzogc3RyaW5nLFxuXG4gIC8qKiBDYWxsYmFjayB0byBiZSBpbnZva2VkIG9uLXJlc2l6ZSAqLS9cbiAgb25SZXNpemU6IFNpemUgPT4gdm9pZCxcblxuICAvKiogT3B0aW9uYWwgaW5saW5lIHN0eWxlICotL1xuICBzdHlsZTogP09iamVjdCxcbn07Ki9cbi8qOjogdHlwZSBTdGF0ZSA9IHtcbiAgaGVpZ2h0OiBudW1iZXIsXG4gIHdpZHRoOiBudW1iZXIsXG59OyovXG4vKjo6IHR5cGUgUmVzaXplSGFuZGxlciA9IChlbGVtZW50OiBIVE1MRWxlbWVudCwgb25SZXNpemU6ICgpID0+IHZvaWQpID0+IHZvaWQ7Ki9cbi8qOjogdHlwZSBEZXRlY3RFbGVtZW50UmVzaXplID0ge1xuICBhZGRSZXNpemVMaXN0ZW5lcjogUmVzaXplSGFuZGxlcixcbiAgcmVtb3ZlUmVzaXplTGlzdGVuZXI6IFJlc2l6ZUhhbmRsZXIsXG59OyovXG52YXIgQXV0b1NpemVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIGZ1bmN0aW9uIEF1dG9TaXplcigpIHtcbiAgICB2YXIgX3RoaXM7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEF1dG9TaXplcik7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cbiAgICBfdGhpcyA9IF9jYWxsU3VwZXIodGhpcywgQXV0b1NpemVyLCBbXS5jb25jYXQoYXJncykpO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJzdGF0ZVwiLCB7XG4gICAgICBoZWlnaHQ6IF90aGlzLnByb3BzLmRlZmF1bHRIZWlnaHQgfHwgMCxcbiAgICAgIHdpZHRoOiBfdGhpcy5wcm9wcy5kZWZhdWx0V2lkdGggfHwgMFxuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJfcGFyZW50Tm9kZVwiLCB2b2lkIDApO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJfYXV0b1NpemVyXCIsIHZvaWQgMCk7XG4gICAgX2RlZmluZVByb3BlcnR5KF90aGlzLCBcIl93aW5kb3dcIiwgdm9pZCAwKTtcbiAgICAvLyB1c2VzIGFueSBpbnN0ZWFkIG9mIFdpbmRvdyBiZWNhdXNlIEZsb3cgZG9lc24ndCBoYXZlIHdpbmRvdyB0eXBlXG4gICAgX2RlZmluZVByb3BlcnR5KF90aGlzLCBcIl9kZXRlY3RFbGVtZW50UmVzaXplXCIsIHZvaWQgMCk7XG4gICAgX2RlZmluZVByb3BlcnR5KF90aGlzLCBcIl9vblJlc2l6ZVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgZGlzYWJsZUhlaWdodCA9IF90aGlzJHByb3BzLmRpc2FibGVIZWlnaHQsXG4gICAgICAgIGRpc2FibGVXaWR0aCA9IF90aGlzJHByb3BzLmRpc2FibGVXaWR0aCxcbiAgICAgICAgb25SZXNpemUgPSBfdGhpcyRwcm9wcy5vblJlc2l6ZTtcbiAgICAgIGlmIChfdGhpcy5fcGFyZW50Tm9kZSkge1xuICAgICAgICAvLyBHdWFyZCBhZ2FpbnN0IEF1dG9TaXplciBjb21wb25lbnQgYmVpbmcgcmVtb3ZlZCBmcm9tIHRoZSBET00gaW1tZWRpYXRlbHkgYWZ0ZXIgYmVpbmcgYWRkZWQuXG4gICAgICAgIC8vIFRoaXMgY2FuIHJlc3VsdCBpbiBpbnZhbGlkIHN0eWxlIHZhbHVlcyB3aGljaCBjYW4gcmVzdWx0IGluIE5hTiB2YWx1ZXMgaWYgd2UgZG9uJ3QgaGFuZGxlIHRoZW0uXG4gICAgICAgIC8vIFNlZSBpc3N1ZSAjMTUwIGZvciBtb3JlIGNvbnRleHQuXG5cbiAgICAgICAgdmFyIGhlaWdodCA9IF90aGlzLl9wYXJlbnROb2RlLm9mZnNldEhlaWdodCB8fCAwO1xuICAgICAgICB2YXIgd2lkdGggPSBfdGhpcy5fcGFyZW50Tm9kZS5vZmZzZXRXaWR0aCB8fCAwO1xuICAgICAgICB2YXIgd2luID0gX3RoaXMuX3dpbmRvdyB8fCB3aW5kb3c7XG4gICAgICAgIHZhciBzdHlsZSA9IHdpbi5nZXRDb21wdXRlZFN0eWxlKF90aGlzLl9wYXJlbnROb2RlKSB8fCB7fTtcbiAgICAgICAgdmFyIHBhZGRpbmdMZWZ0ID0gcGFyc2VJbnQoc3R5bGUucGFkZGluZ0xlZnQsIDEwKSB8fCAwO1xuICAgICAgICB2YXIgcGFkZGluZ1JpZ2h0ID0gcGFyc2VJbnQoc3R5bGUucGFkZGluZ1JpZ2h0LCAxMCkgfHwgMDtcbiAgICAgICAgdmFyIHBhZGRpbmdUb3AgPSBwYXJzZUludChzdHlsZS5wYWRkaW5nVG9wLCAxMCkgfHwgMDtcbiAgICAgICAgdmFyIHBhZGRpbmdCb3R0b20gPSBwYXJzZUludChzdHlsZS5wYWRkaW5nQm90dG9tLCAxMCkgfHwgMDtcbiAgICAgICAgdmFyIG5ld0hlaWdodCA9IGhlaWdodCAtIHBhZGRpbmdUb3AgLSBwYWRkaW5nQm90dG9tO1xuICAgICAgICB2YXIgbmV3V2lkdGggPSB3aWR0aCAtIHBhZGRpbmdMZWZ0IC0gcGFkZGluZ1JpZ2h0O1xuICAgICAgICBpZiAoIWRpc2FibGVIZWlnaHQgJiYgX3RoaXMuc3RhdGUuaGVpZ2h0ICE9PSBuZXdIZWlnaHQgfHwgIWRpc2FibGVXaWR0aCAmJiBfdGhpcy5zdGF0ZS53aWR0aCAhPT0gbmV3V2lkdGgpIHtcbiAgICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBoZWlnaHQ6IGhlaWdodCAtIHBhZGRpbmdUb3AgLSBwYWRkaW5nQm90dG9tLFxuICAgICAgICAgICAgd2lkdGg6IHdpZHRoIC0gcGFkZGluZ0xlZnQgLSBwYWRkaW5nUmlnaHRcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBvblJlc2l6ZSh7XG4gICAgICAgICAgICBoZWlnaHQ6IGhlaWdodCxcbiAgICAgICAgICAgIHdpZHRoOiB3aWR0aFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgX2RlZmluZVByb3BlcnR5KF90aGlzLCBcIl9zZXRSZWZcIiwgZnVuY3Rpb24gKGF1dG9TaXplciAvKjogP0hUTUxFbGVtZW50Ki8pIHtcbiAgICAgIF90aGlzLl9hdXRvU2l6ZXIgPSBhdXRvU2l6ZXI7XG4gICAgfSk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG4gIF9pbmhlcml0cyhBdXRvU2l6ZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuICByZXR1cm4gX2NyZWF0ZUNsYXNzKEF1dG9TaXplciwgW3tcbiAgICBrZXk6IFwiY29tcG9uZW50RGlkTW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICB2YXIgbm9uY2UgPSB0aGlzLnByb3BzLm5vbmNlO1xuICAgICAgaWYgKHRoaXMuX2F1dG9TaXplciAmJiB0aGlzLl9hdXRvU2l6ZXIucGFyZW50Tm9kZSAmJiB0aGlzLl9hdXRvU2l6ZXIucGFyZW50Tm9kZS5vd25lckRvY3VtZW50ICYmIHRoaXMuX2F1dG9TaXplci5wYXJlbnROb2RlLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcgJiYgdGhpcy5fYXV0b1NpemVyLnBhcmVudE5vZGUgaW5zdGFuY2VvZiB0aGlzLl9hdXRvU2l6ZXIucGFyZW50Tm9kZS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3LkhUTUxFbGVtZW50KSB7XG4gICAgICAgIC8vIERlbGF5IGFjY2VzcyBvZiBwYXJlbnROb2RlIHVudGlsIG1vdW50LlxuICAgICAgICAvLyBUaGlzIGhhbmRsZXMgZWRnZS1jYXNlcyB3aGVyZSB0aGUgY29tcG9uZW50IGhhcyBhbHJlYWR5IGJlZW4gdW5tb3VudGVkIGJlZm9yZSBpdHMgcmVmIGhhcyBiZWVuIHNldCxcbiAgICAgICAgLy8gQXMgd2VsbCBhcyBsaWJyYXJpZXMgbGlrZSByZWFjdC1saXRlIHdoaWNoIGhhdmUgYSBzbGlnaHRseSBkaWZmZXJlbnQgbGlmZWN5Y2xlLlxuICAgICAgICB0aGlzLl9wYXJlbnROb2RlID0gdGhpcy5fYXV0b1NpemVyLnBhcmVudE5vZGU7XG4gICAgICAgIHRoaXMuX3dpbmRvdyA9IHRoaXMuX2F1dG9TaXplci5wYXJlbnROb2RlLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc7XG5cbiAgICAgICAgLy8gRGVmZXIgcmVxdWlyaW5nIHJlc2l6ZSBoYW5kbGVyIGluIG9yZGVyIHRvIHN1cHBvcnQgc2VydmVyLXNpZGUgcmVuZGVyaW5nLlxuICAgICAgICAvLyBTZWUgaXNzdWUgIzQxXG4gICAgICAgIHRoaXMuX2RldGVjdEVsZW1lbnRSZXNpemUgPSBjcmVhdGVEZXRlY3RFbGVtZW50UmVzaXplKG5vbmNlLCB0aGlzLl93aW5kb3cpO1xuICAgICAgICB0aGlzLl9kZXRlY3RFbGVtZW50UmVzaXplLmFkZFJlc2l6ZUxpc3RlbmVyKHRoaXMuX3BhcmVudE5vZGUsIHRoaXMuX29uUmVzaXplKTtcbiAgICAgICAgdGhpcy5fb25SZXNpemUoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY29tcG9uZW50V2lsbFVubW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICBpZiAodGhpcy5fZGV0ZWN0RWxlbWVudFJlc2l6ZSAmJiB0aGlzLl9wYXJlbnROb2RlKSB7XG4gICAgICAgIHRoaXMuX2RldGVjdEVsZW1lbnRSZXNpemUucmVtb3ZlUmVzaXplTGlzdGVuZXIodGhpcy5fcGFyZW50Tm9kZSwgdGhpcy5fb25SZXNpemUpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzMiA9IHRoaXMucHJvcHMsXG4gICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHMyLmNoaWxkcmVuLFxuICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wczIuY2xhc3NOYW1lLFxuICAgICAgICBkaXNhYmxlSGVpZ2h0ID0gX3RoaXMkcHJvcHMyLmRpc2FibGVIZWlnaHQsXG4gICAgICAgIGRpc2FibGVXaWR0aCA9IF90aGlzJHByb3BzMi5kaXNhYmxlV2lkdGgsXG4gICAgICAgIHN0eWxlID0gX3RoaXMkcHJvcHMyLnN0eWxlO1xuICAgICAgdmFyIF90aGlzJHN0YXRlID0gdGhpcy5zdGF0ZSxcbiAgICAgICAgaGVpZ2h0ID0gX3RoaXMkc3RhdGUuaGVpZ2h0LFxuICAgICAgICB3aWR0aCA9IF90aGlzJHN0YXRlLndpZHRoO1xuXG4gICAgICAvLyBPdXRlciBkaXYgc2hvdWxkIG5vdCBmb3JjZSB3aWR0aC9oZWlnaHQgc2luY2UgdGhhdCBtYXkgcHJldmVudCBjb250YWluZXJzIGZyb20gc2hyaW5raW5nLlxuICAgICAgLy8gSW5uZXIgY29tcG9uZW50IHNob3VsZCBvdmVyZmxvdyBhbmQgdXNlIGNhbGN1bGF0ZWQgd2lkdGgvaGVpZ2h0LlxuICAgICAgLy8gU2VlIGlzc3VlICM2OCBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cbiAgICAgIHZhciBvdXRlclN0eWxlIC8qOiBPYmplY3QqLyA9IHtcbiAgICAgICAgb3ZlcmZsb3c6ICd2aXNpYmxlJ1xuICAgICAgfTtcbiAgICAgIHZhciBjaGlsZFBhcmFtcyAvKjogT2JqZWN0Ki8gPSB7fTtcbiAgICAgIGlmICghZGlzYWJsZUhlaWdodCkge1xuICAgICAgICBvdXRlclN0eWxlLmhlaWdodCA9IDA7XG4gICAgICAgIGNoaWxkUGFyYW1zLmhlaWdodCA9IGhlaWdodDtcbiAgICAgIH1cbiAgICAgIGlmICghZGlzYWJsZVdpZHRoKSB7XG4gICAgICAgIG91dGVyU3R5bGUud2lkdGggPSAwO1xuICAgICAgICBjaGlsZFBhcmFtcy53aWR0aCA9IHdpZHRoO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIFRPRE86IEF2b2lkIHJlbmRlcmluZyBjaGlsZHJlbiBiZWZvcmUgdGhlIGluaXRpYWwgbWVhc3VyZW1lbnRzIGhhdmUgYmVlbiBjb2xsZWN0ZWQuXG4gICAgICAgKiBBdCBiZXN0IHRoaXMgd291bGQganVzdCBiZSB3YXN0aW5nIGN5Y2xlcy5cbiAgICAgICAqIEFkZCB0aGlzIGNoZWNrIGludG8gdmVyc2lvbiAxMCB0aG91Z2ggYXMgaXQgY291bGQgYnJlYWsgdG9vIG1hbnkgcmVmIGNhbGxiYWNrcyBpbiB2ZXJzaW9uIDkuXG4gICAgICAgKiBOb3RlIHRoYXQgaWYgZGVmYXVsdCB3aWR0aC9oZWlnaHQgcHJvcHMgd2VyZSBwcm92aWRlZCB0aGlzIHdvdWxkIHN0aWxsIHdvcmsgd2l0aCBTU1IuXG4gICAgICBpZiAoXG4gICAgICAgIGhlaWdodCAhPT0gMCAmJlxuICAgICAgICB3aWR0aCAhPT0gMFxuICAgICAgKSB7XG4gICAgICAgIGNoaWxkID0gY2hpbGRyZW4oeyBoZWlnaHQsIHdpZHRoIH0pXG4gICAgICB9XG4gICAgICAqL1xuXG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZSxcbiAgICAgICAgcmVmOiB0aGlzLl9zZXRSZWYsXG4gICAgICAgIHN0eWxlOiBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIG91dGVyU3R5bGUpLCBzdHlsZSlcbiAgICAgIH0sIGNoaWxkcmVuKGNoaWxkUGFyYW1zKSk7XG4gICAgfVxuICB9XSk7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5fZGVmaW5lUHJvcGVydHkoQXV0b1NpemVyLCBcImRlZmF1bHRQcm9wc1wiLCB7XG4gIG9uUmVzaXplOiBmdW5jdGlvbiBvblJlc2l6ZSgpIHt9LFxuICBkaXNhYmxlSGVpZ2h0OiBmYWxzZSxcbiAgZGlzYWJsZVdpZHRoOiBmYWxzZSxcbiAgc3R5bGU6IHt9XG59KTtcbmV4cG9ydCB7IEF1dG9TaXplciBhcyBkZWZhdWx0IH07IiwiaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiO1xuaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzc1wiO1xuaW1wb3J0IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIjtcbmltcG9ydCBfZ2V0UHJvdG90eXBlT2YgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2ZcIjtcbmltcG9ydCBfaW5oZXJpdHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIjtcbmltcG9ydCBfZGVmaW5lUHJvcGVydHkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHlcIjtcbmZ1bmN0aW9uIF9jYWxsU3VwZXIodCwgbywgZSkgeyByZXR1cm4gbyA9IF9nZXRQcm90b3R5cGVPZihvKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odCwgX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpID8gUmVmbGVjdC5jb25zdHJ1Y3QobywgZSB8fCBbXSwgX2dldFByb3RvdHlwZU9mKHQpLmNvbnN0cnVjdG9yKSA6IG8uYXBwbHkodCwgZSkpOyB9XG5mdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyB0cnkgeyB2YXIgdCA9ICFCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbiwgW10sIGZ1bmN0aW9uICgpIHt9KSk7IH0gY2F0Y2ggKHQpIHt9IHJldHVybiAoX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCA9IGZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IHJldHVybiAhIXQ7IH0pKCk7IH1cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0Jztcbi8qOjogaW1wb3J0IHR5cGUge0NlbGxNZWFzdXJlQ2FjaGV9IGZyb20gJy4vdHlwZXMnOyovXG5pbXBvcnQgeyBjbG9uZUVsZW1lbnQgfSBmcm9tICdyZWFjdCc7XG4vKjo6IHR5cGUgQ2hpbGRyZW4gPSAocGFyYW1zOiB7bWVhc3VyZTogKCkgPT4gdm9pZH0pID0+IFJlYWN0LkVsZW1lbnQ8Kj47Ki9cbi8qOjogdHlwZSBDZWxsID0ge1xuICBjb2x1bW5JbmRleDogbnVtYmVyLFxuICByb3dJbmRleDogbnVtYmVyLFxufTsqL1xuLyo6OiB0eXBlIFByb3BzID0ge1xuICBjYWNoZTogQ2VsbE1lYXN1cmVDYWNoZSxcbiAgY2hpbGRyZW46IENoaWxkcmVuIHwgUmVhY3QuRWxlbWVudDwqPixcbiAgY29sdW1uSW5kZXg/OiBudW1iZXIsXG4gIGluZGV4PzogbnVtYmVyLFxuICBwYXJlbnQ6IHtcbiAgICBpbnZhbGlkYXRlQ2VsbFNpemVBZnRlclJlbmRlcj86IChjZWxsOiBDZWxsKSA9PiB2b2lkLFxuICAgIHJlY29tcHV0ZUdyaWRTaXplPzogKGNlbGw6IENlbGwpID0+IHZvaWQsXG4gIH0sXG4gIHJvd0luZGV4PzogbnVtYmVyLFxufTsqL1xuLyoqXG4gKiBXcmFwcyBhIGNlbGwgYW5kIG1lYXN1cmVzIGl0cyByZW5kZXJlZCBjb250ZW50LlxuICogTWVhc3VyZW1lbnRzIGFyZSBzdG9yZWQgaW4gYSBwZXItY2VsbCBjYWNoZS5cbiAqIENhY2hlZC1jb250ZW50IGlzIG5vdCBiZSByZS1tZWFzdXJlZC5cbiAqL1xudmFyIENlbGxNZWFzdXJlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1JlYWN0JFB1cmVDb21wb25lbnQpIHtcbiAgZnVuY3Rpb24gQ2VsbE1lYXN1cmVyKCkge1xuICAgIHZhciBfdGhpcztcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ2VsbE1lYXN1cmVyKTtcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuICAgIF90aGlzID0gX2NhbGxTdXBlcih0aGlzLCBDZWxsTWVhc3VyZXIsIFtdLmNvbmNhdChhcmdzKSk7XG4gICAgX2RlZmluZVByb3BlcnR5KF90aGlzLCBcIl9jaGlsZFwiLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlUmVmKCkpO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJfbWVhc3VyZVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgY2FjaGUgPSBfdGhpcyRwcm9wcy5jYWNoZSxcbiAgICAgICAgX3RoaXMkcHJvcHMkY29sdW1uSW5kID0gX3RoaXMkcHJvcHMuY29sdW1uSW5kZXgsXG4gICAgICAgIGNvbHVtbkluZGV4ID0gX3RoaXMkcHJvcHMkY29sdW1uSW5kID09PSB2b2lkIDAgPyAwIDogX3RoaXMkcHJvcHMkY29sdW1uSW5kLFxuICAgICAgICBwYXJlbnQgPSBfdGhpcyRwcm9wcy5wYXJlbnQsXG4gICAgICAgIF90aGlzJHByb3BzJHJvd0luZGV4ID0gX3RoaXMkcHJvcHMucm93SW5kZXgsXG4gICAgICAgIHJvd0luZGV4ID0gX3RoaXMkcHJvcHMkcm93SW5kZXggPT09IHZvaWQgMCA/IF90aGlzLnByb3BzLmluZGV4IHx8IDAgOiBfdGhpcyRwcm9wcyRyb3dJbmRleDtcbiAgICAgIHZhciBfdGhpcyRfZ2V0Q2VsbE1lYXN1cmUgPSBfdGhpcy5fZ2V0Q2VsbE1lYXN1cmVtZW50cygpLFxuICAgICAgICBoZWlnaHQgPSBfdGhpcyRfZ2V0Q2VsbE1lYXN1cmUuaGVpZ2h0LFxuICAgICAgICB3aWR0aCA9IF90aGlzJF9nZXRDZWxsTWVhc3VyZS53aWR0aDtcbiAgICAgIGlmIChoZWlnaHQgIT09IGNhY2hlLmdldEhlaWdodChyb3dJbmRleCwgY29sdW1uSW5kZXgpIHx8IHdpZHRoICE9PSBjYWNoZS5nZXRXaWR0aChyb3dJbmRleCwgY29sdW1uSW5kZXgpKSB7XG4gICAgICAgIGNhY2hlLnNldChyb3dJbmRleCwgY29sdW1uSW5kZXgsIHdpZHRoLCBoZWlnaHQpO1xuICAgICAgICBpZiAocGFyZW50ICYmIHR5cGVvZiBwYXJlbnQucmVjb21wdXRlR3JpZFNpemUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBwYXJlbnQucmVjb21wdXRlR3JpZFNpemUoe1xuICAgICAgICAgICAgY29sdW1uSW5kZXg6IGNvbHVtbkluZGV4LFxuICAgICAgICAgICAgcm93SW5kZXg6IHJvd0luZGV4XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgICBfZGVmaW5lUHJvcGVydHkoX3RoaXMsIFwiX3JlZ2lzdGVyQ2hpbGRcIiwgZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAgIGlmIChlbGVtZW50ICYmICEoZWxlbWVudCBpbnN0YW5jZW9mIEVsZW1lbnQpKSB7XG4gICAgICAgIGNvbnNvbGUud2FybignQ2VsbE1lYXN1cmVyIHJlZ2lzdGVyQ2hpbGQgZXhwZWN0cyB0byBiZSBwYXNzZWQgRWxlbWVudCBvciBudWxsJyk7XG4gICAgICB9XG4gICAgICBfdGhpcy5fY2hpbGQuY3VycmVudCA9IGVsZW1lbnQ7XG4gICAgICBpZiAoZWxlbWVudCkge1xuICAgICAgICBfdGhpcy5fbWF5YmVNZWFzdXJlQ2VsbCgpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuICBfaW5oZXJpdHMoQ2VsbE1lYXN1cmVyLCBfUmVhY3QkUHVyZUNvbXBvbmVudCk7XG4gIHJldHVybiBfY3JlYXRlQ2xhc3MoQ2VsbE1lYXN1cmVyLCBbe1xuICAgIGtleTogXCJjb21wb25lbnREaWRNb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIHRoaXMuX21heWJlTWVhc3VyZUNlbGwoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY29tcG9uZW50RGlkVXBkYXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZSgpIHtcbiAgICAgIHRoaXMuX21heWJlTWVhc3VyZUNlbGwoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuICAgICAgdmFyIGNoaWxkcmVuID0gdGhpcy5wcm9wcy5jaGlsZHJlbjtcbiAgICAgIHZhciByZXNvbHZlZENoaWxkcmVuID0gdHlwZW9mIGNoaWxkcmVuID09PSAnZnVuY3Rpb24nID8gY2hpbGRyZW4oe1xuICAgICAgICBtZWFzdXJlOiB0aGlzLl9tZWFzdXJlLFxuICAgICAgICByZWdpc3RlckNoaWxkOiB0aGlzLl9yZWdpc3RlckNoaWxkXG4gICAgICB9KSA6IGNoaWxkcmVuO1xuICAgICAgaWYgKHJlc29sdmVkQ2hpbGRyZW4gPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHJlc29sdmVkQ2hpbGRyZW47XG4gICAgICB9XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL2Nsb25lRWxlbWVudChyZXNvbHZlZENoaWxkcmVuLCB7XG4gICAgICAgIHJlZjogZnVuY3Rpb24gcmVmKG5vZGUpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIHJlc29sdmVkQ2hpbGRyZW4ucmVmID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICByZXNvbHZlZENoaWxkcmVuLnJlZihub2RlKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHJlc29sdmVkQ2hpbGRyZW4ucmVmKSB7XG4gICAgICAgICAgICByZXNvbHZlZENoaWxkcmVuLnJlZi5jdXJyZW50ID0gbm9kZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgX3RoaXMyLl9jaGlsZC5jdXJyZW50ID0gbm9kZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIl9nZXRDZWxsTWVhc3VyZW1lbnRzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9nZXRDZWxsTWVhc3VyZW1lbnRzKCkge1xuICAgICAgdmFyIGNhY2hlID0gdGhpcy5wcm9wcy5jYWNoZTtcbiAgICAgIHZhciBub2RlID0gdGhpcy5fY2hpbGQuY3VycmVudDtcblxuICAgICAgLy8gVE9ETyBDaGVjayBmb3IgYSBiYWQgY29tYmluYXRpb24gb2YgZml4ZWRXaWR0aCBhbmQgbWlzc2luZyBudW1lcmljIHdpZHRoIG9yIHZpY2UgdmVyc2Egd2l0aCBoZWlnaHRcblxuICAgICAgaWYgKG5vZGUgJiYgbm9kZS5vd25lckRvY3VtZW50ICYmIG5vZGUub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldyAmJiBub2RlIGluc3RhbmNlb2Ygbm9kZS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3LkhUTUxFbGVtZW50KSB7XG4gICAgICAgIHZhciBzdHlsZVdpZHRoID0gbm9kZS5zdHlsZS53aWR0aDtcbiAgICAgICAgdmFyIHN0eWxlSGVpZ2h0ID0gbm9kZS5zdHlsZS5oZWlnaHQ7XG5cbiAgICAgICAgLy8gSWYgd2UgYXJlIHJlLW1lYXN1cmluZyBhIGNlbGwgdGhhdCBoYXMgYWxyZWFkeSBiZWVuIG1lYXN1cmVkLFxuICAgICAgICAvLyBJdCB3aWxsIGhhdmUgYSBoYXJkLWNvZGVkIHdpZHRoL2hlaWdodCBmcm9tIHRoZSBwcmV2aW91cyBtZWFzdXJlbWVudC5cbiAgICAgICAgLy8gVGhlIGZhY3QgdGhhdCB3ZSBhcmUgbWVhc3VyaW5nIGluZGljYXRlcyB0aGlzIG1lYXN1cmVtZW50IGlzIHByb2JhYmx5IHN0YWxlLFxuICAgICAgICAvLyBTbyBleHBsaWNpdGx5IGNsZWFyIGl0IG91dCAoZWcgc2V0IHRvIFwiYXV0b1wiKSBzbyB3ZSBjYW4gcmVjYWxjdWxhdGUuXG4gICAgICAgIC8vIFNlZSBpc3N1ZSAjNTkzIGZvciBtb3JlIGluZm8uXG4gICAgICAgIC8vIEV2ZW4gaWYgd2UgYXJlIG1lYXN1cmluZyBpbml0aWFsbHktIGlmIHdlJ3JlIGluc2lkZSBvZiBhIE11bHRpR3JpZCBjb21wb25lbnQsXG4gICAgICAgIC8vIEV4cGxpY2l0bHkgY2xlYXIgd2lkdGgvaGVpZ2h0IGJlZm9yZSBtZWFzdXJpbmcgdG8gYXZvaWQgYmVpbmcgdGFpbnRlZCBieSBhbm90aGVyIEdyaWQuXG4gICAgICAgIC8vIGVnIHRvcC9sZWZ0IEdyaWQgcmVuZGVycyBiZWZvcmUgYm90dG9tL3JpZ2h0IEdyaWRcbiAgICAgICAgLy8gU2luY2UgdGhlIENlbGxNZWFzdXJlckNhY2hlIGlzIHNoYXJlZCBiZXR3ZWVuIHRoZW0gdGhpcyB0YWludHMgZGVyaXZlZCBjZWxsIHNpemUgdmFsdWVzLlxuICAgICAgICBpZiAoIWNhY2hlLmhhc0ZpeGVkV2lkdGgoKSkge1xuICAgICAgICAgIG5vZGUuc3R5bGUud2lkdGggPSAnYXV0byc7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFjYWNoZS5oYXNGaXhlZEhlaWdodCgpKSB7XG4gICAgICAgICAgbm9kZS5zdHlsZS5oZWlnaHQgPSAnYXV0byc7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGhlaWdodCA9IE1hdGguY2VpbChub2RlLm9mZnNldEhlaWdodCk7XG4gICAgICAgIHZhciB3aWR0aCA9IE1hdGguY2VpbChub2RlLm9mZnNldFdpZHRoKTtcblxuICAgICAgICAvLyBSZXNldCBhZnRlciBtZWFzdXJpbmcgdG8gYXZvaWQgYnJlYWtpbmcgc3R5bGVzOyBzZWUgIzY2MFxuICAgICAgICBpZiAoc3R5bGVXaWR0aCkge1xuICAgICAgICAgIG5vZGUuc3R5bGUud2lkdGggPSBzdHlsZVdpZHRoO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzdHlsZUhlaWdodCkge1xuICAgICAgICAgIG5vZGUuc3R5bGUuaGVpZ2h0ID0gc3R5bGVIZWlnaHQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBoZWlnaHQ6IGhlaWdodCxcbiAgICAgICAgICB3aWR0aDogd2lkdGhcbiAgICAgICAgfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgaGVpZ2h0OiAwLFxuICAgICAgICAgIHdpZHRoOiAwXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIl9tYXliZU1lYXN1cmVDZWxsXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9tYXliZU1lYXN1cmVDZWxsKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzMiA9IHRoaXMucHJvcHMsXG4gICAgICAgIGNhY2hlID0gX3RoaXMkcHJvcHMyLmNhY2hlLFxuICAgICAgICBfdGhpcyRwcm9wczIkY29sdW1uSW4gPSBfdGhpcyRwcm9wczIuY29sdW1uSW5kZXgsXG4gICAgICAgIGNvbHVtbkluZGV4ID0gX3RoaXMkcHJvcHMyJGNvbHVtbkluID09PSB2b2lkIDAgPyAwIDogX3RoaXMkcHJvcHMyJGNvbHVtbkluLFxuICAgICAgICBwYXJlbnQgPSBfdGhpcyRwcm9wczIucGFyZW50LFxuICAgICAgICBfdGhpcyRwcm9wczIkcm93SW5kZXggPSBfdGhpcyRwcm9wczIucm93SW5kZXgsXG4gICAgICAgIHJvd0luZGV4ID0gX3RoaXMkcHJvcHMyJHJvd0luZGV4ID09PSB2b2lkIDAgPyB0aGlzLnByb3BzLmluZGV4IHx8IDAgOiBfdGhpcyRwcm9wczIkcm93SW5kZXg7XG4gICAgICBpZiAoIWNhY2hlLmhhcyhyb3dJbmRleCwgY29sdW1uSW5kZXgpKSB7XG4gICAgICAgIHZhciBfdGhpcyRfZ2V0Q2VsbE1lYXN1cmUyID0gdGhpcy5fZ2V0Q2VsbE1lYXN1cmVtZW50cygpLFxuICAgICAgICAgIGhlaWdodCA9IF90aGlzJF9nZXRDZWxsTWVhc3VyZTIuaGVpZ2h0LFxuICAgICAgICAgIHdpZHRoID0gX3RoaXMkX2dldENlbGxNZWFzdXJlMi53aWR0aDtcbiAgICAgICAgY2FjaGUuc2V0KHJvd0luZGV4LCBjb2x1bW5JbmRleCwgd2lkdGgsIGhlaWdodCk7XG5cbiAgICAgICAgLy8gSWYgc2l6ZSBoYXMgY2hhbmdlZCwgbGV0IEdyaWQga25vdyB0byByZS1yZW5kZXIuXG4gICAgICAgIGlmIChwYXJlbnQgJiYgdHlwZW9mIHBhcmVudC5pbnZhbGlkYXRlQ2VsbFNpemVBZnRlclJlbmRlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHBhcmVudC5pbnZhbGlkYXRlQ2VsbFNpemVBZnRlclJlbmRlcih7XG4gICAgICAgICAgICBjb2x1bW5JbmRleDogY29sdW1uSW5kZXgsXG4gICAgICAgICAgICByb3dJbmRleDogcm93SW5kZXhcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfV0pO1xufShSZWFjdC5QdXJlQ29tcG9uZW50KTsgLy8gVXNlZCBmb3IgREVWIG1vZGUgd2FybmluZyBjaGVja1xuX2RlZmluZVByb3BlcnR5KENlbGxNZWFzdXJlciwgXCJfX2ludGVybmFsQ2VsbE1lYXN1cmVyRmxhZ1wiLCBmYWxzZSk7XG5leHBvcnQgeyBDZWxsTWVhc3VyZXIgYXMgZGVmYXVsdCB9O1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgQ2VsbE1lYXN1cmVyLl9faW50ZXJuYWxDZWxsTWVhc3VyZXJGbGFnID0gdHJ1ZTtcbn0iLCJmdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgcmV0dXJuIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiA/IE9iamVjdC5hc3NpZ24uYmluZCgpIDogZnVuY3Rpb24gKG4pIHtcbiAgICBmb3IgKHZhciBlID0gMTsgZSA8IGFyZ3VtZW50cy5sZW5ndGg7IGUrKykge1xuICAgICAgdmFyIHQgPSBhcmd1bWVudHNbZV07XG4gICAgICBmb3IgKHZhciByIGluIHQpICh7fSkuaGFzT3duUHJvcGVydHkuY2FsbCh0LCByKSAmJiAobltyXSA9IHRbcl0pO1xuICAgIH1cbiAgICByZXR1cm4gbjtcbiAgfSwgX2V4dGVuZHMuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbn1cbmV4cG9ydCB7IF9leHRlbmRzIGFzIGRlZmF1bHQgfTsiLCJmdW5jdGlvbiByKGUpe3ZhciB0LGYsbj1cIlwiO2lmKFwic3RyaW5nXCI9PXR5cGVvZiBlfHxcIm51bWJlclwiPT10eXBlb2YgZSluKz1lO2Vsc2UgaWYoXCJvYmplY3RcIj09dHlwZW9mIGUpaWYoQXJyYXkuaXNBcnJheShlKSlmb3IodD0wO3Q8ZS5sZW5ndGg7dCsrKWVbdF0mJihmPXIoZVt0XSkpJiYobiYmKG4rPVwiIFwiKSxuKz1mKTtlbHNlIGZvcih0IGluIGUpZVt0XSYmKG4mJihuKz1cIiBcIiksbis9dCk7cmV0dXJuIG59ZXhwb3J0IGZ1bmN0aW9uIGNsc3goKXtmb3IodmFyIGUsdCxmPTAsbj1cIlwiO2Y8YXJndW1lbnRzLmxlbmd0aDspKGU9YXJndW1lbnRzW2YrK10pJiYodD1yKGUpKSYmKG4mJihuKz1cIiBcIiksbis9dCk7cmV0dXJuIG59ZXhwb3J0IGRlZmF1bHQgY2xzeDsiLCIvKipcbiAqIEhlbHBlciB1dGlsaXR5IHRoYXQgdXBkYXRlcyB0aGUgc3BlY2lmaWVkIGNhbGxiYWNrIHdoZW5ldmVyIGFueSBvZiB0aGUgc3BlY2lmaWVkIGluZGljZXMgaGF2ZSBjaGFuZ2VkLlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVDYWxsYmFja01lbW9pemVyKCkge1xuICB2YXIgcmVxdWlyZUFsbEtleXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHRydWU7XG4gIHZhciBjYWNoZWRJbmRpY2VzID0ge307XG4gIHJldHVybiBmdW5jdGlvbiAoX3JlZikge1xuICAgIHZhciBjYWxsYmFjayA9IF9yZWYuY2FsbGJhY2ssXG4gICAgICBpbmRpY2VzID0gX3JlZi5pbmRpY2VzO1xuICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoaW5kaWNlcyk7XG4gICAgdmFyIGFsbEluaXRpYWxpemVkID0gIXJlcXVpcmVBbGxLZXlzIHx8IGtleXMuZXZlcnkoZnVuY3Rpb24gKGtleSkge1xuICAgICAgdmFyIHZhbHVlID0gaW5kaWNlc1trZXldO1xuICAgICAgcmV0dXJuIEFycmF5LmlzQXJyYXkodmFsdWUpID8gdmFsdWUubGVuZ3RoID4gMCA6IHZhbHVlID49IDA7XG4gICAgfSk7XG4gICAgdmFyIGluZGV4Q2hhbmdlZCA9IGtleXMubGVuZ3RoICE9PSBPYmplY3Qua2V5cyhjYWNoZWRJbmRpY2VzKS5sZW5ndGggfHwga2V5cy5zb21lKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIHZhciBjYWNoZWRWYWx1ZSA9IGNhY2hlZEluZGljZXNba2V5XTtcbiAgICAgIHZhciB2YWx1ZSA9IGluZGljZXNba2V5XTtcbiAgICAgIHJldHVybiBBcnJheS5pc0FycmF5KHZhbHVlKSA/IGNhY2hlZFZhbHVlLmpvaW4oJywnKSAhPT0gdmFsdWUuam9pbignLCcpIDogY2FjaGVkVmFsdWUgIT09IHZhbHVlO1xuICAgIH0pO1xuICAgIGNhY2hlZEluZGljZXMgPSBpbmRpY2VzO1xuICAgIGlmIChhbGxJbml0aWFsaXplZCAmJiBpbmRleENoYW5nZWQpIHtcbiAgICAgIGNhbGxiYWNrKGluZGljZXMpO1xuICAgIH1cbiAgfTtcbn0iLCJleHBvcnQgZGVmYXVsdCAhISh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuZG9jdW1lbnQgJiYgd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpOyIsImltcG9ydCBjYW5Vc2VET00gZnJvbSAnLi9jYW5Vc2VET00nO1xudmFyIHNpemU7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzY3JvbGxiYXJTaXplKHJlY2FsYykge1xuICBpZiAoIXNpemUgJiYgc2l6ZSAhPT0gMCB8fCByZWNhbGMpIHtcbiAgICBpZiAoY2FuVXNlRE9NKSB7XG4gICAgICB2YXIgc2Nyb2xsRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICBzY3JvbGxEaXYuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xuICAgICAgc2Nyb2xsRGl2LnN0eWxlLnRvcCA9ICctOTk5OXB4JztcbiAgICAgIHNjcm9sbERpdi5zdHlsZS53aWR0aCA9ICc1MHB4JztcbiAgICAgIHNjcm9sbERpdi5zdHlsZS5oZWlnaHQgPSAnNTBweCc7XG4gICAgICBzY3JvbGxEaXYuc3R5bGUub3ZlcmZsb3cgPSAnc2Nyb2xsJztcbiAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoc2Nyb2xsRGl2KTtcbiAgICAgIHNpemUgPSBzY3JvbGxEaXYub2Zmc2V0V2lkdGggLSBzY3JvbGxEaXYuY2xpZW50V2lkdGg7XG4gICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKHNjcm9sbERpdik7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHNpemU7XG59IiwiaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiO1xuaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzc1wiO1xuaW1wb3J0IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIjtcbmltcG9ydCBfZ2V0UHJvdG90eXBlT2YgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2ZcIjtcbmltcG9ydCBfaW5oZXJpdHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIjtcbmltcG9ydCBfZGVmaW5lUHJvcGVydHkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHlcIjtcbmZ1bmN0aW9uIG93bktleXMoZSwgcikgeyB2YXIgdCA9IE9iamVjdC5rZXlzKGUpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgbyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZSk7IHIgJiYgKG8gPSBvLmZpbHRlcihmdW5jdGlvbiAocikgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihlLCByKS5lbnVtZXJhYmxlOyB9KSksIHQucHVzaC5hcHBseSh0LCBvKTsgfSByZXR1cm4gdDsgfVxuZnVuY3Rpb24gX29iamVjdFNwcmVhZChlKSB7IGZvciAodmFyIHIgPSAxOyByIDwgYXJndW1lbnRzLmxlbmd0aDsgcisrKSB7IHZhciB0ID0gbnVsbCAhPSBhcmd1bWVudHNbcl0gPyBhcmd1bWVudHNbcl0gOiB7fTsgciAlIDIgPyBvd25LZXlzKE9iamVjdCh0KSwgITApLmZvckVhY2goZnVuY3Rpb24gKHIpIHsgX2RlZmluZVByb3BlcnR5KGUsIHIsIHRbcl0pOyB9KSA6IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoZSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnModCkpIDogb3duS2V5cyhPYmplY3QodCkpLmZvckVhY2goZnVuY3Rpb24gKHIpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIHIsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodCwgcikpOyB9KTsgfSByZXR1cm4gZTsgfVxuZnVuY3Rpb24gX2NhbGxTdXBlcih0LCBvLCBlKSB7IHJldHVybiBvID0gX2dldFByb3RvdHlwZU9mKG8pLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0LCBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgPyBSZWZsZWN0LmNvbnN0cnVjdChvLCBlIHx8IFtdLCBfZ2V0UHJvdG90eXBlT2YodCkuY29uc3RydWN0b3IpIDogby5hcHBseSh0LCBlKSk7IH1cbmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IHRyeSB7IHZhciB0ID0gIUJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgfSBjYXRjaCAodCkge30gcmV0dXJuIChfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgcmV0dXJuICEhdDsgfSkoKTsgfVxuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgcG9seWZpbGwgfSBmcm9tICdyZWFjdC1saWZlY3ljbGVzLWNvbXBhdCc7XG5pbXBvcnQgY3JlYXRlQ2FsbGJhY2tNZW1vaXplciBmcm9tICcuLi91dGlscy9jcmVhdGVDYWxsYmFja01lbW9pemVyJztcbmltcG9ydCBnZXRTY3JvbGxiYXJTaXplIGZyb20gJ2RvbS1oZWxwZXJzL3Njcm9sbGJhclNpemUnO1xuXG4vLyBAVE9ETyBNZXJnZSBDb2xsZWN0aW9uIGFuZCBDb2xsZWN0aW9uVmlld1xuXG4vKipcbiAqIFNwZWNpZmllcyB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBkdXJpbmcgd2hpY2ggdG8gZGlzYWJsZSBwb2ludGVyIGV2ZW50cyB3aGlsZSBhIHNjcm9sbCBpcyBpbiBwcm9ncmVzcy5cbiAqIFRoaXMgaW1wcm92ZXMgcGVyZm9ybWFuY2UgYW5kIG1ha2VzIHNjcm9sbGluZyBzbW9vdGhlci5cbiAqL1xudmFyIElTX1NDUk9MTElOR19USU1FT1VUID0gMTUwO1xuXG4vKipcbiAqIENvbnRyb2xzIHdoZXRoZXIgdGhlIEdyaWQgdXBkYXRlcyB0aGUgRE9NIGVsZW1lbnQncyBzY3JvbGxMZWZ0L3Njcm9sbFRvcCBiYXNlZCBvbiB0aGUgY3VycmVudCBzdGF0ZSBvciBqdXN0IG9ic2VydmVzIGl0LlxuICogVGhpcyBwcmV2ZW50cyBHcmlkIGZyb20gaW50ZXJydXB0aW5nIG1vdXNlLXdoZWVsIGFuaW1hdGlvbnMgKHNlZSBpc3N1ZSAjMikuXG4gKi9cbnZhciBTQ1JPTExfUE9TSVRJT05fQ0hBTkdFX1JFQVNPTlMgPSB7XG4gIE9CU0VSVkVEOiAnb2JzZXJ2ZWQnLFxuICBSRVFVRVNURUQ6ICdyZXF1ZXN0ZWQnXG59O1xuXG4vKipcbiAqIE1vbml0b3JzIGNoYW5nZXMgaW4gcHJvcGVydGllcyAoZWcuIGNlbGxDb3VudCkgYW5kIHN0YXRlIChlZy4gc2Nyb2xsIG9mZnNldHMpIHRvIGRldGVybWluZSB3aGVuIHJlbmRlcmluZyBuZWVkcyB0byBvY2N1ci5cbiAqIFRoaXMgY29tcG9uZW50IGRvZXMgbm90IHJlbmRlciBhbnkgdmlzaWJsZSBjb250ZW50IGl0c2VsZjsgaXQgZGVmZXJzIHRvIHRoZSBzcGVjaWZpZWQgOmNlbGxMYXlvdXRNYW5hZ2VyLlxuICovXG52YXIgQ29sbGVjdGlvblZpZXcgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9SZWFjdCRQdXJlQ29tcG9uZW50KSB7XG4gIGZ1bmN0aW9uIENvbGxlY3Rpb25WaWV3KCkge1xuICAgIHZhciBfdGhpcztcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ29sbGVjdGlvblZpZXcpO1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG4gICAgX3RoaXMgPSBfY2FsbFN1cGVyKHRoaXMsIENvbGxlY3Rpb25WaWV3LCBbXS5jb25jYXQoYXJncykpO1xuXG4gICAgLy8gSWYgdGhpcyBjb21wb25lbnQgaXMgYmVpbmcgcmVuZGVyZWQgc2VydmVyLXNpZGUsIGdldFNjcm9sbGJhclNpemUoKSB3aWxsIHJldHVybiB1bmRlZmluZWQuXG4gICAgLy8gV2UgaGFuZGxlIHRoaXMgY2FzZSBpbiBjb21wb25lbnREaWRNb3VudCgpXG4gICAgX2RlZmluZVByb3BlcnR5KF90aGlzLCBcInN0YXRlXCIsIHtcbiAgICAgIGlzU2Nyb2xsaW5nOiBmYWxzZSxcbiAgICAgIHNjcm9sbExlZnQ6IDAsXG4gICAgICBzY3JvbGxUb3A6IDBcbiAgICB9KTtcbiAgICBfZGVmaW5lUHJvcGVydHkoX3RoaXMsIFwiX2NhbGN1bGF0ZVNpemVBbmRQb3NpdGlvbkRhdGFPbk5leHRVcGRhdGVcIiwgZmFsc2UpO1xuICAgIC8vIEludm9rZXMgY2FsbGJhY2tzIG9ubHkgd2hlbiB0aGVpciB2YWx1ZXMgaGF2ZSBjaGFuZ2VkLlxuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJfb25TZWN0aW9uUmVuZGVyZWRNZW1vaXplclwiLCBjcmVhdGVDYWxsYmFja01lbW9pemVyKCkpO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJfb25TY3JvbGxNZW1vaXplclwiLCBjcmVhdGVDYWxsYmFja01lbW9pemVyKGZhbHNlKSk7XG4gICAgX2RlZmluZVByb3BlcnR5KF90aGlzLCBcIl9pbnZva2VPblNlY3Rpb25SZW5kZXJlZEhlbHBlclwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgY2VsbExheW91dE1hbmFnZXIgPSBfdGhpcyRwcm9wcy5jZWxsTGF5b3V0TWFuYWdlcixcbiAgICAgICAgb25TZWN0aW9uUmVuZGVyZWQgPSBfdGhpcyRwcm9wcy5vblNlY3Rpb25SZW5kZXJlZDtcbiAgICAgIF90aGlzLl9vblNlY3Rpb25SZW5kZXJlZE1lbW9pemVyKHtcbiAgICAgICAgY2FsbGJhY2s6IG9uU2VjdGlvblJlbmRlcmVkLFxuICAgICAgICBpbmRpY2VzOiB7XG4gICAgICAgICAgaW5kaWNlczogY2VsbExheW91dE1hbmFnZXIuZ2V0TGFzdFJlbmRlcmVkSW5kaWNlcygpXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJfc2V0U2Nyb2xsaW5nQ29udGFpbmVyUmVmXCIsIGZ1bmN0aW9uIChyZWYpIHtcbiAgICAgIF90aGlzLl9zY3JvbGxpbmdDb250YWluZXIgPSByZWY7XG4gICAgfSk7XG4gICAgX2RlZmluZVByb3BlcnR5KF90aGlzLCBcIl91cGRhdGVTY3JvbGxQb3NpdGlvbkZvclNjcm9sbFRvQ2VsbFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMyID0gX3RoaXMucHJvcHMsXG4gICAgICAgIGNlbGxMYXlvdXRNYW5hZ2VyID0gX3RoaXMkcHJvcHMyLmNlbGxMYXlvdXRNYW5hZ2VyLFxuICAgICAgICBoZWlnaHQgPSBfdGhpcyRwcm9wczIuaGVpZ2h0LFxuICAgICAgICBzY3JvbGxUb0FsaWdubWVudCA9IF90aGlzJHByb3BzMi5zY3JvbGxUb0FsaWdubWVudCxcbiAgICAgICAgc2Nyb2xsVG9DZWxsID0gX3RoaXMkcHJvcHMyLnNjcm9sbFRvQ2VsbCxcbiAgICAgICAgd2lkdGggPSBfdGhpcyRwcm9wczIud2lkdGg7XG4gICAgICB2YXIgX3RoaXMkc3RhdGUgPSBfdGhpcy5zdGF0ZSxcbiAgICAgICAgc2Nyb2xsTGVmdCA9IF90aGlzJHN0YXRlLnNjcm9sbExlZnQsXG4gICAgICAgIHNjcm9sbFRvcCA9IF90aGlzJHN0YXRlLnNjcm9sbFRvcDtcbiAgICAgIGlmIChzY3JvbGxUb0NlbGwgPj0gMCkge1xuICAgICAgICB2YXIgc2Nyb2xsUG9zaXRpb24gPSBjZWxsTGF5b3V0TWFuYWdlci5nZXRTY3JvbGxQb3NpdGlvbkZvckNlbGwoe1xuICAgICAgICAgIGFsaWduOiBzY3JvbGxUb0FsaWdubWVudCxcbiAgICAgICAgICBjZWxsSW5kZXg6IHNjcm9sbFRvQ2VsbCxcbiAgICAgICAgICBoZWlnaHQ6IGhlaWdodCxcbiAgICAgICAgICBzY3JvbGxMZWZ0OiBzY3JvbGxMZWZ0LFxuICAgICAgICAgIHNjcm9sbFRvcDogc2Nyb2xsVG9wLFxuICAgICAgICAgIHdpZHRoOiB3aWR0aFxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHNjcm9sbFBvc2l0aW9uLnNjcm9sbExlZnQgIT09IHNjcm9sbExlZnQgfHwgc2Nyb2xsUG9zaXRpb24uc2Nyb2xsVG9wICE9PSBzY3JvbGxUb3ApIHtcbiAgICAgICAgICBfdGhpcy5fc2V0U2Nyb2xsUG9zaXRpb24oc2Nyb2xsUG9zaXRpb24pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgX2RlZmluZVByb3BlcnR5KF90aGlzLCBcIl9vblNjcm9sbFwiLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIC8vIEluIGNlcnRhaW4gZWRnZS1jYXNlcyBSZWFjdCBkaXNwYXRjaGVzIGFuIG9uU2Nyb2xsIGV2ZW50IHdpdGggYW4gaW52YWxpZCB0YXJnZXQuc2Nyb2xsTGVmdCAvIHRhcmdldC5zY3JvbGxUb3AuXG4gICAgICAvLyBUaGlzIGludmFsaWQgZXZlbnQgY2FuIGJlIGRldGVjdGVkIGJ5IGNvbXBhcmluZyBldmVudC50YXJnZXQgdG8gdGhpcyBjb21wb25lbnQncyBzY3JvbGxhYmxlIERPTSBlbGVtZW50LlxuICAgICAgLy8gU2VlIGlzc3VlICM0MDQgZm9yIG1vcmUgaW5mb3JtYXRpb24uXG4gICAgICBpZiAoZXZlbnQudGFyZ2V0ICE9PSBfdGhpcy5fc2Nyb2xsaW5nQ29udGFpbmVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gUHJldmVudCBwb2ludGVyIGV2ZW50cyBmcm9tIGludGVycnVwdGluZyBhIHNtb290aCBzY3JvbGxcbiAgICAgIF90aGlzLl9lbmFibGVQb2ludGVyRXZlbnRzQWZ0ZXJEZWxheSgpO1xuXG4gICAgICAvLyBXaGVuIHRoaXMgY29tcG9uZW50IGlzIHNocnVuayBkcmFzdGljYWxseSwgUmVhY3QgZGlzcGF0Y2hlcyBhIHNlcmllcyBvZiBiYWNrLXRvLWJhY2sgc2Nyb2xsIGV2ZW50cyxcbiAgICAgIC8vIEdyYWR1YWxseSBjb252ZXJnaW5nIG9uIGEgc2Nyb2xsVG9wIHRoYXQgaXMgd2l0aGluIHRoZSBib3VuZHMgb2YgdGhlIG5ldywgc21hbGxlciBoZWlnaHQuXG4gICAgICAvLyBUaGlzIGNhdXNlcyBhIHNlcmllcyBvZiByYXBpZCByZW5kZXJzIHRoYXQgaXMgc2xvdyBmb3IgbG9uZyBsaXN0cy5cbiAgICAgIC8vIFdlIGNhbiBhdm9pZCB0aGF0IGJ5IGRvaW5nIHNvbWUgc2ltcGxlIGJvdW5kcyBjaGVja2luZyB0byBlbnN1cmUgdGhhdCBzY3JvbGxUb3AgbmV2ZXIgZXhjZWVkcyB0aGUgdG90YWwgaGVpZ2h0LlxuICAgICAgdmFyIF90aGlzJHByb3BzMyA9IF90aGlzLnByb3BzLFxuICAgICAgICBjZWxsTGF5b3V0TWFuYWdlciA9IF90aGlzJHByb3BzMy5jZWxsTGF5b3V0TWFuYWdlcixcbiAgICAgICAgaGVpZ2h0ID0gX3RoaXMkcHJvcHMzLmhlaWdodCxcbiAgICAgICAgaXNTY3JvbGxpbmdDaGFuZ2UgPSBfdGhpcyRwcm9wczMuaXNTY3JvbGxpbmdDaGFuZ2UsXG4gICAgICAgIHdpZHRoID0gX3RoaXMkcHJvcHMzLndpZHRoO1xuICAgICAgdmFyIHNjcm9sbGJhclNpemUgPSBfdGhpcy5fc2Nyb2xsYmFyU2l6ZTtcbiAgICAgIHZhciBfY2VsbExheW91dE1hbmFnZXIkZ2UgPSBjZWxsTGF5b3V0TWFuYWdlci5nZXRUb3RhbFNpemUoKSxcbiAgICAgICAgdG90YWxIZWlnaHQgPSBfY2VsbExheW91dE1hbmFnZXIkZ2UuaGVpZ2h0LFxuICAgICAgICB0b3RhbFdpZHRoID0gX2NlbGxMYXlvdXRNYW5hZ2VyJGdlLndpZHRoO1xuICAgICAgdmFyIHNjcm9sbExlZnQgPSBNYXRoLm1heCgwLCBNYXRoLm1pbih0b3RhbFdpZHRoIC0gd2lkdGggKyBzY3JvbGxiYXJTaXplLCBldmVudC50YXJnZXQuc2Nyb2xsTGVmdCkpO1xuICAgICAgdmFyIHNjcm9sbFRvcCA9IE1hdGgubWF4KDAsIE1hdGgubWluKHRvdGFsSGVpZ2h0IC0gaGVpZ2h0ICsgc2Nyb2xsYmFyU2l6ZSwgZXZlbnQudGFyZ2V0LnNjcm9sbFRvcCkpO1xuXG4gICAgICAvLyBDZXJ0YWluIGRldmljZXMgKGxpa2UgQXBwbGUgdG91Y2hwYWQpIHJhcGlkLWZpcmUgZHVwbGljYXRlIGV2ZW50cy5cbiAgICAgIC8vIERvbid0IGZvcmNlIGEgcmUtcmVuZGVyIGlmIHRoaXMgaXMgdGhlIGNhc2UuXG4gICAgICAvLyBUaGUgbW91c2UgbWF5IG1vdmUgZmFzdGVyIHRoZW4gdGhlIGFuaW1hdGlvbiBmcmFtZSBkb2VzLlxuICAgICAgLy8gVXNlIHJlcXVlc3RBbmltYXRpb25GcmFtZSB0byBhdm9pZCBvdmVyLXVwZGF0aW5nLlxuICAgICAgaWYgKF90aGlzLnN0YXRlLnNjcm9sbExlZnQgIT09IHNjcm9sbExlZnQgfHwgX3RoaXMuc3RhdGUuc2Nyb2xsVG9wICE9PSBzY3JvbGxUb3ApIHtcbiAgICAgICAgLy8gQnJvd3NlcnMgd2l0aCBjYW5jZWxhYmxlIHNjcm9sbCBldmVudHMgKGVnLiBGaXJlZm94KSBpbnRlcnJ1cHQgc2Nyb2xsaW5nIGFuaW1hdGlvbnMgaWYgc2Nyb2xsVG9wL3Njcm9sbExlZnQgaXMgc2V0LlxuICAgICAgICAvLyBPdGhlciBicm93c2VycyAoZWcuIFNhZmFyaSkgZG9uJ3Qgc2Nyb2xsIGFzIHdlbGwgd2l0aG91dCB0aGUgaGVscCB1bmRlciBjZXJ0YWluIGNvbmRpdGlvbnMgKERPTSBvciBzdHlsZSBjaGFuZ2VzIGR1cmluZyBzY3JvbGxpbmcpLlxuICAgICAgICAvLyBBbGwgdGhpbmdzIGNvbnNpZGVyZWQsIHRoaXMgc2VlbXMgdG8gYmUgdGhlIGJlc3QgY3VycmVudCB3b3JrIGFyb3VuZCB0aGF0IEknbSBhd2FyZSBvZi5cbiAgICAgICAgLy8gRm9yIG1vcmUgaW5mb3JtYXRpb24gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9idmF1Z2huL3JlYWN0LXZpcnR1YWxpemVkL3B1bGwvMTI0XG4gICAgICAgIHZhciBzY3JvbGxQb3NpdGlvbkNoYW5nZVJlYXNvbiA9IGV2ZW50LmNhbmNlbGFibGUgPyBTQ1JPTExfUE9TSVRJT05fQ0hBTkdFX1JFQVNPTlMuT0JTRVJWRUQgOiBTQ1JPTExfUE9TSVRJT05fQ0hBTkdFX1JFQVNPTlMuUkVRVUVTVEVEO1xuXG4gICAgICAgIC8vIFN5bmNocm9ub3VzbHkgc2V0IDppc1Njcm9sbGluZyB0aGUgZmlyc3QgdGltZSAoc2luY2UgX3NldE5leHRTdGF0ZSB3aWxsIHJlc2NoZWR1bGUgaXRzIGFuaW1hdGlvbiBmcmFtZSBlYWNoIHRpbWUgaXQncyBjYWxsZWQpXG4gICAgICAgIGlmICghX3RoaXMuc3RhdGUuaXNTY3JvbGxpbmcpIHtcbiAgICAgICAgICBpc1Njcm9sbGluZ0NoYW5nZSh0cnVlKTtcbiAgICAgICAgfVxuICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgaXNTY3JvbGxpbmc6IHRydWUsXG4gICAgICAgICAgc2Nyb2xsTGVmdDogc2Nyb2xsTGVmdCxcbiAgICAgICAgICBzY3JvbGxQb3NpdGlvbkNoYW5nZVJlYXNvbjogc2Nyb2xsUG9zaXRpb25DaGFuZ2VSZWFzb24sXG4gICAgICAgICAgc2Nyb2xsVG9wOiBzY3JvbGxUb3BcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBfdGhpcy5faW52b2tlT25TY3JvbGxNZW1vaXplcih7XG4gICAgICAgIHNjcm9sbExlZnQ6IHNjcm9sbExlZnQsXG4gICAgICAgIHNjcm9sbFRvcDogc2Nyb2xsVG9wLFxuICAgICAgICB0b3RhbFdpZHRoOiB0b3RhbFdpZHRoLFxuICAgICAgICB0b3RhbEhlaWdodDogdG90YWxIZWlnaHRcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIF90aGlzLl9zY3JvbGxiYXJTaXplID0gZ2V0U2Nyb2xsYmFyU2l6ZSgpO1xuICAgIGlmIChfdGhpcy5fc2Nyb2xsYmFyU2l6ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBfdGhpcy5fc2Nyb2xsYmFyU2l6ZU1lYXN1cmVkID0gZmFsc2U7XG4gICAgICBfdGhpcy5fc2Nyb2xsYmFyU2l6ZSA9IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIF90aGlzLl9zY3JvbGxiYXJTaXplTWVhc3VyZWQgPSB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICAvKipcbiAgICogRm9yY2VkIHJlY29tcHV0ZSBvZiBjZWxsIHNpemVzIGFuZCBwb3NpdGlvbnMuXG4gICAqIFRoaXMgZnVuY3Rpb24gc2hvdWxkIGJlIGNhbGxlZCBpZiBjZWxsIHNpemVzIGhhdmUgY2hhbmdlZCBidXQgbm90aGluZyBlbHNlIGhhcy5cbiAgICogU2luY2UgY2VsbCBwb3NpdGlvbnMgYXJlIGNhbGN1bGF0ZWQgYnkgY2FsbGJhY2tzLCB0aGUgY29sbGVjdGlvbiB2aWV3IGhhcyBubyB3YXkgb2YgZGV0ZWN0aW5nIHdoZW4gdGhlIHVuZGVybHlpbmcgZGF0YSBoYXMgY2hhbmdlZC5cbiAgICovXG4gIF9pbmhlcml0cyhDb2xsZWN0aW9uVmlldywgX1JlYWN0JFB1cmVDb21wb25lbnQpO1xuICByZXR1cm4gX2NyZWF0ZUNsYXNzKENvbGxlY3Rpb25WaWV3LCBbe1xuICAgIGtleTogXCJyZWNvbXB1dGVDZWxsU2l6ZXNBbmRQb3NpdGlvbnNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVjb21wdXRlQ2VsbFNpemVzQW5kUG9zaXRpb25zKCkge1xuICAgICAgdGhpcy5fY2FsY3VsYXRlU2l6ZUFuZFBvc2l0aW9uRGF0YU9uTmV4dFVwZGF0ZSA9IHRydWU7XG4gICAgICB0aGlzLmZvcmNlVXBkYXRlKCk7XG4gICAgfVxuXG4gICAgLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBDb21wb25lbnQgbGlmZWN5Y2xlIG1ldGhvZHMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBUaGlzIG1ldGhvZCB1cGRhdGVzIHNjcm9sbExlZnQvc2Nyb2xsVG9wIGluIHN0YXRlIGZvciB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4gICAgICogMSkgRW1wdHkgY29udGVudCAoMCByb3dzIG9yIGNvbHVtbnMpXG4gICAgICogMikgTmV3IHNjcm9sbCBwcm9wcyBvdmVycmlkaW5nIHRoZSBjdXJyZW50IHN0YXRlXG4gICAgICogMykgQ2VsbHMtY291bnQgb3IgY2VsbHMtc2l6ZSBoYXMgY2hhbmdlZCwgbWFraW5nIHByZXZpb3VzIHNjcm9sbCBvZmZzZXRzIGludmFsaWRcbiAgICAgKi9cbiAgfSwge1xuICAgIGtleTogXCJjb21wb25lbnREaWRNb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczQgPSB0aGlzLnByb3BzLFxuICAgICAgICBjZWxsTGF5b3V0TWFuYWdlciA9IF90aGlzJHByb3BzNC5jZWxsTGF5b3V0TWFuYWdlcixcbiAgICAgICAgc2Nyb2xsTGVmdCA9IF90aGlzJHByb3BzNC5zY3JvbGxMZWZ0LFxuICAgICAgICBzY3JvbGxUb0NlbGwgPSBfdGhpcyRwcm9wczQuc2Nyb2xsVG9DZWxsLFxuICAgICAgICBzY3JvbGxUb3AgPSBfdGhpcyRwcm9wczQuc2Nyb2xsVG9wO1xuXG4gICAgICAvLyBJZiB0aGlzIGNvbXBvbmVudCB3YXMgZmlyc3QgcmVuZGVyZWQgc2VydmVyLXNpZGUsIHNjcm9sbGJhciBzaXplIHdpbGwgYmUgdW5kZWZpbmVkLlxuICAgICAgLy8gSW4gdGhhdCBldmVudCB3ZSBuZWVkIHRvIHJlbWVhc3VyZS5cbiAgICAgIGlmICghdGhpcy5fc2Nyb2xsYmFyU2l6ZU1lYXN1cmVkKSB7XG4gICAgICAgIHRoaXMuX3Njcm9sbGJhclNpemUgPSBnZXRTY3JvbGxiYXJTaXplKCk7XG4gICAgICAgIHRoaXMuX3Njcm9sbGJhclNpemVNZWFzdXJlZCA9IHRydWU7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe30pO1xuICAgICAgfVxuICAgICAgaWYgKHNjcm9sbFRvQ2VsbCA+PSAwKSB7XG4gICAgICAgIHRoaXMuX3VwZGF0ZVNjcm9sbFBvc2l0aW9uRm9yU2Nyb2xsVG9DZWxsKCk7XG4gICAgICB9IGVsc2UgaWYgKHNjcm9sbExlZnQgPj0gMCB8fCBzY3JvbGxUb3AgPj0gMCkge1xuICAgICAgICB0aGlzLl9zZXRTY3JvbGxQb3NpdGlvbih7XG4gICAgICAgICAgc2Nyb2xsTGVmdDogc2Nyb2xsTGVmdCxcbiAgICAgICAgICBzY3JvbGxUb3A6IHNjcm9sbFRvcFxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgLy8gVXBkYXRlIG9uU2VjdGlvblJlbmRlcmVkIGNhbGxiYWNrLlxuICAgICAgdGhpcy5faW52b2tlT25TZWN0aW9uUmVuZGVyZWRIZWxwZXIoKTtcbiAgICAgIHZhciBfY2VsbExheW91dE1hbmFnZXIkZ2UyID0gY2VsbExheW91dE1hbmFnZXIuZ2V0VG90YWxTaXplKCksXG4gICAgICAgIHRvdGFsSGVpZ2h0ID0gX2NlbGxMYXlvdXRNYW5hZ2VyJGdlMi5oZWlnaHQsXG4gICAgICAgIHRvdGFsV2lkdGggPSBfY2VsbExheW91dE1hbmFnZXIkZ2UyLndpZHRoO1xuXG4gICAgICAvLyBJbml0aWFsaXplIG9uU2Nyb2xsIGNhbGxiYWNrLlxuICAgICAgdGhpcy5faW52b2tlT25TY3JvbGxNZW1vaXplcih7XG4gICAgICAgIHNjcm9sbExlZnQ6IHNjcm9sbExlZnQgfHwgMCxcbiAgICAgICAgc2Nyb2xsVG9wOiBzY3JvbGxUb3AgfHwgMCxcbiAgICAgICAgdG90YWxIZWlnaHQ6IHRvdGFsSGVpZ2h0LFxuICAgICAgICB0b3RhbFdpZHRoOiB0b3RhbFdpZHRoXG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY29tcG9uZW50RGlkVXBkYXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMsIHByZXZTdGF0ZSkge1xuICAgICAgdmFyIF90aGlzJHByb3BzNSA9IHRoaXMucHJvcHMsXG4gICAgICAgIGhlaWdodCA9IF90aGlzJHByb3BzNS5oZWlnaHQsXG4gICAgICAgIHNjcm9sbFRvQWxpZ25tZW50ID0gX3RoaXMkcHJvcHM1LnNjcm9sbFRvQWxpZ25tZW50LFxuICAgICAgICBzY3JvbGxUb0NlbGwgPSBfdGhpcyRwcm9wczUuc2Nyb2xsVG9DZWxsLFxuICAgICAgICB3aWR0aCA9IF90aGlzJHByb3BzNS53aWR0aDtcbiAgICAgIHZhciBfdGhpcyRzdGF0ZTIgPSB0aGlzLnN0YXRlLFxuICAgICAgICBzY3JvbGxMZWZ0ID0gX3RoaXMkc3RhdGUyLnNjcm9sbExlZnQsXG4gICAgICAgIHNjcm9sbFBvc2l0aW9uQ2hhbmdlUmVhc29uID0gX3RoaXMkc3RhdGUyLnNjcm9sbFBvc2l0aW9uQ2hhbmdlUmVhc29uLFxuICAgICAgICBzY3JvbGxUb3AgPSBfdGhpcyRzdGF0ZTIuc2Nyb2xsVG9wO1xuXG4gICAgICAvLyBNYWtlIHN1cmUgcmVxdWVzdGVkIGNoYW5nZXMgdG8gOnNjcm9sbExlZnQgb3IgOnNjcm9sbFRvcCBnZXQgYXBwbGllZC5cbiAgICAgIC8vIEFzc2lnbmluZyB0byBzY3JvbGxMZWZ0L3Njcm9sbFRvcCB0ZWxscyB0aGUgYnJvd3NlciB0byBpbnRlcnJ1cHQgYW55IHJ1bm5pbmcgc2Nyb2xsIGFuaW1hdGlvbnMsXG4gICAgICAvLyBBbmQgdG8gZGlzY2FyZCBhbnkgcGVuZGluZyBhc3luYyBjaGFuZ2VzIHRvIHRoZSBzY3JvbGwgcG9zaXRpb24gdGhhdCBtYXkgaGF2ZSBoYXBwZW5lZCBpbiB0aGUgbWVhbnRpbWUgKGUuZy4gb24gYSBzZXBhcmF0ZSBzY3JvbGxpbmcgdGhyZWFkKS5cbiAgICAgIC8vIFNvIHdlIG9ubHkgc2V0IHRoZXNlIHdoZW4gd2UgcmVxdWlyZSBhbiBhZGp1c3RtZW50IG9mIHRoZSBzY3JvbGwgcG9zaXRpb24uXG4gICAgICAvLyBTZWUgaXNzdWUgIzIgZm9yIG1vcmUgaW5mb3JtYXRpb24uXG4gICAgICBpZiAoc2Nyb2xsUG9zaXRpb25DaGFuZ2VSZWFzb24gPT09IFNDUk9MTF9QT1NJVElPTl9DSEFOR0VfUkVBU09OUy5SRVFVRVNURUQpIHtcbiAgICAgICAgaWYgKHNjcm9sbExlZnQgPj0gMCAmJiBzY3JvbGxMZWZ0ICE9PSBwcmV2U3RhdGUuc2Nyb2xsTGVmdCAmJiBzY3JvbGxMZWZ0ICE9PSB0aGlzLl9zY3JvbGxpbmdDb250YWluZXIuc2Nyb2xsTGVmdCkge1xuICAgICAgICAgIHRoaXMuX3Njcm9sbGluZ0NvbnRhaW5lci5zY3JvbGxMZWZ0ID0gc2Nyb2xsTGVmdDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2Nyb2xsVG9wID49IDAgJiYgc2Nyb2xsVG9wICE9PSBwcmV2U3RhdGUuc2Nyb2xsVG9wICYmIHNjcm9sbFRvcCAhPT0gdGhpcy5fc2Nyb2xsaW5nQ29udGFpbmVyLnNjcm9sbFRvcCkge1xuICAgICAgICAgIHRoaXMuX3Njcm9sbGluZ0NvbnRhaW5lci5zY3JvbGxUb3AgPSBzY3JvbGxUb3A7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gVXBkYXRlIHNjcm9sbCBvZmZzZXRzIGlmIHRoZSBjdXJyZW50IDpzY3JvbGxUb0NlbGwgdmFsdWVzIHJlcXVpcmVzIGl0XG4gICAgICBpZiAoaGVpZ2h0ICE9PSBwcmV2UHJvcHMuaGVpZ2h0IHx8IHNjcm9sbFRvQWxpZ25tZW50ICE9PSBwcmV2UHJvcHMuc2Nyb2xsVG9BbGlnbm1lbnQgfHwgc2Nyb2xsVG9DZWxsICE9PSBwcmV2UHJvcHMuc2Nyb2xsVG9DZWxsIHx8IHdpZHRoICE9PSBwcmV2UHJvcHMud2lkdGgpIHtcbiAgICAgICAgdGhpcy5fdXBkYXRlU2Nyb2xsUG9zaXRpb25Gb3JTY3JvbGxUb0NlbGwoKTtcbiAgICAgIH1cblxuICAgICAgLy8gVXBkYXRlIG9uUm93c1JlbmRlcmVkIGNhbGxiYWNrIGlmIHN0YXJ0L3N0b3AgaW5kaWNlcyBoYXZlIGNoYW5nZWRcbiAgICAgIHRoaXMuX2ludm9rZU9uU2VjdGlvblJlbmRlcmVkSGVscGVyKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNvbXBvbmVudFdpbGxVbm1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgaWYgKHRoaXMuX2Rpc2FibGVQb2ludGVyRXZlbnRzVGltZW91dElkKSB7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aGlzLl9kaXNhYmxlUG9pbnRlckV2ZW50c1RpbWVvdXRJZCk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHM2ID0gdGhpcy5wcm9wcyxcbiAgICAgICAgYXV0b0hlaWdodCA9IF90aGlzJHByb3BzNi5hdXRvSGVpZ2h0LFxuICAgICAgICBjZWxsQ291bnQgPSBfdGhpcyRwcm9wczYuY2VsbENvdW50LFxuICAgICAgICBjZWxsTGF5b3V0TWFuYWdlciA9IF90aGlzJHByb3BzNi5jZWxsTGF5b3V0TWFuYWdlcixcbiAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHM2LmNsYXNzTmFtZSxcbiAgICAgICAgaGVpZ2h0ID0gX3RoaXMkcHJvcHM2LmhlaWdodCxcbiAgICAgICAgaG9yaXpvbnRhbE92ZXJzY2FuU2l6ZSA9IF90aGlzJHByb3BzNi5ob3Jpem9udGFsT3ZlcnNjYW5TaXplLFxuICAgICAgICBpZCA9IF90aGlzJHByb3BzNi5pZCxcbiAgICAgICAgbm9Db250ZW50UmVuZGVyZXIgPSBfdGhpcyRwcm9wczYubm9Db250ZW50UmVuZGVyZXIsXG4gICAgICAgIHN0eWxlID0gX3RoaXMkcHJvcHM2LnN0eWxlLFxuICAgICAgICB2ZXJ0aWNhbE92ZXJzY2FuU2l6ZSA9IF90aGlzJHByb3BzNi52ZXJ0aWNhbE92ZXJzY2FuU2l6ZSxcbiAgICAgICAgd2lkdGggPSBfdGhpcyRwcm9wczYud2lkdGg7XG4gICAgICB2YXIgX3RoaXMkc3RhdGUzID0gdGhpcy5zdGF0ZSxcbiAgICAgICAgaXNTY3JvbGxpbmcgPSBfdGhpcyRzdGF0ZTMuaXNTY3JvbGxpbmcsXG4gICAgICAgIHNjcm9sbExlZnQgPSBfdGhpcyRzdGF0ZTMuc2Nyb2xsTGVmdCxcbiAgICAgICAgc2Nyb2xsVG9wID0gX3RoaXMkc3RhdGUzLnNjcm9sbFRvcDtcblxuICAgICAgLy8gTWVtb2l6YXRpb24gcmVzZXRcbiAgICAgIGlmICh0aGlzLl9sYXN0UmVuZGVyZWRDZWxsQ291bnQgIT09IGNlbGxDb3VudCB8fCB0aGlzLl9sYXN0UmVuZGVyZWRDZWxsTGF5b3V0TWFuYWdlciAhPT0gY2VsbExheW91dE1hbmFnZXIgfHwgdGhpcy5fY2FsY3VsYXRlU2l6ZUFuZFBvc2l0aW9uRGF0YU9uTmV4dFVwZGF0ZSkge1xuICAgICAgICB0aGlzLl9sYXN0UmVuZGVyZWRDZWxsQ291bnQgPSBjZWxsQ291bnQ7XG4gICAgICAgIHRoaXMuX2xhc3RSZW5kZXJlZENlbGxMYXlvdXRNYW5hZ2VyID0gY2VsbExheW91dE1hbmFnZXI7XG4gICAgICAgIHRoaXMuX2NhbGN1bGF0ZVNpemVBbmRQb3NpdGlvbkRhdGFPbk5leHRVcGRhdGUgPSBmYWxzZTtcbiAgICAgICAgY2VsbExheW91dE1hbmFnZXIuY2FsY3VsYXRlU2l6ZUFuZFBvc2l0aW9uRGF0YSgpO1xuICAgICAgfVxuICAgICAgdmFyIF9jZWxsTGF5b3V0TWFuYWdlciRnZTMgPSBjZWxsTGF5b3V0TWFuYWdlci5nZXRUb3RhbFNpemUoKSxcbiAgICAgICAgdG90YWxIZWlnaHQgPSBfY2VsbExheW91dE1hbmFnZXIkZ2UzLmhlaWdodCxcbiAgICAgICAgdG90YWxXaWR0aCA9IF9jZWxsTGF5b3V0TWFuYWdlciRnZTMud2lkdGg7XG5cbiAgICAgIC8vIFNhZmVseSBleHBhbmQgdGhlIHJlbmRlcmVkIGFyZWEgYnkgdGhlIHNwZWNpZmllZCBvdmVyc2NhbiBhbW91bnRcbiAgICAgIHZhciBsZWZ0ID0gTWF0aC5tYXgoMCwgc2Nyb2xsTGVmdCAtIGhvcml6b250YWxPdmVyc2NhblNpemUpO1xuICAgICAgdmFyIHRvcCA9IE1hdGgubWF4KDAsIHNjcm9sbFRvcCAtIHZlcnRpY2FsT3ZlcnNjYW5TaXplKTtcbiAgICAgIHZhciByaWdodCA9IE1hdGgubWluKHRvdGFsV2lkdGgsIHNjcm9sbExlZnQgKyB3aWR0aCArIGhvcml6b250YWxPdmVyc2NhblNpemUpO1xuICAgICAgdmFyIGJvdHRvbSA9IE1hdGgubWluKHRvdGFsSGVpZ2h0LCBzY3JvbGxUb3AgKyBoZWlnaHQgKyB2ZXJ0aWNhbE92ZXJzY2FuU2l6ZSk7XG4gICAgICB2YXIgY2hpbGRyZW5Ub0Rpc3BsYXkgPSBoZWlnaHQgPiAwICYmIHdpZHRoID4gMCA/IGNlbGxMYXlvdXRNYW5hZ2VyLmNlbGxSZW5kZXJlcnMoe1xuICAgICAgICBoZWlnaHQ6IGJvdHRvbSAtIHRvcCxcbiAgICAgICAgaXNTY3JvbGxpbmc6IGlzU2Nyb2xsaW5nLFxuICAgICAgICB3aWR0aDogcmlnaHQgLSBsZWZ0LFxuICAgICAgICB4OiBsZWZ0LFxuICAgICAgICB5OiB0b3BcbiAgICAgIH0pIDogW107XG4gICAgICB2YXIgY29sbGVjdGlvblN0eWxlID0ge1xuICAgICAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICAgICAgZGlyZWN0aW9uOiAnbHRyJyxcbiAgICAgICAgaGVpZ2h0OiBhdXRvSGVpZ2h0ID8gJ2F1dG8nIDogaGVpZ2h0LFxuICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgICAgV2Via2l0T3ZlcmZsb3dTY3JvbGxpbmc6ICd0b3VjaCcsXG4gICAgICAgIHdpZHRoOiB3aWR0aCxcbiAgICAgICAgd2lsbENoYW5nZTogJ3RyYW5zZm9ybSdcbiAgICAgIH07XG5cbiAgICAgIC8vIEZvcmNlIGJyb3dzZXIgdG8gaGlkZSBzY3JvbGxiYXJzIHdoZW4gd2Uga25vdyB0aGV5IGFyZW4ndCBuZWNlc3NhcnkuXG4gICAgICAvLyBPdGhlcndpc2Ugb25jZSBzY3JvbGxiYXJzIGFwcGVhciB0aGV5IG1heSBub3QgZGlzYXBwZWFyIGFnYWluLlxuICAgICAgLy8gRm9yIG1vcmUgaW5mbyBzZWUgaXNzdWUgIzExNlxuICAgICAgdmFyIHZlcnRpY2FsU2Nyb2xsQmFyU2l6ZSA9IHRvdGFsSGVpZ2h0ID4gaGVpZ2h0ID8gdGhpcy5fc2Nyb2xsYmFyU2l6ZSA6IDA7XG4gICAgICB2YXIgaG9yaXpvbnRhbFNjcm9sbEJhclNpemUgPSB0b3RhbFdpZHRoID4gd2lkdGggPyB0aGlzLl9zY3JvbGxiYXJTaXplIDogMDtcblxuICAgICAgLy8gQWxzbyBleHBsaWNpdGx5IGluaXQgc3R5bGVzIHRvICdhdXRvJyBpZiBzY3JvbGxiYXJzIGFyZSByZXF1aXJlZC5cbiAgICAgIC8vIFRoaXMgd29ya3MgYXJvdW5kIGFuIG9ic2N1cmUgZWRnZSBjYXNlIHdoZXJlIGV4dGVybmFsIENTUyBzdHlsZXMgaGF2ZSBub3QgeWV0IGJlZW4gbG9hZGVkLFxuICAgICAgLy8gQnV0IGFuIGluaXRpYWwgc2Nyb2xsIGluZGV4IG9mIG9mZnNldCBpcyBzZXQgYXMgYW4gZXh0ZXJuYWwgcHJvcC5cbiAgICAgIC8vIFdpdGhvdXQgdGhpcyBzdHlsZSwgR3JpZCB3b3VsZCByZW5kZXIgdGhlIGNvcnJlY3QgcmFuZ2Ugb2YgY2VsbHMgYnV0IHdvdWxkIE5PVCB1cGRhdGUgaXRzIGludGVybmFsIG9mZnNldC5cbiAgICAgIC8vIFRoaXMgd2FzIG9yaWdpbmFsbHkgcmVwb3J0ZWQgdmlhIGNsYXVkZXJpYy9yZWFjdC1pbmZpbml0ZS1jYWxlbmRhci9pc3N1ZXMvMjNcbiAgICAgIGNvbGxlY3Rpb25TdHlsZS5vdmVyZmxvd1ggPSB0b3RhbFdpZHRoICsgdmVydGljYWxTY3JvbGxCYXJTaXplIDw9IHdpZHRoID8gJ2hpZGRlbicgOiAnYXV0byc7XG4gICAgICBjb2xsZWN0aW9uU3R5bGUub3ZlcmZsb3dZID0gdG90YWxIZWlnaHQgKyBob3Jpem9udGFsU2Nyb2xsQmFyU2l6ZSA8PSBoZWlnaHQgPyAnaGlkZGVuJyA6ICdhdXRvJztcbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgIHJlZjogdGhpcy5fc2V0U2Nyb2xsaW5nQ29udGFpbmVyUmVmLFxuICAgICAgICBcImFyaWEtbGFiZWxcIjogdGhpcy5wcm9wc1snYXJpYS1sYWJlbCddLFxuICAgICAgICBjbGFzc05hbWU6IGNsc3goJ1JlYWN0VmlydHVhbGl6ZWRfX0NvbGxlY3Rpb24nLCBjbGFzc05hbWUpLFxuICAgICAgICBpZDogaWQsXG4gICAgICAgIG9uU2Nyb2xsOiB0aGlzLl9vblNjcm9sbCxcbiAgICAgICAgcm9sZTogXCJncmlkXCIsXG4gICAgICAgIHN0eWxlOiBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIGNvbGxlY3Rpb25TdHlsZSksIHN0eWxlKSxcbiAgICAgICAgdGFiSW5kZXg6IDBcbiAgICAgIH0sIGNlbGxDb3VudCA+IDAgJiYgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICBjbGFzc05hbWU6IFwiUmVhY3RWaXJ0dWFsaXplZF9fQ29sbGVjdGlvbl9faW5uZXJTY3JvbGxDb250YWluZXJcIixcbiAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICBoZWlnaHQ6IHRvdGFsSGVpZ2h0LFxuICAgICAgICAgIG1heEhlaWdodDogdG90YWxIZWlnaHQsXG4gICAgICAgICAgbWF4V2lkdGg6IHRvdGFsV2lkdGgsXG4gICAgICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgICAgICAgIHBvaW50ZXJFdmVudHM6IGlzU2Nyb2xsaW5nID8gJ25vbmUnIDogJycsXG4gICAgICAgICAgd2lkdGg6IHRvdGFsV2lkdGhcbiAgICAgICAgfVxuICAgICAgfSwgY2hpbGRyZW5Ub0Rpc3BsYXkpLCBjZWxsQ291bnQgPT09IDAgJiYgbm9Db250ZW50UmVuZGVyZXIoKSk7XG4gICAgfVxuXG4gICAgLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBIZWxwZXIgbWV0aG9kcyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cbiAgICAvKipcbiAgICAgKiBTZXRzIGFuIDppc1Njcm9sbGluZyBmbGFnIGZvciBhIHNtYWxsIHdpbmRvdyBvZiB0aW1lLlxuICAgICAqIFRoaXMgZmxhZyBpcyB1c2VkIHRvIGRpc2FibGUgcG9pbnRlciBldmVudHMgb24gdGhlIHNjcm9sbGFibGUgcG9ydGlvbiBvZiB0aGUgQ29sbGVjdGlvbi5cbiAgICAgKiBUaGlzIHByZXZlbnRzIGplcmt5L3N0dXR0ZXJ5IG1vdXNlLXdoZWVsIHNjcm9sbGluZy5cbiAgICAgKi9cbiAgfSwge1xuICAgIGtleTogXCJfZW5hYmxlUG9pbnRlckV2ZW50c0FmdGVyRGVsYXlcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2VuYWJsZVBvaW50ZXJFdmVudHNBZnRlckRlbGF5KCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG4gICAgICBpZiAodGhpcy5fZGlzYWJsZVBvaW50ZXJFdmVudHNUaW1lb3V0SWQpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuX2Rpc2FibGVQb2ludGVyRXZlbnRzVGltZW91dElkKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX2Rpc2FibGVQb2ludGVyRXZlbnRzVGltZW91dElkID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBpc1Njcm9sbGluZ0NoYW5nZSA9IF90aGlzMi5wcm9wcy5pc1Njcm9sbGluZ0NoYW5nZTtcbiAgICAgICAgaXNTY3JvbGxpbmdDaGFuZ2UoZmFsc2UpO1xuICAgICAgICBfdGhpczIuX2Rpc2FibGVQb2ludGVyRXZlbnRzVGltZW91dElkID0gbnVsbDtcbiAgICAgICAgX3RoaXMyLnNldFN0YXRlKHtcbiAgICAgICAgICBpc1Njcm9sbGluZzogZmFsc2VcbiAgICAgICAgfSk7XG4gICAgICB9LCBJU19TQ1JPTExJTkdfVElNRU9VVCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIl9pbnZva2VPblNjcm9sbE1lbW9pemVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9pbnZva2VPblNjcm9sbE1lbW9pemVyKF9yZWYpIHtcbiAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuICAgICAgdmFyIHNjcm9sbExlZnQgPSBfcmVmLnNjcm9sbExlZnQsXG4gICAgICAgIHNjcm9sbFRvcCA9IF9yZWYuc2Nyb2xsVG9wLFxuICAgICAgICB0b3RhbEhlaWdodCA9IF9yZWYudG90YWxIZWlnaHQsXG4gICAgICAgIHRvdGFsV2lkdGggPSBfcmVmLnRvdGFsV2lkdGg7XG4gICAgICB0aGlzLl9vblNjcm9sbE1lbW9pemVyKHtcbiAgICAgICAgY2FsbGJhY2s6IGZ1bmN0aW9uIGNhbGxiYWNrKF9yZWYyKSB7XG4gICAgICAgICAgdmFyIHNjcm9sbExlZnQgPSBfcmVmMi5zY3JvbGxMZWZ0LFxuICAgICAgICAgICAgc2Nyb2xsVG9wID0gX3JlZjIuc2Nyb2xsVG9wO1xuICAgICAgICAgIHZhciBfdGhpczMkcHJvcHMgPSBfdGhpczMucHJvcHMsXG4gICAgICAgICAgICBoZWlnaHQgPSBfdGhpczMkcHJvcHMuaGVpZ2h0LFxuICAgICAgICAgICAgb25TY3JvbGwgPSBfdGhpczMkcHJvcHMub25TY3JvbGwsXG4gICAgICAgICAgICB3aWR0aCA9IF90aGlzMyRwcm9wcy53aWR0aDtcbiAgICAgICAgICBvblNjcm9sbCh7XG4gICAgICAgICAgICBjbGllbnRIZWlnaHQ6IGhlaWdodCxcbiAgICAgICAgICAgIGNsaWVudFdpZHRoOiB3aWR0aCxcbiAgICAgICAgICAgIHNjcm9sbEhlaWdodDogdG90YWxIZWlnaHQsXG4gICAgICAgICAgICBzY3JvbGxMZWZ0OiBzY3JvbGxMZWZ0LFxuICAgICAgICAgICAgc2Nyb2xsVG9wOiBzY3JvbGxUb3AsXG4gICAgICAgICAgICBzY3JvbGxXaWR0aDogdG90YWxXaWR0aFxuICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBpbmRpY2VzOiB7XG4gICAgICAgICAgc2Nyb2xsTGVmdDogc2Nyb2xsTGVmdCxcbiAgICAgICAgICBzY3JvbGxUb3A6IHNjcm9sbFRvcFxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiX3NldFNjcm9sbFBvc2l0aW9uXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9zZXRTY3JvbGxQb3NpdGlvbihfcmVmMykge1xuICAgICAgdmFyIHNjcm9sbExlZnQgPSBfcmVmMy5zY3JvbGxMZWZ0LFxuICAgICAgICBzY3JvbGxUb3AgPSBfcmVmMy5zY3JvbGxUb3A7XG4gICAgICB2YXIgbmV3U3RhdGUgPSB7XG4gICAgICAgIHNjcm9sbFBvc2l0aW9uQ2hhbmdlUmVhc29uOiBTQ1JPTExfUE9TSVRJT05fQ0hBTkdFX1JFQVNPTlMuUkVRVUVTVEVEXG4gICAgICB9O1xuICAgICAgaWYgKHNjcm9sbExlZnQgPj0gMCkge1xuICAgICAgICBuZXdTdGF0ZS5zY3JvbGxMZWZ0ID0gc2Nyb2xsTGVmdDtcbiAgICAgIH1cbiAgICAgIGlmIChzY3JvbGxUb3AgPj0gMCkge1xuICAgICAgICBuZXdTdGF0ZS5zY3JvbGxUb3AgPSBzY3JvbGxUb3A7XG4gICAgICB9XG4gICAgICBpZiAoc2Nyb2xsTGVmdCA+PSAwICYmIHNjcm9sbExlZnQgIT09IHRoaXMuc3RhdGUuc2Nyb2xsTGVmdCB8fCBzY3JvbGxUb3AgPj0gMCAmJiBzY3JvbGxUb3AgIT09IHRoaXMuc3RhdGUuc2Nyb2xsVG9wKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUobmV3U3RhdGUpO1xuICAgICAgfVxuICAgIH1cbiAgfV0sIFt7XG4gICAga2V5OiBcImdldERlcml2ZWRTdGF0ZUZyb21Qcm9wc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMobmV4dFByb3BzLCBwcmV2U3RhdGUpIHtcbiAgICAgIGlmIChuZXh0UHJvcHMuY2VsbENvdW50ID09PSAwICYmIChwcmV2U3RhdGUuc2Nyb2xsTGVmdCAhPT0gMCB8fCBwcmV2U3RhdGUuc2Nyb2xsVG9wICE9PSAwKSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHNjcm9sbExlZnQ6IDAsXG4gICAgICAgICAgc2Nyb2xsVG9wOiAwLFxuICAgICAgICAgIHNjcm9sbFBvc2l0aW9uQ2hhbmdlUmVhc29uOiBTQ1JPTExfUE9TSVRJT05fQ0hBTkdFX1JFQVNPTlMuUkVRVUVTVEVEXG4gICAgICAgIH07XG4gICAgICB9IGVsc2UgaWYgKG5leHRQcm9wcy5zY3JvbGxMZWZ0ICE9PSBwcmV2U3RhdGUuc2Nyb2xsTGVmdCB8fCBuZXh0UHJvcHMuc2Nyb2xsVG9wICE9PSBwcmV2U3RhdGUuc2Nyb2xsVG9wKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgc2Nyb2xsTGVmdDogbmV4dFByb3BzLnNjcm9sbExlZnQgIT0gbnVsbCA/IG5leHRQcm9wcy5zY3JvbGxMZWZ0IDogcHJldlN0YXRlLnNjcm9sbExlZnQsXG4gICAgICAgICAgc2Nyb2xsVG9wOiBuZXh0UHJvcHMuc2Nyb2xsVG9wICE9IG51bGwgPyBuZXh0UHJvcHMuc2Nyb2xsVG9wIDogcHJldlN0YXRlLnNjcm9sbFRvcCxcbiAgICAgICAgICBzY3JvbGxQb3NpdGlvbkNoYW5nZVJlYXNvbjogU0NST0xMX1BPU0lUSU9OX0NIQU5HRV9SRUFTT05TLlJFUVVFU1RFRFxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XSk7XG59KFJlYWN0LlB1cmVDb21wb25lbnQpO1xuX2RlZmluZVByb3BlcnR5KENvbGxlY3Rpb25WaWV3LCBcImRlZmF1bHRQcm9wc1wiLCB7XG4gICdhcmlhLWxhYmVsJzogJ2dyaWQnLFxuICBob3Jpem9udGFsT3ZlcnNjYW5TaXplOiAwLFxuICBub0NvbnRlbnRSZW5kZXJlcjogZnVuY3Rpb24gbm9Db250ZW50UmVuZGVyZXIoKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH0sXG4gIG9uU2Nyb2xsOiBmdW5jdGlvbiBvblNjcm9sbCgpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfSxcbiAgb25TZWN0aW9uUmVuZGVyZWQ6IGZ1bmN0aW9uIG9uU2VjdGlvblJlbmRlcmVkKCkge1xuICAgIHJldHVybiBudWxsO1xuICB9LFxuICBzY3JvbGxUb0FsaWdubWVudDogJ2F1dG8nLFxuICBzY3JvbGxUb0NlbGw6IC0xLFxuICBzdHlsZToge30sXG4gIHZlcnRpY2FsT3ZlcnNjYW5TaXplOiAwXG59KTtcbkNvbGxlY3Rpb25WaWV3LnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgJ2FyaWEtbGFiZWwnOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogUmVtb3ZlcyBmaXhlZCBoZWlnaHQgZnJvbSB0aGUgc2Nyb2xsaW5nQ29udGFpbmVyIHNvIHRoYXQgdGhlIHRvdGFsIGhlaWdodFxuICAgKiBvZiByb3dzIGNhbiBzdHJldGNoIHRoZSB3aW5kb3cuIEludGVuZGVkIGZvciB1c2Ugd2l0aCBXaW5kb3dTY3JvbGxlclxuICAgKi9cbiAgYXV0b0hlaWdodDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBOdW1iZXIgb2YgY2VsbHMgaW4gY29sbGVjdGlvbi5cbiAgICovXG4gIGNlbGxDb3VudDogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkLFxuICAvKipcbiAgICogQ2FsY3VsYXRlcyBjZWxsIHNpemVzIGFuZCBwb3NpdGlvbnMgYW5kIG1hbmFnZXMgcmVuZGVyaW5nIHRoZSBhcHByb3ByaWF0ZSBjZWxscyBnaXZlbiBhIHNwZWNpZmllZCB3aW5kb3cuXG4gICAqL1xuICBjZWxsTGF5b3V0TWFuYWdlcjogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICAvKipcbiAgICogT3B0aW9uYWwgY3VzdG9tIENTUyBjbGFzcyBuYW1lIHRvIGF0dGFjaCB0byByb290IENvbGxlY3Rpb24gZWxlbWVudC5cbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIEhlaWdodCBvZiBDb2xsZWN0aW9uOyB0aGlzIHByb3BlcnR5IGRldGVybWluZXMgdGhlIG51bWJlciBvZiB2aXNpYmxlICh2cyB2aXJ0dWFsaXplZCkgcm93cy5cbiAgICovXG4gIGhlaWdodDogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkLFxuICAvKipcbiAgICogT3B0aW9uYWwgY3VzdG9tIGlkIHRvIGF0dGFjaCB0byByb290IENvbGxlY3Rpb24gZWxlbWVudC5cbiAgICovXG4gIGlkOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogRW5hYmxlcyB0aGUgYENvbGxlY3Rpb25gIHRvIGhvcmlvbnRhbGx5IFwib3ZlcnNjYW5cIiBpdHMgY29udGVudCBzaW1pbGFyIHRvIGhvdyBgR3JpZGAgZG9lcy5cbiAgICogVGhpcyBjYW4gcmVkdWNlIGZsaWNrZXIgYXJvdW5kIHRoZSBlZGdlcyB3aGVuIGEgdXNlciBzY3JvbGxzIHF1aWNrbHkuXG4gICAqL1xuICBob3Jpem9udGFsT3ZlcnNjYW5TaXplOiBQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWQsXG4gIGlzU2Nyb2xsaW5nQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIE9wdGlvbmFsIHJlbmRlcmVyIHRvIGJlIHVzZWQgaW4gcGxhY2Ugb2Ygcm93cyB3aGVuIGVpdGhlciA6cm93Q291bnQgb3IgOmNlbGxDb3VudCBpcyAwLlxuICAgKi9cbiAgbm9Db250ZW50UmVuZGVyZXI6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIC8qKlxuICAgKiBDYWxsYmFjayBpbnZva2VkIHdoZW5ldmVyIHRoZSBzY3JvbGwgb2Zmc2V0IGNoYW5nZXMgd2l0aGluIHRoZSBpbm5lciBzY3JvbGxhYmxlIHJlZ2lvbi5cbiAgICogVGhpcyBjYWxsYmFjayBjYW4gYmUgdXNlZCB0byBzeW5jIHNjcm9sbGluZyBiZXR3ZWVuIGxpc3RzLCB0YWJsZXMsIG9yIGdyaWRzLlxuICAgKiAoeyBjbGllbnRIZWlnaHQsIGNsaWVudFdpZHRoLCBzY3JvbGxIZWlnaHQsIHNjcm9sbExlZnQsIHNjcm9sbFRvcCwgc2Nyb2xsV2lkdGggfSk6IHZvaWRcbiAgICovXG4gIG9uU2Nyb2xsOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAvKipcbiAgICogQ2FsbGJhY2sgaW52b2tlZCB3aXRoIGluZm9ybWF0aW9uIGFib3V0IHRoZSBzZWN0aW9uIG9mIHRoZSBDb2xsZWN0aW9uIHRoYXQgd2FzIGp1c3QgcmVuZGVyZWQuXG4gICAqIFRoaXMgY2FsbGJhY2sgaXMgcGFzc2VkIGEgbmFtZWQgOmluZGljZXMgcGFyYW1ldGVyIHdoaWNoIGlzIGFuIEFycmF5IG9mIHRoZSBtb3N0IHJlY2VudGx5IHJlbmRlcmVkIHNlY3Rpb24gaW5kaWNlcy5cbiAgICovXG4gIG9uU2VjdGlvblJlbmRlcmVkOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAvKipcbiAgICogSG9yaXpvbnRhbCBvZmZzZXQuXG4gICAqL1xuICBzY3JvbGxMZWZ0OiBQcm9wVHlwZXMubnVtYmVyLFxuICAvKipcbiAgICogQ29udHJvbHMgc2Nyb2xsLXRvLWNlbGwgYmVoYXZpb3Igb2YgdGhlIEdyaWQuXG4gICAqIFRoZSBkZWZhdWx0IChcImF1dG9cIikgc2Nyb2xscyB0aGUgbGVhc3QgYW1vdW50IHBvc3NpYmxlIHRvIGVuc3VyZSB0aGF0IHRoZSBzcGVjaWZpZWQgY2VsbCBpcyBmdWxseSB2aXNpYmxlLlxuICAgKiBVc2UgXCJzdGFydFwiIHRvIGFsaWduIGNlbGxzIHRvIHRoZSB0b3AvbGVmdCBvZiB0aGUgR3JpZCBhbmQgXCJlbmRcIiB0byBhbGlnbiBib3R0b20vcmlnaHQuXG4gICAqL1xuICBzY3JvbGxUb0FsaWdubWVudDogUHJvcFR5cGVzLm9uZU9mKFsnYXV0bycsICdlbmQnLCAnc3RhcnQnLCAnY2VudGVyJ10pLmlzUmVxdWlyZWQsXG4gIC8qKlxuICAgKiBDZWxsIGluZGV4IHRvIGVuc3VyZSB2aXNpYmxlIChieSBmb3JjZWZ1bGx5IHNjcm9sbGluZyBpZiBuZWNlc3NhcnkpLlxuICAgKi9cbiAgc2Nyb2xsVG9DZWxsOiBQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWQsXG4gIC8qKlxuICAgKiBWZXJ0aWNhbCBvZmZzZXQuXG4gICAqL1xuICBzY3JvbGxUb3A6IFByb3BUeXBlcy5udW1iZXIsXG4gIC8qKlxuICAgKiBPcHRpb25hbCBjdXN0b20gaW5saW5lIHN0eWxlIHRvIGF0dGFjaCB0byByb290IENvbGxlY3Rpb24gZWxlbWVudC5cbiAgICovXG4gIHN0eWxlOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogRW5hYmxlcyB0aGUgYENvbGxlY3Rpb25gIHRvIHZlcnRpY2FsbHkgXCJvdmVyc2NhblwiIGl0cyBjb250ZW50IHNpbWlsYXIgdG8gaG93IGBHcmlkYCBkb2VzLlxuICAgKiBUaGlzIGNhbiByZWR1Y2UgZmxpY2tlciBhcm91bmQgdGhlIGVkZ2VzIHdoZW4gYSB1c2VyIHNjcm9sbHMgcXVpY2tseS5cbiAgICovXG4gIHZlcnRpY2FsT3ZlcnNjYW5TaXplOiBQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWQsXG4gIC8qKlxuICAgKiBXaWR0aCBvZiBDb2xsZWN0aW9uOyB0aGlzIHByb3BlcnR5IGRldGVybWluZXMgdGhlIG51bWJlciBvZiB2aXNpYmxlICh2cyB2aXJ0dWFsaXplZCkgY29sdW1ucy5cbiAgICovXG4gIHdpZHRoOiBQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWRcbn0gOiB7fTtcbnBvbHlmaWxsKENvbGxlY3Rpb25WaWV3KTtcbmV4cG9ydCBkZWZhdWx0IENvbGxlY3Rpb25WaWV3OyIsImltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIjtcbmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3NcIjtcbi8qOjogaW1wb3J0IHR5cGUge0luZGV4LCBTaXplQW5kUG9zaXRpb25JbmZvfSBmcm9tICcuL3R5cGVzJzsqL1xuLyoqXG4gKiBBIHNlY3Rpb24gb2YgdGhlIFdpbmRvdy5cbiAqIFdpbmRvdyBTZWN0aW9ucyBhcmUgdXNlZCB0byBncm91cCBuZWFyYnkgY2VsbHMuXG4gKiBUaGlzIGVuYWJsZXMgdXMgdG8gbW9yZSBxdWlja2x5IGRldGVybWluZSB3aGljaCBjZWxscyB0byBkaXNwbGF5IGluIGEgZ2l2ZW4gcmVnaW9uIG9mIHRoZSBXaW5kb3cuXG4gKiBTZWN0aW9ucyBoYXZlIGEgZml4ZWQgc2l6ZSBhbmQgY29udGFpbiAwIHRvIG1hbnkgY2VsbHMgKHRyYWNrZWQgYnkgdGhlaXIgaW5kaWNlcykuXG4gKi9cbnZhciBTZWN0aW9uID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU2VjdGlvbihfcmVmIC8qOjogKi8pIHtcbiAgICB2YXIgaGVpZ2h0ID0gX3JlZiAvKjo6ICovLmhlaWdodCxcbiAgICAgIHdpZHRoID0gX3JlZiAvKjo6ICovLndpZHRoLFxuICAgICAgeCA9IF9yZWYgLyo6OiAqLy54LFxuICAgICAgeSA9IF9yZWYgLyo6OiAqLy55O1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTZWN0aW9uKTtcbiAgICB0aGlzLmhlaWdodCA9IGhlaWdodDtcbiAgICB0aGlzLndpZHRoID0gd2lkdGg7XG4gICAgdGhpcy54ID0geDtcbiAgICB0aGlzLnkgPSB5O1xuICAgIHRoaXMuX2luZGV4TWFwID0ge307XG4gICAgdGhpcy5faW5kaWNlcyA9IFtdO1xuICB9XG5cbiAgLyoqIEFkZCBhIGNlbGwgdG8gdGhpcyBzZWN0aW9uLiAqL1xuICByZXR1cm4gX2NyZWF0ZUNsYXNzKFNlY3Rpb24sIFt7XG4gICAga2V5OiBcImFkZENlbGxJbmRleFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRDZWxsSW5kZXgoX3JlZjIgLyo6OiAqLykge1xuICAgICAgdmFyIGluZGV4ID0gX3JlZjIgLyo6OiAqLy5pbmRleDtcbiAgICAgIGlmICghdGhpcy5faW5kZXhNYXBbaW5kZXhdKSB7XG4gICAgICAgIHRoaXMuX2luZGV4TWFwW2luZGV4XSA9IHRydWU7XG4gICAgICAgIHRoaXMuX2luZGljZXMucHVzaChpbmRleCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqIEdldCBhbGwgY2VsbCBpbmRpY2VzIHRoYXQgaGF2ZSBiZWVuIGFkZGVkIHRvIHRoaXMgc2VjdGlvbi4gKi9cbiAgfSwge1xuICAgIGtleTogXCJnZXRDZWxsSW5kaWNlc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRDZWxsSW5kaWNlcygpIC8qOiBBcnJheTxudW1iZXI+Ki97XG4gICAgICByZXR1cm4gdGhpcy5faW5kaWNlcztcbiAgICB9XG5cbiAgICAvKiogSW50ZW5kZWQgZm9yIGRlYnVnZ2VyL3Rlc3QgcHVycG9zZXMgb25seSAqL1xuICB9LCB7XG4gICAga2V5OiBcInRvU3RyaW5nXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgICAgcmV0dXJuIFwiXCIuY29uY2F0KHRoaXMueCwgXCIsXCIpLmNvbmNhdCh0aGlzLnksIFwiIFwiKS5jb25jYXQodGhpcy53aWR0aCwgXCJ4XCIpLmNvbmNhdCh0aGlzLmhlaWdodCk7XG4gICAgfVxuICB9XSk7XG59KCk7XG5leHBvcnQgeyBTZWN0aW9uIGFzIGRlZmF1bHQgfTsiLCJpbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCI7XG5pbXBvcnQgX2NyZWF0ZUNsYXNzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzXCI7XG4vKipcbiAqIFdpbmRvdyBTZWN0aW9ucyBhcmUgdXNlZCB0byBncm91cCBuZWFyYnkgY2VsbHMuXG4gKiBUaGlzIGVuYWJsZXMgdXMgdG8gbW9yZSBxdWlja2x5IGRldGVybWluZSB3aGljaCBjZWxscyB0byBkaXNwbGF5IGluIGEgZ2l2ZW4gcmVnaW9uIG9mIHRoZSBXaW5kb3cuXG4gKiBcbiAqL1xuaW1wb3J0IFNlY3Rpb24gZnJvbSAnLi9TZWN0aW9uJztcbi8qOjogaW1wb3J0IHR5cGUge0luZGV4LCBTaXplQW5kUG9zaXRpb25JbmZvfSBmcm9tICcuL3R5cGVzJzsqL1xudmFyIFNFQ1RJT05fU0laRSA9IDEwMDtcbi8qOjogdHlwZSBSZWdpc3RlckNlbGxQYXJhbXMgPSB7XG4gIGNlbGxNZXRhZGF0dW06IFNpemVBbmRQb3NpdGlvbkluZm8sXG4gIGluZGV4OiBudW1iZXIsXG59OyovXG4vKipcbiAqIENvbnRhaW5zIDAgdG8gbWFueSBTZWN0aW9ucy5cbiAqIEdyb3dzIChhbmQgYWRkcyBTZWN0aW9ucykgZHluYW1pY2FsbHkgYXMgY2VsbHMgYXJlIHJlZ2lzdGVyZWQuXG4gKiBBdXRvbWF0aWNhbGx5IGFkZHMgY2VsbHMgdG8gdGhlIGFwcHJvcHJpYXRlIFNlY3Rpb24ocykuXG4gKi9cbnZhciBTZWN0aW9uTWFuYWdlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFNlY3Rpb25NYW5hZ2VyKCkge1xuICAgIHZhciBzZWN0aW9uU2l6ZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogU0VDVElPTl9TSVpFO1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTZWN0aW9uTWFuYWdlcik7XG4gICAgdGhpcy5fc2VjdGlvblNpemUgPSBzZWN0aW9uU2l6ZTtcbiAgICB0aGlzLl9jZWxsTWV0YWRhdGEgPSBbXTtcbiAgICB0aGlzLl9zZWN0aW9ucyA9IHt9O1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgYWxsIGNlbGwgaW5kaWNlcyBjb250YWluZWQgaW4gdGhlIHNwZWNpZmllZCByZWdpb24uXG4gICAqIEEgcmVnaW9uIG1heSBlbmNvbXBhc3MgMSBvciBtb3JlIFNlY3Rpb25zLlxuICAgKi9cbiAgcmV0dXJuIF9jcmVhdGVDbGFzcyhTZWN0aW9uTWFuYWdlciwgW3tcbiAgICBrZXk6IFwiZ2V0Q2VsbEluZGljZXNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Q2VsbEluZGljZXMoX3JlZiAvKjo6ICovKSAvKjogQXJyYXk8bnVtYmVyPiove1xuICAgICAgdmFyIGhlaWdodCA9IF9yZWYgLyo6OiAqLy5oZWlnaHQsXG4gICAgICAgIHdpZHRoID0gX3JlZiAvKjo6ICovLndpZHRoLFxuICAgICAgICB4ID0gX3JlZiAvKjo6ICovLngsXG4gICAgICAgIHkgPSBfcmVmIC8qOjogKi8ueTtcbiAgICAgIHZhciBpbmRpY2VzID0ge307XG4gICAgICB0aGlzLmdldFNlY3Rpb25zKHtcbiAgICAgICAgaGVpZ2h0OiBoZWlnaHQsXG4gICAgICAgIHdpZHRoOiB3aWR0aCxcbiAgICAgICAgeDogeCxcbiAgICAgICAgeTogeVxuICAgICAgfSkuZm9yRWFjaChmdW5jdGlvbiAoc2VjdGlvbikge1xuICAgICAgICByZXR1cm4gc2VjdGlvbi5nZXRDZWxsSW5kaWNlcygpLmZvckVhY2goZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICAgICAgaW5kaWNlc1tpbmRleF0gPSBpbmRleDtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcblxuICAgICAgLy8gT2JqZWN0IGtleXMgYXJlIHN0cmluZ3M7IHRoaXMgZnVuY3Rpb24gcmV0dXJucyBudW1iZXJzXG4gICAgICByZXR1cm4gT2JqZWN0LmtleXMoaW5kaWNlcykubWFwKGZ1bmN0aW9uIChpbmRleCkge1xuICAgICAgICByZXR1cm4gaW5kaWNlc1tpbmRleF07XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKiogR2V0IHNpemUgYW5kIHBvc2l0aW9uIGluZm9ybWF0aW9uIGZvciB0aGUgY2VsbCBzcGVjaWZpZWQuICovXG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0Q2VsbE1ldGFkYXRhXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldENlbGxNZXRhZGF0YShfcmVmMiAvKjo6ICovKSAvKjogU2l6ZUFuZFBvc2l0aW9uSW5mbyove1xuICAgICAgdmFyIGluZGV4ID0gX3JlZjIgLyo6OiAqLy5pbmRleDtcbiAgICAgIHJldHVybiB0aGlzLl9jZWxsTWV0YWRhdGFbaW5kZXhdO1xuICAgIH1cblxuICAgIC8qKiBHZXQgYWxsIFNlY3Rpb25zIG92ZXJsYXBwaW5nIHRoZSBzcGVjaWZpZWQgcmVnaW9uLiAqL1xuICB9LCB7XG4gICAga2V5OiBcImdldFNlY3Rpb25zXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFNlY3Rpb25zKF9yZWYzIC8qOjogKi8pIC8qOiBBcnJheTxTZWN0aW9uPiove1xuICAgICAgdmFyIGhlaWdodCA9IF9yZWYzIC8qOjogKi8uaGVpZ2h0LFxuICAgICAgICB3aWR0aCA9IF9yZWYzIC8qOjogKi8ud2lkdGgsXG4gICAgICAgIHggPSBfcmVmMyAvKjo6ICovLngsXG4gICAgICAgIHkgPSBfcmVmMyAvKjo6ICovLnk7XG4gICAgICB2YXIgc2VjdGlvblhTdGFydCA9IE1hdGguZmxvb3IoeCAvIHRoaXMuX3NlY3Rpb25TaXplKTtcbiAgICAgIHZhciBzZWN0aW9uWFN0b3AgPSBNYXRoLmZsb29yKCh4ICsgd2lkdGggLSAxKSAvIHRoaXMuX3NlY3Rpb25TaXplKTtcbiAgICAgIHZhciBzZWN0aW9uWVN0YXJ0ID0gTWF0aC5mbG9vcih5IC8gdGhpcy5fc2VjdGlvblNpemUpO1xuICAgICAgdmFyIHNlY3Rpb25ZU3RvcCA9IE1hdGguZmxvb3IoKHkgKyBoZWlnaHQgLSAxKSAvIHRoaXMuX3NlY3Rpb25TaXplKTtcbiAgICAgIHZhciBzZWN0aW9ucyA9IFtdO1xuICAgICAgZm9yICh2YXIgc2VjdGlvblggPSBzZWN0aW9uWFN0YXJ0OyBzZWN0aW9uWCA8PSBzZWN0aW9uWFN0b3A7IHNlY3Rpb25YKyspIHtcbiAgICAgICAgZm9yICh2YXIgc2VjdGlvblkgPSBzZWN0aW9uWVN0YXJ0OyBzZWN0aW9uWSA8PSBzZWN0aW9uWVN0b3A7IHNlY3Rpb25ZKyspIHtcbiAgICAgICAgICB2YXIga2V5ID0gXCJcIi5jb25jYXQoc2VjdGlvblgsIFwiLlwiKS5jb25jYXQoc2VjdGlvblkpO1xuICAgICAgICAgIGlmICghdGhpcy5fc2VjdGlvbnNba2V5XSkge1xuICAgICAgICAgICAgdGhpcy5fc2VjdGlvbnNba2V5XSA9IG5ldyBTZWN0aW9uKHtcbiAgICAgICAgICAgICAgaGVpZ2h0OiB0aGlzLl9zZWN0aW9uU2l6ZSxcbiAgICAgICAgICAgICAgd2lkdGg6IHRoaXMuX3NlY3Rpb25TaXplLFxuICAgICAgICAgICAgICB4OiBzZWN0aW9uWCAqIHRoaXMuX3NlY3Rpb25TaXplLFxuICAgICAgICAgICAgICB5OiBzZWN0aW9uWSAqIHRoaXMuX3NlY3Rpb25TaXplXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgc2VjdGlvbnMucHVzaCh0aGlzLl9zZWN0aW9uc1trZXldKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHNlY3Rpb25zO1xuICAgIH1cblxuICAgIC8qKiBUb3RhbCBudW1iZXIgb2YgU2VjdGlvbnMgYmFzZWQgb24gdGhlIGN1cnJlbnRseSByZWdpc3RlcmVkIGNlbGxzLiAqL1xuICB9LCB7XG4gICAga2V5OiBcImdldFRvdGFsU2VjdGlvbkNvdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFRvdGFsU2VjdGlvbkNvdW50KCkge1xuICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKHRoaXMuX3NlY3Rpb25zKS5sZW5ndGg7XG4gICAgfVxuXG4gICAgLyoqIEludGVuZGVkIGZvciBkZWJ1Z2dlci90ZXN0IHB1cnBvc2VzIG9ubHkgKi9cbiAgfSwge1xuICAgIGtleTogXCJ0b1N0cmluZ1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICByZXR1cm4gT2JqZWN0LmtleXModGhpcy5fc2VjdGlvbnMpLm1hcChmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLl9zZWN0aW9uc1tpbmRleF0udG9TdHJpbmcoKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKiBBZGRzIGEgY2VsbCB0byB0aGUgYXBwcm9wcmlhdGUgU2VjdGlvbnMgYW5kIHJlZ2lzdGVycyBpdCBtZXRhZGF0YSBmb3IgbGF0ZXIgcmV0cmlldmFibGUuICovXG4gIH0sIHtcbiAgICBrZXk6IFwicmVnaXN0ZXJDZWxsXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlZ2lzdGVyQ2VsbChfcmVmNCAvKjo6ICovKSB7XG4gICAgICB2YXIgY2VsbE1ldGFkYXR1bSA9IF9yZWY0IC8qOjogKi8uY2VsbE1ldGFkYXR1bSxcbiAgICAgICAgaW5kZXggPSBfcmVmNCAvKjo6ICovLmluZGV4O1xuICAgICAgdGhpcy5fY2VsbE1ldGFkYXRhW2luZGV4XSA9IGNlbGxNZXRhZGF0dW07XG4gICAgICB0aGlzLmdldFNlY3Rpb25zKGNlbGxNZXRhZGF0dW0pLmZvckVhY2goZnVuY3Rpb24gKHNlY3Rpb24pIHtcbiAgICAgICAgcmV0dXJuIHNlY3Rpb24uYWRkQ2VsbEluZGV4KHtcbiAgICAgICAgICBpbmRleDogaW5kZXhcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1dKTtcbn0oKTtcbmV4cG9ydCB7IFNlY3Rpb25NYW5hZ2VyIGFzIGRlZmF1bHQgfTsiLCIvKipcbiAqIERldGVybWluZXMgYSBuZXcgb2Zmc2V0IHRoYXQgZW5zdXJlcyBhIGNlcnRhaW4gY2VsbCBpcyB2aXNpYmxlLCBnaXZlbiB0aGUgY3VycmVudCBvZmZzZXQuXG4gKiBJZiB0aGUgY2VsbCBpcyBhbHJlYWR5IHZpc2libGUgdGhlbiB0aGUgY3VycmVudCBvZmZzZXQgd2lsbCBiZSByZXR1cm5lZC5cbiAqIElmIHRoZSBjdXJyZW50IG9mZnNldCBpcyB0b28gZ3JlYXQgb3Igc21hbGwsIGl0IHdpbGwgYmUgYWRqdXN0ZWQganVzdCBlbm91Z2ggdG8gZW5zdXJlIHRoZSBzcGVjaWZpZWQgaW5kZXggaXMgdmlzaWJsZS5cbiAqXG4gKiBAcGFyYW0gYWxpZ24gRGVzaXJlZCBhbGlnbm1lbnQgd2l0aGluIGNvbnRhaW5lcjsgb25lIG9mIFwiYXV0b1wiIChkZWZhdWx0KSwgXCJzdGFydFwiLCBvciBcImVuZFwiXG4gKiBAcGFyYW0gY2VsbE9mZnNldCBPZmZzZXQgKHggb3IgeSkgcG9zaXRpb24gZm9yIGNlbGxcbiAqIEBwYXJhbSBjZWxsU2l6ZSBTaXplICh3aWR0aCBvciBoZWlnaHQpIG9mIGNlbGxcbiAqIEBwYXJhbSBjb250YWluZXJTaXplIFRvdGFsIHNpemUgKHdpZHRoIG9yIGhlaWdodCkgb2YgdGhlIGNvbnRhaW5lclxuICogQHBhcmFtIGN1cnJlbnRPZmZzZXQgQ29udGFpbmVyJ3MgY3VycmVudCAoeCBvciB5KSBvZmZzZXRcbiAqIEByZXR1cm4gT2Zmc2V0IHRvIHVzZSB0byBlbnN1cmUgdGhlIHNwZWNpZmllZCBjZWxsIGlzIHZpc2libGVcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0VXBkYXRlZE9mZnNldEZvckluZGV4KF9yZWYpIHtcbiAgdmFyIF9yZWYkYWxpZ24gPSBfcmVmLmFsaWduLFxuICAgIGFsaWduID0gX3JlZiRhbGlnbiA9PT0gdm9pZCAwID8gJ2F1dG8nIDogX3JlZiRhbGlnbixcbiAgICBjZWxsT2Zmc2V0ID0gX3JlZi5jZWxsT2Zmc2V0LFxuICAgIGNlbGxTaXplID0gX3JlZi5jZWxsU2l6ZSxcbiAgICBjb250YWluZXJTaXplID0gX3JlZi5jb250YWluZXJTaXplLFxuICAgIGN1cnJlbnRPZmZzZXQgPSBfcmVmLmN1cnJlbnRPZmZzZXQ7XG4gIHZhciBtYXhPZmZzZXQgPSBjZWxsT2Zmc2V0O1xuICB2YXIgbWluT2Zmc2V0ID0gbWF4T2Zmc2V0IC0gY29udGFpbmVyU2l6ZSArIGNlbGxTaXplO1xuICBzd2l0Y2ggKGFsaWduKSB7XG4gICAgY2FzZSAnc3RhcnQnOlxuICAgICAgcmV0dXJuIG1heE9mZnNldDtcbiAgICBjYXNlICdlbmQnOlxuICAgICAgcmV0dXJuIG1pbk9mZnNldDtcbiAgICBjYXNlICdjZW50ZXInOlxuICAgICAgcmV0dXJuIG1heE9mZnNldCAtIChjb250YWluZXJTaXplIC0gY2VsbFNpemUpIC8gMjtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIE1hdGgubWF4KG1pbk9mZnNldCwgTWF0aC5taW4obWF4T2Zmc2V0LCBjdXJyZW50T2Zmc2V0KSk7XG4gIH1cbn0iLCJpbXBvcnQgX29iamVjdERlc3RydWN0dXJpbmdFbXB0eSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3REZXN0cnVjdHVyaW5nRW1wdHlcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCI7XG5pbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCI7XG5pbXBvcnQgX2NyZWF0ZUNsYXNzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzXCI7XG5pbXBvcnQgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4gZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiO1xuaW1wb3J0IF9nZXRQcm90b3R5cGVPZiBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZlwiO1xuaW1wb3J0IF9pbmhlcml0cyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiO1xuaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eVwiO1xuZnVuY3Rpb24gX2NhbGxTdXBlcih0LCBvLCBlKSB7IHJldHVybiBvID0gX2dldFByb3RvdHlwZU9mKG8pLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0LCBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgPyBSZWZsZWN0LmNvbnN0cnVjdChvLCBlIHx8IFtdLCBfZ2V0UHJvdG90eXBlT2YodCkuY29uc3RydWN0b3IpIDogby5hcHBseSh0LCBlKSk7IH1cbmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IHRyeSB7IHZhciB0ID0gIUJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgfSBjYXRjaCAodCkge30gcmV0dXJuIChfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgcmV0dXJuICEhdDsgfSkoKTsgfVxuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBDb2xsZWN0aW9uVmlldyBmcm9tICcuL0NvbGxlY3Rpb25WaWV3JztcbmltcG9ydCBfY2FsY3VsYXRlU2l6ZUFuZFBvc2l0aW9uRGF0YSBmcm9tICcuL3V0aWxzL2NhbGN1bGF0ZVNpemVBbmRQb3NpdGlvbkRhdGEnO1xuaW1wb3J0IGdldFVwZGF0ZWRPZmZzZXRGb3JJbmRleCBmcm9tICcuLi91dGlscy9nZXRVcGRhdGVkT2Zmc2V0Rm9ySW5kZXgnO1xuLyo6OiBpbXBvcnQgdHlwZSB7U2Nyb2xsUG9zaXRpb24sIFNpemVJbmZvfSBmcm9tICcuL3R5cGVzJzsqL1xuLyoqXG4gKiBSZW5kZXJzIHNjYXR0ZXJlZCBvciBub24tbGluZWFyIGRhdGEuXG4gKiBVbmxpa2UgR3JpZCwgd2hpY2ggcmVuZGVycyBjaGVja2VyYm9hcmQgZGF0YSwgQ29sbGVjdGlvbiBjYW4gcmVuZGVyIGFyYml0cmFyaWx5IHBvc2l0aW9uZWQtIGV2ZW4gb3ZlcmxhcHBpbmctIGRhdGEuXG4gKi9cbnZhciBDb2xsZWN0aW9uID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfUmVhY3QkUHVyZUNvbXBvbmVudCkge1xuICBmdW5jdGlvbiBDb2xsZWN0aW9uKHByb3BzLCBjb250ZXh0KSB7XG4gICAgdmFyIF90aGlzO1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDb2xsZWN0aW9uKTtcbiAgICBfdGhpcyA9IF9jYWxsU3VwZXIodGhpcywgQ29sbGVjdGlvbiwgW3Byb3BzLCBjb250ZXh0XSk7XG4gICAgX3RoaXMuX2NlbGxNZXRhZGF0YSA9IFtdO1xuICAgIF90aGlzLl9sYXN0UmVuZGVyZWRDZWxsSW5kaWNlcyA9IFtdO1xuXG4gICAgLy8gQ2VsbCBjYWNoZSBkdXJpbmcgc2Nyb2xsIChmb3IgcGVyZm9ybWFuY2UpXG4gICAgX3RoaXMuX2NlbGxDYWNoZSA9IFtdO1xuICAgIF90aGlzLl9pc1Njcm9sbGluZ0NoYW5nZSA9IF90aGlzLl9pc1Njcm9sbGluZ0NoYW5nZS5iaW5kKF90aGlzKTtcbiAgICBfdGhpcy5fc2V0Q29sbGVjdGlvblZpZXdSZWYgPSBfdGhpcy5fc2V0Q29sbGVjdGlvblZpZXdSZWYuYmluZChfdGhpcyk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG4gIF9pbmhlcml0cyhDb2xsZWN0aW9uLCBfUmVhY3QkUHVyZUNvbXBvbmVudCk7XG4gIHJldHVybiBfY3JlYXRlQ2xhc3MoQ29sbGVjdGlvbiwgW3tcbiAgICBrZXk6IFwiZm9yY2VVcGRhdGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZm9yY2VVcGRhdGUoKSB7XG4gICAgICBpZiAodGhpcy5fY29sbGVjdGlvblZpZXcgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aGlzLl9jb2xsZWN0aW9uVmlldy5mb3JjZVVwZGF0ZSgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKiBTZWUgQ29sbGVjdGlvbiNyZWNvbXB1dGVDZWxsU2l6ZXNBbmRQb3NpdGlvbnMgKi9cbiAgfSwge1xuICAgIGtleTogXCJyZWNvbXB1dGVDZWxsU2l6ZXNBbmRQb3NpdGlvbnNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVjb21wdXRlQ2VsbFNpemVzQW5kUG9zaXRpb25zKCkge1xuICAgICAgdGhpcy5fY2VsbENhY2hlID0gW107XG4gICAgICB0aGlzLl9jb2xsZWN0aW9uVmlldy5yZWNvbXB1dGVDZWxsU2l6ZXNBbmRQb3NpdGlvbnMoKTtcbiAgICB9XG5cbiAgICAvKiogUmVhY3QgbGlmZWN5Y2xlIG1ldGhvZHMgKi9cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIHByb3BzID0gX2V4dGVuZHMoe30sIChfb2JqZWN0RGVzdHJ1Y3R1cmluZ0VtcHR5KHRoaXMucHJvcHMpLCB0aGlzLnByb3BzKSk7XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ29sbGVjdGlvblZpZXcsIF9leHRlbmRzKHtcbiAgICAgICAgY2VsbExheW91dE1hbmFnZXI6IHRoaXMsXG4gICAgICAgIGlzU2Nyb2xsaW5nQ2hhbmdlOiB0aGlzLl9pc1Njcm9sbGluZ0NoYW5nZSxcbiAgICAgICAgcmVmOiB0aGlzLl9zZXRDb2xsZWN0aW9uVmlld1JlZlxuICAgICAgfSwgcHJvcHMpKTtcbiAgICB9XG5cbiAgICAvKiogQ2VsbExheW91dE1hbmFnZXIgaW50ZXJmYWNlICovXG4gIH0sIHtcbiAgICBrZXk6IFwiY2FsY3VsYXRlU2l6ZUFuZFBvc2l0aW9uRGF0YVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjYWxjdWxhdGVTaXplQW5kUG9zaXRpb25EYXRhKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgY2VsbENvdW50ID0gX3RoaXMkcHJvcHMuY2VsbENvdW50LFxuICAgICAgICBjZWxsU2l6ZUFuZFBvc2l0aW9uR2V0dGVyID0gX3RoaXMkcHJvcHMuY2VsbFNpemVBbmRQb3NpdGlvbkdldHRlcixcbiAgICAgICAgc2VjdGlvblNpemUgPSBfdGhpcyRwcm9wcy5zZWN0aW9uU2l6ZTtcbiAgICAgIHZhciBkYXRhID0gX2NhbGN1bGF0ZVNpemVBbmRQb3NpdGlvbkRhdGEoe1xuICAgICAgICBjZWxsQ291bnQ6IGNlbGxDb3VudCxcbiAgICAgICAgY2VsbFNpemVBbmRQb3NpdGlvbkdldHRlcjogY2VsbFNpemVBbmRQb3NpdGlvbkdldHRlcixcbiAgICAgICAgc2VjdGlvblNpemU6IHNlY3Rpb25TaXplXG4gICAgICB9KTtcbiAgICAgIHRoaXMuX2NlbGxNZXRhZGF0YSA9IGRhdGEuY2VsbE1ldGFkYXRhO1xuICAgICAgdGhpcy5fc2VjdGlvbk1hbmFnZXIgPSBkYXRhLnNlY3Rpb25NYW5hZ2VyO1xuICAgICAgdGhpcy5faGVpZ2h0ID0gZGF0YS5oZWlnaHQ7XG4gICAgICB0aGlzLl93aWR0aCA9IGRhdGEud2lkdGg7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgbW9zdCByZWNlbnRseSByZW5kZXJlZCBzZXQgb2YgY2VsbCBpbmRpY2VzLlxuICAgICAqL1xuICB9LCB7XG4gICAga2V5OiBcImdldExhc3RSZW5kZXJlZEluZGljZXNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0TGFzdFJlbmRlcmVkSW5kaWNlcygpIHtcbiAgICAgIHJldHVybiB0aGlzLl9sYXN0UmVuZGVyZWRDZWxsSW5kaWNlcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDYWxjdWxhdGVzIHRoZSBtaW5pbXVtIGFtb3VudCBvZiBjaGFuZ2UgZnJvbSB0aGUgY3VycmVudCBzY3JvbGwgcG9zaXRpb24gdG8gZW5zdXJlIHRoZSBzcGVjaWZpZWQgY2VsbCBpcyAoZnVsbHkpIHZpc2libGUuXG4gICAgICovXG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0U2Nyb2xsUG9zaXRpb25Gb3JDZWxsXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFNjcm9sbFBvc2l0aW9uRm9yQ2VsbChfcmVmKSAvKjogU2Nyb2xsUG9zaXRpb24qL3tcbiAgICAgIHZhciBhbGlnbiA9IF9yZWYuYWxpZ24sXG4gICAgICAgIGNlbGxJbmRleCA9IF9yZWYuY2VsbEluZGV4LFxuICAgICAgICBoZWlnaHQgPSBfcmVmLmhlaWdodCxcbiAgICAgICAgc2Nyb2xsTGVmdCA9IF9yZWYuc2Nyb2xsTGVmdCxcbiAgICAgICAgc2Nyb2xsVG9wID0gX3JlZi5zY3JvbGxUb3AsXG4gICAgICAgIHdpZHRoID0gX3JlZi53aWR0aDtcbiAgICAgIHZhciBjZWxsQ291bnQgPSB0aGlzLnByb3BzLmNlbGxDb3VudDtcbiAgICAgIGlmIChjZWxsSW5kZXggPj0gMCAmJiBjZWxsSW5kZXggPCBjZWxsQ291bnQpIHtcbiAgICAgICAgdmFyIGNlbGxNZXRhZGF0YSA9IHRoaXMuX2NlbGxNZXRhZGF0YVtjZWxsSW5kZXhdO1xuICAgICAgICBzY3JvbGxMZWZ0ID0gZ2V0VXBkYXRlZE9mZnNldEZvckluZGV4KHtcbiAgICAgICAgICBhbGlnbjogYWxpZ24sXG4gICAgICAgICAgY2VsbE9mZnNldDogY2VsbE1ldGFkYXRhLngsXG4gICAgICAgICAgY2VsbFNpemU6IGNlbGxNZXRhZGF0YS53aWR0aCxcbiAgICAgICAgICBjb250YWluZXJTaXplOiB3aWR0aCxcbiAgICAgICAgICBjdXJyZW50T2Zmc2V0OiBzY3JvbGxMZWZ0LFxuICAgICAgICAgIHRhcmdldEluZGV4OiBjZWxsSW5kZXhcbiAgICAgICAgfSk7XG4gICAgICAgIHNjcm9sbFRvcCA9IGdldFVwZGF0ZWRPZmZzZXRGb3JJbmRleCh7XG4gICAgICAgICAgYWxpZ246IGFsaWduLFxuICAgICAgICAgIGNlbGxPZmZzZXQ6IGNlbGxNZXRhZGF0YS55LFxuICAgICAgICAgIGNlbGxTaXplOiBjZWxsTWV0YWRhdGEuaGVpZ2h0LFxuICAgICAgICAgIGNvbnRhaW5lclNpemU6IGhlaWdodCxcbiAgICAgICAgICBjdXJyZW50T2Zmc2V0OiBzY3JvbGxUb3AsXG4gICAgICAgICAgdGFyZ2V0SW5kZXg6IGNlbGxJbmRleFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHNjcm9sbExlZnQ6IHNjcm9sbExlZnQsXG4gICAgICAgIHNjcm9sbFRvcDogc2Nyb2xsVG9wXG4gICAgICB9O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZXRUb3RhbFNpemVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0VG90YWxTaXplKCkgLyo6IFNpemVJbmZvKi97XG4gICAgICByZXR1cm4ge1xuICAgICAgICBoZWlnaHQ6IHRoaXMuX2hlaWdodCxcbiAgICAgICAgd2lkdGg6IHRoaXMuX3dpZHRoXG4gICAgICB9O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjZWxsUmVuZGVyZXJzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNlbGxSZW5kZXJlcnMoX3JlZjIpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuICAgICAgdmFyIGhlaWdodCA9IF9yZWYyLmhlaWdodCxcbiAgICAgICAgaXNTY3JvbGxpbmcgPSBfcmVmMi5pc1Njcm9sbGluZyxcbiAgICAgICAgd2lkdGggPSBfcmVmMi53aWR0aCxcbiAgICAgICAgeCA9IF9yZWYyLngsXG4gICAgICAgIHkgPSBfcmVmMi55O1xuICAgICAgdmFyIF90aGlzJHByb3BzMiA9IHRoaXMucHJvcHMsXG4gICAgICAgIGNlbGxHcm91cFJlbmRlcmVyID0gX3RoaXMkcHJvcHMyLmNlbGxHcm91cFJlbmRlcmVyLFxuICAgICAgICBjZWxsUmVuZGVyZXIgPSBfdGhpcyRwcm9wczIuY2VsbFJlbmRlcmVyO1xuXG4gICAgICAvLyBTdG9yZSBmb3IgbGF0ZXIgY2FsbHMgdG8gZ2V0TGFzdFJlbmRlcmVkSW5kaWNlcygpXG4gICAgICB0aGlzLl9sYXN0UmVuZGVyZWRDZWxsSW5kaWNlcyA9IHRoaXMuX3NlY3Rpb25NYW5hZ2VyLmdldENlbGxJbmRpY2VzKHtcbiAgICAgICAgaGVpZ2h0OiBoZWlnaHQsXG4gICAgICAgIHdpZHRoOiB3aWR0aCxcbiAgICAgICAgeDogeCxcbiAgICAgICAgeTogeVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gY2VsbEdyb3VwUmVuZGVyZXIoe1xuICAgICAgICBjZWxsQ2FjaGU6IHRoaXMuX2NlbGxDYWNoZSxcbiAgICAgICAgY2VsbFJlbmRlcmVyOiBjZWxsUmVuZGVyZXIsXG4gICAgICAgIGNlbGxTaXplQW5kUG9zaXRpb25HZXR0ZXI6IGZ1bmN0aW9uIGNlbGxTaXplQW5kUG9zaXRpb25HZXR0ZXIoX3JlZjMpIHtcbiAgICAgICAgICB2YXIgaW5kZXggPSBfcmVmMy5pbmRleDtcbiAgICAgICAgICByZXR1cm4gX3RoaXMyLl9zZWN0aW9uTWFuYWdlci5nZXRDZWxsTWV0YWRhdGEoe1xuICAgICAgICAgICAgaW5kZXg6IGluZGV4XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIGluZGljZXM6IHRoaXMuX2xhc3RSZW5kZXJlZENlbGxJbmRpY2VzLFxuICAgICAgICBpc1Njcm9sbGluZzogaXNTY3JvbGxpbmdcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJfaXNTY3JvbGxpbmdDaGFuZ2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2lzU2Nyb2xsaW5nQ2hhbmdlKGlzU2Nyb2xsaW5nKSB7XG4gICAgICBpZiAoIWlzU2Nyb2xsaW5nKSB7XG4gICAgICAgIHRoaXMuX2NlbGxDYWNoZSA9IFtdO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJfc2V0Q29sbGVjdGlvblZpZXdSZWZcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3NldENvbGxlY3Rpb25WaWV3UmVmKHJlZikge1xuICAgICAgdGhpcy5fY29sbGVjdGlvblZpZXcgPSByZWY7XG4gICAgfVxuICB9XSk7XG59KFJlYWN0LlB1cmVDb21wb25lbnQpO1xuX2RlZmluZVByb3BlcnR5KENvbGxlY3Rpb24sIFwiZGVmYXVsdFByb3BzXCIsIHtcbiAgJ2FyaWEtbGFiZWwnOiAnZ3JpZCcsXG4gIGNlbGxHcm91cFJlbmRlcmVyOiBkZWZhdWx0Q2VsbEdyb3VwUmVuZGVyZXJcbn0pO1xuZXhwb3J0IHsgQ29sbGVjdGlvbiBhcyBkZWZhdWx0IH07XG5Db2xsZWN0aW9uLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgJ2FyaWEtbGFiZWwnOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogTnVtYmVyIG9mIGNlbGxzIGluIENvbGxlY3Rpb24uXG4gICAqL1xuICBjZWxsQ291bnQ6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZCxcbiAgLyoqXG4gICAqIFJlc3BvbnNpYmxlIGZvciByZW5kZXJpbmcgYSBncm91cCBvZiBjZWxscyBnaXZlbiB0aGVpciBpbmRpY2VzLlxuICAgKiBTaG91bGQgaW1wbGVtZW50IHRoZSBmb2xsb3dpbmcgaW50ZXJmYWNlOiAoe1xuICAgKiAgIGNlbGxTaXplQW5kUG9zaXRpb25HZXR0ZXI6RnVuY3Rpb24sXG4gICAqICAgaW5kaWNlczogQXJyYXk8bnVtYmVyPixcbiAgICogICBjZWxsUmVuZGVyZXI6IEZ1bmN0aW9uXG4gICAqIH0pOiBBcnJheTxQcm9wVHlwZXMubm9kZT5cbiAgICovXG4gIGNlbGxHcm91cFJlbmRlcmVyOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAvKipcbiAgICogUmVzcG9uc2libGUgZm9yIHJlbmRlcmluZyBhIGNlbGwgZ2l2ZW4gYW4gcm93IGFuZCBjb2x1bW4gaW5kZXguXG4gICAqIFNob3VsZCBpbXBsZW1lbnQgdGhlIGZvbGxvd2luZyBpbnRlcmZhY2U6ICh7IGluZGV4OiBudW1iZXIsIGtleTogc3RyaW5nLCBzdHlsZTogb2JqZWN0IH0pOiBQcm9wVHlwZXMuZWxlbWVudFxuICAgKi9cbiAgY2VsbFJlbmRlcmVyOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAvKipcbiAgICogQ2FsbGJhY2sgcmVzcG9uc2libGUgZm9yIHJldHVybmluZyBzaXplIGFuZCBvZmZzZXQvcG9zaXRpb24gaW5mb3JtYXRpb24gZm9yIGEgZ2l2ZW4gY2VsbCAoaW5kZXgpLlxuICAgKiAoeyBpbmRleDogbnVtYmVyIH0pOiB7IGhlaWdodDogbnVtYmVyLCB3aWR0aDogbnVtYmVyLCB4OiBudW1iZXIsIHk6IG51bWJlciB9XG4gICAqL1xuICBjZWxsU2l6ZUFuZFBvc2l0aW9uR2V0dGVyOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAvKipcbiAgICogT3B0aW9uYWxseSBvdmVycmlkZSB0aGUgc2l6ZSBvZiB0aGUgc2VjdGlvbnMgYSBDb2xsZWN0aW9uJ3MgY2VsbHMgYXJlIHNwbGl0IGludG8uXG4gICAqL1xuICBzZWN0aW9uU2l6ZTogUHJvcFR5cGVzLm51bWJlclxufSA6IHt9O1xuZnVuY3Rpb24gZGVmYXVsdENlbGxHcm91cFJlbmRlcmVyKF9yZWY0KSB7XG4gIHZhciBjZWxsQ2FjaGUgPSBfcmVmNC5jZWxsQ2FjaGUsXG4gICAgY2VsbFJlbmRlcmVyID0gX3JlZjQuY2VsbFJlbmRlcmVyLFxuICAgIGNlbGxTaXplQW5kUG9zaXRpb25HZXR0ZXIgPSBfcmVmNC5jZWxsU2l6ZUFuZFBvc2l0aW9uR2V0dGVyLFxuICAgIGluZGljZXMgPSBfcmVmNC5pbmRpY2VzLFxuICAgIGlzU2Nyb2xsaW5nID0gX3JlZjQuaXNTY3JvbGxpbmc7XG4gIHJldHVybiBpbmRpY2VzLm1hcChmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICB2YXIgY2VsbE1ldGFkYXRhID0gY2VsbFNpemVBbmRQb3NpdGlvbkdldHRlcih7XG4gICAgICBpbmRleDogaW5kZXhcbiAgICB9KTtcbiAgICB2YXIgY2VsbFJlbmRlcmVyUHJvcHMgPSB7XG4gICAgICBpbmRleDogaW5kZXgsXG4gICAgICBpc1Njcm9sbGluZzogaXNTY3JvbGxpbmcsXG4gICAgICBrZXk6IGluZGV4LFxuICAgICAgc3R5bGU6IHtcbiAgICAgICAgaGVpZ2h0OiBjZWxsTWV0YWRhdGEuaGVpZ2h0LFxuICAgICAgICBsZWZ0OiBjZWxsTWV0YWRhdGEueCxcbiAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgIHRvcDogY2VsbE1ldGFkYXRhLnksXG4gICAgICAgIHdpZHRoOiBjZWxsTWV0YWRhdGEud2lkdGhcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8gQXZvaWQgcmUtY3JlYXRpbmcgY2VsbHMgd2hpbGUgc2Nyb2xsaW5nLlxuICAgIC8vIFRoaXMgY2FuIGxlYWQgdG8gdGhlIHNhbWUgY2VsbCBiZWluZyBjcmVhdGVkIG1hbnkgdGltZXMgYW5kIGNhbiBjYXVzZSBwZXJmb3JtYW5jZSBpc3N1ZXMgZm9yIFwiaGVhdnlcIiBjZWxscy5cbiAgICAvLyBJZiBhIHNjcm9sbCBpcyBpbiBwcm9ncmVzcy0gY2FjaGUgYW5kIHJldXNlIGNlbGxzLlxuICAgIC8vIFRoaXMgY2FjaGUgd2lsbCBiZSB0aHJvd24gYXdheSBvbmNlIHNjcm9sbGluZyBjb21wbGV0cy5cbiAgICBpZiAoaXNTY3JvbGxpbmcpIHtcbiAgICAgIGlmICghKGluZGV4IGluIGNlbGxDYWNoZSkpIHtcbiAgICAgICAgY2VsbENhY2hlW2luZGV4XSA9IGNlbGxSZW5kZXJlcihjZWxsUmVuZGVyZXJQcm9wcyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gY2VsbENhY2hlW2luZGV4XTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGNlbGxSZW5kZXJlcihjZWxsUmVuZGVyZXJQcm9wcyk7XG4gICAgfVxuICB9KS5maWx0ZXIoZnVuY3Rpb24gKHJlbmRlcmVkQ2VsbCkge1xuICAgIHJldHVybiAhIXJlbmRlcmVkQ2VsbDtcbiAgfSk7XG59IiwiZnVuY3Rpb24gX29iamVjdERlc3RydWN0dXJpbmdFbXB0eSh0KSB7XG4gIGlmIChudWxsID09IHQpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgZGVzdHJ1Y3R1cmUgXCIgKyB0KTtcbn1cbmV4cG9ydCB7IF9vYmplY3REZXN0cnVjdHVyaW5nRW1wdHkgYXMgZGVmYXVsdCB9OyIsImltcG9ydCBTZWN0aW9uTWFuYWdlciBmcm9tICcuLi9TZWN0aW9uTWFuYWdlcic7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjYWxjdWxhdGVTaXplQW5kUG9zaXRpb25EYXRhKF9yZWYpIHtcbiAgdmFyIGNlbGxDb3VudCA9IF9yZWYuY2VsbENvdW50LFxuICAgIGNlbGxTaXplQW5kUG9zaXRpb25HZXR0ZXIgPSBfcmVmLmNlbGxTaXplQW5kUG9zaXRpb25HZXR0ZXIsXG4gICAgc2VjdGlvblNpemUgPSBfcmVmLnNlY3Rpb25TaXplO1xuICB2YXIgY2VsbE1ldGFkYXRhID0gW107XG4gIHZhciBzZWN0aW9uTWFuYWdlciA9IG5ldyBTZWN0aW9uTWFuYWdlcihzZWN0aW9uU2l6ZSk7XG4gIHZhciBoZWlnaHQgPSAwO1xuICB2YXIgd2lkdGggPSAwO1xuICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgY2VsbENvdW50OyBpbmRleCsrKSB7XG4gICAgdmFyIGNlbGxNZXRhZGF0dW0gPSBjZWxsU2l6ZUFuZFBvc2l0aW9uR2V0dGVyKHtcbiAgICAgIGluZGV4OiBpbmRleFxuICAgIH0pO1xuICAgIGlmIChjZWxsTWV0YWRhdHVtLmhlaWdodCA9PSBudWxsIHx8IGlzTmFOKGNlbGxNZXRhZGF0dW0uaGVpZ2h0KSB8fCBjZWxsTWV0YWRhdHVtLndpZHRoID09IG51bGwgfHwgaXNOYU4oY2VsbE1ldGFkYXR1bS53aWR0aCkgfHwgY2VsbE1ldGFkYXR1bS54ID09IG51bGwgfHwgaXNOYU4oY2VsbE1ldGFkYXR1bS54KSB8fCBjZWxsTWV0YWRhdHVtLnkgPT0gbnVsbCB8fCBpc05hTihjZWxsTWV0YWRhdHVtLnkpKSB7XG4gICAgICB0aHJvdyBFcnJvcihcIkludmFsaWQgbWV0YWRhdGEgcmV0dXJuZWQgZm9yIGNlbGwgXCIuY29uY2F0KGluZGV4LCBcIjpcXG4gICAgICAgIHg6XCIpLmNvbmNhdChjZWxsTWV0YWRhdHVtLngsIFwiLCB5OlwiKS5jb25jYXQoY2VsbE1ldGFkYXR1bS55LCBcIiwgd2lkdGg6XCIpLmNvbmNhdChjZWxsTWV0YWRhdHVtLndpZHRoLCBcIiwgaGVpZ2h0OlwiKS5jb25jYXQoY2VsbE1ldGFkYXR1bS5oZWlnaHQpKTtcbiAgICB9XG4gICAgaGVpZ2h0ID0gTWF0aC5tYXgoaGVpZ2h0LCBjZWxsTWV0YWRhdHVtLnkgKyBjZWxsTWV0YWRhdHVtLmhlaWdodCk7XG4gICAgd2lkdGggPSBNYXRoLm1heCh3aWR0aCwgY2VsbE1ldGFkYXR1bS54ICsgY2VsbE1ldGFkYXR1bS53aWR0aCk7XG4gICAgY2VsbE1ldGFkYXRhW2luZGV4XSA9IGNlbGxNZXRhZGF0dW07XG4gICAgc2VjdGlvbk1hbmFnZXIucmVnaXN0ZXJDZWxsKHtcbiAgICAgIGNlbGxNZXRhZGF0dW06IGNlbGxNZXRhZGF0dW0sXG4gICAgICBpbmRleDogaW5kZXhcbiAgICB9KTtcbiAgfVxuICByZXR1cm4ge1xuICAgIGNlbGxNZXRhZGF0YTogY2VsbE1ldGFkYXRhLFxuICAgIGhlaWdodDogaGVpZ2h0LFxuICAgIHNlY3Rpb25NYW5hZ2VyOiBzZWN0aW9uTWFuYWdlcixcbiAgICB3aWR0aDogd2lkdGhcbiAgfTtcbn0iLCJpbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCI7XG5pbXBvcnQgX2NyZWF0ZUNsYXNzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzXCI7XG5pbXBvcnQgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4gZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiO1xuaW1wb3J0IF9nZXRQcm90b3R5cGVPZiBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZlwiO1xuaW1wb3J0IF9pbmhlcml0cyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiO1xuZnVuY3Rpb24gX2NhbGxTdXBlcih0LCBvLCBlKSB7IHJldHVybiBvID0gX2dldFByb3RvdHlwZU9mKG8pLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0LCBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgPyBSZWZsZWN0LmNvbnN0cnVjdChvLCBlIHx8IFtdLCBfZ2V0UHJvdG90eXBlT2YodCkuY29uc3RydWN0b3IpIDogby5hcHBseSh0LCBlKSk7IH1cbmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IHRyeSB7IHZhciB0ID0gIUJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgfSBjYXRjaCAodCkge30gcmV0dXJuIChfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgcmV0dXJuICEhdDsgfSkoKTsgfVxuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcblxuLyoqXG4gKiBIaWdoLW9yZGVyIGNvbXBvbmVudCB0aGF0IGF1dG8tY2FsY3VsYXRlcyBjb2x1bW4td2lkdGhzIGZvciBgR3JpZGAgY2VsbHMuXG4gKi9cbnZhciBDb2x1bW5TaXplciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1JlYWN0JFB1cmVDb21wb25lbnQpIHtcbiAgZnVuY3Rpb24gQ29sdW1uU2l6ZXIocHJvcHMsIGNvbnRleHQpIHtcbiAgICB2YXIgX3RoaXM7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENvbHVtblNpemVyKTtcbiAgICBfdGhpcyA9IF9jYWxsU3VwZXIodGhpcywgQ29sdW1uU2l6ZXIsIFtwcm9wcywgY29udGV4dF0pO1xuICAgIF90aGlzLl9yZWdpc3RlckNoaWxkID0gX3RoaXMuX3JlZ2lzdGVyQ2hpbGQuYmluZChfdGhpcyk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG4gIF9pbmhlcml0cyhDb2x1bW5TaXplciwgX1JlYWN0JFB1cmVDb21wb25lbnQpO1xuICByZXR1cm4gX2NyZWF0ZUNsYXNzKENvbHVtblNpemVyLCBbe1xuICAgIGtleTogXCJjb21wb25lbnREaWRVcGRhdGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcykge1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgY29sdW1uTWF4V2lkdGggPSBfdGhpcyRwcm9wcy5jb2x1bW5NYXhXaWR0aCxcbiAgICAgICAgY29sdW1uTWluV2lkdGggPSBfdGhpcyRwcm9wcy5jb2x1bW5NaW5XaWR0aCxcbiAgICAgICAgY29sdW1uQ291bnQgPSBfdGhpcyRwcm9wcy5jb2x1bW5Db3VudCxcbiAgICAgICAgd2lkdGggPSBfdGhpcyRwcm9wcy53aWR0aDtcbiAgICAgIGlmIChjb2x1bW5NYXhXaWR0aCAhPT0gcHJldlByb3BzLmNvbHVtbk1heFdpZHRoIHx8IGNvbHVtbk1pbldpZHRoICE9PSBwcmV2UHJvcHMuY29sdW1uTWluV2lkdGggfHwgY29sdW1uQ291bnQgIT09IHByZXZQcm9wcy5jb2x1bW5Db3VudCB8fCB3aWR0aCAhPT0gcHJldlByb3BzLndpZHRoKSB7XG4gICAgICAgIGlmICh0aGlzLl9yZWdpc3RlcmVkQ2hpbGQpIHtcbiAgICAgICAgICB0aGlzLl9yZWdpc3RlcmVkQ2hpbGQucmVjb21wdXRlR3JpZFNpemUoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzMiA9IHRoaXMucHJvcHMsXG4gICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHMyLmNoaWxkcmVuLFxuICAgICAgICBjb2x1bW5NYXhXaWR0aCA9IF90aGlzJHByb3BzMi5jb2x1bW5NYXhXaWR0aCxcbiAgICAgICAgY29sdW1uTWluV2lkdGggPSBfdGhpcyRwcm9wczIuY29sdW1uTWluV2lkdGgsXG4gICAgICAgIGNvbHVtbkNvdW50ID0gX3RoaXMkcHJvcHMyLmNvbHVtbkNvdW50LFxuICAgICAgICB3aWR0aCA9IF90aGlzJHByb3BzMi53aWR0aDtcbiAgICAgIHZhciBzYWZlQ29sdW1uTWluV2lkdGggPSBjb2x1bW5NaW5XaWR0aCB8fCAxO1xuICAgICAgdmFyIHNhZmVDb2x1bW5NYXhXaWR0aCA9IGNvbHVtbk1heFdpZHRoID8gTWF0aC5taW4oY29sdW1uTWF4V2lkdGgsIHdpZHRoKSA6IHdpZHRoO1xuICAgICAgdmFyIGNvbHVtbldpZHRoID0gd2lkdGggLyBjb2x1bW5Db3VudDtcbiAgICAgIGNvbHVtbldpZHRoID0gTWF0aC5tYXgoc2FmZUNvbHVtbk1pbldpZHRoLCBjb2x1bW5XaWR0aCk7XG4gICAgICBjb2x1bW5XaWR0aCA9IE1hdGgubWluKHNhZmVDb2x1bW5NYXhXaWR0aCwgY29sdW1uV2lkdGgpO1xuICAgICAgY29sdW1uV2lkdGggPSBNYXRoLmZsb29yKGNvbHVtbldpZHRoKTtcbiAgICAgIHZhciBhZGp1c3RlZFdpZHRoID0gTWF0aC5taW4od2lkdGgsIGNvbHVtbldpZHRoICogY29sdW1uQ291bnQpO1xuICAgICAgcmV0dXJuIGNoaWxkcmVuKHtcbiAgICAgICAgYWRqdXN0ZWRXaWR0aDogYWRqdXN0ZWRXaWR0aCxcbiAgICAgICAgY29sdW1uV2lkdGg6IGNvbHVtbldpZHRoLFxuICAgICAgICBnZXRDb2x1bW5XaWR0aDogZnVuY3Rpb24gZ2V0Q29sdW1uV2lkdGgoKSB7XG4gICAgICAgICAgcmV0dXJuIGNvbHVtbldpZHRoO1xuICAgICAgICB9LFxuICAgICAgICByZWdpc3RlckNoaWxkOiB0aGlzLl9yZWdpc3RlckNoaWxkXG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiX3JlZ2lzdGVyQ2hpbGRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3JlZ2lzdGVyQ2hpbGQoY2hpbGQpIHtcbiAgICAgIGlmIChjaGlsZCAmJiB0eXBlb2YgY2hpbGQucmVjb21wdXRlR3JpZFNpemUgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgRXJyb3IoJ1VuZXhwZWN0ZWQgY2hpbGQgdHlwZSByZWdpc3RlcmVkOyBvbmx5IEdyaWQvTXVsdGlHcmlkIGNoaWxkcmVuIGFyZSBzdXBwb3J0ZWQuJyk7XG4gICAgICB9XG4gICAgICB0aGlzLl9yZWdpc3RlcmVkQ2hpbGQgPSBjaGlsZDtcbiAgICAgIGlmICh0aGlzLl9yZWdpc3RlcmVkQ2hpbGQpIHtcbiAgICAgICAgdGhpcy5fcmVnaXN0ZXJlZENoaWxkLnJlY29tcHV0ZUdyaWRTaXplKCk7XG4gICAgICB9XG4gICAgfVxuICB9XSk7XG59KFJlYWN0LlB1cmVDb21wb25lbnQpO1xuZXhwb3J0IHsgQ29sdW1uU2l6ZXIgYXMgZGVmYXVsdCB9O1xuQ29sdW1uU2l6ZXIucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKipcbiAgICogRnVuY3Rpb24gcmVzcG9uc2libGUgZm9yIHJlbmRlcmluZyBhIHZpcnR1YWxpemVkIEdyaWQuXG4gICAqIFRoaXMgZnVuY3Rpb24gc2hvdWxkIGltcGxlbWVudCB0aGUgZm9sbG93aW5nIHNpZ25hdHVyZTpcbiAgICogKHsgYWRqdXN0ZWRXaWR0aCwgZ2V0Q29sdW1uV2lkdGgsIHJlZ2lzdGVyQ2hpbGQgfSkgPT4gUHJvcFR5cGVzLmVsZW1lbnRcbiAgICpcbiAgICogVGhlIHNwZWNpZmllZCA6Z2V0Q29sdW1uV2lkdGggZnVuY3Rpb24gc2hvdWxkIGJlIHBhc3NlZCB0byB0aGUgR3JpZCdzIDpjb2x1bW5XaWR0aCBwcm9wZXJ0eS5cbiAgICogVGhlIDpyZWdpc3RlckNoaWxkIHNob3VsZCBiZSBwYXNzZWQgdG8gdGhlIEdyaWQncyA6cmVmIHByb3BlcnR5LlxuICAgKiBUaGUgOmFkanVzdGVkV2lkdGggcHJvcGVydHkgaXMgb3B0aW9uYWw7IGl0IHJlZmxlY3RzIHRoZSBsZXNzZXIgb2YgdGhlIG92ZXJhbGwgd2lkdGggb3IgdGhlIHdpZHRoIG9mIGFsbCBjb2x1bW5zLlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIC8qKiBPcHRpb25hbCBtYXhpbXVtIGFsbG93ZWQgY29sdW1uIHdpZHRoICovXG4gIGNvbHVtbk1heFdpZHRoOiBQcm9wVHlwZXMubnVtYmVyLFxuICAvKiogT3B0aW9uYWwgbWluaW11bSBhbGxvd2VkIGNvbHVtbiB3aWR0aCAqL1xuICBjb2x1bW5NaW5XaWR0aDogUHJvcFR5cGVzLm51bWJlcixcbiAgLyoqIE51bWJlciBvZiBjb2x1bW5zIGluIEdyaWQgb3IgVGFibGUgY2hpbGQgKi9cbiAgY29sdW1uQ291bnQ6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZCxcbiAgLyoqIFdpZHRoIG9mIEdyaWQgb3IgVGFibGUgY2hpbGQgKi9cbiAgd2lkdGg6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZFxufSA6IHt9OyIsIi8qKlxuICogSGVscGVyIG1ldGhvZCB0aGF0IGRldGVybWluZXMgd2hlbiB0byByZWNhbGN1bGF0ZSByb3cgb3IgY29sdW1uIG1ldGFkYXRhLlxuICovXG4vKjo6IHR5cGUgUGFyYW1zPFQ+ID0ge1xuICAvLyBOdW1iZXIgb2Ygcm93cyBvciBjb2x1bW5zIGluIHRoZSBjdXJyZW50IGF4aXNcbiAgY2VsbENvdW50OiBudW1iZXIsXG5cbiAgLy8gV2lkdGggb3IgaGVpZ2h0IG9mIGNlbGxzIGZvciB0aGUgY3VycmVudCBheGlzXG4gIGNlbGxTaXplOiA/bnVtYmVyLFxuXG4gIC8vIE1ldGhvZCB0byBpbnZva2UgaWYgY2VsbCBtZXRhZGF0YSBzaG91bGQgYmUgcmVjYWxjdWxhdGVkXG4gIGNvbXB1dGVNZXRhZGF0YUNhbGxiYWNrOiAocHJvcHM6IFQpID0+IHZvaWQsXG5cbiAgLy8gUGFyYW1ldGVycyB0byBwYXNzIHRvIDpjb21wdXRlTWV0YWRhdGFDYWxsYmFja1xuICBjb21wdXRlTWV0YWRhdGFDYWxsYmFja1Byb3BzOiBULFxuXG4gIC8vIE5ld2x5IHVwZGF0ZWQgbnVtYmVyIG9mIHJvd3Mgb3IgY29sdW1ucyBpbiB0aGUgY3VycmVudCBheGlzXG4gIG5leHRDZWxsc0NvdW50OiBudW1iZXIsXG5cbiAgLy8gTmV3bHkgdXBkYXRlZCB3aWR0aCBvciBoZWlnaHQgb2YgY2VsbHMgZm9yIHRoZSBjdXJyZW50IGF4aXNcbiAgbmV4dENlbGxTaXplOiA/bnVtYmVyLFxuXG4gIC8vIE5ld2x5IHVwZGF0ZWQgc2Nyb2xsLXRvLWluZGV4XG4gIG5leHRTY3JvbGxUb0luZGV4OiBudW1iZXIsXG5cbiAgLy8gU2Nyb2xsLXRvLWluZGV4XG4gIHNjcm9sbFRvSW5kZXg6IG51bWJlcixcblxuICAvLyBDYWxsYmFjayB0byBpbnZva2UgaWYgdGhlIHNjcm9sbCBwb3NpdGlvbiBzaG91bGQgYmUgcmVjYWxjdWxhdGVkXG4gIHVwZGF0ZVNjcm9sbE9mZnNldEZvclNjcm9sbFRvSW5kZXg6ICgpID0+IHZvaWQsXG59OyovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjYWxjdWxhdGVTaXplQW5kUG9zaXRpb25EYXRhQW5kVXBkYXRlU2Nyb2xsT2Zmc2V0KF9yZWYgLyo6OiAqLykge1xuICB2YXIgY2VsbENvdW50ID0gX3JlZiAvKjo6ICovLmNlbGxDb3VudCxcbiAgICBjZWxsU2l6ZSA9IF9yZWYgLyo6OiAqLy5jZWxsU2l6ZSxcbiAgICBjb21wdXRlTWV0YWRhdGFDYWxsYmFjayA9IF9yZWYgLyo6OiAqLy5jb21wdXRlTWV0YWRhdGFDYWxsYmFjayxcbiAgICBjb21wdXRlTWV0YWRhdGFDYWxsYmFja1Byb3BzID0gX3JlZiAvKjo6ICovLmNvbXB1dGVNZXRhZGF0YUNhbGxiYWNrUHJvcHMsXG4gICAgbmV4dENlbGxzQ291bnQgPSBfcmVmIC8qOjogKi8ubmV4dENlbGxzQ291bnQsXG4gICAgbmV4dENlbGxTaXplID0gX3JlZiAvKjo6ICovLm5leHRDZWxsU2l6ZSxcbiAgICBuZXh0U2Nyb2xsVG9JbmRleCA9IF9yZWYgLyo6OiAqLy5uZXh0U2Nyb2xsVG9JbmRleCxcbiAgICBzY3JvbGxUb0luZGV4ID0gX3JlZiAvKjo6ICovLnNjcm9sbFRvSW5kZXgsXG4gICAgdXBkYXRlU2Nyb2xsT2Zmc2V0Rm9yU2Nyb2xsVG9JbmRleCA9IF9yZWYgLyo6OiAqLy51cGRhdGVTY3JvbGxPZmZzZXRGb3JTY3JvbGxUb0luZGV4O1xuICAvLyBEb24ndCBjb21wYXJlIGNlbGwgc2l6ZXMgaWYgdGhleSBhcmUgZnVuY3Rpb25zIGJlY2F1c2UgaW5saW5lIGZ1bmN0aW9ucyB3b3VsZCBjYXVzZSBpbmZpbml0ZSBsb29wcy5cbiAgLy8gSW4gdGhhdCBldmVudCB1c2VycyBzaG91bGQgdXNlIHRoZSBtYW51YWwgcmVjb21wdXRlIG1ldGhvZHMgdG8gaW5mb3JtIG9mIGNoYW5nZXMuXG4gIGlmIChjZWxsQ291bnQgIT09IG5leHRDZWxsc0NvdW50IHx8ICh0eXBlb2YgY2VsbFNpemUgPT09ICdudW1iZXInIHx8IHR5cGVvZiBuZXh0Q2VsbFNpemUgPT09ICdudW1iZXInKSAmJiBjZWxsU2l6ZSAhPT0gbmV4dENlbGxTaXplKSB7XG4gICAgY29tcHV0ZU1ldGFkYXRhQ2FsbGJhY2soY29tcHV0ZU1ldGFkYXRhQ2FsbGJhY2tQcm9wcyk7XG5cbiAgICAvLyBVcGRhdGVkIGNlbGwgbWV0YWRhdGEgbWF5IGhhdmUgaGlkZGVuIHRoZSBwcmV2aW91cyBzY3JvbGxlZC10byBpdGVtLlxuICAgIC8vIEluIHRoaXMgY2FzZSB3ZSBzaG91bGQgYWxzbyB1cGRhdGUgdGhlIHNjcm9sbFRvcCB0byBlbnN1cmUgaXQgc3RheXMgdmlzaWJsZS5cbiAgICBpZiAoc2Nyb2xsVG9JbmRleCA+PSAwICYmIHNjcm9sbFRvSW5kZXggPT09IG5leHRTY3JvbGxUb0luZGV4KSB7XG4gICAgICB1cGRhdGVTY3JvbGxPZmZzZXRGb3JTY3JvbGxUb0luZGV4KCk7XG4gICAgfVxuICB9XG59IiwiaW1wb3J0IG9iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIi4vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZS5qc1wiO1xuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKGUsIHQpIHtcbiAgaWYgKG51bGwgPT0gZSkgcmV0dXJuIHt9O1xuICB2YXIgbyxcbiAgICByLFxuICAgIGkgPSBvYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKGUsIHQpO1xuICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgIHZhciBuID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhlKTtcbiAgICBmb3IgKHIgPSAwOyByIDwgbi5sZW5ndGg7IHIrKykgbyA9IG5bcl0sIC0xID09PSB0LmluZGV4T2YobykgJiYge30ucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChlLCBvKSAmJiAoaVtvXSA9IGVbb10pO1xuICB9XG4gIHJldHVybiBpO1xufVxuZXhwb3J0IHsgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGFzIGRlZmF1bHQgfTsiLCJmdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShyLCBlKSB7XG4gIGlmIChudWxsID09IHIpIHJldHVybiB7fTtcbiAgdmFyIHQgPSB7fTtcbiAgZm9yICh2YXIgbiBpbiByKSBpZiAoe30uaGFzT3duUHJvcGVydHkuY2FsbChyLCBuKSkge1xuICAgIGlmICgtMSAhPT0gZS5pbmRleE9mKG4pKSBjb250aW51ZTtcbiAgICB0W25dID0gcltuXTtcbiAgfVxuICByZXR1cm4gdDtcbn1cbmV4cG9ydCB7IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGFzIGRlZmF1bHQgfTsiLCJpbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCI7XG5pbXBvcnQgX2NyZWF0ZUNsYXNzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzXCI7XG5pbXBvcnQgX2RlZmluZVByb3BlcnR5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5XCI7XG4vKjo6IGltcG9ydCB0eXBlIHtBbGlnbm1lbnQsIENlbGxTaXplR2V0dGVyLCBWaXNpYmxlQ2VsbFJhbmdlfSBmcm9tICcuLi90eXBlcyc7Ki9cbi8qOjogdHlwZSBDZWxsU2l6ZUFuZFBvc2l0aW9uTWFuYWdlclBhcmFtcyA9IHtcbiAgY2VsbENvdW50OiBudW1iZXIsXG4gIGNlbGxTaXplR2V0dGVyOiBDZWxsU2l6ZUdldHRlcixcbiAgZXN0aW1hdGVkQ2VsbFNpemU6IG51bWJlcixcbn07Ki9cbi8qOjogdHlwZSBDb25maWd1cmVQYXJhbXMgPSB7XG4gIGNlbGxDb3VudDogbnVtYmVyLFxuICBlc3RpbWF0ZWRDZWxsU2l6ZTogbnVtYmVyLFxuICBjZWxsU2l6ZUdldHRlcjogQ2VsbFNpemVHZXR0ZXIsXG59OyovXG4vKjo6IHR5cGUgR2V0VXBkYXRlZE9mZnNldEZvckluZGV4ID0ge1xuICBhbGlnbjogQWxpZ25tZW50LFxuICBjb250YWluZXJTaXplOiBudW1iZXIsXG4gIGN1cnJlbnRPZmZzZXQ6IG51bWJlcixcbiAgdGFyZ2V0SW5kZXg6IG51bWJlcixcbn07Ki9cbi8qOjogdHlwZSBHZXRWaXNpYmxlQ2VsbFJhbmdlUGFyYW1zID0ge1xuICBjb250YWluZXJTaXplOiBudW1iZXIsXG4gIG9mZnNldDogbnVtYmVyLFxufTsqL1xuLyo6OiB0eXBlIFNpemVBbmRQb3NpdGlvbkRhdGEgPSB7XG4gIG9mZnNldDogbnVtYmVyLFxuICBzaXplOiBudW1iZXIsXG59OyovXG4vKipcbiAqIEp1c3QtaW4tdGltZSBjYWxjdWxhdGVzIGFuZCBjYWNoZXMgc2l6ZSBhbmQgcG9zaXRpb24gaW5mb3JtYXRpb24gZm9yIGEgY29sbGVjdGlvbiBvZiBjZWxscy5cbiAqL1xudmFyIENlbGxTaXplQW5kUG9zaXRpb25NYW5hZ2VyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gQ2VsbFNpemVBbmRQb3NpdGlvbk1hbmFnZXIoX3JlZiAvKjo6ICovKSB7XG4gICAgdmFyIGNlbGxDb3VudCA9IF9yZWYgLyo6OiAqLy5jZWxsQ291bnQsXG4gICAgICBjZWxsU2l6ZUdldHRlciA9IF9yZWYgLyo6OiAqLy5jZWxsU2l6ZUdldHRlcixcbiAgICAgIGVzdGltYXRlZENlbGxTaXplID0gX3JlZiAvKjo6ICovLmVzdGltYXRlZENlbGxTaXplO1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDZWxsU2l6ZUFuZFBvc2l0aW9uTWFuYWdlcik7XG4gICAgLy8gQ2FjaGUgb2Ygc2l6ZSBhbmQgcG9zaXRpb24gZGF0YSBmb3IgY2VsbHMsIG1hcHBlZCBieSBjZWxsIGluZGV4LlxuICAgIC8vIE5vdGUgdGhhdCBpbnZhbGlkIHZhbHVlcyBtYXkgZXhpc3QgaW4gdGhpcyBtYXAgc28gb25seSByZWx5IG9uIGNlbGxzIHVwIHRvIHRoaXMuX2xhc3RNZWFzdXJlZEluZGV4XG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwiX2NlbGxTaXplQW5kUG9zaXRpb25EYXRhXCIsIHt9KTtcbiAgICAvLyBNZWFzdXJlbWVudHMgZm9yIGNlbGxzIHVwIHRvIHRoaXMgaW5kZXggY2FuIGJlIHRydXN0ZWQ7IGNlbGxzIGFmdGVyd2FyZCBzaG91bGQgYmUgZXN0aW1hdGVkLlxuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIl9sYXN0TWVhc3VyZWRJbmRleFwiLCAtMSk7XG4gICAgLy8gVXNlZCBpbiBkZWZlcnJlZCBtb2RlIHRvIHRyYWNrIHdoaWNoIGNlbGxzIGhhdmUgYmVlbiBxdWV1ZWQgZm9yIG1lYXN1cmVtZW50LlxuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIl9sYXN0QmF0Y2hlZEluZGV4XCIsIC0xKTtcbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJfY2VsbENvdW50XCIsIHZvaWQgMCk7XG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwiX2NlbGxTaXplR2V0dGVyXCIsIHZvaWQgMCk7XG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwiX2VzdGltYXRlZENlbGxTaXplXCIsIHZvaWQgMCk7XG4gICAgdGhpcy5fY2VsbFNpemVHZXR0ZXIgPSBjZWxsU2l6ZUdldHRlcjtcbiAgICB0aGlzLl9jZWxsQ291bnQgPSBjZWxsQ291bnQ7XG4gICAgdGhpcy5fZXN0aW1hdGVkQ2VsbFNpemUgPSBlc3RpbWF0ZWRDZWxsU2l6ZTtcbiAgfVxuICByZXR1cm4gX2NyZWF0ZUNsYXNzKENlbGxTaXplQW5kUG9zaXRpb25NYW5hZ2VyLCBbe1xuICAgIGtleTogXCJhcmVPZmZzZXRzQWRqdXN0ZWRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gYXJlT2Zmc2V0c0FkanVzdGVkKCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjb25maWd1cmVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29uZmlndXJlKF9yZWYyIC8qOjogKi8pIHtcbiAgICAgIHZhciBjZWxsQ291bnQgPSBfcmVmMiAvKjo6ICovLmNlbGxDb3VudCxcbiAgICAgICAgZXN0aW1hdGVkQ2VsbFNpemUgPSBfcmVmMiAvKjo6ICovLmVzdGltYXRlZENlbGxTaXplLFxuICAgICAgICBjZWxsU2l6ZUdldHRlciA9IF9yZWYyIC8qOjogKi8uY2VsbFNpemVHZXR0ZXI7XG4gICAgICB0aGlzLl9jZWxsQ291bnQgPSBjZWxsQ291bnQ7XG4gICAgICB0aGlzLl9lc3RpbWF0ZWRDZWxsU2l6ZSA9IGVzdGltYXRlZENlbGxTaXplO1xuICAgICAgdGhpcy5fY2VsbFNpemVHZXR0ZXIgPSBjZWxsU2l6ZUdldHRlcjtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0Q2VsbENvdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldENlbGxDb3VudCgpIC8qOiBudW1iZXIqL3tcbiAgICAgIHJldHVybiB0aGlzLl9jZWxsQ291bnQ7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdldEVzdGltYXRlZENlbGxTaXplXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldEVzdGltYXRlZENlbGxTaXplKCkgLyo6IG51bWJlciove1xuICAgICAgcmV0dXJuIHRoaXMuX2VzdGltYXRlZENlbGxTaXplO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZXRMYXN0TWVhc3VyZWRJbmRleFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRMYXN0TWVhc3VyZWRJbmRleCgpIC8qOiBudW1iZXIqL3tcbiAgICAgIHJldHVybiB0aGlzLl9sYXN0TWVhc3VyZWRJbmRleDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0T2Zmc2V0QWRqdXN0bWVudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRPZmZzZXRBZGp1c3RtZW50KCkge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgcmV0dXJucyB0aGUgc2l6ZSBhbmQgcG9zaXRpb24gZm9yIHRoZSBjZWxsIGF0IHRoZSBzcGVjaWZpZWQgaW5kZXguXG4gICAgICogSXQganVzdC1pbi10aW1lIGNhbGN1bGF0ZXMgKG9yIHVzZWQgY2FjaGVkIHZhbHVlcykgZm9yIGNlbGxzIGxlYWRpbmcgdXAgdG8gdGhlIGluZGV4LlxuICAgICAqL1xuICB9LCB7XG4gICAga2V5OiBcImdldFNpemVBbmRQb3NpdGlvbk9mQ2VsbFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRTaXplQW5kUG9zaXRpb25PZkNlbGwoaW5kZXggLyo6IG51bWJlciovKSAvKjogU2l6ZUFuZFBvc2l0aW9uRGF0YSove1xuICAgICAgaWYgKGluZGV4IDwgMCB8fCBpbmRleCA+PSB0aGlzLl9jZWxsQ291bnQpIHtcbiAgICAgICAgdGhyb3cgRXJyb3IoXCJSZXF1ZXN0ZWQgaW5kZXggXCIuY29uY2F0KGluZGV4LCBcIiBpcyBvdXRzaWRlIG9mIHJhbmdlIDAuLlwiKS5jb25jYXQodGhpcy5fY2VsbENvdW50KSk7XG4gICAgICB9XG4gICAgICBpZiAoaW5kZXggPiB0aGlzLl9sYXN0TWVhc3VyZWRJbmRleCkge1xuICAgICAgICB2YXIgbGFzdE1lYXN1cmVkQ2VsbFNpemVBbmRQb3NpdGlvbiA9IHRoaXMuZ2V0U2l6ZUFuZFBvc2l0aW9uT2ZMYXN0TWVhc3VyZWRDZWxsKCk7XG4gICAgICAgIHZhciBvZmZzZXQgPSBsYXN0TWVhc3VyZWRDZWxsU2l6ZUFuZFBvc2l0aW9uLm9mZnNldCArIGxhc3RNZWFzdXJlZENlbGxTaXplQW5kUG9zaXRpb24uc2l6ZTtcbiAgICAgICAgZm9yICh2YXIgaSA9IHRoaXMuX2xhc3RNZWFzdXJlZEluZGV4ICsgMTsgaSA8PSBpbmRleDsgaSsrKSB7XG4gICAgICAgICAgdmFyIHNpemUgPSB0aGlzLl9jZWxsU2l6ZUdldHRlcih7XG4gICAgICAgICAgICBpbmRleDogaVxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgLy8gdW5kZWZpbmVkIG9yIE5hTiBwcm9iYWJseSBtZWFucyBhIGxvZ2ljIGVycm9yIGluIHRoZSBzaXplIGdldHRlci5cbiAgICAgICAgICAvLyBudWxsIG1lYW5zIHdlJ3JlIHVzaW5nIENlbGxNZWFzdXJlciBhbmQgaGF2ZW4ndCB5ZXQgbWVhc3VyZWQgYSBnaXZlbiBpbmRleC5cbiAgICAgICAgICBpZiAoc2l6ZSA9PT0gdW5kZWZpbmVkIHx8IGlzTmFOKHNpemUpKSB7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcihcIkludmFsaWQgc2l6ZSByZXR1cm5lZCBmb3IgY2VsbCBcIi5jb25jYXQoaSwgXCIgb2YgdmFsdWUgXCIpLmNvbmNhdChzaXplKSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChzaXplID09PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLl9jZWxsU2l6ZUFuZFBvc2l0aW9uRGF0YVtpXSA9IHtcbiAgICAgICAgICAgICAgb2Zmc2V0OiBvZmZzZXQsXG4gICAgICAgICAgICAgIHNpemU6IDBcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLl9sYXN0QmF0Y2hlZEluZGV4ID0gaW5kZXg7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2NlbGxTaXplQW5kUG9zaXRpb25EYXRhW2ldID0ge1xuICAgICAgICAgICAgICBvZmZzZXQ6IG9mZnNldCxcbiAgICAgICAgICAgICAgc2l6ZTogc2l6ZVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIG9mZnNldCArPSBzaXplO1xuICAgICAgICAgICAgdGhpcy5fbGFzdE1lYXN1cmVkSW5kZXggPSBpbmRleDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLl9jZWxsU2l6ZUFuZFBvc2l0aW9uRGF0YVtpbmRleF07XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdldFNpemVBbmRQb3NpdGlvbk9mTGFzdE1lYXN1cmVkQ2VsbFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRTaXplQW5kUG9zaXRpb25PZkxhc3RNZWFzdXJlZENlbGwoKSAvKjogU2l6ZUFuZFBvc2l0aW9uRGF0YSove1xuICAgICAgcmV0dXJuIHRoaXMuX2xhc3RNZWFzdXJlZEluZGV4ID49IDAgPyB0aGlzLl9jZWxsU2l6ZUFuZFBvc2l0aW9uRGF0YVt0aGlzLl9sYXN0TWVhc3VyZWRJbmRleF0gOiB7XG4gICAgICAgIG9mZnNldDogMCxcbiAgICAgICAgc2l6ZTogMFxuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUb3RhbCBzaXplIG9mIGFsbCBjZWxscyBiZWluZyBtZWFzdXJlZC5cbiAgICAgKiBUaGlzIHZhbHVlIHdpbGwgYmUgY29tcGxldGVseSBlc3RpbWF0ZWQgaW5pdGlhbGx5LlxuICAgICAqIEFzIGNlbGxzIGFyZSBtZWFzdXJlZCwgdGhlIGVzdGltYXRlIHdpbGwgYmUgdXBkYXRlZC5cbiAgICAgKi9cbiAgfSwge1xuICAgIGtleTogXCJnZXRUb3RhbFNpemVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0VG90YWxTaXplKCkgLyo6IG51bWJlciove1xuICAgICAgdmFyIGxhc3RNZWFzdXJlZENlbGxTaXplQW5kUG9zaXRpb24gPSB0aGlzLmdldFNpemVBbmRQb3NpdGlvbk9mTGFzdE1lYXN1cmVkQ2VsbCgpO1xuICAgICAgdmFyIHRvdGFsU2l6ZU9mTWVhc3VyZWRDZWxscyA9IGxhc3RNZWFzdXJlZENlbGxTaXplQW5kUG9zaXRpb24ub2Zmc2V0ICsgbGFzdE1lYXN1cmVkQ2VsbFNpemVBbmRQb3NpdGlvbi5zaXplO1xuICAgICAgdmFyIG51bVVubWVhc3VyZWRDZWxscyA9IHRoaXMuX2NlbGxDb3VudCAtIHRoaXMuX2xhc3RNZWFzdXJlZEluZGV4IC0gMTtcbiAgICAgIHZhciB0b3RhbFNpemVPZlVubWVhc3VyZWRDZWxscyA9IG51bVVubWVhc3VyZWRDZWxscyAqIHRoaXMuX2VzdGltYXRlZENlbGxTaXplO1xuICAgICAgcmV0dXJuIHRvdGFsU2l6ZU9mTWVhc3VyZWRDZWxscyArIHRvdGFsU2l6ZU9mVW5tZWFzdXJlZENlbGxzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERldGVybWluZXMgYSBuZXcgb2Zmc2V0IHRoYXQgZW5zdXJlcyBhIGNlcnRhaW4gY2VsbCBpcyB2aXNpYmxlLCBnaXZlbiB0aGUgY3VycmVudCBvZmZzZXQuXG4gICAgICogSWYgdGhlIGNlbGwgaXMgYWxyZWFkeSB2aXNpYmxlIHRoZW4gdGhlIGN1cnJlbnQgb2Zmc2V0IHdpbGwgYmUgcmV0dXJuZWQuXG4gICAgICogSWYgdGhlIGN1cnJlbnQgb2Zmc2V0IGlzIHRvbyBncmVhdCBvciBzbWFsbCwgaXQgd2lsbCBiZSBhZGp1c3RlZCBqdXN0IGVub3VnaCB0byBlbnN1cmUgdGhlIHNwZWNpZmllZCBpbmRleCBpcyB2aXNpYmxlLlxuICAgICAqXG4gICAgICogQHBhcmFtIGFsaWduIERlc2lyZWQgYWxpZ25tZW50IHdpdGhpbiBjb250YWluZXI7IG9uZSBvZiBcImF1dG9cIiAoZGVmYXVsdCksIFwic3RhcnRcIiwgb3IgXCJlbmRcIlxuICAgICAqIEBwYXJhbSBjb250YWluZXJTaXplIFNpemUgKHdpZHRoIG9yIGhlaWdodCkgb2YgdGhlIGNvbnRhaW5lciB2aWV3cG9ydFxuICAgICAqIEBwYXJhbSBjdXJyZW50T2Zmc2V0IENvbnRhaW5lcidzIGN1cnJlbnQgKHggb3IgeSkgb2Zmc2V0XG4gICAgICogQHBhcmFtIHRvdGFsU2l6ZSBUb3RhbCBzaXplICh3aWR0aCBvciBoZWlnaHQpIG9mIGFsbCBjZWxsc1xuICAgICAqIEByZXR1cm4gT2Zmc2V0IHRvIHVzZSB0byBlbnN1cmUgdGhlIHNwZWNpZmllZCBjZWxsIGlzIHZpc2libGVcbiAgICAgKi9cbiAgfSwge1xuICAgIGtleTogXCJnZXRVcGRhdGVkT2Zmc2V0Rm9ySW5kZXhcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0VXBkYXRlZE9mZnNldEZvckluZGV4KF9yZWYzIC8qOjogKi8pIC8qOiBudW1iZXIqL3tcbiAgICAgIHZhciBfcmVmMyRhbGlnbiA9IF9yZWYzIC8qOjogKi8uYWxpZ24sXG4gICAgICAgIGFsaWduID0gX3JlZjMkYWxpZ24gPT09IHZvaWQgMCA/ICdhdXRvJyA6IF9yZWYzJGFsaWduLFxuICAgICAgICBjb250YWluZXJTaXplID0gX3JlZjMgLyo6OiAqLy5jb250YWluZXJTaXplLFxuICAgICAgICBjdXJyZW50T2Zmc2V0ID0gX3JlZjMgLyo6OiAqLy5jdXJyZW50T2Zmc2V0LFxuICAgICAgICB0YXJnZXRJbmRleCA9IF9yZWYzIC8qOjogKi8udGFyZ2V0SW5kZXg7XG4gICAgICBpZiAoY29udGFpbmVyU2l6ZSA8PSAwKSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgICAgfVxuICAgICAgdmFyIGRhdHVtID0gdGhpcy5nZXRTaXplQW5kUG9zaXRpb25PZkNlbGwodGFyZ2V0SW5kZXgpO1xuICAgICAgdmFyIG1heE9mZnNldCA9IGRhdHVtLm9mZnNldDtcbiAgICAgIHZhciBtaW5PZmZzZXQgPSBtYXhPZmZzZXQgLSBjb250YWluZXJTaXplICsgZGF0dW0uc2l6ZTtcbiAgICAgIHZhciBpZGVhbE9mZnNldDtcbiAgICAgIHN3aXRjaCAoYWxpZ24pIHtcbiAgICAgICAgY2FzZSAnc3RhcnQnOlxuICAgICAgICAgIGlkZWFsT2Zmc2V0ID0gbWF4T2Zmc2V0O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdlbmQnOlxuICAgICAgICAgIGlkZWFsT2Zmc2V0ID0gbWluT2Zmc2V0O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdjZW50ZXInOlxuICAgICAgICAgIGlkZWFsT2Zmc2V0ID0gbWF4T2Zmc2V0IC0gKGNvbnRhaW5lclNpemUgLSBkYXR1bS5zaXplKSAvIDI7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgaWRlYWxPZmZzZXQgPSBNYXRoLm1heChtaW5PZmZzZXQsIE1hdGgubWluKG1heE9mZnNldCwgY3VycmVudE9mZnNldCkpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgdmFyIHRvdGFsU2l6ZSA9IHRoaXMuZ2V0VG90YWxTaXplKCk7XG4gICAgICByZXR1cm4gTWF0aC5tYXgoMCwgTWF0aC5taW4odG90YWxTaXplIC0gY29udGFpbmVyU2l6ZSwgaWRlYWxPZmZzZXQpKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0VmlzaWJsZUNlbGxSYW5nZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRWaXNpYmxlQ2VsbFJhbmdlKHBhcmFtcyAvKjogR2V0VmlzaWJsZUNlbGxSYW5nZVBhcmFtcyovKSAvKjogVmlzaWJsZUNlbGxSYW5nZSove1xuICAgICAgdmFyIGNvbnRhaW5lclNpemUgPSBwYXJhbXMuY29udGFpbmVyU2l6ZSxcbiAgICAgICAgb2Zmc2V0ID0gcGFyYW1zLm9mZnNldDtcbiAgICAgIHZhciB0b3RhbFNpemUgPSB0aGlzLmdldFRvdGFsU2l6ZSgpO1xuICAgICAgaWYgKHRvdGFsU2l6ZSA9PT0gMCkge1xuICAgICAgICByZXR1cm4ge307XG4gICAgICB9XG4gICAgICB2YXIgbWF4T2Zmc2V0ID0gb2Zmc2V0ICsgY29udGFpbmVyU2l6ZTtcbiAgICAgIHZhciBzdGFydCA9IHRoaXMuX2ZpbmROZWFyZXN0Q2VsbChvZmZzZXQpO1xuICAgICAgdmFyIGRhdHVtID0gdGhpcy5nZXRTaXplQW5kUG9zaXRpb25PZkNlbGwoc3RhcnQpO1xuICAgICAgb2Zmc2V0ID0gZGF0dW0ub2Zmc2V0ICsgZGF0dW0uc2l6ZTtcbiAgICAgIHZhciBzdG9wID0gc3RhcnQ7XG4gICAgICB3aGlsZSAob2Zmc2V0IDwgbWF4T2Zmc2V0ICYmIHN0b3AgPCB0aGlzLl9jZWxsQ291bnQgLSAxKSB7XG4gICAgICAgIHN0b3ArKztcbiAgICAgICAgb2Zmc2V0ICs9IHRoaXMuZ2V0U2l6ZUFuZFBvc2l0aW9uT2ZDZWxsKHN0b3ApLnNpemU7XG4gICAgICB9XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzdGFydDogc3RhcnQsXG4gICAgICAgIHN0b3A6IHN0b3BcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2xlYXIgYWxsIGNhY2hlZCB2YWx1ZXMgZm9yIGNlbGxzIGFmdGVyIHRoZSBzcGVjaWZpZWQgaW5kZXguXG4gICAgICogVGhpcyBtZXRob2Qgc2hvdWxkIGJlIGNhbGxlZCBmb3IgYW55IGNlbGwgdGhhdCBoYXMgY2hhbmdlZCBpdHMgc2l6ZS5cbiAgICAgKiBJdCB3aWxsIG5vdCBpbW1lZGlhdGVseSBwZXJmb3JtIGFueSBjYWxjdWxhdGlvbnM7IHRoZXknbGwgYmUgcGVyZm9ybWVkIHRoZSBuZXh0IHRpbWUgZ2V0U2l6ZUFuZFBvc2l0aW9uT2ZDZWxsKCkgaXMgY2FsbGVkLlxuICAgICAqL1xuICB9LCB7XG4gICAga2V5OiBcInJlc2V0Q2VsbFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZXNldENlbGwoaW5kZXggLyo6IG51bWJlciovKSAvKjogdm9pZCove1xuICAgICAgdGhpcy5fbGFzdE1lYXN1cmVkSW5kZXggPSBNYXRoLm1pbih0aGlzLl9sYXN0TWVhc3VyZWRJbmRleCwgaW5kZXggLSAxKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiX2JpbmFyeVNlYXJjaFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfYmluYXJ5U2VhcmNoKGhpZ2ggLyo6IG51bWJlciovLCBsb3cgLyo6IG51bWJlciovLCBvZmZzZXQgLyo6IG51bWJlciovKSAvKjogbnVtYmVyKi97XG4gICAgICB3aGlsZSAobG93IDw9IGhpZ2gpIHtcbiAgICAgICAgdmFyIG1pZGRsZSA9IGxvdyArIE1hdGguZmxvb3IoKGhpZ2ggLSBsb3cpIC8gMik7XG4gICAgICAgIHZhciBjdXJyZW50T2Zmc2V0ID0gdGhpcy5nZXRTaXplQW5kUG9zaXRpb25PZkNlbGwobWlkZGxlKS5vZmZzZXQ7XG4gICAgICAgIGlmIChjdXJyZW50T2Zmc2V0ID09PSBvZmZzZXQpIHtcbiAgICAgICAgICByZXR1cm4gbWlkZGxlO1xuICAgICAgICB9IGVsc2UgaWYgKGN1cnJlbnRPZmZzZXQgPCBvZmZzZXQpIHtcbiAgICAgICAgICBsb3cgPSBtaWRkbGUgKyAxO1xuICAgICAgICB9IGVsc2UgaWYgKGN1cnJlbnRPZmZzZXQgPiBvZmZzZXQpIHtcbiAgICAgICAgICBoaWdoID0gbWlkZGxlIC0gMTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGxvdyA+IDApIHtcbiAgICAgICAgcmV0dXJuIGxvdyAtIDE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gMDtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiX2V4cG9uZW50aWFsU2VhcmNoXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9leHBvbmVudGlhbFNlYXJjaChpbmRleCAvKjogbnVtYmVyKi8sIG9mZnNldCAvKjogbnVtYmVyKi8pIC8qOiBudW1iZXIqL3tcbiAgICAgIHZhciBpbnRlcnZhbCA9IDE7XG4gICAgICB3aGlsZSAoaW5kZXggPCB0aGlzLl9jZWxsQ291bnQgJiYgdGhpcy5nZXRTaXplQW5kUG9zaXRpb25PZkNlbGwoaW5kZXgpLm9mZnNldCA8IG9mZnNldCkge1xuICAgICAgICBpbmRleCArPSBpbnRlcnZhbDtcbiAgICAgICAgaW50ZXJ2YWwgKj0gMjtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLl9iaW5hcnlTZWFyY2goTWF0aC5taW4oaW5kZXgsIHRoaXMuX2NlbGxDb3VudCAtIDEpLCBNYXRoLmZsb29yKGluZGV4IC8gMiksIG9mZnNldCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2VhcmNoZXMgZm9yIHRoZSBjZWxsIChpbmRleCkgbmVhcmVzdCB0aGUgc3BlY2lmaWVkIG9mZnNldC5cbiAgICAgKlxuICAgICAqIElmIG5vIGV4YWN0IG1hdGNoIGlzIGZvdW5kIHRoZSBuZXh0IGxvd2VzdCBjZWxsIGluZGV4IHdpbGwgYmUgcmV0dXJuZWQuXG4gICAgICogVGhpcyBhbGxvd3MgcGFydGlhbGx5IHZpc2libGUgY2VsbHMgKHdpdGggb2Zmc2V0cyBqdXN0IGJlZm9yZS9hYm92ZSB0aGUgZm9sZCkgdG8gYmUgdmlzaWJsZS5cbiAgICAgKi9cbiAgfSwge1xuICAgIGtleTogXCJfZmluZE5lYXJlc3RDZWxsXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9maW5kTmVhcmVzdENlbGwob2Zmc2V0IC8qOiBudW1iZXIqLykgLyo6IG51bWJlciove1xuICAgICAgaWYgKGlzTmFOKG9mZnNldCkpIHtcbiAgICAgICAgdGhyb3cgRXJyb3IoXCJJbnZhbGlkIG9mZnNldCBcIi5jb25jYXQob2Zmc2V0LCBcIiBzcGVjaWZpZWRcIikpO1xuICAgICAgfVxuXG4gICAgICAvLyBPdXIgc2VhcmNoIGFsZ29yaXRobXMgZmluZCB0aGUgbmVhcmVzdCBtYXRjaCBhdCBvciBiZWxvdyB0aGUgc3BlY2lmaWVkIG9mZnNldC5cbiAgICAgIC8vIFNvIG1ha2Ugc3VyZSB0aGUgb2Zmc2V0IGlzIGF0IGxlYXN0IDAgb3Igbm8gbWF0Y2ggd2lsbCBiZSBmb3VuZC5cbiAgICAgIG9mZnNldCA9IE1hdGgubWF4KDAsIG9mZnNldCk7XG4gICAgICB2YXIgbGFzdE1lYXN1cmVkQ2VsbFNpemVBbmRQb3NpdGlvbiA9IHRoaXMuZ2V0U2l6ZUFuZFBvc2l0aW9uT2ZMYXN0TWVhc3VyZWRDZWxsKCk7XG4gICAgICB2YXIgbGFzdE1lYXN1cmVkSW5kZXggPSBNYXRoLm1heCgwLCB0aGlzLl9sYXN0TWVhc3VyZWRJbmRleCk7XG4gICAgICBpZiAobGFzdE1lYXN1cmVkQ2VsbFNpemVBbmRQb3NpdGlvbi5vZmZzZXQgPj0gb2Zmc2V0KSB7XG4gICAgICAgIC8vIElmIHdlJ3ZlIGFscmVhZHkgbWVhc3VyZWQgY2VsbHMgd2l0aGluIHRoaXMgcmFuZ2UganVzdCB1c2UgYSBiaW5hcnkgc2VhcmNoIGFzIGl0J3MgZmFzdGVyLlxuICAgICAgICByZXR1cm4gdGhpcy5fYmluYXJ5U2VhcmNoKGxhc3RNZWFzdXJlZEluZGV4LCAwLCBvZmZzZXQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gSWYgd2UgaGF2ZW4ndCB5ZXQgbWVhc3VyZWQgdGhpcyBoaWdoLCBmYWxsYmFjayB0byBhbiBleHBvbmVudGlhbCBzZWFyY2ggd2l0aCBhbiBpbm5lciBiaW5hcnkgc2VhcmNoLlxuICAgICAgICAvLyBUaGUgZXhwb25lbnRpYWwgc2VhcmNoIGF2b2lkcyBwcmUtY29tcHV0aW5nIHNpemVzIGZvciB0aGUgZnVsbCBzZXQgb2YgY2VsbHMgYXMgYSBiaW5hcnkgc2VhcmNoIHdvdWxkLlxuICAgICAgICAvLyBUaGUgb3ZlcmFsbCBjb21wbGV4aXR5IGZvciB0aGlzIGFwcHJvYWNoIGlzIE8obG9nIG4pLlxuICAgICAgICByZXR1cm4gdGhpcy5fZXhwb25lbnRpYWxTZWFyY2gobGFzdE1lYXN1cmVkSW5kZXgsIG9mZnNldCk7XG4gICAgICB9XG4gICAgfVxuICB9XSk7XG59KCk7XG5leHBvcnQgeyBDZWxsU2l6ZUFuZFBvc2l0aW9uTWFuYWdlciBhcyBkZWZhdWx0IH07IiwiLyo6OiB0eXBlIENhbGxiYWNrID0gKHRpbWVzdGFtcDogbnVtYmVyKSA9PiB2b2lkOyovXG4vKjo6IHR5cGUgQ2FuY2VsQW5pbWF0aW9uRnJhbWUgPSAocmVxdWVzdElkOiBudW1iZXIpID0+IHZvaWQ7Ki9cbi8qOjogdHlwZSBSZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPSAoY2FsbGJhY2s6IENhbGxiYWNrKSA9PiBudW1iZXI7Ki9cbi8vIFByb3Blcmx5IGhhbmRsZSBzZXJ2ZXItc2lkZSByZW5kZXJpbmcuXG52YXIgd2luO1xuaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gIHdpbiA9IHdpbmRvdztcbn0gZWxzZSBpZiAodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnKSB7XG4gIHdpbiA9IHNlbGY7XG59IGVsc2Uge1xuICB3aW4gPSB7fTtcbn1cblxuLy8gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCkgc2hpbSBieSBQYXVsIElyaXNoXG4vLyBodHRwOi8vcGF1bGlyaXNoLmNvbS8yMDExL3JlcXVlc3RhbmltYXRpb25mcmFtZS1mb3Itc21hcnQtYW5pbWF0aW5nL1xudmFyIHJlcXVlc3QgPSB3aW4ucmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8IHdpbi53ZWJraXRSZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHwgd2luLm1velJlcXVlc3RBbmltYXRpb25GcmFtZSB8fCB3aW4ub1JlcXVlc3RBbmltYXRpb25GcmFtZSB8fCB3aW4ubXNSZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHwgZnVuY3Rpb24gKGNhbGxiYWNrIC8qOiBDYWxsYmFjayovKSAvKjogUmVxdWVzdEFuaW1hdGlvbkZyYW1lKi97XG4gIHJldHVybiAod2luIC8qOiBhbnkqLykuc2V0VGltZW91dChjYWxsYmFjaywgMTAwMCAvIDYwKTtcbn07XG52YXIgY2FuY2VsID0gd2luLmNhbmNlbEFuaW1hdGlvbkZyYW1lIHx8IHdpbi53ZWJraXRDYW5jZWxBbmltYXRpb25GcmFtZSB8fCB3aW4ubW96Q2FuY2VsQW5pbWF0aW9uRnJhbWUgfHwgd2luLm9DYW5jZWxBbmltYXRpb25GcmFtZSB8fCB3aW4ubXNDYW5jZWxBbmltYXRpb25GcmFtZSB8fCBmdW5jdGlvbiAoaWQgLyo6IG51bWJlciovKSB7XG4gICh3aW4gLyo6IGFueSovKS5jbGVhclRpbWVvdXQoaWQpO1xufTtcbmV4cG9ydCB2YXIgcmFmIC8qOiBSZXF1ZXN0QW5pbWF0aW9uRnJhbWUqLyA9IChyZXF1ZXN0IC8qOiBhbnkqLyk7XG5leHBvcnQgdmFyIGNhZiAvKjogQ2FuY2VsQW5pbWF0aW9uRnJhbWUqLyA9IChjYW5jZWwgLyo6IGFueSovKTsiLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCI7XG5pbXBvcnQgX2NyZWF0ZUNsYXNzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzXCI7XG5pbXBvcnQgX2RlZmluZVByb3BlcnR5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5XCI7XG52YXIgX2V4Y2x1ZGVkID0gW1wibWF4U2Nyb2xsU2l6ZVwiXTtcbi8qOjogaW1wb3J0IHR5cGUge0FsaWdubWVudCwgQ2VsbFNpemVHZXR0ZXIsIFZpc2libGVDZWxsUmFuZ2V9IGZyb20gJy4uL3R5cGVzJzsqL1xuaW1wb3J0IENlbGxTaXplQW5kUG9zaXRpb25NYW5hZ2VyIGZyb20gJy4vQ2VsbFNpemVBbmRQb3NpdGlvbk1hbmFnZXInO1xuaW1wb3J0IHsgZ2V0TWF4RWxlbWVudFNpemUgfSBmcm9tICcuL21heEVsZW1lbnRTaXplLmpzJztcbi8qOjogdHlwZSBDb250YWluZXJTaXplQW5kT2Zmc2V0ID0ge1xuICBjb250YWluZXJTaXplOiBudW1iZXIsXG4gIG9mZnNldDogbnVtYmVyLFxufTsqL1xuLyo6OiB0eXBlIFBhcmFtcyA9IHtcbiAgbWF4U2Nyb2xsU2l6ZT86IG51bWJlcixcbiAgY2VsbENvdW50OiBudW1iZXIsXG4gIGNlbGxTaXplR2V0dGVyOiBDZWxsU2l6ZUdldHRlcixcbiAgZXN0aW1hdGVkQ2VsbFNpemU6IG51bWJlcixcbn07Ki9cbi8qKlxuICogQnJvd3NlcnMgaGF2ZSBzY3JvbGwgb2Zmc2V0IGxpbWl0YXRpb25zIChlZyBDaHJvbWUgc3RvcHMgc2Nyb2xsaW5nIGF0IH4zMy41TSBwaXhlbHMgd2hlcmUgYXMgRWRnZSB0b3BzIG91dCBhdCB+MS41TSBwaXhlbHMpLlxuICogQWZ0ZXIgYSBjZXJ0YWluIHBvc2l0aW9uLCB0aGUgYnJvd3NlciB3b24ndCBhbGxvdyB0aGUgdXNlciB0byBzY3JvbGwgZnVydGhlciAoZXZlbiB2aWEgSmF2YVNjcmlwdCBzY3JvbGwgb2Zmc2V0IGFkanVzdG1lbnRzKS5cbiAqIFRoaXMgdXRpbCBwaWNrcyBhIGxvd2VyIGNlaWxpbmcgZm9yIG1heCBzaXplIGFuZCBhcnRpZmljaWFsbHkgYWRqdXN0cyBwb3NpdGlvbnMgd2l0aGluIHRvIG1ha2UgaXQgdHJhbnNwYXJlbnQgZm9yIHVzZXJzLlxuICovXG4vKipcbiAqIEV4dGVuZHMgQ2VsbFNpemVBbmRQb3NpdGlvbk1hbmFnZXIgYW5kIGFkZHMgc2NhbGluZyBiZWhhdmlvciBmb3IgbGlzdHMgdGhhdCBhcmUgdG9vIGxhcmdlIHRvIGZpdCB3aXRoaW4gYSBicm93c2VyJ3MgbmF0aXZlIGxpbWl0cy5cbiAqL1xudmFyIFNjYWxpbmdDZWxsU2l6ZUFuZFBvc2l0aW9uTWFuYWdlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFNjYWxpbmdDZWxsU2l6ZUFuZFBvc2l0aW9uTWFuYWdlcihfcmVmIC8qOjogKi8pIHtcbiAgICB2YXIgX3JlZiRtYXhTY3JvbGxTaXplID0gX3JlZiAvKjo6ICovLm1heFNjcm9sbFNpemUsXG4gICAgICBtYXhTY3JvbGxTaXplID0gX3JlZiRtYXhTY3JvbGxTaXplID09PSB2b2lkIDAgPyBnZXRNYXhFbGVtZW50U2l6ZSgpIDogX3JlZiRtYXhTY3JvbGxTaXplLFxuICAgICAgcGFyYW1zID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9yZWYgLyo6OiAqLywgX2V4Y2x1ZGVkKTtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU2NhbGluZ0NlbGxTaXplQW5kUG9zaXRpb25NYW5hZ2VyKTtcbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJfY2VsbFNpemVBbmRQb3NpdGlvbk1hbmFnZXJcIiwgdm9pZCAwKTtcbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJfbWF4U2Nyb2xsU2l6ZVwiLCB2b2lkIDApO1xuICAgIC8vIEZhdm9yIGNvbXBvc2l0aW9uIG92ZXIgaW5oZXJpdGFuY2UgdG8gc2ltcGxpZnkgSUUxMCBzdXBwb3J0XG4gICAgdGhpcy5fY2VsbFNpemVBbmRQb3NpdGlvbk1hbmFnZXIgPSBuZXcgQ2VsbFNpemVBbmRQb3NpdGlvbk1hbmFnZXIocGFyYW1zKTtcbiAgICB0aGlzLl9tYXhTY3JvbGxTaXplID0gbWF4U2Nyb2xsU2l6ZTtcbiAgfVxuICByZXR1cm4gX2NyZWF0ZUNsYXNzKFNjYWxpbmdDZWxsU2l6ZUFuZFBvc2l0aW9uTWFuYWdlciwgW3tcbiAgICBrZXk6IFwiYXJlT2Zmc2V0c0FkanVzdGVkXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFyZU9mZnNldHNBZGp1c3RlZCgpIC8qOiBib29sZWFuKi97XG4gICAgICByZXR1cm4gdGhpcy5fY2VsbFNpemVBbmRQb3NpdGlvbk1hbmFnZXIuZ2V0VG90YWxTaXplKCkgPiB0aGlzLl9tYXhTY3JvbGxTaXplO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjb25maWd1cmVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29uZmlndXJlKHBhcmFtc1xuICAgIC8qOiB7XG4gICAgICAgIGNlbGxDb3VudDogbnVtYmVyLFxuICAgICAgICBlc3RpbWF0ZWRDZWxsU2l6ZTogbnVtYmVyLFxuICAgICAgICBjZWxsU2l6ZUdldHRlcjogQ2VsbFNpemVHZXR0ZXIsXG4gICAgICB9Ki9cbiAgICApIHtcbiAgICAgIHRoaXMuX2NlbGxTaXplQW5kUG9zaXRpb25NYW5hZ2VyLmNvbmZpZ3VyZShwYXJhbXMpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZXRDZWxsQ291bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Q2VsbENvdW50KCkgLyo6IG51bWJlciove1xuICAgICAgcmV0dXJuIHRoaXMuX2NlbGxTaXplQW5kUG9zaXRpb25NYW5hZ2VyLmdldENlbGxDb3VudCgpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZXRFc3RpbWF0ZWRDZWxsU2l6ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRFc3RpbWF0ZWRDZWxsU2l6ZSgpIC8qOiBudW1iZXIqL3tcbiAgICAgIHJldHVybiB0aGlzLl9jZWxsU2l6ZUFuZFBvc2l0aW9uTWFuYWdlci5nZXRFc3RpbWF0ZWRDZWxsU2l6ZSgpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZXRMYXN0TWVhc3VyZWRJbmRleFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRMYXN0TWVhc3VyZWRJbmRleCgpIC8qOiBudW1iZXIqL3tcbiAgICAgIHJldHVybiB0aGlzLl9jZWxsU2l6ZUFuZFBvc2l0aW9uTWFuYWdlci5nZXRMYXN0TWVhc3VyZWRJbmRleCgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE51bWJlciBvZiBwaXhlbHMgYSBjZWxsIGF0IHRoZSBnaXZlbiBwb3NpdGlvbiAob2Zmc2V0KSBzaG91bGQgYmUgc2hpZnRlZCBpbiBvcmRlciB0byBmaXQgd2l0aGluIHRoZSBzY2FsZWQgY29udGFpbmVyLlxuICAgICAqIFRoZSBvZmZzZXQgcGFzc2VkIHRvIHRoaXMgZnVuY3Rpb24gaXMgc2NhbGVkIChzYWZlKSBhcyB3ZWxsLlxuICAgICAqL1xuICB9LCB7XG4gICAga2V5OiBcImdldE9mZnNldEFkanVzdG1lbnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0T2Zmc2V0QWRqdXN0bWVudChfcmVmMiAvKjo6ICovKSAvKjogbnVtYmVyKi97XG4gICAgICB2YXIgY29udGFpbmVyU2l6ZSA9IF9yZWYyIC8qOjogKi8uY29udGFpbmVyU2l6ZSxcbiAgICAgICAgb2Zmc2V0ID0gX3JlZjIgLyo6OiAqLy5vZmZzZXQ7XG4gICAgICB2YXIgdG90YWxTaXplID0gdGhpcy5fY2VsbFNpemVBbmRQb3NpdGlvbk1hbmFnZXIuZ2V0VG90YWxTaXplKCk7XG4gICAgICB2YXIgc2FmZVRvdGFsU2l6ZSA9IHRoaXMuZ2V0VG90YWxTaXplKCk7XG4gICAgICB2YXIgb2Zmc2V0UGVyY2VudGFnZSA9IHRoaXMuX2dldE9mZnNldFBlcmNlbnRhZ2Uoe1xuICAgICAgICBjb250YWluZXJTaXplOiBjb250YWluZXJTaXplLFxuICAgICAgICBvZmZzZXQ6IG9mZnNldCxcbiAgICAgICAgdG90YWxTaXplOiBzYWZlVG90YWxTaXplXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBNYXRoLnJvdW5kKG9mZnNldFBlcmNlbnRhZ2UgKiAoc2FmZVRvdGFsU2l6ZSAtIHRvdGFsU2l6ZSkpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZXRTaXplQW5kUG9zaXRpb25PZkNlbGxcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0U2l6ZUFuZFBvc2l0aW9uT2ZDZWxsKGluZGV4IC8qOiBudW1iZXIqLykge1xuICAgICAgcmV0dXJuIHRoaXMuX2NlbGxTaXplQW5kUG9zaXRpb25NYW5hZ2VyLmdldFNpemVBbmRQb3NpdGlvbk9mQ2VsbChpbmRleCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdldFNpemVBbmRQb3NpdGlvbk9mTGFzdE1lYXN1cmVkQ2VsbFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRTaXplQW5kUG9zaXRpb25PZkxhc3RNZWFzdXJlZENlbGwoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fY2VsbFNpemVBbmRQb3NpdGlvbk1hbmFnZXIuZ2V0U2l6ZUFuZFBvc2l0aW9uT2ZMYXN0TWVhc3VyZWRDZWxsKCk7XG4gICAgfVxuXG4gICAgLyoqIFNlZSBDZWxsU2l6ZUFuZFBvc2l0aW9uTWFuYWdlciNnZXRUb3RhbFNpemUgKi9cbiAgfSwge1xuICAgIGtleTogXCJnZXRUb3RhbFNpemVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0VG90YWxTaXplKCkgLyo6IG51bWJlciove1xuICAgICAgcmV0dXJuIE1hdGgubWluKHRoaXMuX21heFNjcm9sbFNpemUsIHRoaXMuX2NlbGxTaXplQW5kUG9zaXRpb25NYW5hZ2VyLmdldFRvdGFsU2l6ZSgpKTtcbiAgICB9XG5cbiAgICAvKiogU2VlIENlbGxTaXplQW5kUG9zaXRpb25NYW5hZ2VyI2dldFVwZGF0ZWRPZmZzZXRGb3JJbmRleCAqL1xuICB9LCB7XG4gICAga2V5OiBcImdldFVwZGF0ZWRPZmZzZXRGb3JJbmRleFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRVcGRhdGVkT2Zmc2V0Rm9ySW5kZXgoX3JlZjMgLyo6OiAqLykge1xuICAgICAgdmFyIF9yZWYzJGFsaWduID0gX3JlZjMgLyo6OiAqLy5hbGlnbixcbiAgICAgICAgYWxpZ24gPSBfcmVmMyRhbGlnbiA9PT0gdm9pZCAwID8gJ2F1dG8nIDogX3JlZjMkYWxpZ24sXG4gICAgICAgIGNvbnRhaW5lclNpemUgPSBfcmVmMyAvKjo6ICovLmNvbnRhaW5lclNpemUsXG4gICAgICAgIGN1cnJlbnRPZmZzZXQgPSBfcmVmMyAvKjo6ICovLmN1cnJlbnRPZmZzZXQsXG4gICAgICAgIHRhcmdldEluZGV4ID0gX3JlZjMgLyo6OiAqLy50YXJnZXRJbmRleDtcbiAgICAgIGN1cnJlbnRPZmZzZXQgPSB0aGlzLl9zYWZlT2Zmc2V0VG9PZmZzZXQoe1xuICAgICAgICBjb250YWluZXJTaXplOiBjb250YWluZXJTaXplLFxuICAgICAgICBvZmZzZXQ6IGN1cnJlbnRPZmZzZXRcbiAgICAgIH0pO1xuICAgICAgdmFyIG9mZnNldCA9IHRoaXMuX2NlbGxTaXplQW5kUG9zaXRpb25NYW5hZ2VyLmdldFVwZGF0ZWRPZmZzZXRGb3JJbmRleCh7XG4gICAgICAgIGFsaWduOiBhbGlnbixcbiAgICAgICAgY29udGFpbmVyU2l6ZTogY29udGFpbmVyU2l6ZSxcbiAgICAgICAgY3VycmVudE9mZnNldDogY3VycmVudE9mZnNldCxcbiAgICAgICAgdGFyZ2V0SW5kZXg6IHRhcmdldEluZGV4XG4gICAgICB9KTtcbiAgICAgIHJldHVybiB0aGlzLl9vZmZzZXRUb1NhZmVPZmZzZXQoe1xuICAgICAgICBjb250YWluZXJTaXplOiBjb250YWluZXJTaXplLFxuICAgICAgICBvZmZzZXQ6IG9mZnNldFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqIFNlZSBDZWxsU2l6ZUFuZFBvc2l0aW9uTWFuYWdlciNnZXRWaXNpYmxlQ2VsbFJhbmdlICovXG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0VmlzaWJsZUNlbGxSYW5nZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRWaXNpYmxlQ2VsbFJhbmdlKF9yZWY0IC8qOjogKi8pIC8qOiBWaXNpYmxlQ2VsbFJhbmdlKi97XG4gICAgICB2YXIgY29udGFpbmVyU2l6ZSA9IF9yZWY0IC8qOjogKi8uY29udGFpbmVyU2l6ZSxcbiAgICAgICAgb2Zmc2V0ID0gX3JlZjQgLyo6OiAqLy5vZmZzZXQ7XG4gICAgICBvZmZzZXQgPSB0aGlzLl9zYWZlT2Zmc2V0VG9PZmZzZXQoe1xuICAgICAgICBjb250YWluZXJTaXplOiBjb250YWluZXJTaXplLFxuICAgICAgICBvZmZzZXQ6IG9mZnNldFxuICAgICAgfSk7XG4gICAgICByZXR1cm4gdGhpcy5fY2VsbFNpemVBbmRQb3NpdGlvbk1hbmFnZXIuZ2V0VmlzaWJsZUNlbGxSYW5nZSh7XG4gICAgICAgIGNvbnRhaW5lclNpemU6IGNvbnRhaW5lclNpemUsXG4gICAgICAgIG9mZnNldDogb2Zmc2V0XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVzZXRDZWxsXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlc2V0Q2VsbChpbmRleCAvKjogbnVtYmVyKi8pIC8qOiB2b2lkKi97XG4gICAgICB0aGlzLl9jZWxsU2l6ZUFuZFBvc2l0aW9uTWFuYWdlci5yZXNldENlbGwoaW5kZXgpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJfZ2V0T2Zmc2V0UGVyY2VudGFnZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZ2V0T2Zmc2V0UGVyY2VudGFnZShfcmVmNSAvKjo6ICovKSB7XG4gICAgICB2YXIgY29udGFpbmVyU2l6ZSA9IF9yZWY1IC8qOjogKi8uY29udGFpbmVyU2l6ZSxcbiAgICAgICAgb2Zmc2V0ID0gX3JlZjUgLyo6OiAqLy5vZmZzZXQsXG4gICAgICAgIHRvdGFsU2l6ZSA9IF9yZWY1IC8qOjogKi8udG90YWxTaXplO1xuICAgICAgcmV0dXJuIHRvdGFsU2l6ZSA8PSBjb250YWluZXJTaXplID8gMCA6IG9mZnNldCAvICh0b3RhbFNpemUgLSBjb250YWluZXJTaXplKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiX29mZnNldFRvU2FmZU9mZnNldFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfb2Zmc2V0VG9TYWZlT2Zmc2V0KF9yZWY2IC8qOjogKi8pIC8qOiBudW1iZXIqL3tcbiAgICAgIHZhciBjb250YWluZXJTaXplID0gX3JlZjYgLyo6OiAqLy5jb250YWluZXJTaXplLFxuICAgICAgICBvZmZzZXQgPSBfcmVmNiAvKjo6ICovLm9mZnNldDtcbiAgICAgIHZhciB0b3RhbFNpemUgPSB0aGlzLl9jZWxsU2l6ZUFuZFBvc2l0aW9uTWFuYWdlci5nZXRUb3RhbFNpemUoKTtcbiAgICAgIHZhciBzYWZlVG90YWxTaXplID0gdGhpcy5nZXRUb3RhbFNpemUoKTtcbiAgICAgIGlmICh0b3RhbFNpemUgPT09IHNhZmVUb3RhbFNpemUpIHtcbiAgICAgICAgcmV0dXJuIG9mZnNldDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBvZmZzZXRQZXJjZW50YWdlID0gdGhpcy5fZ2V0T2Zmc2V0UGVyY2VudGFnZSh7XG4gICAgICAgICAgY29udGFpbmVyU2l6ZTogY29udGFpbmVyU2l6ZSxcbiAgICAgICAgICBvZmZzZXQ6IG9mZnNldCxcbiAgICAgICAgICB0b3RhbFNpemU6IHRvdGFsU2l6ZVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIE1hdGgucm91bmQob2Zmc2V0UGVyY2VudGFnZSAqIChzYWZlVG90YWxTaXplIC0gY29udGFpbmVyU2l6ZSkpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJfc2FmZU9mZnNldFRvT2Zmc2V0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9zYWZlT2Zmc2V0VG9PZmZzZXQoX3JlZjcgLyo6OiAqLykgLyo6IG51bWJlciove1xuICAgICAgdmFyIGNvbnRhaW5lclNpemUgPSBfcmVmNyAvKjo6ICovLmNvbnRhaW5lclNpemUsXG4gICAgICAgIG9mZnNldCA9IF9yZWY3IC8qOjogKi8ub2Zmc2V0O1xuICAgICAgdmFyIHRvdGFsU2l6ZSA9IHRoaXMuX2NlbGxTaXplQW5kUG9zaXRpb25NYW5hZ2VyLmdldFRvdGFsU2l6ZSgpO1xuICAgICAgdmFyIHNhZmVUb3RhbFNpemUgPSB0aGlzLmdldFRvdGFsU2l6ZSgpO1xuICAgICAgaWYgKHRvdGFsU2l6ZSA9PT0gc2FmZVRvdGFsU2l6ZSkge1xuICAgICAgICByZXR1cm4gb2Zmc2V0O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIG9mZnNldFBlcmNlbnRhZ2UgPSB0aGlzLl9nZXRPZmZzZXRQZXJjZW50YWdlKHtcbiAgICAgICAgICBjb250YWluZXJTaXplOiBjb250YWluZXJTaXplLFxuICAgICAgICAgIG9mZnNldDogb2Zmc2V0LFxuICAgICAgICAgIHRvdGFsU2l6ZTogc2FmZVRvdGFsU2l6ZVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIE1hdGgucm91bmQob2Zmc2V0UGVyY2VudGFnZSAqICh0b3RhbFNpemUgLSBjb250YWluZXJTaXplKSk7XG4gICAgICB9XG4gICAgfVxuICB9XSk7XG59KCk7XG5leHBvcnQgeyBTY2FsaW5nQ2VsbFNpemVBbmRQb3NpdGlvbk1hbmFnZXIgYXMgZGVmYXVsdCB9OyIsInZhciBERUZBVUxUX01BWF9FTEVNRU5UX1NJWkUgPSAxNTAwMDAwO1xudmFyIENIUk9NRV9NQVhfRUxFTUVOVF9TSVpFID0gMS42Nzc3MWU3O1xudmFyIGlzQnJvd3NlciA9IGZ1bmN0aW9uIGlzQnJvd3NlcigpIHtcbiAgcmV0dXJuIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnO1xufTtcbnZhciBpc0Nocm9tZSA9IGZ1bmN0aW9uIGlzQ2hyb21lKCkge1xuICByZXR1cm4gISF3aW5kb3cuY2hyb21lO1xufTtcbmV4cG9ydCB2YXIgZ2V0TWF4RWxlbWVudFNpemUgPSBmdW5jdGlvbiBnZXRNYXhFbGVtZW50U2l6ZSgpIC8qOiBudW1iZXIqL3tcbiAgaWYgKGlzQnJvd3NlcigpKSB7XG4gICAgaWYgKGlzQ2hyb21lKCkpIHtcbiAgICAgIHJldHVybiBDSFJPTUVfTUFYX0VMRU1FTlRfU0laRTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIERFRkFVTFRfTUFYX0VMRU1FTlRfU0laRTtcbn07IiwiLyo6OiBpbXBvcnQgdHlwZSB7QWxpZ25tZW50LCBDZWxsU2l6ZX0gZnJvbSAnLi4vdHlwZXMnOyovXG5pbXBvcnQgU2NhbGluZ0NlbGxTaXplQW5kUG9zaXRpb25NYW5hZ2VyIGZyb20gJy4vU2NhbGluZ0NlbGxTaXplQW5kUG9zaXRpb25NYW5hZ2VyLmpzJztcblxuLyoqXG4gKiBIZWxwZXIgZnVuY3Rpb24gdGhhdCBkZXRlcm1pbmVzIHdoZW4gdG8gdXBkYXRlIHNjcm9sbCBvZmZzZXRzIHRvIGVuc3VyZSB0aGF0IGEgc2Nyb2xsLXRvLWluZGV4IHJlbWFpbnMgdmlzaWJsZS5cbiAqIFRoaXMgZnVuY3Rpb24gYWxzbyBlbnN1cmVzIHRoYXQgdGhlIHNjcm9sbCBvZnNldCBpc24ndCBwYXN0IHRoZSBsYXN0IGNvbHVtbi9yb3cgb2YgY2VsbHMuXG4gKi9cbi8qOjogdHlwZSBQYXJhbXMgPSB7XG4gIC8vIFdpZHRoIG9yIGhlaWdodCBvZiBjZWxscyBmb3IgdGhlIGN1cnJlbnQgYXhpc1xuICBjZWxsU2l6ZT86IENlbGxTaXplLFxuXG4gIC8vIE1hbmFnZXMgc2l6ZSBhbmQgcG9zaXRpb24gbWV0YWRhdGEgb2YgY2VsbHNcbiAgY2VsbFNpemVBbmRQb3NpdGlvbk1hbmFnZXI6IFNjYWxpbmdDZWxsU2l6ZUFuZFBvc2l0aW9uTWFuYWdlcixcblxuICAvLyBQcmV2aW91cyBudW1iZXIgb2Ygcm93cyBvciBjb2x1bW5zXG4gIHByZXZpb3VzQ2VsbHNDb3VudDogbnVtYmVyLFxuXG4gIC8vIFByZXZpb3VzIHdpZHRoIG9yIGhlaWdodCBvZiBjZWxsc1xuICBwcmV2aW91c0NlbGxTaXplOiBDZWxsU2l6ZSxcblxuICBwcmV2aW91c1Njcm9sbFRvQWxpZ25tZW50OiBBbGlnbm1lbnQsXG5cbiAgLy8gUHJldmlvdXMgc2Nyb2xsLXRvLWluZGV4XG4gIHByZXZpb3VzU2Nyb2xsVG9JbmRleDogbnVtYmVyLFxuXG4gIC8vIFByZXZpb3VzIHdpZHRoIG9yIGhlaWdodCBvZiB0aGUgdmlydHVhbGl6ZWQgY29udGFpbmVyXG4gIHByZXZpb3VzU2l6ZTogbnVtYmVyLFxuXG4gIC8vIEN1cnJlbnQgc2Nyb2xsTGVmdCBvciBzY3JvbGxUb3BcbiAgc2Nyb2xsT2Zmc2V0OiBudW1iZXIsXG5cbiAgc2Nyb2xsVG9BbGlnbm1lbnQ6IEFsaWdubWVudCxcblxuICAvLyBTY3JvbGwtdG8taW5kZXhcbiAgc2Nyb2xsVG9JbmRleDogbnVtYmVyLFxuXG4gIC8vIFdpZHRoIG9yIGhlaWdodCBvZiB0aGUgdmlydHVhbGl6ZWQgY29udGFpbmVyXG4gIHNpemU6IG51bWJlcixcblxuICBzaXplSnVzdEluY3JlYXNlZEZyb21aZXJvOiBib29sZWFuLFxuXG4gIC8vIENhbGxiYWNrIHRvIGludm9rZSB3aXRoIGFuIHNjcm9sbC10by1pbmRleCB2YWx1ZVxuICB1cGRhdGVTY3JvbGxJbmRleENhbGxiYWNrOiAoaW5kZXg6IG51bWJlcikgPT4gdm9pZCxcbn07Ki9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVwZGF0ZVNjcm9sbEluZGV4SGVscGVyKF9yZWYgLyo6OiAqLykge1xuICB2YXIgY2VsbFNpemUgPSBfcmVmIC8qOjogKi8uY2VsbFNpemUsXG4gICAgY2VsbFNpemVBbmRQb3NpdGlvbk1hbmFnZXIgPSBfcmVmIC8qOjogKi8uY2VsbFNpemVBbmRQb3NpdGlvbk1hbmFnZXIsXG4gICAgcHJldmlvdXNDZWxsc0NvdW50ID0gX3JlZiAvKjo6ICovLnByZXZpb3VzQ2VsbHNDb3VudCxcbiAgICBwcmV2aW91c0NlbGxTaXplID0gX3JlZiAvKjo6ICovLnByZXZpb3VzQ2VsbFNpemUsXG4gICAgcHJldmlvdXNTY3JvbGxUb0FsaWdubWVudCA9IF9yZWYgLyo6OiAqLy5wcmV2aW91c1Njcm9sbFRvQWxpZ25tZW50LFxuICAgIHByZXZpb3VzU2Nyb2xsVG9JbmRleCA9IF9yZWYgLyo6OiAqLy5wcmV2aW91c1Njcm9sbFRvSW5kZXgsXG4gICAgcHJldmlvdXNTaXplID0gX3JlZiAvKjo6ICovLnByZXZpb3VzU2l6ZSxcbiAgICBzY3JvbGxPZmZzZXQgPSBfcmVmIC8qOjogKi8uc2Nyb2xsT2Zmc2V0LFxuICAgIHNjcm9sbFRvQWxpZ25tZW50ID0gX3JlZiAvKjo6ICovLnNjcm9sbFRvQWxpZ25tZW50LFxuICAgIHNjcm9sbFRvSW5kZXggPSBfcmVmIC8qOjogKi8uc2Nyb2xsVG9JbmRleCxcbiAgICBzaXplID0gX3JlZiAvKjo6ICovLnNpemUsXG4gICAgc2l6ZUp1c3RJbmNyZWFzZWRGcm9tWmVybyA9IF9yZWYgLyo6OiAqLy5zaXplSnVzdEluY3JlYXNlZEZyb21aZXJvLFxuICAgIHVwZGF0ZVNjcm9sbEluZGV4Q2FsbGJhY2sgPSBfcmVmIC8qOjogKi8udXBkYXRlU2Nyb2xsSW5kZXhDYWxsYmFjaztcbiAgdmFyIGNlbGxDb3VudCA9IGNlbGxTaXplQW5kUG9zaXRpb25NYW5hZ2VyLmdldENlbGxDb3VudCgpO1xuICB2YXIgaGFzU2Nyb2xsVG9JbmRleCA9IHNjcm9sbFRvSW5kZXggPj0gMCAmJiBzY3JvbGxUb0luZGV4IDwgY2VsbENvdW50O1xuICB2YXIgc2l6ZUhhc0NoYW5nZWQgPSBzaXplICE9PSBwcmV2aW91c1NpemUgfHwgc2l6ZUp1c3RJbmNyZWFzZWRGcm9tWmVybyB8fCAhcHJldmlvdXNDZWxsU2l6ZSB8fCB0eXBlb2YgY2VsbFNpemUgPT09ICdudW1iZXInICYmIGNlbGxTaXplICE9PSBwcmV2aW91c0NlbGxTaXplO1xuXG4gIC8vIElmIHdlIGhhdmUgYSBuZXcgc2Nyb2xsIHRhcmdldCBPUiBpZiBoZWlnaHQvcm93LWhlaWdodCBoYXMgY2hhbmdlZCxcbiAgLy8gV2Ugc2hvdWxkIGVuc3VyZSB0aGF0IHRoZSBzY3JvbGwgdGFyZ2V0IGlzIHZpc2libGUuXG4gIGlmIChoYXNTY3JvbGxUb0luZGV4ICYmIChzaXplSGFzQ2hhbmdlZCB8fCBzY3JvbGxUb0FsaWdubWVudCAhPT0gcHJldmlvdXNTY3JvbGxUb0FsaWdubWVudCB8fCBzY3JvbGxUb0luZGV4ICE9PSBwcmV2aW91c1Njcm9sbFRvSW5kZXgpKSB7XG4gICAgdXBkYXRlU2Nyb2xsSW5kZXhDYWxsYmFjayhzY3JvbGxUb0luZGV4KTtcblxuICAgIC8vIElmIHdlIGRvbid0IGhhdmUgYSBzZWxlY3RlZCBpdGVtIGJ1dCBsaXN0IHNpemUgb3IgbnVtYmVyIG9mIGNoaWxkcmVuIGhhdmUgZGVjcmVhc2VkLFxuICAgIC8vIE1ha2Ugc3VyZSB3ZSBhcmVuJ3Qgc2Nyb2xsZWQgdG9vIGZhciBwYXN0IHRoZSBjdXJyZW50IGNvbnRlbnQuXG4gIH0gZWxzZSBpZiAoIWhhc1Njcm9sbFRvSW5kZXggJiYgY2VsbENvdW50ID4gMCAmJiAoc2l6ZSA8IHByZXZpb3VzU2l6ZSB8fCBjZWxsQ291bnQgPCBwcmV2aW91c0NlbGxzQ291bnQpKSB7XG4gICAgLy8gV2UgbmVlZCB0byBlbnN1cmUgdGhhdCB0aGUgY3VycmVudCBzY3JvbGwgb2Zmc2V0IGlzIHN0aWxsIHdpdGhpbiB0aGUgY29sbGVjdGlvbidzIHJhbmdlLlxuICAgIC8vIFRvIGRvIHRoaXMsIHdlIGRvbid0IG5lZWQgdG8gbWVhc3VyZSBldmVyeXRoaW5nOyBDZWxsTWVhc3VyZXIgd291bGQgcGVyZm9ybSBwb29ybHkuXG4gICAgLy8gSnVzdCBjaGVjayB0byBtYWtlIHN1cmUgd2UncmUgc3RpbGwgb2theS5cbiAgICAvLyBPbmx5IGFkanVzdCB0aGUgc2Nyb2xsIHBvc2l0aW9uIGlmIHdlJ3ZlIHNjcm9sbGVkIGJlbG93IHRoZSBsYXN0IHNldCBvZiByb3dzLlxuICAgIGlmIChzY3JvbGxPZmZzZXQgPiBjZWxsU2l6ZUFuZFBvc2l0aW9uTWFuYWdlci5nZXRUb3RhbFNpemUoKSAtIHNpemUpIHtcbiAgICAgIHVwZGF0ZVNjcm9sbEluZGV4Q2FsbGJhY2soY2VsbENvdW50IC0gMSk7XG4gICAgfVxuICB9XG59IiwiaW1wb3J0IHsgY2FmLCByYWYgfSBmcm9tICcuL2FuaW1hdGlvbkZyYW1lJztcbi8qOjogZXhwb3J0IHR5cGUgQW5pbWF0aW9uVGltZW91dElkID0ge1xuICBpZDogbnVtYmVyLFxufTsqL1xuZXhwb3J0IHZhciBjYW5jZWxBbmltYXRpb25UaW1lb3V0ID0gZnVuY3Rpb24gY2FuY2VsQW5pbWF0aW9uVGltZW91dChmcmFtZSAvKjogQW5pbWF0aW9uVGltZW91dElkKi8pIHtcbiAgcmV0dXJuIGNhZihmcmFtZS5pZCk7XG59O1xuXG4vKipcbiAqIFJlY3Vyc2l2ZWx5IGNhbGxzIHJlcXVlc3RBbmltYXRpb25GcmFtZSB1bnRpbCBhIHNwZWNpZmllZCBkZWxheSBoYXMgYmVlbiBtZXQgb3IgZXhjZWVkZWQuXG4gKiBXaGVuIHRoZSBkZWxheSB0aW1lIGhhcyBiZWVuIHJlYWNoZWQgdGhlIGZ1bmN0aW9uIHlvdSdyZSB0aW1pbmcgb3V0IHdpbGwgYmUgY2FsbGVkLlxuICpcbiAqIENyZWRpdDogSm9lIExhbWJlcnQgKGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL2pvZWxhbWJlcnQvMTAwMjExNiNmaWxlLXJlcXVlc3R0aW1lb3V0LWpzKVxuICovXG5leHBvcnQgdmFyIHJlcXVlc3RBbmltYXRpb25UaW1lb3V0ID0gZnVuY3Rpb24gcmVxdWVzdEFuaW1hdGlvblRpbWVvdXQoY2FsbGJhY2sgLyo6IEZ1bmN0aW9uKi8sIGRlbGF5IC8qOiBudW1iZXIqLykgLyo6IEFuaW1hdGlvblRpbWVvdXRJZCove1xuICB2YXIgc3RhcnQ7XG4gIC8vIHdhaXQgZm9yIGVuZCBvZiBwcm9jZXNzaW5nIGN1cnJlbnQgZXZlbnQgaGFuZGxlciwgYmVjYXVzZSBldmVudCBoYW5kbGVyIG1heSBiZSBsb25nXG4gIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgIHN0YXJ0ID0gRGF0ZS5ub3coKTtcbiAgfSk7XG4gIHZhciBfdGltZW91dCA9IGZ1bmN0aW9uIHRpbWVvdXQoKSB7XG4gICAgaWYgKERhdGUubm93KCkgLSBzdGFydCA+PSBkZWxheSkge1xuICAgICAgY2FsbGJhY2suY2FsbCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBmcmFtZS5pZCA9IHJhZihfdGltZW91dCk7XG4gICAgfVxuICB9O1xuICB2YXIgZnJhbWUgLyo6IEFuaW1hdGlvblRpbWVvdXRJZCovID0ge1xuICAgIGlkOiByYWYoX3RpbWVvdXQpXG4gIH07XG4gIHJldHVybiBmcmFtZTtcbn07IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBfdHlwZW9mIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3R5cGVvZlwiO1xuaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiO1xuaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzc1wiO1xuaW1wb3J0IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIjtcbmltcG9ydCBfZ2V0UHJvdG90eXBlT2YgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2ZcIjtcbmltcG9ydCBfaW5oZXJpdHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIjtcbmltcG9ydCBfZGVmaW5lUHJvcGVydHkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHlcIjtcbmZ1bmN0aW9uIG93bktleXMoZSwgcikgeyB2YXIgdCA9IE9iamVjdC5rZXlzKGUpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgbyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZSk7IHIgJiYgKG8gPSBvLmZpbHRlcihmdW5jdGlvbiAocikgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihlLCByKS5lbnVtZXJhYmxlOyB9KSksIHQucHVzaC5hcHBseSh0LCBvKTsgfSByZXR1cm4gdDsgfVxuZnVuY3Rpb24gX29iamVjdFNwcmVhZChlKSB7IGZvciAodmFyIHIgPSAxOyByIDwgYXJndW1lbnRzLmxlbmd0aDsgcisrKSB7IHZhciB0ID0gbnVsbCAhPSBhcmd1bWVudHNbcl0gPyBhcmd1bWVudHNbcl0gOiB7fTsgciAlIDIgPyBvd25LZXlzKE9iamVjdCh0KSwgITApLmZvckVhY2goZnVuY3Rpb24gKHIpIHsgX2RlZmluZVByb3BlcnR5KGUsIHIsIHRbcl0pOyB9KSA6IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoZSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnModCkpIDogb3duS2V5cyhPYmplY3QodCkpLmZvckVhY2goZnVuY3Rpb24gKHIpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIHIsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodCwgcikpOyB9KTsgfSByZXR1cm4gZTsgfVxuZnVuY3Rpb24gX2NhbGxTdXBlcih0LCBvLCBlKSB7IHJldHVybiBvID0gX2dldFByb3RvdHlwZU9mKG8pLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0LCBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgPyBSZWZsZWN0LmNvbnN0cnVjdChvLCBlIHx8IFtdLCBfZ2V0UHJvdG90eXBlT2YodCkuY29uc3RydWN0b3IpIDogby5hcHBseSh0LCBlKSk7IH1cbmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IHRyeSB7IHZhciB0ID0gIUJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgfSBjYXRjaCAodCkge30gcmV0dXJuIChfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgcmV0dXJuICEhdDsgfSkoKTsgfVxuLyo6OiBpbXBvcnQgdHlwZSB7XG4gIENlbGxSZW5kZXJlcixcbiAgQ2VsbFJhbmdlUmVuZGVyZXIsXG4gIENlbGxQb3NpdGlvbixcbiAgQ2VsbFNpemUsXG4gIENlbGxTaXplR2V0dGVyLFxuICBOb0NvbnRlbnRSZW5kZXJlcixcbiAgU2Nyb2xsLFxuICBTY3JvbGxiYXJQcmVzZW5jZUNoYW5nZSxcbiAgUmVuZGVyZWRTZWN0aW9uLFxuICBPdmVyc2NhbkluZGljZXNHZXR0ZXIsXG4gIEFsaWdubWVudCxcbiAgQ2VsbENhY2hlLFxuICBTdHlsZUNhY2hlLFxufSBmcm9tICcuL3R5cGVzJzsqL1xuLyo6OiBpbXBvcnQgdHlwZSB7QW5pbWF0aW9uVGltZW91dElkfSBmcm9tICcuLi91dGlscy9yZXF1ZXN0QW5pbWF0aW9uVGltZW91dCc7Ki9cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IGNhbGN1bGF0ZVNpemVBbmRQb3NpdGlvbkRhdGFBbmRVcGRhdGVTY3JvbGxPZmZzZXQgZnJvbSAnLi91dGlscy9jYWxjdWxhdGVTaXplQW5kUG9zaXRpb25EYXRhQW5kVXBkYXRlU2Nyb2xsT2Zmc2V0JztcbmltcG9ydCBTY2FsaW5nQ2VsbFNpemVBbmRQb3NpdGlvbk1hbmFnZXIgZnJvbSAnLi91dGlscy9TY2FsaW5nQ2VsbFNpemVBbmRQb3NpdGlvbk1hbmFnZXInO1xuaW1wb3J0IGNyZWF0ZUNhbGxiYWNrTWVtb2l6ZXIgZnJvbSAnLi4vdXRpbHMvY3JlYXRlQ2FsbGJhY2tNZW1vaXplcic7XG5pbXBvcnQgZGVmYXVsdE92ZXJzY2FuSW5kaWNlc0dldHRlciwgeyBTQ1JPTExfRElSRUNUSU9OX0JBQ0tXQVJELCBTQ1JPTExfRElSRUNUSU9OX0ZPUldBUkQgfSBmcm9tICcuL2RlZmF1bHRPdmVyc2NhbkluZGljZXNHZXR0ZXInO1xuaW1wb3J0IHVwZGF0ZVNjcm9sbEluZGV4SGVscGVyIGZyb20gJy4vdXRpbHMvdXBkYXRlU2Nyb2xsSW5kZXhIZWxwZXInO1xuaW1wb3J0IGRlZmF1bHRDZWxsUmFuZ2VSZW5kZXJlciBmcm9tICcuL2RlZmF1bHRDZWxsUmFuZ2VSZW5kZXJlcic7XG5pbXBvcnQgc2Nyb2xsYmFyU2l6ZSBmcm9tICdkb20taGVscGVycy9zY3JvbGxiYXJTaXplJztcbmltcG9ydCB7IHBvbHlmaWxsIH0gZnJvbSAncmVhY3QtbGlmZWN5Y2xlcy1jb21wYXQnO1xuaW1wb3J0IHsgcmVxdWVzdEFuaW1hdGlvblRpbWVvdXQsIGNhbmNlbEFuaW1hdGlvblRpbWVvdXQgfSBmcm9tICcuLi91dGlscy9yZXF1ZXN0QW5pbWF0aW9uVGltZW91dCc7XG5cbi8qKlxuICogU3BlY2lmaWVzIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGR1cmluZyB3aGljaCB0byBkaXNhYmxlIHBvaW50ZXIgZXZlbnRzIHdoaWxlIGEgc2Nyb2xsIGlzIGluIHByb2dyZXNzLlxuICogVGhpcyBpbXByb3ZlcyBwZXJmb3JtYW5jZSBhbmQgbWFrZXMgc2Nyb2xsaW5nIHNtb290aGVyLlxuICovXG5leHBvcnQgdmFyIERFRkFVTFRfU0NST0xMSU5HX1JFU0VUX1RJTUVfSU5URVJWQUwgPSAxNTA7XG5cbi8qKlxuICogQ29udHJvbHMgd2hldGhlciB0aGUgR3JpZCB1cGRhdGVzIHRoZSBET00gZWxlbWVudCdzIHNjcm9sbExlZnQvc2Nyb2xsVG9wIGJhc2VkIG9uIHRoZSBjdXJyZW50IHN0YXRlIG9yIGp1c3Qgb2JzZXJ2ZXMgaXQuXG4gKiBUaGlzIHByZXZlbnRzIEdyaWQgZnJvbSBpbnRlcnJ1cHRpbmcgbW91c2Utd2hlZWwgYW5pbWF0aW9ucyAoc2VlIGlzc3VlICMyKS5cbiAqL1xudmFyIFNDUk9MTF9QT1NJVElPTl9DSEFOR0VfUkVBU09OUyA9IHtcbiAgT0JTRVJWRUQ6ICdvYnNlcnZlZCcsXG4gIFJFUVVFU1RFRDogJ3JlcXVlc3RlZCdcbn07XG52YXIgcmVuZGVyTnVsbCAvKjogTm9Db250ZW50UmVuZGVyZXIqLyA9IGZ1bmN0aW9uIHJlbmRlck51bGwoKSB7XG4gIHJldHVybiBudWxsO1xufTtcbi8qOjogdHlwZSBTY3JvbGxQb3NpdGlvbiA9IHtcbiAgc2Nyb2xsVG9wPzogbnVtYmVyLFxuICBzY3JvbGxMZWZ0PzogbnVtYmVyLFxufTsqL1xuLyo6OiB0eXBlIFByb3BzID0ge1xuICAnYXJpYS1sYWJlbCc6IHN0cmluZyxcbiAgJ2FyaWEtcmVhZG9ubHknPzogYm9vbGVhbixcblxuICAvKipcbiAgICogU2V0IHRoZSB3aWR0aCBvZiB0aGUgaW5uZXIgc2Nyb2xsYWJsZSBjb250YWluZXIgdG8gJ2F1dG8nLlxuICAgKiBUaGlzIGlzIHVzZWZ1bCBmb3Igc2luZ2xlLWNvbHVtbiBHcmlkcyB0byBlbnN1cmUgdGhhdCB0aGUgY29sdW1uIGRvZXNuJ3QgZXh0ZW5kIGJlbG93IGEgdmVydGljYWwgc2Nyb2xsYmFyLlxuICAgKi0vXG4gIGF1dG9Db250YWluZXJXaWR0aDogYm9vbGVhbixcblxuICAvKipcbiAgICogUmVtb3ZlcyBmaXhlZCBoZWlnaHQgZnJvbSB0aGUgc2Nyb2xsaW5nQ29udGFpbmVyIHNvIHRoYXQgdGhlIHRvdGFsIGhlaWdodCBvZiByb3dzIGNhbiBzdHJldGNoIHRoZSB3aW5kb3cuXG4gICAqIEludGVuZGVkIGZvciB1c2Ugd2l0aCBXaW5kb3dTY3JvbGxlclxuICAgKi0vXG4gIGF1dG9IZWlnaHQ6IGJvb2xlYW4sXG5cbiAgLyoqXG4gICAqIFJlbW92ZXMgZml4ZWQgd2lkdGggZnJvbSB0aGUgc2Nyb2xsaW5nQ29udGFpbmVyIHNvIHRoYXQgdGhlIHRvdGFsIHdpZHRoIG9mIHJvd3MgY2FuIHN0cmV0Y2ggdGhlIHdpbmRvdy5cbiAgICogSW50ZW5kZWQgZm9yIHVzZSB3aXRoIFdpbmRvd1Njcm9sbGVyXG4gICAqLS9cbiAgYXV0b1dpZHRoOiBib29sZWFuLFxuXG4gIC8qKiBSZXNwb25zaWJsZSBmb3IgcmVuZGVyaW5nIGEgY2VsbCBnaXZlbiBhbiByb3cgYW5kIGNvbHVtbiBpbmRleC4gICotL1xuICBjZWxsUmVuZGVyZXI6IENlbGxSZW5kZXJlcixcblxuICAvKiogUmVzcG9uc2libGUgZm9yIHJlbmRlcmluZyBhIGdyb3VwIG9mIGNlbGxzIGdpdmVuIHRoZWlyIGluZGV4IHJhbmdlcy4gICotL1xuICBjZWxsUmFuZ2VSZW5kZXJlcjogQ2VsbFJhbmdlUmVuZGVyZXIsXG5cbiAgLyoqIE9wdGlvbmFsIGN1c3RvbSBDU1MgY2xhc3MgbmFtZSB0byBhdHRhY2ggdG8gcm9vdCBHcmlkIGVsZW1lbnQuICAqLS9cbiAgY2xhc3NOYW1lPzogc3RyaW5nLFxuXG4gIC8qKiBOdW1iZXIgb2YgY29sdW1ucyBpbiBncmlkLiAgKi0vXG4gIGNvbHVtbkNvdW50OiBudW1iZXIsXG5cbiAgLyoqIEVpdGhlciBhIGZpeGVkIGNvbHVtbiB3aWR0aCAobnVtYmVyKSBvciBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgd2lkdGggb2YgYSBjb2x1bW4gZ2l2ZW4gaXRzIGluZGV4LiAgKi0vXG4gIGNvbHVtbldpZHRoOiBDZWxsU2l6ZSxcblxuICAvKiogVW5maWx0ZXJlZCBwcm9wcyBmb3IgdGhlIEdyaWQgY29udGFpbmVyLiAqLS9cbiAgY29udGFpbmVyUHJvcHM/OiBPYmplY3QsXG5cbiAgLyoqIEFSSUEgcm9sZSBmb3IgdGhlIGNlbGwtY29udGFpbmVyLiAgKi0vXG4gIGNvbnRhaW5lclJvbGU6IHN0cmluZyxcblxuICAvKiogT3B0aW9uYWwgaW5saW5lIHN0eWxlIGFwcGxpZWQgdG8gaW5uZXIgY2VsbC1jb250YWluZXIgKi0vXG4gIGNvbnRhaW5lclN0eWxlOiBPYmplY3QsXG5cbiAgLyoqXG4gICAqIElmIENlbGxNZWFzdXJlciBpcyB1c2VkIHRvIG1lYXN1cmUgdGhpcyBHcmlkJ3MgY2hpbGRyZW4sIHRoaXMgc2hvdWxkIGJlIGEgcG9pbnRlciB0byBpdHMgQ2VsbE1lYXN1cmVyQ2FjaGUuXG4gICAqIEEgc2hhcmVkIENlbGxNZWFzdXJlckNhY2hlIHJlZmVyZW5jZSBlbmFibGVzIEdyaWQgYW5kIENlbGxNZWFzdXJlciB0byBzaGFyZSBtZWFzdXJlbWVudCBkYXRhLlxuICAgKi0vXG4gIGRlZmVycmVkTWVhc3VyZW1lbnRDYWNoZT86IE9iamVjdCxcblxuICAvKipcbiAgICogVXNlZCB0byBlc3RpbWF0ZSB0aGUgdG90YWwgd2lkdGggb2YgYSBHcmlkIGJlZm9yZSBhbGwgb2YgaXRzIGNvbHVtbnMgaGF2ZSBhY3R1YWxseSBiZWVuIG1lYXN1cmVkLlxuICAgKiBUaGUgZXN0aW1hdGVkIHRvdGFsIHdpZHRoIGlzIGFkanVzdGVkIGFzIGNvbHVtbnMgYXJlIHJlbmRlcmVkLlxuICAgKi0vXG4gIGVzdGltYXRlZENvbHVtblNpemU6IG51bWJlcixcblxuICAvKipcbiAgICogVXNlZCB0byBlc3RpbWF0ZSB0aGUgdG90YWwgaGVpZ2h0IG9mIGEgR3JpZCBiZWZvcmUgYWxsIG9mIGl0cyByb3dzIGhhdmUgYWN0dWFsbHkgYmVlbiBtZWFzdXJlZC5cbiAgICogVGhlIGVzdGltYXRlZCB0b3RhbCBoZWlnaHQgaXMgYWRqdXN0ZWQgYXMgcm93cyBhcmUgcmVuZGVyZWQuXG4gICAqLS9cbiAgZXN0aW1hdGVkUm93U2l6ZTogbnVtYmVyLFxuXG4gIC8qKiBFeHBvc2VkIGZvciB0ZXN0aW5nIHB1cnBvc2VzIG9ubHkuICAqLS9cbiAgZ2V0U2Nyb2xsYmFyU2l6ZTogKCkgPT4gbnVtYmVyLFxuXG4gIC8qKiBIZWlnaHQgb2YgR3JpZDsgdGhpcyBwcm9wZXJ0eSBkZXRlcm1pbmVzIHRoZSBudW1iZXIgb2YgdmlzaWJsZSAodnMgdmlydHVhbGl6ZWQpIHJvd3MuICAqLS9cbiAgaGVpZ2h0OiBudW1iZXIsXG5cbiAgLyoqIE9wdGlvbmFsIGN1c3RvbSBpZCB0byBhdHRhY2ggdG8gcm9vdCBHcmlkIGVsZW1lbnQuICAqLS9cbiAgaWQ/OiBzdHJpbmcsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIGludGVybmFsIGlzLXNjcm9sbGluZyBzdGF0ZSB0cmFja2luZy5cbiAgICogVGhpcyBwcm9wZXJ0eSBpcyBwcmltYXJpbHkgaW50ZW5kZWQgZm9yIHVzZSB3aXRoIHRoZSBXaW5kb3dTY3JvbGxlciBjb21wb25lbnQuXG4gICAqLS9cbiAgaXNTY3JvbGxpbmc/OiBib29sZWFuLFxuXG4gIC8qKlxuICAgKiBPcHQtb3V0IG9mIGlzU2Nyb2xsaW5nIHBhcmFtIHBhc3NlZCB0byBjZWxsUmFuZ2VSZW5kZXJlci5cbiAgICogVG8gYXZvaWQgdGhlIGV4dHJhIHJlbmRlciB3aGVuIHNjcm9sbCBzdG9wcy5cbiAgICotL1xuICBpc1Njcm9sbGluZ09wdE91dDogYm9vbGVhbixcblxuICAvKiogT3B0aW9uYWwgcmVuZGVyZXIgdG8gYmUgdXNlZCBpbiBwbGFjZSBvZiByb3dzIHdoZW4gZWl0aGVyIDpyb3dDb3VudCBvciA6Y29sdW1uQ291bnQgaXMgMC4gICotL1xuICBub0NvbnRlbnRSZW5kZXJlcjogTm9Db250ZW50UmVuZGVyZXIsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGludm9rZWQgd2hlbmV2ZXIgdGhlIHNjcm9sbCBvZmZzZXQgY2hhbmdlcyB3aXRoaW4gdGhlIGlubmVyIHNjcm9sbGFibGUgcmVnaW9uLlxuICAgKiBUaGlzIGNhbGxiYWNrIGNhbiBiZSB1c2VkIHRvIHN5bmMgc2Nyb2xsaW5nIGJldHdlZW4gbGlzdHMsIHRhYmxlcywgb3IgZ3JpZHMuXG4gICAqLS9cbiAgb25TY3JvbGw6IChwYXJhbXM6IFNjcm9sbCkgPT4gdm9pZCxcblxuICAvKipcbiAgICogQ2FsbGVkIHdoZW5ldmVyIGEgaG9yaXpvbnRhbCBvciB2ZXJ0aWNhbCBzY3JvbGxiYXIgaXMgYWRkZWQgb3IgcmVtb3ZlZC5cbiAgICogVGhpcyBwcm9wIGlzIG5vdCBpbnRlbmRlZCBmb3IgZW5kLXVzZXIgdXNlO1xuICAgKiBJdCBpcyB1c2VkIGJ5IE11bHRpR3JpZCB0byBzdXBwb3J0IGZpeGVkLXJvdy9maXhlZC1jb2x1bW4gc2Nyb2xsIHN5bmNpbmcuXG4gICAqLS9cbiAgb25TY3JvbGxiYXJQcmVzZW5jZUNoYW5nZTogKHBhcmFtczogU2Nyb2xsYmFyUHJlc2VuY2VDaGFuZ2UpID0+IHZvaWQsXG5cbiAgLyoqIENhbGxiYWNrIGludm9rZWQgd2l0aCBpbmZvcm1hdGlvbiBhYm91dCB0aGUgc2VjdGlvbiBvZiB0aGUgR3JpZCB0aGF0IHdhcyBqdXN0IHJlbmRlcmVkLiAgKi0vXG4gIG9uU2VjdGlvblJlbmRlcmVkOiAocGFyYW1zOiBSZW5kZXJlZFNlY3Rpb24pID0+IHZvaWQsXG5cbiAgLyoqXG4gICAqIE51bWJlciBvZiBjb2x1bW5zIHRvIHJlbmRlciBiZWZvcmUvYWZ0ZXIgdGhlIHZpc2libGUgc2VjdGlvbiBvZiB0aGUgZ3JpZC5cbiAgICogVGhlc2UgY29sdW1ucyBjYW4gaGVscCBmb3Igc21vb3RoZXIgc2Nyb2xsaW5nIG9uIHRvdWNoIGRldmljZXMgb3IgYnJvd3NlcnMgdGhhdCBzZW5kIHNjcm9sbCBldmVudHMgaW5mcmVxdWVudGx5LlxuICAgKi0vXG4gIG92ZXJzY2FuQ29sdW1uQ291bnQ6IG51bWJlcixcblxuICAvKipcbiAgICogQ2FsY3VsYXRlcyB0aGUgbnVtYmVyIG9mIGNlbGxzIHRvIG92ZXJzY2FuIGJlZm9yZSBhbmQgYWZ0ZXIgYSBzcGVjaWZpZWQgcmFuZ2UuXG4gICAqIFRoaXMgZnVuY3Rpb24gZW5zdXJlcyB0aGF0IG92ZXJzY2FubmluZyBkb2Vzbid0IGV4Y2VlZCB0aGUgYXZhaWxhYmxlIGNlbGxzLlxuICAgKi0vXG4gIG92ZXJzY2FuSW5kaWNlc0dldHRlcjogT3ZlcnNjYW5JbmRpY2VzR2V0dGVyLFxuXG4gIC8qKlxuICAgKiBOdW1iZXIgb2Ygcm93cyB0byByZW5kZXIgYWJvdmUvYmVsb3cgdGhlIHZpc2libGUgc2VjdGlvbiBvZiB0aGUgZ3JpZC5cbiAgICogVGhlc2Ugcm93cyBjYW4gaGVscCBmb3Igc21vb3RoZXIgc2Nyb2xsaW5nIG9uIHRvdWNoIGRldmljZXMgb3IgYnJvd3NlcnMgdGhhdCBzZW5kIHNjcm9sbCBldmVudHMgaW5mcmVxdWVudGx5LlxuICAgKi0vXG4gIG92ZXJzY2FuUm93Q291bnQ6IG51bWJlcixcblxuICAvKiogQVJJQSByb2xlIGZvciB0aGUgZ3JpZCBlbGVtZW50LiAgKi0vXG4gIHJvbGU6IHN0cmluZyxcblxuICAvKipcbiAgICogRWl0aGVyIGEgZml4ZWQgcm93IGhlaWdodCAobnVtYmVyKSBvciBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgaGVpZ2h0IG9mIGEgcm93IGdpdmVuIGl0cyBpbmRleC5cbiAgICogU2hvdWxkIGltcGxlbWVudCB0aGUgZm9sbG93aW5nIGludGVyZmFjZTogKHsgaW5kZXg6IG51bWJlciB9KTogbnVtYmVyXG4gICAqLS9cbiAgcm93SGVpZ2h0OiBDZWxsU2l6ZSxcblxuICAvKiogTnVtYmVyIG9mIHJvd3MgaW4gZ3JpZC4gICotL1xuICByb3dDb3VudDogbnVtYmVyLFxuXG4gIC8qKiBXYWl0IHRoaXMgYW1vdW50IG9mIHRpbWUgYWZ0ZXIgdGhlIGxhc3Qgc2Nyb2xsIGV2ZW50IGJlZm9yZSByZXNldHRpbmcgR3JpZCBgcG9pbnRlci1ldmVudHNgLiAqLS9cbiAgc2Nyb2xsaW5nUmVzZXRUaW1lSW50ZXJ2YWw6IG51bWJlcixcblxuICAvKiogSG9yaXpvbnRhbCBvZmZzZXQuICotL1xuICBzY3JvbGxMZWZ0PzogbnVtYmVyLFxuXG4gIC8qKlxuICAgKiBDb250cm9scyBzY3JvbGwtdG8tY2VsbCBiZWhhdmlvciBvZiB0aGUgR3JpZC5cbiAgICogVGhlIGRlZmF1bHQgKFwiYXV0b1wiKSBzY3JvbGxzIHRoZSBsZWFzdCBhbW91bnQgcG9zc2libGUgdG8gZW5zdXJlIHRoYXQgdGhlIHNwZWNpZmllZCBjZWxsIGlzIGZ1bGx5IHZpc2libGUuXG4gICAqIFVzZSBcInN0YXJ0XCIgdG8gYWxpZ24gY2VsbHMgdG8gdGhlIHRvcC9sZWZ0IG9mIHRoZSBHcmlkIGFuZCBcImVuZFwiIHRvIGFsaWduIGJvdHRvbS9yaWdodC5cbiAgICotL1xuICBzY3JvbGxUb0FsaWdubWVudDogQWxpZ25tZW50LFxuXG4gIC8qKiBDb2x1bW4gaW5kZXggdG8gZW5zdXJlIHZpc2libGUgKGJ5IGZvcmNlZnVsbHkgc2Nyb2xsaW5nIGlmIG5lY2Vzc2FyeSkgKi0vXG4gIHNjcm9sbFRvQ29sdW1uOiBudW1iZXIsXG5cbiAgLyoqIFZlcnRpY2FsIG9mZnNldC4gKi0vXG4gIHNjcm9sbFRvcD86IG51bWJlcixcblxuICAvKiogUm93IGluZGV4IHRvIGVuc3VyZSB2aXNpYmxlIChieSBmb3JjZWZ1bGx5IHNjcm9sbGluZyBpZiBuZWNlc3NhcnkpICotL1xuICBzY3JvbGxUb1JvdzogbnVtYmVyLFxuXG4gIC8qKiBPcHRpb25hbCBpbmxpbmUgc3R5bGUgKi0vXG4gIHN0eWxlOiBPYmplY3QsXG5cbiAgLyoqIFRhYiBpbmRleCBmb3IgZm9jdXMgKi0vXG4gIHRhYkluZGV4OiA/bnVtYmVyLFxuXG4gIC8qKiBXaWR0aCBvZiBHcmlkOyB0aGlzIHByb3BlcnR5IGRldGVybWluZXMgdGhlIG51bWJlciBvZiB2aXNpYmxlICh2cyB2aXJ0dWFsaXplZCkgY29sdW1ucy4gICotL1xuICB3aWR0aDogbnVtYmVyLFxuXG4gIC8qKiBSZWZlcmVuY2UgdG8gRE9NIG5vZGUgKi0vXG4gIGVsZW1lbnRSZWY/OiBSZWFjdC5SZWY8UmVhY3QuRWxlbWVudFR5cGU+LFxufTsqL1xuLyo6OiB0eXBlIEluc3RhbmNlUHJvcHMgPSB7XG4gIHByZXZDb2x1bW5XaWR0aDogQ2VsbFNpemUsXG4gIHByZXZSb3dIZWlnaHQ6IENlbGxTaXplLFxuXG4gIHByZXZDb2x1bW5Db3VudDogbnVtYmVyLFxuICBwcmV2Um93Q291bnQ6IG51bWJlcixcbiAgcHJldklzU2Nyb2xsaW5nOiBib29sZWFuLFxuICBwcmV2U2Nyb2xsVG9Db2x1bW46IG51bWJlcixcbiAgcHJldlNjcm9sbFRvUm93OiBudW1iZXIsXG5cbiAgY29sdW1uU2l6ZUFuZFBvc2l0aW9uTWFuYWdlcjogU2NhbGluZ0NlbGxTaXplQW5kUG9zaXRpb25NYW5hZ2VyLFxuICByb3dTaXplQW5kUG9zaXRpb25NYW5hZ2VyOiBTY2FsaW5nQ2VsbFNpemVBbmRQb3NpdGlvbk1hbmFnZXIsXG5cbiAgc2Nyb2xsYmFyU2l6ZTogbnVtYmVyLFxuICBzY3JvbGxiYXJTaXplTWVhc3VyZWQ6IGJvb2xlYW4sXG59OyovXG4vKjo6IHR5cGUgU3RhdGUgPSB7XG4gIGluc3RhbmNlUHJvcHM6IEluc3RhbmNlUHJvcHMsXG4gIGlzU2Nyb2xsaW5nOiBib29sZWFuLFxuICBzY3JvbGxEaXJlY3Rpb25Ib3Jpem9udGFsOiAtMSB8IDEsXG4gIHNjcm9sbERpcmVjdGlvblZlcnRpY2FsOiAtMSB8IDEsXG4gIHNjcm9sbExlZnQ6IG51bWJlcixcbiAgc2Nyb2xsVG9wOiBudW1iZXIsXG4gIHNjcm9sbFBvc2l0aW9uQ2hhbmdlUmVhc29uOiAnb2JzZXJ2ZWQnIHwgJ3JlcXVlc3RlZCcgfCBudWxsLFxuICBuZWVkVG9SZXNldFN0eWxlQ2FjaGU6IGJvb2xlYW4sXG59OyovXG4vKipcbiAqIFJlbmRlcnMgdGFidWxhciBkYXRhIHdpdGggdmlydHVhbGl6YXRpb24gYWxvbmcgdGhlIHZlcnRpY2FsIGFuZCBob3Jpem9udGFsIGF4ZXMuXG4gKiBSb3cgaGVpZ2h0cyBhbmQgY29sdW1uIHdpZHRocyBtdXN0IGJlIGtub3duIGFoZWFkIG9mIHRpbWUgYW5kIHNwZWNpZmllZCBhcyBwcm9wZXJ0aWVzLlxuICovXG52YXIgR3JpZCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1JlYWN0JFB1cmVDb21wb25lbnQpIHtcbiAgZnVuY3Rpb24gR3JpZChwcm9wcyAvKjogUHJvcHMqLykge1xuICAgIHZhciBfdGhpcztcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgR3JpZCk7XG4gICAgX3RoaXMgPSBfY2FsbFN1cGVyKHRoaXMsIEdyaWQsIFtwcm9wc10pO1xuICAgIC8vIEludm9rZXMgb25TZWN0aW9uUmVuZGVyZWQgY2FsbGJhY2sgb25seSB3aGVuIHN0YXJ0L3N0b3Agcm93IG9yIGNvbHVtbiBpbmRpY2VzIGNoYW5nZVxuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJfb25HcmlkUmVuZGVyZWRNZW1vaXplclwiLCBjcmVhdGVDYWxsYmFja01lbW9pemVyKCkpO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJfb25TY3JvbGxNZW1vaXplclwiLCBjcmVhdGVDYWxsYmFja01lbW9pemVyKGZhbHNlKSk7XG4gICAgX2RlZmluZVByb3BlcnR5KF90aGlzLCBcIl9kZWZlcnJlZEludmFsaWRhdGVDb2x1bW5JbmRleFwiLCBudWxsKTtcbiAgICBfZGVmaW5lUHJvcGVydHkoX3RoaXMsIFwiX2RlZmVycmVkSW52YWxpZGF0ZVJvd0luZGV4XCIsIG51bGwpO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJfcmVjb21wdXRlU2Nyb2xsTGVmdEZsYWdcIiwgZmFsc2UpO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJfcmVjb21wdXRlU2Nyb2xsVG9wRmxhZ1wiLCBmYWxzZSk7XG4gICAgX2RlZmluZVByb3BlcnR5KF90aGlzLCBcIl9ob3Jpem9udGFsU2Nyb2xsQmFyU2l6ZVwiLCAwKTtcbiAgICBfZGVmaW5lUHJvcGVydHkoX3RoaXMsIFwiX3ZlcnRpY2FsU2Nyb2xsQmFyU2l6ZVwiLCAwKTtcbiAgICBfZGVmaW5lUHJvcGVydHkoX3RoaXMsIFwiX3Njcm9sbGJhclByZXNlbmNlQ2hhbmdlZFwiLCBmYWxzZSk7XG4gICAgX2RlZmluZVByb3BlcnR5KF90aGlzLCBcIl9zY3JvbGxpbmdDb250YWluZXJcIiwgdm9pZCAwKTtcbiAgICBfZGVmaW5lUHJvcGVydHkoX3RoaXMsIFwiX2NoaWxkcmVuVG9EaXNwbGF5XCIsIHZvaWQgMCk7XG4gICAgX2RlZmluZVByb3BlcnR5KF90aGlzLCBcIl9jb2x1bW5TdGFydEluZGV4XCIsIHZvaWQgMCk7XG4gICAgX2RlZmluZVByb3BlcnR5KF90aGlzLCBcIl9jb2x1bW5TdG9wSW5kZXhcIiwgdm9pZCAwKTtcbiAgICBfZGVmaW5lUHJvcGVydHkoX3RoaXMsIFwiX3Jvd1N0YXJ0SW5kZXhcIiwgdm9pZCAwKTtcbiAgICBfZGVmaW5lUHJvcGVydHkoX3RoaXMsIFwiX3Jvd1N0b3BJbmRleFwiLCB2b2lkIDApO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJfcmVuZGVyZWRDb2x1bW5TdGFydEluZGV4XCIsIDApO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJfcmVuZGVyZWRDb2x1bW5TdG9wSW5kZXhcIiwgMCk7XG4gICAgX2RlZmluZVByb3BlcnR5KF90aGlzLCBcIl9yZW5kZXJlZFJvd1N0YXJ0SW5kZXhcIiwgMCk7XG4gICAgX2RlZmluZVByb3BlcnR5KF90aGlzLCBcIl9yZW5kZXJlZFJvd1N0b3BJbmRleFwiLCAwKTtcbiAgICBfZGVmaW5lUHJvcGVydHkoX3RoaXMsIFwiX2luaXRpYWxTY3JvbGxUb3BcIiwgdm9pZCAwKTtcbiAgICBfZGVmaW5lUHJvcGVydHkoX3RoaXMsIFwiX2luaXRpYWxTY3JvbGxMZWZ0XCIsIHZvaWQgMCk7XG4gICAgX2RlZmluZVByb3BlcnR5KF90aGlzLCBcIl9kaXNhYmxlUG9pbnRlckV2ZW50c1RpbWVvdXRJZFwiLCB2b2lkIDApO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJfc3R5bGVDYWNoZVwiLCB7fSk7XG4gICAgX2RlZmluZVByb3BlcnR5KF90aGlzLCBcIl9jZWxsQ2FjaGVcIiwge30pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJfZGVib3VuY2VTY3JvbGxFbmRlZENhbGxiYWNrXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzLl9kaXNhYmxlUG9pbnRlckV2ZW50c1RpbWVvdXRJZCA9IG51bGw7XG4gICAgICAvLyBpc1Njcm9sbGluZyBpcyB1c2VkIHRvIGRldGVybWluZSBpZiB3ZSByZXNldCBzdHlsZUNhY2hlXG4gICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGlzU2Nyb2xsaW5nOiBmYWxzZSxcbiAgICAgICAgbmVlZFRvUmVzZXRTdHlsZUNhY2hlOiBmYWxzZVxuICAgICAgfSk7XG4gICAgfSk7XG4gICAgX2RlZmluZVByb3BlcnR5KF90aGlzLCBcIl9pbnZva2VPbkdyaWRSZW5kZXJlZEhlbHBlclwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgb25TZWN0aW9uUmVuZGVyZWQgPSBfdGhpcy5wcm9wcy5vblNlY3Rpb25SZW5kZXJlZDtcbiAgICAgIF90aGlzLl9vbkdyaWRSZW5kZXJlZE1lbW9pemVyKHtcbiAgICAgICAgY2FsbGJhY2s6IG9uU2VjdGlvblJlbmRlcmVkLFxuICAgICAgICBpbmRpY2VzOiB7XG4gICAgICAgICAgY29sdW1uT3ZlcnNjYW5TdGFydEluZGV4OiBfdGhpcy5fY29sdW1uU3RhcnRJbmRleCxcbiAgICAgICAgICBjb2x1bW5PdmVyc2NhblN0b3BJbmRleDogX3RoaXMuX2NvbHVtblN0b3BJbmRleCxcbiAgICAgICAgICBjb2x1bW5TdGFydEluZGV4OiBfdGhpcy5fcmVuZGVyZWRDb2x1bW5TdGFydEluZGV4LFxuICAgICAgICAgIGNvbHVtblN0b3BJbmRleDogX3RoaXMuX3JlbmRlcmVkQ29sdW1uU3RvcEluZGV4LFxuICAgICAgICAgIHJvd092ZXJzY2FuU3RhcnRJbmRleDogX3RoaXMuX3Jvd1N0YXJ0SW5kZXgsXG4gICAgICAgICAgcm93T3ZlcnNjYW5TdG9wSW5kZXg6IF90aGlzLl9yb3dTdG9wSW5kZXgsXG4gICAgICAgICAgcm93U3RhcnRJbmRleDogX3RoaXMuX3JlbmRlcmVkUm93U3RhcnRJbmRleCxcbiAgICAgICAgICByb3dTdG9wSW5kZXg6IF90aGlzLl9yZW5kZXJlZFJvd1N0b3BJbmRleFxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBfZGVmaW5lUHJvcGVydHkoX3RoaXMsIFwiX3NldFNjcm9sbGluZ0NvbnRhaW5lclJlZlwiLCBmdW5jdGlvbiAocmVmIC8qOiBFbGVtZW50Ki8pIHtcbiAgICAgIF90aGlzLl9zY3JvbGxpbmdDb250YWluZXIgPSByZWY7XG4gICAgICBpZiAodHlwZW9mIF90aGlzLnByb3BzLmVsZW1lbnRSZWYgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgX3RoaXMucHJvcHMuZWxlbWVudFJlZihyZWYpO1xuICAgICAgfSBlbHNlIGlmIChfdHlwZW9mKF90aGlzLnByb3BzLmVsZW1lbnRSZWYpID09PSAnb2JqZWN0Jykge1xuICAgICAgICBfdGhpcy5wcm9wcy5lbGVtZW50UmVmLmN1cnJlbnQgPSByZWY7XG4gICAgICB9XG4gICAgfSk7XG4gICAgX2RlZmluZVByb3BlcnR5KF90aGlzLCBcIl9vblNjcm9sbFwiLCBmdW5jdGlvbiAoZXZlbnQgLyo6IEV2ZW50Ki8pIHtcbiAgICAgIC8vIEluIGNlcnRhaW4gZWRnZS1jYXNlcyBSZWFjdCBkaXNwYXRjaGVzIGFuIG9uU2Nyb2xsIGV2ZW50IHdpdGggYW4gaW52YWxpZCB0YXJnZXQuc2Nyb2xsTGVmdCAvIHRhcmdldC5zY3JvbGxUb3AuXG4gICAgICAvLyBUaGlzIGludmFsaWQgZXZlbnQgY2FuIGJlIGRldGVjdGVkIGJ5IGNvbXBhcmluZyBldmVudC50YXJnZXQgdG8gdGhpcyBjb21wb25lbnQncyBzY3JvbGxhYmxlIERPTSBlbGVtZW50LlxuICAgICAgLy8gU2VlIGlzc3VlICM0MDQgZm9yIG1vcmUgaW5mb3JtYXRpb24uXG4gICAgICBpZiAoZXZlbnQudGFyZ2V0ID09PSBfdGhpcy5fc2Nyb2xsaW5nQ29udGFpbmVyKSB7XG4gICAgICAgIF90aGlzLmhhbmRsZVNjcm9sbEV2ZW50KChldmVudC50YXJnZXQgLyo6IGFueSovKSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgdmFyIGNvbHVtblNpemVBbmRQb3NpdGlvbk1hbmFnZXIgPSBuZXcgU2NhbGluZ0NlbGxTaXplQW5kUG9zaXRpb25NYW5hZ2VyKHtcbiAgICAgIGNlbGxDb3VudDogcHJvcHMuY29sdW1uQ291bnQsXG4gICAgICBjZWxsU2l6ZUdldHRlcjogZnVuY3Rpb24gY2VsbFNpemVHZXR0ZXIocGFyYW1zKSB7XG4gICAgICAgIHJldHVybiBHcmlkLl93cmFwU2l6ZUdldHRlcihwcm9wcy5jb2x1bW5XaWR0aCkocGFyYW1zKTtcbiAgICAgIH0sXG4gICAgICBlc3RpbWF0ZWRDZWxsU2l6ZTogR3JpZC5fZ2V0RXN0aW1hdGVkQ29sdW1uU2l6ZShwcm9wcylcbiAgICB9KTtcbiAgICB2YXIgcm93U2l6ZUFuZFBvc2l0aW9uTWFuYWdlciA9IG5ldyBTY2FsaW5nQ2VsbFNpemVBbmRQb3NpdGlvbk1hbmFnZXIoe1xuICAgICAgY2VsbENvdW50OiBwcm9wcy5yb3dDb3VudCxcbiAgICAgIGNlbGxTaXplR2V0dGVyOiBmdW5jdGlvbiBjZWxsU2l6ZUdldHRlcihwYXJhbXMpIHtcbiAgICAgICAgcmV0dXJuIEdyaWQuX3dyYXBTaXplR2V0dGVyKHByb3BzLnJvd0hlaWdodCkocGFyYW1zKTtcbiAgICAgIH0sXG4gICAgICBlc3RpbWF0ZWRDZWxsU2l6ZTogR3JpZC5fZ2V0RXN0aW1hdGVkUm93U2l6ZShwcm9wcylcbiAgICB9KTtcbiAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGluc3RhbmNlUHJvcHM6IHtcbiAgICAgICAgY29sdW1uU2l6ZUFuZFBvc2l0aW9uTWFuYWdlcjogY29sdW1uU2l6ZUFuZFBvc2l0aW9uTWFuYWdlcixcbiAgICAgICAgcm93U2l6ZUFuZFBvc2l0aW9uTWFuYWdlcjogcm93U2l6ZUFuZFBvc2l0aW9uTWFuYWdlcixcbiAgICAgICAgcHJldkNvbHVtbldpZHRoOiBwcm9wcy5jb2x1bW5XaWR0aCxcbiAgICAgICAgcHJldlJvd0hlaWdodDogcHJvcHMucm93SGVpZ2h0LFxuICAgICAgICBwcmV2Q29sdW1uQ291bnQ6IHByb3BzLmNvbHVtbkNvdW50LFxuICAgICAgICBwcmV2Um93Q291bnQ6IHByb3BzLnJvd0NvdW50LFxuICAgICAgICBwcmV2SXNTY3JvbGxpbmc6IHByb3BzLmlzU2Nyb2xsaW5nID09PSB0cnVlLFxuICAgICAgICBwcmV2U2Nyb2xsVG9Db2x1bW46IHByb3BzLnNjcm9sbFRvQ29sdW1uLFxuICAgICAgICBwcmV2U2Nyb2xsVG9Sb3c6IHByb3BzLnNjcm9sbFRvUm93LFxuICAgICAgICBzY3JvbGxiYXJTaXplOiAwLFxuICAgICAgICBzY3JvbGxiYXJTaXplTWVhc3VyZWQ6IGZhbHNlXG4gICAgICB9LFxuICAgICAgaXNTY3JvbGxpbmc6IGZhbHNlLFxuICAgICAgc2Nyb2xsRGlyZWN0aW9uSG9yaXpvbnRhbDogU0NST0xMX0RJUkVDVElPTl9GT1JXQVJELFxuICAgICAgc2Nyb2xsRGlyZWN0aW9uVmVydGljYWw6IFNDUk9MTF9ESVJFQ1RJT05fRk9SV0FSRCxcbiAgICAgIHNjcm9sbExlZnQ6IDAsXG4gICAgICBzY3JvbGxUb3A6IDAsXG4gICAgICBzY3JvbGxQb3NpdGlvbkNoYW5nZVJlYXNvbjogbnVsbCxcbiAgICAgIG5lZWRUb1Jlc2V0U3R5bGVDYWNoZTogZmFsc2VcbiAgICB9O1xuICAgIGlmIChwcm9wcy5zY3JvbGxUb1JvdyA+IDApIHtcbiAgICAgIF90aGlzLl9pbml0aWFsU2Nyb2xsVG9wID0gX3RoaXMuX2dldENhbGN1bGF0ZWRTY3JvbGxUb3AocHJvcHMsIF90aGlzLnN0YXRlKTtcbiAgICB9XG4gICAgaWYgKHByb3BzLnNjcm9sbFRvQ29sdW1uID4gMCkge1xuICAgICAgX3RoaXMuX2luaXRpYWxTY3JvbGxMZWZ0ID0gX3RoaXMuX2dldENhbGN1bGF0ZWRTY3JvbGxMZWZ0KHByb3BzLCBfdGhpcy5zdGF0ZSk7XG4gICAgfVxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIG9mZnNldHMgZm9yIGEgZ2l2ZW4gY2VsbCBhbmQgYWxpZ25tZW50LlxuICAgKi9cbiAgX2luaGVyaXRzKEdyaWQsIF9SZWFjdCRQdXJlQ29tcG9uZW50KTtcbiAgcmV0dXJuIF9jcmVhdGVDbGFzcyhHcmlkLCBbe1xuICAgIGtleTogXCJnZXRPZmZzZXRGb3JDZWxsXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldE9mZnNldEZvckNlbGwoKSB7XG4gICAgICB2YXIgX3JlZiA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge30sXG4gICAgICAgIF9yZWYkYWxpZ25tZW50ID0gX3JlZi5hbGlnbm1lbnQsXG4gICAgICAgIGFsaWdubWVudCA9IF9yZWYkYWxpZ25tZW50ID09PSB2b2lkIDAgPyB0aGlzLnByb3BzLnNjcm9sbFRvQWxpZ25tZW50IDogX3JlZiRhbGlnbm1lbnQsXG4gICAgICAgIF9yZWYkY29sdW1uSW5kZXggPSBfcmVmLmNvbHVtbkluZGV4LFxuICAgICAgICBjb2x1bW5JbmRleCA9IF9yZWYkY29sdW1uSW5kZXggPT09IHZvaWQgMCA/IHRoaXMucHJvcHMuc2Nyb2xsVG9Db2x1bW4gOiBfcmVmJGNvbHVtbkluZGV4LFxuICAgICAgICBfcmVmJHJvd0luZGV4ID0gX3JlZi5yb3dJbmRleCxcbiAgICAgICAgcm93SW5kZXggPSBfcmVmJHJvd0luZGV4ID09PSB2b2lkIDAgPyB0aGlzLnByb3BzLnNjcm9sbFRvUm93IDogX3JlZiRyb3dJbmRleDtcbiAgICAgIHZhciBvZmZzZXRQcm9wcyA9IF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgdGhpcy5wcm9wcyksIHt9LCB7XG4gICAgICAgIHNjcm9sbFRvQWxpZ25tZW50OiBhbGlnbm1lbnQsXG4gICAgICAgIHNjcm9sbFRvQ29sdW1uOiBjb2x1bW5JbmRleCxcbiAgICAgICAgc2Nyb2xsVG9Sb3c6IHJvd0luZGV4XG4gICAgICB9KTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHNjcm9sbExlZnQ6IHRoaXMuX2dldENhbGN1bGF0ZWRTY3JvbGxMZWZ0KG9mZnNldFByb3BzKSxcbiAgICAgICAgc2Nyb2xsVG9wOiB0aGlzLl9nZXRDYWxjdWxhdGVkU2Nyb2xsVG9wKG9mZnNldFByb3BzKVxuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIGVzdGltYXRlZCB0b3RhbCByb3dzJyBoZWlnaHQuXG4gICAgICovXG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0VG90YWxSb3dzSGVpZ2h0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFRvdGFsUm93c0hlaWdodCgpIHtcbiAgICAgIHJldHVybiB0aGlzLnN0YXRlLmluc3RhbmNlUHJvcHMucm93U2l6ZUFuZFBvc2l0aW9uTWFuYWdlci5nZXRUb3RhbFNpemUoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIGVzdGltYXRlZCB0b3RhbCBjb2x1bW5zJyB3aWR0aC5cbiAgICAgKi9cbiAgfSwge1xuICAgIGtleTogXCJnZXRUb3RhbENvbHVtbnNXaWR0aFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRUb3RhbENvbHVtbnNXaWR0aCgpIHtcbiAgICAgIHJldHVybiB0aGlzLnN0YXRlLmluc3RhbmNlUHJvcHMuY29sdW1uU2l6ZUFuZFBvc2l0aW9uTWFuYWdlci5nZXRUb3RhbFNpemUoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBoYW5kbGVzIGEgc2Nyb2xsIGV2ZW50IG9yaWdpbmF0aW5nIGZyb20gYW4gZXh0ZXJuYWwgc2Nyb2xsIGNvbnRyb2wuXG4gICAgICogSXQncyBhbiBhZHZhbmNlZCBtZXRob2QgYW5kIHNob3VsZCBwcm9iYWJseSBub3QgYmUgdXNlZCB1bmxlc3MgeW91J3JlIGltcGxlbWVudGluZyBhIGN1c3RvbSBzY3JvbGwtYmFyIHNvbHV0aW9uLlxuICAgICAqL1xuICB9LCB7XG4gICAga2V5OiBcImhhbmRsZVNjcm9sbEV2ZW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGhhbmRsZVNjcm9sbEV2ZW50KF9yZWYyIC8qOjogKi8pIHtcbiAgICAgIHZhciBfcmVmMiRzY3JvbGxMZWZ0ID0gX3JlZjIgLyo6OiAqLy5zY3JvbGxMZWZ0LFxuICAgICAgICBzY3JvbGxMZWZ0UGFyYW0gPSBfcmVmMiRzY3JvbGxMZWZ0ID09PSB2b2lkIDAgPyAwIDogX3JlZjIkc2Nyb2xsTGVmdCxcbiAgICAgICAgX3JlZjIkc2Nyb2xsVG9wID0gX3JlZjIgLyo6OiAqLy5zY3JvbGxUb3AsXG4gICAgICAgIHNjcm9sbFRvcFBhcmFtID0gX3JlZjIkc2Nyb2xsVG9wID09PSB2b2lkIDAgPyAwIDogX3JlZjIkc2Nyb2xsVG9wO1xuICAgICAgLy8gT24gaU9TLCB3ZSBjYW4gYXJyaXZlIGF0IG5lZ2F0aXZlIG9mZnNldHMgYnkgc3dpcGluZyBwYXN0IHRoZSBzdGFydC5cbiAgICAgIC8vIFRvIHByZXZlbnQgZmxpY2tlciBoZXJlLCB3ZSBtYWtlIHBsYXlpbmcgaW4gdGhlIG5lZ2F0aXZlIG9mZnNldCB6b25lIGNhdXNlIG5vdGhpbmcgdG8gaGFwcGVuLlxuICAgICAgaWYgKHNjcm9sbFRvcFBhcmFtIDwgMCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIFByZXZlbnQgcG9pbnRlciBldmVudHMgZnJvbSBpbnRlcnJ1cHRpbmcgYSBzbW9vdGggc2Nyb2xsXG4gICAgICB0aGlzLl9kZWJvdW5jZVNjcm9sbEVuZGVkKCk7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBhdXRvSGVpZ2h0ID0gX3RoaXMkcHJvcHMuYXV0b0hlaWdodCxcbiAgICAgICAgYXV0b1dpZHRoID0gX3RoaXMkcHJvcHMuYXV0b1dpZHRoLFxuICAgICAgICBoZWlnaHQgPSBfdGhpcyRwcm9wcy5oZWlnaHQsXG4gICAgICAgIHdpZHRoID0gX3RoaXMkcHJvcHMud2lkdGg7XG4gICAgICB2YXIgaW5zdGFuY2VQcm9wcyA9IHRoaXMuc3RhdGUuaW5zdGFuY2VQcm9wcztcblxuICAgICAgLy8gV2hlbiB0aGlzIGNvbXBvbmVudCBpcyBzaHJ1bmsgZHJhc3RpY2FsbHksIFJlYWN0IGRpc3BhdGNoZXMgYSBzZXJpZXMgb2YgYmFjay10by1iYWNrIHNjcm9sbCBldmVudHMsXG4gICAgICAvLyBHcmFkdWFsbHkgY29udmVyZ2luZyBvbiBhIHNjcm9sbFRvcCB0aGF0IGlzIHdpdGhpbiB0aGUgYm91bmRzIG9mIHRoZSBuZXcsIHNtYWxsZXIgaGVpZ2h0LlxuICAgICAgLy8gVGhpcyBjYXVzZXMgYSBzZXJpZXMgb2YgcmFwaWQgcmVuZGVycyB0aGF0IGlzIHNsb3cgZm9yIGxvbmcgbGlzdHMuXG4gICAgICAvLyBXZSBjYW4gYXZvaWQgdGhhdCBieSBkb2luZyBzb21lIHNpbXBsZSBib3VuZHMgY2hlY2tpbmcgdG8gZW5zdXJlIHRoYXQgc2Nyb2xsIG9mZnNldHMgbmV2ZXIgZXhjZWVkIHRoZWlyIGJvdW5kcy5cbiAgICAgIHZhciBzY3JvbGxiYXJTaXplID0gaW5zdGFuY2VQcm9wcy5zY3JvbGxiYXJTaXplO1xuICAgICAgdmFyIHRvdGFsUm93c0hlaWdodCA9IGluc3RhbmNlUHJvcHMucm93U2l6ZUFuZFBvc2l0aW9uTWFuYWdlci5nZXRUb3RhbFNpemUoKTtcbiAgICAgIHZhciB0b3RhbENvbHVtbnNXaWR0aCA9IGluc3RhbmNlUHJvcHMuY29sdW1uU2l6ZUFuZFBvc2l0aW9uTWFuYWdlci5nZXRUb3RhbFNpemUoKTtcbiAgICAgIHZhciBzY3JvbGxMZWZ0ID0gTWF0aC5taW4oTWF0aC5tYXgoMCwgdG90YWxDb2x1bW5zV2lkdGggLSB3aWR0aCArIHNjcm9sbGJhclNpemUpLCBzY3JvbGxMZWZ0UGFyYW0pO1xuICAgICAgdmFyIHNjcm9sbFRvcCA9IE1hdGgubWluKE1hdGgubWF4KDAsIHRvdGFsUm93c0hlaWdodCAtIGhlaWdodCArIHNjcm9sbGJhclNpemUpLCBzY3JvbGxUb3BQYXJhbSk7XG5cbiAgICAgIC8vIENlcnRhaW4gZGV2aWNlcyAobGlrZSBBcHBsZSB0b3VjaHBhZCkgcmFwaWQtZmlyZSBkdXBsaWNhdGUgZXZlbnRzLlxuICAgICAgLy8gRG9uJ3QgZm9yY2UgYSByZS1yZW5kZXIgaWYgdGhpcyBpcyB0aGUgY2FzZS5cbiAgICAgIC8vIFRoZSBtb3VzZSBtYXkgbW92ZSBmYXN0ZXIgdGhlbiB0aGUgYW5pbWF0aW9uIGZyYW1lIGRvZXMuXG4gICAgICAvLyBVc2UgcmVxdWVzdEFuaW1hdGlvbkZyYW1lIHRvIGF2b2lkIG92ZXItdXBkYXRpbmcuXG4gICAgICBpZiAodGhpcy5zdGF0ZS5zY3JvbGxMZWZ0ICE9PSBzY3JvbGxMZWZ0IHx8IHRoaXMuc3RhdGUuc2Nyb2xsVG9wICE9PSBzY3JvbGxUb3ApIHtcbiAgICAgICAgLy8gVHJhY2sgc2Nyb2xsaW5nIGRpcmVjdGlvbiBzbyB3ZSBjYW4gbW9yZSBlZmZpY2llbnRseSBvdmVyc2NhbiByb3dzIHRvIHJlZHVjZSBlbXB0eSBzcGFjZSBhcm91bmQgdGhlIGVkZ2VzIHdoaWxlIHNjcm9sbGluZy5cbiAgICAgICAgLy8gRG9uJ3QgY2hhbmdlIGRpcmVjdGlvbiBmb3IgYW4gYXhpcyB1bmxlc3Mgc2Nyb2xsIG9mZnNldCBoYXMgY2hhbmdlZC5cbiAgICAgICAgdmFyIHNjcm9sbERpcmVjdGlvbkhvcml6b250YWwgPSBzY3JvbGxMZWZ0ICE9PSB0aGlzLnN0YXRlLnNjcm9sbExlZnQgPyBzY3JvbGxMZWZ0ID4gdGhpcy5zdGF0ZS5zY3JvbGxMZWZ0ID8gU0NST0xMX0RJUkVDVElPTl9GT1JXQVJEIDogU0NST0xMX0RJUkVDVElPTl9CQUNLV0FSRCA6IHRoaXMuc3RhdGUuc2Nyb2xsRGlyZWN0aW9uSG9yaXpvbnRhbDtcbiAgICAgICAgdmFyIHNjcm9sbERpcmVjdGlvblZlcnRpY2FsID0gc2Nyb2xsVG9wICE9PSB0aGlzLnN0YXRlLnNjcm9sbFRvcCA/IHNjcm9sbFRvcCA+IHRoaXMuc3RhdGUuc2Nyb2xsVG9wID8gU0NST0xMX0RJUkVDVElPTl9GT1JXQVJEIDogU0NST0xMX0RJUkVDVElPTl9CQUNLV0FSRCA6IHRoaXMuc3RhdGUuc2Nyb2xsRGlyZWN0aW9uVmVydGljYWw7XG4gICAgICAgIHZhciBuZXdTdGF0ZSAvKjogJFNoYXBlPFN0YXRlPiovID0ge1xuICAgICAgICAgIGlzU2Nyb2xsaW5nOiB0cnVlLFxuICAgICAgICAgIHNjcm9sbERpcmVjdGlvbkhvcml6b250YWw6IHNjcm9sbERpcmVjdGlvbkhvcml6b250YWwsXG4gICAgICAgICAgc2Nyb2xsRGlyZWN0aW9uVmVydGljYWw6IHNjcm9sbERpcmVjdGlvblZlcnRpY2FsLFxuICAgICAgICAgIHNjcm9sbFBvc2l0aW9uQ2hhbmdlUmVhc29uOiBTQ1JPTExfUE9TSVRJT05fQ0hBTkdFX1JFQVNPTlMuT0JTRVJWRURcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKCFhdXRvSGVpZ2h0KSB7XG4gICAgICAgICAgbmV3U3RhdGUuc2Nyb2xsVG9wID0gc2Nyb2xsVG9wO1xuICAgICAgICB9XG4gICAgICAgIGlmICghYXV0b1dpZHRoKSB7XG4gICAgICAgICAgbmV3U3RhdGUuc2Nyb2xsTGVmdCA9IHNjcm9sbExlZnQ7XG4gICAgICAgIH1cbiAgICAgICAgbmV3U3RhdGUubmVlZFRvUmVzZXRTdHlsZUNhY2hlID0gZmFsc2U7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUobmV3U3RhdGUpO1xuICAgICAgfVxuICAgICAgdGhpcy5faW52b2tlT25TY3JvbGxNZW1vaXplcih7XG4gICAgICAgIHNjcm9sbExlZnQ6IHNjcm9sbExlZnQsXG4gICAgICAgIHNjcm9sbFRvcDogc2Nyb2xsVG9wLFxuICAgICAgICB0b3RhbENvbHVtbnNXaWR0aDogdG90YWxDb2x1bW5zV2lkdGgsXG4gICAgICAgIHRvdGFsUm93c0hlaWdodDogdG90YWxSb3dzSGVpZ2h0XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbnZhbGlkYXRlIEdyaWQgc2l6ZSBhbmQgcmVjb21wdXRlIHZpc2libGUgY2VsbHMuXG4gICAgICogVGhpcyBpcyBhIGRlZmVycmVkIHdyYXBwZXIgZm9yIHJlY29tcHV0ZUdyaWRTaXplKCkuXG4gICAgICogSXQgc2V0cyBhIGZsYWcgdG8gYmUgZXZhbHVhdGVkIG9uIGNETS9jRFUgdG8gYXZvaWQgdW5uZWNlc3NhcnkgcmVuZGVycy5cbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBpbnRlbmRlZCBmb3IgYWR2YW5jZWQgdXNlLWNhc2VzIGxpa2UgQ2VsbE1lYXN1cmVyLlxuICAgICAqL1xuICAgIC8vIEBUT0RPIChidmF1Z2huKSBBZGQgYXV0b21hdGVkIHRlc3QgY292ZXJhZ2UgZm9yIHRoaXMuXG4gIH0sIHtcbiAgICBrZXk6IFwiaW52YWxpZGF0ZUNlbGxTaXplQWZ0ZXJSZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gaW52YWxpZGF0ZUNlbGxTaXplQWZ0ZXJSZW5kZXIoX3JlZjMgLyo6OiAqLykge1xuICAgICAgdmFyIGNvbHVtbkluZGV4ID0gX3JlZjMgLyo6OiAqLy5jb2x1bW5JbmRleCxcbiAgICAgICAgcm93SW5kZXggPSBfcmVmMyAvKjo6ICovLnJvd0luZGV4O1xuICAgICAgdGhpcy5fZGVmZXJyZWRJbnZhbGlkYXRlQ29sdW1uSW5kZXggPSB0eXBlb2YgdGhpcy5fZGVmZXJyZWRJbnZhbGlkYXRlQ29sdW1uSW5kZXggPT09ICdudW1iZXInID8gTWF0aC5taW4odGhpcy5fZGVmZXJyZWRJbnZhbGlkYXRlQ29sdW1uSW5kZXgsIGNvbHVtbkluZGV4KSA6IGNvbHVtbkluZGV4O1xuICAgICAgdGhpcy5fZGVmZXJyZWRJbnZhbGlkYXRlUm93SW5kZXggPSB0eXBlb2YgdGhpcy5fZGVmZXJyZWRJbnZhbGlkYXRlUm93SW5kZXggPT09ICdudW1iZXInID8gTWF0aC5taW4odGhpcy5fZGVmZXJyZWRJbnZhbGlkYXRlUm93SW5kZXgsIHJvd0luZGV4KSA6IHJvd0luZGV4O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFByZS1tZWFzdXJlIGFsbCBjb2x1bW5zIGFuZCByb3dzIGluIGEgR3JpZC5cbiAgICAgKiBUeXBpY2FsbHkgY2VsbHMgYXJlIG9ubHkgbWVhc3VyZWQgYXMgbmVlZGVkIGFuZCBlc3RpbWF0ZWQgc2l6ZXMgYXJlIHVzZWQgZm9yIGNlbGxzIHRoYXQgaGF2ZSBub3QgeWV0IGJlZW4gbWVhc3VyZWQuXG4gICAgICogVGhpcyBtZXRob2QgZW5zdXJlcyB0aGF0IHRoZSBuZXh0IGNhbGwgdG8gZ2V0VG90YWxTaXplKCkgcmV0dXJucyBhbiBleGFjdCBzaXplIChhcyBvcHBvc2VkIHRvIGp1c3QgYW4gZXN0aW1hdGVkIG9uZSkuXG4gICAgICovXG4gIH0sIHtcbiAgICBrZXk6IFwibWVhc3VyZUFsbENlbGxzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG1lYXN1cmVBbGxDZWxscygpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczIgPSB0aGlzLnByb3BzLFxuICAgICAgICBjb2x1bW5Db3VudCA9IF90aGlzJHByb3BzMi5jb2x1bW5Db3VudCxcbiAgICAgICAgcm93Q291bnQgPSBfdGhpcyRwcm9wczIucm93Q291bnQ7XG4gICAgICB2YXIgaW5zdGFuY2VQcm9wcyA9IHRoaXMuc3RhdGUuaW5zdGFuY2VQcm9wcztcbiAgICAgIGluc3RhbmNlUHJvcHMuY29sdW1uU2l6ZUFuZFBvc2l0aW9uTWFuYWdlci5nZXRTaXplQW5kUG9zaXRpb25PZkNlbGwoY29sdW1uQ291bnQgLSAxKTtcbiAgICAgIGluc3RhbmNlUHJvcHMucm93U2l6ZUFuZFBvc2l0aW9uTWFuYWdlci5nZXRTaXplQW5kUG9zaXRpb25PZkNlbGwocm93Q291bnQgLSAxKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGb3JjZWQgcmVjb21wdXRlIG9mIHJvdyBoZWlnaHRzIGFuZCBjb2x1bW4gd2lkdGhzLlxuICAgICAqIFRoaXMgZnVuY3Rpb24gc2hvdWxkIGJlIGNhbGxlZCBpZiBkeW5hbWljIGNvbHVtbiBvciByb3cgc2l6ZXMgaGF2ZSBjaGFuZ2VkIGJ1dCBub3RoaW5nIGVsc2UgaGFzLlxuICAgICAqIFNpbmNlIEdyaWQgb25seSByZWNlaXZlcyA6Y29sdW1uQ291bnQgYW5kIDpyb3dDb3VudCBpdCBoYXMgbm8gd2F5IG9mIGRldGVjdGluZyB3aGVuIHRoZSB1bmRlcmx5aW5nIGRhdGEgY2hhbmdlcy5cbiAgICAgKi9cbiAgfSwge1xuICAgIGtleTogXCJyZWNvbXB1dGVHcmlkU2l6ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZWNvbXB1dGVHcmlkU2l6ZSgpIHtcbiAgICAgIHZhciBfcmVmNCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge30sXG4gICAgICAgIF9yZWY0JGNvbHVtbkluZGV4ID0gX3JlZjQuY29sdW1uSW5kZXgsXG4gICAgICAgIGNvbHVtbkluZGV4ID0gX3JlZjQkY29sdW1uSW5kZXggPT09IHZvaWQgMCA/IDAgOiBfcmVmNCRjb2x1bW5JbmRleCxcbiAgICAgICAgX3JlZjQkcm93SW5kZXggPSBfcmVmNC5yb3dJbmRleCxcbiAgICAgICAgcm93SW5kZXggPSBfcmVmNCRyb3dJbmRleCA9PT0gdm9pZCAwID8gMCA6IF9yZWY0JHJvd0luZGV4O1xuICAgICAgdmFyIF90aGlzJHByb3BzMyA9IHRoaXMucHJvcHMsXG4gICAgICAgIHNjcm9sbFRvQ29sdW1uID0gX3RoaXMkcHJvcHMzLnNjcm9sbFRvQ29sdW1uLFxuICAgICAgICBzY3JvbGxUb1JvdyA9IF90aGlzJHByb3BzMy5zY3JvbGxUb1JvdztcbiAgICAgIHZhciBpbnN0YW5jZVByb3BzID0gdGhpcy5zdGF0ZS5pbnN0YW5jZVByb3BzO1xuICAgICAgaW5zdGFuY2VQcm9wcy5jb2x1bW5TaXplQW5kUG9zaXRpb25NYW5hZ2VyLnJlc2V0Q2VsbChjb2x1bW5JbmRleCk7XG4gICAgICBpbnN0YW5jZVByb3BzLnJvd1NpemVBbmRQb3NpdGlvbk1hbmFnZXIucmVzZXRDZWxsKHJvd0luZGV4KTtcblxuICAgICAgLy8gQ2VsbCBzaXplcyBtYXkgYmUgZGV0ZXJtaW5lZCBieSBhIGZ1bmN0aW9uIHByb3BlcnR5LlxuICAgICAgLy8gSW4gdGhpcyBjYXNlIHRoZSBjRFUgaGFuZGxlciBjYW4ndCBrbm93IGlmIHRoZXkgY2hhbmdlZC5cbiAgICAgIC8vIFN0b3JlIHRoaXMgZmxhZyB0byBsZXQgdGhlIG5leHQgY0RVIHBhc3Mga25vdyBpdCBuZWVkcyB0byByZWNvbXB1dGUgdGhlIHNjcm9sbCBvZmZzZXQuXG4gICAgICB0aGlzLl9yZWNvbXB1dGVTY3JvbGxMZWZ0RmxhZyA9IHNjcm9sbFRvQ29sdW1uID49IDAgJiYgKHRoaXMuc3RhdGUuc2Nyb2xsRGlyZWN0aW9uSG9yaXpvbnRhbCA9PT0gU0NST0xMX0RJUkVDVElPTl9GT1JXQVJEID8gY29sdW1uSW5kZXggPD0gc2Nyb2xsVG9Db2x1bW4gOiBjb2x1bW5JbmRleCA+PSBzY3JvbGxUb0NvbHVtbik7XG4gICAgICB0aGlzLl9yZWNvbXB1dGVTY3JvbGxUb3BGbGFnID0gc2Nyb2xsVG9Sb3cgPj0gMCAmJiAodGhpcy5zdGF0ZS5zY3JvbGxEaXJlY3Rpb25WZXJ0aWNhbCA9PT0gU0NST0xMX0RJUkVDVElPTl9GT1JXQVJEID8gcm93SW5kZXggPD0gc2Nyb2xsVG9Sb3cgOiByb3dJbmRleCA+PSBzY3JvbGxUb1Jvdyk7XG5cbiAgICAgIC8vIENsZWFyIGNlbGwgY2FjaGUgaW4gY2FzZSB3ZSBhcmUgc2Nyb2xsaW5nO1xuICAgICAgLy8gSW52YWxpZCByb3cgaGVpZ2h0cyBsaWtlbHkgbWVhbiBpbnZhbGlkIGNhY2hlZCBjb250ZW50IGFzIHdlbGwuXG4gICAgICB0aGlzLl9zdHlsZUNhY2hlID0ge307XG4gICAgICB0aGlzLl9jZWxsQ2FjaGUgPSB7fTtcbiAgICAgIHRoaXMuZm9yY2VVcGRhdGUoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFbnN1cmUgY29sdW1uIGFuZCByb3cgYXJlIHZpc2libGUuXG4gICAgICovXG4gIH0sIHtcbiAgICBrZXk6IFwic2Nyb2xsVG9DZWxsXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNjcm9sbFRvQ2VsbChfcmVmNSAvKjo6ICovKSB7XG4gICAgICB2YXIgY29sdW1uSW5kZXggPSBfcmVmNSAvKjo6ICovLmNvbHVtbkluZGV4LFxuICAgICAgICByb3dJbmRleCA9IF9yZWY1IC8qOjogKi8ucm93SW5kZXg7XG4gICAgICB2YXIgY29sdW1uQ291bnQgPSB0aGlzLnByb3BzLmNvbHVtbkNvdW50O1xuICAgICAgdmFyIHByb3BzID0gdGhpcy5wcm9wcztcblxuICAgICAgLy8gRG9uJ3QgYWRqdXN0IHNjcm9sbCBvZmZzZXQgZm9yIHNpbmdsZS1jb2x1bW4gZ3JpZHMgKGVnIExpc3QsIFRhYmxlKS5cbiAgICAgIC8vIFRoaXMgY2FuIGNhdXNlIGEgZnVua3kgc2Nyb2xsIG9mZnNldCBiZWNhdXNlIG9mIHRoZSB2ZXJ0aWNhbCBzY3JvbGxiYXIgd2lkdGguXG4gICAgICBpZiAoY29sdW1uQ291bnQgPiAxICYmIGNvbHVtbkluZGV4ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhpcy5fdXBkYXRlU2Nyb2xsTGVmdEZvclNjcm9sbFRvQ29sdW1uKF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgcHJvcHMpLCB7fSwge1xuICAgICAgICAgIHNjcm9sbFRvQ29sdW1uOiBjb2x1bW5JbmRleFxuICAgICAgICB9KSk7XG4gICAgICB9XG4gICAgICBpZiAocm93SW5kZXggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aGlzLl91cGRhdGVTY3JvbGxUb3BGb3JTY3JvbGxUb1Jvdyhfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIHByb3BzKSwge30sIHtcbiAgICAgICAgICBzY3JvbGxUb1Jvdzogcm93SW5kZXhcbiAgICAgICAgfSkpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjb21wb25lbnREaWRNb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczQgPSB0aGlzLnByb3BzLFxuICAgICAgICBnZXRTY3JvbGxiYXJTaXplID0gX3RoaXMkcHJvcHM0LmdldFNjcm9sbGJhclNpemUsXG4gICAgICAgIGhlaWdodCA9IF90aGlzJHByb3BzNC5oZWlnaHQsXG4gICAgICAgIHNjcm9sbExlZnQgPSBfdGhpcyRwcm9wczQuc2Nyb2xsTGVmdCxcbiAgICAgICAgc2Nyb2xsVG9Db2x1bW4gPSBfdGhpcyRwcm9wczQuc2Nyb2xsVG9Db2x1bW4sXG4gICAgICAgIHNjcm9sbFRvcCA9IF90aGlzJHByb3BzNC5zY3JvbGxUb3AsXG4gICAgICAgIHNjcm9sbFRvUm93ID0gX3RoaXMkcHJvcHM0LnNjcm9sbFRvUm93LFxuICAgICAgICB3aWR0aCA9IF90aGlzJHByb3BzNC53aWR0aDtcbiAgICAgIHZhciBpbnN0YW5jZVByb3BzID0gdGhpcy5zdGF0ZS5pbnN0YW5jZVByb3BzO1xuXG4gICAgICAvLyBSZXNldCBpbml0aWFsIG9mZnNldHMgdG8gYmUgaWdub3JlZCBpbiBicm93c2VyXG4gICAgICB0aGlzLl9pbml0aWFsU2Nyb2xsVG9wID0gMDtcbiAgICAgIHRoaXMuX2luaXRpYWxTY3JvbGxMZWZ0ID0gMDtcblxuICAgICAgLy8gSWYgY2VsbCBzaXplcyBoYXZlIGJlZW4gaW52YWxpZGF0ZWQgKGVnIHdlIGFyZSB1c2luZyBDZWxsTWVhc3VyZXIpIHRoZW4gcmVzZXQgY2FjaGVkIHBvc2l0aW9ucy5cbiAgICAgIC8vIFdlIG11c3QgZG8gdGhpcyBhdCB0aGUgc3RhcnQgb2YgdGhlIG1ldGhvZCBhcyB3ZSBtYXkgY2FsY3VsYXRlIGFuZCB1cGRhdGUgc2Nyb2xsIHBvc2l0aW9uIGJlbG93LlxuICAgICAgdGhpcy5faGFuZGxlSW52YWxpZGF0ZWRHcmlkU2l6ZSgpO1xuXG4gICAgICAvLyBJZiB0aGlzIGNvbXBvbmVudCB3YXMgZmlyc3QgcmVuZGVyZWQgc2VydmVyLXNpZGUsIHNjcm9sbGJhciBzaXplIHdpbGwgYmUgdW5kZWZpbmVkLlxuICAgICAgLy8gSW4gdGhhdCBldmVudCB3ZSBuZWVkIHRvIHJlbWVhc3VyZS5cbiAgICAgIGlmICghaW5zdGFuY2VQcm9wcy5zY3JvbGxiYXJTaXplTWVhc3VyZWQpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZShmdW5jdGlvbiAocHJldlN0YXRlKSB7XG4gICAgICAgICAgdmFyIHN0YXRlVXBkYXRlID0gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBwcmV2U3RhdGUpLCB7fSwge1xuICAgICAgICAgICAgbmVlZFRvUmVzZXRTdHlsZUNhY2hlOiBmYWxzZVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHN0YXRlVXBkYXRlLmluc3RhbmNlUHJvcHMuc2Nyb2xsYmFyU2l6ZSA9IGdldFNjcm9sbGJhclNpemUoKTtcbiAgICAgICAgICBzdGF0ZVVwZGF0ZS5pbnN0YW5jZVByb3BzLnNjcm9sbGJhclNpemVNZWFzdXJlZCA9IHRydWU7XG4gICAgICAgICAgcmV0dXJuIHN0YXRlVXBkYXRlO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2Ygc2Nyb2xsTGVmdCA9PT0gJ251bWJlcicgJiYgc2Nyb2xsTGVmdCA+PSAwIHx8IHR5cGVvZiBzY3JvbGxUb3AgPT09ICdudW1iZXInICYmIHNjcm9sbFRvcCA+PSAwKSB7XG4gICAgICAgIHZhciBzdGF0ZVVwZGF0ZSA9IEdyaWQuX2dldFNjcm9sbFRvUG9zaXRpb25TdGF0ZVVwZGF0ZSh7XG4gICAgICAgICAgcHJldlN0YXRlOiB0aGlzLnN0YXRlLFxuICAgICAgICAgIHNjcm9sbExlZnQ6IHNjcm9sbExlZnQsXG4gICAgICAgICAgc2Nyb2xsVG9wOiBzY3JvbGxUb3BcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChzdGF0ZVVwZGF0ZSkge1xuICAgICAgICAgIHN0YXRlVXBkYXRlLm5lZWRUb1Jlc2V0U3R5bGVDYWNoZSA9IGZhbHNlO1xuICAgICAgICAgIHRoaXMuc2V0U3RhdGUoc3RhdGVVcGRhdGUpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIHJlZnMgZG9uJ3Qgd29yayBpbiBgcmVhY3QtdGVzdC1yZW5kZXJlcmBcbiAgICAgIGlmICh0aGlzLl9zY3JvbGxpbmdDb250YWluZXIpIHtcbiAgICAgICAgLy8gc2V0dGluZyB0aGUgcmVmJ3Mgc2Nyb2xsTGVmdCBhbmQgc2Nyb2xsVG9wLlxuICAgICAgICAvLyBTb21laG93IGluIE11bHRpR3JpZCB0aGUgbWFpbiBncmlkIGRvZXNuJ3QgdHJpZ2dlciBhIHVwZGF0ZSBvbiBtb3VudC5cbiAgICAgICAgaWYgKHRoaXMuX3Njcm9sbGluZ0NvbnRhaW5lci5zY3JvbGxMZWZ0ICE9PSB0aGlzLnN0YXRlLnNjcm9sbExlZnQpIHtcbiAgICAgICAgICB0aGlzLl9zY3JvbGxpbmdDb250YWluZXIuc2Nyb2xsTGVmdCA9IHRoaXMuc3RhdGUuc2Nyb2xsTGVmdDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fc2Nyb2xsaW5nQ29udGFpbmVyLnNjcm9sbFRvcCAhPT0gdGhpcy5zdGF0ZS5zY3JvbGxUb3ApIHtcbiAgICAgICAgICB0aGlzLl9zY3JvbGxpbmdDb250YWluZXIuc2Nyb2xsVG9wID0gdGhpcy5zdGF0ZS5zY3JvbGxUb3A7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gRG9uJ3QgdXBkYXRlIHNjcm9sbCBvZmZzZXQgaWYgdGhlIHNpemUgaXMgMDsgd2UgZG9uJ3QgcmVuZGVyIGFueSBjZWxscyBpbiB0aGlzIGNhc2UuXG4gICAgICAvLyBTZXR0aW5nIGEgc3RhdGUgbWF5IGNhdXNlIHVzIHRvIGxhdGVyIHRoaW5nIHdlJ3ZlIHVwZGF0ZWQgdGhlIG9mZmNlIHdoZW4gd2UgaGF2ZW4ndC5cbiAgICAgIHZhciBzaXplSXNCaWdnZXJUaGFuWmVybyA9IGhlaWdodCA+IDAgJiYgd2lkdGggPiAwO1xuICAgICAgaWYgKHNjcm9sbFRvQ29sdW1uID49IDAgJiYgc2l6ZUlzQmlnZ2VyVGhhblplcm8pIHtcbiAgICAgICAgdGhpcy5fdXBkYXRlU2Nyb2xsTGVmdEZvclNjcm9sbFRvQ29sdW1uKCk7XG4gICAgICB9XG4gICAgICBpZiAoc2Nyb2xsVG9Sb3cgPj0gMCAmJiBzaXplSXNCaWdnZXJUaGFuWmVybykge1xuICAgICAgICB0aGlzLl91cGRhdGVTY3JvbGxUb3BGb3JTY3JvbGxUb1JvdygpO1xuICAgICAgfVxuXG4gICAgICAvLyBVcGRhdGUgb25Sb3dzUmVuZGVyZWQgY2FsbGJhY2tcbiAgICAgIHRoaXMuX2ludm9rZU9uR3JpZFJlbmRlcmVkSGVscGVyKCk7XG5cbiAgICAgIC8vIEluaXRpYWxpemUgb25TY3JvbGwgY2FsbGJhY2tcbiAgICAgIHRoaXMuX2ludm9rZU9uU2Nyb2xsTWVtb2l6ZXIoe1xuICAgICAgICBzY3JvbGxMZWZ0OiBzY3JvbGxMZWZ0IHx8IDAsXG4gICAgICAgIHNjcm9sbFRvcDogc2Nyb2xsVG9wIHx8IDAsXG4gICAgICAgIHRvdGFsQ29sdW1uc1dpZHRoOiBpbnN0YW5jZVByb3BzLmNvbHVtblNpemVBbmRQb3NpdGlvbk1hbmFnZXIuZ2V0VG90YWxTaXplKCksXG4gICAgICAgIHRvdGFsUm93c0hlaWdodDogaW5zdGFuY2VQcm9wcy5yb3dTaXplQW5kUG9zaXRpb25NYW5hZ2VyLmdldFRvdGFsU2l6ZSgpXG4gICAgICB9KTtcbiAgICAgIHRoaXMuX21heWJlQ2FsbE9uU2Nyb2xsYmFyUHJlc2VuY2VDaGFuZ2UoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIFRoaXMgbWV0aG9kIHVwZGF0ZXMgc2Nyb2xsTGVmdC9zY3JvbGxUb3AgaW4gc3RhdGUgZm9yIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbiAgICAgKiAxKSBOZXcgc2Nyb2xsLXRvLWNlbGwgcHJvcHMgaGF2ZSBiZWVuIHNldFxuICAgICAqL1xuICB9LCB7XG4gICAga2V5OiBcImNvbXBvbmVudERpZFVwZGF0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzIC8qOiBQcm9wcyovLCBwcmV2U3RhdGUgLyo6IFN0YXRlKi8pIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuICAgICAgdmFyIF90aGlzJHByb3BzNSA9IHRoaXMucHJvcHMsXG4gICAgICAgIGF1dG9IZWlnaHQgPSBfdGhpcyRwcm9wczUuYXV0b0hlaWdodCxcbiAgICAgICAgYXV0b1dpZHRoID0gX3RoaXMkcHJvcHM1LmF1dG9XaWR0aCxcbiAgICAgICAgY29sdW1uQ291bnQgPSBfdGhpcyRwcm9wczUuY29sdW1uQ291bnQsXG4gICAgICAgIGhlaWdodCA9IF90aGlzJHByb3BzNS5oZWlnaHQsXG4gICAgICAgIHJvd0NvdW50ID0gX3RoaXMkcHJvcHM1LnJvd0NvdW50LFxuICAgICAgICBzY3JvbGxUb0FsaWdubWVudCA9IF90aGlzJHByb3BzNS5zY3JvbGxUb0FsaWdubWVudCxcbiAgICAgICAgc2Nyb2xsVG9Db2x1bW4gPSBfdGhpcyRwcm9wczUuc2Nyb2xsVG9Db2x1bW4sXG4gICAgICAgIHNjcm9sbFRvUm93ID0gX3RoaXMkcHJvcHM1LnNjcm9sbFRvUm93LFxuICAgICAgICB3aWR0aCA9IF90aGlzJHByb3BzNS53aWR0aDtcbiAgICAgIHZhciBfdGhpcyRzdGF0ZSA9IHRoaXMuc3RhdGUsXG4gICAgICAgIHNjcm9sbExlZnQgPSBfdGhpcyRzdGF0ZS5zY3JvbGxMZWZ0LFxuICAgICAgICBzY3JvbGxQb3NpdGlvbkNoYW5nZVJlYXNvbiA9IF90aGlzJHN0YXRlLnNjcm9sbFBvc2l0aW9uQ2hhbmdlUmVhc29uLFxuICAgICAgICBzY3JvbGxUb3AgPSBfdGhpcyRzdGF0ZS5zY3JvbGxUb3AsXG4gICAgICAgIGluc3RhbmNlUHJvcHMgPSBfdGhpcyRzdGF0ZS5pbnN0YW5jZVByb3BzO1xuICAgICAgLy8gSWYgY2VsbCBzaXplcyBoYXZlIGJlZW4gaW52YWxpZGF0ZWQgKGVnIHdlIGFyZSB1c2luZyBDZWxsTWVhc3VyZXIpIHRoZW4gcmVzZXQgY2FjaGVkIHBvc2l0aW9ucy5cbiAgICAgIC8vIFdlIG11c3QgZG8gdGhpcyBhdCB0aGUgc3RhcnQgb2YgdGhlIG1ldGhvZCBhcyB3ZSBtYXkgY2FsY3VsYXRlIGFuZCB1cGRhdGUgc2Nyb2xsIHBvc2l0aW9uIGJlbG93LlxuICAgICAgdGhpcy5faGFuZGxlSW52YWxpZGF0ZWRHcmlkU2l6ZSgpO1xuXG4gICAgICAvLyBIYW5kbGUgZWRnZSBjYXNlIHdoZXJlIGNvbHVtbiBvciByb3cgY291bnQgaGFzIG9ubHkganVzdCBpbmNyZWFzZWQgb3ZlciAwLlxuICAgICAgLy8gSW4gdGhpcyBjYXNlIHdlIG1heSBoYXZlIHRvIHJlc3RvcmUgYSBwcmV2aW91c2x5LXNwZWNpZmllZCBzY3JvbGwgb2Zmc2V0LlxuICAgICAgLy8gRm9yIG1vcmUgaW5mbyBzZWUgYnZhdWdobi9yZWFjdC12aXJ0dWFsaXplZC9pc3N1ZXMvMjE4XG4gICAgICB2YXIgY29sdW1uT3JSb3dDb3VudEp1c3RJbmNyZWFzZWRGcm9tWmVybyA9IGNvbHVtbkNvdW50ID4gMCAmJiBwcmV2UHJvcHMuY29sdW1uQ291bnQgPT09IDAgfHwgcm93Q291bnQgPiAwICYmIHByZXZQcm9wcy5yb3dDb3VudCA9PT0gMDtcblxuICAgICAgLy8gTWFrZSBzdXJlIHJlcXVlc3RlZCBjaGFuZ2VzIHRvIDpzY3JvbGxMZWZ0IG9yIDpzY3JvbGxUb3AgZ2V0IGFwcGxpZWQuXG4gICAgICAvLyBBc3NpZ25pbmcgdG8gc2Nyb2xsTGVmdC9zY3JvbGxUb3AgdGVsbHMgdGhlIGJyb3dzZXIgdG8gaW50ZXJydXB0IGFueSBydW5uaW5nIHNjcm9sbCBhbmltYXRpb25zLFxuICAgICAgLy8gQW5kIHRvIGRpc2NhcmQgYW55IHBlbmRpbmcgYXN5bmMgY2hhbmdlcyB0byB0aGUgc2Nyb2xsIHBvc2l0aW9uIHRoYXQgbWF5IGhhdmUgaGFwcGVuZWQgaW4gdGhlIG1lYW50aW1lIChlLmcuIG9uIGEgc2VwYXJhdGUgc2Nyb2xsaW5nIHRocmVhZCkuXG4gICAgICAvLyBTbyB3ZSBvbmx5IHNldCB0aGVzZSB3aGVuIHdlIHJlcXVpcmUgYW4gYWRqdXN0bWVudCBvZiB0aGUgc2Nyb2xsIHBvc2l0aW9uLlxuICAgICAgLy8gU2VlIGlzc3VlICMyIGZvciBtb3JlIGluZm9ybWF0aW9uLlxuICAgICAgaWYgKHNjcm9sbFBvc2l0aW9uQ2hhbmdlUmVhc29uID09PSBTQ1JPTExfUE9TSVRJT05fQ0hBTkdFX1JFQVNPTlMuUkVRVUVTVEVEKSB7XG4gICAgICAgIC8vIEBUUklDS1kgOmF1dG9IZWlnaHQgYW5kIDphdXRvV2lkdGggcHJvcGVydGllcyBpbnN0cnVjdHMgR3JpZCB0byBsZWF2ZSA6c2Nyb2xsVG9wIGFuZCA6c2Nyb2xsTGVmdCBtYW5hZ2VtZW50IHRvIGFuIGV4dGVybmFsIEhPQyAoZWcgV2luZG93U2Nyb2xsZXIpLlxuICAgICAgICAvLyBJbiB0aGlzIGNhc2Ugd2Ugc2hvdWxkIGF2b2lkIGNoZWNraW5nIHNjcm9sbGluZ0NvbnRhaW5lci5zY3JvbGxUb3AgYW5kIHNjcm9sbGluZ0NvbnRhaW5lci5zY3JvbGxMZWZ0IHNpbmNlIGl0IGZvcmNlcyBsYXlvdXQvZmxvdy5cbiAgICAgICAgaWYgKCFhdXRvV2lkdGggJiYgc2Nyb2xsTGVmdCA+PSAwICYmIChzY3JvbGxMZWZ0ICE9PSB0aGlzLl9zY3JvbGxpbmdDb250YWluZXIuc2Nyb2xsTGVmdCB8fCBjb2x1bW5PclJvd0NvdW50SnVzdEluY3JlYXNlZEZyb21aZXJvKSkge1xuICAgICAgICAgIHRoaXMuX3Njcm9sbGluZ0NvbnRhaW5lci5zY3JvbGxMZWZ0ID0gc2Nyb2xsTGVmdDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWF1dG9IZWlnaHQgJiYgc2Nyb2xsVG9wID49IDAgJiYgKHNjcm9sbFRvcCAhPT0gdGhpcy5fc2Nyb2xsaW5nQ29udGFpbmVyLnNjcm9sbFRvcCB8fCBjb2x1bW5PclJvd0NvdW50SnVzdEluY3JlYXNlZEZyb21aZXJvKSkge1xuICAgICAgICAgIHRoaXMuX3Njcm9sbGluZ0NvbnRhaW5lci5zY3JvbGxUb3AgPSBzY3JvbGxUb3A7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gU3BlY2lhbCBjYXNlIHdoZXJlIHRoZSBwcmV2aW91cyBzaXplIHdhcyAwOlxuICAgICAgLy8gSW4gdGhpcyBjYXNlIHdlIGRvbid0IHNob3cgYW55IHdpbmRvd2VkIGNlbGxzIGF0IGFsbC5cbiAgICAgIC8vIFNvIHdlIHNob3VsZCBhbHdheXMgcmVjYWxjdWxhdGUgb2Zmc2V0IGFmdGVyd2FyZHMuXG4gICAgICB2YXIgc2l6ZUp1c3RJbmNyZWFzZWRGcm9tWmVybyA9IChwcmV2UHJvcHMud2lkdGggPT09IDAgfHwgcHJldlByb3BzLmhlaWdodCA9PT0gMCkgJiYgaGVpZ2h0ID4gMCAmJiB3aWR0aCA+IDA7XG5cbiAgICAgIC8vIFVwZGF0ZSBzY3JvbGwgb2Zmc2V0cyBpZiB0aGUgY3VycmVudCA6c2Nyb2xsVG9Db2x1bW4gb3IgOnNjcm9sbFRvUm93IHZhbHVlcyByZXF1aXJlcyBpdFxuICAgICAgLy8gQFRPRE8gRG8gd2UgYWxzbyBuZWVkIHRoaXMgY2hlY2sgb3IgY2FuIHRoZSBvbmUgaW4gY29tcG9uZW50V2lsbFVwZGF0ZSgpIHN1ZmZpY2U/XG4gICAgICBpZiAodGhpcy5fcmVjb21wdXRlU2Nyb2xsTGVmdEZsYWcpIHtcbiAgICAgICAgdGhpcy5fcmVjb21wdXRlU2Nyb2xsTGVmdEZsYWcgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fdXBkYXRlU2Nyb2xsTGVmdEZvclNjcm9sbFRvQ29sdW1uKHRoaXMucHJvcHMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdXBkYXRlU2Nyb2xsSW5kZXhIZWxwZXIoe1xuICAgICAgICAgIGNlbGxTaXplQW5kUG9zaXRpb25NYW5hZ2VyOiBpbnN0YW5jZVByb3BzLmNvbHVtblNpemVBbmRQb3NpdGlvbk1hbmFnZXIsXG4gICAgICAgICAgcHJldmlvdXNDZWxsc0NvdW50OiBwcmV2UHJvcHMuY29sdW1uQ291bnQsXG4gICAgICAgICAgcHJldmlvdXNDZWxsU2l6ZTogcHJldlByb3BzLmNvbHVtbldpZHRoLFxuICAgICAgICAgIHByZXZpb3VzU2Nyb2xsVG9BbGlnbm1lbnQ6IHByZXZQcm9wcy5zY3JvbGxUb0FsaWdubWVudCxcbiAgICAgICAgICBwcmV2aW91c1Njcm9sbFRvSW5kZXg6IHByZXZQcm9wcy5zY3JvbGxUb0NvbHVtbixcbiAgICAgICAgICBwcmV2aW91c1NpemU6IHByZXZQcm9wcy53aWR0aCxcbiAgICAgICAgICBzY3JvbGxPZmZzZXQ6IHNjcm9sbExlZnQsXG4gICAgICAgICAgc2Nyb2xsVG9BbGlnbm1lbnQ6IHNjcm9sbFRvQWxpZ25tZW50LFxuICAgICAgICAgIHNjcm9sbFRvSW5kZXg6IHNjcm9sbFRvQ29sdW1uLFxuICAgICAgICAgIHNpemU6IHdpZHRoLFxuICAgICAgICAgIHNpemVKdXN0SW5jcmVhc2VkRnJvbVplcm86IHNpemVKdXN0SW5jcmVhc2VkRnJvbVplcm8sXG4gICAgICAgICAgdXBkYXRlU2Nyb2xsSW5kZXhDYWxsYmFjazogZnVuY3Rpb24gdXBkYXRlU2Nyb2xsSW5kZXhDYWxsYmFjaygpIHtcbiAgICAgICAgICAgIHJldHVybiBfdGhpczIuX3VwZGF0ZVNjcm9sbExlZnRGb3JTY3JvbGxUb0NvbHVtbihfdGhpczIucHJvcHMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5fcmVjb21wdXRlU2Nyb2xsVG9wRmxhZykge1xuICAgICAgICB0aGlzLl9yZWNvbXB1dGVTY3JvbGxUb3BGbGFnID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX3VwZGF0ZVNjcm9sbFRvcEZvclNjcm9sbFRvUm93KHRoaXMucHJvcHMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdXBkYXRlU2Nyb2xsSW5kZXhIZWxwZXIoe1xuICAgICAgICAgIGNlbGxTaXplQW5kUG9zaXRpb25NYW5hZ2VyOiBpbnN0YW5jZVByb3BzLnJvd1NpemVBbmRQb3NpdGlvbk1hbmFnZXIsXG4gICAgICAgICAgcHJldmlvdXNDZWxsc0NvdW50OiBwcmV2UHJvcHMucm93Q291bnQsXG4gICAgICAgICAgcHJldmlvdXNDZWxsU2l6ZTogcHJldlByb3BzLnJvd0hlaWdodCxcbiAgICAgICAgICBwcmV2aW91c1Njcm9sbFRvQWxpZ25tZW50OiBwcmV2UHJvcHMuc2Nyb2xsVG9BbGlnbm1lbnQsXG4gICAgICAgICAgcHJldmlvdXNTY3JvbGxUb0luZGV4OiBwcmV2UHJvcHMuc2Nyb2xsVG9Sb3csXG4gICAgICAgICAgcHJldmlvdXNTaXplOiBwcmV2UHJvcHMuaGVpZ2h0LFxuICAgICAgICAgIHNjcm9sbE9mZnNldDogc2Nyb2xsVG9wLFxuICAgICAgICAgIHNjcm9sbFRvQWxpZ25tZW50OiBzY3JvbGxUb0FsaWdubWVudCxcbiAgICAgICAgICBzY3JvbGxUb0luZGV4OiBzY3JvbGxUb1JvdyxcbiAgICAgICAgICBzaXplOiBoZWlnaHQsXG4gICAgICAgICAgc2l6ZUp1c3RJbmNyZWFzZWRGcm9tWmVybzogc2l6ZUp1c3RJbmNyZWFzZWRGcm9tWmVybyxcbiAgICAgICAgICB1cGRhdGVTY3JvbGxJbmRleENhbGxiYWNrOiBmdW5jdGlvbiB1cGRhdGVTY3JvbGxJbmRleENhbGxiYWNrKCkge1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzMi5fdXBkYXRlU2Nyb2xsVG9wRm9yU2Nyb2xsVG9Sb3coX3RoaXMyLnByb3BzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICAvLyBVcGRhdGUgb25Sb3dzUmVuZGVyZWQgY2FsbGJhY2sgaWYgc3RhcnQvc3RvcCBpbmRpY2VzIGhhdmUgY2hhbmdlZFxuICAgICAgdGhpcy5faW52b2tlT25HcmlkUmVuZGVyZWRIZWxwZXIoKTtcblxuICAgICAgLy8gQ2hhbmdlcyB0byA6c2Nyb2xsTGVmdCBvciA6c2Nyb2xsVG9wIHNob3VsZCBhbHNvIG5vdGlmeSA6b25TY3JvbGwgbGlzdGVuZXJzXG4gICAgICBpZiAoc2Nyb2xsTGVmdCAhPT0gcHJldlN0YXRlLnNjcm9sbExlZnQgfHwgc2Nyb2xsVG9wICE9PSBwcmV2U3RhdGUuc2Nyb2xsVG9wKSB7XG4gICAgICAgIHZhciB0b3RhbFJvd3NIZWlnaHQgPSBpbnN0YW5jZVByb3BzLnJvd1NpemVBbmRQb3NpdGlvbk1hbmFnZXIuZ2V0VG90YWxTaXplKCk7XG4gICAgICAgIHZhciB0b3RhbENvbHVtbnNXaWR0aCA9IGluc3RhbmNlUHJvcHMuY29sdW1uU2l6ZUFuZFBvc2l0aW9uTWFuYWdlci5nZXRUb3RhbFNpemUoKTtcbiAgICAgICAgdGhpcy5faW52b2tlT25TY3JvbGxNZW1vaXplcih7XG4gICAgICAgICAgc2Nyb2xsTGVmdDogc2Nyb2xsTGVmdCxcbiAgICAgICAgICBzY3JvbGxUb3A6IHNjcm9sbFRvcCxcbiAgICAgICAgICB0b3RhbENvbHVtbnNXaWR0aDogdG90YWxDb2x1bW5zV2lkdGgsXG4gICAgICAgICAgdG90YWxSb3dzSGVpZ2h0OiB0b3RhbFJvd3NIZWlnaHRcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICB0aGlzLl9tYXliZUNhbGxPblNjcm9sbGJhclByZXNlbmNlQ2hhbmdlKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNvbXBvbmVudFdpbGxVbm1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgaWYgKHRoaXMuX2Rpc2FibGVQb2ludGVyRXZlbnRzVGltZW91dElkKSB7XG4gICAgICAgIGNhbmNlbEFuaW1hdGlvblRpbWVvdXQodGhpcy5fZGlzYWJsZVBvaW50ZXJFdmVudHNUaW1lb3V0SWQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIHVwZGF0ZXMgc2Nyb2xsTGVmdC9zY3JvbGxUb3AgaW4gc3RhdGUgZm9yIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbiAgICAgKiAxKSBFbXB0eSBjb250ZW50ICgwIHJvd3Mgb3IgY29sdW1ucylcbiAgICAgKiAyKSBOZXcgc2Nyb2xsIHByb3BzIG92ZXJyaWRpbmcgdGhlIGN1cnJlbnQgc3RhdGVcbiAgICAgKiAzKSBDZWxscy1jb3VudCBvciBjZWxscy1zaXplIGhhcyBjaGFuZ2VkLCBtYWtpbmcgcHJldmlvdXMgc2Nyb2xsIG9mZnNldHMgaW52YWxpZFxuICAgICAqL1xuICB9LCB7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHM2ID0gdGhpcy5wcm9wcyxcbiAgICAgICAgYXV0b0NvbnRhaW5lcldpZHRoID0gX3RoaXMkcHJvcHM2LmF1dG9Db250YWluZXJXaWR0aCxcbiAgICAgICAgYXV0b0hlaWdodCA9IF90aGlzJHByb3BzNi5hdXRvSGVpZ2h0LFxuICAgICAgICBhdXRvV2lkdGggPSBfdGhpcyRwcm9wczYuYXV0b1dpZHRoLFxuICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wczYuY2xhc3NOYW1lLFxuICAgICAgICBjb250YWluZXJQcm9wcyA9IF90aGlzJHByb3BzNi5jb250YWluZXJQcm9wcyxcbiAgICAgICAgY29udGFpbmVyUm9sZSA9IF90aGlzJHByb3BzNi5jb250YWluZXJSb2xlLFxuICAgICAgICBjb250YWluZXJTdHlsZSA9IF90aGlzJHByb3BzNi5jb250YWluZXJTdHlsZSxcbiAgICAgICAgaGVpZ2h0ID0gX3RoaXMkcHJvcHM2LmhlaWdodCxcbiAgICAgICAgaWQgPSBfdGhpcyRwcm9wczYuaWQsXG4gICAgICAgIG5vQ29udGVudFJlbmRlcmVyID0gX3RoaXMkcHJvcHM2Lm5vQ29udGVudFJlbmRlcmVyLFxuICAgICAgICByb2xlID0gX3RoaXMkcHJvcHM2LnJvbGUsXG4gICAgICAgIHN0eWxlID0gX3RoaXMkcHJvcHM2LnN0eWxlLFxuICAgICAgICB0YWJJbmRleCA9IF90aGlzJHByb3BzNi50YWJJbmRleCxcbiAgICAgICAgd2lkdGggPSBfdGhpcyRwcm9wczYud2lkdGg7XG4gICAgICB2YXIgX3RoaXMkc3RhdGUyID0gdGhpcy5zdGF0ZSxcbiAgICAgICAgaW5zdGFuY2VQcm9wcyA9IF90aGlzJHN0YXRlMi5pbnN0YW5jZVByb3BzLFxuICAgICAgICBuZWVkVG9SZXNldFN0eWxlQ2FjaGUgPSBfdGhpcyRzdGF0ZTIubmVlZFRvUmVzZXRTdHlsZUNhY2hlO1xuICAgICAgdmFyIGlzU2Nyb2xsaW5nID0gdGhpcy5faXNTY3JvbGxpbmcoKTtcbiAgICAgIHZhciBncmlkU3R5bGUgLyo6IE9iamVjdCovID0ge1xuICAgICAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICAgICAgZGlyZWN0aW9uOiAnbHRyJyxcbiAgICAgICAgaGVpZ2h0OiBhdXRvSGVpZ2h0ID8gJ2F1dG8nIDogaGVpZ2h0LFxuICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgICAgd2lkdGg6IGF1dG9XaWR0aCA/ICdhdXRvJyA6IHdpZHRoLFxuICAgICAgICBXZWJraXRPdmVyZmxvd1Njcm9sbGluZzogJ3RvdWNoJyxcbiAgICAgICAgd2lsbENoYW5nZTogJ3RyYW5zZm9ybSdcbiAgICAgIH07XG4gICAgICBpZiAobmVlZFRvUmVzZXRTdHlsZUNhY2hlKSB7XG4gICAgICAgIHRoaXMuX3N0eWxlQ2FjaGUgPSB7fTtcbiAgICAgIH1cblxuICAgICAgLy8gY2FsY3VsYXRlIF9zdHlsZUNhY2hlIGhlcmVcbiAgICAgIC8vIGlmIHN0YXRlLmlzU2Nyb2xsaW5nIChub3QgZnJvbSBfaXNTY3JvbGxpbmcpIHRoZW4gcmVzZXRcbiAgICAgIGlmICghdGhpcy5zdGF0ZS5pc1Njcm9sbGluZykge1xuICAgICAgICB0aGlzLl9yZXNldFN0eWxlQ2FjaGUoKTtcbiAgICAgIH1cblxuICAgICAgLy8gY2FsY3VsYXRlIGNoaWxkcmVuIHRvIHJlbmRlciBoZXJlXG4gICAgICB0aGlzLl9jYWxjdWxhdGVDaGlsZHJlblRvUmVuZGVyKHRoaXMucHJvcHMsIHRoaXMuc3RhdGUpO1xuICAgICAgdmFyIHRvdGFsQ29sdW1uc1dpZHRoID0gaW5zdGFuY2VQcm9wcy5jb2x1bW5TaXplQW5kUG9zaXRpb25NYW5hZ2VyLmdldFRvdGFsU2l6ZSgpO1xuICAgICAgdmFyIHRvdGFsUm93c0hlaWdodCA9IGluc3RhbmNlUHJvcHMucm93U2l6ZUFuZFBvc2l0aW9uTWFuYWdlci5nZXRUb3RhbFNpemUoKTtcblxuICAgICAgLy8gRm9yY2UgYnJvd3NlciB0byBoaWRlIHNjcm9sbGJhcnMgd2hlbiB3ZSBrbm93IHRoZXkgYXJlbid0IG5lY2Vzc2FyeS5cbiAgICAgIC8vIE90aGVyd2lzZSBvbmNlIHNjcm9sbGJhcnMgYXBwZWFyIHRoZXkgbWF5IG5vdCBkaXNhcHBlYXIgYWdhaW4uXG4gICAgICAvLyBGb3IgbW9yZSBpbmZvIHNlZSBpc3N1ZSAjMTE2XG4gICAgICB2YXIgdmVydGljYWxTY3JvbGxCYXJTaXplID0gdG90YWxSb3dzSGVpZ2h0ID4gaGVpZ2h0ID8gaW5zdGFuY2VQcm9wcy5zY3JvbGxiYXJTaXplIDogMDtcbiAgICAgIHZhciBob3Jpem9udGFsU2Nyb2xsQmFyU2l6ZSA9IHRvdGFsQ29sdW1uc1dpZHRoID4gd2lkdGggPyBpbnN0YW5jZVByb3BzLnNjcm9sbGJhclNpemUgOiAwO1xuICAgICAgaWYgKGhvcml6b250YWxTY3JvbGxCYXJTaXplICE9PSB0aGlzLl9ob3Jpem9udGFsU2Nyb2xsQmFyU2l6ZSB8fCB2ZXJ0aWNhbFNjcm9sbEJhclNpemUgIT09IHRoaXMuX3ZlcnRpY2FsU2Nyb2xsQmFyU2l6ZSkge1xuICAgICAgICB0aGlzLl9ob3Jpem9udGFsU2Nyb2xsQmFyU2l6ZSA9IGhvcml6b250YWxTY3JvbGxCYXJTaXplO1xuICAgICAgICB0aGlzLl92ZXJ0aWNhbFNjcm9sbEJhclNpemUgPSB2ZXJ0aWNhbFNjcm9sbEJhclNpemU7XG4gICAgICAgIHRoaXMuX3Njcm9sbGJhclByZXNlbmNlQ2hhbmdlZCA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIC8vIEFsc28gZXhwbGljaXRseSBpbml0IHN0eWxlcyB0byAnYXV0bycgaWYgc2Nyb2xsYmFycyBhcmUgcmVxdWlyZWQuXG4gICAgICAvLyBUaGlzIHdvcmtzIGFyb3VuZCBhbiBvYnNjdXJlIGVkZ2UgY2FzZSB3aGVyZSBleHRlcm5hbCBDU1Mgc3R5bGVzIGhhdmUgbm90IHlldCBiZWVuIGxvYWRlZCxcbiAgICAgIC8vIEJ1dCBhbiBpbml0aWFsIHNjcm9sbCBpbmRleCBvZiBvZmZzZXQgaXMgc2V0IGFzIGFuIGV4dGVybmFsIHByb3AuXG4gICAgICAvLyBXaXRob3V0IHRoaXMgc3R5bGUsIEdyaWQgd291bGQgcmVuZGVyIHRoZSBjb3JyZWN0IHJhbmdlIG9mIGNlbGxzIGJ1dCB3b3VsZCBOT1QgdXBkYXRlIGl0cyBpbnRlcm5hbCBvZmZzZXQuXG4gICAgICAvLyBUaGlzIHdhcyBvcmlnaW5hbGx5IHJlcG9ydGVkIHZpYSBjbGF1ZGVyaWMvcmVhY3QtaW5maW5pdGUtY2FsZW5kYXIvaXNzdWVzLzIzXG4gICAgICBncmlkU3R5bGUub3ZlcmZsb3dYID0gdG90YWxDb2x1bW5zV2lkdGggKyB2ZXJ0aWNhbFNjcm9sbEJhclNpemUgPD0gd2lkdGggPyAnaGlkZGVuJyA6ICdhdXRvJztcbiAgICAgIGdyaWRTdHlsZS5vdmVyZmxvd1kgPSB0b3RhbFJvd3NIZWlnaHQgKyBob3Jpem9udGFsU2Nyb2xsQmFyU2l6ZSA8PSBoZWlnaHQgPyAnaGlkZGVuJyA6ICdhdXRvJztcbiAgICAgIHZhciBjaGlsZHJlblRvRGlzcGxheSA9IHRoaXMuX2NoaWxkcmVuVG9EaXNwbGF5O1xuICAgICAgdmFyIHNob3dOb0NvbnRlbnRSZW5kZXJlciA9IGNoaWxkcmVuVG9EaXNwbGF5Lmxlbmd0aCA9PT0gMCAmJiBoZWlnaHQgPiAwICYmIHdpZHRoID4gMDtcbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCBfZXh0ZW5kcyh7XG4gICAgICAgIHJlZjogdGhpcy5fc2V0U2Nyb2xsaW5nQ29udGFpbmVyUmVmXG4gICAgICB9LCBjb250YWluZXJQcm9wcywge1xuICAgICAgICBcImFyaWEtbGFiZWxcIjogdGhpcy5wcm9wc1snYXJpYS1sYWJlbCddLFxuICAgICAgICBcImFyaWEtcmVhZG9ubHlcIjogdGhpcy5wcm9wc1snYXJpYS1yZWFkb25seSddLFxuICAgICAgICBjbGFzc05hbWU6IGNsc3goJ1JlYWN0VmlydHVhbGl6ZWRfX0dyaWQnLCBjbGFzc05hbWUpLFxuICAgICAgICBpZDogaWQsXG4gICAgICAgIG9uU2Nyb2xsOiB0aGlzLl9vblNjcm9sbCxcbiAgICAgICAgcm9sZTogcm9sZSxcbiAgICAgICAgc3R5bGU6IF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgZ3JpZFN0eWxlKSwgc3R5bGUpLFxuICAgICAgICB0YWJJbmRleDogdGFiSW5kZXhcbiAgICAgIH0pLCBjaGlsZHJlblRvRGlzcGxheS5sZW5ndGggPiAwICYmIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBcIlJlYWN0VmlydHVhbGl6ZWRfX0dyaWRfX2lubmVyU2Nyb2xsQ29udGFpbmVyXCIsXG4gICAgICAgIHJvbGU6IGNvbnRhaW5lclJvbGUsXG4gICAgICAgIHN0eWxlOiBfb2JqZWN0U3ByZWFkKHtcbiAgICAgICAgICB3aWR0aDogYXV0b0NvbnRhaW5lcldpZHRoID8gJ2F1dG8nIDogdG90YWxDb2x1bW5zV2lkdGgsXG4gICAgICAgICAgaGVpZ2h0OiB0b3RhbFJvd3NIZWlnaHQsXG4gICAgICAgICAgbWF4V2lkdGg6IHRvdGFsQ29sdW1uc1dpZHRoLFxuICAgICAgICAgIG1heEhlaWdodDogdG90YWxSb3dzSGVpZ2h0LFxuICAgICAgICAgIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgICAgICAgICBwb2ludGVyRXZlbnRzOiBpc1Njcm9sbGluZyA/ICdub25lJyA6ICcnLFxuICAgICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnXG4gICAgICAgIH0sIGNvbnRhaW5lclN0eWxlKVxuICAgICAgfSwgY2hpbGRyZW5Ub0Rpc3BsYXkpLCBzaG93Tm9Db250ZW50UmVuZGVyZXIgJiYgbm9Db250ZW50UmVuZGVyZXIoKSk7XG4gICAgfVxuXG4gICAgLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBIZWxwZXIgbWV0aG9kcyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG4gIH0sIHtcbiAgICBrZXk6IFwiX2NhbGN1bGF0ZUNoaWxkcmVuVG9SZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2NhbGN1bGF0ZUNoaWxkcmVuVG9SZW5kZXIoKSB7XG4gICAgICB2YXIgcHJvcHMgLyo6IFByb3BzKi8gPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHRoaXMucHJvcHM7XG4gICAgICB2YXIgc3RhdGUgLyo6IFN0YXRlKi8gPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHRoaXMuc3RhdGU7XG4gICAgICB2YXIgY2VsbFJlbmRlcmVyID0gcHJvcHMuY2VsbFJlbmRlcmVyLFxuICAgICAgICBjZWxsUmFuZ2VSZW5kZXJlciA9IHByb3BzLmNlbGxSYW5nZVJlbmRlcmVyLFxuICAgICAgICBjb2x1bW5Db3VudCA9IHByb3BzLmNvbHVtbkNvdW50LFxuICAgICAgICBkZWZlcnJlZE1lYXN1cmVtZW50Q2FjaGUgPSBwcm9wcy5kZWZlcnJlZE1lYXN1cmVtZW50Q2FjaGUsXG4gICAgICAgIGhlaWdodCA9IHByb3BzLmhlaWdodCxcbiAgICAgICAgb3ZlcnNjYW5Db2x1bW5Db3VudCA9IHByb3BzLm92ZXJzY2FuQ29sdW1uQ291bnQsXG4gICAgICAgIG92ZXJzY2FuSW5kaWNlc0dldHRlciA9IHByb3BzLm92ZXJzY2FuSW5kaWNlc0dldHRlcixcbiAgICAgICAgb3ZlcnNjYW5Sb3dDb3VudCA9IHByb3BzLm92ZXJzY2FuUm93Q291bnQsXG4gICAgICAgIHJvd0NvdW50ID0gcHJvcHMucm93Q291bnQsXG4gICAgICAgIHdpZHRoID0gcHJvcHMud2lkdGgsXG4gICAgICAgIGlzU2Nyb2xsaW5nT3B0T3V0ID0gcHJvcHMuaXNTY3JvbGxpbmdPcHRPdXQ7XG4gICAgICB2YXIgc2Nyb2xsRGlyZWN0aW9uSG9yaXpvbnRhbCA9IHN0YXRlLnNjcm9sbERpcmVjdGlvbkhvcml6b250YWwsXG4gICAgICAgIHNjcm9sbERpcmVjdGlvblZlcnRpY2FsID0gc3RhdGUuc2Nyb2xsRGlyZWN0aW9uVmVydGljYWwsXG4gICAgICAgIGluc3RhbmNlUHJvcHMgPSBzdGF0ZS5pbnN0YW5jZVByb3BzO1xuICAgICAgdmFyIHNjcm9sbFRvcCA9IHRoaXMuX2luaXRpYWxTY3JvbGxUb3AgPiAwID8gdGhpcy5faW5pdGlhbFNjcm9sbFRvcCA6IHN0YXRlLnNjcm9sbFRvcDtcbiAgICAgIHZhciBzY3JvbGxMZWZ0ID0gdGhpcy5faW5pdGlhbFNjcm9sbExlZnQgPiAwID8gdGhpcy5faW5pdGlhbFNjcm9sbExlZnQgOiBzdGF0ZS5zY3JvbGxMZWZ0O1xuICAgICAgdmFyIGlzU2Nyb2xsaW5nID0gdGhpcy5faXNTY3JvbGxpbmcocHJvcHMsIHN0YXRlKTtcbiAgICAgIHRoaXMuX2NoaWxkcmVuVG9EaXNwbGF5ID0gW107XG5cbiAgICAgIC8vIFJlbmRlciBvbmx5IGVub3VnaCBjb2x1bW5zIGFuZCByb3dzIHRvIGNvdmVyIHRoZSB2aXNpYmxlIGFyZWEgb2YgdGhlIGdyaWQuXG4gICAgICBpZiAoaGVpZ2h0ID4gMCAmJiB3aWR0aCA+IDApIHtcbiAgICAgICAgdmFyIHZpc2libGVDb2x1bW5JbmRpY2VzID0gaW5zdGFuY2VQcm9wcy5jb2x1bW5TaXplQW5kUG9zaXRpb25NYW5hZ2VyLmdldFZpc2libGVDZWxsUmFuZ2Uoe1xuICAgICAgICAgIGNvbnRhaW5lclNpemU6IHdpZHRoLFxuICAgICAgICAgIG9mZnNldDogc2Nyb2xsTGVmdFxuICAgICAgICB9KTtcbiAgICAgICAgdmFyIHZpc2libGVSb3dJbmRpY2VzID0gaW5zdGFuY2VQcm9wcy5yb3dTaXplQW5kUG9zaXRpb25NYW5hZ2VyLmdldFZpc2libGVDZWxsUmFuZ2Uoe1xuICAgICAgICAgIGNvbnRhaW5lclNpemU6IGhlaWdodCxcbiAgICAgICAgICBvZmZzZXQ6IHNjcm9sbFRvcFxuICAgICAgICB9KTtcbiAgICAgICAgdmFyIGhvcml6b250YWxPZmZzZXRBZGp1c3RtZW50ID0gaW5zdGFuY2VQcm9wcy5jb2x1bW5TaXplQW5kUG9zaXRpb25NYW5hZ2VyLmdldE9mZnNldEFkanVzdG1lbnQoe1xuICAgICAgICAgIGNvbnRhaW5lclNpemU6IHdpZHRoLFxuICAgICAgICAgIG9mZnNldDogc2Nyb2xsTGVmdFxuICAgICAgICB9KTtcbiAgICAgICAgdmFyIHZlcnRpY2FsT2Zmc2V0QWRqdXN0bWVudCA9IGluc3RhbmNlUHJvcHMucm93U2l6ZUFuZFBvc2l0aW9uTWFuYWdlci5nZXRPZmZzZXRBZGp1c3RtZW50KHtcbiAgICAgICAgICBjb250YWluZXJTaXplOiBoZWlnaHQsXG4gICAgICAgICAgb2Zmc2V0OiBzY3JvbGxUb3BcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gU3RvcmUgZm9yIF9pbnZva2VPbkdyaWRSZW5kZXJlZEhlbHBlcigpXG4gICAgICAgIHRoaXMuX3JlbmRlcmVkQ29sdW1uU3RhcnRJbmRleCA9IHZpc2libGVDb2x1bW5JbmRpY2VzLnN0YXJ0O1xuICAgICAgICB0aGlzLl9yZW5kZXJlZENvbHVtblN0b3BJbmRleCA9IHZpc2libGVDb2x1bW5JbmRpY2VzLnN0b3A7XG4gICAgICAgIHRoaXMuX3JlbmRlcmVkUm93U3RhcnRJbmRleCA9IHZpc2libGVSb3dJbmRpY2VzLnN0YXJ0O1xuICAgICAgICB0aGlzLl9yZW5kZXJlZFJvd1N0b3BJbmRleCA9IHZpc2libGVSb3dJbmRpY2VzLnN0b3A7XG4gICAgICAgIHZhciBvdmVyc2NhbkNvbHVtbkluZGljZXMgPSBvdmVyc2NhbkluZGljZXNHZXR0ZXIoe1xuICAgICAgICAgIGRpcmVjdGlvbjogJ2hvcml6b250YWwnLFxuICAgICAgICAgIGNlbGxDb3VudDogY29sdW1uQ291bnQsXG4gICAgICAgICAgb3ZlcnNjYW5DZWxsc0NvdW50OiBvdmVyc2NhbkNvbHVtbkNvdW50LFxuICAgICAgICAgIHNjcm9sbERpcmVjdGlvbjogc2Nyb2xsRGlyZWN0aW9uSG9yaXpvbnRhbCxcbiAgICAgICAgICBzdGFydEluZGV4OiB0eXBlb2YgdmlzaWJsZUNvbHVtbkluZGljZXMuc3RhcnQgPT09ICdudW1iZXInID8gdmlzaWJsZUNvbHVtbkluZGljZXMuc3RhcnQgOiAwLFxuICAgICAgICAgIHN0b3BJbmRleDogdHlwZW9mIHZpc2libGVDb2x1bW5JbmRpY2VzLnN0b3AgPT09ICdudW1iZXInID8gdmlzaWJsZUNvbHVtbkluZGljZXMuc3RvcCA6IC0xXG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgb3ZlcnNjYW5Sb3dJbmRpY2VzID0gb3ZlcnNjYW5JbmRpY2VzR2V0dGVyKHtcbiAgICAgICAgICBkaXJlY3Rpb246ICd2ZXJ0aWNhbCcsXG4gICAgICAgICAgY2VsbENvdW50OiByb3dDb3VudCxcbiAgICAgICAgICBvdmVyc2NhbkNlbGxzQ291bnQ6IG92ZXJzY2FuUm93Q291bnQsXG4gICAgICAgICAgc2Nyb2xsRGlyZWN0aW9uOiBzY3JvbGxEaXJlY3Rpb25WZXJ0aWNhbCxcbiAgICAgICAgICBzdGFydEluZGV4OiB0eXBlb2YgdmlzaWJsZVJvd0luZGljZXMuc3RhcnQgPT09ICdudW1iZXInID8gdmlzaWJsZVJvd0luZGljZXMuc3RhcnQgOiAwLFxuICAgICAgICAgIHN0b3BJbmRleDogdHlwZW9mIHZpc2libGVSb3dJbmRpY2VzLnN0b3AgPT09ICdudW1iZXInID8gdmlzaWJsZVJvd0luZGljZXMuc3RvcCA6IC0xXG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIFN0b3JlIGZvciBfaW52b2tlT25HcmlkUmVuZGVyZWRIZWxwZXIoKVxuICAgICAgICB2YXIgY29sdW1uU3RhcnRJbmRleCA9IG92ZXJzY2FuQ29sdW1uSW5kaWNlcy5vdmVyc2NhblN0YXJ0SW5kZXg7XG4gICAgICAgIHZhciBjb2x1bW5TdG9wSW5kZXggPSBvdmVyc2NhbkNvbHVtbkluZGljZXMub3ZlcnNjYW5TdG9wSW5kZXg7XG4gICAgICAgIHZhciByb3dTdGFydEluZGV4ID0gb3ZlcnNjYW5Sb3dJbmRpY2VzLm92ZXJzY2FuU3RhcnRJbmRleDtcbiAgICAgICAgdmFyIHJvd1N0b3BJbmRleCA9IG92ZXJzY2FuUm93SW5kaWNlcy5vdmVyc2NhblN0b3BJbmRleDtcblxuICAgICAgICAvLyBBZHZhbmNlZCB1c2UtY2FzZXMgKGVnIENlbGxNZWFzdXJlcikgcmVxdWlyZSBiYXRjaGVkIG1lYXN1cmVtZW50cyB0byBkZXRlcm1pbmUgYWNjdXJhdGUgc2l6ZXMuXG4gICAgICAgIGlmIChkZWZlcnJlZE1lYXN1cmVtZW50Q2FjaGUpIHtcbiAgICAgICAgICAvLyBJZiByb3dzIGhhdmUgYSBkeW5hbWljIGhlaWdodCwgc2NhbiB0aGUgcm93cyB3ZSBhcmUgYWJvdXQgdG8gcmVuZGVyLlxuICAgICAgICAgIC8vIElmIGFueSBoYXZlIG5vdCB5ZXQgYmVlbiBtZWFzdXJlZCwgdGhlbiB3ZSBuZWVkIHRvIHJlbmRlciBhbGwgY29sdW1ucyBpbml0aWFsbHksXG4gICAgICAgICAgLy8gQmVjYXVzZSB0aGUgaGVpZ2h0IG9mIHRoZSByb3cgaXMgZXF1YWwgdG8gdGhlIHRhbGxlc3QgY2VsbCB3aXRoaW4gdGhhdCByb3csXG4gICAgICAgICAgLy8gKEFuZCBzbyB3ZSBjYW4ndCBrbm93IHRoZSBoZWlnaHQgd2l0aG91dCBtZWFzdXJpbmcgYWxsIGNvbHVtbi1jZWxscyBmaXJzdCkuXG4gICAgICAgICAgaWYgKCFkZWZlcnJlZE1lYXN1cmVtZW50Q2FjaGUuaGFzRml4ZWRIZWlnaHQoKSkge1xuICAgICAgICAgICAgZm9yICh2YXIgcm93SW5kZXggPSByb3dTdGFydEluZGV4OyByb3dJbmRleCA8PSByb3dTdG9wSW5kZXg7IHJvd0luZGV4KyspIHtcbiAgICAgICAgICAgICAgaWYgKCFkZWZlcnJlZE1lYXN1cmVtZW50Q2FjaGUuaGFzKHJvd0luZGV4LCAwKSkge1xuICAgICAgICAgICAgICAgIGNvbHVtblN0YXJ0SW5kZXggPSAwO1xuICAgICAgICAgICAgICAgIGNvbHVtblN0b3BJbmRleCA9IGNvbHVtbkNvdW50IC0gMTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIElmIGNvbHVtbnMgaGF2ZSBhIGR5bmFtaWMgd2lkdGgsIHNjYW4gdGhlIGNvbHVtbnMgd2UgYXJlIGFib3V0IHRvIHJlbmRlci5cbiAgICAgICAgICAvLyBJZiBhbnkgaGF2ZSBub3QgeWV0IGJlZW4gbWVhc3VyZWQsIHRoZW4gd2UgbmVlZCB0byByZW5kZXIgYWxsIHJvd3MgaW5pdGlhbGx5LFxuICAgICAgICAgIC8vIEJlY2F1c2UgdGhlIHdpZHRoIG9mIHRoZSBjb2x1bW4gaXMgZXF1YWwgdG8gdGhlIHdpZGVzdCBjZWxsIHdpdGhpbiB0aGF0IGNvbHVtbixcbiAgICAgICAgICAvLyAoQW5kIHNvIHdlIGNhbid0IGtub3cgdGhlIHdpZHRoIHdpdGhvdXQgbWVhc3VyaW5nIGFsbCByb3ctY2VsbHMgZmlyc3QpLlxuICAgICAgICAgIGlmICghZGVmZXJyZWRNZWFzdXJlbWVudENhY2hlLmhhc0ZpeGVkV2lkdGgoKSkge1xuICAgICAgICAgICAgZm9yICh2YXIgY29sdW1uSW5kZXggPSBjb2x1bW5TdGFydEluZGV4OyBjb2x1bW5JbmRleCA8PSBjb2x1bW5TdG9wSW5kZXg7IGNvbHVtbkluZGV4KyspIHtcbiAgICAgICAgICAgICAgaWYgKCFkZWZlcnJlZE1lYXN1cmVtZW50Q2FjaGUuaGFzKDAsIGNvbHVtbkluZGV4KSkge1xuICAgICAgICAgICAgICAgIHJvd1N0YXJ0SW5kZXggPSAwO1xuICAgICAgICAgICAgICAgIHJvd1N0b3BJbmRleCA9IHJvd0NvdW50IC0gMTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9jaGlsZHJlblRvRGlzcGxheSA9IGNlbGxSYW5nZVJlbmRlcmVyKHtcbiAgICAgICAgICBjZWxsQ2FjaGU6IHRoaXMuX2NlbGxDYWNoZSxcbiAgICAgICAgICBjZWxsUmVuZGVyZXI6IGNlbGxSZW5kZXJlcixcbiAgICAgICAgICBjb2x1bW5TaXplQW5kUG9zaXRpb25NYW5hZ2VyOiBpbnN0YW5jZVByb3BzLmNvbHVtblNpemVBbmRQb3NpdGlvbk1hbmFnZXIsXG4gICAgICAgICAgY29sdW1uU3RhcnRJbmRleDogY29sdW1uU3RhcnRJbmRleCxcbiAgICAgICAgICBjb2x1bW5TdG9wSW5kZXg6IGNvbHVtblN0b3BJbmRleCxcbiAgICAgICAgICBkZWZlcnJlZE1lYXN1cmVtZW50Q2FjaGU6IGRlZmVycmVkTWVhc3VyZW1lbnRDYWNoZSxcbiAgICAgICAgICBob3Jpem9udGFsT2Zmc2V0QWRqdXN0bWVudDogaG9yaXpvbnRhbE9mZnNldEFkanVzdG1lbnQsXG4gICAgICAgICAgaXNTY3JvbGxpbmc6IGlzU2Nyb2xsaW5nLFxuICAgICAgICAgIGlzU2Nyb2xsaW5nT3B0T3V0OiBpc1Njcm9sbGluZ09wdE91dCxcbiAgICAgICAgICBwYXJlbnQ6IHRoaXMsXG4gICAgICAgICAgcm93U2l6ZUFuZFBvc2l0aW9uTWFuYWdlcjogaW5zdGFuY2VQcm9wcy5yb3dTaXplQW5kUG9zaXRpb25NYW5hZ2VyLFxuICAgICAgICAgIHJvd1N0YXJ0SW5kZXg6IHJvd1N0YXJ0SW5kZXgsXG4gICAgICAgICAgcm93U3RvcEluZGV4OiByb3dTdG9wSW5kZXgsXG4gICAgICAgICAgc2Nyb2xsTGVmdDogc2Nyb2xsTGVmdCxcbiAgICAgICAgICBzY3JvbGxUb3A6IHNjcm9sbFRvcCxcbiAgICAgICAgICBzdHlsZUNhY2hlOiB0aGlzLl9zdHlsZUNhY2hlLFxuICAgICAgICAgIHZlcnRpY2FsT2Zmc2V0QWRqdXN0bWVudDogdmVydGljYWxPZmZzZXRBZGp1c3RtZW50LFxuICAgICAgICAgIHZpc2libGVDb2x1bW5JbmRpY2VzOiB2aXNpYmxlQ29sdW1uSW5kaWNlcyxcbiAgICAgICAgICB2aXNpYmxlUm93SW5kaWNlczogdmlzaWJsZVJvd0luZGljZXNcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gdXBkYXRlIHRoZSBpbmRpY2VzXG4gICAgICAgIHRoaXMuX2NvbHVtblN0YXJ0SW5kZXggPSBjb2x1bW5TdGFydEluZGV4O1xuICAgICAgICB0aGlzLl9jb2x1bW5TdG9wSW5kZXggPSBjb2x1bW5TdG9wSW5kZXg7XG4gICAgICAgIHRoaXMuX3Jvd1N0YXJ0SW5kZXggPSByb3dTdGFydEluZGV4O1xuICAgICAgICB0aGlzLl9yb3dTdG9wSW5kZXggPSByb3dTdG9wSW5kZXg7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyBhbiA6aXNTY3JvbGxpbmcgZmxhZyBmb3IgYSBzbWFsbCB3aW5kb3cgb2YgdGltZS5cbiAgICAgKiBUaGlzIGZsYWcgaXMgdXNlZCB0byBkaXNhYmxlIHBvaW50ZXIgZXZlbnRzIG9uIHRoZSBzY3JvbGxhYmxlIHBvcnRpb24gb2YgdGhlIEdyaWQuXG4gICAgICogVGhpcyBwcmV2ZW50cyBqZXJreS9zdHV0dGVyeSBtb3VzZS13aGVlbCBzY3JvbGxpbmcuXG4gICAgICovXG4gIH0sIHtcbiAgICBrZXk6IFwiX2RlYm91bmNlU2Nyb2xsRW5kZWRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2RlYm91bmNlU2Nyb2xsRW5kZWQoKSB7XG4gICAgICB2YXIgc2Nyb2xsaW5nUmVzZXRUaW1lSW50ZXJ2YWwgPSB0aGlzLnByb3BzLnNjcm9sbGluZ1Jlc2V0VGltZUludGVydmFsO1xuICAgICAgaWYgKHRoaXMuX2Rpc2FibGVQb2ludGVyRXZlbnRzVGltZW91dElkKSB7XG4gICAgICAgIGNhbmNlbEFuaW1hdGlvblRpbWVvdXQodGhpcy5fZGlzYWJsZVBvaW50ZXJFdmVudHNUaW1lb3V0SWQpO1xuICAgICAgfVxuICAgICAgdGhpcy5fZGlzYWJsZVBvaW50ZXJFdmVudHNUaW1lb3V0SWQgPSByZXF1ZXN0QW5pbWF0aW9uVGltZW91dCh0aGlzLl9kZWJvdW5jZVNjcm9sbEVuZGVkQ2FsbGJhY2ssIHNjcm9sbGluZ1Jlc2V0VGltZUludGVydmFsKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiX2hhbmRsZUludmFsaWRhdGVkR3JpZFNpemVcIixcbiAgICB2YWx1ZTpcbiAgICAvKipcbiAgICAgKiBDaGVjayBmb3IgYmF0Y2hlZCBDZWxsTWVhc3VyZXIgc2l6ZSBpbnZhbGlkYXRpb25zLlxuICAgICAqIFRoaXMgd2lsbCBvY2N1ciB0aGUgZmlyc3QgdGltZSBvbmUgb3IgbW9yZSBwcmV2aW91c2x5IHVubWVhc3VyZWQgY2VsbHMgYXJlIHJlbmRlcmVkLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIF9oYW5kbGVJbnZhbGlkYXRlZEdyaWRTaXplKCkge1xuICAgICAgaWYgKHR5cGVvZiB0aGlzLl9kZWZlcnJlZEludmFsaWRhdGVDb2x1bW5JbmRleCA9PT0gJ251bWJlcicgJiYgdHlwZW9mIHRoaXMuX2RlZmVycmVkSW52YWxpZGF0ZVJvd0luZGV4ID09PSAnbnVtYmVyJykge1xuICAgICAgICB2YXIgY29sdW1uSW5kZXggPSB0aGlzLl9kZWZlcnJlZEludmFsaWRhdGVDb2x1bW5JbmRleDtcbiAgICAgICAgdmFyIHJvd0luZGV4ID0gdGhpcy5fZGVmZXJyZWRJbnZhbGlkYXRlUm93SW5kZXg7XG4gICAgICAgIHRoaXMuX2RlZmVycmVkSW52YWxpZGF0ZUNvbHVtbkluZGV4ID0gbnVsbDtcbiAgICAgICAgdGhpcy5fZGVmZXJyZWRJbnZhbGlkYXRlUm93SW5kZXggPSBudWxsO1xuICAgICAgICB0aGlzLnJlY29tcHV0ZUdyaWRTaXplKHtcbiAgICAgICAgICBjb2x1bW5JbmRleDogY29sdW1uSW5kZXgsXG4gICAgICAgICAgcm93SW5kZXg6IHJvd0luZGV4XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJfaW52b2tlT25TY3JvbGxNZW1vaXplclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfaW52b2tlT25TY3JvbGxNZW1vaXplcihfcmVmNiAvKjo6ICovKSB7XG4gICAgICB2YXIgX3RoaXMzID0gdGhpcztcbiAgICAgIHZhciBzY3JvbGxMZWZ0ID0gX3JlZjYgLyo6OiAqLy5zY3JvbGxMZWZ0LFxuICAgICAgICBzY3JvbGxUb3AgPSBfcmVmNiAvKjo6ICovLnNjcm9sbFRvcCxcbiAgICAgICAgdG90YWxDb2x1bW5zV2lkdGggPSBfcmVmNiAvKjo6ICovLnRvdGFsQ29sdW1uc1dpZHRoLFxuICAgICAgICB0b3RhbFJvd3NIZWlnaHQgPSBfcmVmNiAvKjo6ICovLnRvdGFsUm93c0hlaWdodDtcbiAgICAgIHRoaXMuX29uU2Nyb2xsTWVtb2l6ZXIoe1xuICAgICAgICBjYWxsYmFjazogZnVuY3Rpb24gY2FsbGJhY2soX3JlZjcpIHtcbiAgICAgICAgICB2YXIgc2Nyb2xsTGVmdCA9IF9yZWY3LnNjcm9sbExlZnQsXG4gICAgICAgICAgICBzY3JvbGxUb3AgPSBfcmVmNy5zY3JvbGxUb3A7XG4gICAgICAgICAgdmFyIF90aGlzMyRwcm9wcyA9IF90aGlzMy5wcm9wcyxcbiAgICAgICAgICAgIGhlaWdodCA9IF90aGlzMyRwcm9wcy5oZWlnaHQsXG4gICAgICAgICAgICBvblNjcm9sbCA9IF90aGlzMyRwcm9wcy5vblNjcm9sbCxcbiAgICAgICAgICAgIHdpZHRoID0gX3RoaXMzJHByb3BzLndpZHRoO1xuICAgICAgICAgIG9uU2Nyb2xsKHtcbiAgICAgICAgICAgIGNsaWVudEhlaWdodDogaGVpZ2h0LFxuICAgICAgICAgICAgY2xpZW50V2lkdGg6IHdpZHRoLFxuICAgICAgICAgICAgc2Nyb2xsSGVpZ2h0OiB0b3RhbFJvd3NIZWlnaHQsXG4gICAgICAgICAgICBzY3JvbGxMZWZ0OiBzY3JvbGxMZWZ0LFxuICAgICAgICAgICAgc2Nyb2xsVG9wOiBzY3JvbGxUb3AsXG4gICAgICAgICAgICBzY3JvbGxXaWR0aDogdG90YWxDb2x1bW5zV2lkdGhcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgaW5kaWNlczoge1xuICAgICAgICAgIHNjcm9sbExlZnQ6IHNjcm9sbExlZnQsXG4gICAgICAgICAgc2Nyb2xsVG9wOiBzY3JvbGxUb3BcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIl9pc1Njcm9sbGluZ1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfaXNTY3JvbGxpbmcoKSAvKjogYm9vbGVhbiove1xuICAgICAgdmFyIHByb3BzIC8qOiBQcm9wcyovID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB0aGlzLnByb3BzO1xuICAgICAgdmFyIHN0YXRlIC8qOiBTdGF0ZSovID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB0aGlzLnN0YXRlO1xuICAgICAgLy8gSWYgaXNTY3JvbGxpbmcgaXMgZGVmaW5lZCBpbiBwcm9wcywgdXNlIGl0IHRvIG92ZXJyaWRlIHRoZSB2YWx1ZSBpbiBzdGF0ZVxuICAgICAgLy8gVGhpcyBpcyBhIHBlcmZvcm1hbmNlIG9wdGltaXphdGlvbiBmb3IgV2luZG93U2Nyb2xsZXIgKyBHcmlkXG4gICAgICByZXR1cm4gT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwocHJvcHMsICdpc1Njcm9sbGluZycpID8gQm9vbGVhbihwcm9wcy5pc1Njcm9sbGluZykgOiBCb29sZWFuKHN0YXRlLmlzU2Nyb2xsaW5nKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiX21heWJlQ2FsbE9uU2Nyb2xsYmFyUHJlc2VuY2VDaGFuZ2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX21heWJlQ2FsbE9uU2Nyb2xsYmFyUHJlc2VuY2VDaGFuZ2UoKSB7XG4gICAgICBpZiAodGhpcy5fc2Nyb2xsYmFyUHJlc2VuY2VDaGFuZ2VkKSB7XG4gICAgICAgIHZhciBvblNjcm9sbGJhclByZXNlbmNlQ2hhbmdlID0gdGhpcy5wcm9wcy5vblNjcm9sbGJhclByZXNlbmNlQ2hhbmdlO1xuICAgICAgICB0aGlzLl9zY3JvbGxiYXJQcmVzZW5jZUNoYW5nZWQgPSBmYWxzZTtcbiAgICAgICAgb25TY3JvbGxiYXJQcmVzZW5jZUNoYW5nZSh7XG4gICAgICAgICAgaG9yaXpvbnRhbDogdGhpcy5faG9yaXpvbnRhbFNjcm9sbEJhclNpemUgPiAwLFxuICAgICAgICAgIHNpemU6IHRoaXMuc3RhdGUuaW5zdGFuY2VQcm9wcy5zY3JvbGxiYXJTaXplLFxuICAgICAgICAgIHZlcnRpY2FsOiB0aGlzLl92ZXJ0aWNhbFNjcm9sbEJhclNpemUgPiAwXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzY3JvbGxUb1Bvc2l0aW9uXCIsXG4gICAgdmFsdWU6XG4gICAgLyoqXG4gICAgICogU2Nyb2xsIHRvIHRoZSBzcGVjaWZpZWQgb2Zmc2V0KHMpLlxuICAgICAqIFVzZWZ1bCBmb3IgYW5pbWF0aW5nIHBvc2l0aW9uIGNoYW5nZXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2Nyb2xsVG9Qb3NpdGlvbihfcmVmOCAvKjo6ICovKSB7XG4gICAgICB2YXIgc2Nyb2xsTGVmdCA9IF9yZWY4IC8qOjogKi8uc2Nyb2xsTGVmdCxcbiAgICAgICAgc2Nyb2xsVG9wID0gX3JlZjggLyo6OiAqLy5zY3JvbGxUb3A7XG4gICAgICB2YXIgc3RhdGVVcGRhdGUgPSBHcmlkLl9nZXRTY3JvbGxUb1Bvc2l0aW9uU3RhdGVVcGRhdGUoe1xuICAgICAgICBwcmV2U3RhdGU6IHRoaXMuc3RhdGUsXG4gICAgICAgIHNjcm9sbExlZnQ6IHNjcm9sbExlZnQsXG4gICAgICAgIHNjcm9sbFRvcDogc2Nyb2xsVG9wXG4gICAgICB9KTtcbiAgICAgIGlmIChzdGF0ZVVwZGF0ZSkge1xuICAgICAgICBzdGF0ZVVwZGF0ZS5uZWVkVG9SZXNldFN0eWxlQ2FjaGUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZShzdGF0ZVVwZGF0ZSk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIl9nZXRDYWxjdWxhdGVkU2Nyb2xsTGVmdFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZ2V0Q2FsY3VsYXRlZFNjcm9sbExlZnQoKSB7XG4gICAgICB2YXIgcHJvcHMgLyo6IFByb3BzKi8gPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHRoaXMucHJvcHM7XG4gICAgICB2YXIgc3RhdGUgLyo6IFN0YXRlKi8gPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHRoaXMuc3RhdGU7XG4gICAgICByZXR1cm4gR3JpZC5fZ2V0Q2FsY3VsYXRlZFNjcm9sbExlZnQocHJvcHMsIHN0YXRlKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiX3VwZGF0ZVNjcm9sbExlZnRGb3JTY3JvbGxUb0NvbHVtblwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfdXBkYXRlU2Nyb2xsTGVmdEZvclNjcm9sbFRvQ29sdW1uKCkge1xuICAgICAgdmFyIHByb3BzIC8qOiBQcm9wcyovID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB0aGlzLnByb3BzO1xuICAgICAgdmFyIHN0YXRlIC8qOiBTdGF0ZSovID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB0aGlzLnN0YXRlO1xuICAgICAgdmFyIHN0YXRlVXBkYXRlID0gR3JpZC5fZ2V0U2Nyb2xsTGVmdEZvclNjcm9sbFRvQ29sdW1uU3RhdGVVcGRhdGUocHJvcHMsIHN0YXRlKTtcbiAgICAgIGlmIChzdGF0ZVVwZGF0ZSkge1xuICAgICAgICBzdGF0ZVVwZGF0ZS5uZWVkVG9SZXNldFN0eWxlQ2FjaGUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZShzdGF0ZVVwZGF0ZSk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIl9nZXRDYWxjdWxhdGVkU2Nyb2xsVG9wXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9nZXRDYWxjdWxhdGVkU2Nyb2xsVG9wKCkge1xuICAgICAgdmFyIHByb3BzIC8qOiBQcm9wcyovID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB0aGlzLnByb3BzO1xuICAgICAgdmFyIHN0YXRlIC8qOiBTdGF0ZSovID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB0aGlzLnN0YXRlO1xuICAgICAgcmV0dXJuIEdyaWQuX2dldENhbGN1bGF0ZWRTY3JvbGxUb3AocHJvcHMsIHN0YXRlKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiX3Jlc2V0U3R5bGVDYWNoZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfcmVzZXRTdHlsZUNhY2hlKCkge1xuICAgICAgdmFyIHN0eWxlQ2FjaGUgPSB0aGlzLl9zdHlsZUNhY2hlO1xuICAgICAgdmFyIGNlbGxDYWNoZSA9IHRoaXMuX2NlbGxDYWNoZTtcbiAgICAgIHZhciBpc1Njcm9sbGluZ09wdE91dCA9IHRoaXMucHJvcHMuaXNTY3JvbGxpbmdPcHRPdXQ7XG5cbiAgICAgIC8vIFJlc2V0IGNlbGwgYW5kIHN0eWxlIGNhY2hlcyBvbmNlIHNjcm9sbGluZyBzdG9wcy5cbiAgICAgIC8vIFRoaXMgbWFrZXMgR3JpZCBzaW1wbGVyIHRvIHVzZSAoc2luY2UgY2VsbHMgY29tbW9ubHkgY2hhbmdlKS5cbiAgICAgIC8vIEFuZCBpdCBrZWVwcyB0aGUgY2FjaGVzIGZyb20gZ3Jvd2luZyB0b28gbGFyZ2UuXG4gICAgICAvLyBQZXJmb3JtYW5jZSBpcyBtb3N0IHNlbnNpdGl2ZSB3aGVuIGEgdXNlciBpcyBzY3JvbGxpbmcuXG4gICAgICAvLyBEb24ndCBjbGVhciB2aXNpYmxlIGNlbGxzIGZyb20gY2VsbENhY2hlIGlmIGlzU2Nyb2xsaW5nT3B0T3V0IGlzIHNwZWNpZmllZC5cbiAgICAgIC8vIFRoaXMga2VlcHMgdGhlIGNlbGxDYWNoZSB0byBhIHJlc29uYWJsZSBzaXplLlxuICAgICAgdGhpcy5fY2VsbENhY2hlID0ge307XG4gICAgICB0aGlzLl9zdHlsZUNhY2hlID0ge307XG5cbiAgICAgIC8vIENvcHkgb3ZlciB0aGUgdmlzaWJsZSBjZWxsIHN0eWxlcyBzbyBhdm9pZCB1bm5lY2Vzc2FyeSByZS1yZW5kZXIuXG4gICAgICBmb3IgKHZhciByb3dJbmRleCA9IHRoaXMuX3Jvd1N0YXJ0SW5kZXg7IHJvd0luZGV4IDw9IHRoaXMuX3Jvd1N0b3BJbmRleDsgcm93SW5kZXgrKykge1xuICAgICAgICBmb3IgKHZhciBjb2x1bW5JbmRleCA9IHRoaXMuX2NvbHVtblN0YXJ0SW5kZXg7IGNvbHVtbkluZGV4IDw9IHRoaXMuX2NvbHVtblN0b3BJbmRleDsgY29sdW1uSW5kZXgrKykge1xuICAgICAgICAgIHZhciBrZXkgPSBcIlwiLmNvbmNhdChyb3dJbmRleCwgXCItXCIpLmNvbmNhdChjb2x1bW5JbmRleCk7XG4gICAgICAgICAgdGhpcy5fc3R5bGVDYWNoZVtrZXldID0gc3R5bGVDYWNoZVtrZXldO1xuICAgICAgICAgIGlmIChpc1Njcm9sbGluZ09wdE91dCkge1xuICAgICAgICAgICAgdGhpcy5fY2VsbENhY2hlW2tleV0gPSBjZWxsQ2FjaGVba2V5XTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiX3VwZGF0ZVNjcm9sbFRvcEZvclNjcm9sbFRvUm93XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF91cGRhdGVTY3JvbGxUb3BGb3JTY3JvbGxUb1JvdygpIHtcbiAgICAgIHZhciBwcm9wcyAvKjogUHJvcHMqLyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogdGhpcy5wcm9wcztcbiAgICAgIHZhciBzdGF0ZSAvKjogU3RhdGUqLyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogdGhpcy5zdGF0ZTtcbiAgICAgIHZhciBzdGF0ZVVwZGF0ZSA9IEdyaWQuX2dldFNjcm9sbFRvcEZvclNjcm9sbFRvUm93U3RhdGVVcGRhdGUocHJvcHMsIHN0YXRlKTtcbiAgICAgIGlmIChzdGF0ZVVwZGF0ZSkge1xuICAgICAgICBzdGF0ZVVwZGF0ZS5uZWVkVG9SZXNldFN0eWxlQ2FjaGUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZShzdGF0ZVVwZGF0ZSk7XG4gICAgICB9XG4gICAgfVxuICB9XSwgW3tcbiAgICBrZXk6IFwiZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyhuZXh0UHJvcHMgLyo6IFByb3BzKi8sIHByZXZTdGF0ZSAvKjogU3RhdGUqLykgLyo6ICRTaGFwZTxTdGF0ZT4qL3tcbiAgICAgIHZhciBuZXdTdGF0ZSA9IHt9O1xuICAgICAgaWYgKG5leHRQcm9wcy5jb2x1bW5Db3VudCA9PT0gMCAmJiBwcmV2U3RhdGUuc2Nyb2xsTGVmdCAhPT0gMCB8fCBuZXh0UHJvcHMucm93Q291bnQgPT09IDAgJiYgcHJldlN0YXRlLnNjcm9sbFRvcCAhPT0gMCkge1xuICAgICAgICBuZXdTdGF0ZS5zY3JvbGxMZWZ0ID0gMDtcbiAgICAgICAgbmV3U3RhdGUuc2Nyb2xsVG9wID0gMDtcblxuICAgICAgICAvLyBvbmx5IHVzZSBzY3JvbGx7TGVmdCxUb3B9IGZyb20gcHJvcHMgaWYgc2Nyb2xsVG97Q29sdW1uLFJvd30gaXNuJ3Qgc3BlY2lmaWVkXG4gICAgICAgIC8vIHNjcm9sbFRve0NvbHVtbixSb3d9IHNob3VsZCBvdmVycmlkZSBzY3JvbGx7TGVmdCxUb3B9XG4gICAgICB9IGVsc2UgaWYgKG5leHRQcm9wcy5zY3JvbGxMZWZ0ICE9PSBwcmV2U3RhdGUuc2Nyb2xsTGVmdCAmJiBuZXh0UHJvcHMuc2Nyb2xsVG9Db2x1bW4gPCAwIHx8IG5leHRQcm9wcy5zY3JvbGxUb3AgIT09IHByZXZTdGF0ZS5zY3JvbGxUb3AgJiYgbmV4dFByb3BzLnNjcm9sbFRvUm93IDwgMCkge1xuICAgICAgICBPYmplY3QuYXNzaWduKG5ld1N0YXRlLCBHcmlkLl9nZXRTY3JvbGxUb1Bvc2l0aW9uU3RhdGVVcGRhdGUoe1xuICAgICAgICAgIHByZXZTdGF0ZTogcHJldlN0YXRlLFxuICAgICAgICAgIHNjcm9sbExlZnQ6IG5leHRQcm9wcy5zY3JvbGxMZWZ0LFxuICAgICAgICAgIHNjcm9sbFRvcDogbmV4dFByb3BzLnNjcm9sbFRvcFxuICAgICAgICB9KSk7XG4gICAgICB9XG4gICAgICB2YXIgaW5zdGFuY2VQcm9wcyA9IHByZXZTdGF0ZS5pbnN0YW5jZVByb3BzO1xuXG4gICAgICAvLyBJbml0aWFsbHkgd2Ugc2hvdWxkIG5vdCBjbGVhclN0eWxlQ2FjaGVcbiAgICAgIG5ld1N0YXRlLm5lZWRUb1Jlc2V0U3R5bGVDYWNoZSA9IGZhbHNlO1xuICAgICAgaWYgKG5leHRQcm9wcy5jb2x1bW5XaWR0aCAhPT0gaW5zdGFuY2VQcm9wcy5wcmV2Q29sdW1uV2lkdGggfHwgbmV4dFByb3BzLnJvd0hlaWdodCAhPT0gaW5zdGFuY2VQcm9wcy5wcmV2Um93SGVpZ2h0KSB7XG4gICAgICAgIC8vIFJlc2V0IGNhY2hlLiBzZXQgaXQgdG8ge30gaW4gcmVuZGVyXG4gICAgICAgIG5ld1N0YXRlLm5lZWRUb1Jlc2V0U3R5bGVDYWNoZSA9IHRydWU7XG4gICAgICB9XG4gICAgICBpbnN0YW5jZVByb3BzLmNvbHVtblNpemVBbmRQb3NpdGlvbk1hbmFnZXIuY29uZmlndXJlKHtcbiAgICAgICAgY2VsbENvdW50OiBuZXh0UHJvcHMuY29sdW1uQ291bnQsXG4gICAgICAgIGVzdGltYXRlZENlbGxTaXplOiBHcmlkLl9nZXRFc3RpbWF0ZWRDb2x1bW5TaXplKG5leHRQcm9wcyksXG4gICAgICAgIGNlbGxTaXplR2V0dGVyOiBHcmlkLl93cmFwU2l6ZUdldHRlcihuZXh0UHJvcHMuY29sdW1uV2lkdGgpXG4gICAgICB9KTtcbiAgICAgIGluc3RhbmNlUHJvcHMucm93U2l6ZUFuZFBvc2l0aW9uTWFuYWdlci5jb25maWd1cmUoe1xuICAgICAgICBjZWxsQ291bnQ6IG5leHRQcm9wcy5yb3dDb3VudCxcbiAgICAgICAgZXN0aW1hdGVkQ2VsbFNpemU6IEdyaWQuX2dldEVzdGltYXRlZFJvd1NpemUobmV4dFByb3BzKSxcbiAgICAgICAgY2VsbFNpemVHZXR0ZXI6IEdyaWQuX3dyYXBTaXplR2V0dGVyKG5leHRQcm9wcy5yb3dIZWlnaHQpXG4gICAgICB9KTtcbiAgICAgIGlmIChpbnN0YW5jZVByb3BzLnByZXZDb2x1bW5Db3VudCA9PT0gMCB8fCBpbnN0YW5jZVByb3BzLnByZXZSb3dDb3VudCA9PT0gMCkge1xuICAgICAgICBpbnN0YW5jZVByb3BzLnByZXZDb2x1bW5Db3VudCA9IDA7XG4gICAgICAgIGluc3RhbmNlUHJvcHMucHJldlJvd0NvdW50ID0gMDtcbiAgICAgIH1cblxuICAgICAgLy8gSWYgc2Nyb2xsaW5nIGlzIGNvbnRyb2xsZWQgb3V0c2lkZSB0aGlzIGNvbXBvbmVudCwgY2xlYXIgY2FjaGUgd2hlbiBzY3JvbGxpbmcgc3RvcHNcbiAgICAgIGlmIChuZXh0UHJvcHMuYXV0b0hlaWdodCAmJiBuZXh0UHJvcHMuaXNTY3JvbGxpbmcgPT09IGZhbHNlICYmIGluc3RhbmNlUHJvcHMucHJldklzU2Nyb2xsaW5nID09PSB0cnVlKSB7XG4gICAgICAgIE9iamVjdC5hc3NpZ24obmV3U3RhdGUsIHtcbiAgICAgICAgICBpc1Njcm9sbGluZzogZmFsc2VcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICB2YXIgbWF5YmVTdGF0ZUE7XG4gICAgICB2YXIgbWF5YmVTdGF0ZUI7XG4gICAgICBjYWxjdWxhdGVTaXplQW5kUG9zaXRpb25EYXRhQW5kVXBkYXRlU2Nyb2xsT2Zmc2V0KHtcbiAgICAgICAgY2VsbENvdW50OiBpbnN0YW5jZVByb3BzLnByZXZDb2x1bW5Db3VudCxcbiAgICAgICAgY2VsbFNpemU6IHR5cGVvZiBpbnN0YW5jZVByb3BzLnByZXZDb2x1bW5XaWR0aCA9PT0gJ251bWJlcicgPyBpbnN0YW5jZVByb3BzLnByZXZDb2x1bW5XaWR0aCA6IG51bGwsXG4gICAgICAgIGNvbXB1dGVNZXRhZGF0YUNhbGxiYWNrOiBmdW5jdGlvbiBjb21wdXRlTWV0YWRhdGFDYWxsYmFjaygpIHtcbiAgICAgICAgICByZXR1cm4gaW5zdGFuY2VQcm9wcy5jb2x1bW5TaXplQW5kUG9zaXRpb25NYW5hZ2VyLnJlc2V0Q2VsbCgwKTtcbiAgICAgICAgfSxcbiAgICAgICAgY29tcHV0ZU1ldGFkYXRhQ2FsbGJhY2tQcm9wczogbmV4dFByb3BzLFxuICAgICAgICBuZXh0Q2VsbHNDb3VudDogbmV4dFByb3BzLmNvbHVtbkNvdW50LFxuICAgICAgICBuZXh0Q2VsbFNpemU6IHR5cGVvZiBuZXh0UHJvcHMuY29sdW1uV2lkdGggPT09ICdudW1iZXInID8gbmV4dFByb3BzLmNvbHVtbldpZHRoIDogbnVsbCxcbiAgICAgICAgbmV4dFNjcm9sbFRvSW5kZXg6IG5leHRQcm9wcy5zY3JvbGxUb0NvbHVtbixcbiAgICAgICAgc2Nyb2xsVG9JbmRleDogaW5zdGFuY2VQcm9wcy5wcmV2U2Nyb2xsVG9Db2x1bW4sXG4gICAgICAgIHVwZGF0ZVNjcm9sbE9mZnNldEZvclNjcm9sbFRvSW5kZXg6IGZ1bmN0aW9uIHVwZGF0ZVNjcm9sbE9mZnNldEZvclNjcm9sbFRvSW5kZXgoKSB7XG4gICAgICAgICAgbWF5YmVTdGF0ZUEgPSBHcmlkLl9nZXRTY3JvbGxMZWZ0Rm9yU2Nyb2xsVG9Db2x1bW5TdGF0ZVVwZGF0ZShuZXh0UHJvcHMsIHByZXZTdGF0ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgY2FsY3VsYXRlU2l6ZUFuZFBvc2l0aW9uRGF0YUFuZFVwZGF0ZVNjcm9sbE9mZnNldCh7XG4gICAgICAgIGNlbGxDb3VudDogaW5zdGFuY2VQcm9wcy5wcmV2Um93Q291bnQsXG4gICAgICAgIGNlbGxTaXplOiB0eXBlb2YgaW5zdGFuY2VQcm9wcy5wcmV2Um93SGVpZ2h0ID09PSAnbnVtYmVyJyA/IGluc3RhbmNlUHJvcHMucHJldlJvd0hlaWdodCA6IG51bGwsXG4gICAgICAgIGNvbXB1dGVNZXRhZGF0YUNhbGxiYWNrOiBmdW5jdGlvbiBjb21wdXRlTWV0YWRhdGFDYWxsYmFjaygpIHtcbiAgICAgICAgICByZXR1cm4gaW5zdGFuY2VQcm9wcy5yb3dTaXplQW5kUG9zaXRpb25NYW5hZ2VyLnJlc2V0Q2VsbCgwKTtcbiAgICAgICAgfSxcbiAgICAgICAgY29tcHV0ZU1ldGFkYXRhQ2FsbGJhY2tQcm9wczogbmV4dFByb3BzLFxuICAgICAgICBuZXh0Q2VsbHNDb3VudDogbmV4dFByb3BzLnJvd0NvdW50LFxuICAgICAgICBuZXh0Q2VsbFNpemU6IHR5cGVvZiBuZXh0UHJvcHMucm93SGVpZ2h0ID09PSAnbnVtYmVyJyA/IG5leHRQcm9wcy5yb3dIZWlnaHQgOiBudWxsLFxuICAgICAgICBuZXh0U2Nyb2xsVG9JbmRleDogbmV4dFByb3BzLnNjcm9sbFRvUm93LFxuICAgICAgICBzY3JvbGxUb0luZGV4OiBpbnN0YW5jZVByb3BzLnByZXZTY3JvbGxUb1JvdyxcbiAgICAgICAgdXBkYXRlU2Nyb2xsT2Zmc2V0Rm9yU2Nyb2xsVG9JbmRleDogZnVuY3Rpb24gdXBkYXRlU2Nyb2xsT2Zmc2V0Rm9yU2Nyb2xsVG9JbmRleCgpIHtcbiAgICAgICAgICBtYXliZVN0YXRlQiA9IEdyaWQuX2dldFNjcm9sbFRvcEZvclNjcm9sbFRvUm93U3RhdGVVcGRhdGUobmV4dFByb3BzLCBwcmV2U3RhdGUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGluc3RhbmNlUHJvcHMucHJldkNvbHVtbkNvdW50ID0gbmV4dFByb3BzLmNvbHVtbkNvdW50O1xuICAgICAgaW5zdGFuY2VQcm9wcy5wcmV2Q29sdW1uV2lkdGggPSBuZXh0UHJvcHMuY29sdW1uV2lkdGg7XG4gICAgICBpbnN0YW5jZVByb3BzLnByZXZJc1Njcm9sbGluZyA9IG5leHRQcm9wcy5pc1Njcm9sbGluZyA9PT0gdHJ1ZTtcbiAgICAgIGluc3RhbmNlUHJvcHMucHJldlJvd0NvdW50ID0gbmV4dFByb3BzLnJvd0NvdW50O1xuICAgICAgaW5zdGFuY2VQcm9wcy5wcmV2Um93SGVpZ2h0ID0gbmV4dFByb3BzLnJvd0hlaWdodDtcbiAgICAgIGluc3RhbmNlUHJvcHMucHJldlNjcm9sbFRvQ29sdW1uID0gbmV4dFByb3BzLnNjcm9sbFRvQ29sdW1uO1xuICAgICAgaW5zdGFuY2VQcm9wcy5wcmV2U2Nyb2xsVG9Sb3cgPSBuZXh0UHJvcHMuc2Nyb2xsVG9Sb3c7XG5cbiAgICAgIC8vIGdldHRpbmcgc2Nyb2xsQmFyU2l6ZSAobW92ZWQgZnJvbSBjb21wb25lbnRXaWxsTW91bnQpXG4gICAgICBpbnN0YW5jZVByb3BzLnNjcm9sbGJhclNpemUgPSBuZXh0UHJvcHMuZ2V0U2Nyb2xsYmFyU2l6ZSgpO1xuICAgICAgaWYgKGluc3RhbmNlUHJvcHMuc2Nyb2xsYmFyU2l6ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGluc3RhbmNlUHJvcHMuc2Nyb2xsYmFyU2l6ZU1lYXN1cmVkID0gZmFsc2U7XG4gICAgICAgIGluc3RhbmNlUHJvcHMuc2Nyb2xsYmFyU2l6ZSA9IDA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpbnN0YW5jZVByb3BzLnNjcm9sbGJhclNpemVNZWFzdXJlZCA9IHRydWU7XG4gICAgICB9XG4gICAgICBuZXdTdGF0ZS5pbnN0YW5jZVByb3BzID0gaW5zdGFuY2VQcm9wcztcbiAgICAgIHJldHVybiBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgbmV3U3RhdGUpLCBtYXliZVN0YXRlQSksIG1heWJlU3RhdGVCKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiX2dldEVzdGltYXRlZENvbHVtblNpemVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2dldEVzdGltYXRlZENvbHVtblNpemUocHJvcHMgLyo6IFByb3BzKi8pIHtcbiAgICAgIHJldHVybiB0eXBlb2YgcHJvcHMuY29sdW1uV2lkdGggPT09ICdudW1iZXInID8gcHJvcHMuY29sdW1uV2lkdGggOiBwcm9wcy5lc3RpbWF0ZWRDb2x1bW5TaXplO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJfZ2V0RXN0aW1hdGVkUm93U2l6ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZ2V0RXN0aW1hdGVkUm93U2l6ZShwcm9wcyAvKjogUHJvcHMqLykge1xuICAgICAgcmV0dXJuIHR5cGVvZiBwcm9wcy5yb3dIZWlnaHQgPT09ICdudW1iZXInID8gcHJvcHMucm93SGVpZ2h0IDogcHJvcHMuZXN0aW1hdGVkUm93U2l6ZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiX2dldFNjcm9sbFRvUG9zaXRpb25TdGF0ZVVwZGF0ZVwiLFxuICAgIHZhbHVlOlxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgdXBkYXRlZCBzdGF0ZSBhZnRlciBzY3JvbGxpbmcgdG9cbiAgICAgKiBzY3JvbGxMZWZ0IGFuZCBzY3JvbGxUb3BcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBfZ2V0U2Nyb2xsVG9Qb3NpdGlvblN0YXRlVXBkYXRlKF9yZWY5IC8qOjogKi8pIC8qOiAkU2hhcGU8U3RhdGU+Ki97XG4gICAgICB2YXIgcHJldlN0YXRlID0gX3JlZjkgLyo6OiAqLy5wcmV2U3RhdGUsXG4gICAgICAgIHNjcm9sbExlZnQgPSBfcmVmOSAvKjo6ICovLnNjcm9sbExlZnQsXG4gICAgICAgIHNjcm9sbFRvcCA9IF9yZWY5IC8qOjogKi8uc2Nyb2xsVG9wO1xuICAgICAgdmFyIG5ld1N0YXRlIC8qOiBPYmplY3QqLyA9IHtcbiAgICAgICAgc2Nyb2xsUG9zaXRpb25DaGFuZ2VSZWFzb246IFNDUk9MTF9QT1NJVElPTl9DSEFOR0VfUkVBU09OUy5SRVFVRVNURURcbiAgICAgIH07XG4gICAgICBpZiAodHlwZW9mIHNjcm9sbExlZnQgPT09ICdudW1iZXInICYmIHNjcm9sbExlZnQgPj0gMCkge1xuICAgICAgICBuZXdTdGF0ZS5zY3JvbGxEaXJlY3Rpb25Ib3Jpem9udGFsID0gc2Nyb2xsTGVmdCA+IHByZXZTdGF0ZS5zY3JvbGxMZWZ0ID8gU0NST0xMX0RJUkVDVElPTl9GT1JXQVJEIDogU0NST0xMX0RJUkVDVElPTl9CQUNLV0FSRDtcbiAgICAgICAgbmV3U3RhdGUuc2Nyb2xsTGVmdCA9IHNjcm9sbExlZnQ7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIHNjcm9sbFRvcCA9PT0gJ251bWJlcicgJiYgc2Nyb2xsVG9wID49IDApIHtcbiAgICAgICAgbmV3U3RhdGUuc2Nyb2xsRGlyZWN0aW9uVmVydGljYWwgPSBzY3JvbGxUb3AgPiBwcmV2U3RhdGUuc2Nyb2xsVG9wID8gU0NST0xMX0RJUkVDVElPTl9GT1JXQVJEIDogU0NST0xMX0RJUkVDVElPTl9CQUNLV0FSRDtcbiAgICAgICAgbmV3U3RhdGUuc2Nyb2xsVG9wID0gc2Nyb2xsVG9wO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBzY3JvbGxMZWZ0ID09PSAnbnVtYmVyJyAmJiBzY3JvbGxMZWZ0ID49IDAgJiYgc2Nyb2xsTGVmdCAhPT0gcHJldlN0YXRlLnNjcm9sbExlZnQgfHwgdHlwZW9mIHNjcm9sbFRvcCA9PT0gJ251bWJlcicgJiYgc2Nyb2xsVG9wID49IDAgJiYgc2Nyb2xsVG9wICE9PSBwcmV2U3RhdGUuc2Nyb2xsVG9wKSB7XG4gICAgICAgIHJldHVybiBuZXdTdGF0ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB7fTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiX3dyYXBTaXplR2V0dGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF93cmFwU2l6ZUdldHRlcih2YWx1ZSAvKjogQ2VsbFNpemUqLykgLyo6IENlbGxTaXplR2V0dGVyKi97XG4gICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nID8gdmFsdWUgOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAodmFsdWUgLyo6IGFueSovKTtcbiAgICAgIH07XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIl9nZXRDYWxjdWxhdGVkU2Nyb2xsTGVmdFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZ2V0Q2FsY3VsYXRlZFNjcm9sbExlZnQobmV4dFByb3BzIC8qOiBQcm9wcyovLCBwcmV2U3RhdGUgLyo6IFN0YXRlKi8pIHtcbiAgICAgIHZhciBjb2x1bW5Db3VudCA9IG5leHRQcm9wcy5jb2x1bW5Db3VudCxcbiAgICAgICAgaGVpZ2h0ID0gbmV4dFByb3BzLmhlaWdodCxcbiAgICAgICAgc2Nyb2xsVG9BbGlnbm1lbnQgPSBuZXh0UHJvcHMuc2Nyb2xsVG9BbGlnbm1lbnQsXG4gICAgICAgIHNjcm9sbFRvQ29sdW1uID0gbmV4dFByb3BzLnNjcm9sbFRvQ29sdW1uLFxuICAgICAgICB3aWR0aCA9IG5leHRQcm9wcy53aWR0aDtcbiAgICAgIHZhciBzY3JvbGxMZWZ0ID0gcHJldlN0YXRlLnNjcm9sbExlZnQsXG4gICAgICAgIGluc3RhbmNlUHJvcHMgPSBwcmV2U3RhdGUuaW5zdGFuY2VQcm9wcztcbiAgICAgIGlmIChjb2x1bW5Db3VudCA+IDApIHtcbiAgICAgICAgdmFyIGZpbmFsQ29sdW1uID0gY29sdW1uQ291bnQgLSAxO1xuICAgICAgICB2YXIgdGFyZ2V0SW5kZXggPSBzY3JvbGxUb0NvbHVtbiA8IDAgPyBmaW5hbENvbHVtbiA6IE1hdGgubWluKGZpbmFsQ29sdW1uLCBzY3JvbGxUb0NvbHVtbik7XG4gICAgICAgIHZhciB0b3RhbFJvd3NIZWlnaHQgPSBpbnN0YW5jZVByb3BzLnJvd1NpemVBbmRQb3NpdGlvbk1hbmFnZXIuZ2V0VG90YWxTaXplKCk7XG4gICAgICAgIHZhciBzY3JvbGxCYXJTaXplID0gaW5zdGFuY2VQcm9wcy5zY3JvbGxiYXJTaXplTWVhc3VyZWQgJiYgdG90YWxSb3dzSGVpZ2h0ID4gaGVpZ2h0ID8gaW5zdGFuY2VQcm9wcy5zY3JvbGxiYXJTaXplIDogMDtcbiAgICAgICAgcmV0dXJuIGluc3RhbmNlUHJvcHMuY29sdW1uU2l6ZUFuZFBvc2l0aW9uTWFuYWdlci5nZXRVcGRhdGVkT2Zmc2V0Rm9ySW5kZXgoe1xuICAgICAgICAgIGFsaWduOiBzY3JvbGxUb0FsaWdubWVudCxcbiAgICAgICAgICBjb250YWluZXJTaXplOiB3aWR0aCAtIHNjcm9sbEJhclNpemUsXG4gICAgICAgICAgY3VycmVudE9mZnNldDogc2Nyb2xsTGVmdCxcbiAgICAgICAgICB0YXJnZXRJbmRleDogdGFyZ2V0SW5kZXhcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiX2dldFNjcm9sbExlZnRGb3JTY3JvbGxUb0NvbHVtblN0YXRlVXBkYXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9nZXRTY3JvbGxMZWZ0Rm9yU2Nyb2xsVG9Db2x1bW5TdGF0ZVVwZGF0ZShuZXh0UHJvcHMgLyo6IFByb3BzKi8sIHByZXZTdGF0ZSAvKjogU3RhdGUqLykgLyo6ICRTaGFwZTxTdGF0ZT4qL3tcbiAgICAgIHZhciBzY3JvbGxMZWZ0ID0gcHJldlN0YXRlLnNjcm9sbExlZnQ7XG4gICAgICB2YXIgY2FsY3VsYXRlZFNjcm9sbExlZnQgPSBHcmlkLl9nZXRDYWxjdWxhdGVkU2Nyb2xsTGVmdChuZXh0UHJvcHMsIHByZXZTdGF0ZSk7XG4gICAgICBpZiAodHlwZW9mIGNhbGN1bGF0ZWRTY3JvbGxMZWZ0ID09PSAnbnVtYmVyJyAmJiBjYWxjdWxhdGVkU2Nyb2xsTGVmdCA+PSAwICYmIHNjcm9sbExlZnQgIT09IGNhbGN1bGF0ZWRTY3JvbGxMZWZ0KSB7XG4gICAgICAgIHJldHVybiBHcmlkLl9nZXRTY3JvbGxUb1Bvc2l0aW9uU3RhdGVVcGRhdGUoe1xuICAgICAgICAgIHByZXZTdGF0ZTogcHJldlN0YXRlLFxuICAgICAgICAgIHNjcm9sbExlZnQ6IGNhbGN1bGF0ZWRTY3JvbGxMZWZ0LFxuICAgICAgICAgIHNjcm9sbFRvcDogLTFcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICByZXR1cm4ge307XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIl9nZXRDYWxjdWxhdGVkU2Nyb2xsVG9wXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9nZXRDYWxjdWxhdGVkU2Nyb2xsVG9wKG5leHRQcm9wcyAvKjogUHJvcHMqLywgcHJldlN0YXRlIC8qOiBTdGF0ZSovKSB7XG4gICAgICB2YXIgaGVpZ2h0ID0gbmV4dFByb3BzLmhlaWdodCxcbiAgICAgICAgcm93Q291bnQgPSBuZXh0UHJvcHMucm93Q291bnQsXG4gICAgICAgIHNjcm9sbFRvQWxpZ25tZW50ID0gbmV4dFByb3BzLnNjcm9sbFRvQWxpZ25tZW50LFxuICAgICAgICBzY3JvbGxUb1JvdyA9IG5leHRQcm9wcy5zY3JvbGxUb1JvdyxcbiAgICAgICAgd2lkdGggPSBuZXh0UHJvcHMud2lkdGg7XG4gICAgICB2YXIgc2Nyb2xsVG9wID0gcHJldlN0YXRlLnNjcm9sbFRvcCxcbiAgICAgICAgaW5zdGFuY2VQcm9wcyA9IHByZXZTdGF0ZS5pbnN0YW5jZVByb3BzO1xuICAgICAgaWYgKHJvd0NvdW50ID4gMCkge1xuICAgICAgICB2YXIgZmluYWxSb3cgPSByb3dDb3VudCAtIDE7XG4gICAgICAgIHZhciB0YXJnZXRJbmRleCA9IHNjcm9sbFRvUm93IDwgMCA/IGZpbmFsUm93IDogTWF0aC5taW4oZmluYWxSb3csIHNjcm9sbFRvUm93KTtcbiAgICAgICAgdmFyIHRvdGFsQ29sdW1uc1dpZHRoID0gaW5zdGFuY2VQcm9wcy5jb2x1bW5TaXplQW5kUG9zaXRpb25NYW5hZ2VyLmdldFRvdGFsU2l6ZSgpO1xuICAgICAgICB2YXIgc2Nyb2xsQmFyU2l6ZSA9IGluc3RhbmNlUHJvcHMuc2Nyb2xsYmFyU2l6ZU1lYXN1cmVkICYmIHRvdGFsQ29sdW1uc1dpZHRoID4gd2lkdGggPyBpbnN0YW5jZVByb3BzLnNjcm9sbGJhclNpemUgOiAwO1xuICAgICAgICByZXR1cm4gaW5zdGFuY2VQcm9wcy5yb3dTaXplQW5kUG9zaXRpb25NYW5hZ2VyLmdldFVwZGF0ZWRPZmZzZXRGb3JJbmRleCh7XG4gICAgICAgICAgYWxpZ246IHNjcm9sbFRvQWxpZ25tZW50LFxuICAgICAgICAgIGNvbnRhaW5lclNpemU6IGhlaWdodCAtIHNjcm9sbEJhclNpemUsXG4gICAgICAgICAgY3VycmVudE9mZnNldDogc2Nyb2xsVG9wLFxuICAgICAgICAgIHRhcmdldEluZGV4OiB0YXJnZXRJbmRleFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJfZ2V0U2Nyb2xsVG9wRm9yU2Nyb2xsVG9Sb3dTdGF0ZVVwZGF0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZ2V0U2Nyb2xsVG9wRm9yU2Nyb2xsVG9Sb3dTdGF0ZVVwZGF0ZShuZXh0UHJvcHMgLyo6IFByb3BzKi8sIHByZXZTdGF0ZSAvKjogU3RhdGUqLykgLyo6ICRTaGFwZTxTdGF0ZT4qL3tcbiAgICAgIHZhciBzY3JvbGxUb3AgPSBwcmV2U3RhdGUuc2Nyb2xsVG9wO1xuICAgICAgdmFyIGNhbGN1bGF0ZWRTY3JvbGxUb3AgPSBHcmlkLl9nZXRDYWxjdWxhdGVkU2Nyb2xsVG9wKG5leHRQcm9wcywgcHJldlN0YXRlKTtcbiAgICAgIGlmICh0eXBlb2YgY2FsY3VsYXRlZFNjcm9sbFRvcCA9PT0gJ251bWJlcicgJiYgY2FsY3VsYXRlZFNjcm9sbFRvcCA+PSAwICYmIHNjcm9sbFRvcCAhPT0gY2FsY3VsYXRlZFNjcm9sbFRvcCkge1xuICAgICAgICByZXR1cm4gR3JpZC5fZ2V0U2Nyb2xsVG9Qb3NpdGlvblN0YXRlVXBkYXRlKHtcbiAgICAgICAgICBwcmV2U3RhdGU6IHByZXZTdGF0ZSxcbiAgICAgICAgICBzY3JvbGxMZWZ0OiAtMSxcbiAgICAgICAgICBzY3JvbGxUb3A6IGNhbGN1bGF0ZWRTY3JvbGxUb3BcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICByZXR1cm4ge307XG4gICAgfVxuICB9XSk7XG59KFJlYWN0LlB1cmVDb21wb25lbnQpO1xuX2RlZmluZVByb3BlcnR5KEdyaWQsIFwiZGVmYXVsdFByb3BzXCIsIHtcbiAgJ2FyaWEtbGFiZWwnOiAnZ3JpZCcsXG4gICdhcmlhLXJlYWRvbmx5JzogdHJ1ZSxcbiAgYXV0b0NvbnRhaW5lcldpZHRoOiBmYWxzZSxcbiAgYXV0b0hlaWdodDogZmFsc2UsXG4gIGF1dG9XaWR0aDogZmFsc2UsXG4gIGNlbGxSYW5nZVJlbmRlcmVyOiBkZWZhdWx0Q2VsbFJhbmdlUmVuZGVyZXIsXG4gIGNvbnRhaW5lclJvbGU6ICdyb3cnLFxuICBjb250YWluZXJTdHlsZToge30sXG4gIGVzdGltYXRlZENvbHVtblNpemU6IDEwMCxcbiAgZXN0aW1hdGVkUm93U2l6ZTogMzAsXG4gIGdldFNjcm9sbGJhclNpemU6IHNjcm9sbGJhclNpemUsXG4gIG5vQ29udGVudFJlbmRlcmVyOiByZW5kZXJOdWxsLFxuICBvblNjcm9sbDogZnVuY3Rpb24gb25TY3JvbGwoKSB7fSxcbiAgb25TY3JvbGxiYXJQcmVzZW5jZUNoYW5nZTogZnVuY3Rpb24gb25TY3JvbGxiYXJQcmVzZW5jZUNoYW5nZSgpIHt9LFxuICBvblNlY3Rpb25SZW5kZXJlZDogZnVuY3Rpb24gb25TZWN0aW9uUmVuZGVyZWQoKSB7fSxcbiAgb3ZlcnNjYW5Db2x1bW5Db3VudDogMCxcbiAgb3ZlcnNjYW5JbmRpY2VzR2V0dGVyOiBkZWZhdWx0T3ZlcnNjYW5JbmRpY2VzR2V0dGVyLFxuICBvdmVyc2NhblJvd0NvdW50OiAxMCxcbiAgcm9sZTogJ2dyaWQnLFxuICBzY3JvbGxpbmdSZXNldFRpbWVJbnRlcnZhbDogREVGQVVMVF9TQ1JPTExJTkdfUkVTRVRfVElNRV9JTlRFUlZBTCxcbiAgc2Nyb2xsVG9BbGlnbm1lbnQ6ICdhdXRvJyxcbiAgc2Nyb2xsVG9Db2x1bW46IC0xLFxuICBzY3JvbGxUb1JvdzogLTEsXG4gIHN0eWxlOiB7fSxcbiAgdGFiSW5kZXg6IDAsXG4gIGlzU2Nyb2xsaW5nT3B0T3V0OiBmYWxzZVxufSk7XG5wb2x5ZmlsbChHcmlkKTtcbmV4cG9ydCBkZWZhdWx0IEdyaWQ7IiwiLyo6OiBpbXBvcnQgdHlwZSB7T3ZlcnNjYW5JbmRpY2VzR2V0dGVyUGFyYW1zLCBPdmVyc2NhbkluZGljZXN9IGZyb20gJy4vdHlwZXMnOyovXG5leHBvcnQgdmFyIFNDUk9MTF9ESVJFQ1RJT05fQkFDS1dBUkQgPSAtMTtcbmV4cG9ydCB2YXIgU0NST0xMX0RJUkVDVElPTl9GT1JXQVJEID0gMTtcbmV4cG9ydCB2YXIgU0NST0xMX0RJUkVDVElPTl9IT1JJWk9OVEFMID0gJ2hvcml6b250YWwnO1xuZXhwb3J0IHZhciBTQ1JPTExfRElSRUNUSU9OX1ZFUlRJQ0FMID0gJ3ZlcnRpY2FsJztcblxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBudW1iZXIgb2YgY2VsbHMgdG8gb3ZlcnNjYW4gYmVmb3JlIGFuZCBhZnRlciBhIHNwZWNpZmllZCByYW5nZS5cbiAqIFRoaXMgZnVuY3Rpb24gZW5zdXJlcyB0aGF0IG92ZXJzY2FubmluZyBkb2Vzbid0IGV4Y2VlZCB0aGUgYXZhaWxhYmxlIGNlbGxzLlxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRlZmF1bHRPdmVyc2NhbkluZGljZXNHZXR0ZXIoX3JlZiAvKjo6ICovKSAvKjogT3ZlcnNjYW5JbmRpY2VzKi97XG4gIHZhciBjZWxsQ291bnQgPSBfcmVmIC8qOjogKi8uY2VsbENvdW50LFxuICAgIG92ZXJzY2FuQ2VsbHNDb3VudCA9IF9yZWYgLyo6OiAqLy5vdmVyc2NhbkNlbGxzQ291bnQsXG4gICAgc2Nyb2xsRGlyZWN0aW9uID0gX3JlZiAvKjo6ICovLnNjcm9sbERpcmVjdGlvbixcbiAgICBzdGFydEluZGV4ID0gX3JlZiAvKjo6ICovLnN0YXJ0SW5kZXgsXG4gICAgc3RvcEluZGV4ID0gX3JlZiAvKjo6ICovLnN0b3BJbmRleDtcbiAgaWYgKHNjcm9sbERpcmVjdGlvbiA9PT0gU0NST0xMX0RJUkVDVElPTl9GT1JXQVJEKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG92ZXJzY2FuU3RhcnRJbmRleDogTWF0aC5tYXgoMCwgc3RhcnRJbmRleCksXG4gICAgICBvdmVyc2NhblN0b3BJbmRleDogTWF0aC5taW4oY2VsbENvdW50IC0gMSwgc3RvcEluZGV4ICsgb3ZlcnNjYW5DZWxsc0NvdW50KVxuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG92ZXJzY2FuU3RhcnRJbmRleDogTWF0aC5tYXgoMCwgc3RhcnRJbmRleCAtIG92ZXJzY2FuQ2VsbHNDb3VudCksXG4gICAgICBvdmVyc2NhblN0b3BJbmRleDogTWF0aC5taW4oY2VsbENvdW50IC0gMSwgc3RvcEluZGV4KVxuICAgIH07XG4gIH1cbn0iLCIvKjo6IGltcG9ydCB0eXBlIHtDZWxsUmFuZ2VSZW5kZXJlclBhcmFtc30gZnJvbSAnLi90eXBlcyc7Ki9cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbi8qKlxuICogRGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBvZiBjZWxsUmFuZ2VSZW5kZXJlciB1c2VkIGJ5IEdyaWQuXG4gKiBUaGlzIHJlbmRlcmVyIHN1cHBvcnRzIGNlbGwtY2FjaGluZyB3aGlsZSB0aGUgdXNlciBpcyBzY3JvbGxpbmcuXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGVmYXVsdENlbGxSYW5nZVJlbmRlcmVyKF9yZWYgLyo6OiAqLykge1xuICB2YXIgY2VsbENhY2hlID0gX3JlZiAvKjo6ICovLmNlbGxDYWNoZSxcbiAgICBjZWxsUmVuZGVyZXIgPSBfcmVmIC8qOjogKi8uY2VsbFJlbmRlcmVyLFxuICAgIGNvbHVtblNpemVBbmRQb3NpdGlvbk1hbmFnZXIgPSBfcmVmIC8qOjogKi8uY29sdW1uU2l6ZUFuZFBvc2l0aW9uTWFuYWdlcixcbiAgICBjb2x1bW5TdGFydEluZGV4ID0gX3JlZiAvKjo6ICovLmNvbHVtblN0YXJ0SW5kZXgsXG4gICAgY29sdW1uU3RvcEluZGV4ID0gX3JlZiAvKjo6ICovLmNvbHVtblN0b3BJbmRleCxcbiAgICBkZWZlcnJlZE1lYXN1cmVtZW50Q2FjaGUgPSBfcmVmIC8qOjogKi8uZGVmZXJyZWRNZWFzdXJlbWVudENhY2hlLFxuICAgIGhvcml6b250YWxPZmZzZXRBZGp1c3RtZW50ID0gX3JlZiAvKjo6ICovLmhvcml6b250YWxPZmZzZXRBZGp1c3RtZW50LFxuICAgIGlzU2Nyb2xsaW5nID0gX3JlZiAvKjo6ICovLmlzU2Nyb2xsaW5nLFxuICAgIGlzU2Nyb2xsaW5nT3B0T3V0ID0gX3JlZiAvKjo6ICovLmlzU2Nyb2xsaW5nT3B0T3V0LFxuICAgIHBhcmVudCA9IF9yZWYgLyo6OiAqLy5wYXJlbnQsXG4gICAgcm93U2l6ZUFuZFBvc2l0aW9uTWFuYWdlciA9IF9yZWYgLyo6OiAqLy5yb3dTaXplQW5kUG9zaXRpb25NYW5hZ2VyLFxuICAgIHJvd1N0YXJ0SW5kZXggPSBfcmVmIC8qOjogKi8ucm93U3RhcnRJbmRleCxcbiAgICByb3dTdG9wSW5kZXggPSBfcmVmIC8qOjogKi8ucm93U3RvcEluZGV4LFxuICAgIHN0eWxlQ2FjaGUgPSBfcmVmIC8qOjogKi8uc3R5bGVDYWNoZSxcbiAgICB2ZXJ0aWNhbE9mZnNldEFkanVzdG1lbnQgPSBfcmVmIC8qOjogKi8udmVydGljYWxPZmZzZXRBZGp1c3RtZW50LFxuICAgIHZpc2libGVDb2x1bW5JbmRpY2VzID0gX3JlZiAvKjo6ICovLnZpc2libGVDb2x1bW5JbmRpY2VzLFxuICAgIHZpc2libGVSb3dJbmRpY2VzID0gX3JlZiAvKjo6ICovLnZpc2libGVSb3dJbmRpY2VzO1xuICB2YXIgcmVuZGVyZWRDZWxscyA9IFtdO1xuXG4gIC8vIEJyb3dzZXJzIGhhdmUgbmF0aXZlIHNpemUgbGltaXRzIGZvciBlbGVtZW50cyAoZWcgQ2hyb21lIDMzTSBwaXhlbHMsIElFIDEuNU0gcGl4ZXMpLlxuICAvLyBVc2VyIGNhbm5vdCBzY3JvbGwgYmV5b25kIHRoZXNlIHNpemUgbGltaXRhdGlvbnMuXG4gIC8vIEluIG9yZGVyIHRvIHdvcmsgYXJvdW5kIHRoaXMsIFNjYWxpbmdDZWxsU2l6ZUFuZFBvc2l0aW9uTWFuYWdlciBjb21wcmVzc2VzIG9mZnNldHMuXG4gIC8vIFdlIHNob3VsZCBuZXZlciBjYWNoZSBzdHlsZXMgZm9yIGNvbXByZXNzZWQgb2Zmc2V0cyB0aG91Z2ggYXMgdGhpcyBjYW4gbGVhZCB0byBidWdzLlxuICAvLyBTZWUgaXNzdWUgIzU3NiBmb3IgbW9yZS5cbiAgdmFyIGFyZU9mZnNldHNBZGp1c3RlZCA9IGNvbHVtblNpemVBbmRQb3NpdGlvbk1hbmFnZXIuYXJlT2Zmc2V0c0FkanVzdGVkKCkgfHwgcm93U2l6ZUFuZFBvc2l0aW9uTWFuYWdlci5hcmVPZmZzZXRzQWRqdXN0ZWQoKTtcbiAgdmFyIGNhbkNhY2hlU3R5bGUgPSAhaXNTY3JvbGxpbmcgJiYgIWFyZU9mZnNldHNBZGp1c3RlZDtcbiAgZm9yICh2YXIgcm93SW5kZXggPSByb3dTdGFydEluZGV4OyByb3dJbmRleCA8PSByb3dTdG9wSW5kZXg7IHJvd0luZGV4KyspIHtcbiAgICB2YXIgcm93RGF0dW0gPSByb3dTaXplQW5kUG9zaXRpb25NYW5hZ2VyLmdldFNpemVBbmRQb3NpdGlvbk9mQ2VsbChyb3dJbmRleCk7XG4gICAgZm9yICh2YXIgY29sdW1uSW5kZXggPSBjb2x1bW5TdGFydEluZGV4OyBjb2x1bW5JbmRleCA8PSBjb2x1bW5TdG9wSW5kZXg7IGNvbHVtbkluZGV4KyspIHtcbiAgICAgIHZhciBjb2x1bW5EYXR1bSA9IGNvbHVtblNpemVBbmRQb3NpdGlvbk1hbmFnZXIuZ2V0U2l6ZUFuZFBvc2l0aW9uT2ZDZWxsKGNvbHVtbkluZGV4KTtcbiAgICAgIHZhciBpc1Zpc2libGUgPSBjb2x1bW5JbmRleCA+PSB2aXNpYmxlQ29sdW1uSW5kaWNlcy5zdGFydCAmJiBjb2x1bW5JbmRleCA8PSB2aXNpYmxlQ29sdW1uSW5kaWNlcy5zdG9wICYmIHJvd0luZGV4ID49IHZpc2libGVSb3dJbmRpY2VzLnN0YXJ0ICYmIHJvd0luZGV4IDw9IHZpc2libGVSb3dJbmRpY2VzLnN0b3A7XG4gICAgICB2YXIga2V5ID0gXCJcIi5jb25jYXQocm93SW5kZXgsIFwiLVwiKS5jb25jYXQoY29sdW1uSW5kZXgpO1xuICAgICAgdmFyIHN0eWxlID0gdm9pZCAwO1xuXG4gICAgICAvLyBDYWNoZSBzdHlsZSBvYmplY3RzIHNvIHNoYWxsb3ctY29tcGFyZSBkb2Vzbid0IHJlLXJlbmRlciB1bm5lY2Vzc2FyaWx5LlxuICAgICAgaWYgKGNhbkNhY2hlU3R5bGUgJiYgc3R5bGVDYWNoZVtrZXldKSB7XG4gICAgICAgIHN0eWxlID0gc3R5bGVDYWNoZVtrZXldO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gSW4gZGVmZXJyZWQgbW9kZSwgY2VsbHMgd2lsbCBiZSBpbml0aWFsbHkgcmVuZGVyZWQgYmVmb3JlIHdlIGtub3cgdGhlaXIgc2l6ZS5cbiAgICAgICAgLy8gRG9uJ3QgaW50ZXJmZXJlIHdpdGggQ2VsbE1lYXN1cmVyJ3MgbWVhc3VyZW1lbnRzIGJ5IHNldHRpbmcgYW4gaW52YWxpZCBzaXplLlxuICAgICAgICBpZiAoZGVmZXJyZWRNZWFzdXJlbWVudENhY2hlICYmICFkZWZlcnJlZE1lYXN1cmVtZW50Q2FjaGUuaGFzKHJvd0luZGV4LCBjb2x1bW5JbmRleCkpIHtcbiAgICAgICAgICAvLyBQb3NpdGlvbiBub3QteWV0LW1lYXN1cmVkIGNlbGxzIGF0IHRvcC9sZWZ0IDAsMCxcbiAgICAgICAgICAvLyBBbmQgZ2l2ZSB0aGVtIHdpZHRoL2hlaWdodCBvZiAnYXV0bycgc28gdGhleSBjYW4gZ3JvdyBsYXJnZXIgdGhhbiB0aGUgcGFyZW50IEdyaWQgaWYgbmVjZXNzYXJ5LlxuICAgICAgICAgIC8vIFBvc2l0aW9uaW5nIHRoZW0gZnVydGhlciB0byB0aGUgcmlnaHQvYm90dG9tIGluZmx1ZW5jZXMgdGhlaXIgbWVhc3VyZWQgc2l6ZS5cbiAgICAgICAgICBzdHlsZSA9IHtcbiAgICAgICAgICAgIGhlaWdodDogJ2F1dG8nLFxuICAgICAgICAgICAgbGVmdDogMCxcbiAgICAgICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICAgICAgdG9wOiAwLFxuICAgICAgICAgICAgd2lkdGg6ICdhdXRvJ1xuICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3R5bGUgPSB7XG4gICAgICAgICAgICBoZWlnaHQ6IHJvd0RhdHVtLnNpemUsXG4gICAgICAgICAgICBsZWZ0OiBjb2x1bW5EYXR1bS5vZmZzZXQgKyBob3Jpem9udGFsT2Zmc2V0QWRqdXN0bWVudCxcbiAgICAgICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICAgICAgdG9wOiByb3dEYXR1bS5vZmZzZXQgKyB2ZXJ0aWNhbE9mZnNldEFkanVzdG1lbnQsXG4gICAgICAgICAgICB3aWR0aDogY29sdW1uRGF0dW0uc2l6ZVxuICAgICAgICAgIH07XG4gICAgICAgICAgc3R5bGVDYWNoZVtrZXldID0gc3R5bGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHZhciBjZWxsUmVuZGVyZXJQYXJhbXMgPSB7XG4gICAgICAgIGNvbHVtbkluZGV4OiBjb2x1bW5JbmRleCxcbiAgICAgICAgaXNTY3JvbGxpbmc6IGlzU2Nyb2xsaW5nLFxuICAgICAgICBpc1Zpc2libGU6IGlzVmlzaWJsZSxcbiAgICAgICAga2V5OiBrZXksXG4gICAgICAgIHBhcmVudDogcGFyZW50LFxuICAgICAgICByb3dJbmRleDogcm93SW5kZXgsXG4gICAgICAgIHN0eWxlOiBzdHlsZVxuICAgICAgfTtcbiAgICAgIHZhciByZW5kZXJlZENlbGwgPSB2b2lkIDA7XG5cbiAgICAgIC8vIEF2b2lkIHJlLWNyZWF0aW5nIGNlbGxzIHdoaWxlIHNjcm9sbGluZy5cbiAgICAgIC8vIFRoaXMgY2FuIGxlYWQgdG8gdGhlIHNhbWUgY2VsbCBiZWluZyBjcmVhdGVkIG1hbnkgdGltZXMgYW5kIGNhbiBjYXVzZSBwZXJmb3JtYW5jZSBpc3N1ZXMgZm9yIFwiaGVhdnlcIiBjZWxscy5cbiAgICAgIC8vIElmIGEgc2Nyb2xsIGlzIGluIHByb2dyZXNzLSBjYWNoZSBhbmQgcmV1c2UgY2VsbHMuXG4gICAgICAvLyBUaGlzIGNhY2hlIHdpbGwgYmUgdGhyb3duIGF3YXkgb25jZSBzY3JvbGxpbmcgY29tcGxldGVzLlxuICAgICAgLy8gSG93ZXZlciBpZiB3ZSBhcmUgc2NhbGluZyBzY3JvbGwgcG9zaXRpb25zIGFuZCBzaXplcywgd2Ugc2hvdWxkIGFsc28gYXZvaWQgY2FjaGluZy5cbiAgICAgIC8vIFRoaXMgaXMgYmVjYXVzZSB0aGUgb2Zmc2V0IGNoYW5nZXMgc2xpZ2h0bHkgYXMgc2Nyb2xsIHBvc2l0aW9uIGNoYW5nZXMgYW5kIGNhY2hpbmcgbGVhZHMgdG8gc3RhbGUgdmFsdWVzLlxuICAgICAgLy8gRm9yIG1vcmUgaW5mbyByZWZlciB0byBpc3N1ZSAjMzk1XG4gICAgICAvL1xuICAgICAgLy8gSWYgaXNTY3JvbGxpbmdPcHRPdXQgaXMgc3BlY2lmaWVkLCB3ZSBhbHdheXMgY2FjaGUgY2VsbHMuXG4gICAgICAvLyBGb3IgbW9yZSBpbmZvIHJlZmVyIHRvIGlzc3VlICMxMDI4XG4gICAgICBpZiAoKGlzU2Nyb2xsaW5nT3B0T3V0IHx8IGlzU2Nyb2xsaW5nKSAmJiAhaG9yaXpvbnRhbE9mZnNldEFkanVzdG1lbnQgJiYgIXZlcnRpY2FsT2Zmc2V0QWRqdXN0bWVudCkge1xuICAgICAgICBpZiAoIWNlbGxDYWNoZVtrZXldKSB7XG4gICAgICAgICAgY2VsbENhY2hlW2tleV0gPSBjZWxsUmVuZGVyZXIoY2VsbFJlbmRlcmVyUGFyYW1zKTtcbiAgICAgICAgfVxuICAgICAgICByZW5kZXJlZENlbGwgPSBjZWxsQ2FjaGVba2V5XTtcblxuICAgICAgICAvLyBJZiB0aGUgdXNlciBpcyBubyBsb25nZXIgc2Nyb2xsaW5nLCBkb24ndCBjYWNoZSBjZWxscy5cbiAgICAgICAgLy8gVGhpcyBtYWtlcyBkeW5hbWljIGNlbGwgY29udGVudCBkaWZmaWN1bHQgZm9yIHVzZXJzIGFuZCB3b3VsZCBhbHNvIGxlYWQgdG8gYSBoZWF2aWVyIG1lbW9yeSBmb290cHJpbnQuXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZW5kZXJlZENlbGwgPSBjZWxsUmVuZGVyZXIoY2VsbFJlbmRlcmVyUGFyYW1zKTtcbiAgICAgIH1cbiAgICAgIGlmIChyZW5kZXJlZENlbGwgPT0gbnVsbCB8fCByZW5kZXJlZENlbGwgPT09IGZhbHNlKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgd2FybkFib3V0TWlzc2luZ1N0eWxlKHBhcmVudCwgcmVuZGVyZWRDZWxsKTtcbiAgICAgIH1cbiAgICAgIGlmICghcmVuZGVyZWRDZWxsLnByb3BzLnJvbGUpIHtcbiAgICAgICAgcmVuZGVyZWRDZWxsID0gLyojX19QVVJFX18qL1JlYWN0LmNsb25lRWxlbWVudChyZW5kZXJlZENlbGwsIHtcbiAgICAgICAgICByb2xlOiAnZ3JpZGNlbGwnXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgcmVuZGVyZWRDZWxscy5wdXNoKHJlbmRlcmVkQ2VsbCk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZW5kZXJlZENlbGxzO1xufVxuZnVuY3Rpb24gd2FybkFib3V0TWlzc2luZ1N0eWxlKHBhcmVudCwgcmVuZGVyZWRDZWxsKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKHJlbmRlcmVkQ2VsbCkge1xuICAgICAgLy8gSWYgdGhlIGRpcmVjdCBjaGlsZCBpcyBhIENlbGxNZWFzdXJlciwgdGhlbiB3ZSBzaG91bGQgY2hlY2sgaXRzIGNoaWxkXG4gICAgICAvLyBTZWUgaXNzdWUgIzYxMVxuICAgICAgaWYgKHJlbmRlcmVkQ2VsbC50eXBlICYmIHJlbmRlcmVkQ2VsbC50eXBlLl9faW50ZXJuYWxDZWxsTWVhc3VyZXJGbGFnKSB7XG4gICAgICAgIHJlbmRlcmVkQ2VsbCA9IHJlbmRlcmVkQ2VsbC5wcm9wcy5jaGlsZHJlbjtcbiAgICAgIH1cbiAgICAgIGlmIChyZW5kZXJlZENlbGwgJiYgcmVuZGVyZWRDZWxsLnByb3BzICYmIHJlbmRlcmVkQ2VsbC5wcm9wcy5zdHlsZSA9PT0gdW5kZWZpbmVkICYmIHBhcmVudC5fX3dhcm5lZEFib3V0TWlzc2luZ1N0eWxlICE9PSB0cnVlKSB7XG4gICAgICAgIHBhcmVudC5fX3dhcm5lZEFib3V0TWlzc2luZ1N0eWxlID0gdHJ1ZTtcbiAgICAgICAgY29uc29sZS53YXJuKCdSZW5kZXJlZCBjZWxsIHNob3VsZCBpbmNsdWRlIHN0eWxlIHByb3BlcnR5IGZvciBwb3NpdGlvbmluZy4nKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn0iLCIvKjo6IGltcG9ydCB0eXBlIHtPdmVyc2NhbkluZGljZXNHZXR0ZXJQYXJhbXMsIE92ZXJzY2FuSW5kaWNlc30gZnJvbSAnLi90eXBlcyc7Ki9cbmV4cG9ydCB2YXIgU0NST0xMX0RJUkVDVElPTl9CQUNLV0FSRCA9IC0xO1xuZXhwb3J0IHZhciBTQ1JPTExfRElSRUNUSU9OX0ZPUldBUkQgPSAxO1xuZXhwb3J0IHZhciBTQ1JPTExfRElSRUNUSU9OX0hPUklaT05UQUwgPSAnaG9yaXpvbnRhbCc7XG5leHBvcnQgdmFyIFNDUk9MTF9ESVJFQ1RJT05fVkVSVElDQUwgPSAndmVydGljYWwnO1xuXG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIG51bWJlciBvZiBjZWxscyB0byBvdmVyc2NhbiBiZWZvcmUgYW5kIGFmdGVyIGEgc3BlY2lmaWVkIHJhbmdlLlxuICogVGhpcyBmdW5jdGlvbiBlbnN1cmVzIHRoYXQgb3ZlcnNjYW5uaW5nIGRvZXNuJ3QgZXhjZWVkIHRoZSBhdmFpbGFibGUgY2VsbHMuXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGVmYXVsdE92ZXJzY2FuSW5kaWNlc0dldHRlcihfcmVmIC8qOjogKi8pIC8qOiBPdmVyc2NhbkluZGljZXMqL3tcbiAgdmFyIGNlbGxDb3VudCA9IF9yZWYgLyo6OiAqLy5jZWxsQ291bnQsXG4gICAgb3ZlcnNjYW5DZWxsc0NvdW50ID0gX3JlZiAvKjo6ICovLm92ZXJzY2FuQ2VsbHNDb3VudCxcbiAgICBzY3JvbGxEaXJlY3Rpb24gPSBfcmVmIC8qOjogKi8uc2Nyb2xsRGlyZWN0aW9uLFxuICAgIHN0YXJ0SW5kZXggPSBfcmVmIC8qOjogKi8uc3RhcnRJbmRleCxcbiAgICBzdG9wSW5kZXggPSBfcmVmIC8qOjogKi8uc3RvcEluZGV4O1xuICAvLyBNYWtlIHN1cmUgd2UgcmVuZGVyIGF0IGxlYXN0IDEgY2VsbCBleHRyYSBiZWZvcmUgYW5kIGFmdGVyIChleGNlcHQgbmVhciBib3VuZGFyaWVzKVxuICAvLyBUaGlzIGlzIG5lY2Vzc2FyeSBpbiBvcmRlciB0byBzdXBwb3J0IGtleWJvYXJkIG5hdmlnYXRpb24gKFRBQi9TSElGVCtUQUIpIGluIHNvbWUgY2FzZXNcbiAgLy8gRm9yIG1vcmUgaW5mbyBzZWUgaXNzdWVzICM2MjVcbiAgb3ZlcnNjYW5DZWxsc0NvdW50ID0gTWF0aC5tYXgoMSwgb3ZlcnNjYW5DZWxsc0NvdW50KTtcbiAgaWYgKHNjcm9sbERpcmVjdGlvbiA9PT0gU0NST0xMX0RJUkVDVElPTl9GT1JXQVJEKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG92ZXJzY2FuU3RhcnRJbmRleDogTWF0aC5tYXgoMCwgc3RhcnRJbmRleCAtIDEpLFxuICAgICAgb3ZlcnNjYW5TdG9wSW5kZXg6IE1hdGgubWluKGNlbGxDb3VudCAtIDEsIHN0b3BJbmRleCArIG92ZXJzY2FuQ2VsbHNDb3VudClcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB7XG4gICAgICBvdmVyc2NhblN0YXJ0SW5kZXg6IE1hdGgubWF4KDAsIHN0YXJ0SW5kZXggLSBvdmVyc2NhbkNlbGxzQ291bnQpLFxuICAgICAgb3ZlcnNjYW5TdG9wSW5kZXg6IE1hdGgubWluKGNlbGxDb3VudCAtIDEsIHN0b3BJbmRleCArIDEpXG4gICAgfTtcbiAgfVxufSIsImZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KHIsIGEpIHtcbiAgKG51bGwgPT0gYSB8fCBhID4gci5sZW5ndGgpICYmIChhID0gci5sZW5ndGgpO1xuICBmb3IgKHZhciBlID0gMCwgbiA9IEFycmF5KGEpOyBlIDwgYTsgZSsrKSBuW2VdID0gcltlXTtcbiAgcmV0dXJuIG47XG59XG5leHBvcnQgeyBfYXJyYXlMaWtlVG9BcnJheSBhcyBkZWZhdWx0IH07IiwiaW1wb3J0IGFycmF5TGlrZVRvQXJyYXkgZnJvbSBcIi4vYXJyYXlMaWtlVG9BcnJheS5qc1wiO1xuZnVuY3Rpb24gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KHIsIGEpIHtcbiAgaWYgKHIpIHtcbiAgICBpZiAoXCJzdHJpbmdcIiA9PSB0eXBlb2YgcikgcmV0dXJuIGFycmF5TGlrZVRvQXJyYXkociwgYSk7XG4gICAgdmFyIHQgPSB7fS50b1N0cmluZy5jYWxsKHIpLnNsaWNlKDgsIC0xKTtcbiAgICByZXR1cm4gXCJPYmplY3RcIiA9PT0gdCAmJiByLmNvbnN0cnVjdG9yICYmICh0ID0gci5jb25zdHJ1Y3Rvci5uYW1lKSwgXCJNYXBcIiA9PT0gdCB8fCBcIlNldFwiID09PSB0ID8gQXJyYXkuZnJvbShyKSA6IFwiQXJndW1lbnRzXCIgPT09IHQgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QodCkgPyBhcnJheUxpa2VUb0FycmF5KHIsIGEpIDogdm9pZCAwO1xuICB9XG59XG5leHBvcnQgeyBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkgYXMgZGVmYXVsdCB9OyIsImltcG9ydCBfdG9Db25zdW1hYmxlQXJyYXkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvdG9Db25zdW1hYmxlQXJyYXlcIjtcbmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIjtcbmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3NcIjtcbmltcG9ydCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCI7XG5pbXBvcnQgX2dldFByb3RvdHlwZU9mIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mXCI7XG5pbXBvcnQgX2luaGVyaXRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCI7XG5pbXBvcnQgX2RlZmluZVByb3BlcnR5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5XCI7XG5mdW5jdGlvbiBfY2FsbFN1cGVyKHQsIG8sIGUpIHsgcmV0dXJuIG8gPSBfZ2V0UHJvdG90eXBlT2YobyksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHQsIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSA/IFJlZmxlY3QuY29uc3RydWN0KG8sIGUgfHwgW10sIF9nZXRQcm90b3R5cGVPZih0KS5jb25zdHJ1Y3RvcikgOiBvLmFwcGx5KHQsIGUpKTsgfVxuZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgdHJ5IHsgdmFyIHQgPSAhQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyB9IGNhdGNoICh0KSB7fSByZXR1cm4gKF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSBmdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyByZXR1cm4gISF0OyB9KSgpOyB9XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNyZWF0ZUNhbGxiYWNrTWVtb2l6ZXIgZnJvbSAnLi4vdXRpbHMvY3JlYXRlQ2FsbGJhY2tNZW1vaXplcic7XG5cbi8qKlxuICogSGlnaGVyLW9yZGVyIGNvbXBvbmVudCB0aGF0IG1hbmFnZXMgbGF6eS1sb2FkaW5nIGZvciBcImluZmluaXRlXCIgZGF0YS5cbiAqIFRoaXMgY29tcG9uZW50IGRlY29yYXRlcyBhIHZpcnR1YWwgY29tcG9uZW50IGFuZCBqdXN0LWluLXRpbWUgcHJlZmV0Y2hlcyByb3dzIGFzIGEgdXNlciBzY3JvbGxzLlxuICogSXQgaXMgaW50ZW5kZWQgYXMgYSBjb252ZW5pZW5jZSBjb21wb25lbnQ7IGZvcmsgaXQgaWYgeW91J2QgbGlrZSBmaW5lci1ncmFpbmVkIGNvbnRyb2wgb3ZlciBkYXRhLWxvYWRpbmcuXG4gKi9cbnZhciBJbmZpbml0ZUxvYWRlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1JlYWN0JFB1cmVDb21wb25lbnQpIHtcbiAgZnVuY3Rpb24gSW5maW5pdGVMb2FkZXIocHJvcHMsIGNvbnRleHQpIHtcbiAgICB2YXIgX3RoaXM7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEluZmluaXRlTG9hZGVyKTtcbiAgICBfdGhpcyA9IF9jYWxsU3VwZXIodGhpcywgSW5maW5pdGVMb2FkZXIsIFtwcm9wcywgY29udGV4dF0pO1xuICAgIF90aGlzLl9sb2FkTW9yZVJvd3NNZW1vaXplciA9IGNyZWF0ZUNhbGxiYWNrTWVtb2l6ZXIoKTtcbiAgICBfdGhpcy5fb25Sb3dzUmVuZGVyZWQgPSBfdGhpcy5fb25Sb3dzUmVuZGVyZWQuYmluZChfdGhpcyk7XG4gICAgX3RoaXMuX3JlZ2lzdGVyQ2hpbGQgPSBfdGhpcy5fcmVnaXN0ZXJDaGlsZC5iaW5kKF90aGlzKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cbiAgX2luaGVyaXRzKEluZmluaXRlTG9hZGVyLCBfUmVhY3QkUHVyZUNvbXBvbmVudCk7XG4gIHJldHVybiBfY3JlYXRlQ2xhc3MoSW5maW5pdGVMb2FkZXIsIFt7XG4gICAga2V5OiBcInJlc2V0TG9hZE1vcmVSb3dzQ2FjaGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVzZXRMb2FkTW9yZVJvd3NDYWNoZShhdXRvUmVsb2FkKSB7XG4gICAgICB0aGlzLl9sb2FkTW9yZVJvd3NNZW1vaXplciA9IGNyZWF0ZUNhbGxiYWNrTWVtb2l6ZXIoKTtcbiAgICAgIGlmIChhdXRvUmVsb2FkKSB7XG4gICAgICAgIHRoaXMuX2RvU3R1ZmYodGhpcy5fbGFzdFJlbmRlcmVkU3RhcnRJbmRleCwgdGhpcy5fbGFzdFJlbmRlcmVkU3RvcEluZGV4KTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBjaGlsZHJlbiA9IHRoaXMucHJvcHMuY2hpbGRyZW47XG4gICAgICByZXR1cm4gY2hpbGRyZW4oe1xuICAgICAgICBvblJvd3NSZW5kZXJlZDogdGhpcy5fb25Sb3dzUmVuZGVyZWQsXG4gICAgICAgIHJlZ2lzdGVyQ2hpbGQ6IHRoaXMuX3JlZ2lzdGVyQ2hpbGRcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJfbG9hZFVubG9hZGVkUmFuZ2VzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9sb2FkVW5sb2FkZWRSYW5nZXModW5sb2FkZWRSYW5nZXMpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuICAgICAgdmFyIGxvYWRNb3JlUm93cyA9IHRoaXMucHJvcHMubG9hZE1vcmVSb3dzO1xuICAgICAgdW5sb2FkZWRSYW5nZXMuZm9yRWFjaChmdW5jdGlvbiAodW5sb2FkZWRSYW5nZSkge1xuICAgICAgICB2YXIgcHJvbWlzZSA9IGxvYWRNb3JlUm93cyh1bmxvYWRlZFJhbmdlKTtcbiAgICAgICAgaWYgKHByb21pc2UpIHtcbiAgICAgICAgICBwcm9taXNlLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgLy8gUmVmcmVzaCB0aGUgdmlzaWJsZSByb3dzIGlmIGFueSBvZiB0aGVtIGhhdmUganVzdCBiZWVuIGxvYWRlZC5cbiAgICAgICAgICAgIC8vIE90aGVyd2lzZSB0aGV5IHdpbGwgcmVtYWluIGluIHRoZWlyIHVubG9hZGVkIHZpc3VhbCBzdGF0ZS5cbiAgICAgICAgICAgIGlmIChpc1JhbmdlVmlzaWJsZSh7XG4gICAgICAgICAgICAgIGxhc3RSZW5kZXJlZFN0YXJ0SW5kZXg6IF90aGlzMi5fbGFzdFJlbmRlcmVkU3RhcnRJbmRleCxcbiAgICAgICAgICAgICAgbGFzdFJlbmRlcmVkU3RvcEluZGV4OiBfdGhpczIuX2xhc3RSZW5kZXJlZFN0b3BJbmRleCxcbiAgICAgICAgICAgICAgc3RhcnRJbmRleDogdW5sb2FkZWRSYW5nZS5zdGFydEluZGV4LFxuICAgICAgICAgICAgICBzdG9wSW5kZXg6IHVubG9hZGVkUmFuZ2Uuc3RvcEluZGV4XG4gICAgICAgICAgICB9KSkge1xuICAgICAgICAgICAgICBpZiAoX3RoaXMyLl9yZWdpc3RlcmVkQ2hpbGQpIHtcbiAgICAgICAgICAgICAgICBmb3JjZVVwZGF0ZVJlYWN0VmlydHVhbGl6ZWRDb21wb25lbnQoX3RoaXMyLl9yZWdpc3RlcmVkQ2hpbGQsIF90aGlzMi5fbGFzdFJlbmRlcmVkU3RhcnRJbmRleCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIl9vblJvd3NSZW5kZXJlZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfb25Sb3dzUmVuZGVyZWQoX3JlZikge1xuICAgICAgdmFyIHN0YXJ0SW5kZXggPSBfcmVmLnN0YXJ0SW5kZXgsXG4gICAgICAgIHN0b3BJbmRleCA9IF9yZWYuc3RvcEluZGV4O1xuICAgICAgdGhpcy5fbGFzdFJlbmRlcmVkU3RhcnRJbmRleCA9IHN0YXJ0SW5kZXg7XG4gICAgICB0aGlzLl9sYXN0UmVuZGVyZWRTdG9wSW5kZXggPSBzdG9wSW5kZXg7XG4gICAgICB0aGlzLl9kb1N0dWZmKHN0YXJ0SW5kZXgsIHN0b3BJbmRleCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIl9kb1N0dWZmXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9kb1N0dWZmKHN0YXJ0SW5kZXgsIHN0b3BJbmRleCkge1xuICAgICAgdmFyIF9yZWYyLFxuICAgICAgICBfdGhpczMgPSB0aGlzO1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgaXNSb3dMb2FkZWQgPSBfdGhpcyRwcm9wcy5pc1Jvd0xvYWRlZCxcbiAgICAgICAgbWluaW11bUJhdGNoU2l6ZSA9IF90aGlzJHByb3BzLm1pbmltdW1CYXRjaFNpemUsXG4gICAgICAgIHJvd0NvdW50ID0gX3RoaXMkcHJvcHMucm93Q291bnQsXG4gICAgICAgIHRocmVzaG9sZCA9IF90aGlzJHByb3BzLnRocmVzaG9sZDtcbiAgICAgIHZhciB1bmxvYWRlZFJhbmdlcyA9IHNjYW5Gb3JVbmxvYWRlZFJhbmdlcyh7XG4gICAgICAgIGlzUm93TG9hZGVkOiBpc1Jvd0xvYWRlZCxcbiAgICAgICAgbWluaW11bUJhdGNoU2l6ZTogbWluaW11bUJhdGNoU2l6ZSxcbiAgICAgICAgcm93Q291bnQ6IHJvd0NvdW50LFxuICAgICAgICBzdGFydEluZGV4OiBNYXRoLm1heCgwLCBzdGFydEluZGV4IC0gdGhyZXNob2xkKSxcbiAgICAgICAgc3RvcEluZGV4OiBNYXRoLm1pbihyb3dDb3VudCAtIDEsIHN0b3BJbmRleCArIHRocmVzaG9sZClcbiAgICAgIH0pO1xuXG4gICAgICAvLyBGb3IgbWVtb2l6ZSBjb21wYXJpc29uXG4gICAgICB2YXIgc3F1YXNoZWRVbmxvYWRlZFJhbmdlcyA9IChfcmVmMiA9IFtdKS5jb25jYXQuYXBwbHkoX3JlZjIsIF90b0NvbnN1bWFibGVBcnJheSh1bmxvYWRlZFJhbmdlcy5tYXAoZnVuY3Rpb24gKF9yZWYzKSB7XG4gICAgICAgIHZhciBzdGFydEluZGV4ID0gX3JlZjMuc3RhcnRJbmRleCxcbiAgICAgICAgICBzdG9wSW5kZXggPSBfcmVmMy5zdG9wSW5kZXg7XG4gICAgICAgIHJldHVybiBbc3RhcnRJbmRleCwgc3RvcEluZGV4XTtcbiAgICAgIH0pKSk7XG4gICAgICB0aGlzLl9sb2FkTW9yZVJvd3NNZW1vaXplcih7XG4gICAgICAgIGNhbGxiYWNrOiBmdW5jdGlvbiBjYWxsYmFjaygpIHtcbiAgICAgICAgICBfdGhpczMuX2xvYWRVbmxvYWRlZFJhbmdlcyh1bmxvYWRlZFJhbmdlcyk7XG4gICAgICAgIH0sXG4gICAgICAgIGluZGljZXM6IHtcbiAgICAgICAgICBzcXVhc2hlZFVubG9hZGVkUmFuZ2VzOiBzcXVhc2hlZFVubG9hZGVkUmFuZ2VzXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJfcmVnaXN0ZXJDaGlsZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfcmVnaXN0ZXJDaGlsZChyZWdpc3RlcmVkQ2hpbGQpIHtcbiAgICAgIHRoaXMuX3JlZ2lzdGVyZWRDaGlsZCA9IHJlZ2lzdGVyZWRDaGlsZDtcbiAgICB9XG4gIH1dKTtcbn0oUmVhY3QuUHVyZUNvbXBvbmVudCk7XG4vKipcbiAqIERldGVybWluZXMgaWYgdGhlIHNwZWNpZmllZCBzdGFydC9zdG9wIHJhbmdlIGlzIHZpc2libGUgYmFzZWQgb24gdGhlIG1vc3QgcmVjZW50bHkgcmVuZGVyZWQgcmFuZ2UuXG4gKi9cbl9kZWZpbmVQcm9wZXJ0eShJbmZpbml0ZUxvYWRlciwgXCJkZWZhdWx0UHJvcHNcIiwge1xuICBtaW5pbXVtQmF0Y2hTaXplOiAxMCxcbiAgcm93Q291bnQ6IDAsXG4gIHRocmVzaG9sZDogMTVcbn0pO1xuZXhwb3J0IHsgSW5maW5pdGVMb2FkZXIgYXMgZGVmYXVsdCB9O1xuSW5maW5pdGVMb2FkZXIucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKipcbiAgICogRnVuY3Rpb24gcmVzcG9uc2libGUgZm9yIHJlbmRlcmluZyBhIHZpcnR1YWxpemVkIGNvbXBvbmVudC5cbiAgICogVGhpcyBmdW5jdGlvbiBzaG91bGQgaW1wbGVtZW50IHRoZSBmb2xsb3dpbmcgc2lnbmF0dXJlOlxuICAgKiAoeyBvblJvd3NSZW5kZXJlZCwgcmVnaXN0ZXJDaGlsZCB9KSA9PiBQcm9wVHlwZXMuZWxlbWVudFxuICAgKlxuICAgKiBUaGUgc3BlY2lmaWVkIDpvblJvd3NSZW5kZXJlZCBmdW5jdGlvbiBzaG91bGQgYmUgcGFzc2VkIHRocm91Z2ggdG8gdGhlIGNoaWxkJ3MgOm9uUm93c1JlbmRlcmVkIHByb3BlcnR5LlxuICAgKiBUaGUgOnJlZ2lzdGVyQ2hpbGQgY2FsbGJhY2sgc2hvdWxkIGJlIHNldCBhcyB0aGUgdmlydHVhbGl6ZWQgY29tcG9uZW50J3MgOnJlZi5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAvKipcbiAgICogRnVuY3Rpb24gcmVzcG9uc2libGUgZm9yIHRyYWNraW5nIHRoZSBsb2FkZWQgc3RhdGUgb2YgZWFjaCByb3cuXG4gICAqIEl0IHNob3VsZCBpbXBsZW1lbnQgdGhlIGZvbGxvd2luZyBzaWduYXR1cmU6ICh7IGluZGV4OiBudW1iZXIgfSk6IGJvb2xlYW5cbiAgICovXG4gIGlzUm93TG9hZGVkOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAvKipcbiAgICogQ2FsbGJhY2sgdG8gYmUgaW52b2tlZCB3aGVuIG1vcmUgcm93cyBtdXN0IGJlIGxvYWRlZC5cbiAgICogSXQgc2hvdWxkIGltcGxlbWVudCB0aGUgZm9sbG93aW5nIHNpZ25hdHVyZTogKHsgc3RhcnRJbmRleCwgc3RvcEluZGV4IH0pOiBQcm9taXNlXG4gICAqIFRoZSByZXR1cm5lZCBQcm9taXNlIHNob3VsZCBiZSByZXNvbHZlZCBvbmNlIHJvdyBkYXRhIGhhcyBmaW5pc2hlZCBsb2FkaW5nLlxuICAgKiBJdCB3aWxsIGJlIHVzZWQgdG8gZGV0ZXJtaW5lIHdoZW4gdG8gcmVmcmVzaCB0aGUgbGlzdCB3aXRoIHRoZSBuZXdseS1sb2FkZWQgZGF0YS5cbiAgICogVGhpcyBjYWxsYmFjayBtYXkgYmUgY2FsbGVkIG11bHRpcGxlIHRpbWVzIGluIHJlYWN0aW9uIHRvIGEgc2luZ2xlIHNjcm9sbCBldmVudC5cbiAgICovXG4gIGxvYWRNb3JlUm93czogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgLyoqXG4gICAqIE1pbmltdW0gbnVtYmVyIG9mIHJvd3MgdG8gYmUgbG9hZGVkIGF0IGEgdGltZS5cbiAgICogVGhpcyBwcm9wZXJ0eSBjYW4gYmUgdXNlZCB0byBiYXRjaCByZXF1ZXN0cyB0byByZWR1Y2UgSFRUUCByZXF1ZXN0cy5cbiAgICovXG4gIG1pbmltdW1CYXRjaFNpemU6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZCxcbiAgLyoqXG4gICAqIE51bWJlciBvZiByb3dzIGluIGxpc3Q7IGNhbiBiZSBhcmJpdHJhcnkgaGlnaCBudW1iZXIgaWYgYWN0dWFsIG51bWJlciBpcyB1bmtub3duLlxuICAgKi9cbiAgcm93Q291bnQ6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZCxcbiAgLyoqXG4gICAqIFRocmVzaG9sZCBhdCB3aGljaCB0byBwcmUtZmV0Y2ggZGF0YS5cbiAgICogQSB0aHJlc2hvbGQgWCBtZWFucyB0aGF0IGRhdGEgd2lsbCBzdGFydCBsb2FkaW5nIHdoZW4gYSB1c2VyIHNjcm9sbHMgd2l0aGluIFggcm93cy5cbiAgICogVGhpcyB2YWx1ZSBkZWZhdWx0cyB0byAxNS5cbiAgICovXG4gIHRocmVzaG9sZDogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkXG59IDoge307XG5leHBvcnQgZnVuY3Rpb24gaXNSYW5nZVZpc2libGUoX3JlZjQpIHtcbiAgdmFyIGxhc3RSZW5kZXJlZFN0YXJ0SW5kZXggPSBfcmVmNC5sYXN0UmVuZGVyZWRTdGFydEluZGV4LFxuICAgIGxhc3RSZW5kZXJlZFN0b3BJbmRleCA9IF9yZWY0Lmxhc3RSZW5kZXJlZFN0b3BJbmRleCxcbiAgICBzdGFydEluZGV4ID0gX3JlZjQuc3RhcnRJbmRleCxcbiAgICBzdG9wSW5kZXggPSBfcmVmNC5zdG9wSW5kZXg7XG4gIHJldHVybiAhKHN0YXJ0SW5kZXggPiBsYXN0UmVuZGVyZWRTdG9wSW5kZXggfHwgc3RvcEluZGV4IDwgbGFzdFJlbmRlcmVkU3RhcnRJbmRleCk7XG59XG5cbi8qKlxuICogUmV0dXJucyBhbGwgb2YgdGhlIHJhbmdlcyB3aXRoaW4gYSBsYXJnZXIgcmFuZ2UgdGhhdCBjb250YWluIHVubG9hZGVkIHJvd3MuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzY2FuRm9yVW5sb2FkZWRSYW5nZXMoX3JlZjUpIHtcbiAgdmFyIGlzUm93TG9hZGVkID0gX3JlZjUuaXNSb3dMb2FkZWQsXG4gICAgbWluaW11bUJhdGNoU2l6ZSA9IF9yZWY1Lm1pbmltdW1CYXRjaFNpemUsXG4gICAgcm93Q291bnQgPSBfcmVmNS5yb3dDb3VudCxcbiAgICBzdGFydEluZGV4ID0gX3JlZjUuc3RhcnRJbmRleCxcbiAgICBzdG9wSW5kZXggPSBfcmVmNS5zdG9wSW5kZXg7XG4gIHZhciB1bmxvYWRlZFJhbmdlcyA9IFtdO1xuICB2YXIgcmFuZ2VTdGFydEluZGV4ID0gbnVsbDtcbiAgdmFyIHJhbmdlU3RvcEluZGV4ID0gbnVsbDtcbiAgZm9yICh2YXIgaW5kZXggPSBzdGFydEluZGV4OyBpbmRleCA8PSBzdG9wSW5kZXg7IGluZGV4KyspIHtcbiAgICB2YXIgbG9hZGVkID0gaXNSb3dMb2FkZWQoe1xuICAgICAgaW5kZXg6IGluZGV4XG4gICAgfSk7XG4gICAgaWYgKCFsb2FkZWQpIHtcbiAgICAgIHJhbmdlU3RvcEluZGV4ID0gaW5kZXg7XG4gICAgICBpZiAocmFuZ2VTdGFydEluZGV4ID09PSBudWxsKSB7XG4gICAgICAgIHJhbmdlU3RhcnRJbmRleCA9IGluZGV4O1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAocmFuZ2VTdG9wSW5kZXggIT09IG51bGwpIHtcbiAgICAgIHVubG9hZGVkUmFuZ2VzLnB1c2goe1xuICAgICAgICBzdGFydEluZGV4OiByYW5nZVN0YXJ0SW5kZXgsXG4gICAgICAgIHN0b3BJbmRleDogcmFuZ2VTdG9wSW5kZXhcbiAgICAgIH0pO1xuICAgICAgcmFuZ2VTdGFydEluZGV4ID0gcmFuZ2VTdG9wSW5kZXggPSBudWxsO1xuICAgIH1cbiAgfVxuXG4gIC8vIElmIDpyYW5nZVN0b3BJbmRleCBpcyBub3QgbnVsbCBpdCBtZWFucyB3ZSBoYXZlbid0IHJhbiBvdXQgb2YgdW5sb2FkZWQgcm93cy5cbiAgLy8gU2NhbiBmb3J3YXJkIHRvIHRyeSBmaWxsaW5nIG91ciA6bWluaW11bUJhdGNoU2l6ZS5cbiAgaWYgKHJhbmdlU3RvcEluZGV4ICE9PSBudWxsKSB7XG4gICAgdmFyIHBvdGVudGlhbFN0b3BJbmRleCA9IE1hdGgubWluKE1hdGgubWF4KHJhbmdlU3RvcEluZGV4LCByYW5nZVN0YXJ0SW5kZXggKyBtaW5pbXVtQmF0Y2hTaXplIC0gMSksIHJvd0NvdW50IC0gMSk7XG4gICAgZm9yICh2YXIgX2luZGV4ID0gcmFuZ2VTdG9wSW5kZXggKyAxOyBfaW5kZXggPD0gcG90ZW50aWFsU3RvcEluZGV4OyBfaW5kZXgrKykge1xuICAgICAgaWYgKCFpc1Jvd0xvYWRlZCh7XG4gICAgICAgIGluZGV4OiBfaW5kZXhcbiAgICAgIH0pKSB7XG4gICAgICAgIHJhbmdlU3RvcEluZGV4ID0gX2luZGV4O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHVubG9hZGVkUmFuZ2VzLnB1c2goe1xuICAgICAgc3RhcnRJbmRleDogcmFuZ2VTdGFydEluZGV4LFxuICAgICAgc3RvcEluZGV4OiByYW5nZVN0b3BJbmRleFxuICAgIH0pO1xuICB9XG5cbiAgLy8gQ2hlY2sgdG8gc2VlIGlmIG91ciBmaXJzdCByYW5nZSBlbmRlZCBwcmVtYXR1cmVseS5cbiAgLy8gSW4gdGhpcyBjYXNlIHdlIHNob3VsZCBzY2FuIGJhY2t3YXJkcyB0byB0cnkgZmlsbGluZyBvdXIgOm1pbmltdW1CYXRjaFNpemUuXG4gIGlmICh1bmxvYWRlZFJhbmdlcy5sZW5ndGgpIHtcbiAgICB2YXIgZmlyc3RVbmxvYWRlZFJhbmdlID0gdW5sb2FkZWRSYW5nZXNbMF07XG4gICAgd2hpbGUgKGZpcnN0VW5sb2FkZWRSYW5nZS5zdG9wSW5kZXggLSBmaXJzdFVubG9hZGVkUmFuZ2Uuc3RhcnRJbmRleCArIDEgPCBtaW5pbXVtQmF0Y2hTaXplICYmIGZpcnN0VW5sb2FkZWRSYW5nZS5zdGFydEluZGV4ID4gMCkge1xuICAgICAgdmFyIF9pbmRleDIgPSBmaXJzdFVubG9hZGVkUmFuZ2Uuc3RhcnRJbmRleCAtIDE7XG4gICAgICBpZiAoIWlzUm93TG9hZGVkKHtcbiAgICAgICAgaW5kZXg6IF9pbmRleDJcbiAgICAgIH0pKSB7XG4gICAgICAgIGZpcnN0VW5sb2FkZWRSYW5nZS5zdGFydEluZGV4ID0gX2luZGV4MjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gdW5sb2FkZWRSYW5nZXM7XG59XG5cbi8qKlxuICogU2luY2UgUlYgY29tcG9uZW50cyB1c2Ugc2hhbGxvd0NvbXBhcmUgd2UgbmVlZCB0byBmb3JjZSBhIHJlbmRlciAoZXZlbiB0aG91Z2ggcHJvcHMgaGF2ZW4ndCBjaGFuZ2VkKS5cbiAqIEhvd2V2ZXIgSW5maW5pdGVMb2FkZXIgbWF5IHdyYXAgYSBHcmlkIG9yIGl0IG1heSB3cmFwIGEgVGFibGUgb3IgTGlzdC5cbiAqIEluIHRoZSBmaXJzdCBjYXNlIHRoZSBidWlsdC1pbiBSZWFjdCBmb3JjZVVwZGF0ZSgpIG1ldGhvZCBpcyBzdWZmaWNpZW50IHRvIGZvcmNlIGEgcmUtcmVuZGVyLFxuICogQnV0IGluIHRoZSBsYXR0ZXIgY2FzZXMgd2UgbmVlZCB0byB1c2UgdGhlIFJWLXNwZWNpZmljIGZvcmNlVXBkYXRlR3JpZCgpIG1ldGhvZC5cbiAqIEVsc2UgdGhlIGlubmVyIEdyaWQgd2lsbCBub3QgYmUgcmUtcmVuZGVyZWQgYW5kIHZpc3VhbHMgbWF5IGJlIHN0YWxlLlxuICpcbiAqIEFkZGl0aW9uYWxseSwgd2hpbGUgYSBHcmlkIGlzIHNjcm9sbGluZyB0aGUgY2VsbHMgY2FuIGJlIGNhY2hlZCxcbiAqIFNvIGl0J3MgaW1wb3J0YW50IHRvIGludmFsaWRhdGUgdGhhdCBjYWNoZSBieSByZWNhbGN1bGF0aW5nIHNpemVzXG4gKiBiZWZvcmUgZm9yY2luZyBhIHJlcmVuZGVyLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZm9yY2VVcGRhdGVSZWFjdFZpcnR1YWxpemVkQ29tcG9uZW50KGNvbXBvbmVudCkge1xuICB2YXIgY3VycmVudEluZGV4ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAwO1xuICB2YXIgcmVjb21wdXRlU2l6ZSA9IHR5cGVvZiBjb21wb25lbnQucmVjb21wdXRlR3JpZFNpemUgPT09ICdmdW5jdGlvbicgPyBjb21wb25lbnQucmVjb21wdXRlR3JpZFNpemUgOiBjb21wb25lbnQucmVjb21wdXRlUm93SGVpZ2h0cztcbiAgaWYgKHJlY29tcHV0ZVNpemUpIHtcbiAgICByZWNvbXB1dGVTaXplLmNhbGwoY29tcG9uZW50LCBjdXJyZW50SW5kZXgpO1xuICB9IGVsc2Uge1xuICAgIGNvbXBvbmVudC5mb3JjZVVwZGF0ZSgpO1xuICB9XG59IiwiaW1wb3J0IGFycmF5V2l0aG91dEhvbGVzIGZyb20gXCIuL2FycmF5V2l0aG91dEhvbGVzLmpzXCI7XG5pbXBvcnQgaXRlcmFibGVUb0FycmF5IGZyb20gXCIuL2l0ZXJhYmxlVG9BcnJheS5qc1wiO1xuaW1wb3J0IHVuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5IGZyb20gXCIuL3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5LmpzXCI7XG5pbXBvcnQgbm9uSXRlcmFibGVTcHJlYWQgZnJvbSBcIi4vbm9uSXRlcmFibGVTcHJlYWQuanNcIjtcbmZ1bmN0aW9uIF90b0NvbnN1bWFibGVBcnJheShyKSB7XG4gIHJldHVybiBhcnJheVdpdGhvdXRIb2xlcyhyKSB8fCBpdGVyYWJsZVRvQXJyYXkocikgfHwgdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkocikgfHwgbm9uSXRlcmFibGVTcHJlYWQoKTtcbn1cbmV4cG9ydCB7IF90b0NvbnN1bWFibGVBcnJheSBhcyBkZWZhdWx0IH07IiwiaW1wb3J0IGFycmF5TGlrZVRvQXJyYXkgZnJvbSBcIi4vYXJyYXlMaWtlVG9BcnJheS5qc1wiO1xuZnVuY3Rpb24gX2FycmF5V2l0aG91dEhvbGVzKHIpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkocikpIHJldHVybiBhcnJheUxpa2VUb0FycmF5KHIpO1xufVxuZXhwb3J0IHsgX2FycmF5V2l0aG91dEhvbGVzIGFzIGRlZmF1bHQgfTsiLCJmdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5KHIpIHtcbiAgaWYgKFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIFN5bWJvbCAmJiBudWxsICE9IHJbU3ltYm9sLml0ZXJhdG9yXSB8fCBudWxsICE9IHJbXCJAQGl0ZXJhdG9yXCJdKSByZXR1cm4gQXJyYXkuZnJvbShyKTtcbn1cbmV4cG9ydCB7IF9pdGVyYWJsZVRvQXJyYXkgYXMgZGVmYXVsdCB9OyIsImZ1bmN0aW9uIF9ub25JdGVyYWJsZVNwcmVhZCgpIHtcbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7XG59XG5leHBvcnQgeyBfbm9uSXRlcmFibGVTcHJlYWQgYXMgZGVmYXVsdCB9OyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCI7XG5pbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCI7XG5pbXBvcnQgX2NyZWF0ZUNsYXNzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzXCI7XG5pbXBvcnQgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4gZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiO1xuaW1wb3J0IF9nZXRQcm90b3R5cGVPZiBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZlwiO1xuaW1wb3J0IF9pbmhlcml0cyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiO1xuaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eVwiO1xuZnVuY3Rpb24gX2NhbGxTdXBlcih0LCBvLCBlKSB7IHJldHVybiBvID0gX2dldFByb3RvdHlwZU9mKG8pLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0LCBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgPyBSZWZsZWN0LmNvbnN0cnVjdChvLCBlIHx8IFtdLCBfZ2V0UHJvdG90eXBlT2YodCkuY29uc3RydWN0b3IpIDogby5hcHBseSh0LCBlKSk7IH1cbmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IHRyeSB7IHZhciB0ID0gIUJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgfSBjYXRjaCAodCkge30gcmV0dXJuIChfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgcmV0dXJuICEhdDsgfSkoKTsgfVxuLyo6OiBpbXBvcnQgdHlwZSB7XG4gIE5vQ29udGVudFJlbmRlcmVyLFxuICBBbGlnbm1lbnQsXG4gIENlbGxTaXplLFxuICBDZWxsUG9zaXRpb24sXG4gIE92ZXJzY2FuSW5kaWNlc0dldHRlcixcbiAgUmVuZGVyZWRTZWN0aW9uLFxuICBDZWxsUmVuZGVyZXJQYXJhbXMsXG4gIFNjcm9sbCBhcyBHcmlkU2Nyb2xsLFxufSBmcm9tICcuLi9HcmlkJzsqL1xuLyo6OiBpbXBvcnQgdHlwZSB7Um93UmVuZGVyZXIsIFJlbmRlcmVkUm93cywgU2Nyb2xsfSBmcm9tICcuL3R5cGVzJzsqL1xuaW1wb3J0IEdyaWQsIHsgYWNjZXNzaWJpbGl0eU92ZXJzY2FuSW5kaWNlc0dldHRlciB9IGZyb20gJy4uL0dyaWQnO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5cbi8qKlxuICogSXQgaXMgaW5lZmZpY2llbnQgdG8gY3JlYXRlIGFuZCBtYW5hZ2UgYSBsYXJnZSBsaXN0IG9mIERPTSBlbGVtZW50cyB3aXRoaW4gYSBzY3JvbGxpbmcgY29udGFpbmVyXG4gKiBpZiBvbmx5IGEgZmV3IG9mIHRob3NlIGVsZW1lbnRzIGFyZSB2aXNpYmxlLiBUaGUgcHJpbWFyeSBwdXJwb3NlIG9mIHRoaXMgY29tcG9uZW50IGlzIHRvIGltcHJvdmVcbiAqIHBlcmZvcm1hbmNlIGJ5IG9ubHkgcmVuZGVyaW5nIHRoZSBET00gbm9kZXMgdGhhdCBhIHVzZXIgaXMgYWJsZSB0byBzZWUgYmFzZWQgb24gdGhlaXIgY3VycmVudFxuICogc2Nyb2xsIHBvc2l0aW9uLlxuICpcbiAqIFRoaXMgY29tcG9uZW50IHJlbmRlcnMgYSB2aXJ0dWFsaXplZCBsaXN0IG9mIGVsZW1lbnRzIHdpdGggZWl0aGVyIGZpeGVkIG9yIGR5bmFtaWMgaGVpZ2h0cy5cbiAqL1xuLyo6OiB0eXBlIFByb3BzID0ge1xuICAnYXJpYS1sYWJlbCc/OiBzdHJpbmcsXG5cbiAgLyoqXG4gICAqIFJlbW92ZXMgZml4ZWQgaGVpZ2h0IGZyb20gdGhlIHNjcm9sbGluZ0NvbnRhaW5lciBzbyB0aGF0IHRoZSB0b3RhbCBoZWlnaHRcbiAgICogb2Ygcm93cyBjYW4gc3RyZXRjaCB0aGUgd2luZG93LiBJbnRlbmRlZCBmb3IgdXNlIHdpdGggV2luZG93U2Nyb2xsZXJcbiAgICotL1xuICBhdXRvSGVpZ2h0OiBib29sZWFuLFxuXG4gIC8qKiBPcHRpb25hbCBDU1MgY2xhc3MgbmFtZSAqLS9cbiAgY2xhc3NOYW1lPzogc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBVc2VkIHRvIGVzdGltYXRlIHRoZSB0b3RhbCBoZWlnaHQgb2YgYSBMaXN0IGJlZm9yZSBhbGwgb2YgaXRzIHJvd3MgaGF2ZSBhY3R1YWxseSBiZWVuIG1lYXN1cmVkLlxuICAgKiBUaGUgZXN0aW1hdGVkIHRvdGFsIGhlaWdodCBpcyBhZGp1c3RlZCBhcyByb3dzIGFyZSByZW5kZXJlZC5cbiAgICotL1xuICBlc3RpbWF0ZWRSb3dTaXplOiBudW1iZXIsXG5cbiAgLyoqIEhlaWdodCBjb25zdHJhaW50IGZvciBsaXN0IChkZXRlcm1pbmVzIGhvdyBtYW55IGFjdHVhbCByb3dzIGFyZSByZW5kZXJlZCkgKi0vXG4gIGhlaWdodDogbnVtYmVyLFxuXG4gIC8qKiBPcHRpb25hbCByZW5kZXJlciB0byBiZSB1c2VkIGluIHBsYWNlIG9mIHJvd3Mgd2hlbiByb3dDb3VudCBpcyAwICotL1xuICBub1Jvd3NSZW5kZXJlcjogTm9Db250ZW50UmVuZGVyZXIsXG5cbiAgLyoqIENhbGxiYWNrIGludm9rZWQgd2l0aCBpbmZvcm1hdGlvbiBhYm91dCB0aGUgc2xpY2Ugb2Ygcm93cyB0aGF0IHdlcmUganVzdCByZW5kZXJlZC4gICotL1xuXG4gIG9uUm93c1JlbmRlcmVkOiAocGFyYW1zOiBSZW5kZXJlZFJvd3MpID0+IHZvaWQsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGludm9rZWQgd2hlbmV2ZXIgdGhlIHNjcm9sbCBvZmZzZXQgY2hhbmdlcyB3aXRoaW4gdGhlIGlubmVyIHNjcm9sbGFibGUgcmVnaW9uLlxuICAgKiBUaGlzIGNhbGxiYWNrIGNhbiBiZSB1c2VkIHRvIHN5bmMgc2Nyb2xsaW5nIGJldHdlZW4gbGlzdHMsIHRhYmxlcywgb3IgZ3JpZHMuXG4gICAqLS9cbiAgb25TY3JvbGw6IChwYXJhbXM6IFNjcm9sbCkgPT4gdm9pZCxcblxuICAvKiogU2VlIEdyaWQjb3ZlcnNjYW5JbmRpY2VzR2V0dGVyICotL1xuICBvdmVyc2NhbkluZGljZXNHZXR0ZXI6IE92ZXJzY2FuSW5kaWNlc0dldHRlcixcblxuICAvKipcbiAgICogTnVtYmVyIG9mIHJvd3MgdG8gcmVuZGVyIGFib3ZlL2JlbG93IHRoZSB2aXNpYmxlIGJvdW5kcyBvZiB0aGUgbGlzdC5cbiAgICogVGhlc2Ugcm93cyBjYW4gaGVscCBmb3Igc21vb3RoZXIgc2Nyb2xsaW5nIG9uIHRvdWNoIGRldmljZXMuXG4gICAqLS9cbiAgb3ZlcnNjYW5Sb3dDb3VudDogbnVtYmVyLFxuXG4gIC8qKiBFaXRoZXIgYSBmaXhlZCByb3cgaGVpZ2h0IChudW1iZXIpIG9yIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSBoZWlnaHQgb2YgYSByb3cgZ2l2ZW4gaXRzIGluZGV4LiAgKi0vXG4gIHJvd0hlaWdodDogQ2VsbFNpemUsXG5cbiAgLyoqIFJlc3BvbnNpYmxlIGZvciByZW5kZXJpbmcgYSByb3cgZ2l2ZW4gYW4gaW5kZXg7ICh7IGluZGV4OiBudW1iZXIgfSk6IG5vZGUgKi0vXG4gIHJvd1JlbmRlcmVyOiBSb3dSZW5kZXJlcixcblxuICAvKiogTnVtYmVyIG9mIHJvd3MgaW4gbGlzdC4gKi0vXG4gIHJvd0NvdW50OiBudW1iZXIsXG5cbiAgLyoqIFNlZSBHcmlkI3Njcm9sbFRvQWxpZ25tZW50ICotL1xuICBzY3JvbGxUb0FsaWdubWVudDogQWxpZ25tZW50LFxuXG4gIC8qKiBSb3cgaW5kZXggdG8gZW5zdXJlIHZpc2libGUgKGJ5IGZvcmNlZnVsbHkgc2Nyb2xsaW5nIGlmIG5lY2Vzc2FyeSkgKi0vXG4gIHNjcm9sbFRvSW5kZXg6IG51bWJlcixcblxuICAvKiogVmVydGljYWwgb2Zmc2V0LiAqLS9cbiAgc2Nyb2xsVG9wPzogbnVtYmVyLFxuXG4gIC8qKiBPcHRpb25hbCBpbmxpbmUgc3R5bGUgKi0vXG4gIHN0eWxlOiBPYmplY3QsXG5cbiAgLyoqIFRhYiBpbmRleCBmb3IgZm9jdXMgKi0vXG4gIHRhYkluZGV4PzogbnVtYmVyLFxuXG4gIC8qKiBXaWR0aCBvZiBsaXN0ICotL1xuICB3aWR0aDogbnVtYmVyLFxufTsqL1xudmFyIExpc3QgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9SZWFjdCRQdXJlQ29tcG9uZW50KSB7XG4gIGZ1bmN0aW9uIExpc3QoKSB7XG4gICAgdmFyIF90aGlzO1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBMaXN0KTtcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuICAgIF90aGlzID0gX2NhbGxTdXBlcih0aGlzLCBMaXN0LCBbXS5jb25jYXQoYXJncykpO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJHcmlkXCIsIHZvaWQgMCk7XG4gICAgX2RlZmluZVByb3BlcnR5KF90aGlzLCBcIl9jZWxsUmVuZGVyZXJcIiwgZnVuY3Rpb24gKF9yZWYgLyo6OiAqLykge1xuICAgICAgdmFyIHBhcmVudCA9IF9yZWYgLyo6OiAqLy5wYXJlbnQsXG4gICAgICAgIHJvd0luZGV4ID0gX3JlZiAvKjo6ICovLnJvd0luZGV4LFxuICAgICAgICBzdHlsZSA9IF9yZWYgLyo6OiAqLy5zdHlsZSxcbiAgICAgICAgaXNTY3JvbGxpbmcgPSBfcmVmIC8qOjogKi8uaXNTY3JvbGxpbmcsXG4gICAgICAgIGlzVmlzaWJsZSA9IF9yZWYgLyo6OiAqLy5pc1Zpc2libGUsXG4gICAgICAgIGtleSA9IF9yZWYgLyo6OiAqLy5rZXk7XG4gICAgICB2YXIgcm93UmVuZGVyZXIgPSBfdGhpcy5wcm9wcy5yb3dSZW5kZXJlcjtcblxuICAgICAgLy8gVFJJQ0tZIFRoZSBzdHlsZSBvYmplY3QgaXMgc29tZXRpbWVzIGNhY2hlZCBieSBHcmlkLlxuICAgICAgLy8gVGhpcyBwcmV2ZW50cyBuZXcgc3R5bGUgb2JqZWN0cyBmcm9tIGJ5cGFzc2luZyBzaGFsbG93Q29tcGFyZSgpLlxuICAgICAgLy8gSG93ZXZlciBhcyBvZiBSZWFjdCAxNiwgc3R5bGUgcHJvcHMgYXJlIGF1dG8tZnJvemVuIChhdCBsZWFzdCBpbiBkZXYgbW9kZSlcbiAgICAgIC8vIENoZWNrIHRvIG1ha2Ugc3VyZSB3ZSBjYW4gc3RpbGwgbW9kaWZ5IHRoZSBzdHlsZSBiZWZvcmUgcHJvY2VlZGluZy5cbiAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9jb21taXQvOTc3MzU3NzY1YjQ0YWY4ZmYwY2ZlYTMyNzg2Njg2MTA3MzA5NWMxMiNjb21taXRjb21tZW50LTIwNjQ4NzEzXG4gICAgICB2YXIgd2lkdGhEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzdHlsZSwgJ3dpZHRoJyk7XG4gICAgICBpZiAod2lkdGhEZXNjcmlwdG9yICYmIHdpZHRoRGVzY3JpcHRvci53cml0YWJsZSkge1xuICAgICAgICAvLyBCeSBkZWZhdWx0LCBMaXN0IGNlbGxzIHNob3VsZCBiZSAxMDAlIHdpZHRoLlxuICAgICAgICAvLyBUaGlzIHByZXZlbnRzIHRoZW0gZnJvbSBmbG93aW5nIHVuZGVyIGEgc2Nyb2xsYmFyIChpZiBwcmVzZW50KS5cbiAgICAgICAgc3R5bGUud2lkdGggPSAnMTAwJSc7XG4gICAgICB9XG4gICAgICByZXR1cm4gcm93UmVuZGVyZXIoe1xuICAgICAgICBpbmRleDogcm93SW5kZXgsXG4gICAgICAgIHN0eWxlOiBzdHlsZSxcbiAgICAgICAgaXNTY3JvbGxpbmc6IGlzU2Nyb2xsaW5nLFxuICAgICAgICBpc1Zpc2libGU6IGlzVmlzaWJsZSxcbiAgICAgICAga2V5OiBrZXksXG4gICAgICAgIHBhcmVudDogcGFyZW50XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBfZGVmaW5lUHJvcGVydHkoX3RoaXMsIFwiX3NldFJlZlwiLCBmdW5jdGlvbiAocmVmIC8qOiA/UmVhY3QuRWxlbWVudFJlZjx0eXBlb2YgR3JpZD4qLykge1xuICAgICAgX3RoaXMuR3JpZCA9IHJlZjtcbiAgICB9KTtcbiAgICBfZGVmaW5lUHJvcGVydHkoX3RoaXMsIFwiX29uU2Nyb2xsXCIsIGZ1bmN0aW9uIChfcmVmMiAvKjo6ICovKSB7XG4gICAgICB2YXIgY2xpZW50SGVpZ2h0ID0gX3JlZjIgLyo6OiAqLy5jbGllbnRIZWlnaHQsXG4gICAgICAgIHNjcm9sbEhlaWdodCA9IF9yZWYyIC8qOjogKi8uc2Nyb2xsSGVpZ2h0LFxuICAgICAgICBzY3JvbGxUb3AgPSBfcmVmMiAvKjo6ICovLnNjcm9sbFRvcDtcbiAgICAgIHZhciBvblNjcm9sbCA9IF90aGlzLnByb3BzLm9uU2Nyb2xsO1xuICAgICAgb25TY3JvbGwoe1xuICAgICAgICBjbGllbnRIZWlnaHQ6IGNsaWVudEhlaWdodCxcbiAgICAgICAgc2Nyb2xsSGVpZ2h0OiBzY3JvbGxIZWlnaHQsXG4gICAgICAgIHNjcm9sbFRvcDogc2Nyb2xsVG9wXG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBfZGVmaW5lUHJvcGVydHkoX3RoaXMsIFwiX29uU2VjdGlvblJlbmRlcmVkXCIsIGZ1bmN0aW9uIChfcmVmMyAvKjo6ICovKSB7XG4gICAgICB2YXIgcm93T3ZlcnNjYW5TdGFydEluZGV4ID0gX3JlZjMgLyo6OiAqLy5yb3dPdmVyc2NhblN0YXJ0SW5kZXgsXG4gICAgICAgIHJvd092ZXJzY2FuU3RvcEluZGV4ID0gX3JlZjMgLyo6OiAqLy5yb3dPdmVyc2NhblN0b3BJbmRleCxcbiAgICAgICAgcm93U3RhcnRJbmRleCA9IF9yZWYzIC8qOjogKi8ucm93U3RhcnRJbmRleCxcbiAgICAgICAgcm93U3RvcEluZGV4ID0gX3JlZjMgLyo6OiAqLy5yb3dTdG9wSW5kZXg7XG4gICAgICB2YXIgb25Sb3dzUmVuZGVyZWQgPSBfdGhpcy5wcm9wcy5vblJvd3NSZW5kZXJlZDtcbiAgICAgIG9uUm93c1JlbmRlcmVkKHtcbiAgICAgICAgb3ZlcnNjYW5TdGFydEluZGV4OiByb3dPdmVyc2NhblN0YXJ0SW5kZXgsXG4gICAgICAgIG92ZXJzY2FuU3RvcEluZGV4OiByb3dPdmVyc2NhblN0b3BJbmRleCxcbiAgICAgICAgc3RhcnRJbmRleDogcm93U3RhcnRJbmRleCxcbiAgICAgICAgc3RvcEluZGV4OiByb3dTdG9wSW5kZXhcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuICBfaW5oZXJpdHMoTGlzdCwgX1JlYWN0JFB1cmVDb21wb25lbnQpO1xuICByZXR1cm4gX2NyZWF0ZUNsYXNzKExpc3QsIFt7XG4gICAga2V5OiBcImZvcmNlVXBkYXRlR3JpZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmb3JjZVVwZGF0ZUdyaWQoKSB7XG4gICAgICBpZiAodGhpcy5HcmlkKSB7XG4gICAgICAgIHRoaXMuR3JpZC5mb3JjZVVwZGF0ZSgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKiBTZWUgR3JpZCNnZXRPZmZzZXRGb3JDZWxsICovXG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0T2Zmc2V0Rm9yUm93XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldE9mZnNldEZvclJvdyhfcmVmNCAvKjo6ICovKSB7XG4gICAgICB2YXIgYWxpZ25tZW50ID0gX3JlZjQgLyo6OiAqLy5hbGlnbm1lbnQsXG4gICAgICAgIGluZGV4ID0gX3JlZjQgLyo6OiAqLy5pbmRleDtcbiAgICAgIGlmICh0aGlzLkdyaWQpIHtcbiAgICAgICAgdmFyIF90aGlzJEdyaWQkZ2V0T2Zmc2V0RiA9IHRoaXMuR3JpZC5nZXRPZmZzZXRGb3JDZWxsKHtcbiAgICAgICAgICAgIGFsaWdubWVudDogYWxpZ25tZW50LFxuICAgICAgICAgICAgcm93SW5kZXg6IGluZGV4LFxuICAgICAgICAgICAgY29sdW1uSW5kZXg6IDBcbiAgICAgICAgICB9KSxcbiAgICAgICAgICBzY3JvbGxUb3AgPSBfdGhpcyRHcmlkJGdldE9mZnNldEYuc2Nyb2xsVG9wO1xuICAgICAgICByZXR1cm4gc2Nyb2xsVG9wO1xuICAgICAgfVxuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuXG4gICAgLyoqIENlbGxNZWFzdXJlciBjb21wYXRpYmlsaXR5ICovXG4gIH0sIHtcbiAgICBrZXk6IFwiaW52YWxpZGF0ZUNlbGxTaXplQWZ0ZXJSZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gaW52YWxpZGF0ZUNlbGxTaXplQWZ0ZXJSZW5kZXIoX3JlZjUgLyo6OiAqLykge1xuICAgICAgdmFyIGNvbHVtbkluZGV4ID0gX3JlZjUgLyo6OiAqLy5jb2x1bW5JbmRleCxcbiAgICAgICAgcm93SW5kZXggPSBfcmVmNSAvKjo6ICovLnJvd0luZGV4O1xuICAgICAgaWYgKHRoaXMuR3JpZCkge1xuICAgICAgICB0aGlzLkdyaWQuaW52YWxpZGF0ZUNlbGxTaXplQWZ0ZXJSZW5kZXIoe1xuICAgICAgICAgIHJvd0luZGV4OiByb3dJbmRleCxcbiAgICAgICAgICBjb2x1bW5JbmRleDogY29sdW1uSW5kZXhcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqIFNlZSBHcmlkI21lYXN1cmVBbGxDZWxscyAqL1xuICB9LCB7XG4gICAga2V5OiBcIm1lYXN1cmVBbGxSb3dzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG1lYXN1cmVBbGxSb3dzKCkge1xuICAgICAgaWYgKHRoaXMuR3JpZCkge1xuICAgICAgICB0aGlzLkdyaWQubWVhc3VyZUFsbENlbGxzKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqIENlbGxNZWFzdXJlciBjb21wYXRpYmlsaXR5ICovXG4gIH0sIHtcbiAgICBrZXk6IFwicmVjb21wdXRlR3JpZFNpemVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVjb21wdXRlR3JpZFNpemUoKSB7XG4gICAgICB2YXIgX3JlZjYgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9LFxuICAgICAgICBfcmVmNiRjb2x1bW5JbmRleCA9IF9yZWY2LmNvbHVtbkluZGV4LFxuICAgICAgICBjb2x1bW5JbmRleCA9IF9yZWY2JGNvbHVtbkluZGV4ID09PSB2b2lkIDAgPyAwIDogX3JlZjYkY29sdW1uSW5kZXgsXG4gICAgICAgIF9yZWY2JHJvd0luZGV4ID0gX3JlZjYucm93SW5kZXgsXG4gICAgICAgIHJvd0luZGV4ID0gX3JlZjYkcm93SW5kZXggPT09IHZvaWQgMCA/IDAgOiBfcmVmNiRyb3dJbmRleDtcbiAgICAgIGlmICh0aGlzLkdyaWQpIHtcbiAgICAgICAgdGhpcy5HcmlkLnJlY29tcHV0ZUdyaWRTaXplKHtcbiAgICAgICAgICByb3dJbmRleDogcm93SW5kZXgsXG4gICAgICAgICAgY29sdW1uSW5kZXg6IGNvbHVtbkluZGV4XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKiBTZWUgR3JpZCNyZWNvbXB1dGVHcmlkU2l6ZSAqL1xuICB9LCB7XG4gICAga2V5OiBcInJlY29tcHV0ZVJvd0hlaWdodHNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVjb21wdXRlUm93SGVpZ2h0cygpIHtcbiAgICAgIHZhciBpbmRleCAvKjogbnVtYmVyKi8gPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IDA7XG4gICAgICBpZiAodGhpcy5HcmlkKSB7XG4gICAgICAgIHRoaXMuR3JpZC5yZWNvbXB1dGVHcmlkU2l6ZSh7XG4gICAgICAgICAgcm93SW5kZXg6IGluZGV4LFxuICAgICAgICAgIGNvbHVtbkluZGV4OiAwXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKiBTZWUgR3JpZCNzY3JvbGxUb1Bvc2l0aW9uICovXG4gIH0sIHtcbiAgICBrZXk6IFwic2Nyb2xsVG9Qb3NpdGlvblwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzY3JvbGxUb1Bvc2l0aW9uKCkge1xuICAgICAgdmFyIHNjcm9sbFRvcCAvKjogbnVtYmVyKi8gPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IDA7XG4gICAgICBpZiAodGhpcy5HcmlkKSB7XG4gICAgICAgIHRoaXMuR3JpZC5zY3JvbGxUb1Bvc2l0aW9uKHtcbiAgICAgICAgICBzY3JvbGxUb3A6IHNjcm9sbFRvcFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKiogU2VlIEdyaWQjc2Nyb2xsVG9DZWxsICovXG4gIH0sIHtcbiAgICBrZXk6IFwic2Nyb2xsVG9Sb3dcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2Nyb2xsVG9Sb3coKSB7XG4gICAgICB2YXIgaW5kZXggLyo6IG51bWJlciovID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAwO1xuICAgICAgaWYgKHRoaXMuR3JpZCkge1xuICAgICAgICB0aGlzLkdyaWQuc2Nyb2xsVG9DZWxsKHtcbiAgICAgICAgICBjb2x1bW5JbmRleDogMCxcbiAgICAgICAgICByb3dJbmRleDogaW5kZXhcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wcy5jbGFzc05hbWUsXG4gICAgICAgIG5vUm93c1JlbmRlcmVyID0gX3RoaXMkcHJvcHMubm9Sb3dzUmVuZGVyZXIsXG4gICAgICAgIHNjcm9sbFRvSW5kZXggPSBfdGhpcyRwcm9wcy5zY3JvbGxUb0luZGV4LFxuICAgICAgICB3aWR0aCA9IF90aGlzJHByb3BzLndpZHRoO1xuICAgICAgdmFyIGNsYXNzTmFtZXMgPSBjbHN4KCdSZWFjdFZpcnR1YWxpemVkX19MaXN0JywgY2xhc3NOYW1lKTtcbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChHcmlkLCBfZXh0ZW5kcyh7fSwgdGhpcy5wcm9wcywge1xuICAgICAgICBhdXRvQ29udGFpbmVyV2lkdGg6IHRydWUsXG4gICAgICAgIGNlbGxSZW5kZXJlcjogdGhpcy5fY2VsbFJlbmRlcmVyLFxuICAgICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMsXG4gICAgICAgIGNvbHVtbldpZHRoOiB3aWR0aCxcbiAgICAgICAgY29sdW1uQ291bnQ6IDEsXG4gICAgICAgIG5vQ29udGVudFJlbmRlcmVyOiBub1Jvd3NSZW5kZXJlcixcbiAgICAgICAgb25TY3JvbGw6IHRoaXMuX29uU2Nyb2xsLFxuICAgICAgICBvblNlY3Rpb25SZW5kZXJlZDogdGhpcy5fb25TZWN0aW9uUmVuZGVyZWQsXG4gICAgICAgIHJlZjogdGhpcy5fc2V0UmVmLFxuICAgICAgICBzY3JvbGxUb1Jvdzogc2Nyb2xsVG9JbmRleFxuICAgICAgfSkpO1xuICAgIH1cbiAgfV0pO1xufShSZWFjdC5QdXJlQ29tcG9uZW50KTtcbl9kZWZpbmVQcm9wZXJ0eShMaXN0LCBcImRlZmF1bHRQcm9wc1wiLCB7XG4gIGF1dG9IZWlnaHQ6IGZhbHNlLFxuICBlc3RpbWF0ZWRSb3dTaXplOiAzMCxcbiAgb25TY3JvbGw6IGZ1bmN0aW9uIG9uU2Nyb2xsKCkge30sXG4gIG5vUm93c1JlbmRlcmVyOiBmdW5jdGlvbiBub1Jvd3NSZW5kZXJlcigpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfSxcbiAgb25Sb3dzUmVuZGVyZWQ6IGZ1bmN0aW9uIG9uUm93c1JlbmRlcmVkKCkge30sXG4gIG92ZXJzY2FuSW5kaWNlc0dldHRlcjogYWNjZXNzaWJpbGl0eU92ZXJzY2FuSW5kaWNlc0dldHRlcixcbiAgb3ZlcnNjYW5Sb3dDb3VudDogMTAsXG4gIHNjcm9sbFRvQWxpZ25tZW50OiAnYXV0bycsXG4gIHNjcm9sbFRvSW5kZXg6IC0xLFxuICBzdHlsZToge31cbn0pO1xuZXhwb3J0IHsgTGlzdCBhcyBkZWZhdWx0IH07IiwiLyoqXG4gKiBCaW5hcnkgU2VhcmNoIEJvdW5kc1xuICogaHR0cHM6Ly9naXRodWIuY29tL21pa29sYWx5c2Vua28vYmluYXJ5LXNlYXJjaC1ib3VuZHNcbiAqIE1pa29sYSBMeXNlbmtvXG4gKlxuICogSW5saW5lZCBiZWNhdXNlIG9mIENvbnRlbnQgU2VjdXJpdHkgUG9saWN5IGlzc3VlIGNhdXNlZCBieSB0aGUgdXNlIG9mIGBuZXcgRnVuY3Rpb24oLi4uKWAgc3ludGF4LlxuICogSXNzdWUgcmVwb3J0ZWQgaGVyZTogaHR0cHM6Ly9naXRodWIuY29tL21pa29sYWx5c2Vua28vYmluYXJ5LXNlYXJjaC1ib3VuZHMvaXNzdWVzLzVcbiAqKi9cblxuZnVuY3Rpb24gX0dFQShhLCBsLCBoLCB5KSB7XG4gIHZhciBpID0gaCArIDE7XG4gIHdoaWxlIChsIDw9IGgpIHtcbiAgICB2YXIgbSA9IGwgKyBoID4+PiAxLFxuICAgICAgeCA9IGFbbV07XG4gICAgaWYgKHggPj0geSkge1xuICAgICAgaSA9IG07XG4gICAgICBoID0gbSAtIDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIGwgPSBtICsgMTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGk7XG59XG5mdW5jdGlvbiBfR0VQKGEsIGwsIGgsIHksIGMpIHtcbiAgdmFyIGkgPSBoICsgMTtcbiAgd2hpbGUgKGwgPD0gaCkge1xuICAgIHZhciBtID0gbCArIGggPj4+IDEsXG4gICAgICB4ID0gYVttXTtcbiAgICBpZiAoYyh4LCB5KSA+PSAwKSB7XG4gICAgICBpID0gbTtcbiAgICAgIGggPSBtIC0gMTtcbiAgICB9IGVsc2Uge1xuICAgICAgbCA9IG0gKyAxO1xuICAgIH1cbiAgfVxuICByZXR1cm4gaTtcbn1cbmZ1bmN0aW9uIGRpc3BhdGNoQnNlYXJjaEdFKGEsIHksIGMsIGwsIGgpIHtcbiAgaWYgKHR5cGVvZiBjID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIF9HRVAoYSwgbCA9PT0gdm9pZCAwID8gMCA6IGwgfCAwLCBoID09PSB2b2lkIDAgPyBhLmxlbmd0aCAtIDEgOiBoIHwgMCwgeSwgYyk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIF9HRUEoYSwgYyA9PT0gdm9pZCAwID8gMCA6IGMgfCAwLCBsID09PSB2b2lkIDAgPyBhLmxlbmd0aCAtIDEgOiBsIHwgMCwgeSk7XG4gIH1cbn1cbmZ1bmN0aW9uIF9HVEEoYSwgbCwgaCwgeSkge1xuICB2YXIgaSA9IGggKyAxO1xuICB3aGlsZSAobCA8PSBoKSB7XG4gICAgdmFyIG0gPSBsICsgaCA+Pj4gMSxcbiAgICAgIHggPSBhW21dO1xuICAgIGlmICh4ID4geSkge1xuICAgICAgaSA9IG07XG4gICAgICBoID0gbSAtIDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIGwgPSBtICsgMTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGk7XG59XG5mdW5jdGlvbiBfR1RQKGEsIGwsIGgsIHksIGMpIHtcbiAgdmFyIGkgPSBoICsgMTtcbiAgd2hpbGUgKGwgPD0gaCkge1xuICAgIHZhciBtID0gbCArIGggPj4+IDEsXG4gICAgICB4ID0gYVttXTtcbiAgICBpZiAoYyh4LCB5KSA+IDApIHtcbiAgICAgIGkgPSBtO1xuICAgICAgaCA9IG0gLSAxO1xuICAgIH0gZWxzZSB7XG4gICAgICBsID0gbSArIDE7XG4gICAgfVxuICB9XG4gIHJldHVybiBpO1xufVxuZnVuY3Rpb24gZGlzcGF0Y2hCc2VhcmNoR1QoYSwgeSwgYywgbCwgaCkge1xuICBpZiAodHlwZW9mIGMgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gX0dUUChhLCBsID09PSB2b2lkIDAgPyAwIDogbCB8IDAsIGggPT09IHZvaWQgMCA/IGEubGVuZ3RoIC0gMSA6IGggfCAwLCB5LCBjKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gX0dUQShhLCBjID09PSB2b2lkIDAgPyAwIDogYyB8IDAsIGwgPT09IHZvaWQgMCA/IGEubGVuZ3RoIC0gMSA6IGwgfCAwLCB5KTtcbiAgfVxufVxuZnVuY3Rpb24gX0xUQShhLCBsLCBoLCB5KSB7XG4gIHZhciBpID0gbCAtIDE7XG4gIHdoaWxlIChsIDw9IGgpIHtcbiAgICB2YXIgbSA9IGwgKyBoID4+PiAxLFxuICAgICAgeCA9IGFbbV07XG4gICAgaWYgKHggPCB5KSB7XG4gICAgICBpID0gbTtcbiAgICAgIGwgPSBtICsgMTtcbiAgICB9IGVsc2Uge1xuICAgICAgaCA9IG0gLSAxO1xuICAgIH1cbiAgfVxuICByZXR1cm4gaTtcbn1cbmZ1bmN0aW9uIF9MVFAoYSwgbCwgaCwgeSwgYykge1xuICB2YXIgaSA9IGwgLSAxO1xuICB3aGlsZSAobCA8PSBoKSB7XG4gICAgdmFyIG0gPSBsICsgaCA+Pj4gMSxcbiAgICAgIHggPSBhW21dO1xuICAgIGlmIChjKHgsIHkpIDwgMCkge1xuICAgICAgaSA9IG07XG4gICAgICBsID0gbSArIDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIGggPSBtIC0gMTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGk7XG59XG5mdW5jdGlvbiBkaXNwYXRjaEJzZWFyY2hMVChhLCB5LCBjLCBsLCBoKSB7XG4gIGlmICh0eXBlb2YgYyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBfTFRQKGEsIGwgPT09IHZvaWQgMCA/IDAgOiBsIHwgMCwgaCA9PT0gdm9pZCAwID8gYS5sZW5ndGggLSAxIDogaCB8IDAsIHksIGMpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBfTFRBKGEsIGMgPT09IHZvaWQgMCA/IDAgOiBjIHwgMCwgbCA9PT0gdm9pZCAwID8gYS5sZW5ndGggLSAxIDogbCB8IDAsIHkpO1xuICB9XG59XG5mdW5jdGlvbiBfTEVBKGEsIGwsIGgsIHkpIHtcbiAgdmFyIGkgPSBsIC0gMTtcbiAgd2hpbGUgKGwgPD0gaCkge1xuICAgIHZhciBtID0gbCArIGggPj4+IDEsXG4gICAgICB4ID0gYVttXTtcbiAgICBpZiAoeCA8PSB5KSB7XG4gICAgICBpID0gbTtcbiAgICAgIGwgPSBtICsgMTtcbiAgICB9IGVsc2Uge1xuICAgICAgaCA9IG0gLSAxO1xuICAgIH1cbiAgfVxuICByZXR1cm4gaTtcbn1cbmZ1bmN0aW9uIF9MRVAoYSwgbCwgaCwgeSwgYykge1xuICB2YXIgaSA9IGwgLSAxO1xuICB3aGlsZSAobCA8PSBoKSB7XG4gICAgdmFyIG0gPSBsICsgaCA+Pj4gMSxcbiAgICAgIHggPSBhW21dO1xuICAgIGlmIChjKHgsIHkpIDw9IDApIHtcbiAgICAgIGkgPSBtO1xuICAgICAgbCA9IG0gKyAxO1xuICAgIH0gZWxzZSB7XG4gICAgICBoID0gbSAtIDE7XG4gICAgfVxuICB9XG4gIHJldHVybiBpO1xufVxuZnVuY3Rpb24gZGlzcGF0Y2hCc2VhcmNoTEUoYSwgeSwgYywgbCwgaCkge1xuICBpZiAodHlwZW9mIGMgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gX0xFUChhLCBsID09PSB2b2lkIDAgPyAwIDogbCB8IDAsIGggPT09IHZvaWQgMCA/IGEubGVuZ3RoIC0gMSA6IGggfCAwLCB5LCBjKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gX0xFQShhLCBjID09PSB2b2lkIDAgPyAwIDogYyB8IDAsIGwgPT09IHZvaWQgMCA/IGEubGVuZ3RoIC0gMSA6IGwgfCAwLCB5KTtcbiAgfVxufVxuZnVuY3Rpb24gX0VRQShhLCBsLCBoLCB5KSB7XG4gIGwgLSAxO1xuICB3aGlsZSAobCA8PSBoKSB7XG4gICAgdmFyIG0gPSBsICsgaCA+Pj4gMSxcbiAgICAgIHggPSBhW21dO1xuICAgIGlmICh4ID09PSB5KSB7XG4gICAgICByZXR1cm4gbTtcbiAgICB9IGVsc2UgaWYgKHggPD0geSkge1xuICAgICAgbCA9IG0gKyAxO1xuICAgIH0gZWxzZSB7XG4gICAgICBoID0gbSAtIDE7XG4gICAgfVxuICB9XG4gIHJldHVybiAtMTtcbn1cbmZ1bmN0aW9uIF9FUVAoYSwgbCwgaCwgeSwgYykge1xuICBsIC0gMTtcbiAgd2hpbGUgKGwgPD0gaCkge1xuICAgIHZhciBtID0gbCArIGggPj4+IDEsXG4gICAgICB4ID0gYVttXTtcbiAgICB2YXIgcCA9IGMoeCwgeSk7XG4gICAgaWYgKHAgPT09IDApIHtcbiAgICAgIHJldHVybiBtO1xuICAgIH0gZWxzZSBpZiAocCA8PSAwKSB7XG4gICAgICBsID0gbSArIDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIGggPSBtIC0gMTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIC0xO1xufVxuZnVuY3Rpb24gZGlzcGF0Y2hCc2VhcmNoRVEoYSwgeSwgYywgbCwgaCkge1xuICBpZiAodHlwZW9mIGMgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gX0VRUChhLCBsID09PSB2b2lkIDAgPyAwIDogbCB8IDAsIGggPT09IHZvaWQgMCA/IGEubGVuZ3RoIC0gMSA6IGggfCAwLCB5LCBjKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gX0VRQShhLCBjID09PSB2b2lkIDAgPyAwIDogYyB8IDAsIGwgPT09IHZvaWQgMCA/IGEubGVuZ3RoIC0gMSA6IGwgfCAwLCB5KTtcbiAgfVxufVxuZXhwb3J0IGRlZmF1bHQge1xuICBnZTogZGlzcGF0Y2hCc2VhcmNoR0UsXG4gIGd0OiBkaXNwYXRjaEJzZWFyY2hHVCxcbiAgbHQ6IGRpc3BhdGNoQnNlYXJjaExULFxuICBsZTogZGlzcGF0Y2hCc2VhcmNoTEUsXG4gIGVxOiBkaXNwYXRjaEJzZWFyY2hFUVxufTsiLCIvKipcbiAqIEJpbmFyeSBTZWFyY2ggQm91bmRzXG4gKiBodHRwczovL2dpdGh1Yi5jb20vbWlrb2xhbHlzZW5rby9pbnRlcnZhbC10cmVlLTFkXG4gKiBNaWtvbGEgTHlzZW5rb1xuICpcbiAqIElubGluZWQgYmVjYXVzZSBvZiBDb250ZW50IFNlY3VyaXR5IFBvbGljeSBpc3N1ZSBjYXVzZWQgYnkgdGhlIHVzZSBvZiBgbmV3IEZ1bmN0aW9uKC4uLilgIHN5bnRheCBpbiBhbiB1cHN0cmVhbSBkZXBlbmRlbmN5LlxuICogSXNzdWUgcmVwb3J0ZWQgaGVyZTogaHR0cHM6Ly9naXRodWIuY29tL21pa29sYWx5c2Vua28vYmluYXJ5LXNlYXJjaC1ib3VuZHMvaXNzdWVzLzVcbiAqKi9cblxuaW1wb3J0IGJvdW5kcyBmcm9tICcuL2JpbmFyeVNlYXJjaEJvdW5kcyc7XG52YXIgTk9UX0ZPVU5EID0gMDtcbnZhciBTVUNDRVNTID0gMTtcbnZhciBFTVBUWSA9IDI7XG5mdW5jdGlvbiBJbnRlcnZhbFRyZWVOb2RlKG1pZCwgbGVmdCwgcmlnaHQsIGxlZnRQb2ludHMsIHJpZ2h0UG9pbnRzKSB7XG4gIHRoaXMubWlkID0gbWlkO1xuICB0aGlzLmxlZnQgPSBsZWZ0O1xuICB0aGlzLnJpZ2h0ID0gcmlnaHQ7XG4gIHRoaXMubGVmdFBvaW50cyA9IGxlZnRQb2ludHM7XG4gIHRoaXMucmlnaHRQb2ludHMgPSByaWdodFBvaW50cztcbiAgdGhpcy5jb3VudCA9IChsZWZ0ID8gbGVmdC5jb3VudCA6IDApICsgKHJpZ2h0ID8gcmlnaHQuY291bnQgOiAwKSArIGxlZnRQb2ludHMubGVuZ3RoO1xufVxudmFyIHByb3RvID0gSW50ZXJ2YWxUcmVlTm9kZS5wcm90b3R5cGU7XG5mdW5jdGlvbiBjb3B5KGEsIGIpIHtcbiAgYS5taWQgPSBiLm1pZDtcbiAgYS5sZWZ0ID0gYi5sZWZ0O1xuICBhLnJpZ2h0ID0gYi5yaWdodDtcbiAgYS5sZWZ0UG9pbnRzID0gYi5sZWZ0UG9pbnRzO1xuICBhLnJpZ2h0UG9pbnRzID0gYi5yaWdodFBvaW50cztcbiAgYS5jb3VudCA9IGIuY291bnQ7XG59XG5mdW5jdGlvbiByZWJ1aWxkKG5vZGUsIGludGVydmFscykge1xuICB2YXIgbnRyZWUgPSBjcmVhdGVJbnRlcnZhbFRyZWUoaW50ZXJ2YWxzKTtcbiAgbm9kZS5taWQgPSBudHJlZS5taWQ7XG4gIG5vZGUubGVmdCA9IG50cmVlLmxlZnQ7XG4gIG5vZGUucmlnaHQgPSBudHJlZS5yaWdodDtcbiAgbm9kZS5sZWZ0UG9pbnRzID0gbnRyZWUubGVmdFBvaW50cztcbiAgbm9kZS5yaWdodFBvaW50cyA9IG50cmVlLnJpZ2h0UG9pbnRzO1xuICBub2RlLmNvdW50ID0gbnRyZWUuY291bnQ7XG59XG5mdW5jdGlvbiByZWJ1aWxkV2l0aEludGVydmFsKG5vZGUsIGludGVydmFsKSB7XG4gIHZhciBpbnRlcnZhbHMgPSBub2RlLmludGVydmFscyhbXSk7XG4gIGludGVydmFscy5wdXNoKGludGVydmFsKTtcbiAgcmVidWlsZChub2RlLCBpbnRlcnZhbHMpO1xufVxuZnVuY3Rpb24gcmVidWlsZFdpdGhvdXRJbnRlcnZhbChub2RlLCBpbnRlcnZhbCkge1xuICB2YXIgaW50ZXJ2YWxzID0gbm9kZS5pbnRlcnZhbHMoW10pO1xuICB2YXIgaWR4ID0gaW50ZXJ2YWxzLmluZGV4T2YoaW50ZXJ2YWwpO1xuICBpZiAoaWR4IDwgMCkge1xuICAgIHJldHVybiBOT1RfRk9VTkQ7XG4gIH1cbiAgaW50ZXJ2YWxzLnNwbGljZShpZHgsIDEpO1xuICByZWJ1aWxkKG5vZGUsIGludGVydmFscyk7XG4gIHJldHVybiBTVUNDRVNTO1xufVxucHJvdG8uaW50ZXJ2YWxzID0gZnVuY3Rpb24gKHJlc3VsdCkge1xuICByZXN1bHQucHVzaC5hcHBseShyZXN1bHQsIHRoaXMubGVmdFBvaW50cyk7XG4gIGlmICh0aGlzLmxlZnQpIHtcbiAgICB0aGlzLmxlZnQuaW50ZXJ2YWxzKHJlc3VsdCk7XG4gIH1cbiAgaWYgKHRoaXMucmlnaHQpIHtcbiAgICB0aGlzLnJpZ2h0LmludGVydmFscyhyZXN1bHQpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xucHJvdG8uaW5zZXJ0ID0gZnVuY3Rpb24gKGludGVydmFsKSB7XG4gIHZhciB3ZWlnaHQgPSB0aGlzLmNvdW50IC0gdGhpcy5sZWZ0UG9pbnRzLmxlbmd0aDtcbiAgdGhpcy5jb3VudCArPSAxO1xuICBpZiAoaW50ZXJ2YWxbMV0gPCB0aGlzLm1pZCkge1xuICAgIGlmICh0aGlzLmxlZnQpIHtcbiAgICAgIGlmICg0ICogKHRoaXMubGVmdC5jb3VudCArIDEpID4gMyAqICh3ZWlnaHQgKyAxKSkge1xuICAgICAgICByZWJ1aWxkV2l0aEludGVydmFsKHRoaXMsIGludGVydmFsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMubGVmdC5pbnNlcnQoaW50ZXJ2YWwpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmxlZnQgPSBjcmVhdGVJbnRlcnZhbFRyZWUoW2ludGVydmFsXSk7XG4gICAgfVxuICB9IGVsc2UgaWYgKGludGVydmFsWzBdID4gdGhpcy5taWQpIHtcbiAgICBpZiAodGhpcy5yaWdodCkge1xuICAgICAgaWYgKDQgKiAodGhpcy5yaWdodC5jb3VudCArIDEpID4gMyAqICh3ZWlnaHQgKyAxKSkge1xuICAgICAgICByZWJ1aWxkV2l0aEludGVydmFsKHRoaXMsIGludGVydmFsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucmlnaHQuaW5zZXJ0KGludGVydmFsKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5yaWdodCA9IGNyZWF0ZUludGVydmFsVHJlZShbaW50ZXJ2YWxdKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFyIGwgPSBib3VuZHMuZ2UodGhpcy5sZWZ0UG9pbnRzLCBpbnRlcnZhbCwgY29tcGFyZUJlZ2luKTtcbiAgICB2YXIgciA9IGJvdW5kcy5nZSh0aGlzLnJpZ2h0UG9pbnRzLCBpbnRlcnZhbCwgY29tcGFyZUVuZCk7XG4gICAgdGhpcy5sZWZ0UG9pbnRzLnNwbGljZShsLCAwLCBpbnRlcnZhbCk7XG4gICAgdGhpcy5yaWdodFBvaW50cy5zcGxpY2UociwgMCwgaW50ZXJ2YWwpO1xuICB9XG59O1xucHJvdG8ucmVtb3ZlID0gZnVuY3Rpb24gKGludGVydmFsKSB7XG4gIHZhciB3ZWlnaHQgPSB0aGlzLmNvdW50IC0gdGhpcy5sZWZ0UG9pbnRzO1xuICBpZiAoaW50ZXJ2YWxbMV0gPCB0aGlzLm1pZCkge1xuICAgIGlmICghdGhpcy5sZWZ0KSB7XG4gICAgICByZXR1cm4gTk9UX0ZPVU5EO1xuICAgIH1cbiAgICB2YXIgcncgPSB0aGlzLnJpZ2h0ID8gdGhpcy5yaWdodC5jb3VudCA6IDA7XG4gICAgaWYgKDQgKiBydyA+IDMgKiAod2VpZ2h0IC0gMSkpIHtcbiAgICAgIHJldHVybiByZWJ1aWxkV2l0aG91dEludGVydmFsKHRoaXMsIGludGVydmFsKTtcbiAgICB9XG4gICAgdmFyIHIgPSB0aGlzLmxlZnQucmVtb3ZlKGludGVydmFsKTtcbiAgICBpZiAociA9PT0gRU1QVFkpIHtcbiAgICAgIHRoaXMubGVmdCA9IG51bGw7XG4gICAgICB0aGlzLmNvdW50IC09IDE7XG4gICAgICByZXR1cm4gU1VDQ0VTUztcbiAgICB9IGVsc2UgaWYgKHIgPT09IFNVQ0NFU1MpIHtcbiAgICAgIHRoaXMuY291bnQgLT0gMTtcbiAgICB9XG4gICAgcmV0dXJuIHI7XG4gIH0gZWxzZSBpZiAoaW50ZXJ2YWxbMF0gPiB0aGlzLm1pZCkge1xuICAgIGlmICghdGhpcy5yaWdodCkge1xuICAgICAgcmV0dXJuIE5PVF9GT1VORDtcbiAgICB9XG4gICAgdmFyIGx3ID0gdGhpcy5sZWZ0ID8gdGhpcy5sZWZ0LmNvdW50IDogMDtcbiAgICBpZiAoNCAqIGx3ID4gMyAqICh3ZWlnaHQgLSAxKSkge1xuICAgICAgcmV0dXJuIHJlYnVpbGRXaXRob3V0SW50ZXJ2YWwodGhpcywgaW50ZXJ2YWwpO1xuICAgIH1cbiAgICB2YXIgciA9IHRoaXMucmlnaHQucmVtb3ZlKGludGVydmFsKTtcbiAgICBpZiAociA9PT0gRU1QVFkpIHtcbiAgICAgIHRoaXMucmlnaHQgPSBudWxsO1xuICAgICAgdGhpcy5jb3VudCAtPSAxO1xuICAgICAgcmV0dXJuIFNVQ0NFU1M7XG4gICAgfSBlbHNlIGlmIChyID09PSBTVUNDRVNTKSB7XG4gICAgICB0aGlzLmNvdW50IC09IDE7XG4gICAgfVxuICAgIHJldHVybiByO1xuICB9IGVsc2Uge1xuICAgIGlmICh0aGlzLmNvdW50ID09PSAxKSB7XG4gICAgICBpZiAodGhpcy5sZWZ0UG9pbnRzWzBdID09PSBpbnRlcnZhbCkge1xuICAgICAgICByZXR1cm4gRU1QVFk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gTk9UX0ZPVU5EO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAodGhpcy5sZWZ0UG9pbnRzLmxlbmd0aCA9PT0gMSAmJiB0aGlzLmxlZnRQb2ludHNbMF0gPT09IGludGVydmFsKSB7XG4gICAgICBpZiAodGhpcy5sZWZ0ICYmIHRoaXMucmlnaHQpIHtcbiAgICAgICAgdmFyIHAgPSB0aGlzO1xuICAgICAgICB2YXIgbiA9IHRoaXMubGVmdDtcbiAgICAgICAgd2hpbGUgKG4ucmlnaHQpIHtcbiAgICAgICAgICBwID0gbjtcbiAgICAgICAgICBuID0gbi5yaWdodDtcbiAgICAgICAgfVxuICAgICAgICBpZiAocCA9PT0gdGhpcykge1xuICAgICAgICAgIG4ucmlnaHQgPSB0aGlzLnJpZ2h0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBsID0gdGhpcy5sZWZ0O1xuICAgICAgICAgIHZhciByID0gdGhpcy5yaWdodDtcbiAgICAgICAgICBwLmNvdW50IC09IG4uY291bnQ7XG4gICAgICAgICAgcC5yaWdodCA9IG4ubGVmdDtcbiAgICAgICAgICBuLmxlZnQgPSBsO1xuICAgICAgICAgIG4ucmlnaHQgPSByO1xuICAgICAgICB9XG4gICAgICAgIGNvcHkodGhpcywgbik7XG4gICAgICAgIHRoaXMuY291bnQgPSAodGhpcy5sZWZ0ID8gdGhpcy5sZWZ0LmNvdW50IDogMCkgKyAodGhpcy5yaWdodCA/IHRoaXMucmlnaHQuY291bnQgOiAwKSArIHRoaXMubGVmdFBvaW50cy5sZW5ndGg7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMubGVmdCkge1xuICAgICAgICBjb3B5KHRoaXMsIHRoaXMubGVmdCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb3B5KHRoaXMsIHRoaXMucmlnaHQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIFNVQ0NFU1M7XG4gICAgfVxuICAgIGZvciAodmFyIGwgPSBib3VuZHMuZ2UodGhpcy5sZWZ0UG9pbnRzLCBpbnRlcnZhbCwgY29tcGFyZUJlZ2luKTsgbCA8IHRoaXMubGVmdFBvaW50cy5sZW5ndGg7ICsrbCkge1xuICAgICAgaWYgKHRoaXMubGVmdFBvaW50c1tsXVswXSAhPT0gaW50ZXJ2YWxbMF0pIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5sZWZ0UG9pbnRzW2xdID09PSBpbnRlcnZhbCkge1xuICAgICAgICB0aGlzLmNvdW50IC09IDE7XG4gICAgICAgIHRoaXMubGVmdFBvaW50cy5zcGxpY2UobCwgMSk7XG4gICAgICAgIGZvciAodmFyIHIgPSBib3VuZHMuZ2UodGhpcy5yaWdodFBvaW50cywgaW50ZXJ2YWwsIGNvbXBhcmVFbmQpOyByIDwgdGhpcy5yaWdodFBvaW50cy5sZW5ndGg7ICsrcikge1xuICAgICAgICAgIGlmICh0aGlzLnJpZ2h0UG9pbnRzW3JdWzFdICE9PSBpbnRlcnZhbFsxXSkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnJpZ2h0UG9pbnRzW3JdID09PSBpbnRlcnZhbCkge1xuICAgICAgICAgICAgdGhpcy5yaWdodFBvaW50cy5zcGxpY2UociwgMSk7XG4gICAgICAgICAgICByZXR1cm4gU1VDQ0VTUztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIE5PVF9GT1VORDtcbiAgfVxufTtcbmZ1bmN0aW9uIHJlcG9ydExlZnRSYW5nZShhcnIsIGhpLCBjYikge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGFyci5sZW5ndGggJiYgYXJyW2ldWzBdIDw9IGhpOyArK2kpIHtcbiAgICB2YXIgciA9IGNiKGFycltpXSk7XG4gICAgaWYgKHIpIHtcbiAgICAgIHJldHVybiByO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gcmVwb3J0UmlnaHRSYW5nZShhcnIsIGxvLCBjYikge1xuICBmb3IgKHZhciBpID0gYXJyLmxlbmd0aCAtIDE7IGkgPj0gMCAmJiBhcnJbaV1bMV0gPj0gbG87IC0taSkge1xuICAgIHZhciByID0gY2IoYXJyW2ldKTtcbiAgICBpZiAocikge1xuICAgICAgcmV0dXJuIHI7XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiByZXBvcnRSYW5nZShhcnIsIGNiKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgKytpKSB7XG4gICAgdmFyIHIgPSBjYihhcnJbaV0pO1xuICAgIGlmIChyKSB7XG4gICAgICByZXR1cm4gcjtcbiAgICB9XG4gIH1cbn1cbnByb3RvLnF1ZXJ5UG9pbnQgPSBmdW5jdGlvbiAoeCwgY2IpIHtcbiAgaWYgKHggPCB0aGlzLm1pZCkge1xuICAgIGlmICh0aGlzLmxlZnQpIHtcbiAgICAgIHZhciByID0gdGhpcy5sZWZ0LnF1ZXJ5UG9pbnQoeCwgY2IpO1xuICAgICAgaWYgKHIpIHtcbiAgICAgICAgcmV0dXJuIHI7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXBvcnRMZWZ0UmFuZ2UodGhpcy5sZWZ0UG9pbnRzLCB4LCBjYik7XG4gIH0gZWxzZSBpZiAoeCA+IHRoaXMubWlkKSB7XG4gICAgaWYgKHRoaXMucmlnaHQpIHtcbiAgICAgIHZhciByID0gdGhpcy5yaWdodC5xdWVyeVBvaW50KHgsIGNiKTtcbiAgICAgIGlmIChyKSB7XG4gICAgICAgIHJldHVybiByO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVwb3J0UmlnaHRSYW5nZSh0aGlzLnJpZ2h0UG9pbnRzLCB4LCBjYik7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHJlcG9ydFJhbmdlKHRoaXMubGVmdFBvaW50cywgY2IpO1xuICB9XG59O1xucHJvdG8ucXVlcnlJbnRlcnZhbCA9IGZ1bmN0aW9uIChsbywgaGksIGNiKSB7XG4gIGlmIChsbyA8IHRoaXMubWlkICYmIHRoaXMubGVmdCkge1xuICAgIHZhciByID0gdGhpcy5sZWZ0LnF1ZXJ5SW50ZXJ2YWwobG8sIGhpLCBjYik7XG4gICAgaWYgKHIpIHtcbiAgICAgIHJldHVybiByO1xuICAgIH1cbiAgfVxuICBpZiAoaGkgPiB0aGlzLm1pZCAmJiB0aGlzLnJpZ2h0KSB7XG4gICAgdmFyIHIgPSB0aGlzLnJpZ2h0LnF1ZXJ5SW50ZXJ2YWwobG8sIGhpLCBjYik7XG4gICAgaWYgKHIpIHtcbiAgICAgIHJldHVybiByO1xuICAgIH1cbiAgfVxuICBpZiAoaGkgPCB0aGlzLm1pZCkge1xuICAgIHJldHVybiByZXBvcnRMZWZ0UmFuZ2UodGhpcy5sZWZ0UG9pbnRzLCBoaSwgY2IpO1xuICB9IGVsc2UgaWYgKGxvID4gdGhpcy5taWQpIHtcbiAgICByZXR1cm4gcmVwb3J0UmlnaHRSYW5nZSh0aGlzLnJpZ2h0UG9pbnRzLCBsbywgY2IpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiByZXBvcnRSYW5nZSh0aGlzLmxlZnRQb2ludHMsIGNiKTtcbiAgfVxufTtcbmZ1bmN0aW9uIGNvbXBhcmVOdW1iZXJzKGEsIGIpIHtcbiAgcmV0dXJuIGEgLSBiO1xufVxuZnVuY3Rpb24gY29tcGFyZUJlZ2luKGEsIGIpIHtcbiAgdmFyIGQgPSBhWzBdIC0gYlswXTtcbiAgaWYgKGQpIHtcbiAgICByZXR1cm4gZDtcbiAgfVxuICByZXR1cm4gYVsxXSAtIGJbMV07XG59XG5mdW5jdGlvbiBjb21wYXJlRW5kKGEsIGIpIHtcbiAgdmFyIGQgPSBhWzFdIC0gYlsxXTtcbiAgaWYgKGQpIHtcbiAgICByZXR1cm4gZDtcbiAgfVxuICByZXR1cm4gYVswXSAtIGJbMF07XG59XG5mdW5jdGlvbiBjcmVhdGVJbnRlcnZhbFRyZWUoaW50ZXJ2YWxzKSB7XG4gIGlmIChpbnRlcnZhbHMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgdmFyIHB0cyA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGludGVydmFscy5sZW5ndGg7ICsraSkge1xuICAgIHB0cy5wdXNoKGludGVydmFsc1tpXVswXSwgaW50ZXJ2YWxzW2ldWzFdKTtcbiAgfVxuICBwdHMuc29ydChjb21wYXJlTnVtYmVycyk7XG4gIHZhciBtaWQgPSBwdHNbcHRzLmxlbmd0aCA+PiAxXTtcbiAgdmFyIGxlZnRJbnRlcnZhbHMgPSBbXTtcbiAgdmFyIHJpZ2h0SW50ZXJ2YWxzID0gW107XG4gIHZhciBjZW50ZXJJbnRlcnZhbHMgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBpbnRlcnZhbHMubGVuZ3RoOyArK2kpIHtcbiAgICB2YXIgcyA9IGludGVydmFsc1tpXTtcbiAgICBpZiAoc1sxXSA8IG1pZCkge1xuICAgICAgbGVmdEludGVydmFscy5wdXNoKHMpO1xuICAgIH0gZWxzZSBpZiAobWlkIDwgc1swXSkge1xuICAgICAgcmlnaHRJbnRlcnZhbHMucHVzaChzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2VudGVySW50ZXJ2YWxzLnB1c2gocyk7XG4gICAgfVxuICB9XG5cbiAgLy9TcGxpdCBjZW50ZXIgaW50ZXJ2YWxzXG4gIHZhciBsZWZ0UG9pbnRzID0gY2VudGVySW50ZXJ2YWxzO1xuICB2YXIgcmlnaHRQb2ludHMgPSBjZW50ZXJJbnRlcnZhbHMuc2xpY2UoKTtcbiAgbGVmdFBvaW50cy5zb3J0KGNvbXBhcmVCZWdpbik7XG4gIHJpZ2h0UG9pbnRzLnNvcnQoY29tcGFyZUVuZCk7XG4gIHJldHVybiBuZXcgSW50ZXJ2YWxUcmVlTm9kZShtaWQsIGNyZWF0ZUludGVydmFsVHJlZShsZWZ0SW50ZXJ2YWxzKSwgY3JlYXRlSW50ZXJ2YWxUcmVlKHJpZ2h0SW50ZXJ2YWxzKSwgbGVmdFBvaW50cywgcmlnaHRQb2ludHMpO1xufVxuXG4vL1VzZXIgZnJpZW5kbHkgd3JhcHBlciB0aGF0IG1ha2VzIGl0IHBvc3NpYmxlIHRvIHN1cHBvcnQgZW1wdHkgdHJlZXNcbmZ1bmN0aW9uIEludGVydmFsVHJlZShyb290KSB7XG4gIHRoaXMucm9vdCA9IHJvb3Q7XG59XG52YXIgdHByb3RvID0gSW50ZXJ2YWxUcmVlLnByb3RvdHlwZTtcbnRwcm90by5pbnNlcnQgPSBmdW5jdGlvbiAoaW50ZXJ2YWwpIHtcbiAgaWYgKHRoaXMucm9vdCkge1xuICAgIHRoaXMucm9vdC5pbnNlcnQoaW50ZXJ2YWwpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMucm9vdCA9IG5ldyBJbnRlcnZhbFRyZWVOb2RlKGludGVydmFsWzBdLCBudWxsLCBudWxsLCBbaW50ZXJ2YWxdLCBbaW50ZXJ2YWxdKTtcbiAgfVxufTtcbnRwcm90by5yZW1vdmUgPSBmdW5jdGlvbiAoaW50ZXJ2YWwpIHtcbiAgaWYgKHRoaXMucm9vdCkge1xuICAgIHZhciByID0gdGhpcy5yb290LnJlbW92ZShpbnRlcnZhbCk7XG4gICAgaWYgKHIgPT09IEVNUFRZKSB7XG4gICAgICB0aGlzLnJvb3QgPSBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gciAhPT0gTk9UX0ZPVU5EO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn07XG50cHJvdG8ucXVlcnlQb2ludCA9IGZ1bmN0aW9uIChwLCBjYikge1xuICBpZiAodGhpcy5yb290KSB7XG4gICAgcmV0dXJuIHRoaXMucm9vdC5xdWVyeVBvaW50KHAsIGNiKTtcbiAgfVxufTtcbnRwcm90by5xdWVyeUludGVydmFsID0gZnVuY3Rpb24gKGxvLCBoaSwgY2IpIHtcbiAgaWYgKGxvIDw9IGhpICYmIHRoaXMucm9vdCkge1xuICAgIHJldHVybiB0aGlzLnJvb3QucXVlcnlJbnRlcnZhbChsbywgaGksIGNiKTtcbiAgfVxufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0cHJvdG8sICdjb3VudCcsIHtcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgaWYgKHRoaXMucm9vdCkge1xuICAgICAgcmV0dXJuIHRoaXMucm9vdC5jb3VudDtcbiAgICB9XG4gICAgcmV0dXJuIDA7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KHRwcm90bywgJ2ludGVydmFscycsIHtcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgaWYgKHRoaXMucm9vdCkge1xuICAgICAgcmV0dXJuIHRoaXMucm9vdC5pbnRlcnZhbHMoW10pO1xuICAgIH1cbiAgICByZXR1cm4gW107XG4gIH1cbn0pO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlV3JhcHBlcihpbnRlcnZhbHMpIHtcbiAgaWYgKCFpbnRlcnZhbHMgfHwgaW50ZXJ2YWxzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBuZXcgSW50ZXJ2YWxUcmVlKG51bGwpO1xuICB9XG4gIHJldHVybiBuZXcgSW50ZXJ2YWxUcmVlKGNyZWF0ZUludGVydmFsVHJlZShpbnRlcnZhbHMpKTtcbn0iLCJpbXBvcnQgX3NsaWNlZFRvQXJyYXkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvc2xpY2VkVG9BcnJheVwiO1xuaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiO1xuaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzc1wiO1xuaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eVwiO1xuaW1wb3J0IGNyZWF0ZUludGVydmFsVHJlZSBmcm9tICcuLi92ZW5kb3IvaW50ZXJ2YWxUcmVlJztcbi8qOjogdHlwZSBSZW5kZXJDYWxsYmFjayA9IChpbmRleDogbnVtYmVyLCBsZWZ0OiBudW1iZXIsIHRvcDogbnVtYmVyKSA9PiB2b2lkOyovXG4vLyBQb3NpdGlvbiBjYWNoZSByZXF1aXJlbWVudHM6XG4vLyAgIE8obG9nKG4pKSBsb29rdXAgb2YgY2VsbHMgdG8gcmVuZGVyIGZvciBhIGdpdmVuIHZpZXdwb3J0IHNpemVcbi8vICAgTygxKSBsb29rdXAgb2Ygc2hvcnRlc3QgbWVhc3VyZWQgY29sdW1uIChzbyB3ZSBrbm93IHdoZW4gdG8gZW50ZXIgcGhhc2UgMSlcbnZhciBQb3NpdGlvbkNhY2hlID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gUG9zaXRpb25DYWNoZSgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUG9zaXRpb25DYWNoZSk7XG4gICAgLy8gVHJhY2tzIHRoZSBoZWlnaHQgb2YgZWFjaCBjb2x1bW5cbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJfY29sdW1uU2l6ZU1hcFwiLCB7fSk7XG4gICAgLy8gU3RvcmUgdG9wcyBhbmQgYm90dG9tcyBvZiBlYWNoIGNlbGwgZm9yIGZhc3QgaW50ZXJzZWN0aW9uIGxvb2t1cC5cbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJfaW50ZXJ2YWxUcmVlXCIsIGNyZWF0ZUludGVydmFsVHJlZSgpKTtcbiAgICAvLyBNYXBzIGNlbGwgaW5kZXggdG8geCBjb29yZGluYXRlcyBmb3IgcXVpY2sgbG9va3VwLlxuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIl9sZWZ0TWFwXCIsIHt9KTtcbiAgfVxuICByZXR1cm4gX2NyZWF0ZUNsYXNzKFBvc2l0aW9uQ2FjaGUsIFt7XG4gICAga2V5OiBcImVzdGltYXRlVG90YWxIZWlnaHRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZXN0aW1hdGVUb3RhbEhlaWdodChjZWxsQ291bnQgLyo6IG51bWJlciovLCBjb2x1bW5Db3VudCAvKjogbnVtYmVyKi8sIGRlZmF1bHRDZWxsSGVpZ2h0IC8qOiBudW1iZXIqLykgLyo6IG51bWJlciove1xuICAgICAgdmFyIHVubWVhc3VyZWRDZWxsQ291bnQgPSBjZWxsQ291bnQgLSB0aGlzLmNvdW50O1xuICAgICAgcmV0dXJuIHRoaXMudGFsbGVzdENvbHVtblNpemUgKyBNYXRoLmNlaWwodW5tZWFzdXJlZENlbGxDb3VudCAvIGNvbHVtbkNvdW50KSAqIGRlZmF1bHRDZWxsSGVpZ2h0O1xuICAgIH1cblxuICAgIC8vIFJlbmRlciBhbGwgY2VsbHMgdmlzaWJsZSB3aXRoaW4gdGhlIHZpZXdwb3J0IHJhbmdlIGRlZmluZWQuXG4gIH0sIHtcbiAgICBrZXk6IFwicmFuZ2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmFuZ2Uoc2Nyb2xsVG9wIC8qOiBudW1iZXIqLywgY2xpZW50SGVpZ2h0IC8qOiBudW1iZXIqLywgcmVuZGVyQ2FsbGJhY2sgLyo6IFJlbmRlckNhbGxiYWNrKi8pIC8qOiB2b2lkKi97XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgdGhpcy5faW50ZXJ2YWxUcmVlLnF1ZXJ5SW50ZXJ2YWwoc2Nyb2xsVG9wLCBzY3JvbGxUb3AgKyBjbGllbnRIZWlnaHQsIGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgICAgIHZhciBfcmVmMiA9IF9zbGljZWRUb0FycmF5KF9yZWYsIDMpLFxuICAgICAgICAgIHRvcCA9IF9yZWYyWzBdLFxuICAgICAgICAgIF8gPSBfcmVmMlsxXSxcbiAgICAgICAgICBpbmRleCA9IF9yZWYyWzJdO1xuICAgICAgICByZXR1cm4gcmVuZGVyQ2FsbGJhY2soaW5kZXgsIF90aGlzLl9sZWZ0TWFwW2luZGV4XSwgdG9wKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzZXRQb3NpdGlvblwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRQb3NpdGlvbihpbmRleCAvKjogbnVtYmVyKi8sIGxlZnQgLyo6IG51bWJlciovLCB0b3AgLyo6IG51bWJlciovLCBoZWlnaHQgLyo6IG51bWJlciovKSAvKjogdm9pZCove1xuICAgICAgdGhpcy5faW50ZXJ2YWxUcmVlLmluc2VydChbdG9wLCB0b3AgKyBoZWlnaHQsIGluZGV4XSk7XG4gICAgICB0aGlzLl9sZWZ0TWFwW2luZGV4XSA9IGxlZnQ7XG4gICAgICB2YXIgY29sdW1uU2l6ZU1hcCA9IHRoaXMuX2NvbHVtblNpemVNYXA7XG4gICAgICB2YXIgY29sdW1uSGVpZ2h0ID0gY29sdW1uU2l6ZU1hcFtsZWZ0XTtcbiAgICAgIGlmIChjb2x1bW5IZWlnaHQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjb2x1bW5TaXplTWFwW2xlZnRdID0gdG9wICsgaGVpZ2h0O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29sdW1uU2l6ZU1hcFtsZWZ0XSA9IE1hdGgubWF4KGNvbHVtbkhlaWdodCwgdG9wICsgaGVpZ2h0KTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY291bnRcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIC8qOiBudW1iZXIqL3tcbiAgICAgIHJldHVybiB0aGlzLl9pbnRlcnZhbFRyZWUuY291bnQ7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInNob3J0ZXN0Q29sdW1uU2l6ZVwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgLyo6IG51bWJlciove1xuICAgICAgdmFyIGNvbHVtblNpemVNYXAgPSB0aGlzLl9jb2x1bW5TaXplTWFwO1xuICAgICAgdmFyIHNpemUgPSAwO1xuICAgICAgZm9yICh2YXIgaSBpbiBjb2x1bW5TaXplTWFwKSB7XG4gICAgICAgIHZhciBoZWlnaHQgPSBjb2x1bW5TaXplTWFwWyhpIC8qOiBhbnkqLyldO1xuICAgICAgICBzaXplID0gc2l6ZSA9PT0gMCA/IGhlaWdodCA6IE1hdGgubWluKHNpemUsIGhlaWdodCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gc2l6ZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwidGFsbGVzdENvbHVtblNpemVcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIC8qOiBudW1iZXIqL3tcbiAgICAgIHZhciBjb2x1bW5TaXplTWFwID0gdGhpcy5fY29sdW1uU2l6ZU1hcDtcbiAgICAgIHZhciBzaXplID0gMDtcbiAgICAgIGZvciAodmFyIGkgaW4gY29sdW1uU2l6ZU1hcCkge1xuICAgICAgICB2YXIgaGVpZ2h0ID0gY29sdW1uU2l6ZU1hcFsoaSAvKjogYW55Ki8pXTtcbiAgICAgICAgc2l6ZSA9IE1hdGgubWF4KHNpemUsIGhlaWdodCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gc2l6ZTtcbiAgICB9XG4gIH1dKTtcbn0oKTtcbmV4cG9ydCB7IFBvc2l0aW9uQ2FjaGUgYXMgZGVmYXVsdCB9OyIsImltcG9ydCBhcnJheVdpdGhIb2xlcyBmcm9tIFwiLi9hcnJheVdpdGhIb2xlcy5qc1wiO1xuaW1wb3J0IGl0ZXJhYmxlVG9BcnJheUxpbWl0IGZyb20gXCIuL2l0ZXJhYmxlVG9BcnJheUxpbWl0LmpzXCI7XG5pbXBvcnQgdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkgZnJvbSBcIi4vdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkuanNcIjtcbmltcG9ydCBub25JdGVyYWJsZVJlc3QgZnJvbSBcIi4vbm9uSXRlcmFibGVSZXN0LmpzXCI7XG5mdW5jdGlvbiBfc2xpY2VkVG9BcnJheShyLCBlKSB7XG4gIHJldHVybiBhcnJheVdpdGhIb2xlcyhyKSB8fCBpdGVyYWJsZVRvQXJyYXlMaW1pdChyLCBlKSB8fCB1bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShyLCBlKSB8fCBub25JdGVyYWJsZVJlc3QoKTtcbn1cbmV4cG9ydCB7IF9zbGljZWRUb0FycmF5IGFzIGRlZmF1bHQgfTsiLCJmdW5jdGlvbiBfYXJyYXlXaXRoSG9sZXMocikge1xuICBpZiAoQXJyYXkuaXNBcnJheShyKSkgcmV0dXJuIHI7XG59XG5leHBvcnQgeyBfYXJyYXlXaXRoSG9sZXMgYXMgZGVmYXVsdCB9OyIsImZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXlMaW1pdChyLCBsKSB7XG4gIHZhciB0ID0gbnVsbCA9PSByID8gbnVsbCA6IFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIFN5bWJvbCAmJiByW1N5bWJvbC5pdGVyYXRvcl0gfHwgcltcIkBAaXRlcmF0b3JcIl07XG4gIGlmIChudWxsICE9IHQpIHtcbiAgICB2YXIgZSxcbiAgICAgIG4sXG4gICAgICBpLFxuICAgICAgdSxcbiAgICAgIGEgPSBbXSxcbiAgICAgIGYgPSAhMCxcbiAgICAgIG8gPSAhMTtcbiAgICB0cnkge1xuICAgICAgaWYgKGkgPSAodCA9IHQuY2FsbChyKSkubmV4dCwgMCA9PT0gbCkge1xuICAgICAgICBpZiAoT2JqZWN0KHQpICE9PSB0KSByZXR1cm47XG4gICAgICAgIGYgPSAhMTtcbiAgICAgIH0gZWxzZSBmb3IgKDsgIShmID0gKGUgPSBpLmNhbGwodCkpLmRvbmUpICYmIChhLnB1c2goZS52YWx1ZSksIGEubGVuZ3RoICE9PSBsKTsgZiA9ICEwKTtcbiAgICB9IGNhdGNoIChyKSB7XG4gICAgICBvID0gITAsIG4gPSByO1xuICAgIH0gZmluYWxseSB7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAoIWYgJiYgbnVsbCAhPSB0W1wicmV0dXJuXCJdICYmICh1ID0gdFtcInJldHVyblwiXSgpLCBPYmplY3QodSkgIT09IHUpKSByZXR1cm47XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBpZiAobykgdGhyb3cgbjtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGE7XG4gIH1cbn1cbmV4cG9ydCB7IF9pdGVyYWJsZVRvQXJyYXlMaW1pdCBhcyBkZWZhdWx0IH07IiwiZnVuY3Rpb24gX25vbkl0ZXJhYmxlUmVzdCgpIHtcbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTtcbn1cbmV4cG9ydCB7IF9ub25JdGVyYWJsZVJlc3QgYXMgZGVmYXVsdCB9OyIsImltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIjtcbmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3NcIjtcbmltcG9ydCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCI7XG5pbXBvcnQgX2dldFByb3RvdHlwZU9mIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mXCI7XG5pbXBvcnQgX2luaGVyaXRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCI7XG5pbXBvcnQgX2RlZmluZVByb3BlcnR5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5XCI7XG5mdW5jdGlvbiBvd25LZXlzKGUsIHIpIHsgdmFyIHQgPSBPYmplY3Qua2V5cyhlKTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIG8gPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKGUpOyByICYmIChvID0gby5maWx0ZXIoZnVuY3Rpb24gKHIpIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZSwgcikuZW51bWVyYWJsZTsgfSkpLCB0LnB1c2guYXBwbHkodCwgbyk7IH0gcmV0dXJuIHQ7IH1cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQoZSkgeyBmb3IgKHZhciByID0gMTsgciA8IGFyZ3VtZW50cy5sZW5ndGg7IHIrKykgeyB2YXIgdCA9IG51bGwgIT0gYXJndW1lbnRzW3JdID8gYXJndW1lbnRzW3JdIDoge307IHIgJSAyID8gb3duS2V5cyhPYmplY3QodCksICEwKS5mb3JFYWNoKGZ1bmN0aW9uIChyKSB7IF9kZWZpbmVQcm9wZXJ0eShlLCByLCB0W3JdKTsgfSkgOiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGUsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHQpKSA6IG93bktleXMoT2JqZWN0KHQpKS5mb3JFYWNoKGZ1bmN0aW9uIChyKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCByLCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHQsIHIpKTsgfSk7IH0gcmV0dXJuIGU7IH1cbmZ1bmN0aW9uIF9jYWxsU3VwZXIodCwgbywgZSkgeyByZXR1cm4gbyA9IF9nZXRQcm90b3R5cGVPZihvKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odCwgX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpID8gUmVmbGVjdC5jb25zdHJ1Y3QobywgZSB8fCBbXSwgX2dldFByb3RvdHlwZU9mKHQpLmNvbnN0cnVjdG9yKSA6IG8uYXBwbHkodCwgZSkpOyB9XG5mdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyB0cnkgeyB2YXIgdCA9ICFCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbiwgW10sIGZ1bmN0aW9uICgpIHt9KSk7IH0gY2F0Y2ggKHQpIHt9IHJldHVybiAoX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCA9IGZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IHJldHVybiAhIXQ7IH0pKCk7IH1cbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgcG9seWZpbGwgfSBmcm9tICdyZWFjdC1saWZlY3ljbGVzLWNvbXBhdCc7XG5pbXBvcnQgUG9zaXRpb25DYWNoZSBmcm9tICcuL1Bvc2l0aW9uQ2FjaGUnO1xuaW1wb3J0IHsgcmVxdWVzdEFuaW1hdGlvblRpbWVvdXQsIGNhbmNlbEFuaW1hdGlvblRpbWVvdXQgfSBmcm9tICcuLi91dGlscy9yZXF1ZXN0QW5pbWF0aW9uVGltZW91dCc7XG4vKjo6IGltcG9ydCB0eXBlIHtBbmltYXRpb25UaW1lb3V0SWR9IGZyb20gJy4uL3V0aWxzL3JlcXVlc3RBbmltYXRpb25UaW1lb3V0JzsqL1xuLyo6OiB0eXBlIFByb3BzID0ge1xuICBhdXRvSGVpZ2h0OiBib29sZWFuLFxuICBjZWxsQ291bnQ6IG51bWJlcixcbiAgY2VsbE1lYXN1cmVyQ2FjaGU6IENlbGxNZWFzdXJlckNhY2hlLFxuICBjZWxsUG9zaXRpb25lcjogUG9zaXRpb25lcixcbiAgY2VsbFJlbmRlcmVyOiBDZWxsUmVuZGVyZXIsXG4gIGNsYXNzTmFtZTogP3N0cmluZyxcbiAgaGVpZ2h0OiBudW1iZXIsXG4gIGlkOiA/c3RyaW5nLFxuICBrZXlNYXBwZXI6IEtleU1hcHBlcixcbiAgb25DZWxsc1JlbmRlcmVkOiA/T25DZWxsc1JlbmRlcmVkQ2FsbGJhY2ssXG4gIG9uU2Nyb2xsOiA/T25TY3JvbGxDYWxsYmFjayxcbiAgb3ZlcnNjYW5CeVBpeGVsczogbnVtYmVyLFxuICByb2xlOiBzdHJpbmcsXG4gIHNjcm9sbGluZ1Jlc2V0VGltZUludGVydmFsOiBudW1iZXIsXG4gIHN0eWxlOiBtaXhlZCxcbiAgdGFiSW5kZXg6IG51bWJlcixcbiAgd2lkdGg6IG51bWJlcixcbiAgcm93RGlyZWN0aW9uOiBzdHJpbmcsXG4gIHNjcm9sbFRvcD86IG51bWJlcixcbn07Ki9cbi8qOjogdHlwZSBTdGF0ZSA9IHtcbiAgaXNTY3JvbGxpbmc6IGJvb2xlYW4sXG4gIHNjcm9sbFRvcDogbnVtYmVyLFxufTsqL1xudmFyIGVtcHR5T2JqZWN0ID0ge307XG5cbi8qKlxuICogU3BlY2lmaWVzIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGR1cmluZyB3aGljaCB0byBkaXNhYmxlIHBvaW50ZXIgZXZlbnRzIHdoaWxlIGEgc2Nyb2xsIGlzIGluIHByb2dyZXNzLlxuICogVGhpcyBpbXByb3ZlcyBwZXJmb3JtYW5jZSBhbmQgbWFrZXMgc2Nyb2xsaW5nIHNtb290aGVyLlxuICovXG5leHBvcnQgdmFyIERFRkFVTFRfU0NST0xMSU5HX1JFU0VUX1RJTUVfSU5URVJWQUwgPSAxNTA7XG5cbi8qKlxuICogVGhpcyBjb21wb25lbnQgZWZmaWNpZW50bHkgZGlzcGxheXMgYXJiaXRyYXJpbHkgcG9zaXRpb25lZCBjZWxscyB1c2luZyB3aW5kb3dpbmcgdGVjaG5pcXVlcy5cbiAqIENlbGwgcG9zaXRpb24gaXMgZGV0ZXJtaW5lZCBieSBhbiBpbmplY3RlZCBgY2VsbFBvc2l0aW9uZXJgIHByb3BlcnR5LlxuICogV2luZG93aW5nIGlzIHZlcnRpY2FsOyB0aGlzIGNvbXBvbmVudCBkb2VzIG5vdCBzdXBwb3J0IGhvcml6b250YWwgc2Nyb2xsaW5nLlxuICpcbiAqIFJlbmRlcmluZyBvY2N1cnMgaW4gdHdvIHBoYXNlczpcbiAqIDEpIEZpcnN0IHBhc3MgdXNlcyBlc3RpbWF0ZWQgY2VsbCBzaXplcyAocHJvdmlkZWQgYnkgdGhlIGNhY2hlKSB0byBkZXRlcm1pbmUgaG93IG1hbnkgY2VsbHMgdG8gbWVhc3VyZSBpbiBhIGJhdGNoLlxuICogICAgQmF0Y2ggc2l6ZSBpcyBjaG9zZW4gdXNpbmcgYSBmYXN0LCBuYWl2ZSBsYXlvdXQgYWxnb3JpdGhtIHRoYXQgc3RhY2tzIGltYWdlcyBpbiBvcmRlciB1bnRpbCB0aGUgdmlld3BvcnQgaGFzIGJlZW4gZmlsbGVkLlxuICogICAgQWZ0ZXIgbWVhc3VyZW1lbnQgaXMgY29tcGxldGUgKGNvbXBvbmVudERpZE1vdW50IG9yIGNvbXBvbmVudERpZFVwZGF0ZSkgdGhpcyBjb21wb25lbnQgZXZhbHVhdGVzIHBvc2l0aW9uZWQgY2VsbHNcbiAqICAgIGluIG9yZGVyIHRvIGRldGVybWluZSBpZiBhbm90aGVyIG1lYXN1cmVtZW50IHBhc3MgaXMgcmVxdWlyZWQgKGVnIGlmIGFjdHVhbCBjZWxsIHNpemVzIHdlcmUgbGVzcyB0aGFuIGVzdGltYXRlZCBzaXplcykuXG4gKiAgICBBbGwgbWVhc3VyZW1lbnRzIGFyZSBwZXJtYW5lbnRseSBjYWNoZWQgKGtleWVkIGJ5IGBrZXlNYXBwZXJgKSBmb3IgcGVyZm9ybWFuY2UgcHVycG9zZXMuXG4gKiAyKSBTZWNvbmQgcGFzcyB1c2VzIHRoZSBleHRlcm5hbCBgY2VsbFBvc2l0aW9uZXJgIHRvIGxheW91dCBjZWxscy5cbiAqICAgIEF0IHRoaXMgdGltZSB0aGUgcG9zaXRpb25lciBoYXMgYWNjZXNzIHRvIGNhY2hlZCBzaXplIG1lYXN1cmVtZW50cyBmb3IgYWxsIGNlbGxzLlxuICogICAgVGhlIHBvc2l0aW9ucyBpdCByZXR1cm5zIGFyZSBjYWNoZWQgYnkgTWFzb25yeSBmb3IgZmFzdCBhY2Nlc3MgbGF0ZXIuXG4gKiAgICBQaGFzZSBvbmUgaXMgcmVwZWF0ZWQgaWYgdGhlIHVzZXIgc2Nyb2xscyBiZXlvbmQgdGhlIGN1cnJlbnQgbGF5b3V0J3MgYm91bmRzLlxuICogICAgSWYgdGhlIGxheW91dCBpcyBpbnZhbGlkYXRlZCBkdWUgdG8gZWcgYSByZXNpemUsIGNhY2hlZCBwb3NpdGlvbnMgY2FuIGJlIGNsZWFyZWQgdXNpbmcgYHJlY29tcHV0ZUNlbGxQb3NpdGlvbnMoKWAuXG4gKlxuICogQW5pbWF0aW9uIGNvbnN0cmFpbnRzOlxuICogICBTaW1wbGUgYW5pbWF0aW9ucyBhcmUgc3VwcG9ydGVkIChlZyB0cmFuc2xhdGUvc2xpZGUgaW50byBwbGFjZSBvbiBpbml0aWFsIHJldmVhbCkuXG4gKiAgIE1vcmUgY29tcGxleCBhbmltYXRpb25zIGFyZSBub3QgKGVnIGZseWluZyBmcm9tIG9uZSBwb3NpdGlvbiB0byBhbm90aGVyIG9uIHJlc2l6ZSkuXG4gKlxuICogTGF5b3V0IGNvbnN0cmFpbnRzOlxuICogICBUaGlzIGNvbXBvbmVudCBzdXBwb3J0cyBtdWx0aS1jb2x1bW4gbGF5b3V0LlxuICogICBUaGUgaGVpZ2h0IG9mIGVhY2ggaXRlbSBtYXkgdmFyeS5cbiAqICAgVGhlIHdpZHRoIG9mIGVhY2ggaXRlbSBtdXN0IG5vdCBleGNlZWQgdGhlIHdpZHRoIG9mIHRoZSBjb2x1bW4gaXQgaXMgXCJpblwiLlxuICogICBUaGUgbGVmdCBwb3NpdGlvbiBvZiBhbGwgaXRlbXMgd2l0aGluIGEgY29sdW1uIG11c3QgYWxpZ24uXG4gKiAgIChJdGVtcyBtYXkgbm90IHNwYW4gbXVsdGlwbGUgY29sdW1ucy4pXG4gKi9cbnZhciBNYXNvbnJ5ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfUmVhY3QkUHVyZUNvbXBvbmVudCkge1xuICBmdW5jdGlvbiBNYXNvbnJ5KCkge1xuICAgIHZhciBfdGhpcztcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTWFzb25yeSk7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cbiAgICBfdGhpcyA9IF9jYWxsU3VwZXIodGhpcywgTWFzb25yeSwgW10uY29uY2F0KGFyZ3MpKTtcbiAgICBfZGVmaW5lUHJvcGVydHkoX3RoaXMsIFwic3RhdGVcIiwge1xuICAgICAgaXNTY3JvbGxpbmc6IGZhbHNlLFxuICAgICAgc2Nyb2xsVG9wOiAwXG4gICAgfSk7XG4gICAgX2RlZmluZVByb3BlcnR5KF90aGlzLCBcIl9kZWJvdW5jZVJlc2V0SXNTY3JvbGxpbmdJZFwiLCB2b2lkIDApO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJfaW52YWxpZGF0ZU9uVXBkYXRlU3RhcnRJbmRleFwiLCBudWxsKTtcbiAgICBfZGVmaW5lUHJvcGVydHkoX3RoaXMsIFwiX2ludmFsaWRhdGVPblVwZGF0ZVN0b3BJbmRleFwiLCBudWxsKTtcbiAgICBfZGVmaW5lUHJvcGVydHkoX3RoaXMsIFwiX3Bvc2l0aW9uQ2FjaGVcIiwgbmV3IFBvc2l0aW9uQ2FjaGUoKSk7XG4gICAgX2RlZmluZVByb3BlcnR5KF90aGlzLCBcIl9zdGFydEluZGV4XCIsIG51bGwpO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJfc3RhcnRJbmRleE1lbW9pemVkXCIsIG51bGwpO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJfc3RvcEluZGV4XCIsIG51bGwpO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJfc3RvcEluZGV4TWVtb2l6ZWRcIiwgbnVsbCk7XG4gICAgX2RlZmluZVByb3BlcnR5KF90aGlzLCBcIl9kZWJvdW5jZVJlc2V0SXNTY3JvbGxpbmdDYWxsYmFja1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGlzU2Nyb2xsaW5nOiBmYWxzZVxuICAgICAgfSk7XG4gICAgfSk7XG4gICAgX2RlZmluZVByb3BlcnR5KF90aGlzLCBcIl9zZXRTY3JvbGxpbmdDb250YWluZXJSZWZcIiwgZnVuY3Rpb24gKHJlZikge1xuICAgICAgX3RoaXMuX3Njcm9sbGluZ0NvbnRhaW5lciA9IHJlZjtcbiAgICB9KTtcbiAgICBfZGVmaW5lUHJvcGVydHkoX3RoaXMsIFwiX29uU2Nyb2xsXCIsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgdmFyIGhlaWdodCA9IF90aGlzLnByb3BzLmhlaWdodDtcbiAgICAgIHZhciBldmVudFNjcm9sbFRvcCA9IGV2ZW50LmN1cnJlbnRUYXJnZXQuc2Nyb2xsVG9wO1xuXG4gICAgICAvLyBXaGVuIHRoaXMgY29tcG9uZW50IGlzIHNocnVuayBkcmFzdGljYWxseSwgUmVhY3QgZGlzcGF0Y2hlcyBhIHNlcmllcyBvZiBiYWNrLXRvLWJhY2sgc2Nyb2xsIGV2ZW50cyxcbiAgICAgIC8vIEdyYWR1YWxseSBjb252ZXJnaW5nIG9uIGEgc2Nyb2xsVG9wIHRoYXQgaXMgd2l0aGluIHRoZSBib3VuZHMgb2YgdGhlIG5ldywgc21hbGxlciBoZWlnaHQuXG4gICAgICAvLyBUaGlzIGNhdXNlcyBhIHNlcmllcyBvZiByYXBpZCByZW5kZXJzIHRoYXQgaXMgc2xvdyBmb3IgbG9uZyBsaXN0cy5cbiAgICAgIC8vIFdlIGNhbiBhdm9pZCB0aGF0IGJ5IGRvaW5nIHNvbWUgc2ltcGxlIGJvdW5kcyBjaGVja2luZyB0byBlbnN1cmUgdGhhdCBzY3JvbGwgb2Zmc2V0cyBuZXZlciBleGNlZWQgdGhlaXIgYm91bmRzLlxuICAgICAgdmFyIHNjcm9sbFRvcCA9IE1hdGgubWluKE1hdGgubWF4KDAsIF90aGlzLl9nZXRFc3RpbWF0ZWRUb3RhbEhlaWdodCgpIC0gaGVpZ2h0KSwgZXZlbnRTY3JvbGxUb3ApO1xuXG4gICAgICAvLyBPbiBpT1MsIHdlIGNhbiBhcnJpdmUgYXQgbmVnYXRpdmUgb2Zmc2V0cyBieSBzd2lwaW5nIHBhc3QgdGhlIHN0YXJ0IG9yIGVuZC5cbiAgICAgIC8vIEF2b2lkIHJlLXJlbmRlcmluZyBpbiB0aGlzIGNhc2UgYXMgaXQgY2FuIGNhdXNlIHByb2JsZW1zOyBzZWUgIzUzMiBmb3IgbW9yZS5cbiAgICAgIGlmIChldmVudFNjcm9sbFRvcCAhPT0gc2Nyb2xsVG9wKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gUHJldmVudCBwb2ludGVyIGV2ZW50cyBmcm9tIGludGVycnVwdGluZyBhIHNtb290aCBzY3JvbGxcbiAgICAgIF90aGlzLl9kZWJvdW5jZVJlc2V0SXNTY3JvbGxpbmcoKTtcblxuICAgICAgLy8gQ2VydGFpbiBkZXZpY2VzIChsaWtlIEFwcGxlIHRvdWNocGFkKSByYXBpZC1maXJlIGR1cGxpY2F0ZSBldmVudHMuXG4gICAgICAvLyBEb24ndCBmb3JjZSBhIHJlLXJlbmRlciBpZiB0aGlzIGlzIHRoZSBjYXNlLlxuICAgICAgLy8gVGhlIG1vdXNlIG1heSBtb3ZlIGZhc3RlciB0aGVuIHRoZSBhbmltYXRpb24gZnJhbWUgZG9lcy5cbiAgICAgIC8vIFVzZSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUgdG8gYXZvaWQgb3Zlci11cGRhdGluZy5cbiAgICAgIGlmIChfdGhpcy5zdGF0ZS5zY3JvbGxUb3AgIT09IHNjcm9sbFRvcCkge1xuICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgaXNTY3JvbGxpbmc6IHRydWUsXG4gICAgICAgICAgc2Nyb2xsVG9wOiBzY3JvbGxUb3BcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG4gIF9pbmhlcml0cyhNYXNvbnJ5LCBfUmVhY3QkUHVyZUNvbXBvbmVudCk7XG4gIHJldHVybiBfY3JlYXRlQ2xhc3MoTWFzb25yeSwgW3tcbiAgICBrZXk6IFwiY2xlYXJDZWxsUG9zaXRpb25zXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNsZWFyQ2VsbFBvc2l0aW9ucygpIHtcbiAgICAgIHRoaXMuX3Bvc2l0aW9uQ2FjaGUgPSBuZXcgUG9zaXRpb25DYWNoZSgpO1xuICAgICAgdGhpcy5mb3JjZVVwZGF0ZSgpO1xuICAgIH1cblxuICAgIC8vIEhBQ0sgVGhpcyBtZXRob2Qgc2lnbmF0dXJlIHdhcyBpbnRlbmRlZCBmb3IgR3JpZFxuICB9LCB7XG4gICAga2V5OiBcImludmFsaWRhdGVDZWxsU2l6ZUFmdGVyUmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGludmFsaWRhdGVDZWxsU2l6ZUFmdGVyUmVuZGVyKF9yZWYpIHtcbiAgICAgIHZhciBpbmRleCA9IF9yZWYucm93SW5kZXg7XG4gICAgICBpZiAodGhpcy5faW52YWxpZGF0ZU9uVXBkYXRlU3RhcnRJbmRleCA9PT0gbnVsbCkge1xuICAgICAgICB0aGlzLl9pbnZhbGlkYXRlT25VcGRhdGVTdGFydEluZGV4ID0gaW5kZXg7XG4gICAgICAgIHRoaXMuX2ludmFsaWRhdGVPblVwZGF0ZVN0b3BJbmRleCA9IGluZGV4O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5faW52YWxpZGF0ZU9uVXBkYXRlU3RhcnRJbmRleCA9IE1hdGgubWluKHRoaXMuX2ludmFsaWRhdGVPblVwZGF0ZVN0YXJ0SW5kZXgsIGluZGV4KTtcbiAgICAgICAgdGhpcy5faW52YWxpZGF0ZU9uVXBkYXRlU3RvcEluZGV4ID0gTWF0aC5tYXgodGhpcy5faW52YWxpZGF0ZU9uVXBkYXRlU3RvcEluZGV4LCBpbmRleCk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlY29tcHV0ZUNlbGxQb3NpdGlvbnNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVjb21wdXRlQ2VsbFBvc2l0aW9ucygpIHtcbiAgICAgIHZhciBzdG9wSW5kZXggPSB0aGlzLl9wb3NpdGlvbkNhY2hlLmNvdW50IC0gMTtcbiAgICAgIHRoaXMuX3Bvc2l0aW9uQ2FjaGUgPSBuZXcgUG9zaXRpb25DYWNoZSgpO1xuICAgICAgdGhpcy5fcG9wdWxhdGVQb3NpdGlvbkNhY2hlKDAsIHN0b3BJbmRleCk7XG4gICAgICB0aGlzLmZvcmNlVXBkYXRlKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNvbXBvbmVudERpZE1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgdGhpcy5fY2hlY2tJbnZhbGlkYXRlT25VcGRhdGUoKTtcbiAgICAgIHRoaXMuX2ludm9rZU9uU2Nyb2xsQ2FsbGJhY2soKTtcbiAgICAgIHRoaXMuX2ludm9rZU9uQ2VsbHNSZW5kZXJlZENhbGxiYWNrKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNvbXBvbmVudERpZFVwZGF0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzIC8qOiBQcm9wcyovLCBwcmV2U3RhdGUgLyo6IFN0YXRlKi8pIHtcbiAgICAgIHRoaXMuX2NoZWNrSW52YWxpZGF0ZU9uVXBkYXRlKCk7XG4gICAgICB0aGlzLl9pbnZva2VPblNjcm9sbENhbGxiYWNrKCk7XG4gICAgICB0aGlzLl9pbnZva2VPbkNlbGxzUmVuZGVyZWRDYWxsYmFjaygpO1xuICAgICAgaWYgKHRoaXMucHJvcHMuc2Nyb2xsVG9wICE9PSBwcmV2UHJvcHMuc2Nyb2xsVG9wKSB7XG4gICAgICAgIHRoaXMuX2RlYm91bmNlUmVzZXRJc1Njcm9sbGluZygpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjb21wb25lbnRXaWxsVW5tb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIGlmICh0aGlzLl9kZWJvdW5jZVJlc2V0SXNTY3JvbGxpbmdJZCkge1xuICAgICAgICBjYW5jZWxBbmltYXRpb25UaW1lb3V0KHRoaXMuX2RlYm91bmNlUmVzZXRJc1Njcm9sbGluZ0lkKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgYXV0b0hlaWdodCA9IF90aGlzJHByb3BzLmF1dG9IZWlnaHQsXG4gICAgICAgIGNlbGxDb3VudCA9IF90aGlzJHByb3BzLmNlbGxDb3VudCxcbiAgICAgICAgY2VsbE1lYXN1cmVyQ2FjaGUgPSBfdGhpcyRwcm9wcy5jZWxsTWVhc3VyZXJDYWNoZSxcbiAgICAgICAgY2VsbFJlbmRlcmVyID0gX3RoaXMkcHJvcHMuY2VsbFJlbmRlcmVyLFxuICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wcy5jbGFzc05hbWUsXG4gICAgICAgIGhlaWdodCA9IF90aGlzJHByb3BzLmhlaWdodCxcbiAgICAgICAgaWQgPSBfdGhpcyRwcm9wcy5pZCxcbiAgICAgICAga2V5TWFwcGVyID0gX3RoaXMkcHJvcHMua2V5TWFwcGVyLFxuICAgICAgICBvdmVyc2NhbkJ5UGl4ZWxzID0gX3RoaXMkcHJvcHMub3ZlcnNjYW5CeVBpeGVscyxcbiAgICAgICAgcm9sZSA9IF90aGlzJHByb3BzLnJvbGUsXG4gICAgICAgIHN0eWxlID0gX3RoaXMkcHJvcHMuc3R5bGUsXG4gICAgICAgIHRhYkluZGV4ID0gX3RoaXMkcHJvcHMudGFiSW5kZXgsXG4gICAgICAgIHdpZHRoID0gX3RoaXMkcHJvcHMud2lkdGgsXG4gICAgICAgIHJvd0RpcmVjdGlvbiA9IF90aGlzJHByb3BzLnJvd0RpcmVjdGlvbjtcbiAgICAgIHZhciBfdGhpcyRzdGF0ZSA9IHRoaXMuc3RhdGUsXG4gICAgICAgIGlzU2Nyb2xsaW5nID0gX3RoaXMkc3RhdGUuaXNTY3JvbGxpbmcsXG4gICAgICAgIHNjcm9sbFRvcCA9IF90aGlzJHN0YXRlLnNjcm9sbFRvcDtcbiAgICAgIHZhciBjaGlsZHJlbiA9IFtdO1xuICAgICAgdmFyIGVzdGltYXRlVG90YWxIZWlnaHQgPSB0aGlzLl9nZXRFc3RpbWF0ZWRUb3RhbEhlaWdodCgpO1xuICAgICAgdmFyIHNob3J0ZXN0Q29sdW1uU2l6ZSA9IHRoaXMuX3Bvc2l0aW9uQ2FjaGUuc2hvcnRlc3RDb2x1bW5TaXplO1xuICAgICAgdmFyIG1lYXN1cmVkQ2VsbENvdW50ID0gdGhpcy5fcG9zaXRpb25DYWNoZS5jb3VudDtcbiAgICAgIHZhciBzdGFydEluZGV4ID0gMDtcbiAgICAgIHZhciBzdG9wSW5kZXg7XG4gICAgICB0aGlzLl9wb3NpdGlvbkNhY2hlLnJhbmdlKE1hdGgubWF4KDAsIHNjcm9sbFRvcCAtIG92ZXJzY2FuQnlQaXhlbHMpLCBoZWlnaHQgKyBvdmVyc2NhbkJ5UGl4ZWxzICogMiwgZnVuY3Rpb24gKGluZGV4IC8qOiBudW1iZXIqLywgbGVmdCAvKjogbnVtYmVyKi8sIHRvcCAvKjogbnVtYmVyKi8pIHtcbiAgICAgICAgaWYgKHR5cGVvZiBzdG9wSW5kZXggPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgc3RhcnRJbmRleCA9IGluZGV4O1xuICAgICAgICAgIHN0b3BJbmRleCA9IGluZGV4O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN0YXJ0SW5kZXggPSBNYXRoLm1pbihzdGFydEluZGV4LCBpbmRleCk7XG4gICAgICAgICAgc3RvcEluZGV4ID0gTWF0aC5tYXgoc3RvcEluZGV4LCBpbmRleCk7XG4gICAgICAgIH1cbiAgICAgICAgY2hpbGRyZW4ucHVzaChjZWxsUmVuZGVyZXIoe1xuICAgICAgICAgIGluZGV4OiBpbmRleCxcbiAgICAgICAgICBpc1Njcm9sbGluZzogaXNTY3JvbGxpbmcsXG4gICAgICAgICAga2V5OiBrZXlNYXBwZXIoaW5kZXgpLFxuICAgICAgICAgIHBhcmVudDogX3RoaXMyLFxuICAgICAgICAgIHN0eWxlOiBfZGVmaW5lUHJvcGVydHkoX2RlZmluZVByb3BlcnR5KF9kZWZpbmVQcm9wZXJ0eShfZGVmaW5lUHJvcGVydHkoe1xuICAgICAgICAgICAgaGVpZ2h0OiBjZWxsTWVhc3VyZXJDYWNoZS5nZXRIZWlnaHQoaW5kZXgpXG4gICAgICAgICAgfSwgcm93RGlyZWN0aW9uID09PSAnbHRyJyA/ICdsZWZ0JyA6ICdyaWdodCcsIGxlZnQpLCBcInBvc2l0aW9uXCIsICdhYnNvbHV0ZScpLCBcInRvcFwiLCB0b3ApLCBcIndpZHRoXCIsIGNlbGxNZWFzdXJlckNhY2hlLmdldFdpZHRoKGluZGV4KSlcbiAgICAgICAgfSkpO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIFdlIG5lZWQgdG8gbWVhc3VyZSBhZGRpdGlvbmFsIGNlbGxzIGZvciB0aGlzIGxheW91dFxuICAgICAgaWYgKHNob3J0ZXN0Q29sdW1uU2l6ZSA8IHNjcm9sbFRvcCArIGhlaWdodCArIG92ZXJzY2FuQnlQaXhlbHMgJiYgbWVhc3VyZWRDZWxsQ291bnQgPCBjZWxsQ291bnQpIHtcbiAgICAgICAgdmFyIGJhdGNoU2l6ZSA9IE1hdGgubWluKGNlbGxDb3VudCAtIG1lYXN1cmVkQ2VsbENvdW50LCBNYXRoLmNlaWwoKHNjcm9sbFRvcCArIGhlaWdodCArIG92ZXJzY2FuQnlQaXhlbHMgLSBzaG9ydGVzdENvbHVtblNpemUpIC8gY2VsbE1lYXN1cmVyQ2FjaGUuZGVmYXVsdEhlaWdodCAqIHdpZHRoIC8gY2VsbE1lYXN1cmVyQ2FjaGUuZGVmYXVsdFdpZHRoKSk7XG4gICAgICAgIGZvciAodmFyIF9pbmRleCA9IG1lYXN1cmVkQ2VsbENvdW50OyBfaW5kZXggPCBtZWFzdXJlZENlbGxDb3VudCArIGJhdGNoU2l6ZTsgX2luZGV4KyspIHtcbiAgICAgICAgICBzdG9wSW5kZXggPSBfaW5kZXg7XG4gICAgICAgICAgY2hpbGRyZW4ucHVzaChjZWxsUmVuZGVyZXIoe1xuICAgICAgICAgICAgaW5kZXg6IF9pbmRleCxcbiAgICAgICAgICAgIGlzU2Nyb2xsaW5nOiBpc1Njcm9sbGluZyxcbiAgICAgICAgICAgIGtleToga2V5TWFwcGVyKF9pbmRleCksXG4gICAgICAgICAgICBwYXJlbnQ6IHRoaXMsXG4gICAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgICB3aWR0aDogY2VsbE1lYXN1cmVyQ2FjaGUuZ2V0V2lkdGgoX2luZGV4KVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhpcy5fc3RhcnRJbmRleCA9IHN0YXJ0SW5kZXg7XG4gICAgICB0aGlzLl9zdG9wSW5kZXggPSBzdG9wSW5kZXg7XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICByZWY6IHRoaXMuX3NldFNjcm9sbGluZ0NvbnRhaW5lclJlZixcbiAgICAgICAgXCJhcmlhLWxhYmVsXCI6IHRoaXMucHJvcHNbJ2FyaWEtbGFiZWwnXSxcbiAgICAgICAgY2xhc3NOYW1lOiBjbHN4KCdSZWFjdFZpcnR1YWxpemVkX19NYXNvbnJ5JywgY2xhc3NOYW1lKSxcbiAgICAgICAgaWQ6IGlkLFxuICAgICAgICBvblNjcm9sbDogdGhpcy5fb25TY3JvbGwsXG4gICAgICAgIHJvbGU6IHJvbGUsXG4gICAgICAgIHN0eWxlOiBfb2JqZWN0U3ByZWFkKHtcbiAgICAgICAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICAgICAgICBkaXJlY3Rpb246ICdsdHInLFxuICAgICAgICAgIGhlaWdodDogYXV0b0hlaWdodCA/ICdhdXRvJyA6IGhlaWdodCxcbiAgICAgICAgICBvdmVyZmxvd1g6ICdoaWRkZW4nLFxuICAgICAgICAgIG92ZXJmbG93WTogZXN0aW1hdGVUb3RhbEhlaWdodCA8IGhlaWdodCA/ICdoaWRkZW4nIDogJ2F1dG8nLFxuICAgICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgICAgIHdpZHRoOiB3aWR0aCxcbiAgICAgICAgICBXZWJraXRPdmVyZmxvd1Njcm9sbGluZzogJ3RvdWNoJyxcbiAgICAgICAgICB3aWxsQ2hhbmdlOiAndHJhbnNmb3JtJ1xuICAgICAgICB9LCBzdHlsZSksXG4gICAgICAgIHRhYkluZGV4OiB0YWJJbmRleFxuICAgICAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICBjbGFzc05hbWU6IFwiUmVhY3RWaXJ0dWFsaXplZF9fTWFzb25yeV9faW5uZXJTY3JvbGxDb250YWluZXJcIixcbiAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICAgIGhlaWdodDogZXN0aW1hdGVUb3RhbEhlaWdodCxcbiAgICAgICAgICBtYXhXaWR0aDogJzEwMCUnLFxuICAgICAgICAgIG1heEhlaWdodDogZXN0aW1hdGVUb3RhbEhlaWdodCxcbiAgICAgICAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gICAgICAgICAgcG9pbnRlckV2ZW50czogaXNTY3JvbGxpbmcgPyAnbm9uZScgOiAnJyxcbiAgICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJ1xuICAgICAgICB9XG4gICAgICB9LCBjaGlsZHJlbikpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJfY2hlY2tJbnZhbGlkYXRlT25VcGRhdGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2NoZWNrSW52YWxpZGF0ZU9uVXBkYXRlKCkge1xuICAgICAgaWYgKHR5cGVvZiB0aGlzLl9pbnZhbGlkYXRlT25VcGRhdGVTdGFydEluZGV4ID09PSAnbnVtYmVyJykge1xuICAgICAgICB2YXIgc3RhcnRJbmRleCA9IHRoaXMuX2ludmFsaWRhdGVPblVwZGF0ZVN0YXJ0SW5kZXg7XG4gICAgICAgIHZhciBzdG9wSW5kZXggPSB0aGlzLl9pbnZhbGlkYXRlT25VcGRhdGVTdG9wSW5kZXg7XG4gICAgICAgIHRoaXMuX2ludmFsaWRhdGVPblVwZGF0ZVN0YXJ0SW5kZXggPSBudWxsO1xuICAgICAgICB0aGlzLl9pbnZhbGlkYXRlT25VcGRhdGVTdG9wSW5kZXggPSBudWxsO1xuXG4gICAgICAgIC8vIFF1ZXJ5IGV4dGVybmFsIGxheW91dCBsb2dpYyBmb3IgcG9zaXRpb24gb2YgbmV3bHktbWVhc3VyZWQgY2VsbHNcbiAgICAgICAgdGhpcy5fcG9wdWxhdGVQb3NpdGlvbkNhY2hlKHN0YXJ0SW5kZXgsIHN0b3BJbmRleCk7XG4gICAgICAgIHRoaXMuZm9yY2VVcGRhdGUoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiX2RlYm91bmNlUmVzZXRJc1Njcm9sbGluZ1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZGVib3VuY2VSZXNldElzU2Nyb2xsaW5nKCkge1xuICAgICAgdmFyIHNjcm9sbGluZ1Jlc2V0VGltZUludGVydmFsID0gdGhpcy5wcm9wcy5zY3JvbGxpbmdSZXNldFRpbWVJbnRlcnZhbDtcbiAgICAgIGlmICh0aGlzLl9kZWJvdW5jZVJlc2V0SXNTY3JvbGxpbmdJZCkge1xuICAgICAgICBjYW5jZWxBbmltYXRpb25UaW1lb3V0KHRoaXMuX2RlYm91bmNlUmVzZXRJc1Njcm9sbGluZ0lkKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX2RlYm91bmNlUmVzZXRJc1Njcm9sbGluZ0lkID0gcmVxdWVzdEFuaW1hdGlvblRpbWVvdXQodGhpcy5fZGVib3VuY2VSZXNldElzU2Nyb2xsaW5nQ2FsbGJhY2ssIHNjcm9sbGluZ1Jlc2V0VGltZUludGVydmFsKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiX2dldEVzdGltYXRlZFRvdGFsSGVpZ2h0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9nZXRFc3RpbWF0ZWRUb3RhbEhlaWdodCgpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczIgPSB0aGlzLnByb3BzLFxuICAgICAgICBjZWxsQ291bnQgPSBfdGhpcyRwcm9wczIuY2VsbENvdW50LFxuICAgICAgICBjZWxsTWVhc3VyZXJDYWNoZSA9IF90aGlzJHByb3BzMi5jZWxsTWVhc3VyZXJDYWNoZSxcbiAgICAgICAgd2lkdGggPSBfdGhpcyRwcm9wczIud2lkdGg7XG4gICAgICB2YXIgZXN0aW1hdGVkQ29sdW1uQ291bnQgPSBNYXRoLm1heCgxLCBNYXRoLmZsb29yKHdpZHRoIC8gY2VsbE1lYXN1cmVyQ2FjaGUuZGVmYXVsdFdpZHRoKSk7XG4gICAgICByZXR1cm4gdGhpcy5fcG9zaXRpb25DYWNoZS5lc3RpbWF0ZVRvdGFsSGVpZ2h0KGNlbGxDb3VudCwgZXN0aW1hdGVkQ29sdW1uQ291bnQsIGNlbGxNZWFzdXJlckNhY2hlLmRlZmF1bHRIZWlnaHQpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJfaW52b2tlT25TY3JvbGxDYWxsYmFja1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfaW52b2tlT25TY3JvbGxDYWxsYmFjaygpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczMgPSB0aGlzLnByb3BzLFxuICAgICAgICBoZWlnaHQgPSBfdGhpcyRwcm9wczMuaGVpZ2h0LFxuICAgICAgICBvblNjcm9sbCA9IF90aGlzJHByb3BzMy5vblNjcm9sbDtcbiAgICAgIHZhciBzY3JvbGxUb3AgPSB0aGlzLnN0YXRlLnNjcm9sbFRvcDtcbiAgICAgIGlmICh0aGlzLl9vblNjcm9sbE1lbW9pemVkICE9PSBzY3JvbGxUb3ApIHtcbiAgICAgICAgb25TY3JvbGwoe1xuICAgICAgICAgIGNsaWVudEhlaWdodDogaGVpZ2h0LFxuICAgICAgICAgIHNjcm9sbEhlaWdodDogdGhpcy5fZ2V0RXN0aW1hdGVkVG90YWxIZWlnaHQoKSxcbiAgICAgICAgICBzY3JvbGxUb3A6IHNjcm9sbFRvcFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5fb25TY3JvbGxNZW1vaXplZCA9IHNjcm9sbFRvcDtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiX2ludm9rZU9uQ2VsbHNSZW5kZXJlZENhbGxiYWNrXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9pbnZva2VPbkNlbGxzUmVuZGVyZWRDYWxsYmFjaygpIHtcbiAgICAgIGlmICh0aGlzLl9zdGFydEluZGV4TWVtb2l6ZWQgIT09IHRoaXMuX3N0YXJ0SW5kZXggfHwgdGhpcy5fc3RvcEluZGV4TWVtb2l6ZWQgIT09IHRoaXMuX3N0b3BJbmRleCkge1xuICAgICAgICB2YXIgb25DZWxsc1JlbmRlcmVkID0gdGhpcy5wcm9wcy5vbkNlbGxzUmVuZGVyZWQ7XG4gICAgICAgIG9uQ2VsbHNSZW5kZXJlZCh7XG4gICAgICAgICAgc3RhcnRJbmRleDogdGhpcy5fc3RhcnRJbmRleCxcbiAgICAgICAgICBzdG9wSW5kZXg6IHRoaXMuX3N0b3BJbmRleFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5fc3RhcnRJbmRleE1lbW9pemVkID0gdGhpcy5fc3RhcnRJbmRleDtcbiAgICAgICAgdGhpcy5fc3RvcEluZGV4TWVtb2l6ZWQgPSB0aGlzLl9zdG9wSW5kZXg7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIl9wb3B1bGF0ZVBvc2l0aW9uQ2FjaGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3BvcHVsYXRlUG9zaXRpb25DYWNoZShzdGFydEluZGV4IC8qOiBudW1iZXIqLywgc3RvcEluZGV4IC8qOiBudW1iZXIqLykge1xuICAgICAgdmFyIF90aGlzJHByb3BzNCA9IHRoaXMucHJvcHMsXG4gICAgICAgIGNlbGxNZWFzdXJlckNhY2hlID0gX3RoaXMkcHJvcHM0LmNlbGxNZWFzdXJlckNhY2hlLFxuICAgICAgICBjZWxsUG9zaXRpb25lciA9IF90aGlzJHByb3BzNC5jZWxsUG9zaXRpb25lcjtcbiAgICAgIGZvciAodmFyIF9pbmRleDIgPSBzdGFydEluZGV4OyBfaW5kZXgyIDw9IHN0b3BJbmRleDsgX2luZGV4MisrKSB7XG4gICAgICAgIHZhciBfY2VsbFBvc2l0aW9uZXIgPSBjZWxsUG9zaXRpb25lcihfaW5kZXgyKSxcbiAgICAgICAgICBsZWZ0ID0gX2NlbGxQb3NpdGlvbmVyLmxlZnQsXG4gICAgICAgICAgdG9wID0gX2NlbGxQb3NpdGlvbmVyLnRvcDtcbiAgICAgICAgdGhpcy5fcG9zaXRpb25DYWNoZS5zZXRQb3NpdGlvbihfaW5kZXgyLCBsZWZ0LCB0b3AsIGNlbGxNZWFzdXJlckNhY2hlLmdldEhlaWdodChfaW5kZXgyKSk7XG4gICAgICB9XG4gICAgfVxuICB9XSwgW3tcbiAgICBrZXk6IFwiZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyhuZXh0UHJvcHMgLyo6IFByb3BzKi8sIHByZXZTdGF0ZSAvKjogU3RhdGUqLykgLyo6ICRTaGFwZTxTdGF0ZT4qL3tcbiAgICAgIGlmIChuZXh0UHJvcHMuc2Nyb2xsVG9wICE9PSB1bmRlZmluZWQgJiYgcHJldlN0YXRlLnNjcm9sbFRvcCAhPT0gbmV4dFByb3BzLnNjcm9sbFRvcCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGlzU2Nyb2xsaW5nOiB0cnVlLFxuICAgICAgICAgIHNjcm9sbFRvcDogbmV4dFByb3BzLnNjcm9sbFRvcFxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XSk7XG59KFJlYWN0LlB1cmVDb21wb25lbnQpO1xuX2RlZmluZVByb3BlcnR5KE1hc29ucnksIFwiZGVmYXVsdFByb3BzXCIsIHtcbiAgYXV0b0hlaWdodDogZmFsc2UsXG4gIGtleU1hcHBlcjogaWRlbnRpdHksXG4gIG9uQ2VsbHNSZW5kZXJlZDogbm9vcCxcbiAgb25TY3JvbGw6IG5vb3AsXG4gIG92ZXJzY2FuQnlQaXhlbHM6IDIwLFxuICByb2xlOiAnZ3JpZCcsXG4gIHNjcm9sbGluZ1Jlc2V0VGltZUludGVydmFsOiBERUZBVUxUX1NDUk9MTElOR19SRVNFVF9USU1FX0lOVEVSVkFMLFxuICBzdHlsZTogZW1wdHlPYmplY3QsXG4gIHRhYkluZGV4OiAwLFxuICByb3dEaXJlY3Rpb246ICdsdHInXG59KTtcbmZ1bmN0aW9uIGlkZW50aXR5KHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZTtcbn1cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuLyo6OiB0eXBlIEtleU1hcHBlciA9IChpbmRleDogbnVtYmVyKSA9PiBtaXhlZDsqL1xuLyo6OiBleHBvcnQgdHlwZSBDZWxsTWVhc3VyZXJDYWNoZSA9IHtcbiAgZGVmYXVsdEhlaWdodDogbnVtYmVyLFxuICBkZWZhdWx0V2lkdGg6IG51bWJlcixcbiAgZ2V0SGVpZ2h0OiAoaW5kZXg6IG51bWJlcikgPT4gbnVtYmVyLFxuICBnZXRXaWR0aDogKGluZGV4OiBudW1iZXIpID0+IG51bWJlcixcbn07Ki9cbi8qOjogdHlwZSBDZWxsUmVuZGVyZXIgPSAocGFyYW1zOiB7fFxuICBpbmRleDogbnVtYmVyLFxuICBpc1Njcm9sbGluZzogYm9vbGVhbixcbiAga2V5OiBtaXhlZCxcbiAgcGFyZW50OiBtaXhlZCxcbiAgc3R5bGU6IG1peGVkLFxufH0pID0+IG1peGVkOyovXG4vKjo6IHR5cGUgT25DZWxsc1JlbmRlcmVkQ2FsbGJhY2sgPSAocGFyYW1zOiB7fFxuICBzdGFydEluZGV4OiBudW1iZXIsXG4gIHN0b3BJbmRleDogbnVtYmVyLFxufH0pID0+IHZvaWQ7Ki9cbi8qOjogdHlwZSBPblNjcm9sbENhbGxiYWNrID0gKHBhcmFtczoge3xcbiAgY2xpZW50SGVpZ2h0OiBudW1iZXIsXG4gIHNjcm9sbEhlaWdodDogbnVtYmVyLFxuICBzY3JvbGxUb3A6IG51bWJlcixcbnx9KSA9PiB2b2lkOyovXG4vKjo6IHR5cGUgUG9zaXRpb24gPSB7XG4gIGxlZnQ6IG51bWJlcixcbiAgdG9wOiBudW1iZXIsXG59OyovXG5wb2x5ZmlsbChNYXNvbnJ5KTtcbmV4cG9ydCBkZWZhdWx0IE1hc29ucnk7XG4vKjo6IGV4cG9ydCB0eXBlIFBvc2l0aW9uZXIgPSAoaW5kZXg6IG51bWJlcikgPT4gUG9zaXRpb247Ki8iLCJpbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCI7XG5pbXBvcnQgX2NyZWF0ZUNsYXNzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzXCI7XG5pbXBvcnQgX2RlZmluZVByb3BlcnR5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5XCI7XG5pbXBvcnQgeyBDZWxsTWVhc3VyZXJDYWNoZSB9IGZyb20gJy4uL0NlbGxNZWFzdXJlcic7XG4vKjo6IHR5cGUgQ2VsbE1lYXN1cmVyQ2FjaGVEZWNvcmF0b3JQYXJhbXMgPSB7XG4gIGNlbGxNZWFzdXJlckNhY2hlOiBDZWxsTWVhc3VyZXJDYWNoZSxcbiAgY29sdW1uSW5kZXhPZmZzZXQ6IG51bWJlcixcbiAgcm93SW5kZXhPZmZzZXQ6IG51bWJlcixcbn07Ki9cbi8qOjogdHlwZSBJbmRleFBhcmFtID0ge1xuICBpbmRleDogbnVtYmVyLFxufTsqL1xuLyoqXG4gKiBDYWNoZXMgbWVhc3VyZW1lbnRzIGZvciBhIGdpdmVuIGNlbGwuXG4gKi9cbnZhciBDZWxsTWVhc3VyZXJDYWNoZURlY29yYXRvciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIENlbGxNZWFzdXJlckNhY2hlRGVjb3JhdG9yKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgdmFyIHBhcmFtcyAvKjogQ2VsbE1lYXN1cmVyQ2FjaGVEZWNvcmF0b3JQYXJhbXMqLyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENlbGxNZWFzdXJlckNhY2hlRGVjb3JhdG9yKTtcbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJfY2VsbE1lYXN1cmVyQ2FjaGVcIiwgdm9pZCAwKTtcbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJfY29sdW1uSW5kZXhPZmZzZXRcIiwgdm9pZCAwKTtcbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJfcm93SW5kZXhPZmZzZXRcIiwgdm9pZCAwKTtcbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJjb2x1bW5XaWR0aFwiLCBmdW5jdGlvbiAoX3JlZiAvKjo6ICovKSB7XG4gICAgICB2YXIgaW5kZXggPSBfcmVmIC8qOjogKi8uaW5kZXg7XG4gICAgICBfdGhpcy5fY2VsbE1lYXN1cmVyQ2FjaGUuY29sdW1uV2lkdGgoe1xuICAgICAgICBpbmRleDogaW5kZXggKyBfdGhpcy5fY29sdW1uSW5kZXhPZmZzZXRcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInJvd0hlaWdodFwiLCBmdW5jdGlvbiAoX3JlZjIgLyo6OiAqLykge1xuICAgICAgdmFyIGluZGV4ID0gX3JlZjIgLyo6OiAqLy5pbmRleDtcbiAgICAgIF90aGlzLl9jZWxsTWVhc3VyZXJDYWNoZS5yb3dIZWlnaHQoe1xuICAgICAgICBpbmRleDogaW5kZXggKyBfdGhpcy5fcm93SW5kZXhPZmZzZXRcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHZhciBjZWxsTWVhc3VyZXJDYWNoZSA9IHBhcmFtcy5jZWxsTWVhc3VyZXJDYWNoZSxcbiAgICAgIF9wYXJhbXMkY29sdW1uSW5kZXhPZiA9IHBhcmFtcy5jb2x1bW5JbmRleE9mZnNldCxcbiAgICAgIGNvbHVtbkluZGV4T2Zmc2V0ID0gX3BhcmFtcyRjb2x1bW5JbmRleE9mID09PSB2b2lkIDAgPyAwIDogX3BhcmFtcyRjb2x1bW5JbmRleE9mLFxuICAgICAgX3BhcmFtcyRyb3dJbmRleE9mZnNlID0gcGFyYW1zLnJvd0luZGV4T2Zmc2V0LFxuICAgICAgcm93SW5kZXhPZmZzZXQgPSBfcGFyYW1zJHJvd0luZGV4T2Zmc2UgPT09IHZvaWQgMCA/IDAgOiBfcGFyYW1zJHJvd0luZGV4T2Zmc2U7XG4gICAgdGhpcy5fY2VsbE1lYXN1cmVyQ2FjaGUgPSBjZWxsTWVhc3VyZXJDYWNoZTtcbiAgICB0aGlzLl9jb2x1bW5JbmRleE9mZnNldCA9IGNvbHVtbkluZGV4T2Zmc2V0O1xuICAgIHRoaXMuX3Jvd0luZGV4T2Zmc2V0ID0gcm93SW5kZXhPZmZzZXQ7XG4gIH1cbiAgcmV0dXJuIF9jcmVhdGVDbGFzcyhDZWxsTWVhc3VyZXJDYWNoZURlY29yYXRvciwgW3tcbiAgICBrZXk6IFwiY2xlYXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY2xlYXIocm93SW5kZXggLyo6IG51bWJlciovLCBjb2x1bW5JbmRleCAvKjogbnVtYmVyKi8pIC8qOiB2b2lkKi97XG4gICAgICB0aGlzLl9jZWxsTWVhc3VyZXJDYWNoZS5jbGVhcihyb3dJbmRleCArIHRoaXMuX3Jvd0luZGV4T2Zmc2V0LCBjb2x1bW5JbmRleCArIHRoaXMuX2NvbHVtbkluZGV4T2Zmc2V0KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY2xlYXJBbGxcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY2xlYXJBbGwoKSAvKjogdm9pZCove1xuICAgICAgdGhpcy5fY2VsbE1lYXN1cmVyQ2FjaGUuY2xlYXJBbGwoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZGVmYXVsdEhlaWdodFwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgLyo6IG51bWJlciove1xuICAgICAgcmV0dXJuIHRoaXMuX2NlbGxNZWFzdXJlckNhY2hlLmRlZmF1bHRIZWlnaHQ7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImRlZmF1bHRXaWR0aFwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgLyo6IG51bWJlciove1xuICAgICAgcmV0dXJuIHRoaXMuX2NlbGxNZWFzdXJlckNhY2hlLmRlZmF1bHRXaWR0aDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiaGFzRml4ZWRIZWlnaHRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gaGFzRml4ZWRIZWlnaHQoKSAvKjogYm9vbGVhbiove1xuICAgICAgcmV0dXJuIHRoaXMuX2NlbGxNZWFzdXJlckNhY2hlLmhhc0ZpeGVkSGVpZ2h0KCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImhhc0ZpeGVkV2lkdGhcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gaGFzRml4ZWRXaWR0aCgpIC8qOiBib29sZWFuKi97XG4gICAgICByZXR1cm4gdGhpcy5fY2VsbE1lYXN1cmVyQ2FjaGUuaGFzRml4ZWRXaWR0aCgpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZXRIZWlnaHRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0SGVpZ2h0KHJvd0luZGV4IC8qOiBudW1iZXIqLykgLyo6ID9udW1iZXIqL3tcbiAgICAgIHZhciBjb2x1bW5JbmRleCAvKjogP251bWJlciovID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAwO1xuICAgICAgcmV0dXJuIHRoaXMuX2NlbGxNZWFzdXJlckNhY2hlLmdldEhlaWdodChyb3dJbmRleCArIHRoaXMuX3Jvd0luZGV4T2Zmc2V0LCBjb2x1bW5JbmRleCArIHRoaXMuX2NvbHVtbkluZGV4T2Zmc2V0KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0V2lkdGhcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0V2lkdGgocm93SW5kZXggLyo6IG51bWJlciovKSAvKjogP251bWJlciove1xuICAgICAgdmFyIGNvbHVtbkluZGV4IC8qOiA/bnVtYmVyKi8gPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDA7XG4gICAgICByZXR1cm4gdGhpcy5fY2VsbE1lYXN1cmVyQ2FjaGUuZ2V0V2lkdGgocm93SW5kZXggKyB0aGlzLl9yb3dJbmRleE9mZnNldCwgY29sdW1uSW5kZXggKyB0aGlzLl9jb2x1bW5JbmRleE9mZnNldCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImhhc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBoYXMocm93SW5kZXggLyo6IG51bWJlciovKSAvKjogYm9vbGVhbiove1xuICAgICAgdmFyIGNvbHVtbkluZGV4IC8qOiA/bnVtYmVyKi8gPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDA7XG4gICAgICByZXR1cm4gdGhpcy5fY2VsbE1lYXN1cmVyQ2FjaGUuaGFzKHJvd0luZGV4ICsgdGhpcy5fcm93SW5kZXhPZmZzZXQsIGNvbHVtbkluZGV4ICsgdGhpcy5fY29sdW1uSW5kZXhPZmZzZXQpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzZXRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0KHJvd0luZGV4IC8qOiBudW1iZXIqLywgY29sdW1uSW5kZXggLyo6IG51bWJlciovLCB3aWR0aCAvKjogbnVtYmVyKi8sIGhlaWdodCAvKjogbnVtYmVyKi8pIC8qOiB2b2lkKi97XG4gICAgICB0aGlzLl9jZWxsTWVhc3VyZXJDYWNoZS5zZXQocm93SW5kZXggKyB0aGlzLl9yb3dJbmRleE9mZnNldCwgY29sdW1uSW5kZXggKyB0aGlzLl9jb2x1bW5JbmRleE9mZnNldCwgKHdpZHRoIC8qOiBudW1iZXIqLyksIChoZWlnaHQgLyo6IG51bWJlciovKSk7XG4gICAgfVxuICB9XSk7XG59KCk7XG5leHBvcnQgeyBDZWxsTWVhc3VyZXJDYWNoZURlY29yYXRvciBhcyBkZWZhdWx0IH07IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIjtcbmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3NcIjtcbmltcG9ydCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCI7XG5pbXBvcnQgX2dldFByb3RvdHlwZU9mIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mXCI7XG5pbXBvcnQgX2luaGVyaXRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCI7XG5pbXBvcnQgX2RlZmluZVByb3BlcnR5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5XCI7XG52YXIgX2V4Y2x1ZGVkID0gW1wicm93SW5kZXhcIl0sXG4gIF9leGNsdWRlZDIgPSBbXCJjb2x1bW5JbmRleFwiLCBcInJvd0luZGV4XCJdLFxuICBfZXhjbHVkZWQzID0gW1wiY29sdW1uSW5kZXhcIl0sXG4gIF9leGNsdWRlZDQgPSBbXCJvblNjcm9sbFwiLCBcIm9uU2VjdGlvblJlbmRlcmVkXCIsIFwib25TY3JvbGxiYXJQcmVzZW5jZUNoYW5nZVwiLCBcInNjcm9sbExlZnRcIiwgXCJzY3JvbGxUb0NvbHVtblwiLCBcInNjcm9sbFRvcFwiLCBcInNjcm9sbFRvUm93XCJdO1xuZnVuY3Rpb24gb3duS2V5cyhlLCByKSB7IHZhciB0ID0gT2JqZWN0LmtleXMoZSk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBvID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhlKTsgciAmJiAobyA9IG8uZmlsdGVyKGZ1bmN0aW9uIChyKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGUsIHIpLmVudW1lcmFibGU7IH0pKSwgdC5wdXNoLmFwcGx5KHQsIG8pOyB9IHJldHVybiB0OyB9XG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkKGUpIHsgZm9yICh2YXIgciA9IDE7IHIgPCBhcmd1bWVudHMubGVuZ3RoOyByKyspIHsgdmFyIHQgPSBudWxsICE9IGFyZ3VtZW50c1tyXSA/IGFyZ3VtZW50c1tyXSA6IHt9OyByICUgMiA/IG93bktleXMoT2JqZWN0KHQpLCAhMCkuZm9yRWFjaChmdW5jdGlvbiAocikgeyBfZGVmaW5lUHJvcGVydHkoZSwgciwgdFtyXSk7IH0pIDogT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMgPyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhlLCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyh0KSkgOiBvd25LZXlzKE9iamVjdCh0KSkuZm9yRWFjaChmdW5jdGlvbiAocikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgciwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0LCByKSk7IH0pOyB9IHJldHVybiBlOyB9XG5mdW5jdGlvbiBfY2FsbFN1cGVyKHQsIG8sIGUpIHsgcmV0dXJuIG8gPSBfZ2V0UHJvdG90eXBlT2YobyksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHQsIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSA/IFJlZmxlY3QuY29uc3RydWN0KG8sIGUgfHwgW10sIF9nZXRQcm90b3R5cGVPZih0KS5jb25zdHJ1Y3RvcikgOiBvLmFwcGx5KHQsIGUpKTsgfVxuZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgdHJ5IHsgdmFyIHQgPSAhQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyB9IGNhdGNoICh0KSB7fSByZXR1cm4gKF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSBmdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyByZXR1cm4gISF0OyB9KSgpOyB9XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgcG9seWZpbGwgfSBmcm9tICdyZWFjdC1saWZlY3ljbGVzLWNvbXBhdCc7XG5pbXBvcnQgQ2VsbE1lYXN1cmVyQ2FjaGVEZWNvcmF0b3IgZnJvbSAnLi9DZWxsTWVhc3VyZXJDYWNoZURlY29yYXRvcic7XG5pbXBvcnQgR3JpZCBmcm9tICcuLi9HcmlkJztcbnZhciBTQ1JPTExCQVJfU0laRV9CVUZGRVIgPSAyMDtcblxuLyoqXG4gKiBSZW5kZXJzIDEsIDIsIG9yIDQgR3JpZHMgZGVwZW5kaW5nIG9uIGNvbmZpZ3VyYXRpb24uXG4gKiBBIG1haW4gKGJvZHkpIEdyaWQgd2lsbCBhbHdheXMgYmUgcmVuZGVyZWQuXG4gKiBPcHRpb25hbGx5LCAxLTIgR3JpZHMgZm9yIHN0aWNreSBoZWFkZXIgcm93cyB3aWxsIGFsc28gYmUgcmVuZGVyZWQuXG4gKiBJZiBubyBzdGlja3kgY29sdW1ucywgb25seSAxIHN0aWNreSBoZWFkZXIgR3JpZCB3aWxsIGJlIHJlbmRlcmVkLlxuICogSWYgc3RpY2t5IGNvbHVtbnMsIDIgc3RpY2t5IGhlYWRlciBHcmlkcyB3aWxsIGJlIHJlbmRlcmVkLlxuICovXG52YXIgTXVsdGlHcmlkID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfUmVhY3QkUHVyZUNvbXBvbmVudCkge1xuICBmdW5jdGlvbiBNdWx0aUdyaWQocHJvcHMsIGNvbnRleHQpIHtcbiAgICB2YXIgX3RoaXM7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE11bHRpR3JpZCk7XG4gICAgX3RoaXMgPSBfY2FsbFN1cGVyKHRoaXMsIE11bHRpR3JpZCwgW3Byb3BzLCBjb250ZXh0XSk7XG4gICAgX2RlZmluZVByb3BlcnR5KF90aGlzLCBcInN0YXRlXCIsIHtcbiAgICAgIHNjcm9sbExlZnQ6IDAsXG4gICAgICBzY3JvbGxUb3A6IDAsXG4gICAgICBzY3JvbGxiYXJTaXplOiAwLFxuICAgICAgc2hvd0hvcml6b250YWxTY3JvbGxiYXI6IGZhbHNlLFxuICAgICAgc2hvd1ZlcnRpY2FsU2Nyb2xsYmFyOiBmYWxzZVxuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJfZGVmZXJyZWRJbnZhbGlkYXRlQ29sdW1uSW5kZXhcIiwgbnVsbCk7XG4gICAgX2RlZmluZVByb3BlcnR5KF90aGlzLCBcIl9kZWZlcnJlZEludmFsaWRhdGVSb3dJbmRleFwiLCBudWxsKTtcbiAgICBfZGVmaW5lUHJvcGVydHkoX3RoaXMsIFwiX2JvdHRvbUxlZnRHcmlkUmVmXCIsIGZ1bmN0aW9uIChyZWYpIHtcbiAgICAgIF90aGlzLl9ib3R0b21MZWZ0R3JpZCA9IHJlZjtcbiAgICB9KTtcbiAgICBfZGVmaW5lUHJvcGVydHkoX3RoaXMsIFwiX2JvdHRvbVJpZ2h0R3JpZFJlZlwiLCBmdW5jdGlvbiAocmVmKSB7XG4gICAgICBfdGhpcy5fYm90dG9tUmlnaHRHcmlkID0gcmVmO1xuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJfY2VsbFJlbmRlcmVyQm90dG9tTGVmdEdyaWRcIiwgZnVuY3Rpb24gKF9yZWYpIHtcbiAgICAgIHZhciByb3dJbmRleCA9IF9yZWYucm93SW5kZXgsXG4gICAgICAgIHJlc3QgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3JlZiwgX2V4Y2x1ZGVkKTtcbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzLFxuICAgICAgICBjZWxsUmVuZGVyZXIgPSBfdGhpcyRwcm9wcy5jZWxsUmVuZGVyZXIsXG4gICAgICAgIGZpeGVkUm93Q291bnQgPSBfdGhpcyRwcm9wcy5maXhlZFJvd0NvdW50LFxuICAgICAgICByb3dDb3VudCA9IF90aGlzJHByb3BzLnJvd0NvdW50O1xuICAgICAgaWYgKHJvd0luZGV4ID09PSByb3dDb3VudCAtIGZpeGVkUm93Q291bnQpIHtcbiAgICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgICBrZXk6IHJlc3Qua2V5LFxuICAgICAgICAgIHN0eWxlOiBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIHJlc3Quc3R5bGUpLCB7fSwge1xuICAgICAgICAgICAgaGVpZ2h0OiBTQ1JPTExCQVJfU0laRV9CVUZGRVJcbiAgICAgICAgICB9KVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBjZWxsUmVuZGVyZXIoX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCByZXN0KSwge30sIHtcbiAgICAgICAgICBwYXJlbnQ6IF90aGlzLFxuICAgICAgICAgIHJvd0luZGV4OiByb3dJbmRleCArIGZpeGVkUm93Q291bnRcbiAgICAgICAgfSkpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJfY2VsbFJlbmRlcmVyQm90dG9tUmlnaHRHcmlkXCIsIGZ1bmN0aW9uIChfcmVmMikge1xuICAgICAgdmFyIGNvbHVtbkluZGV4ID0gX3JlZjIuY29sdW1uSW5kZXgsXG4gICAgICAgIHJvd0luZGV4ID0gX3JlZjIucm93SW5kZXgsXG4gICAgICAgIHJlc3QgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3JlZjIsIF9leGNsdWRlZDIpO1xuICAgICAgdmFyIF90aGlzJHByb3BzMiA9IF90aGlzLnByb3BzLFxuICAgICAgICBjZWxsUmVuZGVyZXIgPSBfdGhpcyRwcm9wczIuY2VsbFJlbmRlcmVyLFxuICAgICAgICBmaXhlZENvbHVtbkNvdW50ID0gX3RoaXMkcHJvcHMyLmZpeGVkQ29sdW1uQ291bnQsXG4gICAgICAgIGZpeGVkUm93Q291bnQgPSBfdGhpcyRwcm9wczIuZml4ZWRSb3dDb3VudDtcbiAgICAgIHJldHVybiBjZWxsUmVuZGVyZXIoX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCByZXN0KSwge30sIHtcbiAgICAgICAgY29sdW1uSW5kZXg6IGNvbHVtbkluZGV4ICsgZml4ZWRDb2x1bW5Db3VudCxcbiAgICAgICAgcGFyZW50OiBfdGhpcyxcbiAgICAgICAgcm93SW5kZXg6IHJvd0luZGV4ICsgZml4ZWRSb3dDb3VudFxuICAgICAgfSkpO1xuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJfY2VsbFJlbmRlcmVyVG9wUmlnaHRHcmlkXCIsIGZ1bmN0aW9uIChfcmVmMykge1xuICAgICAgdmFyIGNvbHVtbkluZGV4ID0gX3JlZjMuY29sdW1uSW5kZXgsXG4gICAgICAgIHJlc3QgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3JlZjMsIF9leGNsdWRlZDMpO1xuICAgICAgdmFyIF90aGlzJHByb3BzMyA9IF90aGlzLnByb3BzLFxuICAgICAgICBjZWxsUmVuZGVyZXIgPSBfdGhpcyRwcm9wczMuY2VsbFJlbmRlcmVyLFxuICAgICAgICBjb2x1bW5Db3VudCA9IF90aGlzJHByb3BzMy5jb2x1bW5Db3VudCxcbiAgICAgICAgZml4ZWRDb2x1bW5Db3VudCA9IF90aGlzJHByb3BzMy5maXhlZENvbHVtbkNvdW50O1xuICAgICAgaWYgKGNvbHVtbkluZGV4ID09PSBjb2x1bW5Db3VudCAtIGZpeGVkQ29sdW1uQ291bnQpIHtcbiAgICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgICBrZXk6IHJlc3Qua2V5LFxuICAgICAgICAgIHN0eWxlOiBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIHJlc3Quc3R5bGUpLCB7fSwge1xuICAgICAgICAgICAgd2lkdGg6IFNDUk9MTEJBUl9TSVpFX0JVRkZFUlxuICAgICAgICAgIH0pXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGNlbGxSZW5kZXJlcihfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIHJlc3QpLCB7fSwge1xuICAgICAgICAgIGNvbHVtbkluZGV4OiBjb2x1bW5JbmRleCArIGZpeGVkQ29sdW1uQ291bnQsXG4gICAgICAgICAgcGFyZW50OiBfdGhpc1xuICAgICAgICB9KSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgX2RlZmluZVByb3BlcnR5KF90aGlzLCBcIl9jb2x1bW5XaWR0aFJpZ2h0R3JpZFwiLCBmdW5jdGlvbiAoX3JlZjQpIHtcbiAgICAgIHZhciBpbmRleCA9IF9yZWY0LmluZGV4O1xuICAgICAgdmFyIF90aGlzJHByb3BzNCA9IF90aGlzLnByb3BzLFxuICAgICAgICBjb2x1bW5Db3VudCA9IF90aGlzJHByb3BzNC5jb2x1bW5Db3VudCxcbiAgICAgICAgZml4ZWRDb2x1bW5Db3VudCA9IF90aGlzJHByb3BzNC5maXhlZENvbHVtbkNvdW50LFxuICAgICAgICBjb2x1bW5XaWR0aCA9IF90aGlzJHByb3BzNC5jb2x1bW5XaWR0aDtcbiAgICAgIHZhciBfdGhpcyRzdGF0ZSA9IF90aGlzLnN0YXRlLFxuICAgICAgICBzY3JvbGxiYXJTaXplID0gX3RoaXMkc3RhdGUuc2Nyb2xsYmFyU2l6ZSxcbiAgICAgICAgc2hvd0hvcml6b250YWxTY3JvbGxiYXIgPSBfdGhpcyRzdGF0ZS5zaG93SG9yaXpvbnRhbFNjcm9sbGJhcjtcblxuICAgICAgLy8gQW4gZXh0cmEgY2VsbCBpcyBhZGRlZCB0byB0aGUgY291bnRcbiAgICAgIC8vIFRoaXMgZ2l2ZXMgdGhlIHNtYWxsZXIgR3JpZCBleHRyYSByb29tIGZvciBvZmZzZXQsXG4gICAgICAvLyBJbiBjYXNlIHRoZSBtYWluIChib3R0b20gcmlnaHQpIEdyaWQgaGFzIGEgc2Nyb2xsYmFyXG4gICAgICAvLyBJZiBubyBzY3JvbGxiYXIsIHRoZSBleHRyYSBzcGFjZSBpcyBvdmVyZmxvdzpoaWRkZW4gYW55d2F5XG4gICAgICBpZiAoc2hvd0hvcml6b250YWxTY3JvbGxiYXIgJiYgaW5kZXggPT09IGNvbHVtbkNvdW50IC0gZml4ZWRDb2x1bW5Db3VudCkge1xuICAgICAgICByZXR1cm4gc2Nyb2xsYmFyU2l6ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0eXBlb2YgY29sdW1uV2lkdGggPT09ICdmdW5jdGlvbicgPyBjb2x1bW5XaWR0aCh7XG4gICAgICAgIGluZGV4OiBpbmRleCArIGZpeGVkQ29sdW1uQ291bnRcbiAgICAgIH0pIDogY29sdW1uV2lkdGg7XG4gICAgfSk7XG4gICAgX2RlZmluZVByb3BlcnR5KF90aGlzLCBcIl9vblNjcm9sbFwiLCBmdW5jdGlvbiAoc2Nyb2xsSW5mbykge1xuICAgICAgdmFyIHNjcm9sbExlZnQgPSBzY3JvbGxJbmZvLnNjcm9sbExlZnQsXG4gICAgICAgIHNjcm9sbFRvcCA9IHNjcm9sbEluZm8uc2Nyb2xsVG9wO1xuICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICBzY3JvbGxMZWZ0OiBzY3JvbGxMZWZ0LFxuICAgICAgICBzY3JvbGxUb3A6IHNjcm9sbFRvcFxuICAgICAgfSk7XG4gICAgICB2YXIgb25TY3JvbGwgPSBfdGhpcy5wcm9wcy5vblNjcm9sbDtcbiAgICAgIGlmIChvblNjcm9sbCkge1xuICAgICAgICBvblNjcm9sbChzY3JvbGxJbmZvKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBfZGVmaW5lUHJvcGVydHkoX3RoaXMsIFwiX29uU2Nyb2xsYmFyUHJlc2VuY2VDaGFuZ2VcIiwgZnVuY3Rpb24gKF9yZWY1KSB7XG4gICAgICB2YXIgaG9yaXpvbnRhbCA9IF9yZWY1Lmhvcml6b250YWwsXG4gICAgICAgIHNpemUgPSBfcmVmNS5zaXplLFxuICAgICAgICB2ZXJ0aWNhbCA9IF9yZWY1LnZlcnRpY2FsO1xuICAgICAgdmFyIF90aGlzJHN0YXRlMiA9IF90aGlzLnN0YXRlLFxuICAgICAgICBzaG93SG9yaXpvbnRhbFNjcm9sbGJhciA9IF90aGlzJHN0YXRlMi5zaG93SG9yaXpvbnRhbFNjcm9sbGJhcixcbiAgICAgICAgc2hvd1ZlcnRpY2FsU2Nyb2xsYmFyID0gX3RoaXMkc3RhdGUyLnNob3dWZXJ0aWNhbFNjcm9sbGJhcjtcbiAgICAgIGlmIChob3Jpem9udGFsICE9PSBzaG93SG9yaXpvbnRhbFNjcm9sbGJhciB8fCB2ZXJ0aWNhbCAhPT0gc2hvd1ZlcnRpY2FsU2Nyb2xsYmFyKSB7XG4gICAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBzY3JvbGxiYXJTaXplOiBzaXplLFxuICAgICAgICAgIHNob3dIb3Jpem9udGFsU2Nyb2xsYmFyOiBob3Jpem9udGFsLFxuICAgICAgICAgIHNob3dWZXJ0aWNhbFNjcm9sbGJhcjogdmVydGljYWxcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciBvblNjcm9sbGJhclByZXNlbmNlQ2hhbmdlID0gX3RoaXMucHJvcHMub25TY3JvbGxiYXJQcmVzZW5jZUNoYW5nZTtcbiAgICAgICAgaWYgKHR5cGVvZiBvblNjcm9sbGJhclByZXNlbmNlQ2hhbmdlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgb25TY3JvbGxiYXJQcmVzZW5jZUNoYW5nZSh7XG4gICAgICAgICAgICBob3Jpem9udGFsOiBob3Jpem9udGFsLFxuICAgICAgICAgICAgc2l6ZTogc2l6ZSxcbiAgICAgICAgICAgIHZlcnRpY2FsOiB2ZXJ0aWNhbFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgX2RlZmluZVByb3BlcnR5KF90aGlzLCBcIl9vblNjcm9sbExlZnRcIiwgZnVuY3Rpb24gKHNjcm9sbEluZm8pIHtcbiAgICAgIHZhciBzY3JvbGxMZWZ0ID0gc2Nyb2xsSW5mby5zY3JvbGxMZWZ0O1xuICAgICAgX3RoaXMuX29uU2Nyb2xsKHtcbiAgICAgICAgc2Nyb2xsTGVmdDogc2Nyb2xsTGVmdCxcbiAgICAgICAgc2Nyb2xsVG9wOiBfdGhpcy5zdGF0ZS5zY3JvbGxUb3BcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJfb25TY3JvbGxUb3BcIiwgZnVuY3Rpb24gKHNjcm9sbEluZm8pIHtcbiAgICAgIHZhciBzY3JvbGxUb3AgPSBzY3JvbGxJbmZvLnNjcm9sbFRvcDtcbiAgICAgIF90aGlzLl9vblNjcm9sbCh7XG4gICAgICAgIHNjcm9sbFRvcDogc2Nyb2xsVG9wLFxuICAgICAgICBzY3JvbGxMZWZ0OiBfdGhpcy5zdGF0ZS5zY3JvbGxMZWZ0XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBfZGVmaW5lUHJvcGVydHkoX3RoaXMsIFwiX3Jvd0hlaWdodEJvdHRvbUdyaWRcIiwgZnVuY3Rpb24gKF9yZWY2KSB7XG4gICAgICB2YXIgaW5kZXggPSBfcmVmNi5pbmRleDtcbiAgICAgIHZhciBfdGhpcyRwcm9wczUgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgZml4ZWRSb3dDb3VudCA9IF90aGlzJHByb3BzNS5maXhlZFJvd0NvdW50LFxuICAgICAgICByb3dDb3VudCA9IF90aGlzJHByb3BzNS5yb3dDb3VudCxcbiAgICAgICAgcm93SGVpZ2h0ID0gX3RoaXMkcHJvcHM1LnJvd0hlaWdodDtcbiAgICAgIHZhciBfdGhpcyRzdGF0ZTMgPSBfdGhpcy5zdGF0ZSxcbiAgICAgICAgc2Nyb2xsYmFyU2l6ZSA9IF90aGlzJHN0YXRlMy5zY3JvbGxiYXJTaXplLFxuICAgICAgICBzaG93VmVydGljYWxTY3JvbGxiYXIgPSBfdGhpcyRzdGF0ZTMuc2hvd1ZlcnRpY2FsU2Nyb2xsYmFyO1xuXG4gICAgICAvLyBBbiBleHRyYSBjZWxsIGlzIGFkZGVkIHRvIHRoZSBjb3VudFxuICAgICAgLy8gVGhpcyBnaXZlcyB0aGUgc21hbGxlciBHcmlkIGV4dHJhIHJvb20gZm9yIG9mZnNldCxcbiAgICAgIC8vIEluIGNhc2UgdGhlIG1haW4gKGJvdHRvbSByaWdodCkgR3JpZCBoYXMgYSBzY3JvbGxiYXJcbiAgICAgIC8vIElmIG5vIHNjcm9sbGJhciwgdGhlIGV4dHJhIHNwYWNlIGlzIG92ZXJmbG93OmhpZGRlbiBhbnl3YXlcbiAgICAgIGlmIChzaG93VmVydGljYWxTY3JvbGxiYXIgJiYgaW5kZXggPT09IHJvd0NvdW50IC0gZml4ZWRSb3dDb3VudCkge1xuICAgICAgICByZXR1cm4gc2Nyb2xsYmFyU2l6ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0eXBlb2Ygcm93SGVpZ2h0ID09PSAnZnVuY3Rpb24nID8gcm93SGVpZ2h0KHtcbiAgICAgICAgaW5kZXg6IGluZGV4ICsgZml4ZWRSb3dDb3VudFxuICAgICAgfSkgOiByb3dIZWlnaHQ7XG4gICAgfSk7XG4gICAgX2RlZmluZVByb3BlcnR5KF90aGlzLCBcIl90b3BMZWZ0R3JpZFJlZlwiLCBmdW5jdGlvbiAocmVmKSB7XG4gICAgICBfdGhpcy5fdG9wTGVmdEdyaWQgPSByZWY7XG4gICAgfSk7XG4gICAgX2RlZmluZVByb3BlcnR5KF90aGlzLCBcIl90b3BSaWdodEdyaWRSZWZcIiwgZnVuY3Rpb24gKHJlZikge1xuICAgICAgX3RoaXMuX3RvcFJpZ2h0R3JpZCA9IHJlZjtcbiAgICB9KTtcbiAgICB2YXIgZGVmZXJyZWRNZWFzdXJlbWVudENhY2hlID0gcHJvcHMuZGVmZXJyZWRNZWFzdXJlbWVudENhY2hlLFxuICAgICAgX2ZpeGVkQ29sdW1uQ291bnQgPSBwcm9wcy5maXhlZENvbHVtbkNvdW50LFxuICAgICAgX2ZpeGVkUm93Q291bnQgPSBwcm9wcy5maXhlZFJvd0NvdW50O1xuICAgIF90aGlzLl9tYXliZUNhbGN1bGF0ZUNhY2hlZFN0eWxlcyh0cnVlKTtcbiAgICBpZiAoZGVmZXJyZWRNZWFzdXJlbWVudENhY2hlKSB7XG4gICAgICBfdGhpcy5fZGVmZXJyZWRNZWFzdXJlbWVudENhY2hlQm90dG9tTGVmdEdyaWQgPSBfZml4ZWRSb3dDb3VudCA+IDAgPyBuZXcgQ2VsbE1lYXN1cmVyQ2FjaGVEZWNvcmF0b3Ioe1xuICAgICAgICBjZWxsTWVhc3VyZXJDYWNoZTogZGVmZXJyZWRNZWFzdXJlbWVudENhY2hlLFxuICAgICAgICBjb2x1bW5JbmRleE9mZnNldDogMCxcbiAgICAgICAgcm93SW5kZXhPZmZzZXQ6IF9maXhlZFJvd0NvdW50XG4gICAgICB9KSA6IGRlZmVycmVkTWVhc3VyZW1lbnRDYWNoZTtcbiAgICAgIF90aGlzLl9kZWZlcnJlZE1lYXN1cmVtZW50Q2FjaGVCb3R0b21SaWdodEdyaWQgPSBfZml4ZWRDb2x1bW5Db3VudCA+IDAgfHwgX2ZpeGVkUm93Q291bnQgPiAwID8gbmV3IENlbGxNZWFzdXJlckNhY2hlRGVjb3JhdG9yKHtcbiAgICAgICAgY2VsbE1lYXN1cmVyQ2FjaGU6IGRlZmVycmVkTWVhc3VyZW1lbnRDYWNoZSxcbiAgICAgICAgY29sdW1uSW5kZXhPZmZzZXQ6IF9maXhlZENvbHVtbkNvdW50LFxuICAgICAgICByb3dJbmRleE9mZnNldDogX2ZpeGVkUm93Q291bnRcbiAgICAgIH0pIDogZGVmZXJyZWRNZWFzdXJlbWVudENhY2hlO1xuICAgICAgX3RoaXMuX2RlZmVycmVkTWVhc3VyZW1lbnRDYWNoZVRvcFJpZ2h0R3JpZCA9IF9maXhlZENvbHVtbkNvdW50ID4gMCA/IG5ldyBDZWxsTWVhc3VyZXJDYWNoZURlY29yYXRvcih7XG4gICAgICAgIGNlbGxNZWFzdXJlckNhY2hlOiBkZWZlcnJlZE1lYXN1cmVtZW50Q2FjaGUsXG4gICAgICAgIGNvbHVtbkluZGV4T2Zmc2V0OiBfZml4ZWRDb2x1bW5Db3VudCxcbiAgICAgICAgcm93SW5kZXhPZmZzZXQ6IDBcbiAgICAgIH0pIDogZGVmZXJyZWRNZWFzdXJlbWVudENhY2hlO1xuICAgIH1cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cbiAgX2luaGVyaXRzKE11bHRpR3JpZCwgX1JlYWN0JFB1cmVDb21wb25lbnQpO1xuICByZXR1cm4gX2NyZWF0ZUNsYXNzKE11bHRpR3JpZCwgW3tcbiAgICBrZXk6IFwiZm9yY2VVcGRhdGVHcmlkc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmb3JjZVVwZGF0ZUdyaWRzKCkge1xuICAgICAgdGhpcy5fYm90dG9tTGVmdEdyaWQgJiYgdGhpcy5fYm90dG9tTGVmdEdyaWQuZm9yY2VVcGRhdGUoKTtcbiAgICAgIHRoaXMuX2JvdHRvbVJpZ2h0R3JpZCAmJiB0aGlzLl9ib3R0b21SaWdodEdyaWQuZm9yY2VVcGRhdGUoKTtcbiAgICAgIHRoaXMuX3RvcExlZnRHcmlkICYmIHRoaXMuX3RvcExlZnRHcmlkLmZvcmNlVXBkYXRlKCk7XG4gICAgICB0aGlzLl90b3BSaWdodEdyaWQgJiYgdGhpcy5fdG9wUmlnaHRHcmlkLmZvcmNlVXBkYXRlKCk7XG4gICAgfVxuXG4gICAgLyoqIFNlZSBHcmlkI2ludmFsaWRhdGVDZWxsU2l6ZUFmdGVyUmVuZGVyICovXG4gIH0sIHtcbiAgICBrZXk6IFwiaW52YWxpZGF0ZUNlbGxTaXplQWZ0ZXJSZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gaW52YWxpZGF0ZUNlbGxTaXplQWZ0ZXJSZW5kZXIoKSB7XG4gICAgICB2YXIgX3JlZjcgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9LFxuICAgICAgICBfcmVmNyRjb2x1bW5JbmRleCA9IF9yZWY3LmNvbHVtbkluZGV4LFxuICAgICAgICBjb2x1bW5JbmRleCA9IF9yZWY3JGNvbHVtbkluZGV4ID09PSB2b2lkIDAgPyAwIDogX3JlZjckY29sdW1uSW5kZXgsXG4gICAgICAgIF9yZWY3JHJvd0luZGV4ID0gX3JlZjcucm93SW5kZXgsXG4gICAgICAgIHJvd0luZGV4ID0gX3JlZjckcm93SW5kZXggPT09IHZvaWQgMCA/IDAgOiBfcmVmNyRyb3dJbmRleDtcbiAgICAgIHRoaXMuX2RlZmVycmVkSW52YWxpZGF0ZUNvbHVtbkluZGV4ID0gdHlwZW9mIHRoaXMuX2RlZmVycmVkSW52YWxpZGF0ZUNvbHVtbkluZGV4ID09PSAnbnVtYmVyJyA/IE1hdGgubWluKHRoaXMuX2RlZmVycmVkSW52YWxpZGF0ZUNvbHVtbkluZGV4LCBjb2x1bW5JbmRleCkgOiBjb2x1bW5JbmRleDtcbiAgICAgIHRoaXMuX2RlZmVycmVkSW52YWxpZGF0ZVJvd0luZGV4ID0gdHlwZW9mIHRoaXMuX2RlZmVycmVkSW52YWxpZGF0ZVJvd0luZGV4ID09PSAnbnVtYmVyJyA/IE1hdGgubWluKHRoaXMuX2RlZmVycmVkSW52YWxpZGF0ZVJvd0luZGV4LCByb3dJbmRleCkgOiByb3dJbmRleDtcbiAgICB9XG5cbiAgICAvKiogU2VlIEdyaWQjbWVhc3VyZUFsbENlbGxzICovXG4gIH0sIHtcbiAgICBrZXk6IFwibWVhc3VyZUFsbENlbGxzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG1lYXN1cmVBbGxDZWxscygpIHtcbiAgICAgIHRoaXMuX2JvdHRvbUxlZnRHcmlkICYmIHRoaXMuX2JvdHRvbUxlZnRHcmlkLm1lYXN1cmVBbGxDZWxscygpO1xuICAgICAgdGhpcy5fYm90dG9tUmlnaHRHcmlkICYmIHRoaXMuX2JvdHRvbVJpZ2h0R3JpZC5tZWFzdXJlQWxsQ2VsbHMoKTtcbiAgICAgIHRoaXMuX3RvcExlZnRHcmlkICYmIHRoaXMuX3RvcExlZnRHcmlkLm1lYXN1cmVBbGxDZWxscygpO1xuICAgICAgdGhpcy5fdG9wUmlnaHRHcmlkICYmIHRoaXMuX3RvcFJpZ2h0R3JpZC5tZWFzdXJlQWxsQ2VsbHMoKTtcbiAgICB9XG5cbiAgICAvKiogU2VlIEdyaWQjcmVjb21wdXRlR3JpZFNpemUgKi9cbiAgfSwge1xuICAgIGtleTogXCJyZWNvbXB1dGVHcmlkU2l6ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZWNvbXB1dGVHcmlkU2l6ZSgpIHtcbiAgICAgIHZhciBfcmVmOCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge30sXG4gICAgICAgIF9yZWY4JGNvbHVtbkluZGV4ID0gX3JlZjguY29sdW1uSW5kZXgsXG4gICAgICAgIGNvbHVtbkluZGV4ID0gX3JlZjgkY29sdW1uSW5kZXggPT09IHZvaWQgMCA/IDAgOiBfcmVmOCRjb2x1bW5JbmRleCxcbiAgICAgICAgX3JlZjgkcm93SW5kZXggPSBfcmVmOC5yb3dJbmRleCxcbiAgICAgICAgcm93SW5kZXggPSBfcmVmOCRyb3dJbmRleCA9PT0gdm9pZCAwID8gMCA6IF9yZWY4JHJvd0luZGV4O1xuICAgICAgdmFyIF90aGlzJHByb3BzNiA9IHRoaXMucHJvcHMsXG4gICAgICAgIGZpeGVkQ29sdW1uQ291bnQgPSBfdGhpcyRwcm9wczYuZml4ZWRDb2x1bW5Db3VudCxcbiAgICAgICAgZml4ZWRSb3dDb3VudCA9IF90aGlzJHByb3BzNi5maXhlZFJvd0NvdW50O1xuICAgICAgdmFyIGFkanVzdGVkQ29sdW1uSW5kZXggPSBNYXRoLm1heCgwLCBjb2x1bW5JbmRleCAtIGZpeGVkQ29sdW1uQ291bnQpO1xuICAgICAgdmFyIGFkanVzdGVkUm93SW5kZXggPSBNYXRoLm1heCgwLCByb3dJbmRleCAtIGZpeGVkUm93Q291bnQpO1xuICAgICAgdGhpcy5fYm90dG9tTGVmdEdyaWQgJiYgdGhpcy5fYm90dG9tTGVmdEdyaWQucmVjb21wdXRlR3JpZFNpemUoe1xuICAgICAgICBjb2x1bW5JbmRleDogY29sdW1uSW5kZXgsXG4gICAgICAgIHJvd0luZGV4OiBhZGp1c3RlZFJvd0luZGV4XG4gICAgICB9KTtcbiAgICAgIHRoaXMuX2JvdHRvbVJpZ2h0R3JpZCAmJiB0aGlzLl9ib3R0b21SaWdodEdyaWQucmVjb21wdXRlR3JpZFNpemUoe1xuICAgICAgICBjb2x1bW5JbmRleDogYWRqdXN0ZWRDb2x1bW5JbmRleCxcbiAgICAgICAgcm93SW5kZXg6IGFkanVzdGVkUm93SW5kZXhcbiAgICAgIH0pO1xuICAgICAgdGhpcy5fdG9wTGVmdEdyaWQgJiYgdGhpcy5fdG9wTGVmdEdyaWQucmVjb21wdXRlR3JpZFNpemUoe1xuICAgICAgICBjb2x1bW5JbmRleDogY29sdW1uSW5kZXgsXG4gICAgICAgIHJvd0luZGV4OiByb3dJbmRleFxuICAgICAgfSk7XG4gICAgICB0aGlzLl90b3BSaWdodEdyaWQgJiYgdGhpcy5fdG9wUmlnaHRHcmlkLnJlY29tcHV0ZUdyaWRTaXplKHtcbiAgICAgICAgY29sdW1uSW5kZXg6IGFkanVzdGVkQ29sdW1uSW5kZXgsXG4gICAgICAgIHJvd0luZGV4OiByb3dJbmRleFxuICAgICAgfSk7XG4gICAgICB0aGlzLl9sZWZ0R3JpZFdpZHRoID0gbnVsbDtcbiAgICAgIHRoaXMuX3RvcEdyaWRIZWlnaHQgPSBudWxsO1xuICAgICAgdGhpcy5fbWF5YmVDYWxjdWxhdGVDYWNoZWRTdHlsZXModHJ1ZSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNvbXBvbmVudERpZE1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzNyA9IHRoaXMucHJvcHMsXG4gICAgICAgIHNjcm9sbExlZnQgPSBfdGhpcyRwcm9wczcuc2Nyb2xsTGVmdCxcbiAgICAgICAgc2Nyb2xsVG9wID0gX3RoaXMkcHJvcHM3LnNjcm9sbFRvcDtcbiAgICAgIGlmIChzY3JvbGxMZWZ0ID4gMCB8fCBzY3JvbGxUb3AgPiAwKSB7XG4gICAgICAgIHZhciBuZXdTdGF0ZSA9IHt9O1xuICAgICAgICBpZiAoc2Nyb2xsTGVmdCA+IDApIHtcbiAgICAgICAgICBuZXdTdGF0ZS5zY3JvbGxMZWZ0ID0gc2Nyb2xsTGVmdDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2Nyb2xsVG9wID4gMCkge1xuICAgICAgICAgIG5ld1N0YXRlLnNjcm9sbFRvcCA9IHNjcm9sbFRvcDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNldFN0YXRlKG5ld1N0YXRlKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX2hhbmRsZUludmFsaWRhdGVkR3JpZFNpemUoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY29tcG9uZW50RGlkVXBkYXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZSgpIHtcbiAgICAgIHRoaXMuX2hhbmRsZUludmFsaWRhdGVkR3JpZFNpemUoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczggPSB0aGlzLnByb3BzLFxuICAgICAgICBvblNjcm9sbCA9IF90aGlzJHByb3BzOC5vblNjcm9sbCxcbiAgICAgICAgb25TZWN0aW9uUmVuZGVyZWQgPSBfdGhpcyRwcm9wczgub25TZWN0aW9uUmVuZGVyZWQsXG4gICAgICAgIG9uU2Nyb2xsYmFyUHJlc2VuY2VDaGFuZ2UgPSBfdGhpcyRwcm9wczgub25TY3JvbGxiYXJQcmVzZW5jZUNoYW5nZSxcbiAgICAgICAgc2Nyb2xsTGVmdFByb3AgPSBfdGhpcyRwcm9wczguc2Nyb2xsTGVmdCxcbiAgICAgICAgc2Nyb2xsVG9Db2x1bW4gPSBfdGhpcyRwcm9wczguc2Nyb2xsVG9Db2x1bW4sXG4gICAgICAgIHNjcm9sbFRvcFByb3AgPSBfdGhpcyRwcm9wczguc2Nyb2xsVG9wLFxuICAgICAgICBzY3JvbGxUb1JvdyA9IF90aGlzJHByb3BzOC5zY3JvbGxUb1JvdyxcbiAgICAgICAgcmVzdCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfdGhpcyRwcm9wczgsIF9leGNsdWRlZDQpO1xuICAgICAgdGhpcy5fcHJlcGFyZUZvclJlbmRlcigpO1xuXG4gICAgICAvLyBEb24ndCByZW5kZXIgYW55IG9mIG91ciBHcmlkcyBpZiB0aGVyZSBhcmUgbm8gY2VsbHMuXG4gICAgICAvLyBUaGlzIG1pcnJvcnMgd2hhdCBHcmlkIGRvZXMsXG4gICAgICAvLyBBbmQgcHJldmVudHMgdXMgZnJvbSByZWNvcmRpbmcgaW5hY2N1cmFnZSBtZWFzdXJlbWVudHMgd2hlbiB1c2VkIHdpdGggQ2VsbE1lYXN1cmVyLlxuICAgICAgaWYgKHRoaXMucHJvcHMud2lkdGggPT09IDAgfHwgdGhpcy5wcm9wcy5oZWlnaHQgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIC8vIHNjcm9sbFRvcCBhbmQgc2Nyb2xsTGVmdCBwcm9wcyBhcmUgZXhwbGljaXRseSBmaWx0ZXJlZCBvdXQgYW5kIGlnbm9yZWRcblxuICAgICAgdmFyIF90aGlzJHN0YXRlNCA9IHRoaXMuc3RhdGUsXG4gICAgICAgIHNjcm9sbExlZnQgPSBfdGhpcyRzdGF0ZTQuc2Nyb2xsTGVmdCxcbiAgICAgICAgc2Nyb2xsVG9wID0gX3RoaXMkc3RhdGU0LnNjcm9sbFRvcDtcbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgIHN0eWxlOiB0aGlzLl9jb250YWluZXJPdXRlclN0eWxlXG4gICAgICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgIHN0eWxlOiB0aGlzLl9jb250YWluZXJUb3BTdHlsZVxuICAgICAgfSwgdGhpcy5fcmVuZGVyVG9wTGVmdEdyaWQocmVzdCksIHRoaXMuX3JlbmRlclRvcFJpZ2h0R3JpZChfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIHJlc3QpLCB7fSwge1xuICAgICAgICBvblNjcm9sbDogb25TY3JvbGwsXG4gICAgICAgIHNjcm9sbExlZnQ6IHNjcm9sbExlZnRcbiAgICAgIH0pKSksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgc3R5bGU6IHRoaXMuX2NvbnRhaW5lckJvdHRvbVN0eWxlXG4gICAgICB9LCB0aGlzLl9yZW5kZXJCb3R0b21MZWZ0R3JpZChfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIHJlc3QpLCB7fSwge1xuICAgICAgICBvblNjcm9sbDogb25TY3JvbGwsXG4gICAgICAgIHNjcm9sbFRvcDogc2Nyb2xsVG9wXG4gICAgICB9KSksIHRoaXMuX3JlbmRlckJvdHRvbVJpZ2h0R3JpZChfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIHJlc3QpLCB7fSwge1xuICAgICAgICBvblNjcm9sbDogb25TY3JvbGwsXG4gICAgICAgIG9uU2VjdGlvblJlbmRlcmVkOiBvblNlY3Rpb25SZW5kZXJlZCxcbiAgICAgICAgc2Nyb2xsTGVmdDogc2Nyb2xsTGVmdCxcbiAgICAgICAgc2Nyb2xsVG9Db2x1bW46IHNjcm9sbFRvQ29sdW1uLFxuICAgICAgICBzY3JvbGxUb1Jvdzogc2Nyb2xsVG9Sb3csXG4gICAgICAgIHNjcm9sbFRvcDogc2Nyb2xsVG9wXG4gICAgICB9KSkpKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiX2dldEJvdHRvbUdyaWRIZWlnaHRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2dldEJvdHRvbUdyaWRIZWlnaHQocHJvcHMpIHtcbiAgICAgIHZhciBoZWlnaHQgPSBwcm9wcy5oZWlnaHQ7XG4gICAgICB2YXIgdG9wR3JpZEhlaWdodCA9IHRoaXMuX2dldFRvcEdyaWRIZWlnaHQocHJvcHMpO1xuICAgICAgcmV0dXJuIGhlaWdodCAtIHRvcEdyaWRIZWlnaHQ7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIl9nZXRMZWZ0R3JpZFdpZHRoXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9nZXRMZWZ0R3JpZFdpZHRoKHByb3BzKSB7XG4gICAgICB2YXIgZml4ZWRDb2x1bW5Db3VudCA9IHByb3BzLmZpeGVkQ29sdW1uQ291bnQsXG4gICAgICAgIGNvbHVtbldpZHRoID0gcHJvcHMuY29sdW1uV2lkdGg7XG4gICAgICBpZiAodGhpcy5fbGVmdEdyaWRXaWR0aCA9PSBudWxsKSB7XG4gICAgICAgIGlmICh0eXBlb2YgY29sdW1uV2lkdGggPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICB2YXIgbGVmdEdyaWRXaWR0aCA9IDA7XG4gICAgICAgICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IGZpeGVkQ29sdW1uQ291bnQ7IGluZGV4KyspIHtcbiAgICAgICAgICAgIGxlZnRHcmlkV2lkdGggKz0gY29sdW1uV2lkdGgoe1xuICAgICAgICAgICAgICBpbmRleDogaW5kZXhcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLl9sZWZ0R3JpZFdpZHRoID0gbGVmdEdyaWRXaWR0aDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLl9sZWZ0R3JpZFdpZHRoID0gY29sdW1uV2lkdGggKiBmaXhlZENvbHVtbkNvdW50O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5fbGVmdEdyaWRXaWR0aDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiX2dldFJpZ2h0R3JpZFdpZHRoXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9nZXRSaWdodEdyaWRXaWR0aChwcm9wcykge1xuICAgICAgdmFyIHdpZHRoID0gcHJvcHMud2lkdGg7XG4gICAgICB2YXIgbGVmdEdyaWRXaWR0aCA9IHRoaXMuX2dldExlZnRHcmlkV2lkdGgocHJvcHMpO1xuICAgICAgcmV0dXJuIHdpZHRoIC0gbGVmdEdyaWRXaWR0aDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiX2dldFRvcEdyaWRIZWlnaHRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2dldFRvcEdyaWRIZWlnaHQocHJvcHMpIHtcbiAgICAgIHZhciBmaXhlZFJvd0NvdW50ID0gcHJvcHMuZml4ZWRSb3dDb3VudCxcbiAgICAgICAgcm93SGVpZ2h0ID0gcHJvcHMucm93SGVpZ2h0O1xuICAgICAgaWYgKHRoaXMuX3RvcEdyaWRIZWlnaHQgPT0gbnVsbCkge1xuICAgICAgICBpZiAodHlwZW9mIHJvd0hlaWdodCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHZhciB0b3BHcmlkSGVpZ2h0ID0gMDtcbiAgICAgICAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgZml4ZWRSb3dDb3VudDsgaW5kZXgrKykge1xuICAgICAgICAgICAgdG9wR3JpZEhlaWdodCArPSByb3dIZWlnaHQoe1xuICAgICAgICAgICAgICBpbmRleDogaW5kZXhcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLl90b3BHcmlkSGVpZ2h0ID0gdG9wR3JpZEhlaWdodDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLl90b3BHcmlkSGVpZ2h0ID0gcm93SGVpZ2h0ICogZml4ZWRSb3dDb3VudDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuX3RvcEdyaWRIZWlnaHQ7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIl9oYW5kbGVJbnZhbGlkYXRlZEdyaWRTaXplXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9oYW5kbGVJbnZhbGlkYXRlZEdyaWRTaXplKCkge1xuICAgICAgaWYgKHR5cGVvZiB0aGlzLl9kZWZlcnJlZEludmFsaWRhdGVDb2x1bW5JbmRleCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgdmFyIGNvbHVtbkluZGV4ID0gdGhpcy5fZGVmZXJyZWRJbnZhbGlkYXRlQ29sdW1uSW5kZXg7XG4gICAgICAgIHZhciByb3dJbmRleCA9IHRoaXMuX2RlZmVycmVkSW52YWxpZGF0ZVJvd0luZGV4O1xuICAgICAgICB0aGlzLl9kZWZlcnJlZEludmFsaWRhdGVDb2x1bW5JbmRleCA9IG51bGw7XG4gICAgICAgIHRoaXMuX2RlZmVycmVkSW52YWxpZGF0ZVJvd0luZGV4ID0gbnVsbDtcbiAgICAgICAgdGhpcy5yZWNvbXB1dGVHcmlkU2l6ZSh7XG4gICAgICAgICAgY29sdW1uSW5kZXg6IGNvbHVtbkluZGV4LFxuICAgICAgICAgIHJvd0luZGV4OiByb3dJbmRleFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5mb3JjZVVwZGF0ZSgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEF2b2lkIHJlY3JlYXRpbmcgaW5saW5lIHN0eWxlcyBlYWNoIHJlbmRlcjsgdGhpcyBieXBhc3NlcyBHcmlkJ3Mgc2hhbGxvd0NvbXBhcmUuXG4gICAgICogVGhpcyBtZXRob2QgcmVjYWxjdWxhdGVzIHN0eWxlcyBvbmx5IHdoZW4gc3BlY2lmaWMgcHJvcHMgY2hhbmdlLlxuICAgICAqL1xuICB9LCB7XG4gICAga2V5OiBcIl9tYXliZUNhbGN1bGF0ZUNhY2hlZFN0eWxlc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfbWF5YmVDYWxjdWxhdGVDYWNoZWRTdHlsZXMocmVzZXRBbGwpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczkgPSB0aGlzLnByb3BzLFxuICAgICAgICBjb2x1bW5XaWR0aCA9IF90aGlzJHByb3BzOS5jb2x1bW5XaWR0aCxcbiAgICAgICAgZW5hYmxlRml4ZWRDb2x1bW5TY3JvbGwgPSBfdGhpcyRwcm9wczkuZW5hYmxlRml4ZWRDb2x1bW5TY3JvbGwsXG4gICAgICAgIGVuYWJsZUZpeGVkUm93U2Nyb2xsID0gX3RoaXMkcHJvcHM5LmVuYWJsZUZpeGVkUm93U2Nyb2xsLFxuICAgICAgICBoZWlnaHQgPSBfdGhpcyRwcm9wczkuaGVpZ2h0LFxuICAgICAgICBmaXhlZENvbHVtbkNvdW50ID0gX3RoaXMkcHJvcHM5LmZpeGVkQ29sdW1uQ291bnQsXG4gICAgICAgIGZpeGVkUm93Q291bnQgPSBfdGhpcyRwcm9wczkuZml4ZWRSb3dDb3VudCxcbiAgICAgICAgcm93SGVpZ2h0ID0gX3RoaXMkcHJvcHM5LnJvd0hlaWdodCxcbiAgICAgICAgc3R5bGUgPSBfdGhpcyRwcm9wczkuc3R5bGUsXG4gICAgICAgIHN0eWxlQm90dG9tTGVmdEdyaWQgPSBfdGhpcyRwcm9wczkuc3R5bGVCb3R0b21MZWZ0R3JpZCxcbiAgICAgICAgc3R5bGVCb3R0b21SaWdodEdyaWQgPSBfdGhpcyRwcm9wczkuc3R5bGVCb3R0b21SaWdodEdyaWQsXG4gICAgICAgIHN0eWxlVG9wTGVmdEdyaWQgPSBfdGhpcyRwcm9wczkuc3R5bGVUb3BMZWZ0R3JpZCxcbiAgICAgICAgc3R5bGVUb3BSaWdodEdyaWQgPSBfdGhpcyRwcm9wczkuc3R5bGVUb3BSaWdodEdyaWQsXG4gICAgICAgIHdpZHRoID0gX3RoaXMkcHJvcHM5LndpZHRoO1xuICAgICAgdmFyIHNpemVDaGFuZ2UgPSByZXNldEFsbCB8fCBoZWlnaHQgIT09IHRoaXMuX2xhc3RSZW5kZXJlZEhlaWdodCB8fCB3aWR0aCAhPT0gdGhpcy5fbGFzdFJlbmRlcmVkV2lkdGg7XG4gICAgICB2YXIgbGVmdFNpemVDaGFuZ2UgPSByZXNldEFsbCB8fCBjb2x1bW5XaWR0aCAhPT0gdGhpcy5fbGFzdFJlbmRlcmVkQ29sdW1uV2lkdGggfHwgZml4ZWRDb2x1bW5Db3VudCAhPT0gdGhpcy5fbGFzdFJlbmRlcmVkRml4ZWRDb2x1bW5Db3VudDtcbiAgICAgIHZhciB0b3BTaXplQ2hhbmdlID0gcmVzZXRBbGwgfHwgZml4ZWRSb3dDb3VudCAhPT0gdGhpcy5fbGFzdFJlbmRlcmVkRml4ZWRSb3dDb3VudCB8fCByb3dIZWlnaHQgIT09IHRoaXMuX2xhc3RSZW5kZXJlZFJvd0hlaWdodDtcbiAgICAgIGlmIChyZXNldEFsbCB8fCBzaXplQ2hhbmdlIHx8IHN0eWxlICE9PSB0aGlzLl9sYXN0UmVuZGVyZWRTdHlsZSkge1xuICAgICAgICB0aGlzLl9jb250YWluZXJPdXRlclN0eWxlID0gX29iamVjdFNwcmVhZCh7XG4gICAgICAgICAgaGVpZ2h0OiBoZWlnaHQsXG4gICAgICAgICAgb3ZlcmZsb3c6ICd2aXNpYmxlJyxcbiAgICAgICAgICAvLyBMZXQgOmZvY3VzIG91dGxpbmUgc2hvdyB0aHJvdWdoXG4gICAgICAgICAgd2lkdGg6IHdpZHRoXG4gICAgICAgIH0sIHN0eWxlKTtcbiAgICAgIH1cbiAgICAgIGlmIChyZXNldEFsbCB8fCBzaXplQ2hhbmdlIHx8IHRvcFNpemVDaGFuZ2UpIHtcbiAgICAgICAgdGhpcy5fY29udGFpbmVyVG9wU3R5bGUgPSB7XG4gICAgICAgICAgaGVpZ2h0OiB0aGlzLl9nZXRUb3BHcmlkSGVpZ2h0KHRoaXMucHJvcHMpLFxuICAgICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgICAgIHdpZHRoOiB3aWR0aFxuICAgICAgICB9O1xuICAgICAgICB0aGlzLl9jb250YWluZXJCb3R0b21TdHlsZSA9IHtcbiAgICAgICAgICBoZWlnaHQ6IGhlaWdodCAtIHRoaXMuX2dldFRvcEdyaWRIZWlnaHQodGhpcy5wcm9wcyksXG4gICAgICAgICAgb3ZlcmZsb3c6ICd2aXNpYmxlJyxcbiAgICAgICAgICAvLyBMZXQgOmZvY3VzIG91dGxpbmUgc2hvdyB0aHJvdWdoXG4gICAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICAgICAgd2lkdGg6IHdpZHRoXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICBpZiAocmVzZXRBbGwgfHwgc3R5bGVCb3R0b21MZWZ0R3JpZCAhPT0gdGhpcy5fbGFzdFJlbmRlcmVkU3R5bGVCb3R0b21MZWZ0R3JpZCkge1xuICAgICAgICB0aGlzLl9ib3R0b21MZWZ0R3JpZFN0eWxlID0gX29iamVjdFNwcmVhZCh7XG4gICAgICAgICAgbGVmdDogMCxcbiAgICAgICAgICBvdmVyZmxvd1g6ICdoaWRkZW4nLFxuICAgICAgICAgIG92ZXJmbG93WTogZW5hYmxlRml4ZWRDb2x1bW5TY3JvbGwgPyAnYXV0bycgOiAnaGlkZGVuJyxcbiAgICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJ1xuICAgICAgICB9LCBzdHlsZUJvdHRvbUxlZnRHcmlkKTtcbiAgICAgIH1cbiAgICAgIGlmIChyZXNldEFsbCB8fCBsZWZ0U2l6ZUNoYW5nZSB8fCBzdHlsZUJvdHRvbVJpZ2h0R3JpZCAhPT0gdGhpcy5fbGFzdFJlbmRlcmVkU3R5bGVCb3R0b21SaWdodEdyaWQpIHtcbiAgICAgICAgdGhpcy5fYm90dG9tUmlnaHRHcmlkU3R5bGUgPSBfb2JqZWN0U3ByZWFkKHtcbiAgICAgICAgICBsZWZ0OiB0aGlzLl9nZXRMZWZ0R3JpZFdpZHRoKHRoaXMucHJvcHMpLFxuICAgICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnXG4gICAgICAgIH0sIHN0eWxlQm90dG9tUmlnaHRHcmlkKTtcbiAgICAgIH1cbiAgICAgIGlmIChyZXNldEFsbCB8fCBzdHlsZVRvcExlZnRHcmlkICE9PSB0aGlzLl9sYXN0UmVuZGVyZWRTdHlsZVRvcExlZnRHcmlkKSB7XG4gICAgICAgIHRoaXMuX3RvcExlZnRHcmlkU3R5bGUgPSBfb2JqZWN0U3ByZWFkKHtcbiAgICAgICAgICBsZWZ0OiAwLFxuICAgICAgICAgIG92ZXJmbG93WDogJ2hpZGRlbicsXG4gICAgICAgICAgb3ZlcmZsb3dZOiAnaGlkZGVuJyxcbiAgICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgICB0b3A6IDBcbiAgICAgICAgfSwgc3R5bGVUb3BMZWZ0R3JpZCk7XG4gICAgICB9XG4gICAgICBpZiAocmVzZXRBbGwgfHwgbGVmdFNpemVDaGFuZ2UgfHwgc3R5bGVUb3BSaWdodEdyaWQgIT09IHRoaXMuX2xhc3RSZW5kZXJlZFN0eWxlVG9wUmlnaHRHcmlkKSB7XG4gICAgICAgIHRoaXMuX3RvcFJpZ2h0R3JpZFN0eWxlID0gX29iamVjdFNwcmVhZCh7XG4gICAgICAgICAgbGVmdDogdGhpcy5fZ2V0TGVmdEdyaWRXaWR0aCh0aGlzLnByb3BzKSxcbiAgICAgICAgICBvdmVyZmxvd1g6IGVuYWJsZUZpeGVkUm93U2Nyb2xsID8gJ2F1dG8nIDogJ2hpZGRlbicsXG4gICAgICAgICAgb3ZlcmZsb3dZOiAnaGlkZGVuJyxcbiAgICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgICB0b3A6IDBcbiAgICAgICAgfSwgc3R5bGVUb3BSaWdodEdyaWQpO1xuICAgICAgfVxuICAgICAgdGhpcy5fbGFzdFJlbmRlcmVkQ29sdW1uV2lkdGggPSBjb2x1bW5XaWR0aDtcbiAgICAgIHRoaXMuX2xhc3RSZW5kZXJlZEZpeGVkQ29sdW1uQ291bnQgPSBmaXhlZENvbHVtbkNvdW50O1xuICAgICAgdGhpcy5fbGFzdFJlbmRlcmVkRml4ZWRSb3dDb3VudCA9IGZpeGVkUm93Q291bnQ7XG4gICAgICB0aGlzLl9sYXN0UmVuZGVyZWRIZWlnaHQgPSBoZWlnaHQ7XG4gICAgICB0aGlzLl9sYXN0UmVuZGVyZWRSb3dIZWlnaHQgPSByb3dIZWlnaHQ7XG4gICAgICB0aGlzLl9sYXN0UmVuZGVyZWRTdHlsZSA9IHN0eWxlO1xuICAgICAgdGhpcy5fbGFzdFJlbmRlcmVkU3R5bGVCb3R0b21MZWZ0R3JpZCA9IHN0eWxlQm90dG9tTGVmdEdyaWQ7XG4gICAgICB0aGlzLl9sYXN0UmVuZGVyZWRTdHlsZUJvdHRvbVJpZ2h0R3JpZCA9IHN0eWxlQm90dG9tUmlnaHRHcmlkO1xuICAgICAgdGhpcy5fbGFzdFJlbmRlcmVkU3R5bGVUb3BMZWZ0R3JpZCA9IHN0eWxlVG9wTGVmdEdyaWQ7XG4gICAgICB0aGlzLl9sYXN0UmVuZGVyZWRTdHlsZVRvcFJpZ2h0R3JpZCA9IHN0eWxlVG9wUmlnaHRHcmlkO1xuICAgICAgdGhpcy5fbGFzdFJlbmRlcmVkV2lkdGggPSB3aWR0aDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiX3ByZXBhcmVGb3JSZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3ByZXBhcmVGb3JSZW5kZXIoKSB7XG4gICAgICBpZiAodGhpcy5fbGFzdFJlbmRlcmVkQ29sdW1uV2lkdGggIT09IHRoaXMucHJvcHMuY29sdW1uV2lkdGggfHwgdGhpcy5fbGFzdFJlbmRlcmVkRml4ZWRDb2x1bW5Db3VudCAhPT0gdGhpcy5wcm9wcy5maXhlZENvbHVtbkNvdW50KSB7XG4gICAgICAgIHRoaXMuX2xlZnRHcmlkV2lkdGggPSBudWxsO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuX2xhc3RSZW5kZXJlZEZpeGVkUm93Q291bnQgIT09IHRoaXMucHJvcHMuZml4ZWRSb3dDb3VudCB8fCB0aGlzLl9sYXN0UmVuZGVyZWRSb3dIZWlnaHQgIT09IHRoaXMucHJvcHMucm93SGVpZ2h0KSB7XG4gICAgICAgIHRoaXMuX3RvcEdyaWRIZWlnaHQgPSBudWxsO1xuICAgICAgfVxuICAgICAgdGhpcy5fbWF5YmVDYWxjdWxhdGVDYWNoZWRTdHlsZXMoKTtcbiAgICAgIHRoaXMuX2xhc3RSZW5kZXJlZENvbHVtbldpZHRoID0gdGhpcy5wcm9wcy5jb2x1bW5XaWR0aDtcbiAgICAgIHRoaXMuX2xhc3RSZW5kZXJlZEZpeGVkQ29sdW1uQ291bnQgPSB0aGlzLnByb3BzLmZpeGVkQ29sdW1uQ291bnQ7XG4gICAgICB0aGlzLl9sYXN0UmVuZGVyZWRGaXhlZFJvd0NvdW50ID0gdGhpcy5wcm9wcy5maXhlZFJvd0NvdW50O1xuICAgICAgdGhpcy5fbGFzdFJlbmRlcmVkUm93SGVpZ2h0ID0gdGhpcy5wcm9wcy5yb3dIZWlnaHQ7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIl9yZW5kZXJCb3R0b21MZWZ0R3JpZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfcmVuZGVyQm90dG9tTGVmdEdyaWQocHJvcHMpIHtcbiAgICAgIHZhciBlbmFibGVGaXhlZENvbHVtblNjcm9sbCA9IHByb3BzLmVuYWJsZUZpeGVkQ29sdW1uU2Nyb2xsLFxuICAgICAgICBmaXhlZENvbHVtbkNvdW50ID0gcHJvcHMuZml4ZWRDb2x1bW5Db3VudCxcbiAgICAgICAgZml4ZWRSb3dDb3VudCA9IHByb3BzLmZpeGVkUm93Q291bnQsXG4gICAgICAgIHJvd0NvdW50ID0gcHJvcHMucm93Q291bnQsXG4gICAgICAgIGhpZGVCb3R0b21MZWZ0R3JpZFNjcm9sbGJhciA9IHByb3BzLmhpZGVCb3R0b21MZWZ0R3JpZFNjcm9sbGJhcjtcbiAgICAgIHZhciBzaG93VmVydGljYWxTY3JvbGxiYXIgPSB0aGlzLnN0YXRlLnNob3dWZXJ0aWNhbFNjcm9sbGJhcjtcbiAgICAgIGlmICghZml4ZWRDb2x1bW5Db3VudCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICAgIHZhciBhZGRpdGlvbmFsUm93Q291bnQgPSBzaG93VmVydGljYWxTY3JvbGxiYXIgPyAxIDogMCxcbiAgICAgICAgaGVpZ2h0ID0gdGhpcy5fZ2V0Qm90dG9tR3JpZEhlaWdodChwcm9wcyksXG4gICAgICAgIHdpZHRoID0gdGhpcy5fZ2V0TGVmdEdyaWRXaWR0aChwcm9wcyksXG4gICAgICAgIHNjcm9sbGJhclNpemUgPSB0aGlzLnN0YXRlLnNob3dWZXJ0aWNhbFNjcm9sbGJhciA/IHRoaXMuc3RhdGUuc2Nyb2xsYmFyU2l6ZSA6IDAsXG4gICAgICAgIGdyaWRXaWR0aCA9IGhpZGVCb3R0b21MZWZ0R3JpZFNjcm9sbGJhciA/IHdpZHRoICsgc2Nyb2xsYmFyU2l6ZSA6IHdpZHRoO1xuICAgICAgdmFyIGJvdHRvbUxlZnRHcmlkID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoR3JpZCwgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgICAgIGNlbGxSZW5kZXJlcjogdGhpcy5fY2VsbFJlbmRlcmVyQm90dG9tTGVmdEdyaWQsXG4gICAgICAgIGNsYXNzTmFtZTogdGhpcy5wcm9wcy5jbGFzc05hbWVCb3R0b21MZWZ0R3JpZCxcbiAgICAgICAgY29sdW1uQ291bnQ6IGZpeGVkQ29sdW1uQ291bnQsXG4gICAgICAgIGRlZmVycmVkTWVhc3VyZW1lbnRDYWNoZTogdGhpcy5fZGVmZXJyZWRNZWFzdXJlbWVudENhY2hlQm90dG9tTGVmdEdyaWQsXG4gICAgICAgIGhlaWdodDogaGVpZ2h0LFxuICAgICAgICBvblNjcm9sbDogZW5hYmxlRml4ZWRDb2x1bW5TY3JvbGwgPyB0aGlzLl9vblNjcm9sbFRvcCA6IHVuZGVmaW5lZCxcbiAgICAgICAgcmVmOiB0aGlzLl9ib3R0b21MZWZ0R3JpZFJlZixcbiAgICAgICAgcm93Q291bnQ6IE1hdGgubWF4KDAsIHJvd0NvdW50IC0gZml4ZWRSb3dDb3VudCkgKyBhZGRpdGlvbmFsUm93Q291bnQsXG4gICAgICAgIHJvd0hlaWdodDogdGhpcy5fcm93SGVpZ2h0Qm90dG9tR3JpZCxcbiAgICAgICAgc3R5bGU6IHRoaXMuX2JvdHRvbUxlZnRHcmlkU3R5bGUsXG4gICAgICAgIHRhYkluZGV4OiBudWxsLFxuICAgICAgICB3aWR0aDogZ3JpZFdpZHRoXG4gICAgICB9KSk7XG4gICAgICBpZiAoaGlkZUJvdHRvbUxlZnRHcmlkU2Nyb2xsYmFyKSB7XG4gICAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgICAgY2xhc3NOYW1lOiBcIkJvdHRvbUxlZnRHcmlkX1Njcm9sbFdyYXBwZXJcIixcbiAgICAgICAgICBzdHlsZTogX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCB0aGlzLl9ib3R0b21MZWZ0R3JpZFN0eWxlKSwge30sIHtcbiAgICAgICAgICAgIGhlaWdodDogaGVpZ2h0LFxuICAgICAgICAgICAgd2lkdGg6IHdpZHRoLFxuICAgICAgICAgICAgb3ZlcmZsb3dZOiAnaGlkZGVuJ1xuICAgICAgICAgIH0pXG4gICAgICAgIH0sIGJvdHRvbUxlZnRHcmlkKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBib3R0b21MZWZ0R3JpZDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiX3JlbmRlckJvdHRvbVJpZ2h0R3JpZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfcmVuZGVyQm90dG9tUmlnaHRHcmlkKHByb3BzKSB7XG4gICAgICB2YXIgY29sdW1uQ291bnQgPSBwcm9wcy5jb2x1bW5Db3VudCxcbiAgICAgICAgZml4ZWRDb2x1bW5Db3VudCA9IHByb3BzLmZpeGVkQ29sdW1uQ291bnQsXG4gICAgICAgIGZpeGVkUm93Q291bnQgPSBwcm9wcy5maXhlZFJvd0NvdW50LFxuICAgICAgICByb3dDb3VudCA9IHByb3BzLnJvd0NvdW50LFxuICAgICAgICBzY3JvbGxUb0NvbHVtbiA9IHByb3BzLnNjcm9sbFRvQ29sdW1uLFxuICAgICAgICBzY3JvbGxUb1JvdyA9IHByb3BzLnNjcm9sbFRvUm93O1xuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEdyaWQsIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgICAgICBjZWxsUmVuZGVyZXI6IHRoaXMuX2NlbGxSZW5kZXJlckJvdHRvbVJpZ2h0R3JpZCxcbiAgICAgICAgY2xhc3NOYW1lOiB0aGlzLnByb3BzLmNsYXNzTmFtZUJvdHRvbVJpZ2h0R3JpZCxcbiAgICAgICAgY29sdW1uQ291bnQ6IE1hdGgubWF4KDAsIGNvbHVtbkNvdW50IC0gZml4ZWRDb2x1bW5Db3VudCksXG4gICAgICAgIGNvbHVtbldpZHRoOiB0aGlzLl9jb2x1bW5XaWR0aFJpZ2h0R3JpZCxcbiAgICAgICAgZGVmZXJyZWRNZWFzdXJlbWVudENhY2hlOiB0aGlzLl9kZWZlcnJlZE1lYXN1cmVtZW50Q2FjaGVCb3R0b21SaWdodEdyaWQsXG4gICAgICAgIGhlaWdodDogdGhpcy5fZ2V0Qm90dG9tR3JpZEhlaWdodChwcm9wcyksXG4gICAgICAgIG9uU2Nyb2xsOiB0aGlzLl9vblNjcm9sbCxcbiAgICAgICAgb25TY3JvbGxiYXJQcmVzZW5jZUNoYW5nZTogdGhpcy5fb25TY3JvbGxiYXJQcmVzZW5jZUNoYW5nZSxcbiAgICAgICAgcmVmOiB0aGlzLl9ib3R0b21SaWdodEdyaWRSZWYsXG4gICAgICAgIHJvd0NvdW50OiBNYXRoLm1heCgwLCByb3dDb3VudCAtIGZpeGVkUm93Q291bnQpLFxuICAgICAgICByb3dIZWlnaHQ6IHRoaXMuX3Jvd0hlaWdodEJvdHRvbUdyaWQsXG4gICAgICAgIHNjcm9sbFRvQ29sdW1uOiBzY3JvbGxUb0NvbHVtbiAtIGZpeGVkQ29sdW1uQ291bnQsXG4gICAgICAgIHNjcm9sbFRvUm93OiBzY3JvbGxUb1JvdyAtIGZpeGVkUm93Q291bnQsXG4gICAgICAgIHN0eWxlOiB0aGlzLl9ib3R0b21SaWdodEdyaWRTdHlsZSxcbiAgICAgICAgd2lkdGg6IHRoaXMuX2dldFJpZ2h0R3JpZFdpZHRoKHByb3BzKVxuICAgICAgfSkpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJfcmVuZGVyVG9wTGVmdEdyaWRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3JlbmRlclRvcExlZnRHcmlkKHByb3BzKSB7XG4gICAgICB2YXIgZml4ZWRDb2x1bW5Db3VudCA9IHByb3BzLmZpeGVkQ29sdW1uQ291bnQsXG4gICAgICAgIGZpeGVkUm93Q291bnQgPSBwcm9wcy5maXhlZFJvd0NvdW50O1xuICAgICAgaWYgKCFmaXhlZENvbHVtbkNvdW50IHx8ICFmaXhlZFJvd0NvdW50KSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEdyaWQsIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgICAgICBjbGFzc05hbWU6IHRoaXMucHJvcHMuY2xhc3NOYW1lVG9wTGVmdEdyaWQsXG4gICAgICAgIGNvbHVtbkNvdW50OiBmaXhlZENvbHVtbkNvdW50LFxuICAgICAgICBoZWlnaHQ6IHRoaXMuX2dldFRvcEdyaWRIZWlnaHQocHJvcHMpLFxuICAgICAgICByZWY6IHRoaXMuX3RvcExlZnRHcmlkUmVmLFxuICAgICAgICByb3dDb3VudDogZml4ZWRSb3dDb3VudCxcbiAgICAgICAgc3R5bGU6IHRoaXMuX3RvcExlZnRHcmlkU3R5bGUsXG4gICAgICAgIHRhYkluZGV4OiBudWxsLFxuICAgICAgICB3aWR0aDogdGhpcy5fZ2V0TGVmdEdyaWRXaWR0aChwcm9wcylcbiAgICAgIH0pKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiX3JlbmRlclRvcFJpZ2h0R3JpZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfcmVuZGVyVG9wUmlnaHRHcmlkKHByb3BzKSB7XG4gICAgICB2YXIgY29sdW1uQ291bnQgPSBwcm9wcy5jb2x1bW5Db3VudCxcbiAgICAgICAgZW5hYmxlRml4ZWRSb3dTY3JvbGwgPSBwcm9wcy5lbmFibGVGaXhlZFJvd1Njcm9sbCxcbiAgICAgICAgZml4ZWRDb2x1bW5Db3VudCA9IHByb3BzLmZpeGVkQ29sdW1uQ291bnQsXG4gICAgICAgIGZpeGVkUm93Q291bnQgPSBwcm9wcy5maXhlZFJvd0NvdW50LFxuICAgICAgICBzY3JvbGxMZWZ0ID0gcHJvcHMuc2Nyb2xsTGVmdCxcbiAgICAgICAgaGlkZVRvcFJpZ2h0R3JpZFNjcm9sbGJhciA9IHByb3BzLmhpZGVUb3BSaWdodEdyaWRTY3JvbGxiYXI7XG4gICAgICB2YXIgX3RoaXMkc3RhdGU1ID0gdGhpcy5zdGF0ZSxcbiAgICAgICAgc2hvd0hvcml6b250YWxTY3JvbGxiYXIgPSBfdGhpcyRzdGF0ZTUuc2hvd0hvcml6b250YWxTY3JvbGxiYXIsXG4gICAgICAgIHNjcm9sbGJhclNpemUgPSBfdGhpcyRzdGF0ZTUuc2Nyb2xsYmFyU2l6ZTtcbiAgICAgIGlmICghZml4ZWRSb3dDb3VudCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICAgIHZhciBhZGRpdGlvbmFsQ29sdW1uQ291bnQgPSBzaG93SG9yaXpvbnRhbFNjcm9sbGJhciA/IDEgOiAwLFxuICAgICAgICBoZWlnaHQgPSB0aGlzLl9nZXRUb3BHcmlkSGVpZ2h0KHByb3BzKSxcbiAgICAgICAgd2lkdGggPSB0aGlzLl9nZXRSaWdodEdyaWRXaWR0aChwcm9wcyksXG4gICAgICAgIGFkZGl0aW9uYWxIZWlnaHQgPSBzaG93SG9yaXpvbnRhbFNjcm9sbGJhciA/IHNjcm9sbGJhclNpemUgOiAwO1xuICAgICAgdmFyIGdyaWRIZWlnaHQgPSBoZWlnaHQsXG4gICAgICAgIHN0eWxlID0gdGhpcy5fdG9wUmlnaHRHcmlkU3R5bGU7XG4gICAgICBpZiAoaGlkZVRvcFJpZ2h0R3JpZFNjcm9sbGJhcikge1xuICAgICAgICBncmlkSGVpZ2h0ID0gaGVpZ2h0ICsgYWRkaXRpb25hbEhlaWdodDtcbiAgICAgICAgc3R5bGUgPSBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIHRoaXMuX3RvcFJpZ2h0R3JpZFN0eWxlKSwge30sIHtcbiAgICAgICAgICBsZWZ0OiAwXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgdmFyIHRvcFJpZ2h0R3JpZCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEdyaWQsIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgICAgICBjZWxsUmVuZGVyZXI6IHRoaXMuX2NlbGxSZW5kZXJlclRvcFJpZ2h0R3JpZCxcbiAgICAgICAgY2xhc3NOYW1lOiB0aGlzLnByb3BzLmNsYXNzTmFtZVRvcFJpZ2h0R3JpZCxcbiAgICAgICAgY29sdW1uQ291bnQ6IE1hdGgubWF4KDAsIGNvbHVtbkNvdW50IC0gZml4ZWRDb2x1bW5Db3VudCkgKyBhZGRpdGlvbmFsQ29sdW1uQ291bnQsXG4gICAgICAgIGNvbHVtbldpZHRoOiB0aGlzLl9jb2x1bW5XaWR0aFJpZ2h0R3JpZCxcbiAgICAgICAgZGVmZXJyZWRNZWFzdXJlbWVudENhY2hlOiB0aGlzLl9kZWZlcnJlZE1lYXN1cmVtZW50Q2FjaGVUb3BSaWdodEdyaWQsXG4gICAgICAgIGhlaWdodDogZ3JpZEhlaWdodCxcbiAgICAgICAgb25TY3JvbGw6IGVuYWJsZUZpeGVkUm93U2Nyb2xsID8gdGhpcy5fb25TY3JvbGxMZWZ0IDogdW5kZWZpbmVkLFxuICAgICAgICByZWY6IHRoaXMuX3RvcFJpZ2h0R3JpZFJlZixcbiAgICAgICAgcm93Q291bnQ6IGZpeGVkUm93Q291bnQsXG4gICAgICAgIHNjcm9sbExlZnQ6IHNjcm9sbExlZnQsXG4gICAgICAgIHN0eWxlOiBzdHlsZSxcbiAgICAgICAgdGFiSW5kZXg6IG51bGwsXG4gICAgICAgIHdpZHRoOiB3aWR0aFxuICAgICAgfSkpO1xuICAgICAgaWYgKGhpZGVUb3BSaWdodEdyaWRTY3JvbGxiYXIpIHtcbiAgICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgICBjbGFzc05hbWU6IFwiVG9wUmlnaHRHcmlkX1Njcm9sbFdyYXBwZXJcIixcbiAgICAgICAgICBzdHlsZTogX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCB0aGlzLl90b3BSaWdodEdyaWRTdHlsZSksIHt9LCB7XG4gICAgICAgICAgICBoZWlnaHQ6IGhlaWdodCxcbiAgICAgICAgICAgIHdpZHRoOiB3aWR0aCxcbiAgICAgICAgICAgIG92ZXJmbG93WDogJ2hpZGRlbidcbiAgICAgICAgICB9KVxuICAgICAgICB9LCB0b3BSaWdodEdyaWQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRvcFJpZ2h0R3JpZDtcbiAgICB9XG4gIH1dLCBbe1xuICAgIGtleTogXCJnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKG5leHRQcm9wcywgcHJldlN0YXRlKSB7XG4gICAgICBpZiAobmV4dFByb3BzLnNjcm9sbExlZnQgIT09IHByZXZTdGF0ZS5zY3JvbGxMZWZ0IHx8IG5leHRQcm9wcy5zY3JvbGxUb3AgIT09IHByZXZTdGF0ZS5zY3JvbGxUb3ApIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBzY3JvbGxMZWZ0OiBuZXh0UHJvcHMuc2Nyb2xsTGVmdCAhPSBudWxsICYmIG5leHRQcm9wcy5zY3JvbGxMZWZ0ID49IDAgPyBuZXh0UHJvcHMuc2Nyb2xsTGVmdCA6IHByZXZTdGF0ZS5zY3JvbGxMZWZ0LFxuICAgICAgICAgIHNjcm9sbFRvcDogbmV4dFByb3BzLnNjcm9sbFRvcCAhPSBudWxsICYmIG5leHRQcm9wcy5zY3JvbGxUb3AgPj0gMCA/IG5leHRQcm9wcy5zY3JvbGxUb3AgOiBwcmV2U3RhdGUuc2Nyb2xsVG9wXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1dKTtcbn0oUmVhY3QuUHVyZUNvbXBvbmVudCk7XG5fZGVmaW5lUHJvcGVydHkoTXVsdGlHcmlkLCBcImRlZmF1bHRQcm9wc1wiLCB7XG4gIGNsYXNzTmFtZUJvdHRvbUxlZnRHcmlkOiAnJyxcbiAgY2xhc3NOYW1lQm90dG9tUmlnaHRHcmlkOiAnJyxcbiAgY2xhc3NOYW1lVG9wTGVmdEdyaWQ6ICcnLFxuICBjbGFzc05hbWVUb3BSaWdodEdyaWQ6ICcnLFxuICBlbmFibGVGaXhlZENvbHVtblNjcm9sbDogZmFsc2UsXG4gIGVuYWJsZUZpeGVkUm93U2Nyb2xsOiBmYWxzZSxcbiAgZml4ZWRDb2x1bW5Db3VudDogMCxcbiAgZml4ZWRSb3dDb3VudDogMCxcbiAgc2Nyb2xsVG9Db2x1bW46IC0xLFxuICBzY3JvbGxUb1JvdzogLTEsXG4gIHN0eWxlOiB7fSxcbiAgc3R5bGVCb3R0b21MZWZ0R3JpZDoge30sXG4gIHN0eWxlQm90dG9tUmlnaHRHcmlkOiB7fSxcbiAgc3R5bGVUb3BMZWZ0R3JpZDoge30sXG4gIHN0eWxlVG9wUmlnaHRHcmlkOiB7fSxcbiAgaGlkZVRvcFJpZ2h0R3JpZFNjcm9sbGJhcjogZmFsc2UsXG4gIGhpZGVCb3R0b21MZWZ0R3JpZFNjcm9sbGJhcjogZmFsc2Vcbn0pO1xuTXVsdGlHcmlkLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgY2xhc3NOYW1lQm90dG9tTGVmdEdyaWQ6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgY2xhc3NOYW1lQm90dG9tUmlnaHRHcmlkOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gIGNsYXNzTmFtZVRvcExlZnRHcmlkOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gIGNsYXNzTmFtZVRvcFJpZ2h0R3JpZDogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICBlbmFibGVGaXhlZENvbHVtblNjcm9sbDogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZCxcbiAgZW5hYmxlRml4ZWRSb3dTY3JvbGw6IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXG4gIGZpeGVkQ29sdW1uQ291bnQ6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZCxcbiAgZml4ZWRSb3dDb3VudDogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkLFxuICBvblNjcm9sbGJhclByZXNlbmNlQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYyxcbiAgc3R5bGU6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgc3R5bGVCb3R0b21MZWZ0R3JpZDogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICBzdHlsZUJvdHRvbVJpZ2h0R3JpZDogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICBzdHlsZVRvcExlZnRHcmlkOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gIHN0eWxlVG9wUmlnaHRHcmlkOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gIGhpZGVUb3BSaWdodEdyaWRTY3JvbGxiYXI6IFByb3BUeXBlcy5ib29sLFxuICBoaWRlQm90dG9tTGVmdEdyaWRTY3JvbGxiYXI6IFByb3BUeXBlcy5ib29sXG59IDoge307XG5wb2x5ZmlsbChNdWx0aUdyaWQpO1xuZXhwb3J0IGRlZmF1bHQgTXVsdGlHcmlkOyIsImltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIjtcbmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3NcIjtcbmltcG9ydCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCI7XG5pbXBvcnQgX2dldFByb3RvdHlwZU9mIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mXCI7XG5pbXBvcnQgX2luaGVyaXRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCI7XG5mdW5jdGlvbiBfY2FsbFN1cGVyKHQsIG8sIGUpIHsgcmV0dXJuIG8gPSBfZ2V0UHJvdG90eXBlT2YobyksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHQsIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSA/IFJlZmxlY3QuY29uc3RydWN0KG8sIGUgfHwgW10sIF9nZXRQcm90b3R5cGVPZih0KS5jb25zdHJ1Y3RvcikgOiBvLmFwcGx5KHQsIGUpKTsgfVxuZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgdHJ5IHsgdmFyIHQgPSAhQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyB9IGNhdGNoICh0KSB7fSByZXR1cm4gKF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSBmdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyByZXR1cm4gISF0OyB9KSgpOyB9XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG4vKipcbiAqIEhPQyB0aGF0IHNpbXBsaWZpZXMgdGhlIHByb2Nlc3Mgb2Ygc3luY2hyb25pemluZyBzY3JvbGxpbmcgYmV0d2VlbiB0d28gb3IgbW9yZSB2aXJ0dWFsaXplZCBjb21wb25lbnRzLlxuICovXG52YXIgU2Nyb2xsU3luYyA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1JlYWN0JFB1cmVDb21wb25lbnQpIHtcbiAgZnVuY3Rpb24gU2Nyb2xsU3luYyhwcm9wcywgY29udGV4dCkge1xuICAgIHZhciBfdGhpcztcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU2Nyb2xsU3luYyk7XG4gICAgX3RoaXMgPSBfY2FsbFN1cGVyKHRoaXMsIFNjcm9sbFN5bmMsIFtwcm9wcywgY29udGV4dF0pO1xuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgY2xpZW50SGVpZ2h0OiAwLFxuICAgICAgY2xpZW50V2lkdGg6IDAsXG4gICAgICBzY3JvbGxIZWlnaHQ6IDAsXG4gICAgICBzY3JvbGxMZWZ0OiAwLFxuICAgICAgc2Nyb2xsVG9wOiAwLFxuICAgICAgc2Nyb2xsV2lkdGg6IDBcbiAgICB9O1xuICAgIF90aGlzLl9vblNjcm9sbCA9IF90aGlzLl9vblNjcm9sbC5iaW5kKF90aGlzKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cbiAgX2luaGVyaXRzKFNjcm9sbFN5bmMsIF9SZWFjdCRQdXJlQ29tcG9uZW50KTtcbiAgcmV0dXJuIF9jcmVhdGVDbGFzcyhTY3JvbGxTeW5jLCBbe1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIGNoaWxkcmVuID0gdGhpcy5wcm9wcy5jaGlsZHJlbjtcbiAgICAgIHZhciBfdGhpcyRzdGF0ZSA9IHRoaXMuc3RhdGUsXG4gICAgICAgIGNsaWVudEhlaWdodCA9IF90aGlzJHN0YXRlLmNsaWVudEhlaWdodCxcbiAgICAgICAgY2xpZW50V2lkdGggPSBfdGhpcyRzdGF0ZS5jbGllbnRXaWR0aCxcbiAgICAgICAgc2Nyb2xsSGVpZ2h0ID0gX3RoaXMkc3RhdGUuc2Nyb2xsSGVpZ2h0LFxuICAgICAgICBzY3JvbGxMZWZ0ID0gX3RoaXMkc3RhdGUuc2Nyb2xsTGVmdCxcbiAgICAgICAgc2Nyb2xsVG9wID0gX3RoaXMkc3RhdGUuc2Nyb2xsVG9wLFxuICAgICAgICBzY3JvbGxXaWR0aCA9IF90aGlzJHN0YXRlLnNjcm9sbFdpZHRoO1xuICAgICAgcmV0dXJuIGNoaWxkcmVuKHtcbiAgICAgICAgY2xpZW50SGVpZ2h0OiBjbGllbnRIZWlnaHQsXG4gICAgICAgIGNsaWVudFdpZHRoOiBjbGllbnRXaWR0aCxcbiAgICAgICAgb25TY3JvbGw6IHRoaXMuX29uU2Nyb2xsLFxuICAgICAgICBzY3JvbGxIZWlnaHQ6IHNjcm9sbEhlaWdodCxcbiAgICAgICAgc2Nyb2xsTGVmdDogc2Nyb2xsTGVmdCxcbiAgICAgICAgc2Nyb2xsVG9wOiBzY3JvbGxUb3AsXG4gICAgICAgIHNjcm9sbFdpZHRoOiBzY3JvbGxXaWR0aFxuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIl9vblNjcm9sbFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfb25TY3JvbGwoX3JlZikge1xuICAgICAgdmFyIGNsaWVudEhlaWdodCA9IF9yZWYuY2xpZW50SGVpZ2h0LFxuICAgICAgICBjbGllbnRXaWR0aCA9IF9yZWYuY2xpZW50V2lkdGgsXG4gICAgICAgIHNjcm9sbEhlaWdodCA9IF9yZWYuc2Nyb2xsSGVpZ2h0LFxuICAgICAgICBzY3JvbGxMZWZ0ID0gX3JlZi5zY3JvbGxMZWZ0LFxuICAgICAgICBzY3JvbGxUb3AgPSBfcmVmLnNjcm9sbFRvcCxcbiAgICAgICAgc2Nyb2xsV2lkdGggPSBfcmVmLnNjcm9sbFdpZHRoO1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGNsaWVudEhlaWdodDogY2xpZW50SGVpZ2h0LFxuICAgICAgICBjbGllbnRXaWR0aDogY2xpZW50V2lkdGgsXG4gICAgICAgIHNjcm9sbEhlaWdodDogc2Nyb2xsSGVpZ2h0LFxuICAgICAgICBzY3JvbGxMZWZ0OiBzY3JvbGxMZWZ0LFxuICAgICAgICBzY3JvbGxUb3A6IHNjcm9sbFRvcCxcbiAgICAgICAgc2Nyb2xsV2lkdGg6IHNjcm9sbFdpZHRoXG4gICAgICB9KTtcbiAgICB9XG4gIH1dKTtcbn0oUmVhY3QuUHVyZUNvbXBvbmVudCk7XG5leHBvcnQgeyBTY3JvbGxTeW5jIGFzIGRlZmF1bHQgfTtcblNjcm9sbFN5bmMucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKipcbiAgICogRnVuY3Rpb24gcmVzcG9uc2libGUgZm9yIHJlbmRlcmluZyAyIG9yIG1vcmUgdmlydHVhbGl6ZWQgY29tcG9uZW50cy5cbiAgICogVGhpcyBmdW5jdGlvbiBzaG91bGQgaW1wbGVtZW50IHRoZSBmb2xsb3dpbmcgc2lnbmF0dXJlOlxuICAgKiAoeyBvblNjcm9sbCwgc2Nyb2xsTGVmdCwgc2Nyb2xsVG9wIH0pID0+IFByb3BUeXBlcy5lbGVtZW50XG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxufSA6IHt9OyIsInZhciBTb3J0RGlyZWN0aW9uID0ge1xuICAvKipcbiAgICogU29ydCBpdGVtcyBpbiBhc2NlbmRpbmcgb3JkZXIuXG4gICAqIFRoaXMgbWVhbnMgYXJyYW5naW5nIGZyb20gdGhlIGxvd2VzdCB2YWx1ZSB0byB0aGUgaGlnaGVzdCAoZS5nLiBhLXosIDAtOSkuXG4gICAqL1xuICBBU0M6ICdBU0MnLFxuICAvKipcbiAgICogU29ydCBpdGVtcyBpbiBkZXNjZW5kaW5nIG9yZGVyLlxuICAgKiBUaGlzIG1lYW5zIGFycmFuZ2luZyBmcm9tIHRoZSBoaWdoZXN0IHZhbHVlIHRvIHRoZSBsb3dlc3QgKGUuZy4gei1hLCA5LTApLlxuICAgKi9cbiAgREVTQzogJ0RFU0MnXG59O1xuZXhwb3J0IGRlZmF1bHQgU29ydERpcmVjdGlvbjsiLCJpbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgU29ydERpcmVjdGlvbiBmcm9tICcuL1NvcnREaXJlY3Rpb24nO1xuXG4vKipcbiAqIERpc3BsYXllZCBiZXNpZGUgYSBoZWFkZXIgdG8gaW5kaWNhdGUgdGhhdCBhIFRhYmxlIGlzIGN1cnJlbnRseSBzb3J0ZWQgYnkgdGhpcyBjb2x1bW4uXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFNvcnRJbmRpY2F0b3IoX3JlZikge1xuICB2YXIgc29ydERpcmVjdGlvbiA9IF9yZWYuc29ydERpcmVjdGlvbjtcbiAgdmFyIGNsYXNzTmFtZXMgPSBjbHN4KCdSZWFjdFZpcnR1YWxpemVkX19UYWJsZV9fc29ydGFibGVIZWFkZXJJY29uJywge1xuICAgICdSZWFjdFZpcnR1YWxpemVkX19UYWJsZV9fc29ydGFibGVIZWFkZXJJY29uLS1BU0MnOiBzb3J0RGlyZWN0aW9uID09PSBTb3J0RGlyZWN0aW9uLkFTQyxcbiAgICAnUmVhY3RWaXJ0dWFsaXplZF9fVGFibGVfX3NvcnRhYmxlSGVhZGVySWNvbi0tREVTQyc6IHNvcnREaXJlY3Rpb24gPT09IFNvcnREaXJlY3Rpb24uREVTQ1xuICB9KTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwic3ZnXCIsIHtcbiAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMsXG4gICAgd2lkdGg6IDE4LFxuICAgIGhlaWdodDogMTgsXG4gICAgdmlld0JveDogXCIwIDAgMjQgMjRcIlxuICB9LCBzb3J0RGlyZWN0aW9uID09PSBTb3J0RGlyZWN0aW9uLkFTQyA/IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gICAgZDogXCJNNyAxNGw1LTUgNSA1elwiXG4gIH0pIDogLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgICBkOiBcIk03IDEwbDUgNSA1LTV6XCJcbiAgfSksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gICAgZDogXCJNMCAwaDI0djI0SDB6XCIsXG4gICAgZmlsbDogXCJub25lXCJcbiAgfSkpO1xufVxuU29ydEluZGljYXRvci5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIHNvcnREaXJlY3Rpb246IFByb3BUeXBlcy5vbmVPZihbU29ydERpcmVjdGlvbi5BU0MsIFNvcnREaXJlY3Rpb24uREVTQ10pXG59IDoge307IiwiaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzc1wiO1xuaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiO1xuaW1wb3J0IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIjtcbmltcG9ydCBfZ2V0UHJvdG90eXBlT2YgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2ZcIjtcbmltcG9ydCBfaW5oZXJpdHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIjtcbmltcG9ydCBfZGVmaW5lUHJvcGVydHkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHlcIjtcbmZ1bmN0aW9uIF9jYWxsU3VwZXIodCwgbywgZSkgeyByZXR1cm4gbyA9IF9nZXRQcm90b3R5cGVPZihvKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odCwgX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpID8gUmVmbGVjdC5jb25zdHJ1Y3QobywgZSB8fCBbXSwgX2dldFByb3RvdHlwZU9mKHQpLmNvbnN0cnVjdG9yKSA6IG8uYXBwbHkodCwgZSkpOyB9XG5mdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyB0cnkgeyB2YXIgdCA9ICFCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbiwgW10sIGZ1bmN0aW9uICgpIHt9KSk7IH0gY2F0Y2ggKHQpIHt9IHJldHVybiAoX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCA9IGZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IHJldHVybiAhIXQ7IH0pKCk7IH1cbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgZGVmYXVsdEhlYWRlclJlbmRlcmVyIGZyb20gJy4vZGVmYXVsdEhlYWRlclJlbmRlcmVyJztcbmltcG9ydCBkZWZhdWx0Q2VsbFJlbmRlcmVyIGZyb20gJy4vZGVmYXVsdENlbGxSZW5kZXJlcic7XG5pbXBvcnQgZGVmYXVsdENlbGxEYXRhR2V0dGVyIGZyb20gJy4vZGVmYXVsdENlbGxEYXRhR2V0dGVyJztcbmltcG9ydCBTb3J0RGlyZWN0aW9uIGZyb20gJy4vU29ydERpcmVjdGlvbic7XG5cbi8qKlxuICogRGVzY3JpYmVzIHRoZSBoZWFkZXIgYW5kIGNlbGwgY29udGVudHMgb2YgYSB0YWJsZSBjb2x1bW4uXG4gKi9cbnZhciBDb2x1bW4gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgZnVuY3Rpb24gQ29sdW1uKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDb2x1bW4pO1xuICAgIHJldHVybiBfY2FsbFN1cGVyKHRoaXMsIENvbHVtbiwgYXJndW1lbnRzKTtcbiAgfVxuICBfaW5oZXJpdHMoQ29sdW1uLCBfUmVhY3QkQ29tcG9uZW50KTtcbiAgcmV0dXJuIF9jcmVhdGVDbGFzcyhDb2x1bW4pO1xufShSZWFjdC5Db21wb25lbnQpO1xuX2RlZmluZVByb3BlcnR5KENvbHVtbiwgXCJkZWZhdWx0UHJvcHNcIiwge1xuICBjZWxsRGF0YUdldHRlcjogZGVmYXVsdENlbGxEYXRhR2V0dGVyLFxuICBjZWxsUmVuZGVyZXI6IGRlZmF1bHRDZWxsUmVuZGVyZXIsXG4gIGRlZmF1bHRTb3J0RGlyZWN0aW9uOiBTb3J0RGlyZWN0aW9uLkFTQyxcbiAgZmxleEdyb3c6IDAsXG4gIGZsZXhTaHJpbms6IDEsXG4gIGhlYWRlclJlbmRlcmVyOiBkZWZhdWx0SGVhZGVyUmVuZGVyZXIsXG4gIHN0eWxlOiB7fVxufSk7XG5leHBvcnQgeyBDb2x1bW4gYXMgZGVmYXVsdCB9O1xuQ29sdW1uLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqIE9wdGlvbmFsIGFyaWEtbGFiZWwgdmFsdWUgdG8gc2V0IG9uIHRoZSBjb2x1bW4gaGVhZGVyICovXG4gICdhcmlhLWxhYmVsJzogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIENhbGxiYWNrIHJlc3BvbnNpYmxlIGZvciByZXR1cm5pbmcgYSBjZWxsJ3MgZGF0YSwgZ2l2ZW4gaXRzIDpkYXRhS2V5XG4gICAqICh7IGNvbHVtbkRhdGE6IGFueSwgZGF0YUtleTogc3RyaW5nLCByb3dEYXRhOiBhbnkgfSk6IGFueVxuICAgKi9cbiAgY2VsbERhdGFHZXR0ZXI6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogQ2FsbGJhY2sgcmVzcG9uc2libGUgZm9yIHJlbmRlcmluZyBhIGNlbGwncyBjb250ZW50cy5cbiAgICogKHsgY2VsbERhdGE6IGFueSwgY29sdW1uRGF0YTogYW55LCBkYXRhS2V5OiBzdHJpbmcsIHJvd0RhdGE6IGFueSwgcm93SW5kZXg6IG51bWJlciB9KTogbm9kZVxuICAgKi9cbiAgY2VsbFJlbmRlcmVyOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqIE9wdGlvbmFsIENTUyBjbGFzcyB0byBhcHBseSB0byBjZWxsICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqIE9wdGlvbmFsIGFkZGl0aW9uYWwgZGF0YSBwYXNzZWQgdG8gdGhpcyBjb2x1bW4ncyA6Y2VsbERhdGFHZXR0ZXIgKi9cbiAgY29sdW1uRGF0YTogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqIFVuaXF1ZWx5IGlkZW50aWZpZXMgdGhlIHJvdy1kYXRhIGF0dHJpYnV0ZSBjb3JyZXNwb25kaW5nIHRvIHRoaXMgY2VsbCAqL1xuICBkYXRhS2V5OiBQcm9wVHlwZXMuYW55LmlzUmVxdWlyZWQsXG4gIC8qKiBPcHRpb25hbCBkaXJlY3Rpb24gdG8gYmUgdXNlZCB3aGVuIGNsaWNrZWQgdGhlIGZpcnN0IHRpbWUgKi9cbiAgZGVmYXVsdFNvcnREaXJlY3Rpb246IFByb3BUeXBlcy5vbmVPZihbU29ydERpcmVjdGlvbi5BU0MsIFNvcnREaXJlY3Rpb24uREVTQ10pLFxuICAvKiogSWYgc29ydCBpcyBlbmFibGVkIGZvciB0aGUgdGFibGUgYXQgbGFyZ2UsIGRpc2FibGUgaXQgZm9yIHRoaXMgY29sdW1uICovXG4gIGRpc2FibGVTb3J0OiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqIEZsZXggZ3JvdyBzdHlsZTsgZGVmYXVsdHMgdG8gMCAqL1xuICBmbGV4R3JvdzogUHJvcFR5cGVzLm51bWJlcixcbiAgLyoqIEZsZXggc2hyaW5rIHN0eWxlOyBkZWZhdWx0cyB0byAxICovXG4gIGZsZXhTaHJpbms6IFByb3BUeXBlcy5udW1iZXIsXG4gIC8qKiBPcHRpb25hbCBDU1MgY2xhc3MgdG8gYXBwbHkgdG8gdGhpcyBjb2x1bW4ncyBoZWFkZXIgKi9cbiAgaGVhZGVyQ2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogT3B0aW9uYWwgY2FsbGJhY2sgcmVzcG9uc2libGUgZm9yIHJlbmRlcmluZyBhIGNvbHVtbiBoZWFkZXIgY29udGVudHMuXG4gICAqICh7IGNvbHVtbkRhdGE6IG9iamVjdCwgZGF0YUtleTogc3RyaW5nLCBkaXNhYmxlU29ydDogYm9vbGVhbiwgbGFiZWw6IG5vZGUsIHNvcnRCeTogc3RyaW5nLCBzb3J0RGlyZWN0aW9uOiBzdHJpbmcgfSk6IFByb3BUeXBlcy5ub2RlXG4gICAqL1xuICBoZWFkZXJSZW5kZXJlcjogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgLyoqIE9wdGlvbmFsIGlubGluZSBzdHlsZSB0byBhcHBseSB0byB0aGlzIGNvbHVtbidzIGhlYWRlciAqL1xuICBoZWFkZXJTdHlsZTogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqIE9wdGlvbmFsIGlkIHRvIHNldCBvbiB0aGUgY29sdW1uIGhlYWRlciAqL1xuICBpZDogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqIEhlYWRlciBsYWJlbCBmb3IgdGhpcyBjb2x1bW4gKi9cbiAgbGFiZWw6IFByb3BUeXBlcy5ub2RlLFxuICAvKiogTWF4aW11bSB3aWR0aCBvZiBjb2x1bW47IHRoaXMgcHJvcGVydHkgd2lsbCBvbmx5IGJlIHVzZWQgaWYgOmZsZXhHcm93IGlzID4gMC4gKi9cbiAgbWF4V2lkdGg6IFByb3BUeXBlcy5udW1iZXIsXG4gIC8qKiBNaW5pbXVtIHdpZHRoIG9mIGNvbHVtbi4gKi9cbiAgbWluV2lkdGg6IFByb3BUeXBlcy5udW1iZXIsXG4gIC8qKiBPcHRpb25hbCBpbmxpbmUgc3R5bGUgdG8gYXBwbHkgdG8gY2VsbCAqL1xuICBzdHlsZTogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqIEZsZXggYmFzaXMgKHdpZHRoKSBmb3IgdGhpcyBjb2x1bW47IFRoaXMgdmFsdWUgY2FuIGdyb3cgb3Igc2hyaW5rIGJhc2VkIG9uIDpmbGV4R3JvdyBhbmQgOmZsZXhTaHJpbmsgcHJvcGVydGllcy4gKi9cbiAgd2lkdGg6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZFxufSA6IHt9OyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCI7XG5pbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCI7XG5pbXBvcnQgX2NyZWF0ZUNsYXNzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzXCI7XG5pbXBvcnQgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4gZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiO1xuaW1wb3J0IF9nZXRQcm90b3R5cGVPZiBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZlwiO1xuaW1wb3J0IF9pbmhlcml0cyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiO1xuaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eVwiO1xuZnVuY3Rpb24gb3duS2V5cyhlLCByKSB7IHZhciB0ID0gT2JqZWN0LmtleXMoZSk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBvID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhlKTsgciAmJiAobyA9IG8uZmlsdGVyKGZ1bmN0aW9uIChyKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGUsIHIpLmVudW1lcmFibGU7IH0pKSwgdC5wdXNoLmFwcGx5KHQsIG8pOyB9IHJldHVybiB0OyB9XG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkKGUpIHsgZm9yICh2YXIgciA9IDE7IHIgPCBhcmd1bWVudHMubGVuZ3RoOyByKyspIHsgdmFyIHQgPSBudWxsICE9IGFyZ3VtZW50c1tyXSA/IGFyZ3VtZW50c1tyXSA6IHt9OyByICUgMiA/IG93bktleXMoT2JqZWN0KHQpLCAhMCkuZm9yRWFjaChmdW5jdGlvbiAocikgeyBfZGVmaW5lUHJvcGVydHkoZSwgciwgdFtyXSk7IH0pIDogT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMgPyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhlLCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyh0KSkgOiBvd25LZXlzKE9iamVjdCh0KSkuZm9yRWFjaChmdW5jdGlvbiAocikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgciwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0LCByKSk7IH0pOyB9IHJldHVybiBlOyB9XG5mdW5jdGlvbiBfY2FsbFN1cGVyKHQsIG8sIGUpIHsgcmV0dXJuIG8gPSBfZ2V0UHJvdG90eXBlT2YobyksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHQsIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSA/IFJlZmxlY3QuY29uc3RydWN0KG8sIGUgfHwgW10sIF9nZXRQcm90b3R5cGVPZih0KS5jb25zdHJ1Y3RvcikgOiBvLmFwcGx5KHQsIGUpKTsgfVxuZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgdHJ5IHsgdmFyIHQgPSAhQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyB9IGNhdGNoICh0KSB7fSByZXR1cm4gKF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSBmdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyByZXR1cm4gISF0OyB9KSgpOyB9XG4vKjo6IGltcG9ydCB0eXBlIHtDZWxsUG9zaXRpb259IGZyb20gJy4uL0dyaWQnOyovXG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCBDb2x1bW4gZnJvbSAnLi9Db2x1bW4nO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBHcmlkLCB7IGFjY2Vzc2liaWxpdHlPdmVyc2NhbkluZGljZXNHZXR0ZXIgfSBmcm9tICcuLi9HcmlkJztcbmltcG9ydCBkZWZhdWx0Um93UmVuZGVyZXIgZnJvbSAnLi9kZWZhdWx0Um93UmVuZGVyZXInO1xuaW1wb3J0IGRlZmF1bHRIZWFkZXJSb3dSZW5kZXJlciBmcm9tICcuL2RlZmF1bHRIZWFkZXJSb3dSZW5kZXJlcic7XG5pbXBvcnQgU29ydERpcmVjdGlvbiBmcm9tICcuL1NvcnREaXJlY3Rpb24nO1xuXG4vKipcbiAqIFRhYmxlIGNvbXBvbmVudCB3aXRoIGZpeGVkIGhlYWRlcnMgYW5kIHZpcnR1YWxpemVkIHJvd3MgZm9yIGltcHJvdmVkIHBlcmZvcm1hbmNlIHdpdGggbGFyZ2UgZGF0YSBzZXRzLlxuICogVGhpcyBjb21wb25lbnQgZXhwZWN0cyBleHBsaWNpdCB3aWR0aCwgaGVpZ2h0LCBhbmQgcGFkZGluZyBwYXJhbWV0ZXJzLlxuICovXG52YXIgVGFibGUgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9SZWFjdCRQdXJlQ29tcG9uZW50KSB7XG4gIGZ1bmN0aW9uIFRhYmxlKHByb3BzKSB7XG4gICAgdmFyIF90aGlzO1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBUYWJsZSk7XG4gICAgX3RoaXMgPSBfY2FsbFN1cGVyKHRoaXMsIFRhYmxlLCBbcHJvcHNdKTtcbiAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIHNjcm9sbGJhcldpZHRoOiAwXG4gICAgfTtcbiAgICBfdGhpcy5fY3JlYXRlQ29sdW1uID0gX3RoaXMuX2NyZWF0ZUNvbHVtbi5iaW5kKF90aGlzKTtcbiAgICBfdGhpcy5fY3JlYXRlUm93ID0gX3RoaXMuX2NyZWF0ZVJvdy5iaW5kKF90aGlzKTtcbiAgICBfdGhpcy5fb25TY3JvbGwgPSBfdGhpcy5fb25TY3JvbGwuYmluZChfdGhpcyk7XG4gICAgX3RoaXMuX29uU2VjdGlvblJlbmRlcmVkID0gX3RoaXMuX29uU2VjdGlvblJlbmRlcmVkLmJpbmQoX3RoaXMpO1xuICAgIF90aGlzLl9zZXRSZWYgPSBfdGhpcy5fc2V0UmVmLmJpbmQoX3RoaXMpO1xuICAgIF90aGlzLl9zZXRHcmlkRWxlbWVudFJlZiA9IF90aGlzLl9zZXRHcmlkRWxlbWVudFJlZi5iaW5kKF90aGlzKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cbiAgX2luaGVyaXRzKFRhYmxlLCBfUmVhY3QkUHVyZUNvbXBvbmVudCk7XG4gIHJldHVybiBfY3JlYXRlQ2xhc3MoVGFibGUsIFt7XG4gICAga2V5OiBcImZvcmNlVXBkYXRlR3JpZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmb3JjZVVwZGF0ZUdyaWQoKSB7XG4gICAgICBpZiAodGhpcy5HcmlkKSB7XG4gICAgICAgIHRoaXMuR3JpZC5mb3JjZVVwZGF0ZSgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKiBTZWUgR3JpZCNnZXRPZmZzZXRGb3JDZWxsICovXG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0T2Zmc2V0Rm9yUm93XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldE9mZnNldEZvclJvdyhfcmVmKSB7XG4gICAgICB2YXIgYWxpZ25tZW50ID0gX3JlZi5hbGlnbm1lbnQsXG4gICAgICAgIGluZGV4ID0gX3JlZi5pbmRleDtcbiAgICAgIGlmICh0aGlzLkdyaWQpIHtcbiAgICAgICAgdmFyIF90aGlzJEdyaWQkZ2V0T2Zmc2V0RiA9IHRoaXMuR3JpZC5nZXRPZmZzZXRGb3JDZWxsKHtcbiAgICAgICAgICAgIGFsaWdubWVudDogYWxpZ25tZW50LFxuICAgICAgICAgICAgcm93SW5kZXg6IGluZGV4XG4gICAgICAgICAgfSksXG4gICAgICAgICAgc2Nyb2xsVG9wID0gX3RoaXMkR3JpZCRnZXRPZmZzZXRGLnNjcm9sbFRvcDtcbiAgICAgICAgcmV0dXJuIHNjcm9sbFRvcDtcbiAgICAgIH1cbiAgICAgIHJldHVybiAwO1xuICAgIH1cblxuICAgIC8qKiBDZWxsTWVhc3VyZXIgY29tcGF0aWJpbGl0eSAqL1xuICB9LCB7XG4gICAga2V5OiBcImludmFsaWRhdGVDZWxsU2l6ZUFmdGVyUmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGludmFsaWRhdGVDZWxsU2l6ZUFmdGVyUmVuZGVyKF9yZWYyIC8qOjogKi8pIHtcbiAgICAgIHZhciBjb2x1bW5JbmRleCA9IF9yZWYyIC8qOjogKi8uY29sdW1uSW5kZXgsXG4gICAgICAgIHJvd0luZGV4ID0gX3JlZjIgLyo6OiAqLy5yb3dJbmRleDtcbiAgICAgIGlmICh0aGlzLkdyaWQpIHtcbiAgICAgICAgdGhpcy5HcmlkLmludmFsaWRhdGVDZWxsU2l6ZUFmdGVyUmVuZGVyKHtcbiAgICAgICAgICByb3dJbmRleDogcm93SW5kZXgsXG4gICAgICAgICAgY29sdW1uSW5kZXg6IGNvbHVtbkluZGV4XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKiBTZWUgR3JpZCNtZWFzdXJlQWxsQ2VsbHMgKi9cbiAgfSwge1xuICAgIGtleTogXCJtZWFzdXJlQWxsUm93c1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBtZWFzdXJlQWxsUm93cygpIHtcbiAgICAgIGlmICh0aGlzLkdyaWQpIHtcbiAgICAgICAgdGhpcy5HcmlkLm1lYXN1cmVBbGxDZWxscygpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKiBDZWxsTWVhc3VyZXIgY29tcGF0aWJpbGl0eSAqL1xuICB9LCB7XG4gICAga2V5OiBcInJlY29tcHV0ZUdyaWRTaXplXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlY29tcHV0ZUdyaWRTaXplKCkge1xuICAgICAgdmFyIF9yZWYzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fSxcbiAgICAgICAgX3JlZjMkY29sdW1uSW5kZXggPSBfcmVmMy5jb2x1bW5JbmRleCxcbiAgICAgICAgY29sdW1uSW5kZXggPSBfcmVmMyRjb2x1bW5JbmRleCA9PT0gdm9pZCAwID8gMCA6IF9yZWYzJGNvbHVtbkluZGV4LFxuICAgICAgICBfcmVmMyRyb3dJbmRleCA9IF9yZWYzLnJvd0luZGV4LFxuICAgICAgICByb3dJbmRleCA9IF9yZWYzJHJvd0luZGV4ID09PSB2b2lkIDAgPyAwIDogX3JlZjMkcm93SW5kZXg7XG4gICAgICBpZiAodGhpcy5HcmlkKSB7XG4gICAgICAgIHRoaXMuR3JpZC5yZWNvbXB1dGVHcmlkU2l6ZSh7XG4gICAgICAgICAgcm93SW5kZXg6IHJvd0luZGV4LFxuICAgICAgICAgIGNvbHVtbkluZGV4OiBjb2x1bW5JbmRleFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKiogU2VlIEdyaWQjcmVjb21wdXRlR3JpZFNpemUgKi9cbiAgfSwge1xuICAgIGtleTogXCJyZWNvbXB1dGVSb3dIZWlnaHRzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlY29tcHV0ZVJvd0hlaWdodHMoKSB7XG4gICAgICB2YXIgaW5kZXggPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IDA7XG4gICAgICBpZiAodGhpcy5HcmlkKSB7XG4gICAgICAgIHRoaXMuR3JpZC5yZWNvbXB1dGVHcmlkU2l6ZSh7XG4gICAgICAgICAgcm93SW5kZXg6IGluZGV4XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKiBTZWUgR3JpZCNzY3JvbGxUb1Bvc2l0aW9uICovXG4gIH0sIHtcbiAgICBrZXk6IFwic2Nyb2xsVG9Qb3NpdGlvblwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzY3JvbGxUb1Bvc2l0aW9uKCkge1xuICAgICAgdmFyIHNjcm9sbFRvcCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogMDtcbiAgICAgIGlmICh0aGlzLkdyaWQpIHtcbiAgICAgICAgdGhpcy5HcmlkLnNjcm9sbFRvUG9zaXRpb24oe1xuICAgICAgICAgIHNjcm9sbFRvcDogc2Nyb2xsVG9wXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKiBTZWUgR3JpZCNzY3JvbGxUb0NlbGwgKi9cbiAgfSwge1xuICAgIGtleTogXCJzY3JvbGxUb1Jvd1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzY3JvbGxUb1JvdygpIHtcbiAgICAgIHZhciBpbmRleCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogMDtcbiAgICAgIGlmICh0aGlzLkdyaWQpIHtcbiAgICAgICAgdGhpcy5HcmlkLnNjcm9sbFRvQ2VsbCh7XG4gICAgICAgICAgY29sdW1uSW5kZXg6IDAsXG4gICAgICAgICAgcm93SW5kZXg6IGluZGV4XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZXRTY3JvbGxiYXJXaWR0aFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRTY3JvbGxiYXJXaWR0aCgpIHtcbiAgICAgIGlmICh0aGlzLkdyaWRFbGVtZW50KSB7XG4gICAgICAgIHZhciBfR3JpZCA9IHRoaXMuR3JpZEVsZW1lbnQ7XG4gICAgICAgIHZhciBjbGllbnRXaWR0aCA9IF9HcmlkLmNsaWVudFdpZHRoIHx8IDA7XG4gICAgICAgIHZhciBvZmZzZXRXaWR0aCA9IF9HcmlkLm9mZnNldFdpZHRoIHx8IDA7XG4gICAgICAgIHJldHVybiBvZmZzZXRXaWR0aCAtIGNsaWVudFdpZHRoO1xuICAgICAgfVxuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNvbXBvbmVudERpZE1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgdGhpcy5fc2V0U2Nyb2xsYmFyV2lkdGgoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY29tcG9uZW50RGlkVXBkYXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZSgpIHtcbiAgICAgIHRoaXMuX3NldFNjcm9sbGJhcldpZHRoKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJHByb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgZGlzYWJsZUhlYWRlciA9IF90aGlzJHByb3BzLmRpc2FibGVIZWFkZXIsXG4gICAgICAgIGdyaWRDbGFzc05hbWUgPSBfdGhpcyRwcm9wcy5ncmlkQ2xhc3NOYW1lLFxuICAgICAgICBncmlkU3R5bGUgPSBfdGhpcyRwcm9wcy5ncmlkU3R5bGUsXG4gICAgICAgIGhlYWRlckhlaWdodCA9IF90aGlzJHByb3BzLmhlYWRlckhlaWdodCxcbiAgICAgICAgaGVhZGVyUm93UmVuZGVyZXIgPSBfdGhpcyRwcm9wcy5oZWFkZXJSb3dSZW5kZXJlcixcbiAgICAgICAgaGVpZ2h0ID0gX3RoaXMkcHJvcHMuaGVpZ2h0LFxuICAgICAgICBpZCA9IF90aGlzJHByb3BzLmlkLFxuICAgICAgICBub1Jvd3NSZW5kZXJlciA9IF90aGlzJHByb3BzLm5vUm93c1JlbmRlcmVyLFxuICAgICAgICByb3dDbGFzc05hbWUgPSBfdGhpcyRwcm9wcy5yb3dDbGFzc05hbWUsXG4gICAgICAgIHJvd1N0eWxlID0gX3RoaXMkcHJvcHMucm93U3R5bGUsXG4gICAgICAgIHNjcm9sbFRvSW5kZXggPSBfdGhpcyRwcm9wcy5zY3JvbGxUb0luZGV4LFxuICAgICAgICBzdHlsZSA9IF90aGlzJHByb3BzLnN0eWxlLFxuICAgICAgICB3aWR0aCA9IF90aGlzJHByb3BzLndpZHRoO1xuICAgICAgdmFyIHNjcm9sbGJhcldpZHRoID0gdGhpcy5zdGF0ZS5zY3JvbGxiYXJXaWR0aDtcbiAgICAgIHZhciBhdmFpbGFibGVSb3dzSGVpZ2h0ID0gZGlzYWJsZUhlYWRlciA/IGhlaWdodCA6IGhlaWdodCAtIGhlYWRlckhlaWdodDtcbiAgICAgIHZhciByb3dDbGFzcyA9IHR5cGVvZiByb3dDbGFzc05hbWUgPT09ICdmdW5jdGlvbicgPyByb3dDbGFzc05hbWUoe1xuICAgICAgICBpbmRleDogLTFcbiAgICAgIH0pIDogcm93Q2xhc3NOYW1lO1xuICAgICAgdmFyIHJvd1N0eWxlT2JqZWN0ID0gdHlwZW9mIHJvd1N0eWxlID09PSAnZnVuY3Rpb24nID8gcm93U3R5bGUoe1xuICAgICAgICBpbmRleDogLTFcbiAgICAgIH0pIDogcm93U3R5bGU7XG5cbiAgICAgIC8vIFByZWNvbXB1dGUgYW5kIGNhY2hlIGNvbHVtbiBzdHlsZXMgYmVmb3JlIHJlbmRlcmluZyByb3dzIGFuZCBjb2x1bW5zIHRvIHNwZWVkIHRoaW5ncyB1cFxuICAgICAgdGhpcy5fY2FjaGVkQ29sdW1uU3R5bGVzID0gW107XG4gICAgICBSZWFjdC5DaGlsZHJlbi50b0FycmF5KGNoaWxkcmVuKS5mb3JFYWNoKGZ1bmN0aW9uIChjb2x1bW4sIGluZGV4KSB7XG4gICAgICAgIHZhciBmbGV4U3R5bGVzID0gX3RoaXMyLl9nZXRGbGV4U3R5bGVGb3JDb2x1bW4oY29sdW1uLCBjb2x1bW4ucHJvcHMuc3R5bGUgfHwgQ29sdW1uLmRlZmF1bHRQcm9wcy5zdHlsZSk7XG4gICAgICAgIF90aGlzMi5fY2FjaGVkQ29sdW1uU3R5bGVzW2luZGV4XSA9IF9vYmplY3RTcHJlYWQoe1xuICAgICAgICAgIG92ZXJmbG93OiAnaGlkZGVuJ1xuICAgICAgICB9LCBmbGV4U3R5bGVzKTtcbiAgICAgIH0pO1xuXG4gICAgICAvLyBOb3RlIHRoYXQgd2Ugc3BlY2lmeSA6cm93Q291bnQsIDpzY3JvbGxiYXJXaWR0aCwgOnNvcnRCeSwgYW5kIDpzb3J0RGlyZWN0aW9uIGFzIHByb3BlcnRpZXMgb24gR3JpZCBldmVuIHRob3VnaCB0aGVzZSBoYXZlIG5vdGhpbmcgdG8gZG8gd2l0aCBHcmlkLlxuICAgICAgLy8gVGhpcyBpcyBkb25lIGJlY2F1c2UgR3JpZCBpcyBhIHB1cmUgY29tcG9uZW50IGFuZCB3b24ndCB1cGRhdGUgdW5sZXNzIGl0cyBwcm9wZXJ0aWVzIG9yIHN0YXRlIGhhcyBjaGFuZ2VkLlxuICAgICAgLy8gQW55IHByb3BlcnR5IHRoYXQgc2hvdWxkIHRyaWdnZXIgYSByZS1yZW5kZXIgb2YgR3JpZCB0aGVuIGlzIHNwZWNpZmllZCBoZXJlIHRvIGF2b2lkIGEgc3RhbGUgZGlzcGxheS5cbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgIFwiYXJpYS1sYWJlbFwiOiB0aGlzLnByb3BzWydhcmlhLWxhYmVsJ10sXG4gICAgICAgIFwiYXJpYS1sYWJlbGxlZGJ5XCI6IHRoaXMucHJvcHNbJ2FyaWEtbGFiZWxsZWRieSddLFxuICAgICAgICBcImFyaWEtY29sY291bnRcIjogUmVhY3QuQ2hpbGRyZW4udG9BcnJheShjaGlsZHJlbikubGVuZ3RoLFxuICAgICAgICBcImFyaWEtcm93Y291bnRcIjogdGhpcy5wcm9wcy5yb3dDb3VudCxcbiAgICAgICAgY2xhc3NOYW1lOiBjbHN4KCdSZWFjdFZpcnR1YWxpemVkX19UYWJsZScsIGNsYXNzTmFtZSksXG4gICAgICAgIGlkOiBpZCxcbiAgICAgICAgcm9sZTogXCJncmlkXCIsXG4gICAgICAgIHN0eWxlOiBzdHlsZVxuICAgICAgfSwgIWRpc2FibGVIZWFkZXIgJiYgaGVhZGVyUm93UmVuZGVyZXIoe1xuICAgICAgICBjbGFzc05hbWU6IGNsc3goJ1JlYWN0VmlydHVhbGl6ZWRfX1RhYmxlX19oZWFkZXJSb3cnLCByb3dDbGFzcyksXG4gICAgICAgIGNvbHVtbnM6IHRoaXMuX2dldEhlYWRlckNvbHVtbnMoKSxcbiAgICAgICAgc3R5bGU6IF9vYmplY3RTcHJlYWQoe1xuICAgICAgICAgIGhlaWdodDogaGVhZGVySGVpZ2h0LFxuICAgICAgICAgIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgICAgICAgICBwYWRkaW5nUmlnaHQ6IHNjcm9sbGJhcldpZHRoLFxuICAgICAgICAgIHdpZHRoOiB3aWR0aFxuICAgICAgICB9LCByb3dTdHlsZU9iamVjdClcbiAgICAgIH0pLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChHcmlkLCBfZXh0ZW5kcyh7fSwgdGhpcy5wcm9wcywge1xuICAgICAgICBlbGVtZW50UmVmOiB0aGlzLl9zZXRHcmlkRWxlbWVudFJlZixcbiAgICAgICAgXCJhcmlhLXJlYWRvbmx5XCI6IG51bGwsXG4gICAgICAgIGF1dG9Db250YWluZXJXaWR0aDogdHJ1ZSxcbiAgICAgICAgY2xhc3NOYW1lOiBjbHN4KCdSZWFjdFZpcnR1YWxpemVkX19UYWJsZV9fR3JpZCcsIGdyaWRDbGFzc05hbWUpLFxuICAgICAgICBjZWxsUmVuZGVyZXI6IHRoaXMuX2NyZWF0ZVJvdyxcbiAgICAgICAgY29sdW1uV2lkdGg6IHdpZHRoLFxuICAgICAgICBjb2x1bW5Db3VudDogMSxcbiAgICAgICAgaGVpZ2h0OiBhdmFpbGFibGVSb3dzSGVpZ2h0LFxuICAgICAgICBpZDogdW5kZWZpbmVkLFxuICAgICAgICBub0NvbnRlbnRSZW5kZXJlcjogbm9Sb3dzUmVuZGVyZXIsXG4gICAgICAgIG9uU2Nyb2xsOiB0aGlzLl9vblNjcm9sbCxcbiAgICAgICAgb25TZWN0aW9uUmVuZGVyZWQ6IHRoaXMuX29uU2VjdGlvblJlbmRlcmVkLFxuICAgICAgICByZWY6IHRoaXMuX3NldFJlZixcbiAgICAgICAgcm9sZTogXCJyb3dncm91cFwiLFxuICAgICAgICBzY3JvbGxiYXJXaWR0aDogc2Nyb2xsYmFyV2lkdGgsXG4gICAgICAgIHNjcm9sbFRvUm93OiBzY3JvbGxUb0luZGV4LFxuICAgICAgICBzdHlsZTogX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBncmlkU3R5bGUpLCB7fSwge1xuICAgICAgICAgIG92ZXJmbG93WDogJ2hpZGRlbidcbiAgICAgICAgfSlcbiAgICAgIH0pKSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIl9jcmVhdGVDb2x1bW5cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2NyZWF0ZUNvbHVtbihfcmVmNCkge1xuICAgICAgdmFyIGNvbHVtbiA9IF9yZWY0LmNvbHVtbixcbiAgICAgICAgY29sdW1uSW5kZXggPSBfcmVmNC5jb2x1bW5JbmRleCxcbiAgICAgICAgaXNTY3JvbGxpbmcgPSBfcmVmNC5pc1Njcm9sbGluZyxcbiAgICAgICAgcGFyZW50ID0gX3JlZjQucGFyZW50LFxuICAgICAgICByb3dEYXRhID0gX3JlZjQucm93RGF0YSxcbiAgICAgICAgcm93SW5kZXggPSBfcmVmNC5yb3dJbmRleDtcbiAgICAgIHZhciBvbkNvbHVtbkNsaWNrID0gdGhpcy5wcm9wcy5vbkNvbHVtbkNsaWNrO1xuICAgICAgdmFyIF9jb2x1bW4kcHJvcHMgPSBjb2x1bW4ucHJvcHMsXG4gICAgICAgIGNlbGxEYXRhR2V0dGVyID0gX2NvbHVtbiRwcm9wcy5jZWxsRGF0YUdldHRlcixcbiAgICAgICAgY2VsbFJlbmRlcmVyID0gX2NvbHVtbiRwcm9wcy5jZWxsUmVuZGVyZXIsXG4gICAgICAgIGNsYXNzTmFtZSA9IF9jb2x1bW4kcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICBjb2x1bW5EYXRhID0gX2NvbHVtbiRwcm9wcy5jb2x1bW5EYXRhLFxuICAgICAgICBkYXRhS2V5ID0gX2NvbHVtbiRwcm9wcy5kYXRhS2V5LFxuICAgICAgICBpZCA9IF9jb2x1bW4kcHJvcHMuaWQ7XG4gICAgICB2YXIgY2VsbERhdGEgPSBjZWxsRGF0YUdldHRlcih7XG4gICAgICAgIGNvbHVtbkRhdGE6IGNvbHVtbkRhdGEsXG4gICAgICAgIGRhdGFLZXk6IGRhdGFLZXksXG4gICAgICAgIHJvd0RhdGE6IHJvd0RhdGFcbiAgICAgIH0pO1xuICAgICAgdmFyIHJlbmRlcmVkQ2VsbCA9IGNlbGxSZW5kZXJlcih7XG4gICAgICAgIGNlbGxEYXRhOiBjZWxsRGF0YSxcbiAgICAgICAgY29sdW1uRGF0YTogY29sdW1uRGF0YSxcbiAgICAgICAgY29sdW1uSW5kZXg6IGNvbHVtbkluZGV4LFxuICAgICAgICBkYXRhS2V5OiBkYXRhS2V5LFxuICAgICAgICBpc1Njcm9sbGluZzogaXNTY3JvbGxpbmcsXG4gICAgICAgIHBhcmVudDogcGFyZW50LFxuICAgICAgICByb3dEYXRhOiByb3dEYXRhLFxuICAgICAgICByb3dJbmRleDogcm93SW5kZXhcbiAgICAgIH0pO1xuICAgICAgdmFyIG9uQ2xpY2sgPSBmdW5jdGlvbiBvbkNsaWNrKGV2ZW50KSB7XG4gICAgICAgIG9uQ29sdW1uQ2xpY2sgJiYgb25Db2x1bW5DbGljayh7XG4gICAgICAgICAgY29sdW1uRGF0YTogY29sdW1uRGF0YSxcbiAgICAgICAgICBkYXRhS2V5OiBkYXRhS2V5LFxuICAgICAgICAgIGV2ZW50OiBldmVudFxuICAgICAgICB9KTtcbiAgICAgIH07XG4gICAgICB2YXIgc3R5bGUgPSB0aGlzLl9jYWNoZWRDb2x1bW5TdHlsZXNbY29sdW1uSW5kZXhdO1xuICAgICAgdmFyIHRpdGxlID0gdHlwZW9mIHJlbmRlcmVkQ2VsbCA9PT0gJ3N0cmluZycgPyByZW5kZXJlZENlbGwgOiBudWxsO1xuXG4gICAgICAvLyBBdm9pZCB1c2luZyBvYmplY3Qtc3ByZWFkIHN5bnRheCB3aXRoIG11bHRpcGxlIG9iamVjdHMgaGVyZSxcbiAgICAgIC8vIFNpbmNlIGl0IHJlc3VsdHMgaW4gYW4gZXh0cmEgbWV0aG9kIGNhbGwgdG8gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9leHRlbmRzJ1xuICAgICAgLy8gU2VlIFBSIGh0dHBzOi8vZ2l0aHViLmNvbS9idmF1Z2huL3JlYWN0LXZpcnR1YWxpemVkL3B1bGwvOTQyXG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICBcImFyaWEtY29saW5kZXhcIjogY29sdW1uSW5kZXggKyAxLFxuICAgICAgICBcImFyaWEtZGVzY3JpYmVkYnlcIjogaWQsXG4gICAgICAgIGNsYXNzTmFtZTogY2xzeCgnUmVhY3RWaXJ0dWFsaXplZF9fVGFibGVfX3Jvd0NvbHVtbicsIGNsYXNzTmFtZSksXG4gICAgICAgIGtleTogJ1JvdycgKyByb3dJbmRleCArICctJyArICdDb2wnICsgY29sdW1uSW5kZXgsXG4gICAgICAgIG9uQ2xpY2s6IG9uQ2xpY2ssXG4gICAgICAgIHJvbGU6IFwiZ3JpZGNlbGxcIixcbiAgICAgICAgc3R5bGU6IHN0eWxlLFxuICAgICAgICB0aXRsZTogdGl0bGVcbiAgICAgIH0sIHJlbmRlcmVkQ2VsbCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIl9jcmVhdGVIZWFkZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2NyZWF0ZUhlYWRlcihfcmVmNSkge1xuICAgICAgdmFyIGNvbHVtbiA9IF9yZWY1LmNvbHVtbixcbiAgICAgICAgaW5kZXggPSBfcmVmNS5pbmRleDtcbiAgICAgIHZhciBfdGhpcyRwcm9wczIgPSB0aGlzLnByb3BzLFxuICAgICAgICBoZWFkZXJDbGFzc05hbWUgPSBfdGhpcyRwcm9wczIuaGVhZGVyQ2xhc3NOYW1lLFxuICAgICAgICBoZWFkZXJTdHlsZSA9IF90aGlzJHByb3BzMi5oZWFkZXJTdHlsZSxcbiAgICAgICAgb25IZWFkZXJDbGljayA9IF90aGlzJHByb3BzMi5vbkhlYWRlckNsaWNrLFxuICAgICAgICBzb3J0ID0gX3RoaXMkcHJvcHMyLnNvcnQsXG4gICAgICAgIHNvcnRCeSA9IF90aGlzJHByb3BzMi5zb3J0QnksXG4gICAgICAgIHNvcnREaXJlY3Rpb24gPSBfdGhpcyRwcm9wczIuc29ydERpcmVjdGlvbjtcbiAgICAgIHZhciBfY29sdW1uJHByb3BzMiA9IGNvbHVtbi5wcm9wcyxcbiAgICAgICAgY29sdW1uRGF0YSA9IF9jb2x1bW4kcHJvcHMyLmNvbHVtbkRhdGEsXG4gICAgICAgIGRhdGFLZXkgPSBfY29sdW1uJHByb3BzMi5kYXRhS2V5LFxuICAgICAgICBkZWZhdWx0U29ydERpcmVjdGlvbiA9IF9jb2x1bW4kcHJvcHMyLmRlZmF1bHRTb3J0RGlyZWN0aW9uLFxuICAgICAgICBkaXNhYmxlU29ydCA9IF9jb2x1bW4kcHJvcHMyLmRpc2FibGVTb3J0LFxuICAgICAgICBoZWFkZXJSZW5kZXJlciA9IF9jb2x1bW4kcHJvcHMyLmhlYWRlclJlbmRlcmVyLFxuICAgICAgICBpZCA9IF9jb2x1bW4kcHJvcHMyLmlkLFxuICAgICAgICBsYWJlbCA9IF9jb2x1bW4kcHJvcHMyLmxhYmVsO1xuICAgICAgdmFyIHNvcnRFbmFibGVkID0gIWRpc2FibGVTb3J0ICYmIHNvcnQ7XG4gICAgICB2YXIgY2xhc3NOYW1lcyA9IGNsc3goJ1JlYWN0VmlydHVhbGl6ZWRfX1RhYmxlX19oZWFkZXJDb2x1bW4nLCBoZWFkZXJDbGFzc05hbWUsIGNvbHVtbi5wcm9wcy5oZWFkZXJDbGFzc05hbWUsIHtcbiAgICAgICAgUmVhY3RWaXJ0dWFsaXplZF9fVGFibGVfX3NvcnRhYmxlSGVhZGVyQ29sdW1uOiBzb3J0RW5hYmxlZFxuICAgICAgfSk7XG4gICAgICB2YXIgc3R5bGUgPSB0aGlzLl9nZXRGbGV4U3R5bGVGb3JDb2x1bW4oY29sdW1uLCBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIGhlYWRlclN0eWxlKSwgY29sdW1uLnByb3BzLmhlYWRlclN0eWxlKSk7XG4gICAgICB2YXIgcmVuZGVyZWRIZWFkZXIgPSBoZWFkZXJSZW5kZXJlcih7XG4gICAgICAgIGNvbHVtbkRhdGE6IGNvbHVtbkRhdGEsXG4gICAgICAgIGRhdGFLZXk6IGRhdGFLZXksXG4gICAgICAgIGRpc2FibGVTb3J0OiBkaXNhYmxlU29ydCxcbiAgICAgICAgbGFiZWw6IGxhYmVsLFxuICAgICAgICBzb3J0Qnk6IHNvcnRCeSxcbiAgICAgICAgc29ydERpcmVjdGlvbjogc29ydERpcmVjdGlvblxuICAgICAgfSk7XG4gICAgICB2YXIgaGVhZGVyT25DbGljaywgaGVhZGVyT25LZXlEb3duLCBoZWFkZXJUYWJJbmRleCwgaGVhZGVyQXJpYVNvcnQsIGhlYWRlckFyaWFMYWJlbDtcbiAgICAgIGlmIChzb3J0RW5hYmxlZCB8fCBvbkhlYWRlckNsaWNrKSB7XG4gICAgICAgIC8vIElmIHRoaXMgaXMgYSBzb3J0YWJsZSBoZWFkZXIsIGNsaWNraW5nIGl0IHNob3VsZCB1cGRhdGUgdGhlIHRhYmxlIGRhdGEncyBzb3J0aW5nLlxuICAgICAgICB2YXIgaXNGaXJzdFRpbWVTb3J0ID0gc29ydEJ5ICE9PSBkYXRhS2V5O1xuXG4gICAgICAgIC8vIElmIHRoaXMgaXMgdGhlIGZpcnN0VGltZSBzb3J0IG9mIHRoaXMgY29sdW1uLCB1c2UgdGhlIGNvbHVtbiBkZWZhdWx0IHNvcnQgb3JkZXIuXG4gICAgICAgIC8vIE90aGVyd2lzZSwgaW52ZXJ0IHRoZSBkaXJlY3Rpb24gb2YgdGhlIHNvcnQuXG4gICAgICAgIHZhciBuZXdTb3J0RGlyZWN0aW9uID0gaXNGaXJzdFRpbWVTb3J0ID8gZGVmYXVsdFNvcnREaXJlY3Rpb24gOiBzb3J0RGlyZWN0aW9uID09PSBTb3J0RGlyZWN0aW9uLkRFU0MgPyBTb3J0RGlyZWN0aW9uLkFTQyA6IFNvcnREaXJlY3Rpb24uREVTQztcbiAgICAgICAgdmFyIG9uQ2xpY2sgPSBmdW5jdGlvbiBvbkNsaWNrKGV2ZW50KSB7XG4gICAgICAgICAgc29ydEVuYWJsZWQgJiYgc29ydCh7XG4gICAgICAgICAgICBkZWZhdWx0U29ydERpcmVjdGlvbjogZGVmYXVsdFNvcnREaXJlY3Rpb24sXG4gICAgICAgICAgICBldmVudDogZXZlbnQsXG4gICAgICAgICAgICBzb3J0Qnk6IGRhdGFLZXksXG4gICAgICAgICAgICBzb3J0RGlyZWN0aW9uOiBuZXdTb3J0RGlyZWN0aW9uXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgb25IZWFkZXJDbGljayAmJiBvbkhlYWRlckNsaWNrKHtcbiAgICAgICAgICAgIGNvbHVtbkRhdGE6IGNvbHVtbkRhdGEsXG4gICAgICAgICAgICBkYXRhS2V5OiBkYXRhS2V5LFxuICAgICAgICAgICAgZXZlbnQ6IGV2ZW50XG4gICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIHZhciBvbktleURvd24gPSBmdW5jdGlvbiBvbktleURvd24oZXZlbnQpIHtcbiAgICAgICAgICBpZiAoZXZlbnQua2V5ID09PSAnRW50ZXInIHx8IGV2ZW50LmtleSA9PT0gJyAnKSB7XG4gICAgICAgICAgICBvbkNsaWNrKGV2ZW50KTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIGhlYWRlckFyaWFMYWJlbCA9IGNvbHVtbi5wcm9wc1snYXJpYS1sYWJlbCddIHx8IGxhYmVsIHx8IGRhdGFLZXk7XG4gICAgICAgIGhlYWRlckFyaWFTb3J0ID0gJ25vbmUnO1xuICAgICAgICBoZWFkZXJUYWJJbmRleCA9IDA7XG4gICAgICAgIGhlYWRlck9uQ2xpY2sgPSBvbkNsaWNrO1xuICAgICAgICBoZWFkZXJPbktleURvd24gPSBvbktleURvd247XG4gICAgICB9XG4gICAgICBpZiAoc29ydEJ5ID09PSBkYXRhS2V5KSB7XG4gICAgICAgIGhlYWRlckFyaWFTb3J0ID0gc29ydERpcmVjdGlvbiA9PT0gU29ydERpcmVjdGlvbi5BU0MgPyAnYXNjZW5kaW5nJyA6ICdkZXNjZW5kaW5nJztcbiAgICAgIH1cblxuICAgICAgLy8gQXZvaWQgdXNpbmcgb2JqZWN0LXNwcmVhZCBzeW50YXggd2l0aCBtdWx0aXBsZSBvYmplY3RzIGhlcmUsXG4gICAgICAvLyBTaW5jZSBpdCByZXN1bHRzIGluIGFuIGV4dHJhIG1ldGhvZCBjYWxsIHRvICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvZXh0ZW5kcydcbiAgICAgIC8vIFNlZSBQUiBodHRwczovL2dpdGh1Yi5jb20vYnZhdWdobi9yZWFjdC12aXJ0dWFsaXplZC9wdWxsLzk0MlxuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgXCJhcmlhLWxhYmVsXCI6IGhlYWRlckFyaWFMYWJlbCxcbiAgICAgICAgXCJhcmlhLXNvcnRcIjogaGVhZGVyQXJpYVNvcnQsXG4gICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyxcbiAgICAgICAgaWQ6IGlkLFxuICAgICAgICBrZXk6ICdIZWFkZXItQ29sJyArIGluZGV4LFxuICAgICAgICBvbkNsaWNrOiBoZWFkZXJPbkNsaWNrLFxuICAgICAgICBvbktleURvd246IGhlYWRlck9uS2V5RG93bixcbiAgICAgICAgcm9sZTogXCJjb2x1bW5oZWFkZXJcIixcbiAgICAgICAgc3R5bGU6IHN0eWxlLFxuICAgICAgICB0YWJJbmRleDogaGVhZGVyVGFiSW5kZXhcbiAgICAgIH0sIHJlbmRlcmVkSGVhZGVyKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiX2NyZWF0ZVJvd1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfY3JlYXRlUm93KF9yZWY2KSB7XG4gICAgICB2YXIgX3RoaXMzID0gdGhpcztcbiAgICAgIHZhciBpbmRleCA9IF9yZWY2LnJvd0luZGV4LFxuICAgICAgICBpc1Njcm9sbGluZyA9IF9yZWY2LmlzU2Nyb2xsaW5nLFxuICAgICAgICBrZXkgPSBfcmVmNi5rZXksXG4gICAgICAgIHBhcmVudCA9IF9yZWY2LnBhcmVudCxcbiAgICAgICAgc3R5bGUgPSBfcmVmNi5zdHlsZTtcbiAgICAgIHZhciBfdGhpcyRwcm9wczMgPSB0aGlzLnByb3BzLFxuICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzMy5jaGlsZHJlbixcbiAgICAgICAgb25Sb3dDbGljayA9IF90aGlzJHByb3BzMy5vblJvd0NsaWNrLFxuICAgICAgICBvblJvd0RvdWJsZUNsaWNrID0gX3RoaXMkcHJvcHMzLm9uUm93RG91YmxlQ2xpY2ssXG4gICAgICAgIG9uUm93UmlnaHRDbGljayA9IF90aGlzJHByb3BzMy5vblJvd1JpZ2h0Q2xpY2ssXG4gICAgICAgIG9uUm93TW91c2VPdmVyID0gX3RoaXMkcHJvcHMzLm9uUm93TW91c2VPdmVyLFxuICAgICAgICBvblJvd01vdXNlT3V0ID0gX3RoaXMkcHJvcHMzLm9uUm93TW91c2VPdXQsXG4gICAgICAgIHJvd0NsYXNzTmFtZSA9IF90aGlzJHByb3BzMy5yb3dDbGFzc05hbWUsXG4gICAgICAgIHJvd0dldHRlciA9IF90aGlzJHByb3BzMy5yb3dHZXR0ZXIsXG4gICAgICAgIHJvd1JlbmRlcmVyID0gX3RoaXMkcHJvcHMzLnJvd1JlbmRlcmVyLFxuICAgICAgICByb3dTdHlsZSA9IF90aGlzJHByb3BzMy5yb3dTdHlsZTtcbiAgICAgIHZhciBzY3JvbGxiYXJXaWR0aCA9IHRoaXMuc3RhdGUuc2Nyb2xsYmFyV2lkdGg7XG4gICAgICB2YXIgcm93Q2xhc3MgPSB0eXBlb2Ygcm93Q2xhc3NOYW1lID09PSAnZnVuY3Rpb24nID8gcm93Q2xhc3NOYW1lKHtcbiAgICAgICAgaW5kZXg6IGluZGV4XG4gICAgICB9KSA6IHJvd0NsYXNzTmFtZTtcbiAgICAgIHZhciByb3dTdHlsZU9iamVjdCA9IHR5cGVvZiByb3dTdHlsZSA9PT0gJ2Z1bmN0aW9uJyA/IHJvd1N0eWxlKHtcbiAgICAgICAgaW5kZXg6IGluZGV4XG4gICAgICB9KSA6IHJvd1N0eWxlO1xuICAgICAgdmFyIHJvd0RhdGEgPSByb3dHZXR0ZXIoe1xuICAgICAgICBpbmRleDogaW5kZXhcbiAgICAgIH0pO1xuICAgICAgdmFyIGNvbHVtbnMgPSBSZWFjdC5DaGlsZHJlbi50b0FycmF5KGNoaWxkcmVuKS5tYXAoZnVuY3Rpb24gKGNvbHVtbiwgY29sdW1uSW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzMy5fY3JlYXRlQ29sdW1uKHtcbiAgICAgICAgICBjb2x1bW46IGNvbHVtbixcbiAgICAgICAgICBjb2x1bW5JbmRleDogY29sdW1uSW5kZXgsXG4gICAgICAgICAgaXNTY3JvbGxpbmc6IGlzU2Nyb2xsaW5nLFxuICAgICAgICAgIHBhcmVudDogcGFyZW50LFxuICAgICAgICAgIHJvd0RhdGE6IHJvd0RhdGEsXG4gICAgICAgICAgcm93SW5kZXg6IGluZGV4LFxuICAgICAgICAgIHNjcm9sbGJhcldpZHRoOiBzY3JvbGxiYXJXaWR0aFxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgICAgdmFyIGNsYXNzTmFtZSA9IGNsc3goJ1JlYWN0VmlydHVhbGl6ZWRfX1RhYmxlX19yb3cnLCByb3dDbGFzcyk7XG4gICAgICB2YXIgZmxhdHRlbmVkU3R5bGUgPSBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIHN0eWxlKSwge30sIHtcbiAgICAgICAgaGVpZ2h0OiB0aGlzLl9nZXRSb3dIZWlnaHQoaW5kZXgpLFxuICAgICAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gICAgICAgIHBhZGRpbmdSaWdodDogc2Nyb2xsYmFyV2lkdGhcbiAgICAgIH0sIHJvd1N0eWxlT2JqZWN0KTtcbiAgICAgIHJldHVybiByb3dSZW5kZXJlcih7XG4gICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lLFxuICAgICAgICBjb2x1bW5zOiBjb2x1bW5zLFxuICAgICAgICBpbmRleDogaW5kZXgsXG4gICAgICAgIGlzU2Nyb2xsaW5nOiBpc1Njcm9sbGluZyxcbiAgICAgICAga2V5OiBrZXksXG4gICAgICAgIG9uUm93Q2xpY2s6IG9uUm93Q2xpY2ssXG4gICAgICAgIG9uUm93RG91YmxlQ2xpY2s6IG9uUm93RG91YmxlQ2xpY2ssXG4gICAgICAgIG9uUm93UmlnaHRDbGljazogb25Sb3dSaWdodENsaWNrLFxuICAgICAgICBvblJvd01vdXNlT3Zlcjogb25Sb3dNb3VzZU92ZXIsXG4gICAgICAgIG9uUm93TW91c2VPdXQ6IG9uUm93TW91c2VPdXQsXG4gICAgICAgIHJvd0RhdGE6IHJvd0RhdGEsXG4gICAgICAgIHN0eWxlOiBmbGF0dGVuZWRTdHlsZVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGV0ZXJtaW5lcyB0aGUgZmxleC1zaHJpbmssIGZsZXgtZ3JvdywgYW5kIHdpZHRoIHZhbHVlcyBmb3IgYSBjZWxsIChoZWFkZXIgb3IgY29sdW1uKS5cbiAgICAgKi9cbiAgfSwge1xuICAgIGtleTogXCJfZ2V0RmxleFN0eWxlRm9yQ29sdW1uXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9nZXRGbGV4U3R5bGVGb3JDb2x1bW4oY29sdW1uKSB7XG4gICAgICB2YXIgY3VzdG9tU3R5bGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICAgICAgdmFyIGZsZXhWYWx1ZSA9IFwiXCIuY29uY2F0KGNvbHVtbi5wcm9wcy5mbGV4R3JvdywgXCIgXCIpLmNvbmNhdChjb2x1bW4ucHJvcHMuZmxleFNocmluaywgXCIgXCIpLmNvbmNhdChjb2x1bW4ucHJvcHMud2lkdGgsIFwicHhcIik7XG4gICAgICB2YXIgc3R5bGUgPSBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIGN1c3RvbVN0eWxlKSwge30sIHtcbiAgICAgICAgZmxleDogZmxleFZhbHVlLFxuICAgICAgICBtc0ZsZXg6IGZsZXhWYWx1ZSxcbiAgICAgICAgV2Via2l0RmxleDogZmxleFZhbHVlXG4gICAgICB9KTtcbiAgICAgIGlmIChjb2x1bW4ucHJvcHMubWF4V2lkdGgpIHtcbiAgICAgICAgc3R5bGUubWF4V2lkdGggPSBjb2x1bW4ucHJvcHMubWF4V2lkdGg7XG4gICAgICB9XG4gICAgICBpZiAoY29sdW1uLnByb3BzLm1pbldpZHRoKSB7XG4gICAgICAgIHN0eWxlLm1pbldpZHRoID0gY29sdW1uLnByb3BzLm1pbldpZHRoO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHN0eWxlO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJfZ2V0SGVhZGVyQ29sdW1uc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZ2V0SGVhZGVyQ29sdW1ucygpIHtcbiAgICAgIHZhciBfdGhpczQgPSB0aGlzO1xuICAgICAgdmFyIF90aGlzJHByb3BzNCA9IHRoaXMucHJvcHMsXG4gICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHM0LmNoaWxkcmVuLFxuICAgICAgICBkaXNhYmxlSGVhZGVyID0gX3RoaXMkcHJvcHM0LmRpc2FibGVIZWFkZXI7XG4gICAgICB2YXIgaXRlbXMgPSBkaXNhYmxlSGVhZGVyID8gW10gOiBSZWFjdC5DaGlsZHJlbi50b0FycmF5KGNoaWxkcmVuKTtcbiAgICAgIHJldHVybiBpdGVtcy5tYXAoZnVuY3Rpb24gKGNvbHVtbiwgaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzNC5fY3JlYXRlSGVhZGVyKHtcbiAgICAgICAgICBjb2x1bW46IGNvbHVtbixcbiAgICAgICAgICBpbmRleDogaW5kZXhcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiX2dldFJvd0hlaWdodFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZ2V0Um93SGVpZ2h0KHJvd0luZGV4KSB7XG4gICAgICB2YXIgcm93SGVpZ2h0ID0gdGhpcy5wcm9wcy5yb3dIZWlnaHQ7XG4gICAgICByZXR1cm4gdHlwZW9mIHJvd0hlaWdodCA9PT0gJ2Z1bmN0aW9uJyA/IHJvd0hlaWdodCh7XG4gICAgICAgIGluZGV4OiByb3dJbmRleFxuICAgICAgfSkgOiByb3dIZWlnaHQ7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIl9vblNjcm9sbFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfb25TY3JvbGwoX3JlZjcpIHtcbiAgICAgIHZhciBjbGllbnRIZWlnaHQgPSBfcmVmNy5jbGllbnRIZWlnaHQsXG4gICAgICAgIHNjcm9sbEhlaWdodCA9IF9yZWY3LnNjcm9sbEhlaWdodCxcbiAgICAgICAgc2Nyb2xsVG9wID0gX3JlZjcuc2Nyb2xsVG9wO1xuICAgICAgdmFyIG9uU2Nyb2xsID0gdGhpcy5wcm9wcy5vblNjcm9sbDtcbiAgICAgIG9uU2Nyb2xsKHtcbiAgICAgICAgY2xpZW50SGVpZ2h0OiBjbGllbnRIZWlnaHQsXG4gICAgICAgIHNjcm9sbEhlaWdodDogc2Nyb2xsSGVpZ2h0LFxuICAgICAgICBzY3JvbGxUb3A6IHNjcm9sbFRvcFxuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIl9vblNlY3Rpb25SZW5kZXJlZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfb25TZWN0aW9uUmVuZGVyZWQoX3JlZjgpIHtcbiAgICAgIHZhciByb3dPdmVyc2NhblN0YXJ0SW5kZXggPSBfcmVmOC5yb3dPdmVyc2NhblN0YXJ0SW5kZXgsXG4gICAgICAgIHJvd092ZXJzY2FuU3RvcEluZGV4ID0gX3JlZjgucm93T3ZlcnNjYW5TdG9wSW5kZXgsXG4gICAgICAgIHJvd1N0YXJ0SW5kZXggPSBfcmVmOC5yb3dTdGFydEluZGV4LFxuICAgICAgICByb3dTdG9wSW5kZXggPSBfcmVmOC5yb3dTdG9wSW5kZXg7XG4gICAgICB2YXIgb25Sb3dzUmVuZGVyZWQgPSB0aGlzLnByb3BzLm9uUm93c1JlbmRlcmVkO1xuICAgICAgb25Sb3dzUmVuZGVyZWQoe1xuICAgICAgICBvdmVyc2NhblN0YXJ0SW5kZXg6IHJvd092ZXJzY2FuU3RhcnRJbmRleCxcbiAgICAgICAgb3ZlcnNjYW5TdG9wSW5kZXg6IHJvd092ZXJzY2FuU3RvcEluZGV4LFxuICAgICAgICBzdGFydEluZGV4OiByb3dTdGFydEluZGV4LFxuICAgICAgICBzdG9wSW5kZXg6IHJvd1N0b3BJbmRleFxuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIl9zZXRSZWZcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3NldFJlZihyZWYpIHtcbiAgICAgIHRoaXMuR3JpZCA9IHJlZjtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiX3NldEdyaWRFbGVtZW50UmVmXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9zZXRHcmlkRWxlbWVudFJlZihyZWYpIHtcbiAgICAgIHRoaXMuR3JpZEVsZW1lbnQgPSByZWY7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIl9zZXRTY3JvbGxiYXJXaWR0aFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfc2V0U2Nyb2xsYmFyV2lkdGgoKSB7XG4gICAgICB2YXIgc2Nyb2xsYmFyV2lkdGggPSB0aGlzLmdldFNjcm9sbGJhcldpZHRoKCk7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgc2Nyb2xsYmFyV2lkdGg6IHNjcm9sbGJhcldpZHRoXG4gICAgICB9KTtcbiAgICB9XG4gIH1dKTtcbn0oUmVhY3QuUHVyZUNvbXBvbmVudCk7XG5fZGVmaW5lUHJvcGVydHkoVGFibGUsIFwiZGVmYXVsdFByb3BzXCIsIHtcbiAgZGlzYWJsZUhlYWRlcjogZmFsc2UsXG4gIGVzdGltYXRlZFJvd1NpemU6IDMwLFxuICBoZWFkZXJIZWlnaHQ6IDAsXG4gIGhlYWRlclN0eWxlOiB7fSxcbiAgbm9Sb3dzUmVuZGVyZXI6IGZ1bmN0aW9uIG5vUm93c1JlbmRlcmVyKCkge1xuICAgIHJldHVybiBudWxsO1xuICB9LFxuICBvblJvd3NSZW5kZXJlZDogZnVuY3Rpb24gb25Sb3dzUmVuZGVyZWQoKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH0sXG4gIG9uU2Nyb2xsOiBmdW5jdGlvbiBvblNjcm9sbCgpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfSxcbiAgb3ZlcnNjYW5JbmRpY2VzR2V0dGVyOiBhY2Nlc3NpYmlsaXR5T3ZlcnNjYW5JbmRpY2VzR2V0dGVyLFxuICBvdmVyc2NhblJvd0NvdW50OiAxMCxcbiAgcm93UmVuZGVyZXI6IGRlZmF1bHRSb3dSZW5kZXJlcixcbiAgaGVhZGVyUm93UmVuZGVyZXI6IGRlZmF1bHRIZWFkZXJSb3dSZW5kZXJlcixcbiAgcm93U3R5bGU6IHt9LFxuICBzY3JvbGxUb0FsaWdubWVudDogJ2F1dG8nLFxuICBzY3JvbGxUb0luZGV4OiAtMSxcbiAgc3R5bGU6IHt9XG59KTtcbmV4cG9ydCB7IFRhYmxlIGFzIGRlZmF1bHQgfTtcblRhYmxlLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqIFRoaXMgaXMganVzdCBzZXQgb24gdGhlIGdyaWQgdG9wIGVsZW1lbnQuICovXG4gICdhcmlhLWxhYmVsJzogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqIFRoaXMgaXMganVzdCBzZXQgb24gdGhlIGdyaWQgdG9wIGVsZW1lbnQuICovXG4gICdhcmlhLWxhYmVsbGVkYnknOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogUmVtb3ZlcyBmaXhlZCBoZWlnaHQgZnJvbSB0aGUgc2Nyb2xsaW5nQ29udGFpbmVyIHNvIHRoYXQgdGhlIHRvdGFsIGhlaWdodFxuICAgKiBvZiByb3dzIGNhbiBzdHJldGNoIHRoZSB3aW5kb3cuIEludGVuZGVkIGZvciB1c2Ugd2l0aCBXaW5kb3dTY3JvbGxlclxuICAgKi9cbiAgYXV0b0hlaWdodDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKiBPbmUgb3IgbW9yZSBDb2x1bW5zIGRlc2NyaWJpbmcgdGhlIGRhdGEgZGlzcGxheWVkIGluIHRoaXMgcm93ICovXG4gIGNoaWxkcmVuOiBmdW5jdGlvbiBjaGlsZHJlbihwcm9wcykge1xuICAgIHZhciBjaGlsZHJlbiA9IFJlYWN0LkNoaWxkcmVuLnRvQXJyYXkocHJvcHMuY2hpbGRyZW4pO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBjaGlsZFR5cGUgPSBjaGlsZHJlbltpXS50eXBlO1xuICAgICAgaWYgKGNoaWxkVHlwZSAhPT0gQ29sdW1uICYmICEoY2hpbGRUeXBlLnByb3RvdHlwZSBpbnN0YW5jZW9mIENvbHVtbikpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBFcnJvcignVGFibGUgb25seSBhY2NlcHRzIGNoaWxkcmVuIG9mIHR5cGUgQ29sdW1uJyk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuICAvKiogT3B0aW9uYWwgQ1NTIGNsYXNzIG5hbWUgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKiogRGlzYWJsZSByZW5kZXJpbmcgdGhlIGhlYWRlciBhdCBhbGwgKi9cbiAgZGlzYWJsZUhlYWRlcjogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBVc2VkIHRvIGVzdGltYXRlIHRoZSB0b3RhbCBoZWlnaHQgb2YgYSBUYWJsZSBiZWZvcmUgYWxsIG9mIGl0cyByb3dzIGhhdmUgYWN0dWFsbHkgYmVlbiBtZWFzdXJlZC5cbiAgICogVGhlIGVzdGltYXRlZCB0b3RhbCBoZWlnaHQgaXMgYWRqdXN0ZWQgYXMgcm93cyBhcmUgcmVuZGVyZWQuXG4gICAqL1xuICBlc3RpbWF0ZWRSb3dTaXplOiBQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWQsXG4gIC8qKiBPcHRpb25hbCBjdXN0b20gQ1NTIGNsYXNzIG5hbWUgdG8gYXR0YWNoIHRvIGlubmVyIEdyaWQgZWxlbWVudC4gKi9cbiAgZ3JpZENsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqIE9wdGlvbmFsIGlubGluZSBzdHlsZSB0byBhdHRhY2ggdG8gaW5uZXIgR3JpZCBlbGVtZW50LiAqL1xuICBncmlkU3R5bGU6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKiBPcHRpb25hbCBDU1MgY2xhc3MgdG8gYXBwbHkgdG8gYWxsIGNvbHVtbiBoZWFkZXJzICovXG4gIGhlYWRlckNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqIEZpeGVkIGhlaWdodCBvZiBoZWFkZXIgcm93ICovXG4gIGhlYWRlckhlaWdodDogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkLFxuICAvKipcbiAgICogUmVzcG9uc2libGUgZm9yIHJlbmRlcmluZyBhIHRhYmxlIHJvdyBnaXZlbiBhbiBhcnJheSBvZiBjb2x1bW5zOlxuICAgKiBTaG91bGQgaW1wbGVtZW50IHRoZSBmb2xsb3dpbmcgaW50ZXJmYWNlOiAoe1xuICAgKiAgIGNsYXNzTmFtZTogc3RyaW5nLFxuICAgKiAgIGNvbHVtbnM6IGFueVtdLFxuICAgKiAgIHN0eWxlOiBhbnlcbiAgICogfSk6IFByb3BUeXBlcy5ub2RlXG4gICAqL1xuICBoZWFkZXJSb3dSZW5kZXJlcjogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKiBPcHRpb25hbCBjdXN0b20gaW5saW5lIHN0eWxlIHRvIGF0dGFjaCB0byB0YWJsZSBoZWFkZXIgY29sdW1ucy4gKi9cbiAgaGVhZGVyU3R5bGU6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKiBGaXhlZC9hdmFpbGFibGUgaGVpZ2h0IGZvciBvdXQgRE9NIGVsZW1lbnQgKi9cbiAgaGVpZ2h0OiBQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWQsXG4gIC8qKiBPcHRpb25hbCBpZCAqL1xuICBpZDogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqIE9wdGlvbmFsIHJlbmRlcmVyIHRvIGJlIHVzZWQgaW4gcGxhY2Ugb2YgdGFibGUgYm9keSByb3dzIHdoZW4gcm93Q291bnQgaXMgMCAqL1xuICBub1Jvd3NSZW5kZXJlcjogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBPcHRpb25hbCBjYWxsYmFjayB3aGVuIGEgY29sdW1uIGlzIGNsaWNrZWQuXG4gICAqICh7IGNvbHVtbkRhdGE6IGFueSwgZGF0YUtleTogc3RyaW5nIH0pOiB2b2lkXG4gICAqL1xuICBvbkNvbHVtbkNsaWNrOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIE9wdGlvbmFsIGNhbGxiYWNrIHdoZW4gYSBjb2x1bW4ncyBoZWFkZXIgaXMgY2xpY2tlZC5cbiAgICogKHsgY29sdW1uRGF0YTogYW55LCBkYXRhS2V5OiBzdHJpbmcgfSk6IHZvaWRcbiAgICovXG4gIG9uSGVhZGVyQ2xpY2s6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogQ2FsbGJhY2sgaW52b2tlZCB3aGVuIGEgdXNlciBjbGlja3Mgb24gYSB0YWJsZSByb3cuXG4gICAqICh7IGluZGV4OiBudW1iZXIgfSk6IHZvaWRcbiAgICovXG4gIG9uUm93Q2xpY2s6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogQ2FsbGJhY2sgaW52b2tlZCB3aGVuIGEgdXNlciBkb3VibGUtY2xpY2tzIG9uIGEgdGFibGUgcm93LlxuICAgKiAoeyBpbmRleDogbnVtYmVyIH0pOiB2b2lkXG4gICAqL1xuICBvblJvd0RvdWJsZUNsaWNrOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIENhbGxiYWNrIGludm9rZWQgd2hlbiB0aGUgbW91c2UgbGVhdmVzIGEgdGFibGUgcm93LlxuICAgKiAoeyBpbmRleDogbnVtYmVyIH0pOiB2b2lkXG4gICAqL1xuICBvblJvd01vdXNlT3V0OiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIENhbGxiYWNrIGludm9rZWQgd2hlbiBhIHVzZXIgbW92ZXMgdGhlIG1vdXNlIG92ZXIgYSB0YWJsZSByb3cuXG4gICAqICh7IGluZGV4OiBudW1iZXIgfSk6IHZvaWRcbiAgICovXG4gIG9uUm93TW91c2VPdmVyOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIENhbGxiYWNrIGludm9rZWQgd2hlbiBhIHVzZXIgcmlnaHQtY2xpY2tzIG9uIGEgdGFibGUgcm93LlxuICAgKiAoeyBpbmRleDogbnVtYmVyIH0pOiB2b2lkXG4gICAqL1xuICBvblJvd1JpZ2h0Q2xpY2s6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogQ2FsbGJhY2sgaW52b2tlZCB3aXRoIGluZm9ybWF0aW9uIGFib3V0IHRoZSBzbGljZSBvZiByb3dzIHRoYXQgd2VyZSBqdXN0IHJlbmRlcmVkLlxuICAgKiAoeyBzdGFydEluZGV4LCBzdG9wSW5kZXggfSk6IHZvaWRcbiAgICovXG4gIG9uUm93c1JlbmRlcmVkOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIENhbGxiYWNrIGludm9rZWQgd2hlbmV2ZXIgdGhlIHNjcm9sbCBvZmZzZXQgY2hhbmdlcyB3aXRoaW4gdGhlIGlubmVyIHNjcm9sbGFibGUgcmVnaW9uLlxuICAgKiBUaGlzIGNhbGxiYWNrIGNhbiBiZSB1c2VkIHRvIHN5bmMgc2Nyb2xsaW5nIGJldHdlZW4gbGlzdHMsIHRhYmxlcywgb3IgZ3JpZHMuXG4gICAqICh7IGNsaWVudEhlaWdodCwgc2Nyb2xsSGVpZ2h0LCBzY3JvbGxUb3AgfSk6IHZvaWRcbiAgICovXG4gIG9uU2Nyb2xsOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAvKiogU2VlIEdyaWQjb3ZlcnNjYW5JbmRpY2VzR2V0dGVyICovXG4gIG92ZXJzY2FuSW5kaWNlc0dldHRlcjogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgLyoqXG4gICAqIE51bWJlciBvZiByb3dzIHRvIHJlbmRlciBhYm92ZS9iZWxvdyB0aGUgdmlzaWJsZSBib3VuZHMgb2YgdGhlIGxpc3QuXG4gICAqIFRoZXNlIHJvd3MgY2FuIGhlbHAgZm9yIHNtb290aGVyIHNjcm9sbGluZyBvbiB0b3VjaCBkZXZpY2VzLlxuICAgKi9cbiAgb3ZlcnNjYW5Sb3dDb3VudDogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkLFxuICAvKipcbiAgICogT3B0aW9uYWwgQ1NTIGNsYXNzIHRvIGFwcGx5IHRvIGFsbCB0YWJsZSByb3dzIChpbmNsdWRpbmcgdGhlIGhlYWRlciByb3cpLlxuICAgKiBUaGlzIHByb3BlcnR5IGNhbiBiZSBhIENTUyBjbGFzcyBuYW1lIChzdHJpbmcpIG9yIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGEgY2xhc3MgbmFtZS5cbiAgICogSWYgYSBmdW5jdGlvbiBpcyBwcm92aWRlZCBpdHMgc2lnbmF0dXJlIHNob3VsZCBiZTogKHsgaW5kZXg6IG51bWJlciB9KTogc3RyaW5nXG4gICAqL1xuICByb3dDbGFzc05hbWU6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5mdW5jXSksXG4gIC8qKlxuICAgKiBDYWxsYmFjayByZXNwb25zaWJsZSBmb3IgcmV0dXJuaW5nIGEgZGF0YSByb3cgZ2l2ZW4gYW4gaW5kZXguXG4gICAqICh7IGluZGV4OiBudW1iZXIgfSk6IGFueVxuICAgKi9cbiAgcm93R2V0dGVyOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAvKipcbiAgICogRWl0aGVyIGEgZml4ZWQgcm93IGhlaWdodCAobnVtYmVyKSBvciBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgaGVpZ2h0IG9mIGEgcm93IGdpdmVuIGl0cyBpbmRleC5cbiAgICogKHsgaW5kZXg6IG51bWJlciB9KTogbnVtYmVyXG4gICAqL1xuICByb3dIZWlnaHQ6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5mdW5jXSkuaXNSZXF1aXJlZCxcbiAgLyoqIE51bWJlciBvZiByb3dzIGluIHRhYmxlLiAqL1xuICByb3dDb3VudDogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkLFxuICAvKipcbiAgICogUmVzcG9uc2libGUgZm9yIHJlbmRlcmluZyBhIHRhYmxlIHJvdyBnaXZlbiBhbiBhcnJheSBvZiBjb2x1bW5zOlxuICAgKiBTaG91bGQgaW1wbGVtZW50IHRoZSBmb2xsb3dpbmcgaW50ZXJmYWNlOiAoe1xuICAgKiAgIGNsYXNzTmFtZTogc3RyaW5nLFxuICAgKiAgIGNvbHVtbnM6IEFycmF5LFxuICAgKiAgIGluZGV4OiBudW1iZXIsXG4gICAqICAgaXNTY3JvbGxpbmc6IGJvb2xlYW4sXG4gICAqICAgb25Sb3dDbGljazogP0Z1bmN0aW9uLFxuICAgKiAgIG9uUm93RG91YmxlQ2xpY2s6ID9GdW5jdGlvbixcbiAgICogICBvblJvd01vdXNlT3ZlcjogP0Z1bmN0aW9uLFxuICAgKiAgIG9uUm93TW91c2VPdXQ6ID9GdW5jdGlvbixcbiAgICogICByb3dEYXRhOiBhbnksXG4gICAqICAgc3R5bGU6IGFueVxuICAgKiB9KTogUHJvcFR5cGVzLm5vZGVcbiAgICovXG4gIHJvd1JlbmRlcmVyOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqIE9wdGlvbmFsIGN1c3RvbSBpbmxpbmUgc3R5bGUgdG8gYXR0YWNoIHRvIHRhYmxlIHJvd3MuICovXG4gIHJvd1N0eWxlOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuZnVuY10pLmlzUmVxdWlyZWQsXG4gIC8qKiBTZWUgR3JpZCNzY3JvbGxUb0FsaWdubWVudCAqL1xuICBzY3JvbGxUb0FsaWdubWVudDogUHJvcFR5cGVzLm9uZU9mKFsnYXV0bycsICdlbmQnLCAnc3RhcnQnLCAnY2VudGVyJ10pLmlzUmVxdWlyZWQsXG4gIC8qKiBSb3cgaW5kZXggdG8gZW5zdXJlIHZpc2libGUgKGJ5IGZvcmNlZnVsbHkgc2Nyb2xsaW5nIGlmIG5lY2Vzc2FyeSkgKi9cbiAgc2Nyb2xsVG9JbmRleDogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkLFxuICAvKiogVmVydGljYWwgb2Zmc2V0LiAqL1xuICBzY3JvbGxUb3A6IFByb3BUeXBlcy5udW1iZXIsXG4gIC8qKlxuICAgKiBTb3J0IGZ1bmN0aW9uIHRvIGJlIGNhbGxlZCBpZiBhIHNvcnRhYmxlIGhlYWRlciBpcyBjbGlja2VkLlxuICAgKiBTaG91bGQgaW1wbGVtZW50IHRoZSBmb2xsb3dpbmcgaW50ZXJmYWNlOiAoe1xuICAgKiAgIGRlZmF1bHRTb3J0RGlyZWN0aW9uOiAnQVNDJyB8ICdERVNDJyxcbiAgICogICBldmVudDogTW91c2VFdmVudCxcbiAgICogICBzb3J0Qnk6IHN0cmluZyxcbiAgICogICBzb3J0RGlyZWN0aW9uOiBTb3J0RGlyZWN0aW9uXG4gICAqIH0pOiB2b2lkXG4gICAqL1xuICBzb3J0OiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqIFRhYmxlIGRhdGEgaXMgY3VycmVudGx5IHNvcnRlZCBieSB0aGlzIDpkYXRhS2V5IChpZiBpdCBpcyBzb3J0ZWQgYXQgYWxsKSAqL1xuICBzb3J0Qnk6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKiBUYWJsZSBkYXRhIGlzIGN1cnJlbnRseSBzb3J0ZWQgaW4gdGhpcyBkaXJlY3Rpb24gKGlmIGl0IGlzIHNvcnRlZCBhdCBhbGwpICovXG4gIHNvcnREaXJlY3Rpb246IFByb3BUeXBlcy5vbmVPZihbU29ydERpcmVjdGlvbi5BU0MsIFNvcnREaXJlY3Rpb24uREVTQ10pLFxuICAvKiogT3B0aW9uYWwgaW5saW5lIHN0eWxlICovXG4gIHN0eWxlOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKiogVGFiIGluZGV4IGZvciBmb2N1cyAqL1xuICB0YWJJbmRleDogUHJvcFR5cGVzLm51bWJlcixcbiAgLyoqIFdpZHRoIG9mIGxpc3QgKi9cbiAgd2lkdGg6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZFxufSA6IHt9OyIsIi8qOjogaW1wb3J0IHR5cGUge0NlbGxEYXRhR2V0dGVyUGFyYW1zfSBmcm9tICcuL3R5cGVzJzsqL1xuLyoqXG4gKiBEZWZhdWx0IGFjY2Vzc29yIGZvciByZXR1cm5pbmcgYSBjZWxsIHZhbHVlIGZvciBhIGdpdmVuIGF0dHJpYnV0ZS5cbiAqIFRoaXMgZnVuY3Rpb24gZXhwZWN0cyB0byBvcGVyYXRlIG9uIGVpdGhlciBhIHZhbmlsbGEgT2JqZWN0IG9yIGFuIEltbXV0YWJsZSBNYXAuXG4gKiBZb3Ugc2hvdWxkIG92ZXJyaWRlIHRoZSBjb2x1bW4ncyBjZWxsRGF0YUdldHRlciBpZiB5b3VyIGRhdGEgaXMgc29tZSBvdGhlciB0eXBlIG9mIG9iamVjdC5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGVmYXVsdENlbGxEYXRhR2V0dGVyKF9yZWYgLyo6OiAqLykge1xuICB2YXIgZGF0YUtleSA9IF9yZWYgLyo6OiAqLy5kYXRhS2V5LFxuICAgIHJvd0RhdGEgPSBfcmVmIC8qOjogKi8ucm93RGF0YTtcbiAgaWYgKHR5cGVvZiByb3dEYXRhLmdldCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiByb3dEYXRhLmdldChkYXRhS2V5KTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gcm93RGF0YVtkYXRhS2V5XTtcbiAgfVxufSIsIi8qOjogaW1wb3J0IHR5cGUge0NlbGxSZW5kZXJlclBhcmFtc30gZnJvbSAnLi90eXBlcyc7Ki9cbi8qKlxuICogRGVmYXVsdCBjZWxsIHJlbmRlcmVyIHRoYXQgZGlzcGxheXMgYW4gYXR0cmlidXRlIGFzIGEgc2ltcGxlIHN0cmluZ1xuICogWW91IHNob3VsZCBvdmVycmlkZSB0aGUgY29sdW1uJ3MgY2VsbFJlbmRlcmVyIGlmIHlvdXIgZGF0YSBpcyBzb21lIG90aGVyIHR5cGUgb2Ygb2JqZWN0LlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkZWZhdWx0Q2VsbFJlbmRlcmVyKF9yZWYgLyo6OiAqLykgLyo6IHN0cmluZyove1xuICB2YXIgY2VsbERhdGEgPSBfcmVmIC8qOjogKi8uY2VsbERhdGE7XG4gIGlmIChjZWxsRGF0YSA9PSBudWxsKSB7XG4gICAgcmV0dXJuICcnO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBTdHJpbmcoY2VsbERhdGEpO1xuICB9XG59IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFNvcnRJbmRpY2F0b3IgZnJvbSAnLi9Tb3J0SW5kaWNhdG9yJztcbi8qOjogaW1wb3J0IHR5cGUge0hlYWRlclJlbmRlcmVyUGFyYW1zfSBmcm9tICcuL3R5cGVzJzsqL1xuLyoqXG4gKiBEZWZhdWx0IHRhYmxlIGhlYWRlciByZW5kZXJlci5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGVmYXVsdEhlYWRlclJlbmRlcmVyKF9yZWYgLyo6OiAqLykge1xuICB2YXIgZGF0YUtleSA9IF9yZWYgLyo6OiAqLy5kYXRhS2V5LFxuICAgIGxhYmVsID0gX3JlZiAvKjo6ICovLmxhYmVsLFxuICAgIHNvcnRCeSA9IF9yZWYgLyo6OiAqLy5zb3J0QnksXG4gICAgc29ydERpcmVjdGlvbiA9IF9yZWYgLyo6OiAqLy5zb3J0RGlyZWN0aW9uO1xuICB2YXIgc2hvd1NvcnRJbmRpY2F0b3IgPSBzb3J0QnkgPT09IGRhdGFLZXk7XG4gIHZhciBjaGlsZHJlbiA9IFsvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xuICAgIGNsYXNzTmFtZTogXCJSZWFjdFZpcnR1YWxpemVkX19UYWJsZV9faGVhZGVyVHJ1bmNhdGVkVGV4dFwiLFxuICAgIGtleTogXCJsYWJlbFwiLFxuICAgIHRpdGxlOiB0eXBlb2YgbGFiZWwgPT09ICdzdHJpbmcnID8gbGFiZWwgOiBudWxsXG4gIH0sIGxhYmVsKV07XG4gIGlmIChzaG93U29ydEluZGljYXRvcikge1xuICAgIGNoaWxkcmVuLnB1c2goLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoU29ydEluZGljYXRvciwge1xuICAgICAga2V5OiBcIlNvcnRJbmRpY2F0b3JcIixcbiAgICAgIHNvcnREaXJlY3Rpb246IHNvcnREaXJlY3Rpb25cbiAgICB9KSk7XG4gIH1cbiAgcmV0dXJuIGNoaWxkcmVuO1xufSIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG4vKjo6IGltcG9ydCB0eXBlIHtSb3dSZW5kZXJlclBhcmFtc30gZnJvbSAnLi90eXBlcyc7Ki9cbi8qKlxuICogRGVmYXVsdCByb3cgcmVuZGVyZXIgZm9yIFRhYmxlLlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkZWZhdWx0Um93UmVuZGVyZXIoX3JlZiAvKjo6ICovKSB7XG4gIHZhciBjbGFzc05hbWUgPSBfcmVmIC8qOjogKi8uY2xhc3NOYW1lLFxuICAgIGNvbHVtbnMgPSBfcmVmIC8qOjogKi8uY29sdW1ucyxcbiAgICBpbmRleCA9IF9yZWYgLyo6OiAqLy5pbmRleCxcbiAgICBrZXkgPSBfcmVmIC8qOjogKi8ua2V5LFxuICAgIG9uUm93Q2xpY2sgPSBfcmVmIC8qOjogKi8ub25Sb3dDbGljayxcbiAgICBvblJvd0RvdWJsZUNsaWNrID0gX3JlZiAvKjo6ICovLm9uUm93RG91YmxlQ2xpY2ssXG4gICAgb25Sb3dNb3VzZU91dCA9IF9yZWYgLyo6OiAqLy5vblJvd01vdXNlT3V0LFxuICAgIG9uUm93TW91c2VPdmVyID0gX3JlZiAvKjo6ICovLm9uUm93TW91c2VPdmVyLFxuICAgIG9uUm93UmlnaHRDbGljayA9IF9yZWYgLyo6OiAqLy5vblJvd1JpZ2h0Q2xpY2ssXG4gICAgcm93RGF0YSA9IF9yZWYgLyo6OiAqLy5yb3dEYXRhLFxuICAgIHN0eWxlID0gX3JlZiAvKjo6ICovLnN0eWxlO1xuICB2YXIgYTExeVByb3BzID0ge1xuICAgICdhcmlhLXJvd2luZGV4JzogaW5kZXggKyAxXG4gIH07XG4gIGlmIChvblJvd0NsaWNrIHx8IG9uUm93RG91YmxlQ2xpY2sgfHwgb25Sb3dNb3VzZU91dCB8fCBvblJvd01vdXNlT3ZlciB8fCBvblJvd1JpZ2h0Q2xpY2spIHtcbiAgICBhMTF5UHJvcHNbJ2FyaWEtbGFiZWwnXSA9ICdyb3cnO1xuICAgIGExMXlQcm9wcy50YWJJbmRleCA9IDA7XG4gICAgaWYgKG9uUm93Q2xpY2spIHtcbiAgICAgIGExMXlQcm9wcy5vbkNsaWNrID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIHJldHVybiBvblJvd0NsaWNrKHtcbiAgICAgICAgICBldmVudDogZXZlbnQsXG4gICAgICAgICAgaW5kZXg6IGluZGV4LFxuICAgICAgICAgIHJvd0RhdGE6IHJvd0RhdGFcbiAgICAgICAgfSk7XG4gICAgICB9O1xuICAgIH1cbiAgICBpZiAob25Sb3dEb3VibGVDbGljaykge1xuICAgICAgYTExeVByb3BzLm9uRG91YmxlQ2xpY2sgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgcmV0dXJuIG9uUm93RG91YmxlQ2xpY2soe1xuICAgICAgICAgIGV2ZW50OiBldmVudCxcbiAgICAgICAgICBpbmRleDogaW5kZXgsXG4gICAgICAgICAgcm93RGF0YTogcm93RGF0YVxuICAgICAgICB9KTtcbiAgICAgIH07XG4gICAgfVxuICAgIGlmIChvblJvd01vdXNlT3V0KSB7XG4gICAgICBhMTF5UHJvcHMub25Nb3VzZU91dCA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICByZXR1cm4gb25Sb3dNb3VzZU91dCh7XG4gICAgICAgICAgZXZlbnQ6IGV2ZW50LFxuICAgICAgICAgIGluZGV4OiBpbmRleCxcbiAgICAgICAgICByb3dEYXRhOiByb3dEYXRhXG4gICAgICAgIH0pO1xuICAgICAgfTtcbiAgICB9XG4gICAgaWYgKG9uUm93TW91c2VPdmVyKSB7XG4gICAgICBhMTF5UHJvcHMub25Nb3VzZU92ZXIgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgcmV0dXJuIG9uUm93TW91c2VPdmVyKHtcbiAgICAgICAgICBldmVudDogZXZlbnQsXG4gICAgICAgICAgaW5kZXg6IGluZGV4LFxuICAgICAgICAgIHJvd0RhdGE6IHJvd0RhdGFcbiAgICAgICAgfSk7XG4gICAgICB9O1xuICAgIH1cbiAgICBpZiAob25Sb3dSaWdodENsaWNrKSB7XG4gICAgICBhMTF5UHJvcHMub25Db250ZXh0TWVudSA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICByZXR1cm4gb25Sb3dSaWdodENsaWNrKHtcbiAgICAgICAgICBldmVudDogZXZlbnQsXG4gICAgICAgICAgaW5kZXg6IGluZGV4LFxuICAgICAgICAgIHJvd0RhdGE6IHJvd0RhdGFcbiAgICAgICAgfSk7XG4gICAgICB9O1xuICAgIH1cbiAgfVxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgX2V4dGVuZHMoe30sIGExMXlQcm9wcywge1xuICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lLFxuICAgIGtleToga2V5LFxuICAgIHJvbGU6IFwicm93XCIsXG4gICAgc3R5bGU6IHN0eWxlXG4gIH0pLCBjb2x1bW5zKTtcbn0iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG4vKjo6IGltcG9ydCB0eXBlIHtIZWFkZXJSb3dSZW5kZXJlclBhcmFtc30gZnJvbSAnLi90eXBlcyc7Ki9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRlZmF1bHRIZWFkZXJSb3dSZW5kZXJlcihfcmVmIC8qOjogKi8pIHtcbiAgdmFyIGNsYXNzTmFtZSA9IF9yZWYgLyo6OiAqLy5jbGFzc05hbWUsXG4gICAgY29sdW1ucyA9IF9yZWYgLyo6OiAqLy5jb2x1bW5zLFxuICAgIHN0eWxlID0gX3JlZiAvKjo6ICovLnN0eWxlO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lLFxuICAgIHJvbGU6IFwicm93XCIsXG4gICAgc3R5bGU6IHN0eWxlXG4gIH0sIGNvbHVtbnMpO1xufSIsIidubyBiYWJlbC1wbHVnaW4tZmxvdy1yZWFjdC1wcm9wdHlwZXMnO1xuXG5pbXBvcnQgeyByZXF1ZXN0QW5pbWF0aW9uVGltZW91dCwgY2FuY2VsQW5pbWF0aW9uVGltZW91dCB9IGZyb20gJy4uLy4uL3V0aWxzL3JlcXVlc3RBbmltYXRpb25UaW1lb3V0Jztcbi8qOjogaW1wb3J0IHR5cGUgV2luZG93U2Nyb2xsZXIgZnJvbSAnLi4vV2luZG93U2Nyb2xsZXIuanMnOyovXG52YXIgbW91bnRlZEluc3RhbmNlcyA9IFtdO1xudmFyIG9yaWdpbmFsQm9keVBvaW50ZXJFdmVudHMgPSBudWxsO1xudmFyIGRpc2FibGVQb2ludGVyRXZlbnRzVGltZW91dElkID0gbnVsbDtcbmZ1bmN0aW9uIGVuYWJsZVBvaW50ZXJFdmVudHNJZkRpc2FibGVkKCkge1xuICBpZiAoZGlzYWJsZVBvaW50ZXJFdmVudHNUaW1lb3V0SWQpIHtcbiAgICBkaXNhYmxlUG9pbnRlckV2ZW50c1RpbWVvdXRJZCA9IG51bGw7XG4gICAgaWYgKGRvY3VtZW50LmJvZHkgJiYgb3JpZ2luYWxCb2R5UG9pbnRlckV2ZW50cyAhPSBudWxsKSB7XG4gICAgICBkb2N1bWVudC5ib2R5LnN0eWxlLnBvaW50ZXJFdmVudHMgPSBvcmlnaW5hbEJvZHlQb2ludGVyRXZlbnRzO1xuICAgIH1cbiAgICBvcmlnaW5hbEJvZHlQb2ludGVyRXZlbnRzID0gbnVsbDtcbiAgfVxufVxuZnVuY3Rpb24gZW5hYmxlUG9pbnRlckV2ZW50c0FmdGVyRGVsYXlDYWxsYmFjaygpIHtcbiAgZW5hYmxlUG9pbnRlckV2ZW50c0lmRGlzYWJsZWQoKTtcbiAgbW91bnRlZEluc3RhbmNlcy5mb3JFYWNoKGZ1bmN0aW9uIChpbnN0YW5jZSkge1xuICAgIHJldHVybiBpbnN0YW5jZS5fX3Jlc2V0SXNTY3JvbGxpbmcoKTtcbiAgfSk7XG59XG5mdW5jdGlvbiBlbmFibGVQb2ludGVyRXZlbnRzQWZ0ZXJEZWxheSgpIHtcbiAgaWYgKGRpc2FibGVQb2ludGVyRXZlbnRzVGltZW91dElkKSB7XG4gICAgY2FuY2VsQW5pbWF0aW9uVGltZW91dChkaXNhYmxlUG9pbnRlckV2ZW50c1RpbWVvdXRJZCk7XG4gIH1cbiAgdmFyIG1heGltdW1UaW1lb3V0ID0gMDtcbiAgbW91bnRlZEluc3RhbmNlcy5mb3JFYWNoKGZ1bmN0aW9uIChpbnN0YW5jZSkge1xuICAgIG1heGltdW1UaW1lb3V0ID0gTWF0aC5tYXgobWF4aW11bVRpbWVvdXQsIGluc3RhbmNlLnByb3BzLnNjcm9sbGluZ1Jlc2V0VGltZUludGVydmFsKTtcbiAgfSk7XG4gIGRpc2FibGVQb2ludGVyRXZlbnRzVGltZW91dElkID0gcmVxdWVzdEFuaW1hdGlvblRpbWVvdXQoZW5hYmxlUG9pbnRlckV2ZW50c0FmdGVyRGVsYXlDYWxsYmFjaywgbWF4aW11bVRpbWVvdXQpO1xufVxuZnVuY3Rpb24gb25TY3JvbGxXaW5kb3coZXZlbnQgLyo6IEV2ZW50Ki8pIHtcbiAgaWYgKGV2ZW50LmN1cnJlbnRUYXJnZXQgPT09IHdpbmRvdyAmJiBvcmlnaW5hbEJvZHlQb2ludGVyRXZlbnRzID09IG51bGwgJiYgZG9jdW1lbnQuYm9keSkge1xuICAgIG9yaWdpbmFsQm9keVBvaW50ZXJFdmVudHMgPSBkb2N1bWVudC5ib2R5LnN0eWxlLnBvaW50ZXJFdmVudHM7XG4gICAgZG9jdW1lbnQuYm9keS5zdHlsZS5wb2ludGVyRXZlbnRzID0gJ25vbmUnO1xuICB9XG4gIGVuYWJsZVBvaW50ZXJFdmVudHNBZnRlckRlbGF5KCk7XG4gIG1vdW50ZWRJbnN0YW5jZXMuZm9yRWFjaChmdW5jdGlvbiAoaW5zdGFuY2UpIHtcbiAgICBpZiAoaW5zdGFuY2UucHJvcHMuc2Nyb2xsRWxlbWVudCA9PT0gZXZlbnQuY3VycmVudFRhcmdldCkge1xuICAgICAgaW5zdGFuY2UuX19oYW5kbGVXaW5kb3dTY3JvbGxFdmVudCgpO1xuICAgIH1cbiAgfSk7XG59XG5leHBvcnQgZnVuY3Rpb24gcmVnaXN0ZXJTY3JvbGxMaXN0ZW5lcihjb21wb25lbnQgLyo6IFdpbmRvd1Njcm9sbGVyKi8sIGVsZW1lbnQgLyo6IEVsZW1lbnQqLykge1xuICBpZiAoIW1vdW50ZWRJbnN0YW5jZXMuc29tZShmdW5jdGlvbiAoaW5zdGFuY2UpIHtcbiAgICByZXR1cm4gaW5zdGFuY2UucHJvcHMuc2Nyb2xsRWxlbWVudCA9PT0gZWxlbWVudDtcbiAgfSkpIHtcbiAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIG9uU2Nyb2xsV2luZG93KTtcbiAgfVxuICBtb3VudGVkSW5zdGFuY2VzLnB1c2goY29tcG9uZW50KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiB1bnJlZ2lzdGVyU2Nyb2xsTGlzdGVuZXIoY29tcG9uZW50IC8qOiBXaW5kb3dTY3JvbGxlciovLCBlbGVtZW50IC8qOiBFbGVtZW50Ki8pIHtcbiAgbW91bnRlZEluc3RhbmNlcyA9IG1vdW50ZWRJbnN0YW5jZXMuZmlsdGVyKGZ1bmN0aW9uIChpbnN0YW5jZSkge1xuICAgIHJldHVybiBpbnN0YW5jZSAhPT0gY29tcG9uZW50O1xuICB9KTtcbiAgaWYgKCFtb3VudGVkSW5zdGFuY2VzLmxlbmd0aCkge1xuICAgIGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgb25TY3JvbGxXaW5kb3cpO1xuICAgIGlmIChkaXNhYmxlUG9pbnRlckV2ZW50c1RpbWVvdXRJZCkge1xuICAgICAgY2FuY2VsQW5pbWF0aW9uVGltZW91dChkaXNhYmxlUG9pbnRlckV2ZW50c1RpbWVvdXRJZCk7XG4gICAgICBlbmFibGVQb2ludGVyRXZlbnRzSWZEaXNhYmxlZCgpO1xuICAgIH1cbiAgfVxufSIsIi8qKlxuICogR2V0cyB0aGUgZGltZW5zaW9ucyBvZiB0aGUgZWxlbWVudCwgYWNjb3VudGluZyBmb3IgQVBJIGRpZmZlcmVuY2VzIGJldHdlZW5cbiAqIGB3aW5kb3dgIGFuZCBvdGhlciBET00gZWxlbWVudHMuXG4gKi9cbi8qOjogdHlwZSBEaW1lbnNpb25zID0ge1xuICBoZWlnaHQ6IG51bWJlcixcbiAgd2lkdGg6IG51bWJlcixcbn07Ki9cbi8vIFRPRE8gTW92ZSB0aGlzIGludG8gV2luZG93U2Nyb2xsZXIgYW5kIGltcG9ydCBmcm9tIHRoZXJlXG4vKjo6IHR5cGUgV2luZG93U2Nyb2xsZXJQcm9wcyA9IHtcbiAgc2VydmVySGVpZ2h0OiBudW1iZXIsXG4gIHNlcnZlcldpZHRoOiBudW1iZXIsXG59OyovXG52YXIgaXNXaW5kb3cgPSBmdW5jdGlvbiBpc1dpbmRvdyhlbGVtZW50KSB7XG4gIHJldHVybiBlbGVtZW50ID09PSB3aW5kb3c7XG59O1xudmFyIGdldEJvdW5kaW5nQm94ID0gZnVuY3Rpb24gZ2V0Qm91bmRpbmdCb3goZWxlbWVudCkge1xuICByZXR1cm4gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gZ2V0RGltZW5zaW9ucyhzY3JvbGxFbGVtZW50IC8qOiA/RWxlbWVudCovLCBwcm9wcyAvKjogV2luZG93U2Nyb2xsZXJQcm9wcyovKSAvKjogRGltZW5zaW9ucyove1xuICBpZiAoIXNjcm9sbEVsZW1lbnQpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaGVpZ2h0OiBwcm9wcy5zZXJ2ZXJIZWlnaHQsXG4gICAgICB3aWR0aDogcHJvcHMuc2VydmVyV2lkdGhcbiAgICB9O1xuICB9IGVsc2UgaWYgKGlzV2luZG93KHNjcm9sbEVsZW1lbnQpKSB7XG4gICAgdmFyIF93aW5kb3cgPSB3aW5kb3csXG4gICAgICBpbm5lckhlaWdodCA9IF93aW5kb3cuaW5uZXJIZWlnaHQsXG4gICAgICBpbm5lcldpZHRoID0gX3dpbmRvdy5pbm5lcldpZHRoO1xuICAgIHJldHVybiB7XG4gICAgICBoZWlnaHQ6IHR5cGVvZiBpbm5lckhlaWdodCA9PT0gJ251bWJlcicgPyBpbm5lckhlaWdodCA6IDAsXG4gICAgICB3aWR0aDogdHlwZW9mIGlubmVyV2lkdGggPT09ICdudW1iZXInID8gaW5uZXJXaWR0aCA6IDBcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBnZXRCb3VuZGluZ0JveChzY3JvbGxFbGVtZW50KTtcbiAgfVxufVxuXG4vKipcbiAqIEdldHMgdGhlIHZlcnRpY2FsIGFuZCBob3Jpem9udGFsIHBvc2l0aW9uIG9mIGFuIGVsZW1lbnQgd2l0aGluIGl0cyBzY3JvbGwgY29udGFpbmVyLlxuICogRWxlbWVudHMgdGhhdCBoYXZlIGJlZW4g4oCcc2Nyb2xsZWQgcGFzdOKAnSByZXR1cm4gbmVnYXRpdmUgdmFsdWVzLlxuICogSGFuZGxlcyBlZGdlLWNhc2Ugd2hlcmUgYSB1c2VyIGlzIG5hdmlnYXRpbmcgYmFjayAoaGlzdG9yeSkgZnJvbSBhbiBhbHJlYWR5LXNjcm9sbGVkIHBhZ2UuXG4gKiBJbiB0aGlzIGNhc2UgdGhlIGJvZHnigJlzIHRvcCBvciBsZWZ0IHBvc2l0aW9uIHdpbGwgYmUgYSBuZWdhdGl2ZSBudW1iZXIgYW5kIHRoaXMgZWxlbWVudOKAmXMgdG9wIG9yIGxlZnQgd2lsbCBiZSBpbmNyZWFzZWQgKGJ5IHRoYXQgYW1vdW50KS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFBvc2l0aW9uT2Zmc2V0KGVsZW1lbnQgLyo6IEVsZW1lbnQqLywgY29udGFpbmVyIC8qOiBFbGVtZW50Ki8pIHtcbiAgaWYgKGlzV2luZG93KGNvbnRhaW5lcikgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KSB7XG4gICAgdmFyIGNvbnRhaW5lckVsZW1lbnQgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gICAgdmFyIGVsZW1lbnRSZWN0ID0gZ2V0Qm91bmRpbmdCb3goZWxlbWVudCk7XG4gICAgdmFyIGNvbnRhaW5lclJlY3QgPSBnZXRCb3VuZGluZ0JveChjb250YWluZXJFbGVtZW50KTtcbiAgICByZXR1cm4ge1xuICAgICAgdG9wOiBlbGVtZW50UmVjdC50b3AgLSBjb250YWluZXJSZWN0LnRvcCxcbiAgICAgIGxlZnQ6IGVsZW1lbnRSZWN0LmxlZnQgLSBjb250YWluZXJSZWN0LmxlZnRcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIHZhciBzY3JvbGxPZmZzZXQgPSBnZXRTY3JvbGxPZmZzZXQoY29udGFpbmVyKTtcbiAgICB2YXIgX2VsZW1lbnRSZWN0ID0gZ2V0Qm91bmRpbmdCb3goZWxlbWVudCk7XG4gICAgdmFyIF9jb250YWluZXJSZWN0ID0gZ2V0Qm91bmRpbmdCb3goY29udGFpbmVyKTtcbiAgICByZXR1cm4ge1xuICAgICAgdG9wOiBfZWxlbWVudFJlY3QudG9wICsgc2Nyb2xsT2Zmc2V0LnRvcCAtIF9jb250YWluZXJSZWN0LnRvcCxcbiAgICAgIGxlZnQ6IF9lbGVtZW50UmVjdC5sZWZ0ICsgc2Nyb2xsT2Zmc2V0LmxlZnQgLSBfY29udGFpbmVyUmVjdC5sZWZ0XG4gICAgfTtcbiAgfVxufVxuXG4vKipcbiAqIEdldHMgdGhlIHZlcnRpY2FsIGFuZCBob3Jpem9udGFsIHNjcm9sbCBhbW91bnQgb2YgdGhlIGVsZW1lbnQsIGFjY291bnRpbmcgZm9yIElFIGNvbXBhdGliaWxpdHlcbiAqIGFuZCBBUEkgZGlmZmVyZW5jZXMgYmV0d2VlbiBgd2luZG93YCBhbmQgb3RoZXIgRE9NIGVsZW1lbnRzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0U2Nyb2xsT2Zmc2V0KGVsZW1lbnQgLyo6IEVsZW1lbnQqLykge1xuICBpZiAoaXNXaW5kb3coZWxlbWVudCkgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRvcDogJ3Njcm9sbFknIGluIHdpbmRvdyA/IHdpbmRvdy5zY3JvbGxZIDogZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcCxcbiAgICAgIGxlZnQ6ICdzY3JvbGxYJyBpbiB3aW5kb3cgPyB3aW5kb3cuc2Nyb2xsWCA6IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxMZWZ0XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4ge1xuICAgICAgdG9wOiBlbGVtZW50LnNjcm9sbFRvcCxcbiAgICAgIGxlZnQ6IGVsZW1lbnQuc2Nyb2xsTGVmdFxuICAgIH07XG4gIH1cbn0iLCJpbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCI7XG5pbXBvcnQgX2NyZWF0ZUNsYXNzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzXCI7XG5pbXBvcnQgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4gZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiO1xuaW1wb3J0IF9nZXRQcm90b3R5cGVPZiBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZlwiO1xuaW1wb3J0IF9pbmhlcml0cyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiO1xuaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eVwiO1xuZnVuY3Rpb24gb3duS2V5cyhlLCByKSB7IHZhciB0ID0gT2JqZWN0LmtleXMoZSk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBvID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhlKTsgciAmJiAobyA9IG8uZmlsdGVyKGZ1bmN0aW9uIChyKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGUsIHIpLmVudW1lcmFibGU7IH0pKSwgdC5wdXNoLmFwcGx5KHQsIG8pOyB9IHJldHVybiB0OyB9XG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkKGUpIHsgZm9yICh2YXIgciA9IDE7IHIgPCBhcmd1bWVudHMubGVuZ3RoOyByKyspIHsgdmFyIHQgPSBudWxsICE9IGFyZ3VtZW50c1tyXSA/IGFyZ3VtZW50c1tyXSA6IHt9OyByICUgMiA/IG93bktleXMoT2JqZWN0KHQpLCAhMCkuZm9yRWFjaChmdW5jdGlvbiAocikgeyBfZGVmaW5lUHJvcGVydHkoZSwgciwgdFtyXSk7IH0pIDogT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMgPyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhlLCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyh0KSkgOiBvd25LZXlzKE9iamVjdCh0KSkuZm9yRWFjaChmdW5jdGlvbiAocikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgciwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0LCByKSk7IH0pOyB9IHJldHVybiBlOyB9XG5mdW5jdGlvbiBfY2FsbFN1cGVyKHQsIG8sIGUpIHsgcmV0dXJuIG8gPSBfZ2V0UHJvdG90eXBlT2YobyksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHQsIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSA/IFJlZmxlY3QuY29uc3RydWN0KG8sIGUgfHwgW10sIF9nZXRQcm90b3R5cGVPZih0KS5jb25zdHJ1Y3RvcikgOiBvLmFwcGx5KHQsIGUpKTsgfVxuZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgdHJ5IHsgdmFyIHQgPSAhQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyB9IGNhdGNoICh0KSB7fSByZXR1cm4gKF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSBmdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyByZXR1cm4gISF0OyB9KSgpOyB9XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyByZWdpc3RlclNjcm9sbExpc3RlbmVyLCB1bnJlZ2lzdGVyU2Nyb2xsTGlzdGVuZXIgfSBmcm9tICcuL3V0aWxzL29uU2Nyb2xsJztcbmltcG9ydCB7IGdldERpbWVuc2lvbnMsIGdldFBvc2l0aW9uT2Zmc2V0LCBnZXRTY3JvbGxPZmZzZXQgfSBmcm9tICcuL3V0aWxzL2RpbWVuc2lvbnMnO1xuaW1wb3J0IGNyZWF0ZURldGVjdEVsZW1lbnRSZXNpemUgZnJvbSAnLi4vdmVuZG9yL2RldGVjdEVsZW1lbnRSZXNpemUnO1xuLyo6OiB0eXBlIFByb3BzID0ge1xuICAvKipcbiAgICogRnVuY3Rpb24gcmVzcG9uc2libGUgZm9yIHJlbmRlcmluZyBjaGlsZHJlbi5cbiAgICogVGhpcyBmdW5jdGlvbiBzaG91bGQgaW1wbGVtZW50IHRoZSBmb2xsb3dpbmcgc2lnbmF0dXJlOlxuICAgKiAoeyBoZWlnaHQsIGlzU2Nyb2xsaW5nLCBzY3JvbGxMZWZ0LCBzY3JvbGxUb3AsIHdpZHRoIH0pID0+IFByb3BUeXBlcy5lbGVtZW50XG4gICAqLS9cbiAgY2hpbGRyZW46ICh7XG4gICAgb25DaGlsZFNjcm9sbDogKHtzY3JvbGxUb3A6IG51bWJlcn0pID0+IHZvaWQsXG4gICAgcmVnaXN0ZXJDaGlsZDogKD9FbGVtZW50KSA9PiB2b2lkLFxuICAgIGhlaWdodDogbnVtYmVyLFxuICAgIGlzU2Nyb2xsaW5nOiBib29sZWFuLFxuICAgIHNjcm9sbExlZnQ6IG51bWJlcixcbiAgICBzY3JvbGxUb3A6IG51bWJlcixcbiAgICB3aWR0aDogbnVtYmVyLFxuICB9KSA9PiBSZWFjdC5Ob2RlLFxuXG4gIC8qKiBDYWxsYmFjayB0byBiZSBpbnZva2VkIG9uLXJlc2l6ZTogKHsgaGVpZ2h0LCB3aWR0aCB9KSAqLS9cbiAgb25SZXNpemU6ICh7aGVpZ2h0OiBudW1iZXIsIHdpZHRoOiBudW1iZXJ9KSA9PiB2b2lkLFxuXG4gIC8qKiBDYWxsYmFjayB0byBiZSBpbnZva2VkIG9uLXNjcm9sbDogKHsgc2Nyb2xsTGVmdCwgc2Nyb2xsVG9wIH0pICotL1xuICBvblNjcm9sbDogKHtzY3JvbGxMZWZ0OiBudW1iZXIsIHNjcm9sbFRvcDogbnVtYmVyfSkgPT4gdm9pZCxcblxuICAvKiogRWxlbWVudCB0byBhdHRhY2ggc2Nyb2xsIGV2ZW50IGxpc3RlbmVycy4gRGVmYXVsdHMgdG8gd2luZG93LiAqLS9cbiAgc2Nyb2xsRWxlbWVudDogPyh0eXBlb2Ygd2luZG93IHwgRWxlbWVudCksXG4gIC8qKlxuICAgKiBXYWl0IHRoaXMgYW1vdW50IG9mIHRpbWUgYWZ0ZXIgdGhlIGxhc3Qgc2Nyb2xsIGV2ZW50IGJlZm9yZSByZXNldHRpbmcgY2hpbGQgYHBvaW50ZXItZXZlbnRzYC5cbiAgICotL1xuICBzY3JvbGxpbmdSZXNldFRpbWVJbnRlcnZhbDogbnVtYmVyLFxuXG4gIC8qKiBIZWlnaHQgdXNlZCBmb3Igc2VydmVyLXNpZGUgcmVuZGVyaW5nICotL1xuICBzZXJ2ZXJIZWlnaHQ6IG51bWJlcixcblxuICAvKiogV2lkdGggdXNlZCBmb3Igc2VydmVyLXNpZGUgcmVuZGVyaW5nICotL1xuICBzZXJ2ZXJXaWR0aDogbnVtYmVyLFxuXG4gIC8qKiBGb3JjZSBzY3JvbGxUb3AgdXBkYXRlcyB3aGVuIC51cGRhdGVQb3NpdGlvbiBpcyBjYWxsZWQsIGZpeGluZyBmb3JjZWQgaGVhZGVyIGhlaWdodCBjaGFuZ2UgdXBkYXRlcyAqLS9cbiAgdXBkYXRlU2Nyb2xsVG9wT25VcGRhdGVQb3NpdGlvbj86IGJvb2xlYW4sXG59OyovXG4vKjo6IHR5cGUgU3RhdGUgPSB7XG4gIGhlaWdodDogbnVtYmVyLFxuICB3aWR0aDogbnVtYmVyLFxuICBpc1Njcm9sbGluZzogYm9vbGVhbixcbiAgc2Nyb2xsTGVmdDogbnVtYmVyLFxuICBzY3JvbGxUb3A6IG51bWJlcixcbn07Ki9cbi8qOjogdHlwZSBSZXNpemVIYW5kbGVyID0gKGVsZW1lbnQ6IEVsZW1lbnQsIG9uUmVzaXplOiAoKSA9PiB2b2lkKSA9PiB2b2lkOyovXG4vKjo6IHR5cGUgRGV0ZWN0RWxlbWVudFJlc2l6ZSA9IHtcbiAgYWRkUmVzaXplTGlzdGVuZXI6IFJlc2l6ZUhhbmRsZXIsXG4gIHJlbW92ZVJlc2l6ZUxpc3RlbmVyOiBSZXNpemVIYW5kbGVyLFxufTsqL1xuLyoqXG4gKiBTcGVjaWZpZXMgdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgZHVyaW5nIHdoaWNoIHRvIGRpc2FibGUgcG9pbnRlciBldmVudHMgd2hpbGUgYSBzY3JvbGwgaXMgaW4gcHJvZ3Jlc3MuXG4gKiBUaGlzIGltcHJvdmVzIHBlcmZvcm1hbmNlIGFuZCBtYWtlcyBzY3JvbGxpbmcgc21vb3RoZXIuXG4gKi9cbmV4cG9ydCB2YXIgSVNfU0NST0xMSU5HX1RJTUVPVVQgPSAxNTA7XG52YXIgZ2V0V2luZG93ID0gZnVuY3Rpb24gZ2V0V2luZG93KCkge1xuICByZXR1cm4gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiB1bmRlZmluZWQ7XG59O1xudmFyIFdpbmRvd1Njcm9sbGVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfUmVhY3QkUHVyZUNvbXBvbmVudCkge1xuICBmdW5jdGlvbiBXaW5kb3dTY3JvbGxlcigpIHtcbiAgICB2YXIgX3RoaXM7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFdpbmRvd1Njcm9sbGVyKTtcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuICAgIF90aGlzID0gX2NhbGxTdXBlcih0aGlzLCBXaW5kb3dTY3JvbGxlciwgW10uY29uY2F0KGFyZ3MpKTtcbiAgICBfZGVmaW5lUHJvcGVydHkoX3RoaXMsIFwiX3dpbmRvd1wiLCBnZXRXaW5kb3coKSk7XG4gICAgX2RlZmluZVByb3BlcnR5KF90aGlzLCBcIl9pc01vdW50ZWRcIiwgZmFsc2UpO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJfcG9zaXRpb25Gcm9tVG9wXCIsIDApO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJfcG9zaXRpb25Gcm9tTGVmdFwiLCAwKTtcbiAgICBfZGVmaW5lUHJvcGVydHkoX3RoaXMsIFwiX2RldGVjdEVsZW1lbnRSZXNpemVcIiwgdm9pZCAwKTtcbiAgICBfZGVmaW5lUHJvcGVydHkoX3RoaXMsIFwiX2NoaWxkXCIsIHZvaWQgMCk7XG4gICAgX2RlZmluZVByb3BlcnR5KF90aGlzLCBcIl93aW5kb3dTY3JvbGxlclJlZlwiLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlUmVmKCkpO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJzdGF0ZVwiLCBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIGdldERpbWVuc2lvbnMoX3RoaXMucHJvcHMuc2Nyb2xsRWxlbWVudCwgX3RoaXMucHJvcHMpKSwge30sIHtcbiAgICAgIGlzU2Nyb2xsaW5nOiBmYWxzZSxcbiAgICAgIHNjcm9sbExlZnQ6IDAsXG4gICAgICBzY3JvbGxUb3A6IDBcbiAgICB9KSk7XG4gICAgX2RlZmluZVByb3BlcnR5KF90aGlzLCBcIl9yZWdpc3RlckNoaWxkXCIsIGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICBpZiAoZWxlbWVudCAmJiAhKGVsZW1lbnQgaW5zdGFuY2VvZiBFbGVtZW50KSkge1xuICAgICAgICBjb25zb2xlLndhcm4oJ1dpbmRvd1Njcm9sbGVyIHJlZ2lzdGVyQ2hpbGQgZXhwZWN0cyB0byBiZSBwYXNzZWQgRWxlbWVudCBvciBudWxsJyk7XG4gICAgICB9XG4gICAgICBfdGhpcy5fY2hpbGQgPSBlbGVtZW50O1xuICAgICAgX3RoaXMudXBkYXRlUG9zaXRpb24oKTtcbiAgICB9KTtcbiAgICBfZGVmaW5lUHJvcGVydHkoX3RoaXMsIFwiX29uQ2hpbGRTY3JvbGxcIiwgZnVuY3Rpb24gKF9yZWYpIHtcbiAgICAgIHZhciBzY3JvbGxUb3AgPSBfcmVmLnNjcm9sbFRvcDtcbiAgICAgIGlmIChfdGhpcy5zdGF0ZS5zY3JvbGxUb3AgPT09IHNjcm9sbFRvcCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgc2Nyb2xsRWxlbWVudCA9IF90aGlzLnByb3BzLnNjcm9sbEVsZW1lbnQ7XG4gICAgICBpZiAoc2Nyb2xsRWxlbWVudCkge1xuICAgICAgICBpZiAodHlwZW9mIHNjcm9sbEVsZW1lbnQuc2Nyb2xsVG8gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBzY3JvbGxFbGVtZW50LnNjcm9sbFRvKDAsIHNjcm9sbFRvcCArIF90aGlzLl9wb3NpdGlvbkZyb21Ub3ApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNjcm9sbEVsZW1lbnQuc2Nyb2xsVG9wID0gc2Nyb2xsVG9wICsgX3RoaXMuX3Bvc2l0aW9uRnJvbVRvcDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJfcmVnaXN0ZXJSZXNpemVMaXN0ZW5lclwiLCBmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgaWYgKGVsZW1lbnQgPT09IHdpbmRvdykge1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgX3RoaXMuX29uUmVzaXplLCBmYWxzZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfdGhpcy5fZGV0ZWN0RWxlbWVudFJlc2l6ZS5hZGRSZXNpemVMaXN0ZW5lcihlbGVtZW50LCBfdGhpcy5fb25SZXNpemUpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJfdW5yZWdpc3RlclJlc2l6ZUxpc3RlbmVyXCIsIGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICBpZiAoZWxlbWVudCA9PT0gd2luZG93KSB7XG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCBfdGhpcy5fb25SZXNpemUsIGZhbHNlKTtcbiAgICAgIH0gZWxzZSBpZiAoZWxlbWVudCkge1xuICAgICAgICBfdGhpcy5fZGV0ZWN0RWxlbWVudFJlc2l6ZS5yZW1vdmVSZXNpemVMaXN0ZW5lcihlbGVtZW50LCBfdGhpcy5fb25SZXNpemUpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfdGhpcywgXCJfb25SZXNpemVcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMudXBkYXRlUG9zaXRpb24oKTtcbiAgICB9KTtcbiAgICAvLyBSZWZlcmVuY2VkIGJ5IHV0aWxzL29uU2Nyb2xsXG4gICAgX2RlZmluZVByb3BlcnR5KF90aGlzLCBcIl9faGFuZGxlV2luZG93U2Nyb2xsRXZlbnRcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKCFfdGhpcy5faXNNb3VudGVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciBvblNjcm9sbCA9IF90aGlzLnByb3BzLm9uU2Nyb2xsO1xuICAgICAgdmFyIHNjcm9sbEVsZW1lbnQgPSBfdGhpcy5wcm9wcy5zY3JvbGxFbGVtZW50O1xuICAgICAgaWYgKHNjcm9sbEVsZW1lbnQpIHtcbiAgICAgICAgdmFyIHNjcm9sbE9mZnNldCA9IGdldFNjcm9sbE9mZnNldChzY3JvbGxFbGVtZW50KTtcbiAgICAgICAgdmFyIHNjcm9sbExlZnQgPSBNYXRoLm1heCgwLCBzY3JvbGxPZmZzZXQubGVmdCAtIF90aGlzLl9wb3NpdGlvbkZyb21MZWZ0KTtcbiAgICAgICAgdmFyIHNjcm9sbFRvcCA9IE1hdGgubWF4KDAsIHNjcm9sbE9mZnNldC50b3AgLSBfdGhpcy5fcG9zaXRpb25Gcm9tVG9wKTtcbiAgICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgIGlzU2Nyb2xsaW5nOiB0cnVlLFxuICAgICAgICAgIHNjcm9sbExlZnQ6IHNjcm9sbExlZnQsXG4gICAgICAgICAgc2Nyb2xsVG9wOiBzY3JvbGxUb3BcbiAgICAgICAgfSk7XG4gICAgICAgIG9uU2Nyb2xsKHtcbiAgICAgICAgICBzY3JvbGxMZWZ0OiBzY3JvbGxMZWZ0LFxuICAgICAgICAgIHNjcm9sbFRvcDogc2Nyb2xsVG9wXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIC8vIFJlZmVyZW5jZWQgYnkgdXRpbHMvb25TY3JvbGxcbiAgICBfZGVmaW5lUHJvcGVydHkoX3RoaXMsIFwiX19yZXNldElzU2Nyb2xsaW5nXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgaXNTY3JvbGxpbmc6IGZhbHNlXG4gICAgICB9KTtcbiAgICB9KTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cbiAgX2luaGVyaXRzKFdpbmRvd1Njcm9sbGVyLCBfUmVhY3QkUHVyZUNvbXBvbmVudCk7XG4gIHJldHVybiBfY3JlYXRlQ2xhc3MoV2luZG93U2Nyb2xsZXIsIFt7XG4gICAga2V5OiBcInVwZGF0ZVBvc2l0aW9uXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZVBvc2l0aW9uKCkge1xuICAgICAgdmFyIHNjcm9sbEVsZW1lbnQgLyo6ID9FbGVtZW50Ki8gPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHRoaXMucHJvcHMuc2Nyb2xsRWxlbWVudDtcbiAgICAgIHZhciBvblJlc2l6ZSA9IHRoaXMucHJvcHMub25SZXNpemU7XG4gICAgICB2YXIgX3RoaXMkc3RhdGUgPSB0aGlzLnN0YXRlLFxuICAgICAgICBoZWlnaHQgPSBfdGhpcyRzdGF0ZS5oZWlnaHQsXG4gICAgICAgIHdpZHRoID0gX3RoaXMkc3RhdGUud2lkdGg7XG4gICAgICB2YXIgdGhpc05vZGUgPSB0aGlzLl9jaGlsZCB8fCB0aGlzLl93aW5kb3dTY3JvbGxlclJlZi5jdXJyZW50O1xuICAgICAgaWYgKHRoaXNOb2RlIGluc3RhbmNlb2YgRWxlbWVudCAmJiBzY3JvbGxFbGVtZW50KSB7XG4gICAgICAgIHZhciBvZmZzZXQgPSBnZXRQb3NpdGlvbk9mZnNldCh0aGlzTm9kZSwgc2Nyb2xsRWxlbWVudCk7XG4gICAgICAgIHRoaXMuX3Bvc2l0aW9uRnJvbVRvcCA9IG9mZnNldC50b3A7XG4gICAgICAgIHRoaXMuX3Bvc2l0aW9uRnJvbUxlZnQgPSBvZmZzZXQubGVmdDtcbiAgICAgIH1cbiAgICAgIHZhciBkaW1lbnNpb25zID0gZ2V0RGltZW5zaW9ucyhzY3JvbGxFbGVtZW50LCB0aGlzLnByb3BzKTtcbiAgICAgIGlmIChoZWlnaHQgIT09IGRpbWVuc2lvbnMuaGVpZ2h0IHx8IHdpZHRoICE9PSBkaW1lbnNpb25zLndpZHRoKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgIGhlaWdodDogZGltZW5zaW9ucy5oZWlnaHQsXG4gICAgICAgICAgd2lkdGg6IGRpbWVuc2lvbnMud2lkdGhcbiAgICAgICAgfSk7XG4gICAgICAgIG9uUmVzaXplKHtcbiAgICAgICAgICBoZWlnaHQ6IGRpbWVuc2lvbnMuaGVpZ2h0LFxuICAgICAgICAgIHdpZHRoOiBkaW1lbnNpb25zLndpZHRoXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMucHJvcHMudXBkYXRlU2Nyb2xsVG9wT25VcGRhdGVQb3NpdGlvbiA9PT0gdHJ1ZSkge1xuICAgICAgICB0aGlzLl9faGFuZGxlV2luZG93U2Nyb2xsRXZlbnQoKTtcbiAgICAgICAgdGhpcy5fX3Jlc2V0SXNTY3JvbGxpbmcoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY29tcG9uZW50RGlkTW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICB2YXIgc2Nyb2xsRWxlbWVudCA9IHRoaXMucHJvcHMuc2Nyb2xsRWxlbWVudDtcbiAgICAgIHRoaXMuX2RldGVjdEVsZW1lbnRSZXNpemUgPSBjcmVhdGVEZXRlY3RFbGVtZW50UmVzaXplKCk7XG4gICAgICB0aGlzLnVwZGF0ZVBvc2l0aW9uKHNjcm9sbEVsZW1lbnQpO1xuICAgICAgaWYgKHNjcm9sbEVsZW1lbnQpIHtcbiAgICAgICAgcmVnaXN0ZXJTY3JvbGxMaXN0ZW5lcih0aGlzLCBzY3JvbGxFbGVtZW50KTtcbiAgICAgICAgdGhpcy5fcmVnaXN0ZXJSZXNpemVMaXN0ZW5lcihzY3JvbGxFbGVtZW50KTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX2lzTW91bnRlZCA9IHRydWU7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNvbXBvbmVudERpZFVwZGF0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzIC8qOiBQcm9wcyovLCBwcmV2U3RhdGUgLyo6IFN0YXRlKi8pIHtcbiAgICAgIHZhciBzY3JvbGxFbGVtZW50ID0gdGhpcy5wcm9wcy5zY3JvbGxFbGVtZW50O1xuICAgICAgdmFyIHByZXZTY3JvbGxFbGVtZW50ID0gcHJldlByb3BzLnNjcm9sbEVsZW1lbnQ7XG4gICAgICBpZiAocHJldlNjcm9sbEVsZW1lbnQgIT09IHNjcm9sbEVsZW1lbnQgJiYgcHJldlNjcm9sbEVsZW1lbnQgIT0gbnVsbCAmJiBzY3JvbGxFbGVtZW50ICE9IG51bGwpIHtcbiAgICAgICAgdGhpcy51cGRhdGVQb3NpdGlvbihzY3JvbGxFbGVtZW50KTtcbiAgICAgICAgdW5yZWdpc3RlclNjcm9sbExpc3RlbmVyKHRoaXMsIHByZXZTY3JvbGxFbGVtZW50KTtcbiAgICAgICAgcmVnaXN0ZXJTY3JvbGxMaXN0ZW5lcih0aGlzLCBzY3JvbGxFbGVtZW50KTtcbiAgICAgICAgdGhpcy5fdW5yZWdpc3RlclJlc2l6ZUxpc3RlbmVyKHByZXZTY3JvbGxFbGVtZW50KTtcbiAgICAgICAgdGhpcy5fcmVnaXN0ZXJSZXNpemVMaXN0ZW5lcihzY3JvbGxFbGVtZW50KTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY29tcG9uZW50V2lsbFVubW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICB2YXIgc2Nyb2xsRWxlbWVudCA9IHRoaXMucHJvcHMuc2Nyb2xsRWxlbWVudDtcbiAgICAgIGlmIChzY3JvbGxFbGVtZW50KSB7XG4gICAgICAgIHVucmVnaXN0ZXJTY3JvbGxMaXN0ZW5lcih0aGlzLCBzY3JvbGxFbGVtZW50KTtcbiAgICAgICAgdGhpcy5fdW5yZWdpc3RlclJlc2l6ZUxpc3RlbmVyKHNjcm9sbEVsZW1lbnQpO1xuICAgICAgfVxuICAgICAgdGhpcy5faXNNb3VudGVkID0gZmFsc2U7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLnByb3BzLmNoaWxkcmVuO1xuICAgICAgdmFyIF90aGlzJHN0YXRlMiA9IHRoaXMuc3RhdGUsXG4gICAgICAgIGlzU2Nyb2xsaW5nID0gX3RoaXMkc3RhdGUyLmlzU2Nyb2xsaW5nLFxuICAgICAgICBzY3JvbGxUb3AgPSBfdGhpcyRzdGF0ZTIuc2Nyb2xsVG9wLFxuICAgICAgICBzY3JvbGxMZWZ0ID0gX3RoaXMkc3RhdGUyLnNjcm9sbExlZnQsXG4gICAgICAgIGhlaWdodCA9IF90aGlzJHN0YXRlMi5oZWlnaHQsXG4gICAgICAgIHdpZHRoID0gX3RoaXMkc3RhdGUyLndpZHRoO1xuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7XG4gICAgICAgIHJlZjogdGhpcy5fd2luZG93U2Nyb2xsZXJSZWZcbiAgICAgIH0sIGNoaWxkcmVuKHtcbiAgICAgICAgb25DaGlsZFNjcm9sbDogdGhpcy5fb25DaGlsZFNjcm9sbCxcbiAgICAgICAgcmVnaXN0ZXJDaGlsZDogdGhpcy5fcmVnaXN0ZXJDaGlsZCxcbiAgICAgICAgaGVpZ2h0OiBoZWlnaHQsXG4gICAgICAgIGlzU2Nyb2xsaW5nOiBpc1Njcm9sbGluZyxcbiAgICAgICAgc2Nyb2xsTGVmdDogc2Nyb2xsTGVmdCxcbiAgICAgICAgc2Nyb2xsVG9wOiBzY3JvbGxUb3AsXG4gICAgICAgIHdpZHRoOiB3aWR0aFxuICAgICAgfSkpO1xuICAgIH1cbiAgfV0pO1xufShSZWFjdC5QdXJlQ29tcG9uZW50KTtcbl9kZWZpbmVQcm9wZXJ0eShXaW5kb3dTY3JvbGxlciwgXCJkZWZhdWx0UHJvcHNcIiwge1xuICBvblJlc2l6ZTogZnVuY3Rpb24gb25SZXNpemUoKSB7fSxcbiAgb25TY3JvbGw6IGZ1bmN0aW9uIG9uU2Nyb2xsKCkge30sXG4gIHNjcm9sbGluZ1Jlc2V0VGltZUludGVydmFsOiBJU19TQ1JPTExJTkdfVElNRU9VVCxcbiAgc2Nyb2xsRWxlbWVudDogZ2V0V2luZG93KCksXG4gIHNlcnZlckhlaWdodDogMCxcbiAgc2VydmVyV2lkdGg6IDBcbn0pO1xuZXhwb3J0IHsgV2luZG93U2Nyb2xsZXIgYXMgZGVmYXVsdCB9OyIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IEF1dG9TaXplciwgV2luZG93U2Nyb2xsZXIgfSBmcm9tIFwicmVhY3QtdmlydHVhbGl6ZWRcIjtcbmltcG9ydCBMaXN0LCB7IExpc3RSb3dSZW5kZXJlciB9IGZyb20gXCJyZWFjdC12aXJ0dWFsaXplZC9kaXN0L2VzL0xpc3RcIjtcbmltcG9ydCB7IENvbXBhbnlSb3cgfSBmcm9tIFwiLi9Db21wYW55Um93XCI7XG5pbXBvcnQgeyB1c2VBcHBTZWxlY3RvciB9IGZyb20gXCJAc3JjL3N0b3JlL2hvb2tzXCI7XG5pbXBvcnQgeyBnZXRDb21wYW5pZXMgfSBmcm9tIFwiLi4vbW9kZWwvc2VsZWN0b3JzXCI7XG5cbmludGVyZmFjZSBWaXJ0dWFsaXplZFRhYmxlUHJvcHMge1xuICByb3dIZWlnaHQ6IG51bWJlcjtcbn1cbmV4cG9ydCBjb25zdCBWaXJ0dWFsaXplZFRhYmxlID0gKHsgcm93SGVpZ2h0IH06IFZpcnR1YWxpemVkVGFibGVQcm9wcykgPT4ge1xuICBjb25zdCBjb21wYW5pZXMgPSB1c2VBcHBTZWxlY3RvcihnZXRDb21wYW5pZXMpO1xuICBjb25zdCByb3dDb3VudCA9IGNvbXBhbmllcy5sZW5ndGg7XG4gIGNvbnN0IHJvd1JlbmRlcmVyOiBMaXN0Um93UmVuZGVyZXIgPSAoeyBpbmRleCwga2V5LCBzdHlsZSB9KSA9PiB7XG4gICAgY29uc3QgY29tcGFueSA9IGNvbXBhbmllc1tpbmRleF07XG5cbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBrZXk9e2tleX0gc3R5bGU9e3N0eWxlfT5cbiAgICAgICAgPENvbXBhbnlSb3cgY29tcGFueUlkPXtjb21wYW55LmlkfSAvPlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfTtcblxuICByZXR1cm4gKFxuICAgIDxkaXY+XG4gICAgICA8V2luZG93U2Nyb2xsZXI+XG4gICAgICAgIHsoeyBoZWlnaHQsIGlzU2Nyb2xsaW5nLCBvbkNoaWxkU2Nyb2xsLCBzY3JvbGxUb3AgfSkgPT4gKFxuICAgICAgICAgIDxBdXRvU2l6ZXIgZGlzYWJsZUhlaWdodD5cbiAgICAgICAgICAgIHsoeyB3aWR0aCB9KSA9PiAoXG4gICAgICAgICAgICAgIDxMaXN0XG4gICAgICAgICAgICAgICAgYXV0b0hlaWdodFxuICAgICAgICAgICAgICAgIGlzU2Nyb2xsaW5nPXtpc1Njcm9sbGluZ31cbiAgICAgICAgICAgICAgICBvblNjcm9sbD17b25DaGlsZFNjcm9sbH1cbiAgICAgICAgICAgICAgICBzY3JvbGxUb3A9e3Njcm9sbFRvcH1cbiAgICAgICAgICAgICAgICByb3dSZW5kZXJlcj17cm93UmVuZGVyZXJ9XG4gICAgICAgICAgICAgICAgaGVpZ2h0PXtoZWlnaHR9XG4gICAgICAgICAgICAgICAgcm93Q291bnQ9e3Jvd0NvdW50fVxuICAgICAgICAgICAgICAgIHJvd0hlaWdodD17cm93SGVpZ2h0fVxuICAgICAgICAgICAgICAgIHdpZHRoPXt3aWR0aH1cbiAgICAgICAgICAgICAgPjwvTGlzdD5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgPC9BdXRvU2l6ZXI+XG4gICAgICAgICl9XG4gICAgICA8L1dpbmRvd1Njcm9sbGVyPlxuICAgIDwvZGl2PlxuICApO1xufTtcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VFZmZlY3QsIHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgKiBhcyBzdHlsZXMgZnJvbSBcIi4vQ29tcGFuaWVzVGFibGUubW9kdWxlLnNjc3NcIjtcbmltcG9ydCB7IHVzZUFwcERpc3BhdGNoLCB1c2VBcHBTZWxlY3RvciB9IGZyb20gXCJAc3JjL3N0b3JlL2hvb2tzXCI7XG5pbXBvcnQge1xuICBhZGRJdGVtLFxuICByZW1vdmVTZWxlY3RlZCxcbiAgc2VsZWN0QWxsLFxuICB1bnNlbGVjdEFsbCxcbn0gZnJvbSBcIi4uL21vZGVsL3NsaWNlXCI7XG5pbXBvcnQgeyBUYWJsZVJvdyB9IGZyb20gXCIuL0NvbXBhbnlSb3dcIjtcbmltcG9ydCB7IFZpcnR1YWxpemVkVGFibGUgfSBmcm9tIFwiLi9WaXJ0dWFsaXplZFRhYmxlXCI7XG5pbXBvcnQgeyBpc0FsbENoZWNrZWQsIGlzQW55Q2hlY2tlZCB9IGZyb20gXCIuLi9tb2RlbC9zZWxlY3RvcnNcIjtcbmltcG9ydCB7IEFwcEJ1dHRvbiB9IGZyb20gXCJAc3JjL3NoYXJlL3VpL0FwcEJ1dHRvblwiO1xuaW1wb3J0IHsgQXBwVGV4dElucHV0IH0gZnJvbSBcIkBzcmMvc2hhcmUvdWkvQXBwVGV4dElucHV0XCI7XG5cbmV4cG9ydCBjb25zdCBDb21wYW5pZXNUYWJsZSA9ICgpID0+IHtcbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLnRhYmxlX2NvbnRhaW5lcn0+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLmNvbnRyb2xzX2NvbnRhaW5lcn0+XG4gICAgICAgIDxTZWxlY3Rpb25CdXR0b25zIC8+XG4gICAgICAgIDxOZXdDb21wYW55Rm9ybSAvPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLnRhYmxlfT5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlcy50YWJsZV9oZWFkZXJ9PlxuICAgICAgICAgIDxUYWJsZVJvdz5cbiAgICAgICAgICAgIDxkaXY+PC9kaXY+XG4gICAgICAgICAgICA8ZGl2PtCd0LDQt9Cy0LDQvdC40LU8L2Rpdj5cbiAgICAgICAgICAgIDxkaXY+0JDQtNGA0LXRgTwvZGl2PlxuICAgICAgICAgIDwvVGFibGVSb3c+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8VmlydHVhbGl6ZWRUYWJsZSByb3dIZWlnaHQ9ezUwfSAvPlxuICAgICAgICB7Lyog0YLRg9GCINC80L7QttC90L4g0YLRgNC10LrQsNGC0Ywg0LTQvtGB0YLQuNC20LXQvdC40LUg0LTQvdCwINC4INC00LjRgdC/0LDRgtGH0LjRgtGMINGE0LXRgtGHINC90L7QstGL0YUg0LrQvtC80L/QsNC90LjQuMyGKi99XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5cbmNvbnN0IFNlbGVjdGlvbkJ1dHRvbnMgPSAoKSA9PiB7XG4gIGNvbnN0IGRpc3BhdGNoID0gdXNlQXBwRGlzcGF0Y2goKTtcbiAgY29uc3QgaXNBbGxTZWxlY3RlZCA9IHVzZUFwcFNlbGVjdG9yKGlzQWxsQ2hlY2tlZCk7XG4gIGNvbnN0IGlzQW55U2VsZWN0ZWQgPSB1c2VBcHBTZWxlY3Rvcihpc0FueUNoZWNrZWQpO1xuICBjb25zdCBbdGV4dCwgc2V0VGV4dF0gPSB1c2VTdGF0ZShcItCS0YvQtNC10LvQuNGC0Ywg0LLRgdC1XCIpO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgc2V0VGV4dChpc0FsbFNlbGVjdGVkID8gXCLQntGC0LzQtdC90LjRgtGMINCy0YvQtNC10LvQtdC90LjQtVwiIDogXCLQktGL0LTQtdC70LjRgtGMINCy0YHQtVwiKTtcbiAgfSwgW2lzQWxsU2VsZWN0ZWRdKTtcblxuICBjb25zdCBoYW5kbGVUb2dnbGUgPSAoKSA9PiB7XG4gICAgaWYgKGlzQWxsU2VsZWN0ZWQpIHtcbiAgICAgIGRpc3BhdGNoKHVuc2VsZWN0QWxsKCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBkaXNwYXRjaChzZWxlY3RBbGwoKSk7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IGhhbmRsZURlbGV0ZVNlbGVjdGVkID0gKCkgPT4ge1xuICAgIGRpc3BhdGNoKHJlbW92ZVNlbGVjdGVkKCkpO1xuICB9O1xuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlcy5idXR0b25zX2NvbnRhaW5lcn0+XG4gICAgICA8QXBwQnV0dG9uIG9uQ2xpY2s9e2hhbmRsZVRvZ2dsZX0+e3RleHR9PC9BcHBCdXR0b24+XG4gICAgICA8QXBwQnV0dG9uIGRpc2FibGVkPXshaXNBbnlTZWxlY3RlZH0gb25DbGljaz17aGFuZGxlRGVsZXRlU2VsZWN0ZWR9PlxuICAgICAgICDQo9C00LDQu9C40YLRjCDQstGL0LHRgNCw0L3QvdGL0LVcbiAgICAgIDwvQXBwQnV0dG9uPlxuICAgIDwvZGl2PlxuICApO1xufTtcblxuY29uc3QgTmV3Q29tcGFueUZvcm0gPSAoKSA9PiB7XG4gIGNvbnN0IFtuZXdDb21wYW55TmFtZSwgc2V0TmV3Q29tcGFueU5hbWVdID0gdXNlU3RhdGUoXCJcIik7XG4gIGNvbnN0IFtuZXdDb21wYW55QWRkcmVzcywgc2V0TmV3Q29tcGFueUFkZHJlc3NdID0gdXNlU3RhdGUoXCJcIik7XG4gIGNvbnN0IGRpc3BhdGNoID0gdXNlQXBwRGlzcGF0Y2goKTtcbiAgY29uc3QgaGFuZGxlQWRkQ29tcGFueSA9ICgpID0+IHtcbiAgICBpZiAobmV3Q29tcGFueU5hbWUgJiYgbmV3Q29tcGFueUFkZHJlc3MpIHtcbiAgICAgIGRpc3BhdGNoKGFkZEl0ZW0oeyBuYW1lOiBuZXdDb21wYW55TmFtZSwgYWRkcmVzczogbmV3Q29tcGFueUFkZHJlc3MgfSkpO1xuICAgICAgc2V0TmV3Q29tcGFueU5hbWUoXCJcIik7XG4gICAgICBzZXROZXdDb21wYW55QWRkcmVzcyhcIlwiKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlcy5uZXdfY29tcGFueV9mb3JtfT5cbiAgICAgIDxBcHBUZXh0SW5wdXRcbiAgICAgICAgcGxhY2Vob2xkZXI9XCLQndCw0LfQstCw0L3QuNC1INC60L7QvNC/0LDQvdC40LhcIlxuICAgICAgICB2YWx1ZT17bmV3Q29tcGFueU5hbWV9XG4gICAgICAgIG9uQ2hhbmdlPXsoZSkgPT4gc2V0TmV3Q29tcGFueU5hbWUoZS50YXJnZXQudmFsdWUpfVxuICAgICAgLz5cbiAgICAgIDxBcHBUZXh0SW5wdXRcbiAgICAgICAgcGxhY2Vob2xkZXI9XCLQkNC00YDQtdGBINC60L7QvNC/0LDQvdC40LhcIlxuICAgICAgICB2YWx1ZT17bmV3Q29tcGFueUFkZHJlc3N9XG4gICAgICAgIG9uQ2hhbmdlPXsoZSkgPT4gc2V0TmV3Q29tcGFueUFkZHJlc3MoZS50YXJnZXQudmFsdWUpfVxuICAgICAgLz5cbiAgICAgIDxBcHBCdXR0b24gb25DbGljaz17aGFuZGxlQWRkQ29tcGFueX0+0JTQvtCx0LDQstC40YLRjDwvQXBwQnV0dG9uPlxuICAgIDwvZGl2PlxuICApO1xufTtcbiIsImltcG9ydCB7IGNvbmZpZ3VyZVN0b3JlLCBSZWR1Y2Vyc01hcE9iamVjdCB9IGZyb20gXCJAcmVkdXhqcy90b29sa2l0XCI7XG5pbXBvcnQgeyB0YWJsZVNsaWNlIH0gZnJvbSBcIkBzcmMvZmVhdHVyZXMvQ29tcGFuaWVzVGFibGVcIjtcblxuZXhwb3J0IHR5cGUgUm9vdFN0YXRlID0gUmV0dXJuVHlwZTx0eXBlb2Ygc3RvcmUuZ2V0U3RhdGU+O1xuZXhwb3J0IHR5cGUgQXBwRGlzcGF0Y2ggPSB0eXBlb2Ygc3RvcmUuZGlzcGF0Y2g7XG5leHBvcnQgdHlwZSBBcHBSZWR1Y2VycyA9IFJlZHVjZXJzTWFwT2JqZWN0PFN0YXRlU2NoZW1hPjtcbmV4cG9ydCB0eXBlIFN0YXRlU2NoZW1hS2V5ID0ga2V5b2YgU3RhdGVTY2hlbWE7XG5cbmV4cG9ydCBpbnRlcmZhY2UgU3RhdGVTY2hlbWEge31cbmV4cG9ydCBjb25zdCBzdG9yZSA9IGNvbmZpZ3VyZVN0b3JlKHtcbiAgcmVkdWNlcjoge1xuICAgIHRhYmxlOiB0YWJsZVNsaWNlLnJlZHVjZXIsXG4gIH0sXG59KTtcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbM10udXNlWzFdIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2dsb2JhbC5zY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5vcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzNdLnVzZVsxXSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9nbG9iYWwuc2Nzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImltcG9ydCB7IENvbXBhbmllc1RhYmxlIH0gZnJvbSBcIkBzcmMvZmVhdHVyZXMvQ29tcGFuaWVzVGFibGVcIjtcbmltcG9ydCBcIi4vZ2xvYmFsLnNjc3NcIjtcbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmV4cG9ydCBjb25zdCBBcHAgPSAoKSA9PiB7XG4gIHJldHVybiAoXG4gICAgPGRpdj5cbiAgICAgIDxDb21wYW5pZXNUYWJsZSAvPlxuICAgIDwvZGl2PlxuICApO1xufTtcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IFN0cmljdE1vZGUgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IGNyZWF0ZVJvb3QgfSBmcm9tIFwicmVhY3QtZG9tL2NsaWVudFwiO1xuaW1wb3J0IHsgUHJvdmlkZXIgfSBmcm9tIFwicmVhY3QtcmVkdXhcIjtcbmltcG9ydCB7IHN0b3JlIH0gZnJvbSBcIi4vc3RvcmVcIjtcbmltcG9ydCB7IEFwcCB9IGZyb20gXCIuL2FwcFwiO1xuXG5jb25zdCByb290ID0gY3JlYXRlUm9vdChkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInJvb3RcIikhKTtcbnJvb3QucmVuZGVyKFxuICA8U3RyaWN0TW9kZT5cbiAgICA8UHJvdmlkZXIgc3RvcmU9e3N0b3JlfT5cbiAgICAgIDxBcHAgLz5cbiAgICA8L1Byb3ZpZGVyPlxuICA8L1N0cmljdE1vZGU+LFxuKTtcbiJdLCJuYW1lcyI6WyJfX19DU1NfTE9BREVSX0VYUE9SVF9fXyIsInB1c2giLCJtb2R1bGUiLCJpZCIsInRhYmxlX2NvbnRhaW5lciIsImNvbnRyb2xzX2NvbnRhaW5lciIsImJ1dHRvbnNfY29udGFpbmVyIiwibmV3X2NvbXBhbnlfZm9ybSIsInRhYmxlIiwidGFibGVfaGVhZGVyIiwidGFibGVfcm93IiwiYnV0dG9uIiwic21hbGwiLCJsYXJnZSIsIm1lZGl1bSIsInByaW1hcnkiLCJzZWNvbmRhcnkiLCJkYW5nZXIiLCJpbnB1dCIsIndyYXBwZXIiLCJjaGlsZCIsImV4cG9ydHMiLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibGlzdCIsInRvU3RyaW5nIiwidGhpcyIsIm1hcCIsIml0ZW0iLCJjb250ZW50IiwibmVlZExheWVyIiwiY29uY2F0IiwibGVuZ3RoIiwiam9pbiIsImkiLCJtb2R1bGVzIiwibWVkaWEiLCJkZWR1cGUiLCJzdXBwb3J0cyIsImxheWVyIiwidW5kZWZpbmVkIiwiYWxyZWFkeUltcG9ydGVkTW9kdWxlcyIsImsiLCJfayIsImNzc01hcHBpbmciLCJidG9hIiwiYmFzZTY0IiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJKU09OIiwic3RyaW5naWZ5IiwiZGF0YSIsInNvdXJjZU1hcHBpbmciLCJTY2hlZHVsZXIiLCJSZWFjdCIsIlJlYWN0RE9NIiwiZm9ybWF0UHJvZEVycm9yTWVzc2FnZSIsImNvZGUiLCJ1cmwiLCJhcmd1bWVudHMiLCJSRUFDVF9MRUdBQ1lfRUxFTUVOVF9UWVBFIiwiU3ltYm9sIiwiZm9yIiwiUkVBQ1RfRUxFTUVOVF9UWVBFIiwiUkVBQ1RfUE9SVEFMX1RZUEUiLCJSRUFDVF9GUkFHTUVOVF9UWVBFIiwiUkVBQ1RfU1RSSUNUX01PREVfVFlQRSIsIlJFQUNUX1BST0ZJTEVSX1RZUEUiLCJSRUFDVF9QUk9WSURFUl9UWVBFIiwiUkVBQ1RfQ09OU1VNRVJfVFlQRSIsIlJFQUNUX0NPTlRFWFRfVFlQRSIsIlJFQUNUX0ZPUldBUkRfUkVGX1RZUEUiLCJSRUFDVF9TVVNQRU5TRV9UWVBFIiwiUkVBQ1RfU1VTUEVOU0VfTElTVF9UWVBFIiwiUkVBQ1RfTUVNT19UWVBFIiwiUkVBQ1RfTEFaWV9UWVBFIiwiUkVBQ1RfT0ZGU0NSRUVOX1RZUEUiLCJSRUFDVF9NRU1PX0NBQ0hFX1NFTlRJTkVMIiwiTUFZQkVfSVRFUkFUT1JfU1lNQk9MIiwiaXRlcmF0b3IiLCJnZXRJdGVyYXRvckZuIiwibWF5YmVJdGVyYWJsZSIsIlJFQUNUX0NMSUVOVF9SRUZFUkVOQ0UiLCJnZXRDb21wb25lbnROYW1lRnJvbVR5cGUiLCJ0eXBlIiwiJCR0eXBlb2YiLCJkaXNwbGF5TmFtZSIsIm5hbWUiLCJfY29udGV4dCIsImlubmVyVHlwZSIsInJlbmRlciIsIl9wYXlsb2FkIiwiX2luaXQiLCJ4IiwicHJlZml4Iiwic3VmZml4IiwiUmVhY3RTaGFyZWRJbnRlcm5hbHMiLCJfX0NMSUVOVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9XQVJOX1VTRVJTX1RIRVlfQ0FOTk9UX1VQR1JBREUiLCJhc3NpZ24iLCJPYmplY3QiLCJkZXNjcmliZUJ1aWx0SW5Db21wb25lbnRGcmFtZSIsIkVycm9yIiwibWF0Y2giLCJzdGFjayIsInRyaW0iLCJpbmRleE9mIiwicmVlbnRyeSIsImRlc2NyaWJlTmF0aXZlQ29tcG9uZW50RnJhbWUiLCJmbiIsImNvbnN0cnVjdCIsInByZXZpb3VzUHJlcGFyZVN0YWNrVHJhY2UiLCJwcmVwYXJlU3RhY2tUcmFjZSIsIlJ1bkluUm9vdEZyYW1lIiwiRGV0ZXJtaW5lQ29tcG9uZW50RnJhbWVSb290IiwiRmFrZSIsImRlZmluZVByb3BlcnR5IiwicHJvdG90eXBlIiwic2V0IiwiUmVmbGVjdCIsImNvbnRyb2wiLCJjYWxsIiwieCQwIiwieCQxIiwiY2F0Y2giLCJzYW1wbGUiLCJuYW1lUHJvcERlc2NyaXB0b3IiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJjb25maWd1cmFibGUiLCJ2YWx1ZSIsIl9SdW5JblJvb3RGcmFtZSREZXRlciIsInNhbXBsZVN0YWNrIiwiY29udHJvbFN0YWNrIiwic2FtcGxlTGluZXMiLCJzcGxpdCIsImNvbnRyb2xMaW5lcyIsImluY2x1ZGVzIiwiZnJhbWUiLCJyZXBsYWNlIiwiZGVzY3JpYmVGaWJlciIsImZpYmVyIiwidGFnIiwiZ2V0U3RhY2tCeUZpYmVySW5EZXZBbmRQcm9kIiwid29ya0luUHJvZ3Jlc3MiLCJpbmZvIiwicmV0dXJuIiwibWVzc2FnZSIsImdldE5lYXJlc3RNb3VudGVkRmliZXIiLCJub2RlIiwibmVhcmVzdE1vdW50ZWQiLCJhbHRlcm5hdGUiLCJmbGFncyIsImdldFN1c3BlbnNlSW5zdGFuY2VGcm9tRmliZXIiLCJzdXNwZW5zZVN0YXRlIiwibWVtb2l6ZWRTdGF0ZSIsImRlaHlkcmF0ZWQiLCJhc3NlcnRJc01vdW50ZWQiLCJmaW5kQ3VycmVudEhvc3RGaWJlckltcGwiLCJzaWJsaW5nIiwiaXNBcnJheUltcGwiLCJBcnJheSIsImlzQXJyYXkiLCJSZWFjdERPTVNoYXJlZEludGVybmFscyIsIl9fRE9NX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1dBUk5fVVNFUlNfVEhFWV9DQU5OT1RfVVBHUkFERSIsInNoYXJlZE5vdFBlbmRpbmdPYmplY3QiLCJwZW5kaW5nIiwibWV0aG9kIiwiYWN0aW9uIiwidmFsdWVTdGFjayIsImluZGV4IiwiY3JlYXRlQ3Vyc29yIiwiZGVmYXVsdFZhbHVlIiwiY3VycmVudCIsInBvcCIsImN1cnNvciIsImNvbnRleHRTdGFja0N1cnNvciIsImNvbnRleHRGaWJlclN0YWNrQ3Vyc29yIiwicm9vdEluc3RhbmNlU3RhY2tDdXJzb3IiLCJob3N0VHJhbnNpdGlvblByb3ZpZGVyQ3Vyc29yIiwicHVzaEhvc3RDb250YWluZXIiLCJuZXh0Um9vdEluc3RhbmNlIiwibm9kZVR5cGUiLCJkb2N1bWVudEVsZW1lbnQiLCJuYW1lc3BhY2VVUkkiLCJnZXRPd25Ib3N0Q29udGV4dCIsInBhcmVudE5vZGUiLCJ0YWdOYW1lIiwiZ2V0Q2hpbGRIb3N0Q29udGV4dFByb2QiLCJwb3BIb3N0Q29udGFpbmVyIiwicHVzaEhvc3RDb250ZXh0IiwiY29udGV4dCIsIkpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCIsInBvcEhvc3RDb250ZXh0IiwiSG9zdFRyYW5zaXRpb25Db250ZXh0IiwiX2N1cnJlbnRWYWx1ZSIsImhhc093blByb3BlcnR5Iiwic2NoZWR1bGVDYWxsYmFjayQzIiwidW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayIsImNhbmNlbENhbGxiYWNrJDEiLCJ1bnN0YWJsZV9jYW5jZWxDYWxsYmFjayIsInNob3VsZFlpZWxkIiwidW5zdGFibGVfc2hvdWxkWWllbGQiLCJyZXF1ZXN0UGFpbnQiLCJ1bnN0YWJsZV9yZXF1ZXN0UGFpbnQiLCJub3ciLCJ1bnN0YWJsZV9ub3ciLCJnZXRDdXJyZW50UHJpb3JpdHlMZXZlbCIsInVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsIiwiSW1tZWRpYXRlUHJpb3JpdHkiLCJ1bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eSIsIlVzZXJCbG9ja2luZ1ByaW9yaXR5IiwidW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHkiLCJOb3JtYWxQcmlvcml0eSQxIiwidW5zdGFibGVfTm9ybWFsUHJpb3JpdHkiLCJMb3dQcmlvcml0eSIsInVuc3RhYmxlX0xvd1ByaW9yaXR5IiwiSWRsZVByaW9yaXR5IiwidW5zdGFibGVfSWRsZVByaW9yaXR5IiwibG9nJDEiLCJsb2ciLCJ1bnN0YWJsZV9zZXREaXNhYmxlWWllbGRWYWx1ZSIsInJlbmRlcmVySUQiLCJpbmplY3RlZEhvb2siLCJzZXRJc1N0cmljdE1vZGVGb3JEZXZ0b29scyIsIm5ld0lzU3RyaWN0TW9kZSIsInNldFN0cmljdE1vZGUiLCJlcnIiLCJjbHozMiIsIk1hdGgiLCJMTjIiLCJuZXh0VHJhbnNpdGlvbkxhbmUiLCJuZXh0UmV0cnlMYW5lIiwiZ2V0SGlnaGVzdFByaW9yaXR5TGFuZXMiLCJsYW5lcyIsInBlbmRpbmdTeW5jTGFuZXMiLCJnZXROZXh0TGFuZXMiLCJyb290Iiwid2lwTGFuZXMiLCJwZW5kaW5nTGFuZXMiLCJuZXh0TGFuZXMiLCJzdXNwZW5kZWRMYW5lcyIsInBpbmdlZExhbmVzIiwid2FybUxhbmVzIiwiZmluaXNoZWRMYW5lcyIsIm5vbklkbGVQZW5kaW5nTGFuZXMiLCJjaGVja0lmUm9vdElzUHJlcmVuZGVyaW5nIiwicmVuZGVyTGFuZXMiLCJjb21wdXRlRXhwaXJhdGlvblRpbWUiLCJsYW5lIiwiY3VycmVudFRpbWUiLCJjbGFpbU5leHRUcmFuc2l0aW9uTGFuZSIsImNsYWltTmV4dFJldHJ5TGFuZSIsImNyZWF0ZUxhbmVNYXAiLCJpbml0aWFsIiwibGFuZU1hcCIsIm1hcmtSb290VXBkYXRlZCQxIiwidXBkYXRlTGFuZSIsIm1hcmtTcGF3bmVkRGVmZXJyZWRMYW5lIiwic3Bhd25lZExhbmUiLCJlbnRhbmdsZWRMYW5lcyIsInNwYXduZWRMYW5lSW5kZXgiLCJlbnRhbmdsZW1lbnRzIiwibWFya1Jvb3RFbnRhbmdsZWQiLCJyb290RW50YW5nbGVkTGFuZXMiLCJpbmRleCQ4IiwibGFuZXNUb0V2ZW50UHJpb3JpdHkiLCJyZXNvbHZlVXBkYXRlUHJpb3JpdHkiLCJ1cGRhdGVQcmlvcml0eSIsInAiLCJ3aW5kb3ciLCJldmVudCIsImdldEV2ZW50UHJpb3JpdHkiLCJyYW5kb21LZXkiLCJyYW5kb20iLCJzbGljZSIsImludGVybmFsSW5zdGFuY2VLZXkiLCJpbnRlcm5hbFByb3BzS2V5IiwiaW50ZXJuYWxDb250YWluZXJJbnN0YW5jZUtleSIsImludGVybmFsRXZlbnRIYW5kbGVyc0tleSIsImludGVybmFsRXZlbnRIYW5kbGVyTGlzdGVuZXJzS2V5IiwiaW50ZXJuYWxFdmVudEhhbmRsZXNTZXRLZXkiLCJpbnRlcm5hbFJvb3ROb2RlUmVzb3VyY2VzS2V5IiwiaW50ZXJuYWxIb2lzdGFibGVNYXJrZXIiLCJkZXRhY2hEZWxldGVkSW5zdGFuY2UiLCJnZXRDbG9zZXN0SW5zdGFuY2VGcm9tTm9kZSIsInRhcmdldE5vZGUiLCJ0YXJnZXRJbnN0IiwiZ2V0UGFyZW50U3VzcGVuc2VJbnN0YW5jZSIsImdldEluc3RhbmNlRnJvbU5vZGUiLCJnZXROb2RlRnJvbUluc3RhbmNlIiwiaW5zdCIsInN0YXRlTm9kZSIsImdldFJlc291cmNlc0Zyb21Sb290IiwicmVzb3VyY2VzIiwiaG9pc3RhYmxlU3R5bGVzIiwiTWFwIiwiaG9pc3RhYmxlU2NyaXB0cyIsIm1hcmtOb2RlQXNIb2lzdGFibGUiLCJhbGxOYXRpdmVFdmVudHMiLCJTZXQiLCJyZWdpc3RyYXRpb25OYW1lRGVwZW5kZW5jaWVzIiwicmVnaXN0ZXJUd29QaGFzZUV2ZW50IiwicmVnaXN0cmF0aW9uTmFtZSIsImRlcGVuZGVuY2llcyIsInJlZ2lzdGVyRGlyZWN0RXZlbnQiLCJhZGQiLCJjYW5Vc2VET00iLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJWQUxJRF9BVFRSSUJVVEVfTkFNRV9SRUdFWCIsIlJlZ0V4cCIsImlsbGVnYWxBdHRyaWJ1dGVOYW1lQ2FjaGUiLCJ2YWxpZGF0ZWRBdHRyaWJ1dGVOYW1lQ2FjaGUiLCJzZXRWYWx1ZUZvckF0dHJpYnV0ZSIsImF0dHJpYnV0ZU5hbWUiLCJ0ZXN0IiwicmVtb3ZlQXR0cmlidXRlIiwicHJlZml4JDEwIiwidG9Mb3dlckNhc2UiLCJzZXRBdHRyaWJ1dGUiLCJzZXRWYWx1ZUZvcktub3duQXR0cmlidXRlIiwic2V0VmFsdWVGb3JOYW1lc3BhY2VkQXR0cmlidXRlIiwibmFtZXNwYWNlIiwic2V0QXR0cmlidXRlTlMiLCJnZXRUb1N0cmluZ1ZhbHVlIiwiaXNDaGVja2FibGUiLCJlbGVtIiwibm9kZU5hbWUiLCJ0cmFjayIsIl92YWx1ZVRyYWNrZXIiLCJ2YWx1ZUZpZWxkIiwiZGVzY3JpcHRvciIsImNvbnN0cnVjdG9yIiwiY3VycmVudFZhbHVlIiwiZ2V0IiwiZW51bWVyYWJsZSIsImdldFZhbHVlIiwic2V0VmFsdWUiLCJzdG9wVHJhY2tpbmciLCJ0cmFja1ZhbHVlT25Ob2RlIiwidXBkYXRlVmFsdWVJZkNoYW5nZWQiLCJ0cmFja2VyIiwibGFzdFZhbHVlIiwiY2hlY2tlZCIsImdldEFjdGl2ZUVsZW1lbnQiLCJkb2MiLCJhY3RpdmVFbGVtZW50IiwiYm9keSIsImUiLCJlc2NhcGVTZWxlY3RvckF0dHJpYnV0ZVZhbHVlSW5zaWRlRG91YmxlUXVvdGVzUmVnZXgiLCJlc2NhcGVTZWxlY3RvckF0dHJpYnV0ZVZhbHVlSW5zaWRlRG91YmxlUXVvdGVzIiwiY2giLCJjaGFyQ29kZUF0IiwidXBkYXRlSW5wdXQiLCJlbGVtZW50IiwibGFzdERlZmF1bHRWYWx1ZSIsImRlZmF1bHRDaGVja2VkIiwic2V0RGVmYXVsdFZhbHVlIiwiaW5pdElucHV0IiwiaXNIeWRyYXRpbmciLCJvd25lckRvY3VtZW50IiwidXBkYXRlT3B0aW9ucyIsIm11bHRpcGxlIiwicHJvcFZhbHVlIiwic2V0RGVmYXVsdFNlbGVjdGVkIiwib3B0aW9ucyIsInNlbGVjdGVkIiwiZGVmYXVsdFNlbGVjdGVkIiwiZGlzYWJsZWQiLCJ1cGRhdGVUZXh0YXJlYSIsImluaXRUZXh0YXJlYSIsImNoaWxkcmVuIiwidGV4dENvbnRlbnQiLCJzZXRUZXh0Q29udGVudCIsInRleHQiLCJmaXJzdENoaWxkIiwibGFzdENoaWxkIiwibm9kZVZhbHVlIiwidW5pdGxlc3NOdW1iZXJzIiwic2V0VmFsdWVGb3JTdHlsZSIsInN0eWxlIiwic3R5bGVOYW1lIiwiaXNDdXN0b21Qcm9wZXJ0eSIsInNldFByb3BlcnR5IiwiY3NzRmxvYXQiLCJoYXMiLCJzZXRWYWx1ZUZvclN0eWxlcyIsInN0eWxlcyIsInByZXZTdHlsZXMiLCJzdHlsZU5hbWUkMTYiLCJzdHlsZU5hbWUkMTciLCJpc0N1c3RvbUVsZW1lbnQiLCJhbGlhc2VzIiwiaXNKYXZhU2NyaXB0UHJvdG9jb2wiLCJzYW5pdGl6ZVVSTCIsImN1cnJlbnRSZXBsYXlpbmdFdmVudCIsImdldEV2ZW50VGFyZ2V0IiwibmF0aXZlRXZlbnQiLCJ0YXJnZXQiLCJzcmNFbGVtZW50IiwiY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQiLCJyZXN0b3JlVGFyZ2V0IiwicmVzdG9yZVF1ZXVlIiwicmVzdG9yZVN0YXRlT2ZUYXJnZXQiLCJpbnRlcm5hbEluc3RhbmNlIiwicHJvcHMiLCJhIiwicXVlcnlTZWxlY3RvckFsbCIsIm90aGVyTm9kZSIsImZvcm0iLCJvdGhlclByb3BzIiwiaXNJbnNpZGVFdmVudEhhbmRsZXIiLCJiYXRjaGVkVXBkYXRlcyQxIiwiYiIsImZsdXNoU3luY1dvcmskMSIsImdldExpc3RlbmVyIiwicGFzc2l2ZUJyb3dzZXJFdmVudHNTdXBwb3J0ZWQiLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInN0YXJ0VGV4dCIsImZhbGxiYWNrVGV4dCIsImdldERhdGEiLCJzdGFydCIsImVuZCIsInN0YXJ0VmFsdWUiLCJzdGFydExlbmd0aCIsImVuZFZhbHVlIiwiZW5kTGVuZ3RoIiwibWluRW5kIiwiZ2V0RXZlbnRDaGFyQ29kZSIsImtleUNvZGUiLCJjaGFyQ29kZSIsImZ1bmN0aW9uVGhhdFJldHVybnNUcnVlIiwiZnVuY3Rpb25UaGF0UmV0dXJuc0ZhbHNlIiwiY3JlYXRlU3ludGhldGljRXZlbnQiLCJJbnRlcmZhY2UiLCJTeW50aGV0aWNCYXNlRXZlbnQiLCJyZWFjdE5hbWUiLCJyZWFjdEV2ZW50VHlwZSIsIm5hdGl2ZUV2ZW50VGFyZ2V0IiwicHJvcE5hbWUiLCJfcmVhY3ROYW1lIiwiX3RhcmdldEluc3QiLCJjdXJyZW50VGFyZ2V0IiwiaXNEZWZhdWx0UHJldmVudGVkIiwiZGVmYXVsdFByZXZlbnRlZCIsInJldHVyblZhbHVlIiwiaXNQcm9wYWdhdGlvblN0b3BwZWQiLCJwcmV2ZW50RGVmYXVsdCIsInN0b3BQcm9wYWdhdGlvbiIsImNhbmNlbEJ1YmJsZSIsInBlcnNpc3QiLCJpc1BlcnNpc3RlbnQiLCJsYXN0TW92ZW1lbnRYIiwibGFzdE1vdmVtZW50WSIsImxhc3RNb3VzZUV2ZW50IiwiRXZlbnRJbnRlcmZhY2UiLCJldmVudFBoYXNlIiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJ0aW1lU3RhbXAiLCJEYXRlIiwiaXNUcnVzdGVkIiwiU3ludGhldGljRXZlbnQiLCJVSUV2ZW50SW50ZXJmYWNlIiwidmlldyIsImRldGFpbCIsIlN5bnRoZXRpY1VJRXZlbnQiLCJNb3VzZUV2ZW50SW50ZXJmYWNlIiwic2NyZWVuWCIsInNjcmVlblkiLCJjbGllbnRYIiwiY2xpZW50WSIsInBhZ2VYIiwicGFnZVkiLCJjdHJsS2V5Iiwic2hpZnRLZXkiLCJhbHRLZXkiLCJtZXRhS2V5IiwiZ2V0TW9kaWZpZXJTdGF0ZSIsImdldEV2ZW50TW9kaWZpZXJTdGF0ZSIsImJ1dHRvbnMiLCJyZWxhdGVkVGFyZ2V0IiwiZnJvbUVsZW1lbnQiLCJ0b0VsZW1lbnQiLCJtb3ZlbWVudFgiLCJtb3ZlbWVudFkiLCJTeW50aGV0aWNNb3VzZUV2ZW50IiwiU3ludGhldGljRHJhZ0V2ZW50IiwiZGF0YVRyYW5zZmVyIiwiU3ludGhldGljRm9jdXNFdmVudCIsIlN5bnRoZXRpY0FuaW1hdGlvbkV2ZW50IiwiYW5pbWF0aW9uTmFtZSIsImVsYXBzZWRUaW1lIiwicHNldWRvRWxlbWVudCIsIlN5bnRoZXRpY0NsaXBib2FyZEV2ZW50IiwiY2xpcGJvYXJkRGF0YSIsIlN5bnRoZXRpY0NvbXBvc2l0aW9uRXZlbnQiLCJub3JtYWxpemVLZXkiLCJFc2MiLCJTcGFjZWJhciIsIkxlZnQiLCJVcCIsIlJpZ2h0IiwiRG93biIsIkRlbCIsIldpbiIsIk1lbnUiLCJBcHBzIiwiU2Nyb2xsIiwiTW96UHJpbnRhYmxlS2V5IiwidHJhbnNsYXRlVG9LZXkiLCJtb2RpZmllcktleVRvUHJvcCIsIkFsdCIsIkNvbnRyb2wiLCJNZXRhIiwiU2hpZnQiLCJtb2RpZmllclN0YXRlR2V0dGVyIiwia2V5QXJnIiwiU3ludGhldGljS2V5Ym9hcmRFdmVudCIsImtleSIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsImxvY2F0aW9uIiwicmVwZWF0IiwibG9jYWxlIiwid2hpY2giLCJTeW50aGV0aWNQb2ludGVyRXZlbnQiLCJwb2ludGVySWQiLCJ3aWR0aCIsImhlaWdodCIsInByZXNzdXJlIiwidGFuZ2VudGlhbFByZXNzdXJlIiwidGlsdFgiLCJ0aWx0WSIsInR3aXN0IiwicG9pbnRlclR5cGUiLCJpc1ByaW1hcnkiLCJTeW50aGV0aWNUb3VjaEV2ZW50IiwidG91Y2hlcyIsInRhcmdldFRvdWNoZXMiLCJjaGFuZ2VkVG91Y2hlcyIsIlN5bnRoZXRpY1RyYW5zaXRpb25FdmVudCIsInByb3BlcnR5TmFtZSIsIlN5bnRoZXRpY1doZWVsRXZlbnQiLCJkZWx0YVgiLCJ3aGVlbERlbHRhWCIsImRlbHRhWSIsIndoZWVsRGVsdGFZIiwid2hlZWxEZWx0YSIsImRlbHRhWiIsImRlbHRhTW9kZSIsIlN5bnRoZXRpY1RvZ2dsZUV2ZW50IiwibmV3U3RhdGUiLCJvbGRTdGF0ZSIsIkVORF9LRVlDT0RFUyIsImNhblVzZUNvbXBvc2l0aW9uRXZlbnQiLCJkb2N1bWVudE1vZGUiLCJjYW5Vc2VUZXh0SW5wdXRFdmVudCIsInVzZUZhbGxiYWNrQ29tcG9zaXRpb25EYXRhIiwiU1BBQ0VCQVJfQ0hBUiIsImhhc1NwYWNlS2V5cHJlc3MiLCJpc0ZhbGxiYWNrQ29tcG9zaXRpb25FbmQiLCJkb21FdmVudE5hbWUiLCJnZXREYXRhRnJvbUN1c3RvbUV2ZW50IiwiaXNDb21wb3NpbmciLCJzdXBwb3J0ZWRJbnB1dFR5cGVzIiwiY29sb3IiLCJkYXRlIiwiZGF0ZXRpbWUiLCJlbWFpbCIsIm1vbnRoIiwibnVtYmVyIiwicGFzc3dvcmQiLCJyYW5nZSIsInNlYXJjaCIsInRlbCIsInRpbWUiLCJ3ZWVrIiwiaXNUZXh0SW5wdXRFbGVtZW50IiwiY3JlYXRlQW5kQWNjdW11bGF0ZUNoYW5nZUV2ZW50IiwiZGlzcGF0Y2hRdWV1ZSIsImFjY3VtdWxhdGVUd29QaGFzZUxpc3RlbmVycyIsImxpc3RlbmVycyIsImFjdGl2ZUVsZW1lbnQkMSIsImFjdGl2ZUVsZW1lbnRJbnN0JDEiLCJydW5FdmVudEluQmF0Y2giLCJwcm9jZXNzRGlzcGF0Y2hRdWV1ZSIsImdldEluc3RJZlZhbHVlQ2hhbmdlZCIsImdldFRhcmdldEluc3RGb3JDaGFuZ2VFdmVudCIsImlzSW5wdXRFdmVudFN1cHBvcnRlZCIsIkpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCRqc2NvbXAkMjgzIiwiaXNTdXBwb3J0ZWQkanNjb21wJGlubGluZV80MTgiLCJlbGVtZW50JGpzY29tcCRpbmxpbmVfNDE5Iiwib25pbnB1dCIsInN0b3BXYXRjaGluZ0ZvclZhbHVlQ2hhbmdlIiwiZGV0YWNoRXZlbnQiLCJoYW5kbGVQcm9wZXJ0eUNoYW5nZSIsImhhbmRsZUV2ZW50c0ZvcklucHV0RXZlbnRQb2x5ZmlsbCIsImF0dGFjaEV2ZW50IiwiZ2V0VGFyZ2V0SW5zdEZvcklucHV0RXZlbnRQb2x5ZmlsbCIsImdldFRhcmdldEluc3RGb3JDbGlja0V2ZW50IiwiZ2V0VGFyZ2V0SW5zdEZvcklucHV0T3JDaGFuZ2VFdmVudCIsIm9iamVjdElzIiwiaXMiLCJ5Iiwic2hhbGxvd0VxdWFsIiwib2JqQSIsIm9iakIiLCJrZXlzQSIsImtleXMiLCJrZXlzQiIsImN1cnJlbnRLZXkiLCJnZXRMZWFmTm9kZSIsImdldE5vZGVGb3JDaGFyYWN0ZXJPZmZzZXQiLCJvZmZzZXQiLCJub2RlRW5kIiwibmV4dFNpYmxpbmciLCJjb250YWluc05vZGUiLCJvdXRlck5vZGUiLCJpbm5lck5vZGUiLCJjb250YWlucyIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwiZ2V0QWN0aXZlRWxlbWVudERlZXAiLCJjb250YWluZXJJbmZvIiwiZGVmYXVsdFZpZXciLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnRXaW5kb3ciLCJocmVmIiwiaGFzU2VsZWN0aW9uQ2FwYWJpbGl0aWVzIiwiY29udGVudEVkaXRhYmxlIiwicmVzdG9yZVNlbGVjdGlvbiIsInByaW9yU2VsZWN0aW9uSW5mb3JtYXRpb24iLCJjdXJGb2N1c2VkRWxlbSIsImZvY3VzZWRFbGVtIiwicHJpb3JTZWxlY3Rpb25SYW5nZSIsInNlbGVjdGlvblJhbmdlIiwic2VsZWN0aW9uU3RhcnQiLCJzZWxlY3Rpb25FbmQiLCJtaW4iLCJnZXRTZWxlY3Rpb24iLCJleHRlbmQiLCJlbmRNYXJrZXIiLCJyYW5nZUNvdW50IiwiYW5jaG9yTm9kZSIsImFuY2hvck9mZnNldCIsImZvY3VzTm9kZSIsImZvY3VzT2Zmc2V0IiwiY3JlYXRlUmFuZ2UiLCJzZXRTdGFydCIsInJlbW92ZUFsbFJhbmdlcyIsImFkZFJhbmdlIiwic2V0RW5kIiwibGVmdCIsInNjcm9sbExlZnQiLCJ0b3AiLCJzY3JvbGxUb3AiLCJmb2N1cyIsInNraXBTZWxlY3Rpb25DaGFuZ2VFdmVudCIsImFjdGl2ZUVsZW1lbnRJbnN0IiwibGFzdFNlbGVjdGlvbiIsIm1vdXNlRG93biIsImNvbnN0cnVjdFNlbGVjdEV2ZW50IiwibWFrZVByZWZpeE1hcCIsInN0eWxlUHJvcCIsImV2ZW50TmFtZSIsInByZWZpeGVzIiwidmVuZG9yUHJlZml4ZXMiLCJhbmltYXRpb25lbmQiLCJhbmltYXRpb25pdGVyYXRpb24iLCJhbmltYXRpb25zdGFydCIsInRyYW5zaXRpb25ydW4iLCJ0cmFuc2l0aW9uc3RhcnQiLCJ0cmFuc2l0aW9uY2FuY2VsIiwidHJhbnNpdGlvbmVuZCIsInByZWZpeGVkRXZlbnROYW1lcyIsImdldFZlbmRvclByZWZpeGVkRXZlbnROYW1lIiwicHJlZml4TWFwIiwiYW5pbWF0aW9uIiwidHJhbnNpdGlvbiIsIkFOSU1BVElPTl9FTkQiLCJBTklNQVRJT05fSVRFUkFUSU9OIiwiQU5JTUFUSU9OX1NUQVJUIiwiVFJBTlNJVElPTl9SVU4iLCJUUkFOU0lUSU9OX1NUQVJUIiwiVFJBTlNJVElPTl9DQU5DRUwiLCJUUkFOU0lUSU9OX0VORCIsInRvcExldmVsRXZlbnRzVG9SZWFjdE5hbWVzIiwic2ltcGxlRXZlbnRQbHVnaW5FdmVudHMiLCJyZWdpc3RlclNpbXBsZUV2ZW50IiwiY29uY3VycmVudFF1ZXVlcyIsImNvbmN1cnJlbnRRdWV1ZXNJbmRleCIsImNvbmN1cnJlbnRseVVwZGF0ZWRMYW5lcyIsImZpbmlzaFF1ZXVlaW5nQ29uY3VycmVudFVwZGF0ZXMiLCJlbmRJbmRleCIsInF1ZXVlIiwidXBkYXRlIiwibmV4dCIsIm1hcmtVcGRhdGVMYW5lRnJvbUZpYmVyVG9Sb290IiwiZW5xdWV1ZVVwZGF0ZSQxIiwiZW5xdWV1ZUNvbmN1cnJlbnRIb29rVXBkYXRlIiwiZ2V0Um9vdEZvclVwZGF0ZWRGaWJlciIsImVucXVldWVDb25jdXJyZW50UmVuZGVyRm9yTGFuZSIsInNvdXJjZUZpYmVyIiwiaXNIaWRkZW4iLCJwYXJlbnQiLCJjaGlsZExhbmVzIiwiX3Zpc2liaWxpdHkiLCJoaWRkZW5VcGRhdGVzIiwibmVzdGVkVXBkYXRlQ291bnQiLCJyb290V2l0aE5lc3RlZFVwZGF0ZXMiLCJlbXB0eUNvbnRleHRPYmplY3QiLCJDYXB0dXJlZFN0YWNrcyIsIldlYWtNYXAiLCJjcmVhdGVDYXB0dXJlZFZhbHVlQXRGaWJlciIsInNvdXJjZSIsImV4aXN0aW5nIiwiZm9ya1N0YWNrIiwiZm9ya1N0YWNrSW5kZXgiLCJ0cmVlRm9ya1Byb3ZpZGVyIiwidHJlZUZvcmtDb3VudCIsImlkU3RhY2siLCJpZFN0YWNrSW5kZXgiLCJ0cmVlQ29udGV4dFByb3ZpZGVyIiwidHJlZUNvbnRleHRJZCIsInRyZWVDb250ZXh0T3ZlcmZsb3ciLCJwdXNoVHJlZUZvcmsiLCJ0b3RhbENoaWxkcmVuIiwicHVzaFRyZWVJZCIsImJhc2VJZFdpdGhMZWFkaW5nQml0IiwiYmFzZUxlbmd0aCIsIm51bWJlck9mT3ZlcmZsb3dCaXRzIiwicHVzaE1hdGVyaWFsaXplZFRyZWVJZCIsInBvcFRyZWVDb250ZXh0IiwiaHlkcmF0aW9uUGFyZW50RmliZXIiLCJuZXh0SHlkcmF0YWJsZUluc3RhbmNlIiwiaHlkcmF0aW9uRXJyb3JzIiwicm9vdE9yU2luZ2xldG9uQ29udGV4dCIsIkh5ZHJhdGlvbk1pc21hdGNoRXhjZXB0aW9uIiwidGhyb3dPbkh5ZHJhdGlvbk1pc21hdGNoIiwicXVldWVIeWRyYXRpb25FcnJvciIsInByZXBhcmVUb0h5ZHJhdGVIb3N0SW5zdGFuY2UiLCJpbnN0YW5jZSIsIm1lbW9pemVkUHJvcHMiLCJsaXN0ZW5Ub05vbkRlbGVnYXRlZEV2ZW50IiwibWVkaWFFdmVudFR5cGVzIiwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nIiwiY2hlY2tGb3JVbm1hdGNoZWRUZXh0IiwicG9wb3ZlciIsIm9uU2Nyb2xsIiwib25TY3JvbGxFbmQiLCJvbkNsaWNrIiwib25jbGljayIsIm5vb3AkMSIsInBvcFRvTmV4dEhvc3RQYXJlbnQiLCJwb3BIeWRyYXRpb25TdGF0ZSIsIkpTQ29tcGlsZXJfdGVtcCIsInNob3VsZENsZWFyIiwic2hvdWxkU2V0VGV4dENvbnRlbnQiLCJnZXROZXh0SHlkcmF0YWJsZSIsInJlc2V0SHlkcmF0aW9uU3RhdGUiLCJlcnJvciIsIlN1c3BlbnNlRXhjZXB0aW9uIiwiU3VzcGVuc2V5Q29tbWl0RXhjZXB0aW9uIiwibm9vcFN1c3BlbnNleUNvbW1pdFRoZW5hYmxlIiwidGhlbiIsImlzVGhlbmFibGVSZXNvbHZlZCIsInRoZW5hYmxlIiwic3RhdHVzIiwibm9vcCQzIiwidHJhY2tVc2VkVGhlbmFibGUiLCJ0aGVuYWJsZVN0YXRlIiwicmVhc29uIiwid29ya0luUHJvZ3Jlc3NSb290Iiwic2hlbGxTdXNwZW5kQ291bnRlciIsImZ1bGZpbGxlZFZhbHVlIiwiZnVsZmlsbGVkVGhlbmFibGUiLCJyZWplY3RlZFRoZW5hYmxlIiwic3VzcGVuZGVkVGhlbmFibGUiLCJnZXRTdXNwZW5kZWRUaGVuYWJsZSIsInRoZW5hYmxlU3RhdGUkMSIsInRoZW5hYmxlSW5kZXhDb3VudGVyJDEiLCJ1bndyYXBUaGVuYWJsZSIsImNvZXJjZVJlZiIsInJlZiIsInRocm93T25JbnZhbGlkT2JqZWN0VHlwZSIsInJldHVybkZpYmVyIiwibmV3Q2hpbGQiLCJyZXNvbHZlTGF6eSIsImxhenlUeXBlIiwiaW5pdCIsImNyZWF0ZUNoaWxkUmVjb25jaWxlciIsInNob3VsZFRyYWNrU2lkZUVmZmVjdHMiLCJkZWxldGVDaGlsZCIsImNoaWxkVG9EZWxldGUiLCJkZWxldGlvbnMiLCJkZWxldGVSZW1haW5pbmdDaGlsZHJlbiIsImN1cnJlbnRGaXJzdENoaWxkIiwibWFwUmVtYWluaW5nQ2hpbGRyZW4iLCJleGlzdGluZ0NoaWxkcmVuIiwidXNlRmliZXIiLCJwZW5kaW5nUHJvcHMiLCJjcmVhdGVXb3JrSW5Qcm9ncmVzcyIsInBsYWNlQ2hpbGQiLCJuZXdGaWJlciIsImxhc3RQbGFjZWRJbmRleCIsIm5ld0luZGV4IiwicGxhY2VTaW5nbGVDaGlsZCIsInVwZGF0ZVRleHROb2RlIiwiY3JlYXRlRmliZXJGcm9tVGV4dCIsIm1vZGUiLCJ1cGRhdGVFbGVtZW50IiwiZWxlbWVudFR5cGUiLCJ1cGRhdGVGcmFnbWVudCIsImNyZWF0ZUZpYmVyRnJvbVR5cGVBbmRQcm9wcyIsInVwZGF0ZVBvcnRhbCIsInBvcnRhbCIsImltcGxlbWVudGF0aW9uIiwiY3JlYXRlRmliZXJGcm9tUG9ydGFsIiwiZnJhZ21lbnQiLCJjcmVhdGVGaWJlckZyb21GcmFnbWVudCIsImNyZWF0ZUNoaWxkIiwicmVhZENvbnRleHREdXJpbmdSZWNvbmNpbGlhdGlvbiIsInVwZGF0ZVNsb3QiLCJvbGRGaWJlciIsInVwZGF0ZUZyb21NYXAiLCJuZXdJZHgiLCJyZWNvbmNpbGVDaGlsZEZpYmVyc0ltcGwiLCJuZXdDaGlsZHJlbiIsInJlc3VsdGluZ0ZpcnN0Q2hpbGQiLCJwcmV2aW91c05ld0ZpYmVyIiwibmV4dE9sZEZpYmVyIiwiZGVsZXRlIiwiZm9yRWFjaCIsInJlY29uY2lsZUNoaWxkcmVuQXJyYXkiLCJzdGVwIiwiZG9uZSIsInJlY29uY2lsZUNoaWxkcmVuSXRlcmF0b3IiLCJmaXJzdENoaWxkRmliZXIiLCJjcmVhdGVGaWJlckltcGxDbGFzcyIsInJlY29uY2lsZUNoaWxkRmliZXJzIiwibW91bnRDaGlsZEZpYmVycyIsImN1cnJlbnRUcmVlSGlkZGVuU3RhY2tDdXJzb3IiLCJwcmV2RW50YW5nbGVkUmVuZGVyTGFuZXNDdXJzb3IiLCJwdXNoSGlkZGVuQ29udGV4dCIsImVudGFuZ2xlZFJlbmRlckxhbmVzIiwiYmFzZUxhbmVzIiwicmV1c2VIaWRkZW5Db250ZXh0T25TdGFjayIsInBvcEhpZGRlbkNvbnRleHQiLCJzdXNwZW5zZUhhbmRsZXJTdGFja0N1cnNvciIsInNoZWxsQm91bmRhcnkiLCJwdXNoUHJpbWFyeVRyZWVTdXNwZW5zZUhhbmRsZXIiLCJoYW5kbGVyIiwic3VzcGVuc2VTdGFja0N1cnNvciIsInB1c2hPZmZzY3JlZW5TdXNwZW5zZUhhbmRsZXIiLCJyZXVzZVN1c3BlbnNlSGFuZGxlck9uU3RhY2siLCJwb3BTdXNwZW5zZUhhbmRsZXIiLCJmaW5kRmlyc3RTdXNwZW5kZWQiLCJyb3ciLCJzdGF0ZSIsInJldmVhbE9yZGVyIiwiQWJvcnRDb250cm9sbGVyTG9jYWwiLCJBYm9ydENvbnRyb2xsZXIiLCJzaWduYWwiLCJhYm9ydGVkIiwibGlzdGVuZXIiLCJhYm9ydCIsInNjaGVkdWxlQ2FsbGJhY2skMiIsIk5vcm1hbFByaW9yaXR5IiwiQ2FjaGVDb250ZXh0IiwiQ29uc3VtZXIiLCJQcm92aWRlciIsIl9jdXJyZW50VmFsdWUyIiwiX3RocmVhZENvdW50IiwiY3JlYXRlQ2FjaGUiLCJjb250cm9sbGVyIiwicmVmQ291bnQiLCJyZWxlYXNlQ2FjaGUiLCJjYWNoZSIsImN1cnJlbnRFbnRhbmdsZWRMaXN0ZW5lcnMiLCJjdXJyZW50RW50YW5nbGVkUGVuZGluZ0NvdW50IiwiY3VycmVudEVudGFuZ2xlZExhbmUiLCJjdXJyZW50RW50YW5nbGVkQWN0aW9uVGhlbmFibGUiLCJwaW5nRW5ndGFuZ2xlZEFjdGlvblNjb3BlIiwicHJldk9uU3RhcnRUcmFuc2l0aW9uRmluaXNoIiwiUyIsImVudGFuZ2xlZExpc3RlbmVycyIsInJlcXVlc3RUcmFuc2l0aW9uTGFuZSIsInJlc29sdmUiLCJlbnRhbmdsZUFzeW5jQWN0aW9uIiwicmVzdW1lZENhY2hlIiwicGVla0NhY2hlRnJvbVBvb2wiLCJjYWNoZVJlc3VtZWRGcm9tUHJldmlvdXNSZW5kZXIiLCJwb29sZWRDYWNoZSIsInB1c2hUcmFuc2l0aW9uIiwib2Zmc2NyZWVuV29ya0luUHJvZ3Jlc3MiLCJwcmV2Q2FjaGVQb29sIiwicG9vbCIsImdldFN1c3BlbmRlZENhY2hlIiwiY2FjaGVGcm9tUG9vbCIsImN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyJDEiLCJjdXJyZW50SG9vayIsIndvcmtJblByb2dyZXNzSG9vayIsImRpZFNjaGVkdWxlUmVuZGVyUGhhc2VVcGRhdGUiLCJkaWRTY2hlZHVsZVJlbmRlclBoYXNlVXBkYXRlRHVyaW5nVGhpc1Bhc3MiLCJzaG91bGREb3VibGVJbnZva2VVc2VyRm5zSW5Ib29rc0RFViIsImxvY2FsSWRDb3VudGVyIiwidGhlbmFibGVJbmRleENvdW50ZXIiLCJnbG9iYWxDbGllbnRJZENvdW50ZXIiLCJ0aHJvd0ludmFsaWRIb29rRXJyb3IiLCJhcmVIb29rSW5wdXRzRXF1YWwiLCJuZXh0RGVwcyIsInByZXZEZXBzIiwicmVuZGVyV2l0aEhvb2tzIiwiQ29tcG9uZW50Iiwic2Vjb25kQXJnIiwibmV4dFJlbmRlckxhbmVzIiwidXBkYXRlUXVldWUiLCJIIiwiSG9va3NEaXNwYXRjaGVyT25Nb3VudCIsIkhvb2tzRGlzcGF0Y2hlck9uVXBkYXRlIiwicmVuZGVyV2l0aEhvb2tzQWdhaW4iLCJmaW5pc2hSZW5kZXJpbmdIb29rcyIsIkNvbnRleHRPbmx5RGlzcGF0Y2hlciIsImRpZFJlbmRlclRvb0Zld0hvb2tzIiwiZGlkUmVjZWl2ZVVwZGF0ZSIsImNoZWNrSWZDb250ZXh0Q2hhbmdlZCIsIm51bWJlck9mUmVSZW5kZXJzIiwibGFzdEVmZmVjdCIsImV2ZW50cyIsInN0b3JlcyIsIm1lbW9DYWNoZSIsIkhvb2tzRGlzcGF0Y2hlck9uUmVyZW5kZXIiLCJUcmFuc2l0aW9uQXdhcmVIb3N0Q29tcG9uZW50IiwiZGlzcGF0Y2hlciIsIm1heWJlVGhlbmFibGUiLCJ1c2VTdGF0ZSIsInVzZVRoZW5hYmxlIiwiY2hlY2tEaWRSZW5kZXJJZEhvb2siLCJkaWRSZW5kZXJJZEhvb2siLCJiYWlsb3V0SG9va3MiLCJyZXNldEhvb2tzT25VbndpbmQiLCJtb3VudFdvcmtJblByb2dyZXNzSG9vayIsImhvb2siLCJiYXNlU3RhdGUiLCJiYXNlUXVldWUiLCJ1cGRhdGVXb3JrSW5Qcm9ncmVzc0hvb2siLCJuZXh0Q3VycmVudEhvb2siLCJuZXh0V29ya0luUHJvZ3Jlc3NIb29rIiwidXNlIiwidXNhYmxlIiwicmVhZENvbnRleHQiLCJ1c2VNZW1vQ2FjaGUiLCJzaXplIiwiYXJyYXkiLCJiYXNpY1N0YXRlUmVkdWNlciIsInVwZGF0ZVJlZHVjZXIiLCJyZWR1Y2VyIiwidXBkYXRlUmVkdWNlckltcGwiLCJsYXN0UmVuZGVyZWRSZWR1Y2VyIiwicGVuZGluZ1F1ZXVlIiwiYmFzZUZpcnN0IiwibmV3QmFzZVF1ZXVlRmlyc3QiLCJuZXdCYXNlUXVldWVMYXN0IiwiZGlkUmVhZEZyb21FbnRhbmdsZWRBc3luY0FjdGlvbiQ1NCIsIndvcmtJblByb2dyZXNzUm9vdFJlbmRlckxhbmVzIiwicmV2ZXJ0TGFuZSIsImhhc0VhZ2VyU3RhdGUiLCJlYWdlclN0YXRlIiwid29ya0luUHJvZ3Jlc3NSb290U2tpcHBlZExhbmVzIiwibGFzdFJlbmRlcmVkU3RhdGUiLCJkaXNwYXRjaCIsInJlcmVuZGVyUmVkdWNlciIsImxhc3RSZW5kZXJQaGFzZVVwZGF0ZSIsInVwZGF0ZVN5bmNFeHRlcm5hbFN0b3JlIiwic3Vic2NyaWJlIiwiZ2V0U25hcHNob3QiLCJnZXRTZXJ2ZXJTbmFwc2hvdCIsImlzSHlkcmF0aW5nJGpzY29tcCQwIiwic25hcHNob3RDaGFuZ2VkIiwidXBkYXRlRWZmZWN0Iiwic3Vic2NyaWJlVG9TdG9yZSIsImJpbmQiLCJwdXNoRWZmZWN0IiwidXBkYXRlU3RvcmVJbnN0YW5jZSIsImRlc3Ryb3kiLCJwdXNoU3RvcmVDb25zaXN0ZW5jeUNoZWNrIiwicmVuZGVyZWRTbmFwc2hvdCIsIm5leHRTbmFwc2hvdCIsImNoZWNrSWZTbmFwc2hvdENoYW5nZWQiLCJmb3JjZVN0b3JlUmVyZW5kZXIiLCJsYXRlc3RHZXRTbmFwc2hvdCIsIm5leHRWYWx1ZSIsInNjaGVkdWxlVXBkYXRlT25GaWJlciIsIm1vdW50U3RhdGVJbXBsIiwiaW5pdGlhbFN0YXRlIiwiaW5pdGlhbFN0YXRlSW5pdGlhbGl6ZXIiLCJ1cGRhdGVPcHRpbWlzdGljSW1wbCIsInBhc3N0aHJvdWdoIiwiZGlzcGF0Y2hBY3Rpb25TdGF0ZSIsImFjdGlvblF1ZXVlIiwic2V0UGVuZGluZ1N0YXRlIiwic2V0U3RhdGUiLCJwYXlsb2FkIiwiaXNSZW5kZXJQaGFzZVVwZGF0ZSIsImFjdGlvbk5vZGUiLCJpc1RyYW5zaXRpb24iLCJUIiwicnVuQWN0aW9uU3RhdGVBY3Rpb24iLCJwcmV2U3RhdGUiLCJwcmV2VHJhbnNpdGlvbiIsImN1cnJlbnRUcmFuc2l0aW9uIiwib25TdGFydFRyYW5zaXRpb25GaW5pc2giLCJoYW5kbGVBY3Rpb25SZXR1cm5WYWx1ZSIsIm9uQWN0aW9uRXJyb3IiLCJlcnJvciQ2MCIsIm5leHRTdGF0ZSIsIm9uQWN0aW9uU3VjY2VzcyIsIm5vdGlmeUFjdGlvbkxpc3RlbmVycyIsImxhc3QiLCJhY3Rpb25TdGF0ZVJlZHVjZXIiLCJtb3VudEFjdGlvblN0YXRlIiwiaW5pdGlhbFN0YXRlUHJvcCIsInNzckZvcm1TdGF0ZSIsImZvcm1TdGF0ZSIsIkpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCRqc2NvbXAkMCIsImluUm9vdE9yU2luZ2xldG9uIiwiZGlzcGF0Y2hTZXRTdGF0ZSIsImRpc3BhdGNoT3B0aW1pc3RpY1NldFN0YXRlIiwidXBkYXRlQWN0aW9uU3RhdGUiLCJ1cGRhdGVBY3Rpb25TdGF0ZUltcGwiLCJzdGF0ZUhvb2siLCJjdXJyZW50U3RhdGVIb29rIiwiYWN0aW9uUXVldWVIb29rIiwiYWN0aW9uU3RhdGVBY3Rpb25FZmZlY3QiLCJyZXJlbmRlckFjdGlvblN0YXRlIiwiY3JlYXRlIiwiZGVwcyIsInVwZGF0ZVJlZiIsIm1vdW50RWZmZWN0SW1wbCIsImZpYmVyRmxhZ3MiLCJob29rRmxhZ3MiLCJ1cGRhdGVFZmZlY3RJbXBsIiwibW91bnRFZmZlY3QiLCJ1cGRhdGVJbnNlcnRpb25FZmZlY3QiLCJ1cGRhdGVMYXlvdXRFZmZlY3QiLCJpbXBlcmF0aXZlSGFuZGxlRWZmZWN0IiwicmVmQ2xlYW51cCIsInVwZGF0ZUltcGVyYXRpdmVIYW5kbGUiLCJtb3VudERlYnVnVmFsdWUiLCJ1cGRhdGVDYWxsYmFjayIsImNhbGxiYWNrIiwidXBkYXRlTWVtbyIsIm5leHRDcmVhdGUiLCJtb3VudERlZmVycmVkVmFsdWVJbXBsIiwiaW5pdGlhbFZhbHVlIiwicmVxdWVzdERlZmVycmVkTGFuZSIsInVwZGF0ZURlZmVycmVkVmFsdWVJbXBsIiwicHJldlZhbHVlIiwic3RhcnRUcmFuc2l0aW9uIiwicGVuZGluZ1N0YXRlIiwiZmluaXNoZWRTdGF0ZSIsInByZXZpb3VzUHJpb3JpdHkiLCJyZXN1bHQiLCJ0aGVuYWJsZVdpdGhPdmVycmlkZSIsImRpc3BhdGNoU2V0U3RhdGVJbnRlcm5hbCIsInJlcXVlc3RVcGRhdGVMYW5lIiwibm9vcCQyIiwic3RhcnRIb3N0VHJhbnNpdGlvbiIsImZvcm1GaWJlciIsImZvcm1EYXRhIiwiZW5zdXJlRm9ybUNvbXBvbmVudElzU3RhdGVmdWwiLCJyZXF1ZXN0Rm9ybVJlc2V0JDEiLCJleGlzdGluZ1N0YXRlSG9vayIsImluaXRpYWxSZXNldFN0YXRlIiwidXNlSG9zdFRyYW5zaXRpb25TdGF0dXMiLCJ1cGRhdGVJZCIsInVwZGF0ZVJlZnJlc2giLCJyZWZyZXNoQ2FjaGUiLCJwcm92aWRlciIsInJvb3QkNjMiLCJlbnF1ZXVlVXBkYXRlIiwiY3JlYXRlVXBkYXRlIiwiZW50YW5nbGVUcmFuc2l0aW9ucyIsImRpc3BhdGNoUmVkdWNlckFjdGlvbiIsImVucXVldWVSZW5kZXJQaGFzZVVwZGF0ZSIsImVudGFuZ2xlVHJhbnNpdGlvblVwZGF0ZSIsImN1cnJlbnRTdGF0ZSIsInRocm93SWZEdXJpbmdSZW5kZXIiLCJxdWV1ZUxhbmVzIiwidXNlQ2FsbGJhY2siLCJ1c2VDb250ZXh0IiwidXNlRWZmZWN0IiwidXNlSW1wZXJhdGl2ZUhhbmRsZSIsInVzZUxheW91dEVmZmVjdCIsInVzZUluc2VydGlvbkVmZmVjdCIsInVzZU1lbW8iLCJ1c2VSZWR1Y2VyIiwidXNlUmVmIiwidXNlRGVidWdWYWx1ZSIsInVzZURlZmVycmVkVmFsdWUiLCJ1c2VUcmFuc2l0aW9uIiwidXNlU3luY0V4dGVybmFsU3RvcmUiLCJ1c2VJZCIsInVzZUNhY2hlUmVmcmVzaCIsInVzZUZvcm1TdGF0ZSIsInVzZUFjdGlvblN0YXRlIiwidXNlT3B0aW1pc3RpYyIsImluaXRpYWxBcmciLCJpZGVudGlmaWVyUHJlZml4IiwiYm9vbGVhbk9yVGhlbmFibGUiLCJhcHBseURlcml2ZWRTdGF0ZUZyb21Qcm9wcyIsImN0b3IiLCJnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMiLCJuZXh0UHJvcHMiLCJjbGFzc0NvbXBvbmVudFVwZGF0ZXIiLCJpc01vdW50ZWQiLCJjb21wb25lbnQiLCJfcmVhY3RJbnRlcm5hbHMiLCJlbnF1ZXVlU2V0U3RhdGUiLCJlbnF1ZXVlUmVwbGFjZVN0YXRlIiwiZW5xdWV1ZUZvcmNlVXBkYXRlIiwiY2hlY2tTaG91bGRDb21wb25lbnRVcGRhdGUiLCJvbGRQcm9wcyIsIm5ld1Byb3BzIiwibmV4dENvbnRleHQiLCJzaG91bGRDb21wb25lbnRVcGRhdGUiLCJpc1B1cmVSZWFjdENvbXBvbmVudCIsImNhbGxDb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwiY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsIlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwicmVzb2x2ZUNsYXNzQ29tcG9uZW50UHJvcHMiLCJiYXNlUHJvcHMiLCJkZWZhdWx0UHJvcHMiLCJwcm9wTmFtZSQ2NyIsInJlcG9ydEdsb2JhbEVycm9yIiwicmVwb3J0RXJyb3IiLCJFcnJvckV2ZW50IiwiZGlzcGF0Y2hFdmVudCIsInByb2Nlc3MiLCJlbWl0IiwiY29uc29sZSIsImRlZmF1bHRPblVuY2F1Z2h0RXJyb3IiLCJkZWZhdWx0T25DYXVnaHRFcnJvciIsImRlZmF1bHRPblJlY292ZXJhYmxlRXJyb3IiLCJsb2dVbmNhdWdodEVycm9yIiwiZXJyb3JJbmZvIiwib25VbmNhdWdodEVycm9yIiwiY29tcG9uZW50U3RhY2siLCJlJDY4Iiwic2V0VGltZW91dCIsImxvZ0NhdWdodEVycm9yIiwiYm91bmRhcnkiLCJvbkNhdWdodEVycm9yIiwiZXJyb3JCb3VuZGFyeSIsImUkNjkiLCJjcmVhdGVSb290RXJyb3JVcGRhdGUiLCJjcmVhdGVDbGFzc0Vycm9yVXBkYXRlIiwiaW5pdGlhbGl6ZUNsYXNzRXJyb3JVcGRhdGUiLCJnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IiLCJjb21wb25lbnREaWRDYXRjaCIsImxlZ2FjeUVycm9yQm91bmRhcmllc1RoYXRBbHJlYWR5RmFpbGVkIiwiU2VsZWN0aXZlSHlkcmF0aW9uRXhjZXB0aW9uIiwicmVjb25jaWxlQ2hpbGRyZW4iLCJuZXh0Q2hpbGRyZW4iLCJ1cGRhdGVGb3J3YXJkUmVmIiwicHJvcHNXaXRob3V0UmVmIiwicHJlcGFyZVRvUmVhZENvbnRleHQiLCJiYWlsb3V0T25BbHJlYWR5RmluaXNoZWRXb3JrIiwidXBkYXRlTWVtb0NvbXBvbmVudCIsInNob3VsZENvbnN0cnVjdCIsImNvbXBhcmUiLCJ1cGRhdGVTaW1wbGVNZW1vQ29tcG9uZW50IiwiY2hlY2tTY2hlZHVsZWRVcGRhdGVPckNvbnRleHQiLCJwcmV2UHJvcHMiLCJ1cGRhdGVGdW5jdGlvbkNvbXBvbmVudCIsInVwZGF0ZU9mZnNjcmVlbkNvbXBvbmVudCIsIm5leHRJc0RldGFjaGVkIiwiX3BlbmRpbmdWaXNpYmlsaXR5IiwibWFya1JlZiIsImRlZmVySGlkZGVuT2Zmc2NyZWVuQ29tcG9uZW50IiwiY2FjaGVQb29sIiwibmV4dEJhc2VMYW5lcyIsInByb3BhZ2F0ZVBhcmVudENvbnRleHRDaGFuZ2VzIiwicmVwbGF5RnVuY3Rpb25Db21wb25lbnQiLCJ1cGRhdGVDbGFzc0NvbXBvbmVudCIsImNvbnRleHRUeXBlIiwidXBkYXRlciIsInJlZnMiLCJpbml0aWFsaXplVXBkYXRlUXVldWUiLCJnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsIlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQiLCJjb21wb25lbnRXaWxsTW91bnQiLCJwcm9jZXNzVXBkYXRlUXVldWUiLCJzdXNwZW5kSWZVcGRhdGVSZWFkRnJvbUVudGFuZ2xlZEFzeW5jQWN0aW9uIiwiY29tcG9uZW50RGlkTW91bnQiLCJ1bnJlc29sdmVkT2xkUHJvcHMiLCJvbGRDb250ZXh0IiwiY29udGV4dFR5cGUkanNjb21wJDAiLCJoYXNGb3JjZVVwZGF0ZSIsImNsb25lVXBkYXRlUXVldWUiLCJVTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSIsImNvbXBvbmVudFdpbGxVcGRhdGUiLCJjb21wb25lbnREaWRVcGRhdGUiLCJtb3VudEhvc3RSb290V2l0aG91dEh5ZHJhdGluZyIsIlNVU1BFTkRFRF9NQVJLRVIiLCJ0cmVlQ29udGV4dCIsInJldHJ5TGFuZSIsIm1vdW50U3VzcGVuc2VPZmZzY3JlZW5TdGF0ZSIsImdldFJlbWFpbmluZ1dvcmtJblByaW1hcnlUcmVlIiwicHJpbWFyeVRyZWVEaWREZWZlciIsIndvcmtJblByb2dyZXNzRGVmZXJyZWRMYW5lIiwidXBkYXRlU3VzcGVuc2VDb21wb25lbnQiLCJzaG93RmFsbGJhY2siLCJkaWRTdXNwZW5kIiwiSlNDb21waWxlcl90ZW1wJGpzY29tcCQwIiwibmV4dEluc3RhbmNlIiwiYyIsIm92ZXJmbG93IiwiZmFsbGJhY2siLCJtb3VudFdvcmtJblByb2dyZXNzT2Zmc2NyZWVuRmliZXIiLCJtb3VudFN1c3BlbnNlUHJpbWFyeUNoaWxkcmVuIiwicmV0cnlTdXNwZW5zZUNvbXBvbmVudFdpdGhvdXRIeWRyYXRpbmciLCJkYXRhc2V0IiwiZGlnZXN0IiwiZGdzdCIsInJlbmRlckRpZFN1c3BlbmREZWxheUlmUG9zc2libGUiLCJyZXRyeURlaHlkcmF0ZWRTdXNwZW5zZUJvdW5kYXJ5IiwiX3JlYWN0UmV0cnkiLCJzdWJ0cmVlRmxhZ3MiLCJwcmltYXJ5Q2hpbGRyZW4iLCJvZmZzY3JlZW5Qcm9wcyIsImNyZWF0ZUZpYmVyRnJvbU9mZnNjcmVlbiIsInNjaGVkdWxlU3VzcGVuc2VXb3JrT25GaWJlciIsInByb3BhZ2F0aW9uUm9vdCIsInNjaGVkdWxlQ29udGV4dFdvcmtPblBhcmVudFBhdGgiLCJpbml0U3VzcGVuc2VMaXN0UmVuZGVyU3RhdGUiLCJpc0JhY2t3YXJkcyIsInRhaWwiLCJsYXN0Q29udGVudFJvdyIsInRhaWxNb2RlIiwicmVuZGVyU3RhdGUiLCJyZW5kZXJpbmciLCJyZW5kZXJpbmdTdGFydFRpbWUiLCJ1cGRhdGVTdXNwZW5zZUxpc3RDb21wb25lbnQiLCJiZWdpbldvcmsiLCJwdXNoUHJvdmlkZXIiLCJkaWRTdXNwZW5kQmVmb3JlIiwiYXR0ZW1wdEVhcmx5QmFpbG91dElmTm9TY2hlZHVsZWRVcGRhdGUiLCJsYXp5Q29tcG9uZW50IiwicHJvcGFnYXRlQ29udGV4dENoYW5nZXMiLCJpc0RlaHlkcmF0ZWQiLCJnZXRSZXNvdXJjZSIsImdldE93bmVyRG9jdW1lbnRGcm9tUm9vdENvbnRhaW5lciIsInNldEluaXRpYWxQcm9wZXJ0aWVzIiwicmVzb2x2ZVNpbmdsZXRvbkluc3RhbmNlIiwiYW55UHJvcHMiLCJoYXNBdHRyaWJ1dGUiLCJnZXRBdHRyaWJ1dGUiLCJyZWwiLCJjcm9zc09yaWdpbiIsInRpdGxlIiwic3JjIiwiY2FuSHlkcmF0ZUluc3RhbmNlIiwiY2FuSHlkcmF0ZVRleHRJbnN0YW5jZSIsInBvb2xlZENhY2hlTGFuZXMiLCJ2YWx1ZUN1cnNvciIsImN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyIiwibGFzdENvbnRleHREZXBlbmRlbmN5IiwicHJvdmlkZXJGaWJlciIsInBvcFByb3ZpZGVyIiwiY29udGV4dHMiLCJmb3JjZVByb3BhZ2F0ZUVudGlyZVRyZWUiLCJuZXh0RmliZXIiLCJmaXJzdENvbnRleHQiLCJkZXBlbmRlbmN5IiwiaXNJbnNpZGVQcm9wYWdhdGlvbkJhaWxvdXQiLCJjdXJyZW50UGFyZW50IiwiY3VycmVudERlcGVuZGVuY2llcyIsIm1lbW9pemVkVmFsdWUiLCJyZWFkQ29udGV4dEZvckNvbnN1bWVyIiwiY29uc3VtZXIiLCJmaXJzdEJhc2VVcGRhdGUiLCJsYXN0QmFzZVVwZGF0ZSIsInNoYXJlZCIsImhpZGRlbkNhbGxiYWNrcyIsImNhbGxiYWNrcyIsImV4ZWN1dGlvbkNvbnRleHQiLCJlbnF1ZXVlQ2FwdHVyZWRVcGRhdGUiLCJjYXB0dXJlZFVwZGF0ZSIsIm5ld0ZpcnN0IiwibmV3TGFzdCIsImNsb25lIiwiZGlkUmVhZEZyb21FbnRhbmdsZWRBc3luY0FjdGlvbiIsIndvcmtJblByb2dyZXNzJGpzY29tcCQwIiwiaW5zdGFuY2UkanNjb21wJDAiLCJsYXN0UGVuZGluZ1VwZGF0ZSIsImZpcnN0UGVuZGluZ1VwZGF0ZSIsImlzSGlkZGVuVXBkYXRlIiwiY2FsbENhbGxiYWNrIiwiY29tbWl0Q2FsbGJhY2tzIiwiY29tbWl0SG9va0VmZmVjdExpc3RNb3VudCIsImZpbmlzaGVkV29yayIsImZpcnN0RWZmZWN0IiwiY2FwdHVyZUNvbW1pdFBoYXNlRXJyb3IiLCJjb21taXRIb29rRWZmZWN0TGlzdFVubW91bnQiLCJuZWFyZXN0TW91bnRlZEFuY2VzdG9yJGpzY29tcCQwIiwibmVhcmVzdE1vdW50ZWRBbmNlc3RvciIsImNvbW1pdENsYXNzQ2FsbGJhY2tzIiwic2FmZWx5Q2FsbENvbXBvbmVudFdpbGxVbm1vdW50IiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJzYWZlbHlBdHRhY2hSZWYiLCJpbnN0YW5jZVRvVXNlIiwic2FmZWx5RGV0YWNoUmVmIiwiZXJyb3IkMTEyIiwiY29tbWl0SG9zdE1vdW50IiwiYXV0b0ZvY3VzIiwic3JjU2V0Iiwic3Jjc2V0IiwiY29tbWl0SG9zdFVwZGF0ZSIsImRvbUVsZW1lbnQiLCJsYXN0UHJvcHMiLCJwcm9wS2V5IiwibGFzdFByb3AiLCJzZXRQcm9wIiwicHJvcEtleSQyMDMiLCJwcm9wS2V5JDIxOSIsInByb3BLZXkkMjI0IiwicHJvcEtleSQyMjkiLCJzZXRQcm9wT25DdXN0b21FbGVtZW50IiwicHJvcEtleSQyMzQiLCJ1cGRhdGVQcm9wZXJ0aWVzIiwiaXNIb3N0UGFyZW50IiwiZ2V0SG9zdFNpYmxpbmciLCJpbnNlcnRPckFwcGVuZFBsYWNlbWVudE5vZGVJbnRvQ29udGFpbmVyIiwiYmVmb3JlIiwiaW5zZXJ0QmVmb3JlIiwiYXBwZW5kQ2hpbGQiLCJfcmVhY3RSb290Q29udGFpbmVyIiwiaW5zZXJ0T3JBcHBlbmRQbGFjZW1lbnROb2RlIiwib2Zmc2NyZWVuU3VidHJlZUlzSGlkZGVuIiwib2Zmc2NyZWVuU3VidHJlZVdhc0hpZGRlbiIsIm5lZWRzRm9ybVJlc2V0IiwiUG9zc2libHlXZWFrU2V0IiwiV2Vha1NldCIsIm5leHRFZmZlY3QiLCJzaG91bGRGaXJlQWZ0ZXJBY3RpdmVJbnN0YW5jZUJsdXIiLCJjb21taXRMYXlvdXRFZmZlY3RPbkZpYmVyIiwiZmluaXNoZWRSb290IiwicmVjdXJzaXZlbHlUcmF2ZXJzZUxheW91dEVmZmVjdHMiLCJfX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsImVycm9yJDExMSIsImNvbW1pdFN1c3BlbnNlSHlkcmF0aW9uQ2FsbGJhY2tzIiwicHJldk9mZnNjcmVlblN1YnRyZWVJc0hpZGRlbiIsInByZXZPZmZzY3JlZW5TdWJ0cmVlV2FzSGlkZGVuIiwicmVjdXJzaXZlbHlUcmF2ZXJzZVJlYXBwZWFyTGF5b3V0RWZmZWN0cyIsImRldGFjaEZpYmVyQWZ0ZXJFZmZlY3RzIiwiaG9zdFBhcmVudCIsImhvc3RQYXJlbnRJc0NvbnRhaW5lciIsInJlY3Vyc2l2ZWx5VHJhdmVyc2VEZWxldGlvbkVmZmVjdHMiLCJjb21taXREZWxldGlvbkVmZmVjdHNPbkZpYmVyIiwiZGVsZXRlZEZpYmVyIiwib25Db21taXRGaWJlclVubW91bnQiLCJjb3VudCIsInJlbW92ZUNoaWxkIiwicHJldkhvc3RQYXJlbnQiLCJwcmV2SG9zdFBhcmVudElzQ29udGFpbmVyIiwiYXR0cmlidXRlcyIsInJlbW92ZUF0dHJpYnV0ZU5vZGUiLCJwcmV2SG9zdFBhcmVudElzQ29udGFpbmVyJDExOSIsImNsZWFyU3VzcGVuc2VCb3VuZGFyeSIsInJldHJ5SWZCbG9ja2VkT24iLCJhdHRhY2hTdXNwZW5zZVJldHJ5TGlzdGVuZXJzIiwid2FrZWFibGVzIiwicmV0cnlDYWNoZSIsIl9yZXRyeUNhY2hlIiwiZ2V0UmV0cnlDYWNoZSIsIndha2VhYmxlIiwicmV0cnkiLCJyZXNvbHZlUmV0cnlXYWtlYWJsZSIsInJlY3Vyc2l2ZWx5VHJhdmVyc2VNdXRhdGlvbkVmZmVjdHMiLCJyb290JGpzY29tcCQwIiwicGFyZW50RmliZXIiLCJjb21taXRNdXRhdGlvbkVmZmVjdHNPbkZpYmVyIiwiY3VycmVudEhvaXN0YWJsZVJvb3QiLCJjb21taXRSZWNvbmNpbGlhdGlvbkVmZmVjdHMiLCJob2lzdGFibGVSb290IiwiY3VycmVudFJlc291cmNlIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJoZWFkIiwicXVlcnlTZWxlY3RvciIsIm1heWJlTm9kZXMiLCJnZXRIeWRyYXRhYmxlSG9pc3RhYmxlQ2FjaGUiLCJzcGxpY2UiLCJwcm9wZXJ0eSIsImh0dHBFcXVpdiIsImNoYXJTZXQiLCJtb3VudEhvaXN0YWJsZSIsImFjcXVpcmVSZXNvdXJjZSIsIm5leHROb2RlIiwidGFnQ2FjaGVzIiwiZ2V0SG9pc3RhYmxlUm9vdCIsInJlY3Vyc2l2ZWx5UmVzZXRGb3JtcyIsImdsb2JhbE1vc3RSZWNlbnRGYWxsYmFja1RpbWUiLCJfY3VycmVudCIsInJlY3Vyc2l2ZWx5VHJhdmVyc2VEaXNhcHBlYXJMYXlvdXRFZmZlY3RzIiwiZGlzcGxheSIsInJldHJ5UXVldWUiLCJwYXJlbnQkanNjb21wJDAiLCJwYXJlbnQkMTEzIiwicGFyZW50JDExNSIsInJlc2V0IiwiZmluaXNoZWRSb290JGpzY29tcCQwIiwiaW5jbHVkZVdvcmtJblByb2dyZXNzRWZmZWN0cyIsImNvbW1pdE9mZnNjcmVlblBhc3NpdmVNb3VudEVmZmVjdHMiLCJwcmV2aW91c0NhY2hlIiwiY29tbWl0Q2FjaGVQYXNzaXZlTW91bnRFZmZlY3QiLCJyZWN1cnNpdmVseVRyYXZlcnNlUGFzc2l2ZU1vdW50RWZmZWN0cyIsImNvbW1pdHRlZExhbmVzIiwiY29tbWl0dGVkVHJhbnNpdGlvbnMiLCJjb21taXRQYXNzaXZlTW91bnRPbkZpYmVyIiwiX2ZpbmlzaGVkV29yayRtZW1vaXplMiIsIm9uUG9zdENvbW1pdCIsInBhc3NpdmVFZmZlY3REdXJhdGlvbiIsInJlY3Vyc2l2ZWx5VHJhdmVyc2VBdG9taWNQYXNzaXZlRWZmZWN0cyIsInJlY3Vyc2l2ZWx5VHJhdmVyc2VSZWNvbm5lY3RQYXNzaXZlRWZmZWN0cyIsImNvbW1pdHRlZExhbmVzJGpzY29tcCQwIiwiY29tbWl0dGVkVHJhbnNpdGlvbnMkanNjb21wJDAiLCJzdXNwZW5zZXlDb21taXRGbGFnIiwicmVjdXJzaXZlbHlBY2N1bXVsYXRlU3VzcGVuc2V5Q29tbWl0IiwiYWNjdW11bGF0ZVN1c3BlbnNleUNvbW1pdE9uRmliZXIiLCJyZXNvdXJjZSIsInN1c3BlbmRlZFN0YXRlIiwibWF0Y2hNZWRpYSIsIm1hdGNoZXMiLCJsb2FkaW5nIiwiZ2V0U3R5bGVLZXkiLCJnZXRTdHlsZXNoZWV0U2VsZWN0b3JGcm9tS2V5IiwiX3AiLCJvblVuc3VzcGVuZCIsInN0eWxlc2hlZXRQcm9wc0Zyb21SYXdQcm9wcyIsInByZWxvYWRQcm9wc01hcCIsImFkb3B0UHJlbG9hZFByb3BzRm9yU3R5bGVzaGVldCIsImxpbmtJbnN0YW5jZSIsIlByb21pc2UiLCJyZWplY3QiLCJvbmxvYWQiLCJvbmVycm9yIiwic3R5bGVzaGVldHMiLCJwcmVsb2FkIiwic3VzcGVuZFJlc291cmNlIiwicHJldmlvdXNIb2lzdGFibGVSb290IiwiZGV0YWNoQWx0ZXJuYXRlU2libGluZ3MiLCJwcmV2aW91c0ZpYmVyIiwicmVjdXJzaXZlbHlUcmF2ZXJzZVBhc3NpdmVVbm1vdW50RWZmZWN0cyIsImNvbW1pdFBhc3NpdmVVbm1vdW50RWZmZWN0c0luc2lkZU9mRGVsZXRlZFRyZWVfYmVnaW4iLCJjb21taXRQYXNzaXZlVW5tb3VudE9uRmliZXIiLCJyZWN1cnNpdmVseVRyYXZlcnNlRGlzY29ubmVjdFBhc3NpdmVFZmZlY3RzIiwiZGVsZXRlZFN1YnRyZWVSb290IiwiRmliZXJOb2RlIiwiaXNSZWFjdENvbXBvbmVudCIsInJlc2V0V29ya0luUHJvZ3Jlc3MiLCJvd25lciIsImZpYmVyVGFnIiwiaG9zdENvbnRleHQiLCJpdGVtUHJvcCIsInByZWNlZGVuY2UiLCJvbkxvYWQiLCJvbkVycm9yIiwiYXN5bmMiLCJpc0hvc3RIb2lzdGFibGVUeXBlIiwiZWxlbWVudHMiLCJwcmltYXJ5Q2hpbGRJbnN0YW5jZSIsIl9wZW5kaW5nTWFya2VycyIsIl90cmFuc2l0aW9ucyIsImRldGFjaCIsImF0dGFjaCIsInBlbmRpbmdDaGlsZHJlbiIsIm1hcmtVcGRhdGUiLCJwcmVsb2FkUmVzb3VyY2VBbmRTdXNwZW5kSWZOZWVkZWQiLCJwcmVsb2FkUmVzb3VyY2UiLCJzY2hlZHVsZVJldHJ5RWZmZWN0Iiwid29ya0luUHJvZ3Jlc3NTdXNwZW5kZWRSZXRyeUxhbmVzIiwiY3V0T2ZmVGFpbElmTmVlZGVkIiwiaGFzUmVuZGVyZWRBVGFpbEZhbGxiYWNrIiwibGFzdFRhaWxOb2RlIiwibGFzdFRhaWxOb2RlJDEzMSIsImJ1YmJsZVByb3BlcnRpZXMiLCJjb21wbGV0ZWRXb3JrIiwiZGlkQmFpbG91dCIsIm5ld0NoaWxkTGFuZXMiLCJjaGlsZCQxMzIiLCJjb21wbGV0ZVdvcmsiLCJwZW5kaW5nQ29udGV4dCIsInF1ZXVlUmVjb3ZlcmFibGVFcnJvcnMiLCJjcmVhdGVFbGVtZW50TlMiLCJpbm5lckhUTUwiLCJjcmVhdGVUZXh0Tm9kZSIsImNhY2hlJDE0NCIsImxpc3RlblRvQWxsU3VwcG9ydGVkRXZlbnRzIiwid29ya0luUHJvZ3Jlc3NSb290RXhpdFN0YXR1cyIsIndvcmtJblByb2dyZXNzUm9vdFJlbmRlclRhcmdldFRpbWUiLCJ1bndpbmRXb3JrIiwidW53aW5kSW50ZXJydXB0ZWRXb3JrIiwiaW50ZXJydXB0ZWRXb3JrIiwiRGVmYXVsdEFzeW5jRGlzcGF0Y2hlciIsImdldENhY2hlRm9yVHlwZSIsInJlc291cmNlVHlwZSIsImNhY2hlRm9yVHlwZSIsIlBvc3NpYmx5V2Vha01hcCIsIndvcmtJblByb2dyZXNzU3VzcGVuZGVkUmVhc29uIiwid29ya0luUHJvZ3Jlc3NUaHJvd25WYWx1ZSIsIndvcmtJblByb2dyZXNzUm9vdERpZFNraXBTdXNwZW5kZWRTaWJsaW5ncyIsIndvcmtJblByb2dyZXNzUm9vdElzUHJlcmVuZGVyaW5nIiwid29ya0luUHJvZ3Jlc3NSb290RGlkQXR0YWNoUGluZ0xpc3RlbmVyIiwid29ya0luUHJvZ3Jlc3NSb290SW50ZXJsZWF2ZWRVcGRhdGVkTGFuZXMiLCJ3b3JrSW5Qcm9ncmVzc1Jvb3RQaW5nZWRMYW5lcyIsIndvcmtJblByb2dyZXNzUm9vdENvbmN1cnJlbnRFcnJvcnMiLCJ3b3JrSW5Qcm9ncmVzc1Jvb3RSZWNvdmVyYWJsZUVycm9ycyIsIndvcmtJblByb2dyZXNzUm9vdERpZEluY2x1ZGVSZWN1cnNpdmVSZW5kZXJVcGRhdGUiLCJJbmZpbml0eSIsIndvcmtJblByb2dyZXNzVHJhbnNpdGlvbnMiLCJyb290RG9lc0hhdmVQYXNzaXZlRWZmZWN0cyIsInJvb3RXaXRoUGVuZGluZ1Bhc3NpdmVFZmZlY3RzIiwicGVuZGluZ1Bhc3NpdmVFZmZlY3RzTGFuZXMiLCJwZW5kaW5nUGFzc2l2ZUVmZmVjdHNSZW1haW5pbmdMYW5lcyIsInBlbmRpbmdQYXNzaXZlVHJhbnNpdGlvbnMiLCJzdXNwZW5zZUhhbmRsZXIiLCJjYW5jZWxQZW5kaW5nQ29tbWl0IiwicHJlcGFyZUZyZXNoU3RhY2siLCJtYXJrUm9vdFN1c3BlbmRlZCIsImVuc3VyZVJvb3RJc1NjaGVkdWxlZCIsInBlcmZvcm1Xb3JrT25Sb290IiwiZm9yY2VTeW5jIiwic2hvdWxkVGltZVNsaWNlIiwiZXhwaXJlZExhbmVzIiwiZXhpdFN0YXR1cyIsInByZXZFeGVjdXRpb25Db250ZXh0IiwicHJldkRpc3BhdGNoZXIiLCJwdXNoRGlzcGF0Y2hlciIsInByZXZBc3luY0Rpc3BhdGNoZXIiLCJwdXNoQXN5bmNEaXNwYXRjaGVyIiwidGhyb3duVmFsdWUiLCJ0aHJvd0FuZFVud2luZFdvcmtMb29wIiwicmVwbGF5U3VzcGVuZGVkVW5pdE9mV29yayIsImhvc3RGaWJlciIsImNvbXBsZXRlVW5pdE9mV29yayIsInJlc2V0V29ya0luUHJvZ3Jlc3NTdGFjayIsIndvcmtMb29wQ29uY3VycmVudCIsInRocm93blZhbHVlJDE2NiIsImhhbmRsZVRocm93IiwiQSIsInJlbmRlclJvb3RDb25jdXJyZW50IiwicmVuZGVyUm9vdFN5bmMiLCJyZW5kZXJXYXNDb25jdXJyZW50IiwiaXNSZW5kZXJDb25zaXN0ZW50V2l0aEV4dGVybmFsU3RvcmVzIiwiZXJyb3JSZWNvdmVyeURpc2FibGVkTGFuZXMiLCJ3YXNSb290RGVoeWRyYXRlZCIsInRpbWVvdXRIYW5kbGUiLCJzY2hlZHVsZVRpbWVvdXQiLCJjb21taXRSb290V2hlblJlYWR5IiwiZXJyb3JzIiwiYXBwbHkiLCJyZWNvdmVyYWJsZUVycm9ycyIsInRyYW5zaXRpb25zIiwiZGlkSW5jbHVkZVJlbmRlclBoYXNlVXBkYXRlIiwidXBkYXRlZExhbmVzIiwic3VzcGVuZGVkUmV0cnlMYW5lcyIsImRpZFNraXBTdXNwZW5kZWRTaWJsaW5ncyIsInN1c3BlbmRlZENvbW1pdFJlYXNvbiIsImNvbXBsZXRlZFJlbmRlclN0YXJ0VGltZSIsImNvbXBsZXRlZFJlbmRlckVuZFRpbWUiLCJ1bnN1c3BlbmQiLCJub29wIiwiaW5zZXJ0U3VzcGVuZGVkU3R5bGVzaGVldHMiLCJjb21taXQiLCJzdHlsZXNoZWV0VGltZXIiLCJjbGVhclRpbWVvdXQiLCJ3YWl0Rm9yQ29tbWl0VG9CZVJlYWR5IiwiY29tbWl0Um9vdCIsImNoZWNrIiwiZGlkQXR0ZW1wdEVudGlyZVRyZWUiLCJleHBpcmF0aW9uVGltZXMiLCJpbmRleCQ2IiwiZmx1c2hTeW5jV29ya0Fjcm9zc1Jvb3RzX2ltcGwiLCJjYW5jZWxUaW1lb3V0IiwiYWxsRW50YW5nbGVkTGFuZXMiLCJpbmRleCQ0Iiwic2hvdWxkWWllbGRGb3JQcmVyZW5kZXJpbmciLCJ1bml0T2ZXb3JrIiwid29ya0xvb3BTeW5jIiwidGhyb3duVmFsdWUkMTY0IiwicGVyZm9ybVVuaXRPZldvcmsiLCJzdXNwZW5kZWRSZWFzb24iLCJyb290UmVuZGVyTGFuZXMiLCJhdHRhY2hQaW5nTGlzdGVuZXIiLCJtYXJrZXJJbnN0YW5jZXMiLCJjYXVzZSIsIndyYXBwZXJFcnJvciIsInRocm93RXhjZXB0aW9uIiwidW53aW5kVW5pdE9mV29yayIsInNraXBTaWJsaW5ncyIsInByZXZpb3VzVXBkYXRlTGFuZVByaW9yaXR5IiwicmVuZGVyUHJpb3JpdHlMZXZlbCIsImZsdXNoUGFzc2l2ZUVmZmVjdHMiLCJjYWxsYmFja05vZGUiLCJjYWxsYmFja1ByaW9yaXR5IiwicmVtYWluaW5nTGFuZXMiLCJwcmV2aW91c2x5UGVuZGluZ0xhbmVzIiwiaW5kZXgkNyIsImhpZGRlblVwZGF0ZXNGb3JMYW5lIiwibWFya1Jvb3RGaW5pc2hlZCIsImV2ZW50c0VuYWJsZWQiLCJfZW5hYmxlZCIsInNlbGVjdGlvbiIsImUkMjAiLCJpbmRleFdpdGhpbkFuY2hvciIsImluZGV4V2l0aGluRm9jdXMiLCJzZWxlY3Rpb25JbmZvcm1hdGlvbiIsInJlc29sdmVkUHJldlByb3BzIiwiY2xlYXJDb250YWluZXJTcGFyaW5nbHkiLCJjb21taXRCZWZvcmVNdXRhdGlvbkVmZmVjdHMiLCJyZWxlYXNlUm9vdFBvb2xlZENhY2hlIiwib25Db21taXRGaWJlclJvb3QiLCJvbkNvbW1pdFJvb3QiLCJvblJlY292ZXJhYmxlRXJyb3IiLCJjb21taXRSb290SW1wbCIsInJvb3QkMTcwIiwicmVuZGVyUHJpb3JpdHkiLCJvblBvc3RDb21taXRGaWJlclJvb3QiLCJjYXB0dXJlQ29tbWl0UGhhc2VFcnJvck9uUm9vdCIsInJvb3RGaWJlciIsInBpbmdDYWNoZSIsInRocmVhZElEcyIsInBpbmdTdXNwZW5kZWRSb290IiwicmV0cnlUaW1lZE91dEJvdW5kYXJ5IiwiYm91bmRhcnlGaWJlciIsImZpcnN0U2NoZWR1bGVkUm9vdCIsImxhc3RTY2hlZHVsZWRSb290IiwiZGlkU2NoZWR1bGVNaWNyb3Rhc2siLCJtaWdodEhhdmVQZW5kaW5nU3luY1dvcmsiLCJpc0ZsdXNoaW5nV29yayIsImN1cnJlbnRFdmVudFRyYW5zaXRpb25MYW5lIiwiY2IiLCJwcm9jZXNzUm9vdFNjaGVkdWxlSW5NaWNyb3Rhc2siLCJzY2hlZHVsZU1pY3JvdGFzayIsInN5bmNUcmFuc2l0aW9uTGFuZXMiLCJvbmx5TGVnYWN5IiwiZGlkUGVyZm9ybVNvbWVXb3JrIiwicm9vdCQxNzIiLCJwZXJmb3JtU3luY1dvcmtPblJvb3QiLCJjdXJyZW50UG9wc3RhdGVUcmFuc2l0aW9uRXZlbnQiLCJwcmV2Iiwic2NoZWR1bGVUYXNrRm9yUm9vdER1cmluZ01pY3JvdGFzayIsImluZGV4JDUiLCJleHBpcmF0aW9uVGltZSIsInBlcmZvcm1Xb3JrT25Sb290VmlhU2NoZWR1bGVyVGFzayIsImRpZFRpbWVvdXQiLCJvcmlnaW5hbENhbGxiYWNrTm9kZSIsIndvcmtJblByb2dyZXNzUm9vdFJlbmRlckxhbmVzJGpzY29tcCQwIiwiY29lcmNlRm9ybUFjdGlvblByb3AiLCJhY3Rpb25Qcm9wIiwiY3JlYXRlRm9ybURhdGFXaXRoU3VibWl0dGVyIiwic3VibWl0dGVyIiwidGVtcCIsIkZvcm1EYXRhIiwiaSRqc2NvbXAkaW5saW5lXzE0MzkiLCJldmVudE5hbWUkanNjb21wJGlubGluZV8xNDQwIiwidG9VcHBlckNhc2UiLCJub25EZWxlZ2F0ZWRFdmVudHMiLCJldmVudFN5c3RlbUZsYWdzIiwiX2Rpc3BhdGNoUXVldWUkaSIsInByZXZpb3VzSW5zdGFuY2UiLCJpJGpzY29tcCQwIiwiX2Rpc3BhdGNoTGlzdGVuZXJzJGkiLCJ0YXJnZXRFbGVtZW50IiwibGlzdGVuZXJTZXRLZXkiLCJhZGRUcmFwcGVkRXZlbnRMaXN0ZW5lciIsImxpc3RlblRvTmF0aXZlRXZlbnQiLCJpc0NhcHR1cmVQaGFzZUxpc3RlbmVyIiwibGlzdGVuaW5nTWFya2VyIiwicm9vdENvbnRhaW5lckVsZW1lbnQiLCJ0YXJnZXRDb250YWluZXIiLCJsaXN0ZW5lcldyYXBwZXIiLCJkaXNwYXRjaERpc2NyZXRlRXZlbnQiLCJkaXNwYXRjaENvbnRpbnVvdXNFdmVudCIsImNhcHR1cmUiLCJwYXNzaXZlIiwiZGlzcGF0Y2hFdmVudEZvclBsdWdpbkV2ZW50U3lzdGVtIiwidGFyZ2V0SW5zdCRqc2NvbXAkMCIsImFuY2VzdG9ySW5zdCIsIm5vZGVUYWciLCJjb250YWluZXIiLCJncmFuZFRhZyIsIlN5bnRoZXRpY0V2ZW50Q3RvciIsImluQ2FwdHVyZVBoYXNlIiwiYWNjdW11bGF0ZVRhcmdldE9ubHkiLCJyZWFjdEV2ZW50TmFtZSIsImxhc3RIb3N0Q29tcG9uZW50IiwiX2luc3RhbmNlIiwiY3JlYXRlRGlzcGF0Y2hMaXN0ZW5lciIsInBhcmVudFdpbmRvdyIsImdldFBhcmVudCIsImFjY3VtdWxhdGVFbnRlckxlYXZlTGlzdGVuZXJzRm9yRXZlbnQiLCJnZXRUYXJnZXRJbnN0RnVuYyIsImhhbmRsZUV2ZW50RnVuYyIsImZhbGxiYWNrRGF0YSIsImV2ZW50VHlwZSIsImdldE5hdGl2ZUJlZm9yZUlucHV0Q2hhcnMiLCJjaGFyIiwiZ2V0RmFsbGJhY2tCZWZvcmVJbnB1dENoYXJzIiwibWF5YmVUYXJnZXRJbnN0IiwiZm9ybUFjdGlvbiIsImV4dHJhY3RFdmVudHMkMSIsInRhcmdldEZpYmVyIiwiY2FwdHVyZU5hbWUiLCJfaW5zdGFuY2UyIiwidW5zaGlmdCIsImNvbW1vbiIsIl9pbnN0YW5jZTMiLCJOT1JNQUxJWkVfTkVXTElORVNfUkVHRVgiLCJOT1JNQUxJWkVfTlVMTF9BTkRfUkVQTEFDRU1FTlRfUkVHRVgiLCJub3JtYWxpemVNYXJrdXBGb3JUZXh0T3JBdHRyaWJ1dGUiLCJtYXJrdXAiLCJzZXJ2ZXJUZXh0IiwiY2xpZW50VGV4dCIsImZvcm1FbmNUeXBlIiwiZm9ybU1ldGhvZCIsImZvcm1UYXJnZXQiLCJlbmNUeXBlIiwiX19odG1sIiwibXV0ZWQiLCJpc05hTiIsImVuZHNXaXRoIiwiaGFzU3JjIiwiaGFzU3JjU2V0IiwicHJvcFZhbHVlJDE4NiIsInBhcmVudE5hbWVzcGFjZSIsImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIiwibG9jYWxQcm9taXNlIiwicXVldWVNaWNyb3Rhc2siLCJoYW5kbGVFcnJvckluTmV4dFRpY2siLCJwYXJlbnRJbnN0YW5jZSIsInN1c3BlbnNlSW5zdGFuY2UiLCJkZXB0aCIsInRhcmdldEluc3RhbmNlIiwicHJldmlvdXNTaWJsaW5nIiwicm9vdENvbnRhaW5lckluc3RhbmNlIiwicHJlY29ubmVjdHNTZXQiLCJnZXRSb290Tm9kZSIsInByZXZpb3VzRGlzcGF0Y2hlciIsImQiLCJmIiwicHJldmlvdXNXYXNSZW5kZXJpbmciLCJ3YXNSZW5kZXJpbmciLCJyIiwiZm9ybUluc3QiLCJEIiwicHJlY29ubmVjdEFzIiwiQyIsIkwiLCJhcyIsImdsb2JhbERvY3VtZW50IiwicHJlbG9hZFNlbGVjdG9yIiwiaW1hZ2VTcmNTZXQiLCJpbWFnZVNpemVzIiwiZ2V0U2NyaXB0S2V5IiwiZ2V0U2NyaXB0U2VsZWN0b3JGcm9tS2V5IiwibSIsIlgiLCJzY3JpcHRzIiwiYWRvcHRQcmVsb2FkUHJvcHNGb3JTY3JpcHQiLCJsaW5rIiwiaW5zZXJ0U3R5bGVzaGVldCIsIk0iLCJsaW1pdGVkRXNjYXBlZEhyZWYiLCJjdXJyZW50UHJvcHMiLCJwcmVsb2FkUHJvcHMiLCJzdHlsZXMkMjQyIiwicmVzb3VyY2UkMjQzIiwiaW50ZWdyaXR5IiwiaHJlZkxhbmciLCJyZWZlcnJlclBvbGljeSIsInJhd1Byb3BzIiwic3R5bGVQcm9wcyIsImluc3RhbmNlJDI0OCIsIm5vZGVzIiwicHJpb3IiLCJzdHlsZXNoZWV0UHJvcHMiLCJzY3JpcHRQcm9wcyIsImtleUF0dHJpYnV0ZSIsImNhY2hlcyIsIm5vZGVLZXkiLCJwcmVjZWRlbmNlc0J5Um9vdCIsImluc2VydFN0eWxlc2hlZXRJbnRvUm9vdCIsInByZWNlZGVuY2VzIiwiRmliZXJSb290Tm9kZSIsImh5ZHJhdGUiLCJpbmNvbXBsZXRlVHJhbnNpdGlvbnMiLCJ1cGRhdGVDb250YWluZXJJbXBsIiwicGFyZW50Q29tcG9uZW50IiwiZ2V0Q29udGV4dEZvclN1YnRyZWUiLCJtYXJrUmV0cnlMYW5lSW1wbCIsIm1hcmtSZXRyeUxhbmVJZk5vdEh5ZHJhdGVkIiwiYXR0ZW1wdENvbnRpbnVvdXNIeWRyYXRpb24iLCJibG9ja2VkT24iLCJmaW5kSW5zdGFuY2VCbG9ja2luZ0V2ZW50IiwicmV0dXJuX3RhcmdldEluc3QiLCJjbGVhcklmQ29udGludW91c0V2ZW50IiwicXVldWVkRm9jdXMiLCJhY2N1bXVsYXRlT3JDcmVhdGVDb250aW51b3VzUXVldWVkUmVwbGF5YWJsZUV2ZW50IiwicXVldWVkRHJhZyIsInF1ZXVlZE1vdXNlIiwicXVldWVkUG9pbnRlcnMiLCJxdWV1ZWRQb2ludGVyQ2FwdHVyZXMiLCJxdWV1ZUlmQ29udGludW91c0V2ZW50IiwiZGlzY3JldGVSZXBsYXlhYmxlRXZlbnRzIiwiZmluZEluc3RhbmNlQmxvY2tpbmdUYXJnZXQiLCJoYXNTY2hlZHVsZWRSZXBsYXlBdHRlbXB0IiwicXVldWVkRXhwbGljaXRIeWRyYXRpb25UYXJnZXRzIiwiZXhpc3RpbmdRdWV1ZWRFdmVudCIsInRhcmdldENvbnRhaW5lcnMiLCJhdHRlbXB0RXhwbGljaXRIeWRyYXRpb25UYXJnZXQiLCJxdWV1ZWRUYXJnZXQiLCJwcmlvcml0eSIsInJ1bldpdGhQcmlvcml0eSIsImF0dGVtcHRSZXBsYXlDb250aW51b3VzUXVldWVkRXZlbnQiLCJxdWV1ZWRFdmVudCIsIm5leHRCbG9ja2VkT24iLCJuYXRpdmVFdmVudENsb25lIiwic2hpZnQiLCJhdHRlbXB0UmVwbGF5Q29udGludW91c1F1ZXVlZEV2ZW50SW5NYXAiLCJyZXBsYXlVbmJsb2NrZWRFdmVudHMiLCJzY2hlZHVsZUNhbGxiYWNrSWZVbmJsb2NrZWQiLCJ1bmJsb2NrZWQiLCJsYXN0U2NoZWR1bGVkUmVwbGF5UXVldWUiLCJzY2hlZHVsZVJlcGxheVF1ZXVlSWZOZWVkZWQiLCJmb3JtUmVwbGF5aW5nUXVldWUiLCJzdWJtaXR0ZXJPckFjdGlvbiIsInVuYmxvY2siLCIkJHJlYWN0Rm9ybVJlcGxheSIsImZvcm1Qcm9wcyIsIlJlYWN0RE9NUm9vdCIsImludGVybmFsUm9vdCIsIl9pbnRlcm5hbFJvb3QiLCJSZWFjdERPTUh5ZHJhdGlvblJvb3QiLCJ1bm1vdW50IiwidW5zdGFibGVfc2NoZWR1bGVIeWRyYXRpb24iLCJpc29tb3JwaGljUmVhY3RQYWNrYWdlVmVyc2lvbiRqc2NvbXAkaW5saW5lXzE2ODYiLCJ2ZXJzaW9uIiwiZmluZERPTU5vZGUiLCJjb21wb25lbnRPckVsZW1lbnQiLCJwYXJlbnRBIiwicGFyZW50QiIsImRpZEZpbmRDaGlsZCIsImNoaWxkJDIiLCJmaW5kQ3VycmVudEZpYmVyVXNpbmdTbG93UGF0aCIsImludGVybmFscyRqc2NvbXAkaW5saW5lXzIxNjUiLCJidW5kbGVUeXBlIiwicmVuZGVyZXJQYWNrYWdlTmFtZSIsImN1cnJlbnREaXNwYXRjaGVyUmVmIiwiZmluZEZpYmVyQnlIb3N0SW5zdGFuY2UiLCJyZWNvbmNpbGVyVmVyc2lvbiIsIl9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyIsImhvb2skanNjb21wJGlubGluZV8yMTY2IiwiaXNEaXNhYmxlZCIsInN1cHBvcnRzRmliZXIiLCJpbmplY3QiLCJjcmVhdGVSb290IiwiaXNTdHJpY3RNb2RlIiwidW5zdGFibGVfc3RyaWN0TW9kZSIsInVuc3RhYmxlX3RyYW5zaXRpb25DYWxsYmFja3MiLCJpbml0aWFsQ2hpbGRyZW4iLCJoeWRyYXRpb25DYWxsYmFja3MiLCJ0cmFuc2l0aW9uQ2FsbGJhY2tzIiwiY3JlYXRlRmliZXJSb290IiwiSW50ZXJuYWxzIiwiZ2V0Q3Jvc3NPcmlnaW5TdHJpbmdBcyIsImNyZWF0ZVBvcnRhbCIsImNyZWF0ZVBvcnRhbCQxIiwiZmx1c2hTeW5jIiwicHJldmlvdXNUcmFuc2l0aW9uIiwicHJldmlvdXNVcGRhdGVQcmlvcml0eSIsInByZWNvbm5lY3QiLCJwcmVmZXRjaEROUyIsInByZWluaXQiLCJmZXRjaFByaW9yaXR5Iiwibm9uY2UiLCJwcmVpbml0TW9kdWxlIiwicHJlbG9hZE1vZHVsZSIsInJlcXVlc3RGb3JtUmVzZXQiLCJ1bnN0YWJsZV9iYXRjaGVkVXBkYXRlcyIsInBlcm1hbGluayIsInVzZUZvcm1TdGF0dXMiLCJjaGVja0RDRSIsIlJlYWN0Tm9vcFVwZGF0ZVF1ZXVlIiwiZW1wdHlPYmplY3QiLCJDb21wb25lbnREdW1teSIsIlB1cmVDb21wb25lbnQiLCJwYXJ0aWFsU3RhdGUiLCJmb3JjZVVwZGF0ZSIsInB1cmVDb21wb25lbnRQcm90b3R5cGUiLCJSZWFjdEVsZW1lbnQiLCJzZWxmIiwiaXNWYWxpZEVsZW1lbnQiLCJvYmplY3QiLCJ1c2VyUHJvdmlkZWRLZXlFc2NhcGVSZWdleCIsImdldEVsZW1lbnRLZXkiLCJlc2NhcGVyTG9va3VwIiwibWFwSW50b0FycmF5IiwiZXNjYXBlZFByZWZpeCIsIm5hbWVTb0ZhciIsIm9sZEVsZW1lbnQiLCJuZXdLZXkiLCJpbnZva2VDYWxsYmFjayIsIm5leHROYW1lUHJlZml4IiwicmVzb2x2ZVRoZW5hYmxlIiwibWFwQ2hpbGRyZW4iLCJmdW5jIiwibGF6eUluaXRpYWxpemVyIiwiX3N0YXR1cyIsIl9yZXN1bHQiLCJtb2R1bGVPYmplY3QiLCJkZWZhdWx0IiwiQ2hpbGRyZW4iLCJmb3JFYWNoRnVuYyIsImZvckVhY2hDb250ZXh0IiwibiIsInRvQXJyYXkiLCJvbmx5IiwiRnJhZ21lbnQiLCJQcm9maWxlciIsIlN0cmljdE1vZGUiLCJTdXNwZW5zZSIsImFjdCIsImNsb25lRWxlbWVudCIsImNvbmZpZyIsImNoaWxkQXJyYXkiLCJjcmVhdGVDb250ZXh0IiwiY2hpbGRyZW5MZW5ndGgiLCJjcmVhdGVSZWYiLCJmb3J3YXJkUmVmIiwibGF6eSIsIm1lbW8iLCJzY29wZSIsInVuc3RhYmxlX3VzZUNhY2hlUmVmcmVzaCIsIkNvbnRleHQiLCJoZWFwIiwicGFyZW50SW5kZXgiLCJwZWVrIiwiZmlyc3QiLCJoYWxmTGVuZ3RoIiwibGVmdEluZGV4IiwicmlnaHRJbmRleCIsInJpZ2h0IiwiZGlmZiIsInNvcnRJbmRleCIsInBlcmZvcm1hbmNlIiwibG9jYWxQZXJmb3JtYW5jZSIsImxvY2FsRGF0ZSIsImluaXRpYWxUaW1lIiwidGFza1F1ZXVlIiwidGltZXJRdWV1ZSIsInRhc2tJZENvdW50ZXIiLCJjdXJyZW50VGFzayIsImN1cnJlbnRQcmlvcml0eUxldmVsIiwiaXNQZXJmb3JtaW5nV29yayIsImlzSG9zdENhbGxiYWNrU2NoZWR1bGVkIiwiaXNIb3N0VGltZW91dFNjaGVkdWxlZCIsImxvY2FsU2V0VGltZW91dCIsImxvY2FsQ2xlYXJUaW1lb3V0IiwibG9jYWxTZXRJbW1lZGlhdGUiLCJzZXRJbW1lZGlhdGUiLCJhZHZhbmNlVGltZXJzIiwidGltZXIiLCJzdGFydFRpbWUiLCJoYW5kbGVUaW1lb3V0IiwicmVxdWVzdEhvc3RDYWxsYmFjayIsImZpcnN0VGltZXIiLCJyZXF1ZXN0SG9zdFRpbWVvdXQiLCJzY2hlZHVsZVBlcmZvcm1Xb3JrVW50aWxEZWFkbGluZSIsImlzTWVzc2FnZUxvb3BSdW5uaW5nIiwidGFza1RpbWVvdXRJRCIsImZyYW1lSW50ZXJ2YWwiLCJzaG91bGRZaWVsZFRvSG9zdCIsInBlcmZvcm1Xb3JrVW50aWxEZWFkbGluZSIsImhhc01vcmVXb3JrIiwicHJldmlvdXNQcmlvcml0eUxldmVsIiwicHJpb3JpdHlMZXZlbCIsImNvbnRpbnVhdGlvbkNhbGxiYWNrIiwiTWVzc2FnZUNoYW5uZWwiLCJjaGFubmVsIiwicG9ydCIsInBvcnQyIiwicG9ydDEiLCJvbm1lc3NhZ2UiLCJwb3N0TWVzc2FnZSIsIm1zIiwidW5zdGFibGVfUHJvZmlsaW5nIiwidGFzayIsInVuc3RhYmxlX2NvbnRpbnVlRXhlY3V0aW9uIiwidW5zdGFibGVfZm9yY2VGcmFtZVJhdGUiLCJmcHMiLCJmbG9vciIsInVuc3RhYmxlX2dldEZpcnN0Q2FsbGJhY2tOb2RlIiwidW5zdGFibGVfbmV4dCIsImV2ZW50SGFuZGxlciIsInVuc3RhYmxlX3BhdXNlRXhlY3V0aW9uIiwidW5zdGFibGVfcnVuV2l0aFByaW9yaXR5IiwiZGVsYXkiLCJ0aW1lb3V0IiwidW5zdGFibGVfd3JhcENhbGxiYWNrIiwicGFyZW50UHJpb3JpdHlMZXZlbCIsInN0eWxlc0luRE9NIiwiZ2V0SW5kZXhCeUlkZW50aWZpZXIiLCJpZGVudGlmaWVyIiwibW9kdWxlc1RvRG9tIiwiaWRDb3VudE1hcCIsImlkZW50aWZpZXJzIiwiYmFzZSIsImluZGV4QnlJZGVudGlmaWVyIiwib2JqIiwiY3NzIiwic291cmNlTWFwIiwicmVmZXJlbmNlcyIsImFkZEVsZW1lbnRTdHlsZSIsImJ5SW5kZXgiLCJhcGkiLCJkb21BUEkiLCJuZXdPYmoiLCJyZW1vdmUiLCJsYXN0SWRlbnRpZmllcnMiLCJuZXdMaXN0IiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2kiLCJfaW5kZXgiLCJpbnNlcnQiLCJzdHlsZVRhcmdldCIsImNvbnRlbnREb2N1bWVudCIsImdldFRhcmdldCIsInNldEF0dHJpYnV0ZXMiLCJzdHlsZUVsZW1lbnQiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJzdHlsZVRhZ1RyYW5zZm9ybSIsInJlbW92ZVN0eWxlRWxlbWVudCIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwidXNlU3luY0V4dGVybmFsU3RvcmVXaXRoU2VsZWN0b3IiLCJzZWxlY3RvciIsImlzRXF1YWwiLCJpbnN0UmVmIiwiaGFzVmFsdWUiLCJtZW1vaXplZFNlbGVjdG9yIiwiaGFzTWVtbyIsIm1lbW9pemVkU25hcHNob3QiLCJjdXJyZW50U2VsZWN0aW9uIiwibWVtb2l6ZWRTZWxlY3Rpb24iLCJuZXh0U2VsZWN0aW9uIiwibWF5YmVHZXRTZXJ2ZXJTbmFwc2hvdCIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJnZXR0ZXIiLCJfX2VzTW9kdWxlIiwiZGVmaW5pdGlvbiIsIm8iLCJnIiwiZ2xvYmFsVGhpcyIsIkZ1bmN0aW9uIiwicHJvcCIsIm5jIiwibnVsbExpc3RlbmVycyIsIm5vdGlmeSIsImlzRE9NIiwiaXNSZWFjdE5hdGl2ZSIsIm5hdmlnYXRvciIsInByb2R1Y3QiLCJpc1J1bm5pbmdJblJlYWN0TmF0aXZlIiwidXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCIsImdldFVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiZ2V0UHJvdG90eXBlT2YiLCJDb250ZXh0S2V5IiwiZ1QiLCJnZXRDb250ZXh0IiwiY29udGV4dE1hcCIsInJlYWxDb250ZXh0IiwiUmVhY3RSZWR1eENvbnRleHQiLCJQcm92aWRlcl9kZWZhdWx0IiwicHJvdmlkZXJQcm9wcyIsInNlcnZlclN0YXRlIiwic3RvcmUiLCJjb250ZXh0VmFsdWUiLCJzdWJzY3JpcHRpb24iLCJwYXJlbnRTdWIiLCJ1bnN1YnNjcmliZSIsInN1YnNjcmlwdGlvbnNBbW91bnQiLCJzZWxmU3Vic2NyaWJlZCIsImhhbmRsZUNoYW5nZVdyYXBwZXIiLCJvblN0YXRlQ2hhbmdlIiwidHJ5U3Vic2NyaWJlIiwiYWRkTmVzdGVkU3ViIiwiY2xlYXIiLCJpc1N1YnNjcmliZWQiLCJjcmVhdGVMaXN0ZW5lckNvbGxlY3Rpb24iLCJ0cnlVbnN1YnNjcmliZSIsImNsZWFudXBMaXN0ZW5lciIsInJlbW92ZWQiLCJub3RpZnlOZXN0ZWRTdWJzIiwiZ2V0TGlzdGVuZXJzIiwiY3JlYXRlU3Vic2NyaXB0aW9uIiwiZ2V0U2VydmVyU3RhdGUiLCJwcmV2aW91c1N0YXRlIiwiZ2V0U3RhdGUiLCJjcmVhdGVSZWR1eENvbnRleHRIb29rIiwidXNlUmVkdXhDb250ZXh0IiwiY3JlYXRlU3RvcmVIb29rIiwidXNlUmVkdXhDb250ZXh0MiIsInVzZVN0b3JlMiIsIndpdGhUeXBlcyIsInVzZVN0b3JlIiwiY3JlYXRlRGlzcGF0Y2hIb29rIiwidXNlRGlzcGF0Y2gyIiwidXNlRGlzcGF0Y2giLCJyZWZFcXVhbGl0eSIsImNyZWF0ZVNlbGVjdG9ySG9vayIsInVzZVNlbGVjdG9yMiIsImVxdWFsaXR5Rm5Pck9wdGlvbnMiLCJlcXVhbGl0eUZuIiwicmVkdXhDb250ZXh0Iiwid3JhcHBlZFNlbGVjdG9yIiwic2VsZWN0ZWRTdGF0ZSIsInVzZVNlbGVjdG9yIiwic3ltYm9sX29ic2VydmFibGVfZGVmYXVsdCIsIm9ic2VydmFibGUiLCJyYW5kb21TdHJpbmciLCJzdWJzdHJpbmciLCJhY3Rpb25UeXBlc19kZWZhdWx0IiwiSU5JVCIsIlJFUExBQ0UiLCJQUk9CRV9VTktOT1dOX0FDVElPTiIsInByb3RvIiwiY3JlYXRlU3RvcmUiLCJwcmVsb2FkZWRTdGF0ZSIsImVuaGFuY2VyIiwiY3VycmVudFJlZHVjZXIiLCJjdXJyZW50TGlzdGVuZXJzIiwibmV4dExpc3RlbmVycyIsImxpc3RlbmVySWRDb3VudGVyIiwiaXNEaXNwYXRjaGluZyIsImVuc3VyZUNhbk11dGF0ZU5leHRMaXN0ZW5lcnMiLCJsaXN0ZW5lcklkIiwicmVwbGFjZVJlZHVjZXIiLCJuZXh0UmVkdWNlciIsIm91dGVyU3Vic2NyaWJlIiwib2JzZXJ2ZXIiLCJvYnNlcnZlU3RhdGUiLCJvYnNlcnZlckFzT2JzZXJ2ZXIiLCJjb21wb3NlIiwiZnVuY3MiLCJhcmciLCJyZWR1Y2UiLCJhcmdzIiwiY3JlYXRlVGh1bmtNaWRkbGV3YXJlIiwiZXh0cmFBcmd1bWVudCIsIndpdGhFeHRyYUFyZ3VtZW50IiwiTk9USElORyIsIkRSQUZUQUJMRSIsIkRSQUZUX1NUQVRFIiwiZGllIiwiaXNEcmFmdGFibGUiLCJpc01hcCIsImlzU2V0Iiwib2JqZWN0Q3RvclN0cmluZyIsIkN0b3IiLCJlYWNoIiwiaXRlciIsImdldEFyY2h0eXBlIiwib3duS2V5cyIsImVudHJ5IiwidGhpbmciLCJ0eXBlXyIsInByb3BPck9sZFZhbHVlIiwidCIsImxhdGVzdCIsImNvcHlfIiwiYmFzZV8iLCJzaGFsbG93Q29weSIsInN0cmljdCIsImlzUGxhaW4iLCJkZXNjcmlwdG9ycyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJkZXNjIiwid3JpdGFibGUiLCJmcmVlemUiLCJkZWVwIiwiaXNGcm96ZW4iLCJkb250TXV0YXRlRnJvemVuQ29sbGVjdGlvbnMiLCJlbnRyaWVzIiwiY3VycmVudFNjb3BlIiwicGx1Z2lucyIsImdldFBsdWdpbiIsInBsdWdpbktleSIsInBsdWdpbiIsImdldEN1cnJlbnRTY29wZSIsInVzZVBhdGNoZXNJblNjb3BlIiwicGF0Y2hMaXN0ZW5lciIsInBhdGNoZXNfIiwiaW52ZXJzZVBhdGNoZXNfIiwicGF0Y2hMaXN0ZW5lcl8iLCJyZXZva2VTY29wZSIsImxlYXZlU2NvcGUiLCJkcmFmdHNfIiwicmV2b2tlRHJhZnQiLCJwYXJlbnRfIiwiZW50ZXJTY29wZSIsImltbWVyMiIsImltbWVyXyIsImNhbkF1dG9GcmVlemVfIiwidW5maW5hbGl6ZWREcmFmdHNfIiwiZHJhZnQiLCJyZXZva2VfIiwicmV2b2tlZF8iLCJwcm9jZXNzUmVzdWx0IiwiYmFzZURyYWZ0IiwibW9kaWZpZWRfIiwiZmluYWxpemUiLCJtYXliZUZyZWV6ZSIsImdlbmVyYXRlUmVwbGFjZW1lbnRQYXRjaGVzXyIsInJvb3RTY29wZSIsInBhdGgiLCJjaGlsZFZhbHVlIiwiZmluYWxpemVQcm9wZXJ0eSIsInNjb3BlXyIsImZpbmFsaXplZF8iLCJyZXN1bHRFYWNoIiwiaXNTZXQyIiwiZ2VuZXJhdGVQYXRjaGVzXyIsInBhcmVudFN0YXRlIiwidGFyZ2V0T2JqZWN0Iiwicm9vdFBhdGgiLCJ0YXJnZXRJc1NldCIsInJlcyIsImFzc2lnbmVkXyIsImF1dG9GcmVlemVfIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJvYmplY3RUcmFwcyIsImdldERlc2NyaXB0b3JGcm9tUHJvdG8iLCJkcmFmdF8iLCJyZWFkUHJvcEZyb21Qcm90byIsInByZXBhcmVDb3B5IiwiY3JlYXRlUHJveHkiLCJjdXJyZW50MiIsIm1hcmtDaGFuZ2VkIiwiTnVtYmVyIiwiZGVsZXRlUHJvcGVydHkiLCJzZXRQcm90b3R5cGVPZiIsImFycmF5VHJhcHMiLCJ1c2VTdHJpY3RTaGFsbG93Q29weV8iLCJwcm94eU1hcF8iLCJwcm94eVNldF8iLCJpc01hbnVhbF8iLCJ0cmFwcyIsInJldm9rZSIsInByb3h5IiwiUHJveHkiLCJyZXZvY2FibGUiLCJjcmVhdGVQcm94eVByb3h5IiwiY3VycmVudEltcGwiLCJjb3B5IiwiaW1tZXIiLCJwcm9kdWNlIiwicmVjaXBlIiwiZGVmYXVsdEJhc2UiLCJiYXNlMiIsImhhc0Vycm9yIiwiaXAiLCJwcm9kdWNlV2l0aFBhdGNoZXMiLCJwYXRjaGVzIiwiaW52ZXJzZVBhdGNoZXMiLCJhdXRvRnJlZXplIiwic2V0QXV0b0ZyZWV6ZSIsInVzZVN0cmljdFNoYWxsb3dDb3B5Iiwic2V0VXNlU3RyaWN0U2hhbGxvd0NvcHkiLCJjcmVhdGVEcmFmdCIsImZpbmlzaERyYWZ0IiwiYXBwbHlQYXRjaGVzIiwicGF0Y2giLCJvcCIsImFwcGx5UGF0Y2hlc0ltcGwiLCJhcHBseVBhdGNoZXNfIiwiY29tcG9zZVdpdGhEZXZUb29scyIsIl9fUkVEVVhfREVWVE9PTFNfRVhURU5TSU9OX0NPTVBPU0VfXyIsImNyZWF0ZUFjdGlvbiIsInByZXBhcmVBY3Rpb24iLCJhY3Rpb25DcmVhdG9yIiwicHJlcGFyZWQiLCJtZXRhIiwiX19SRURVWF9ERVZUT09MU19FWFRFTlNJT05fXyIsIlR1cGxlIiwiX1R1cGxlIiwiaXRlbXMiLCJzdXBlciIsInNwZWNpZXMiLCJhcnIiLCJwcmVwZW5kIiwiZnJlZXplRHJhZnRhYmxlIiwidmFsIiwiZ2V0T3JJbnNlcnRDb21wdXRlZCIsImNvbXB1dGUiLCJjcmVhdGVRdWV1ZVdpdGhUaW1lciIsImV4ZWN1dGVSZWR1Y2VyQnVpbGRlckNhbGxiYWNrIiwiYnVpbGRlckNhbGxiYWNrIiwiYWN0aW9uc01hcCIsImFjdGlvbk1hdGNoZXJzIiwiZGVmYXVsdENhc2VSZWR1Y2VyIiwiYnVpbGRlciIsImFkZENhc2UiLCJ0eXBlT3JBY3Rpb25DcmVhdG9yIiwiYWRkTWF0Y2hlciIsIm1hdGNoZXIiLCJhZGREZWZhdWx0Q2FzZSIsImFzeW5jVGh1bmtTeW1ib2wiLCJnZXRUeXBlIiwiYWN0aW9uS2V5IiwiYnVpbGRDcmVhdGVTbGljZSIsImNyZWF0b3JzIiwiY0FUIiwiYXN5bmNUaHVuayIsInJlZHVjZXJQYXRoIiwicmVkdWNlcnMiLCJwYXlsb2FkQ3JlYXRvciIsIl9yZWR1Y2VyRGVmaW5pdGlvblR5cGUiLCJjYXNlUmVkdWNlciIsInByZXBhcmVkUmVkdWNlciIsInByZXBhcmUiLCJidWlsZFJlZHVjZXJDcmVhdG9ycyIsInJlZHVjZXJOYW1lcyIsInNsaWNlQ2FzZVJlZHVjZXJzQnlOYW1lIiwic2xpY2VDYXNlUmVkdWNlcnNCeVR5cGUiLCJhY3Rpb25DcmVhdG9ycyIsInNsaWNlTWF0Y2hlcnMiLCJjb250ZXh0TWV0aG9kcyIsInJlZHVjZXIyIiwiZXhwb3NlQWN0aW9uIiwibmFtZTIiLCJleHBvc2VDYXNlUmVkdWNlciIsImJ1aWxkUmVkdWNlciIsImV4dHJhUmVkdWNlcnMiLCJmaW5hbENhc2VSZWR1Y2VycyIsImdldEluaXRpYWxTdGF0ZSIsImZpbmFsQWN0aW9uTWF0Y2hlcnMiLCJmaW5hbERlZmF1bHRDYXNlUmVkdWNlciIsInNNIiwiZnJvemVuSW5pdGlhbFN0YXRlIiwiY2FzZVJlZHVjZXJzIiwiZmlsdGVyIiwiY3IiLCJjcmVhdGVSZWR1Y2VyIiwicmVkdWNlck5hbWUiLCJyZWR1Y2VyRGVmaW5pdGlvbiIsInJlZHVjZXJEZXRhaWxzIiwiY3JlYXRlTm90YXRpb24iLCJpc0FzeW5jVGh1bmtTbGljZVJlZHVjZXJEZWZpbml0aW9uIiwibWF5YmVSZWR1Y2VyV2l0aFByZXBhcmUiLCJwcmVwYXJlQ2FsbGJhY2siLCJpc0Nhc2VSZWR1Y2VyV2l0aFByZXBhcmVEZWZpbml0aW9uIiwiaGFuZGxlTm9ybWFsUmVkdWNlckRlZmluaXRpb24iLCJmdWxmaWxsZWQiLCJyZWplY3RlZCIsInNldHRsZWQiLCJ0aHVuayIsImhhbmRsZVRodW5rQ2FzZVJlZHVjZXJEZWZpbml0aW9uIiwic2VsZWN0U2VsZiIsImluamVjdGVkU2VsZWN0b3JDYWNoZSIsIl9yZWR1Y2VyIiwibWFrZVNlbGVjdG9yUHJvcHMiLCJyZWR1Y2VyUGF0aDIiLCJpbmplY3RlZCIsInNlbGVjdFNsaWNlIiwic2xpY2VTdGF0ZSIsImdldFNlbGVjdG9ycyIsInNlbGVjdFN0YXRlIiwic2VsZWN0b3JDYWNoZSIsInNlbGVjdG9ycyIsIndyYXBTZWxlY3RvciIsImFjdGlvbnMiLCJpbmplY3RJbnRvIiwiaW5qZWN0YWJsZSIsInBhdGhPcHQiLCJuZXdSZWR1Y2VyUGF0aCIsInJvb3RTdGF0ZSIsInVud3JhcHBlZCIsImNyZWF0ZVNsaWNlIiwidGFibGVTbGljZSIsIl9vYmplY3RTcHJlYWQiLCJhZGRJdGVtIiwicmVtb3ZlSXRlbSIsInRvZ2dsZUNoZWNrZWQiLCJzZXRDaGVja2VkQnlJZCIsInNlbGVjdEFsbCIsInVuc2VsZWN0QWxsIiwicmVtb3ZlU2VsZWN0ZWQiLCJzZXREYXRhIiwiX3RhYmxlU2xpY2UkYWN0aW9ucyIsImxvY2FscyIsInVzZUFwcERpc3BhdGNoIiwidXNlQXBwU2VsZWN0b3IiLCJnZXRDb21wYW5pZXMiLCJpc0FsbENoZWNrZWQiLCJldmVyeSIsImlzQW55Q2hlY2tlZCIsInNvbWUiLCJBcHBCdXR0b24iLCJfcmVmIiwiY2xhc3NOYW1lIiwiX3JlZiRzaXplIiwiX3JlZiR2YXJpYW50IiwidmFyaWFudCIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllcyIsIl9leGNsdWRlZCIsIl9leHRlbmRzIiwiZ2V0U2l6ZUNsYXNzIiwiZ2V0VmFyaWFudENsYXNzIiwiQXBwVGV4dElucHV0IiwiTW9kaWZpYWJsZUZpZWxkIiwib25DaGFuZ2UiLCJfdXNlU3RhdGUyIiwiX3NsaWNlZFRvQXJyYXkiLCJpc0NoYW5naW5nIiwic2V0SXNDaGFuZ2luZyIsIl91c2VTdGF0ZTQiLCJuZXdUZXh0Iiwic2V0TmV3VGV4dCIsIkNvbXBhbnlSb3ciLCJjb21wYW55SWQiLCJjb21wYW55IiwiZmluZCIsImhhbmRsZUNoZWNrYm94Q2hhbmdlIiwiaGFuZGxlTmFtZUNoYW5nZSIsImhhbmRsZUFkZHJlc3NDaGFuZ2UiLCJhZGRyZXNzIiwiY2hlY2tib3hSZWYiLCJUYWJsZVJvdyIsIl9jaGVja2JveFJlZiRjdXJyZW50IiwiY2xpY2siLCJfcmVmMiIsIl9jbGFzc0NhbGxDaGVjayIsIlR5cGVFcnJvciIsInRvUHJvcGVydHlLZXkiLCJ0b1ByaW1pdGl2ZSIsIl9kZWZpbmVQcm9wZXJ0aWVzIiwiX2NyZWF0ZUNsYXNzIiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJSZWZlcmVuY2VFcnJvciIsIl9nZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsIl9zZXRQcm90b3R5cGVPZiIsIl9pbmhlcml0cyIsIl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90RmxhZyIsIl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90IiwicG9seWZpbGwiLCJmb3VuZFdpbGxNb3VudE5hbWUiLCJmb3VuZFdpbGxSZWNlaXZlUHJvcHNOYW1lIiwiZm91bmRXaWxsVXBkYXRlTmFtZSIsImNvbXBvbmVudE5hbWUiLCJuZXdBcGlOYW1lIiwibWF5YmVTbmFwc2hvdCIsInNuYXBzaG90IiwiZGVmaW5lUHJvcGVydGllcyIsIl9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QiLCJCb29sZWFuIiwidmFsdWVPZiIsIl9fc3VwcHJlc3NEZXByZWNhdGlvbldhcm5pbmciLCJBcnJvd0tleVN0ZXBwZXIiLCJfUmVhY3QkUHVyZUNvbXBvbmVudCIsIl90aGlzIiwiX2xlbiIsIl9rZXkiLCJzY3JvbGxUb0NvbHVtbiIsInNjcm9sbFRvUm93IiwiaW5zdGFuY2VQcm9wcyIsInByZXZTY3JvbGxUb0NvbHVtbiIsInByZXZTY3JvbGxUb1JvdyIsIl90aGlzJHByb3BzIiwiY29sdW1uQ291bnQiLCJyb3dDb3VudCIsIl90aGlzJF9nZXRTY3JvbGxTdGF0ZSIsIl9nZXRTY3JvbGxTdGF0ZSIsInNjcm9sbFRvQ29sdW1uUHJldmlvdXMiLCJzY3JvbGxUb1Jvd1ByZXZpb3VzIiwiX3RoaXMkX2dldFNjcm9sbFN0YXRlMiIsIl9yb3dTdG9wSW5kZXgiLCJtYXgiLCJfY29sdW1uU3RhcnRJbmRleCIsIl9jb2x1bW5TdG9wSW5kZXgiLCJfcm93U3RhcnRJbmRleCIsIl91cGRhdGVTY3JvbGxTdGF0ZSIsImNvbHVtblN0YXJ0SW5kZXgiLCJjb2x1bW5TdG9wSW5kZXgiLCJyb3dTdGFydEluZGV4Iiwicm93U3RvcEluZGV4IiwiX3RoaXMkcHJvcHMyIiwiX3RoaXMkX2dldFNjcm9sbFN0YXRlMyIsIm9uS2V5RG93biIsIl9vbktleURvd24iLCJvblNlY3Rpb25SZW5kZXJlZCIsIl9vblNlY3Rpb25SZW5kZXJlZCIsImlzQ29udHJvbGxlZCIsIl9yZWYzIiwiX3RoaXMkcHJvcHMzIiwib25TY3JvbGxUb0NoYW5nZSIsImNyZWF0ZURldGVjdEVsZW1lbnRSZXNpemUiLCJob3N0V2luZG93IiwiX3dpbmRvdyIsInJlcXVlc3RGcmFtZSIsInJhZiIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsIm1velJlcXVlc3RBbmltYXRpb25GcmFtZSIsIndlYmtpdFJlcXVlc3RBbmltYXRpb25GcmFtZSIsImNhbmNlbEZyYW1lIiwiY2FuY2VsIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJtb3pDYW5jZWxBbmltYXRpb25GcmFtZSIsIndlYmtpdENhbmNlbEFuaW1hdGlvbkZyYW1lIiwicmVzZXRUcmlnZ2VycyIsInRyaWdnZXJzIiwiX19yZXNpemVUcmlnZ2Vyc19fIiwiZXhwYW5kIiwiZmlyc3RFbGVtZW50Q2hpbGQiLCJjb250cmFjdCIsImxhc3RFbGVtZW50Q2hpbGQiLCJleHBhbmRDaGlsZCIsInNjcm9sbFdpZHRoIiwic2Nyb2xsSGVpZ2h0Iiwib2Zmc2V0V2lkdGgiLCJvZmZzZXRIZWlnaHQiLCJzY3JvbGxMaXN0ZW5lciIsIl9fcmVzaXplUkFGX18iLCJfX3Jlc2l6ZUxhc3RfXyIsImNoZWNrVHJpZ2dlcnMiLCJfX3Jlc2l6ZUxpc3RlbmVyc19fIiwia2V5ZnJhbWVwcmVmaXgiLCJhbmltYXRpb25zdGFydGV2ZW50IiwiZG9tUHJlZml4ZXMiLCJzdGFydEV2ZW50cyIsImVsbSIsImFuaW1hdGlvbktleWZyYW1lcyIsImFuaW1hdGlvblN0eWxlIiwiYWRkUmVzaXplTGlzdGVuZXIiLCJlbGVtZW50U3R5bGUiLCJnZXRDb21wdXRlZFN0eWxlIiwicG9zaXRpb24iLCJnZXRFbGVtZW50QnlJZCIsImNyZWF0ZVN0eWxlcyIsImV4cGFuZFRyaWdnZXIiLCJjb250cmFjdFRyaWdnZXIiLCJfX2FuaW1hdGlvbkxpc3RlbmVyX18iLCJyZW1vdmVSZXNpemVMaXN0ZW5lciIsIkF1dG9TaXplciIsIl9SZWFjdCRDb21wb25lbnQiLCJkZWZhdWx0SGVpZ2h0IiwiZGVmYXVsdFdpZHRoIiwiZGlzYWJsZUhlaWdodCIsImRpc2FibGVXaWR0aCIsIm9uUmVzaXplIiwiX3BhcmVudE5vZGUiLCJwYWRkaW5nTGVmdCIsInBhcnNlSW50IiwicGFkZGluZ1JpZ2h0IiwicGFkZGluZ1RvcCIsInBhZGRpbmdCb3R0b20iLCJuZXdIZWlnaHQiLCJuZXdXaWR0aCIsImF1dG9TaXplciIsIl9hdXRvU2l6ZXIiLCJIVE1MRWxlbWVudCIsIl9kZXRlY3RFbGVtZW50UmVzaXplIiwiX29uUmVzaXplIiwiX3RoaXMkc3RhdGUiLCJvdXRlclN0eWxlIiwiY2hpbGRQYXJhbXMiLCJfc2V0UmVmIiwiQ2VsbE1lYXN1cmVyIiwiX3RoaXMkcHJvcHMkY29sdW1uSW5kIiwiY29sdW1uSW5kZXgiLCJfdGhpcyRwcm9wcyRyb3dJbmRleCIsInJvd0luZGV4IiwiX3RoaXMkX2dldENlbGxNZWFzdXJlIiwiX2dldENlbGxNZWFzdXJlbWVudHMiLCJnZXRIZWlnaHQiLCJnZXRXaWR0aCIsInJlY29tcHV0ZUdyaWRTaXplIiwiRWxlbWVudCIsIndhcm4iLCJfY2hpbGQiLCJfbWF5YmVNZWFzdXJlQ2VsbCIsIl90aGlzMiIsInJlc29sdmVkQ2hpbGRyZW4iLCJtZWFzdXJlIiwiX21lYXN1cmUiLCJyZWdpc3RlckNoaWxkIiwiX3JlZ2lzdGVyQ2hpbGQiLCJzdHlsZVdpZHRoIiwic3R5bGVIZWlnaHQiLCJoYXNGaXhlZFdpZHRoIiwiaGFzRml4ZWRIZWlnaHQiLCJjZWlsIiwiX3RoaXMkcHJvcHMyJGNvbHVtbkluIiwiX3RoaXMkcHJvcHMyJHJvd0luZGV4IiwiX3RoaXMkX2dldENlbGxNZWFzdXJlMiIsImludmFsaWRhdGVDZWxsU2l6ZUFmdGVyUmVuZGVyIiwiY3JlYXRlQ2FsbGJhY2tNZW1vaXplciIsInJlcXVpcmVBbGxLZXlzIiwiY2FjaGVkSW5kaWNlcyIsImluZGljZXMiLCJhbGxJbml0aWFsaXplZCIsImluZGV4Q2hhbmdlZCIsImNhY2hlZFZhbHVlIiwic2Nyb2xsYmFyU2l6ZSIsInJlY2FsYyIsInNjcm9sbERpdiIsImNsaWVudFdpZHRoIiwiU0NST0xMX1BPU0lUSU9OX0NIQU5HRV9SRUFTT05TIiwiQ29sbGVjdGlvblZpZXciLCJpc1Njcm9sbGluZyIsImNlbGxMYXlvdXRNYW5hZ2VyIiwiX29uU2VjdGlvblJlbmRlcmVkTWVtb2l6ZXIiLCJnZXRMYXN0UmVuZGVyZWRJbmRpY2VzIiwiX3Njcm9sbGluZ0NvbnRhaW5lciIsInNjcm9sbFRvQWxpZ25tZW50Iiwic2Nyb2xsVG9DZWxsIiwic2Nyb2xsUG9zaXRpb24iLCJnZXRTY3JvbGxQb3NpdGlvbkZvckNlbGwiLCJhbGlnbiIsImNlbGxJbmRleCIsIl9zZXRTY3JvbGxQb3NpdGlvbiIsIl9lbmFibGVQb2ludGVyRXZlbnRzQWZ0ZXJEZWxheSIsImlzU2Nyb2xsaW5nQ2hhbmdlIiwiX3Njcm9sbGJhclNpemUiLCJfY2VsbExheW91dE1hbmFnZXIkZ2UiLCJnZXRUb3RhbFNpemUiLCJ0b3RhbEhlaWdodCIsInRvdGFsV2lkdGgiLCJzY3JvbGxQb3NpdGlvbkNoYW5nZVJlYXNvbiIsIl9pbnZva2VPblNjcm9sbE1lbW9pemVyIiwiX3Njcm9sbGJhclNpemVNZWFzdXJlZCIsIl9jYWxjdWxhdGVTaXplQW5kUG9zaXRpb25EYXRhT25OZXh0VXBkYXRlIiwiX3RoaXMkcHJvcHM0IiwiX3VwZGF0ZVNjcm9sbFBvc2l0aW9uRm9yU2Nyb2xsVG9DZWxsIiwiX2ludm9rZU9uU2VjdGlvblJlbmRlcmVkSGVscGVyIiwiX2NlbGxMYXlvdXRNYW5hZ2VyJGdlMiIsIl90aGlzJHByb3BzNSIsIl90aGlzJHN0YXRlMiIsIl9kaXNhYmxlUG9pbnRlckV2ZW50c1RpbWVvdXRJZCIsIl90aGlzJHByb3BzNiIsImF1dG9IZWlnaHQiLCJjZWxsQ291bnQiLCJob3Jpem9udGFsT3ZlcnNjYW5TaXplIiwibm9Db250ZW50UmVuZGVyZXIiLCJ2ZXJ0aWNhbE92ZXJzY2FuU2l6ZSIsIl90aGlzJHN0YXRlMyIsIl9sYXN0UmVuZGVyZWRDZWxsQ291bnQiLCJfbGFzdFJlbmRlcmVkQ2VsbExheW91dE1hbmFnZXIiLCJjYWxjdWxhdGVTaXplQW5kUG9zaXRpb25EYXRhIiwiX2NlbGxMYXlvdXRNYW5hZ2VyJGdlMyIsImJvdHRvbSIsImNoaWxkcmVuVG9EaXNwbGF5IiwiY2VsbFJlbmRlcmVycyIsImNvbGxlY3Rpb25TdHlsZSIsImJveFNpemluZyIsImRpcmVjdGlvbiIsIldlYmtpdE92ZXJmbG93U2Nyb2xsaW5nIiwid2lsbENoYW5nZSIsInZlcnRpY2FsU2Nyb2xsQmFyU2l6ZSIsImhvcml6b250YWxTY3JvbGxCYXJTaXplIiwib3ZlcmZsb3dYIiwib3ZlcmZsb3dZIiwiX3NldFNjcm9sbGluZ0NvbnRhaW5lclJlZiIsIl9vblNjcm9sbCIsInJvbGUiLCJ0YWJJbmRleCIsIm1heEhlaWdodCIsIm1heFdpZHRoIiwicG9pbnRlckV2ZW50cyIsIl90aGlzMyIsIl9vblNjcm9sbE1lbW9pemVyIiwiX3RoaXMzJHByb3BzIiwiY2xpZW50SGVpZ2h0IiwicHJvcFR5cGVzIiwiU2VjdGlvbiIsIl9pbmRleE1hcCIsIl9pbmRpY2VzIiwiU2VjdGlvbk1hbmFnZXIiLCJzZWN0aW9uU2l6ZSIsIl9zZWN0aW9uU2l6ZSIsIl9jZWxsTWV0YWRhdGEiLCJfc2VjdGlvbnMiLCJnZXRTZWN0aW9ucyIsInNlY3Rpb24iLCJnZXRDZWxsSW5kaWNlcyIsInNlY3Rpb25YU3RhcnQiLCJzZWN0aW9uWFN0b3AiLCJzZWN0aW9uWVN0YXJ0Iiwic2VjdGlvbllTdG9wIiwic2VjdGlvbnMiLCJzZWN0aW9uWCIsInNlY3Rpb25ZIiwiX3JlZjQiLCJjZWxsTWV0YWRhdHVtIiwiYWRkQ2VsbEluZGV4IiwiZ2V0VXBkYXRlZE9mZnNldEZvckluZGV4IiwiX3JlZiRhbGlnbiIsImNlbGxPZmZzZXQiLCJjZWxsU2l6ZSIsImNvbnRhaW5lclNpemUiLCJjdXJyZW50T2Zmc2V0IiwibWF4T2Zmc2V0IiwibWluT2Zmc2V0IiwiQ29sbGVjdGlvbiIsIl9sYXN0UmVuZGVyZWRDZWxsSW5kaWNlcyIsIl9jZWxsQ2FjaGUiLCJfaXNTY3JvbGxpbmdDaGFuZ2UiLCJfc2V0Q29sbGVjdGlvblZpZXdSZWYiLCJfY29sbGVjdGlvblZpZXciLCJyZWNvbXB1dGVDZWxsU2l6ZXNBbmRQb3NpdGlvbnMiLCJfb2JqZWN0RGVzdHJ1Y3R1cmluZ0VtcHR5IiwiY2VsbFNpemVBbmRQb3NpdGlvbkdldHRlciIsImNlbGxNZXRhZGF0YSIsInNlY3Rpb25NYW5hZ2VyIiwicmVnaXN0ZXJDZWxsIiwiX3NlY3Rpb25NYW5hZ2VyIiwiX2hlaWdodCIsIl93aWR0aCIsInRhcmdldEluZGV4IiwiY2VsbEdyb3VwUmVuZGVyZXIiLCJjZWxsUmVuZGVyZXIiLCJjZWxsQ2FjaGUiLCJnZXRDZWxsTWV0YWRhdGEiLCJjYWxjdWxhdGVTaXplQW5kUG9zaXRpb25EYXRhQW5kVXBkYXRlU2Nyb2xsT2Zmc2V0IiwiY29tcHV0ZU1ldGFkYXRhQ2FsbGJhY2siLCJjb21wdXRlTWV0YWRhdGFDYWxsYmFja1Byb3BzIiwibmV4dENlbGxzQ291bnQiLCJuZXh0Q2VsbFNpemUiLCJuZXh0U2Nyb2xsVG9JbmRleCIsInNjcm9sbFRvSW5kZXgiLCJ1cGRhdGVTY3JvbGxPZmZzZXRGb3JTY3JvbGxUb0luZGV4IiwiY2VsbFJlbmRlcmVyUHJvcHMiLCJyZW5kZXJlZENlbGwiLCJDb2x1bW5TaXplciIsImNvbHVtbk1heFdpZHRoIiwiY29sdW1uTWluV2lkdGgiLCJfcmVnaXN0ZXJlZENoaWxkIiwic2FmZUNvbHVtbk1pbldpZHRoIiwic2FmZUNvbHVtbk1heFdpZHRoIiwiY29sdW1uV2lkdGgiLCJhZGp1c3RlZFdpZHRoIiwiZ2V0Q29sdW1uV2lkdGgiLCJ3aW4iLCJDZWxsU2l6ZUFuZFBvc2l0aW9uTWFuYWdlciIsImNlbGxTaXplR2V0dGVyIiwiZXN0aW1hdGVkQ2VsbFNpemUiLCJfY2VsbFNpemVHZXR0ZXIiLCJfY2VsbENvdW50IiwiX2VzdGltYXRlZENlbGxTaXplIiwiX2xhc3RNZWFzdXJlZEluZGV4IiwibGFzdE1lYXN1cmVkQ2VsbFNpemVBbmRQb3NpdGlvbiIsImdldFNpemVBbmRQb3NpdGlvbk9mTGFzdE1lYXN1cmVkQ2VsbCIsIl9jZWxsU2l6ZUFuZFBvc2l0aW9uRGF0YSIsIl9sYXN0QmF0Y2hlZEluZGV4IiwiX3JlZjMkYWxpZ24iLCJpZGVhbE9mZnNldCIsImRhdHVtIiwiZ2V0U2l6ZUFuZFBvc2l0aW9uT2ZDZWxsIiwidG90YWxTaXplIiwicGFyYW1zIiwiX2ZpbmROZWFyZXN0Q2VsbCIsInN0b3AiLCJoaWdoIiwibG93IiwibWlkZGxlIiwiaW50ZXJ2YWwiLCJfYmluYXJ5U2VhcmNoIiwibGFzdE1lYXN1cmVkSW5kZXgiLCJfZXhwb25lbnRpYWxTZWFyY2giLCJTY2FsaW5nQ2VsbFNpemVBbmRQb3NpdGlvbk1hbmFnZXIiLCJfcmVmJG1heFNjcm9sbFNpemUiLCJtYXhTY3JvbGxTaXplIiwiY2hyb21lIiwiX2NlbGxTaXplQW5kUG9zaXRpb25NYW5hZ2VyIiwiX21heFNjcm9sbFNpemUiLCJjb25maWd1cmUiLCJnZXRDZWxsQ291bnQiLCJnZXRFc3RpbWF0ZWRDZWxsU2l6ZSIsImdldExhc3RNZWFzdXJlZEluZGV4Iiwic2FmZVRvdGFsU2l6ZSIsIm9mZnNldFBlcmNlbnRhZ2UiLCJfZ2V0T2Zmc2V0UGVyY2VudGFnZSIsInJvdW5kIiwiX3NhZmVPZmZzZXRUb09mZnNldCIsIl9vZmZzZXRUb1NhZmVPZmZzZXQiLCJnZXRWaXNpYmxlQ2VsbFJhbmdlIiwicmVzZXRDZWxsIiwiX3JlZjUiLCJfcmVmNiIsIl9yZWY3IiwidXBkYXRlU2Nyb2xsSW5kZXhIZWxwZXIiLCJjZWxsU2l6ZUFuZFBvc2l0aW9uTWFuYWdlciIsInByZXZpb3VzQ2VsbHNDb3VudCIsInByZXZpb3VzQ2VsbFNpemUiLCJwcmV2aW91c1Njcm9sbFRvQWxpZ25tZW50IiwicHJldmlvdXNTY3JvbGxUb0luZGV4IiwicHJldmlvdXNTaXplIiwic2Nyb2xsT2Zmc2V0Iiwic2l6ZUp1c3RJbmNyZWFzZWRGcm9tWmVybyIsInVwZGF0ZVNjcm9sbEluZGV4Q2FsbGJhY2siLCJoYXNTY3JvbGxUb0luZGV4IiwicmVxdWVzdCIsIm9SZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJtc1JlcXVlc3RBbmltYXRpb25GcmFtZSIsIm9DYW5jZWxBbmltYXRpb25GcmFtZSIsIm1zQ2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJjYWYiLCJjYW5jZWxBbmltYXRpb25UaW1lb3V0IiwicmVxdWVzdEFuaW1hdGlvblRpbWVvdXQiLCJfdGltZW91dCIsIkdyaWQiLCJuZWVkVG9SZXNldFN0eWxlQ2FjaGUiLCJfb25HcmlkUmVuZGVyZWRNZW1vaXplciIsImNvbHVtbk92ZXJzY2FuU3RhcnRJbmRleCIsImNvbHVtbk92ZXJzY2FuU3RvcEluZGV4IiwiX3JlbmRlcmVkQ29sdW1uU3RhcnRJbmRleCIsIl9yZW5kZXJlZENvbHVtblN0b3BJbmRleCIsInJvd092ZXJzY2FuU3RhcnRJbmRleCIsInJvd092ZXJzY2FuU3RvcEluZGV4IiwiX3JlbmRlcmVkUm93U3RhcnRJbmRleCIsIl9yZW5kZXJlZFJvd1N0b3BJbmRleCIsImVsZW1lbnRSZWYiLCJoYW5kbGVTY3JvbGxFdmVudCIsImNvbHVtblNpemVBbmRQb3NpdGlvbk1hbmFnZXIiLCJfd3JhcFNpemVHZXR0ZXIiLCJfZ2V0RXN0aW1hdGVkQ29sdW1uU2l6ZSIsInJvd1NpemVBbmRQb3NpdGlvbk1hbmFnZXIiLCJyb3dIZWlnaHQiLCJfZ2V0RXN0aW1hdGVkUm93U2l6ZSIsInByZXZDb2x1bW5XaWR0aCIsInByZXZSb3dIZWlnaHQiLCJwcmV2Q29sdW1uQ291bnQiLCJwcmV2Um93Q291bnQiLCJwcmV2SXNTY3JvbGxpbmciLCJzY3JvbGxiYXJTaXplTWVhc3VyZWQiLCJzY3JvbGxEaXJlY3Rpb25Ib3Jpem9udGFsIiwic2Nyb2xsRGlyZWN0aW9uVmVydGljYWwiLCJfaW5pdGlhbFNjcm9sbFRvcCIsIl9nZXRDYWxjdWxhdGVkU2Nyb2xsVG9wIiwiX2luaXRpYWxTY3JvbGxMZWZ0IiwiX2dldENhbGN1bGF0ZWRTY3JvbGxMZWZ0IiwiX3JlZiRhbGlnbm1lbnQiLCJhbGlnbm1lbnQiLCJfcmVmJGNvbHVtbkluZGV4IiwiX3JlZiRyb3dJbmRleCIsIm9mZnNldFByb3BzIiwiX3JlZjIkc2Nyb2xsTGVmdCIsInNjcm9sbExlZnRQYXJhbSIsIl9yZWYyJHNjcm9sbFRvcCIsInNjcm9sbFRvcFBhcmFtIiwiX2RlYm91bmNlU2Nyb2xsRW5kZWQiLCJhdXRvV2lkdGgiLCJ0b3RhbFJvd3NIZWlnaHQiLCJ0b3RhbENvbHVtbnNXaWR0aCIsIl9kZWZlcnJlZEludmFsaWRhdGVDb2x1bW5JbmRleCIsIl9kZWZlcnJlZEludmFsaWRhdGVSb3dJbmRleCIsIl9yZWY0JGNvbHVtbkluZGV4IiwiX3JlZjQkcm93SW5kZXgiLCJfcmVjb21wdXRlU2Nyb2xsTGVmdEZsYWciLCJfcmVjb21wdXRlU2Nyb2xsVG9wRmxhZyIsIl9zdHlsZUNhY2hlIiwiX3VwZGF0ZVNjcm9sbExlZnRGb3JTY3JvbGxUb0NvbHVtbiIsIl91cGRhdGVTY3JvbGxUb3BGb3JTY3JvbGxUb1JvdyIsImdldFNjcm9sbGJhclNpemUiLCJfaGFuZGxlSW52YWxpZGF0ZWRHcmlkU2l6ZSIsInN0YXRlVXBkYXRlIiwiX2dldFNjcm9sbFRvUG9zaXRpb25TdGF0ZVVwZGF0ZSIsInNpemVJc0JpZ2dlclRoYW5aZXJvIiwiX2ludm9rZU9uR3JpZFJlbmRlcmVkSGVscGVyIiwiX21heWJlQ2FsbE9uU2Nyb2xsYmFyUHJlc2VuY2VDaGFuZ2UiLCJjb2x1bW5PclJvd0NvdW50SnVzdEluY3JlYXNlZEZyb21aZXJvIiwiYXV0b0NvbnRhaW5lcldpZHRoIiwiY29udGFpbmVyUHJvcHMiLCJjb250YWluZXJSb2xlIiwiY29udGFpbmVyU3R5bGUiLCJfaXNTY3JvbGxpbmciLCJncmlkU3R5bGUiLCJfcmVzZXRTdHlsZUNhY2hlIiwiX2NhbGN1bGF0ZUNoaWxkcmVuVG9SZW5kZXIiLCJfaG9yaXpvbnRhbFNjcm9sbEJhclNpemUiLCJfdmVydGljYWxTY3JvbGxCYXJTaXplIiwiX3Njcm9sbGJhclByZXNlbmNlQ2hhbmdlZCIsIl9jaGlsZHJlblRvRGlzcGxheSIsInNob3dOb0NvbnRlbnRSZW5kZXJlciIsImNlbGxSYW5nZVJlbmRlcmVyIiwiZGVmZXJyZWRNZWFzdXJlbWVudENhY2hlIiwib3ZlcnNjYW5Db2x1bW5Db3VudCIsIm92ZXJzY2FuSW5kaWNlc0dldHRlciIsIm92ZXJzY2FuUm93Q291bnQiLCJpc1Njcm9sbGluZ09wdE91dCIsInZpc2libGVDb2x1bW5JbmRpY2VzIiwidmlzaWJsZVJvd0luZGljZXMiLCJob3Jpem9udGFsT2Zmc2V0QWRqdXN0bWVudCIsImdldE9mZnNldEFkanVzdG1lbnQiLCJ2ZXJ0aWNhbE9mZnNldEFkanVzdG1lbnQiLCJvdmVyc2NhbkNvbHVtbkluZGljZXMiLCJvdmVyc2NhbkNlbGxzQ291bnQiLCJzY3JvbGxEaXJlY3Rpb24iLCJzdGFydEluZGV4Iiwic3RvcEluZGV4Iiwib3ZlcnNjYW5Sb3dJbmRpY2VzIiwib3ZlcnNjYW5TdGFydEluZGV4Iiwib3ZlcnNjYW5TdG9wSW5kZXgiLCJzdHlsZUNhY2hlIiwic2Nyb2xsaW5nUmVzZXRUaW1lSW50ZXJ2YWwiLCJfZGVib3VuY2VTY3JvbGxFbmRlZENhbGxiYWNrIiwib25TY3JvbGxiYXJQcmVzZW5jZUNoYW5nZSIsImhvcml6b250YWwiLCJ2ZXJ0aWNhbCIsIl9yZWY4IiwiX2dldFNjcm9sbExlZnRGb3JTY3JvbGxUb0NvbHVtblN0YXRlVXBkYXRlIiwiX2dldFNjcm9sbFRvcEZvclNjcm9sbFRvUm93U3RhdGVVcGRhdGUiLCJtYXliZVN0YXRlQSIsIm1heWJlU3RhdGVCIiwiZXN0aW1hdGVkQ29sdW1uU2l6ZSIsImVzdGltYXRlZFJvd1NpemUiLCJfcmVmOSIsImZpbmFsQ29sdW1uIiwic2Nyb2xsQmFyU2l6ZSIsImNhbGN1bGF0ZWRTY3JvbGxMZWZ0IiwiZmluYWxSb3ciLCJjYWxjdWxhdGVkU2Nyb2xsVG9wIiwicmVuZGVyZWRDZWxscyIsImFyZU9mZnNldHNBZGp1c3RlZCIsImNhbkNhY2hlU3R5bGUiLCJyb3dEYXR1bSIsImNvbHVtbkRhdHVtIiwiaXNWaXNpYmxlIiwiY2VsbFJlbmRlcmVyUGFyYW1zIiwiZnJvbSIsIkluZmluaXRlTG9hZGVyIiwiX2xvYWRNb3JlUm93c01lbW9pemVyIiwiX29uUm93c1JlbmRlcmVkIiwiYXV0b1JlbG9hZCIsIl9kb1N0dWZmIiwiX2xhc3RSZW5kZXJlZFN0YXJ0SW5kZXgiLCJfbGFzdFJlbmRlcmVkU3RvcEluZGV4Iiwib25Sb3dzUmVuZGVyZWQiLCJ1bmxvYWRlZFJhbmdlcyIsImxvYWRNb3JlUm93cyIsInVubG9hZGVkUmFuZ2UiLCJwcm9taXNlIiwibGFzdFJlbmRlcmVkU3RhcnRJbmRleCIsImxhc3RSZW5kZXJlZFN0b3BJbmRleCIsImN1cnJlbnRJbmRleCIsInJlY29tcHV0ZVNpemUiLCJyZWNvbXB1dGVSb3dIZWlnaHRzIiwiZm9yY2VVcGRhdGVSZWFjdFZpcnR1YWxpemVkQ29tcG9uZW50IiwiaXNSb3dMb2FkZWQiLCJtaW5pbXVtQmF0Y2hTaXplIiwidGhyZXNob2xkIiwicmFuZ2VTdGFydEluZGV4IiwicmFuZ2VTdG9wSW5kZXgiLCJwb3RlbnRpYWxTdG9wSW5kZXgiLCJmaXJzdFVubG9hZGVkUmFuZ2UiLCJfaW5kZXgyIiwic2NhbkZvclVubG9hZGVkUmFuZ2VzIiwic3F1YXNoZWRVbmxvYWRlZFJhbmdlcyIsIl90b0NvbnN1bWFibGVBcnJheSIsIl9sb2FkVW5sb2FkZWRSYW5nZXMiLCJyZWdpc3RlcmVkQ2hpbGQiLCJMaXN0Iiwicm93UmVuZGVyZXIiLCJ3aWR0aERlc2NyaXB0b3IiLCJnZXRPZmZzZXRGb3JDZWxsIiwibWVhc3VyZUFsbENlbGxzIiwiX3JlZjYkY29sdW1uSW5kZXgiLCJfcmVmNiRyb3dJbmRleCIsInNjcm9sbFRvUG9zaXRpb24iLCJub1Jvd3NSZW5kZXJlciIsImNsYXNzTmFtZXMiLCJfY2VsbFJlbmRlcmVyIiwibCIsImgiLCJfR0VQIiwiX0dFQSIsIkludGVydmFsVHJlZU5vZGUiLCJtaWQiLCJsZWZ0UG9pbnRzIiwicmlnaHRQb2ludHMiLCJyZWJ1aWxkIiwiaW50ZXJ2YWxzIiwibnRyZWUiLCJjcmVhdGVJbnRlcnZhbFRyZWUiLCJyZWJ1aWxkV2l0aEludGVydmFsIiwicmVidWlsZFdpdGhvdXRJbnRlcnZhbCIsImlkeCIsInJlcG9ydExlZnRSYW5nZSIsImhpIiwicmVwb3J0UmlnaHRSYW5nZSIsImxvIiwicmVwb3J0UmFuZ2UiLCJjb21wYXJlTnVtYmVycyIsImNvbXBhcmVCZWdpbiIsImNvbXBhcmVFbmQiLCJwdHMiLCJzb3J0IiwibGVmdEludGVydmFscyIsInJpZ2h0SW50ZXJ2YWxzIiwiY2VudGVySW50ZXJ2YWxzIiwicyIsIkludGVydmFsVHJlZSIsIndlaWdodCIsInF1ZXJ5UG9pbnQiLCJxdWVyeUludGVydmFsIiwidHByb3RvIiwiUG9zaXRpb25DYWNoZSIsImRlZmF1bHRDZWxsSGVpZ2h0IiwidW5tZWFzdXJlZENlbGxDb3VudCIsInRhbGxlc3RDb2x1bW5TaXplIiwicmVuZGVyQ2FsbGJhY2siLCJfaW50ZXJ2YWxUcmVlIiwidSIsIl9sZWZ0TWFwIiwiY29sdW1uU2l6ZU1hcCIsIl9jb2x1bW5TaXplTWFwIiwiY29sdW1uSGVpZ2h0IiwiTWFzb25yeSIsImV2ZW50U2Nyb2xsVG9wIiwiX2dldEVzdGltYXRlZFRvdGFsSGVpZ2h0IiwiX2RlYm91bmNlUmVzZXRJc1Njcm9sbGluZyIsIl9wb3NpdGlvbkNhY2hlIiwiX2ludmFsaWRhdGVPblVwZGF0ZVN0YXJ0SW5kZXgiLCJfaW52YWxpZGF0ZU9uVXBkYXRlU3RvcEluZGV4IiwiX3BvcHVsYXRlUG9zaXRpb25DYWNoZSIsIl9jaGVja0ludmFsaWRhdGVPblVwZGF0ZSIsIl9pbnZva2VPblNjcm9sbENhbGxiYWNrIiwiX2ludm9rZU9uQ2VsbHNSZW5kZXJlZENhbGxiYWNrIiwiX2RlYm91bmNlUmVzZXRJc1Njcm9sbGluZ0lkIiwiY2VsbE1lYXN1cmVyQ2FjaGUiLCJrZXlNYXBwZXIiLCJvdmVyc2NhbkJ5UGl4ZWxzIiwicm93RGlyZWN0aW9uIiwiZXN0aW1hdGVUb3RhbEhlaWdodCIsInNob3J0ZXN0Q29sdW1uU2l6ZSIsIm1lYXN1cmVkQ2VsbENvdW50IiwiYmF0Y2hTaXplIiwiX3N0YXJ0SW5kZXgiLCJfc3RvcEluZGV4IiwiX2RlYm91bmNlUmVzZXRJc1Njcm9sbGluZ0NhbGxiYWNrIiwiZXN0aW1hdGVkQ29sdW1uQ291bnQiLCJfb25TY3JvbGxNZW1vaXplZCIsIl9zdGFydEluZGV4TWVtb2l6ZWQiLCJfc3RvcEluZGV4TWVtb2l6ZWQiLCJvbkNlbGxzUmVuZGVyZWQiLCJjZWxsUG9zaXRpb25lciIsIl9jZWxsUG9zaXRpb25lciIsInNldFBvc2l0aW9uIiwiQ2VsbE1lYXN1cmVyQ2FjaGVEZWNvcmF0b3IiLCJfY2VsbE1lYXN1cmVyQ2FjaGUiLCJfY29sdW1uSW5kZXhPZmZzZXQiLCJfcm93SW5kZXhPZmZzZXQiLCJfcGFyYW1zJGNvbHVtbkluZGV4T2YiLCJjb2x1bW5JbmRleE9mZnNldCIsIl9wYXJhbXMkcm93SW5kZXhPZmZzZSIsInJvd0luZGV4T2Zmc2V0IiwiY2xlYXJBbGwiLCJfZXhjbHVkZWQyIiwiX2V4Y2x1ZGVkMyIsIl9leGNsdWRlZDQiLCJNdWx0aUdyaWQiLCJzaG93SG9yaXpvbnRhbFNjcm9sbGJhciIsInNob3dWZXJ0aWNhbFNjcm9sbGJhciIsIl9ib3R0b21MZWZ0R3JpZCIsIl9ib3R0b21SaWdodEdyaWQiLCJyZXN0IiwiZml4ZWRSb3dDb3VudCIsImZpeGVkQ29sdW1uQ291bnQiLCJzY3JvbGxJbmZvIiwiX3RvcExlZnRHcmlkIiwiX3RvcFJpZ2h0R3JpZCIsIl9maXhlZENvbHVtbkNvdW50IiwiX2ZpeGVkUm93Q291bnQiLCJfbWF5YmVDYWxjdWxhdGVDYWNoZWRTdHlsZXMiLCJfZGVmZXJyZWRNZWFzdXJlbWVudENhY2hlQm90dG9tTGVmdEdyaWQiLCJfZGVmZXJyZWRNZWFzdXJlbWVudENhY2hlQm90dG9tUmlnaHRHcmlkIiwiX2RlZmVycmVkTWVhc3VyZW1lbnRDYWNoZVRvcFJpZ2h0R3JpZCIsIl9yZWY3JGNvbHVtbkluZGV4IiwiX3JlZjckcm93SW5kZXgiLCJfcmVmOCRjb2x1bW5JbmRleCIsIl9yZWY4JHJvd0luZGV4IiwiYWRqdXN0ZWRDb2x1bW5JbmRleCIsImFkanVzdGVkUm93SW5kZXgiLCJfbGVmdEdyaWRXaWR0aCIsIl90b3BHcmlkSGVpZ2h0IiwiX3RoaXMkcHJvcHM3IiwiX3RoaXMkcHJvcHM4IiwiX3ByZXBhcmVGb3JSZW5kZXIiLCJfdGhpcyRzdGF0ZTQiLCJfY29udGFpbmVyT3V0ZXJTdHlsZSIsIl9jb250YWluZXJUb3BTdHlsZSIsIl9yZW5kZXJUb3BMZWZ0R3JpZCIsIl9yZW5kZXJUb3BSaWdodEdyaWQiLCJfY29udGFpbmVyQm90dG9tU3R5bGUiLCJfcmVuZGVyQm90dG9tTGVmdEdyaWQiLCJfcmVuZGVyQm90dG9tUmlnaHRHcmlkIiwiX2dldFRvcEdyaWRIZWlnaHQiLCJsZWZ0R3JpZFdpZHRoIiwiX2dldExlZnRHcmlkV2lkdGgiLCJ0b3BHcmlkSGVpZ2h0IiwicmVzZXRBbGwiLCJfdGhpcyRwcm9wczkiLCJlbmFibGVGaXhlZENvbHVtblNjcm9sbCIsImVuYWJsZUZpeGVkUm93U2Nyb2xsIiwic3R5bGVCb3R0b21MZWZ0R3JpZCIsInN0eWxlQm90dG9tUmlnaHRHcmlkIiwic3R5bGVUb3BMZWZ0R3JpZCIsInN0eWxlVG9wUmlnaHRHcmlkIiwic2l6ZUNoYW5nZSIsIl9sYXN0UmVuZGVyZWRIZWlnaHQiLCJfbGFzdFJlbmRlcmVkV2lkdGgiLCJsZWZ0U2l6ZUNoYW5nZSIsIl9sYXN0UmVuZGVyZWRDb2x1bW5XaWR0aCIsIl9sYXN0UmVuZGVyZWRGaXhlZENvbHVtbkNvdW50IiwidG9wU2l6ZUNoYW5nZSIsIl9sYXN0UmVuZGVyZWRGaXhlZFJvd0NvdW50IiwiX2xhc3RSZW5kZXJlZFJvd0hlaWdodCIsIl9sYXN0UmVuZGVyZWRTdHlsZSIsIl9sYXN0UmVuZGVyZWRTdHlsZUJvdHRvbUxlZnRHcmlkIiwiX2JvdHRvbUxlZnRHcmlkU3R5bGUiLCJfbGFzdFJlbmRlcmVkU3R5bGVCb3R0b21SaWdodEdyaWQiLCJfYm90dG9tUmlnaHRHcmlkU3R5bGUiLCJfbGFzdFJlbmRlcmVkU3R5bGVUb3BMZWZ0R3JpZCIsIl90b3BMZWZ0R3JpZFN0eWxlIiwiX2xhc3RSZW5kZXJlZFN0eWxlVG9wUmlnaHRHcmlkIiwiX3RvcFJpZ2h0R3JpZFN0eWxlIiwiaGlkZUJvdHRvbUxlZnRHcmlkU2Nyb2xsYmFyIiwiYWRkaXRpb25hbFJvd0NvdW50IiwiX2dldEJvdHRvbUdyaWRIZWlnaHQiLCJncmlkV2lkdGgiLCJib3R0b21MZWZ0R3JpZCIsIl9jZWxsUmVuZGVyZXJCb3R0b21MZWZ0R3JpZCIsImNsYXNzTmFtZUJvdHRvbUxlZnRHcmlkIiwiX29uU2Nyb2xsVG9wIiwiX2JvdHRvbUxlZnRHcmlkUmVmIiwiX3Jvd0hlaWdodEJvdHRvbUdyaWQiLCJfY2VsbFJlbmRlcmVyQm90dG9tUmlnaHRHcmlkIiwiY2xhc3NOYW1lQm90dG9tUmlnaHRHcmlkIiwiX2NvbHVtbldpZHRoUmlnaHRHcmlkIiwiX29uU2Nyb2xsYmFyUHJlc2VuY2VDaGFuZ2UiLCJfYm90dG9tUmlnaHRHcmlkUmVmIiwiX2dldFJpZ2h0R3JpZFdpZHRoIiwiY2xhc3NOYW1lVG9wTGVmdEdyaWQiLCJfdG9wTGVmdEdyaWRSZWYiLCJoaWRlVG9wUmlnaHRHcmlkU2Nyb2xsYmFyIiwiX3RoaXMkc3RhdGU1IiwiYWRkaXRpb25hbENvbHVtbkNvdW50IiwiYWRkaXRpb25hbEhlaWdodCIsImdyaWRIZWlnaHQiLCJ0b3BSaWdodEdyaWQiLCJfY2VsbFJlbmRlcmVyVG9wUmlnaHRHcmlkIiwiY2xhc3NOYW1lVG9wUmlnaHRHcmlkIiwiX29uU2Nyb2xsTGVmdCIsIl90b3BSaWdodEdyaWRSZWYiLCJTY3JvbGxTeW5jIiwiU29ydEluZGljYXRvciIsInNvcnREaXJlY3Rpb24iLCJ2aWV3Qm94IiwiZmlsbCIsIkNvbHVtbiIsImNlbGxEYXRhR2V0dGVyIiwiZGF0YUtleSIsInJvd0RhdGEiLCJjZWxsRGF0YSIsImRlZmF1bHRTb3J0RGlyZWN0aW9uIiwiZmxleEdyb3ciLCJmbGV4U2hyaW5rIiwiaGVhZGVyUmVuZGVyZXIiLCJsYWJlbCIsInNvcnRCeSIsInNob3dTb3J0SW5kaWNhdG9yIiwiVGFibGUiLCJzY3JvbGxiYXJXaWR0aCIsIl9jcmVhdGVDb2x1bW4iLCJfY3JlYXRlUm93IiwiX3NldEdyaWRFbGVtZW50UmVmIiwiX3JlZjMkY29sdW1uSW5kZXgiLCJfcmVmMyRyb3dJbmRleCIsIkdyaWRFbGVtZW50IiwiX0dyaWQiLCJfc2V0U2Nyb2xsYmFyV2lkdGgiLCJkaXNhYmxlSGVhZGVyIiwiZ3JpZENsYXNzTmFtZSIsImhlYWRlckhlaWdodCIsImhlYWRlclJvd1JlbmRlcmVyIiwicm93Q2xhc3NOYW1lIiwicm93U3R5bGUiLCJhdmFpbGFibGVSb3dzSGVpZ2h0Iiwicm93Q2xhc3MiLCJyb3dTdHlsZU9iamVjdCIsIl9jYWNoZWRDb2x1bW5TdHlsZXMiLCJjb2x1bW4iLCJmbGV4U3R5bGVzIiwiX2dldEZsZXhTdHlsZUZvckNvbHVtbiIsImNvbHVtbnMiLCJfZ2V0SGVhZGVyQ29sdW1ucyIsIm9uQ29sdW1uQ2xpY2siLCJfY29sdW1uJHByb3BzIiwiY29sdW1uRGF0YSIsImhlYWRlck9uQ2xpY2siLCJoZWFkZXJPbktleURvd24iLCJoZWFkZXJUYWJJbmRleCIsImhlYWRlckFyaWFTb3J0IiwiaGVhZGVyQXJpYUxhYmVsIiwiaGVhZGVyQ2xhc3NOYW1lIiwiaGVhZGVyU3R5bGUiLCJvbkhlYWRlckNsaWNrIiwiX2NvbHVtbiRwcm9wczIiLCJkaXNhYmxlU29ydCIsInNvcnRFbmFibGVkIiwiUmVhY3RWaXJ0dWFsaXplZF9fVGFibGVfX3NvcnRhYmxlSGVhZGVyQ29sdW1uIiwicmVuZGVyZWRIZWFkZXIiLCJuZXdTb3J0RGlyZWN0aW9uIiwib25Sb3dDbGljayIsIm9uUm93RG91YmxlQ2xpY2siLCJvblJvd1JpZ2h0Q2xpY2siLCJvblJvd01vdXNlT3ZlciIsIm9uUm93TW91c2VPdXQiLCJyb3dHZXR0ZXIiLCJmbGF0dGVuZWRTdHlsZSIsIl9nZXRSb3dIZWlnaHQiLCJjdXN0b21TdHlsZSIsImZsZXhWYWx1ZSIsImZsZXgiLCJtc0ZsZXgiLCJXZWJraXRGbGV4IiwibWluV2lkdGgiLCJfdGhpczQiLCJfY3JlYXRlSGVhZGVyIiwiZ2V0U2Nyb2xsYmFyV2lkdGgiLCJhMTF5UHJvcHMiLCJvbkRvdWJsZUNsaWNrIiwib25Nb3VzZU91dCIsIm9uTW91c2VPdmVyIiwib25Db250ZXh0TWVudSIsIm1vdW50ZWRJbnN0YW5jZXMiLCJvcmlnaW5hbEJvZHlQb2ludGVyRXZlbnRzIiwiZGlzYWJsZVBvaW50ZXJFdmVudHNUaW1lb3V0SWQiLCJlbmFibGVQb2ludGVyRXZlbnRzSWZEaXNhYmxlZCIsImVuYWJsZVBvaW50ZXJFdmVudHNBZnRlckRlbGF5Q2FsbGJhY2siLCJfX3Jlc2V0SXNTY3JvbGxpbmciLCJvblNjcm9sbFdpbmRvdyIsIm1heGltdW1UaW1lb3V0IiwiZW5hYmxlUG9pbnRlckV2ZW50c0FmdGVyRGVsYXkiLCJzY3JvbGxFbGVtZW50IiwiX19oYW5kbGVXaW5kb3dTY3JvbGxFdmVudCIsInJlZ2lzdGVyU2Nyb2xsTGlzdGVuZXIiLCJ1bnJlZ2lzdGVyU2Nyb2xsTGlzdGVuZXIiLCJpc1dpbmRvdyIsImdldEJvdW5kaW5nQm94IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiZ2V0RGltZW5zaW9ucyIsImlubmVySGVpZ2h0IiwiaW5uZXJXaWR0aCIsInNlcnZlckhlaWdodCIsInNlcnZlcldpZHRoIiwiZ2V0U2Nyb2xsT2Zmc2V0Iiwic2Nyb2xsWSIsInNjcm9sbFgiLCJnZXRXaW5kb3ciLCJXaW5kb3dTY3JvbGxlciIsInVwZGF0ZVBvc2l0aW9uIiwic2Nyb2xsVG8iLCJfcG9zaXRpb25Gcm9tVG9wIiwiX2lzTW91bnRlZCIsIl9wb3NpdGlvbkZyb21MZWZ0IiwidGhpc05vZGUiLCJfd2luZG93U2Nyb2xsZXJSZWYiLCJjb250YWluZXJFbGVtZW50IiwiZWxlbWVudFJlY3QiLCJjb250YWluZXJSZWN0IiwiX2VsZW1lbnRSZWN0IiwiX2NvbnRhaW5lclJlY3QiLCJnZXRQb3NpdGlvbk9mZnNldCIsImRpbWVuc2lvbnMiLCJ1cGRhdGVTY3JvbGxUb3BPblVwZGF0ZVBvc2l0aW9uIiwiX3JlZ2lzdGVyUmVzaXplTGlzdGVuZXIiLCJwcmV2U2Nyb2xsRWxlbWVudCIsIl91bnJlZ2lzdGVyUmVzaXplTGlzdGVuZXIiLCJvbkNoaWxkU2Nyb2xsIiwiX29uQ2hpbGRTY3JvbGwiLCJWaXJ0dWFsaXplZFRhYmxlIiwiY29tcGFuaWVzIiwiQ29tcGFuaWVzVGFibGUiLCJTZWxlY3Rpb25CdXR0b25zIiwiTmV3Q29tcGFueUZvcm0iLCJpc0FsbFNlbGVjdGVkIiwiaXNBbnlTZWxlY3RlZCIsInNldFRleHQiLCJuZXdDb21wYW55TmFtZSIsInNldE5ld0NvbXBhbnlOYW1lIiwiX3VzZVN0YXRlNiIsIm5ld0NvbXBhbnlBZGRyZXNzIiwic2V0TmV3Q29tcGFueUFkZHJlc3MiLCJwbGFjZWhvbGRlciIsImdldERlZmF1bHRNaWRkbGV3YXJlIiwiaW1tdXRhYmxlQ2hlY2siLCJzZXJpYWxpemFibGVDaGVjayIsImFjdGlvbkNyZWF0b3JDaGVjayIsIm1pZGRsZXdhcmVBcnJheSIsIm1pZGRsZXdhcmUiLCJkZXZUb29scyIsImVuaGFuY2VycyIsInJvb3RSZWR1Y2VyIiwiZmluYWxNaWRkbGV3YXJlIiwicmVkdWNlcktleXMiLCJmaW5hbFJlZHVjZXJzIiwiZmluYWxSZWR1Y2VyS2V5cyIsInNoYXBlQXNzZXJ0aW9uRXJyb3IiLCJhc3NlcnRSZWR1Y2VyU2hhcGUiLCJoYXNDaGFuZ2VkIiwicHJldmlvdXNTdGF0ZUZvcktleSIsIm5leHRTdGF0ZUZvcktleSIsImNvbWJpbmVSZWR1Y2VycyIsImZpbmFsQ29tcG9zZSIsInRyYWNlIiwibWlkZGxld2FyZUVuaGFuY2VyIiwibWlkZGxld2FyZXMiLCJjcmVhdGVTdG9yZTIiLCJtaWRkbGV3YXJlQVBJIiwiY2hhaW4iLCJhcHBseU1pZGRsZXdhcmUiLCJnZXREZWZhdWx0RW5oYW5jZXJzIiwiYXV0b0JhdGNoIiwiZW5oYW5jZXJBcnJheSIsIm5vdGlmeWluZyIsInNob3VsZE5vdGlmeUF0RW5kT2ZUaWNrIiwibm90aWZpY2F0aW9uUXVldWVkIiwicXVldWVDYWxsYmFjayIsInF1ZXVlTm90aWZpY2F0aW9uIiwibm90aWZ5TGlzdGVuZXJzIiwibGlzdGVuZXIyIiwiYXV0b0JhdGNoRW5oYW5jZXIiLCJidWlsZEdldERlZmF1bHRFbmhhbmNlcnMiLCJjb25maWd1cmVTdG9yZSIsIkFwcCJdLCJzb3VyY2VSb290IjoiIn0=